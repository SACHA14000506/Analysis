0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,802,803,804,805,806,807,808,809,810,811,812,813,814,815,816,817,818,819,820,821,822,823,824,825,826,827,828,829,830,831,832,833,834,835,836,837,838,839,840,841,842,843,844,845,846,847,848,849,850,851,852,853,854,855,856,857,858,859,860,861,862,863,864,865,866,867,868,869,870,871,872,873,874,875,876,877,878,879,880,881,882,883,884,885,886,887,888,889,890,891,892,893,894,895,896,897,898,899,900,901,902,903,904,905,906,907,908,909,910,911,912,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,928,929,930,931,932,933,934,935,936,937,938,939,940,941,942,943,944,945,946,947,948,949,950,951,952,953,954,955,956,957,958,959,960,961,962,963,964,965,966,967,968,969,970,971,972,973,974,975,976,977,978,979,980,981,982,983,984,985,986,987,988,989,990,991,992,993,994,995,996,997,998,999,1000,1001,1002,1003,1004,1005,1006,1007,1008,1009,1010,1011,1012,1013,1014,1015,1016,1017,1018,1019,1020,1021,1022,1023,1024,1025,1026,1027,1028,1029,1030,1031,1032,1033,1034,1035,1036,1037,1038,1039,1040,1041,1042,1043,1044,1045,1046,1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1068,1069,1070,1071,1072,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1100,1101,1102,1103,1104,1105,1106,1107,1108,1109,1110,1111,1112,1113,1114,1115,1116,1117,1118,1119,1120,1121,1122,1123,1124,1125,1126,1127,1128,1129,1130,1131,1132,1133,1134,1135,1136,1137,1138,1139,1140,1141,1142,1143,1144,1145,1146,1147,1148,1149,1150,1151,1152,1153,1154,1155,1156,1157,1158,1159,1160,1161,1162,1163,1164,1165,1166,1167,1168,1169,1170,1171,1172,1173,1174,1175,1176,1177,1178,1179,1180,1181,1182,1183,1184,1185,1186,1187,1188,1189,1190,1191,1192,1193,1194,1195,1196,1197,1198,1199,1200,1201,1202,1203,1204,1205,1206,1207,1208,1209,1210,1211,1212,1213,1214,1215,1216,1217,1218,1219,1220,1221,1222,1223,1224,1225,1226,1227,1228,1229,1230,1231,1232,1233,1234,1235,1236,1237,1238,1239,1240,1241,1242,1243,1244,1245,1246,1247,1248,1249,1250,1251,1252,1253,1254,1255,1256,1257,1258,1259,1260,1261,1262,1263,1264,1265,1266,1267,1268,1269,1270,1271,1272,1273,1274,1275,1276,1277,1278,1279,1280,1281,1282,1283,1284,1285,1286,1287,1288,1289,1290,1291,1292,1293,1294,1295,1296,1297,1298,1299,1300,1301,1302,1303,1304,1305,1306,1307,1308,1309,1310,1311,1312,1313,1314,1315,1316,1317,1318,1319,1320,1321,1322,1323,1324,1325,1326,1327,1328,1329,1330,1331,1332,1333,1334,1335,1336,1337,1338,1339,1340,1341,1342,1343,1344,1345,1346,1347,1348,1349,1350,1351,1352,1353,1354,1355,1356,1357,1358,1359,1360,1361,1362,1363,1364,1365,1366,1367,1368,1369,1370,1371,1372,1373,1374,1375,1376,1377,1378,1379,1380,1381,1382,1383,1384,1385,1386,1387,1388,1389,1390,1391,1392,1393,1394,1395,1396,1397,1398,1399,1400,1401,1402,1403,1404,1405,1406,1407,1408,1409,1410,1411,1412,1413,1414,1415,1416,1417,1418,1419,1420,1421,1422,1423,1424,1425,1426,1427,1428,1429,1430,1431,1432,1433,1434,1435,1436,1437,1438,1439,1440,1441,1442,1443,1444,1445,1446,1447,1448,1449,1450,1451,1452,1453,1454,1455,1456,1457,1458,1459,1460,1461,1462,1463,1464,1465,1466,1467,1468,1469,1470,1471,1472,1473,1474,1475,1476,1477,1478,1479,1480,1481,1482,1483,1484,1485,1486,1487,1488,1489,1490,1491,1492,1493,1494,1495,1496,1497,1498,1499,1500,1501,1502,1503,1504,1505,1506,1507,1508,1509,1510,1511,1512,1513,1514,1515,1516,1517,1518,1519,1520,1521,1522,1523,1524,1525,1526,1527,1528,1529,1530,1531,1532,1533,1534,1535,1536,1537,1538,1539,1540,1541,1542,1543,1544,1545,1546,1547,1548,1549,1550,1551,1552,1553,1554,1555,1556,1557,1558,1559,1560,1561,1562,1563,1564,1565,1566,1567,1568,1569,1570,1571,1572,1573,1574,1575,1576,1577,1578,1579,1580,1581,1582,1583,1584,1585,1586,1587,1588,1589,1590,1591,1592,1593,1594,1595,1596,1597,1598,1599,1600,1601,1602,1603,1604,1605,1606,1607,1608,1609,1610,1611,1612,1613,1614,1615,1616,1617,1618,1619,1620,1621,1622,1623,1624,1625,1626,1627,1628,1629,1630,1631,1632,1633,1634,1635,1636,1637,1638,1639,1640,1641,1642,1643,1644,1645,1646,1647,1648,1649,1650,1651,1652,1653,1654,1655,1656,1657,1658,1659,1660,1661,1662,1663,1664,1665,1666,1667,1668,1669,1670,1671,1672,1673,1674,1675,1676,1677,1678,1679,1680,1681,1682,1683,1684,1685,1686,1687,1688,1689,1690,1691,1692,1693,1694,1695,1696,1697,1698,1699,1700,1701,1702,1703,1704,1705,1706,1707,1708,1709,1710,1711,1712,1713,1714,1715,1716,1717,1718,1719,1720,1721,1722,1723,1724,1725,1726,1727,1728,1729,1730,1731,1732,1733,1734,1735,1736,1737,1738,1739,1740,1741,1742,1743,1744,1745,1746,1747,1748,1749,1750,1751,1752,1753,1754,1755,1756,1757,1758,1759,1760,1761,1762,1763,1764,1765,1766,1767,1768,1769,1770,1771,1772,1773,1774,1775,1776,1777,1778,1779,1780,1781,1782,1783,1784,1785,1786,1787,1788,1789,1790,1791,1792,1793,1794,1795,1796,1797,1798,1799,1800,1801,1802,1803,1804,1805,1806,1807,1808,1809,1810,1811,1812,1813,1814,1815,1816,1817,1818,1819,1820,1821,1822,1823,1824,1825,1826,1827,1828,1829,1830,1831,1832,1833,1834,1835,1836,1837,1838,1839,1840,1841,1842,1843,1844,1845,1846,1847,1848,1849,1850,1851,1852,1853,1854,1855,1856,1857,1858,1859,1860,1861,1862,1863,1864,1865,1866,1867,1868,1869,1870,1871,1872,1873,1874,1875,1876,1877,1878,1879,1880,1881,1882,1883,1884,1885,1886,1887,1888,1889,1890,1891,1892,1893,1894,1895,1896,1897,1898,1899,1900,1901,1902,1903,1904,1905,1906,1907,1908,1909,1910,1911,1912,1913,1914,1915,1916,1917,1918,1919,1920,1921,1922,1923,1924,1925,1926,1927,1928,1929,1930,1931,1932,1933,1934,1935,1936,1937,1938,1939,1940,1941,1942,1943,1944,1945,1946,1947,1948,1949,1950,1951,1952,1953,1954,1955,1956,1957,1958,1959,1960,1961,1962,1963,1964,1965,1966,1967,1968,1969,1970,1971,1972,1973,1974,1975,1976,1977,1978,1979,1980,1981,1982,1983,1984,1985,1986,1987,1988,1989,1990,1991,1992,1993,1994,1995,1996,1997,1998,1999,2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021,2022,2023,2024,2025,2026,2027,2028,2029,2030,2031,2032,2033,2034,2035,2036,2037,2038,2039,2040,2041,2042,2043,2044,2045,2046,2047,2048,2049,2050,2051,2052,2053,2054,2055,2056,2057,2058,2059,2060,2061,2062,2063,2064,2065,2066,2067,2068,2069,2070,2071,2072,2073,2074,2075,2076,2077,2078,2079,2080,2081,2082,2083,2084,2085,2086,2087,2088,2089,2090,2091,2092,2093,2094,2095,2096,2097,2098,2099,2100,2101,2102,2103,2104,2105,2106,2107,2108,2109,2110,2111,2112,2113,2114,2115,2116,2117,2118,2119,2120,2121,2122,2123,2124,2125,2126,2127,2128,2129,2130,2131,2132,2133,2134,2135,2136,2137,2138,2139,2140,2141,2142,2143,2144,2145,2146,2147,2148,2149,2150,2151,2152,2153,2154,2155,2156,2157,2158,2159,2160,2161,2162,2163,2164,2165,2166,2167,2168,2169,2170,2171,2172,2173,2174,2175,2176,2177,2178,2179,2180,2181,2182,2183,2184,2185,2186,2187,2188,2189,2190,2191,2192,2193,2194,2195,2196,2197,2198,2199,2200,2201,2202,2203,2204,2205,2206,2207,2208,2209,2210,2211,2212,2213,2214,2215,2216,2217,2218,2219,2220,2221,2222,2223,2224,2225,2226,2227,2228,2229,2230,2231,2232,2233,2234,2235,2236,2237,2238,2239,2240,2241,2242,2243,2244,2245,2246,2247,2248,2249,2250,2251,2252,2253,2254,2255,2256,2257,2258,2259,2260,2261,2262,2263,2264,2265,2266,2267,2268,2269,2270,2271,2272,2273,2274,2275,2276,2277,2278,2279,2280,2281,2282,2283,2284,2285,2286,2287,2288,2289,2290,2291,2292,2293,2294,2295,2296,2297,2298,2299,2300,2301,2302,2303,2304,2305,2306,2307,2308,2309,2310,2311,2312,2313,2314,2315,2316,2317,2318,2319,2320,2321,2322,2323,2324,2325,2326,2327,2328,2329,2330,2331,2332,2333,2334,2335,2336,2337,2338,2339,2340,2341,2342,2343,2344,2345,2346,2347,2348,2349,2350,2351,2352,2353,2354,2355,2356,2357,2358,2359,2360,2361,2362,2363,2364,2365,2366,2367,2368,2369,2370,2371,2372,2373,2374,2375,2376,2377,2378,2379,2380,2381,2382,2383,2384,2385,2386,2387,2388,2389,2390,2391,2392,2393,2394,2395,2396,2397,2398,2399,2400,2401,2402,2403,2404,2405,2406,2407,2408,2409,2410,2411,2412,2413,2414,2415,2416,2417,2418,2419,2420,2421,2422,2423,2424,2425,2426,2427,2428,2429,2430,2431,2432,2433,2434,2435,2436,2437,2438,2439,2440,2441,2442,2443,2444,2445,2446,2447,2448,2449,2450,2451,2452,2453,2454,2455,2456,2457,2458,2459,2460,2461,2462,2463,2464,2465,2466,2467,2468,2469,2470,2471,2472,2473,2474,2475,2476,2477,2478,2479,2480,2481,2482,2483,2484,2485,2486,2487,2488,2489,2490,2491,2492,2493,2494,2495,2496,2497,2498,2499,2500,2501,2502,2503,2504,2505,2506,2507,2508,2509,2510,2511,2512,2513,2514,2515,2516,2517,2518,2519,2520,2521,2522,2523,2524,2525,2526,2527,2528,2529,2530,2531,2532,2533,2534,2535,2536,2537,2538,2539,2540,2541,2542,2543,2544,2545,2546,2547,2548,2549,2550,2551,2552,2553,2554,2555,2556,2557,2558,2559,2560,2561,2562,2563,2564,2565,2566,2567,2568,2569,2570,2571,2572,2573,2574,2575,2576,2577,2578,2579,2580,2581,2582,2583,2584,2585,2586,2587,2588,2589,2590,2591,2592,2593,2594,2595,2596,2597,2598,2599,2600,2601,2602,2603,2604,2605,2606,2607,2608,2609,2610,2611,2612,2613,2614,2615,2616,2617,2618,2619,2620,2621,2622,2623,2624,2625,2626,2627,2628,2629,2630,2631,2632,2633,2634,2635,2636,2637,2638,2639,2640,2641,2642,2643,2644,2645,2646,2647,2648,2649,2650,2651,2652,2653,2654,2655,2656,2657,2658,2659,2660,2661,2662,2663,2664,2665,2666,2667,2668,2669,2670,2671,2672,2673,2674,2675,2676,2677,2678,2679,2680,2681,2682,2683,2684,2685,2686,2687,2688,2689,2690,2691,2692,2693,2694,2695,2696,2697,2698,2699,2700,2701,2702,2703,2704,2705,2706,2707,2708,2709,2710,2711,2712,2713,2714,2715,2716,2717,2718,2719,2720,2721,2722,2723,2724,2725,2726,2727,2728,2729,2730,2731,2732,2733,2734,2735,2736,2737,2738,2739,2740,2741,2742,2743,2744,2745,2746,2747,2748,2749,2750,2751,2752,2753,2754,2755,2756,2757,2758,2759,2760,2761,2762,2763,2764,2765,2766,2767,2768,2769,2770,2771,2772,2773,2774,2775,2776,2777,2778,2779,2780,2781,2782,2783,2784,2785,2786,2787,2788,2789,2790,2791,2792,2793,2794,2795,2796,2797,2798,2799,2800,2801,2802,2803,2804,2805,2806,2807,2808,2809,2810,2811,2812,2813,2814,2815,2816,2817,2818,2819,2820,2821,2822,2823,2824,2825,2826,2827,2828,2829,2830,2831,2832,2833,2834,2835,2836,2837,2838,2839,2840,2841,2842,2843,2844,2845,2846,2847,2848,2849,2850,2851,2852,2853,2854,2855,2856,2857,2858,2859,2860,2861,2862,2863,2864,2865,2866,2867,2868,2869,2870,2871,2872,2873,2874,2875,2876,2877,2878,2879,2880,2881,2882,2883,2884,2885,2886,2887,2888,2889,2890,2891,2892,2893,2894,2895,2896,2897,2898,2899,2900,2901,2902,2903,2904,2905,2906,2907,2908,2909,2910,2911,2912,2913,2914,2915,2916,2917,2918,2919,2920,2921,2922,2923,2924,2925,2926,2927,2928,2929,2930,2931,2932,2933,2934,2935,2936,2937,2938,2939,2940,2941,2942,2943,2944,2945,2946,2947,2948,2949,2950,2951,2952,2953,2954,2955,2956,2957,2958,2959,2960,2961,2962,2963,2964,2965,2966,2967,2968,2969,2970,2971,2972,2973,2974,2975,2976,2977,2978,2979,2980,2981,2982,2983,2984,2985,2986,2987,2988,2989,2990,2991,2992,2993,2994,2995,2996,2997,2998,2999,3000,3001,3002,3003,3004,3005,3006,3007,3008,3009,3010,3011,3012,3013,3014,3015,3016,3017,3018,3019,3020,3021,3022,3023,3024,3025,3026,3027,3028,3029,3030,3031,3032,3033,3034,3035,3036,3037,3038,3039,3040,3041,3042,3043,3044,3045,3046,3047,3048,3049,3050,3051,3052,3053,3054,3055,3056,3057,3058,3059,3060,3061,3062,3063,3064,3065,3066,3067,3068,3069,3070,3071,3072,3073,3074,3075,3076,3077,3078,3079,3080,3081,3082,3083,3084,3085,3086,3087,3088,3089,3090,3091,3092,3093,3094,3095,3096,3097,3098,3099,3100,3101,3102,3103,3104,3105,3106,3107,3108,3109,3110,3111,3112,3113,3114,3115,3116,3117,3118,3119,3120,3121,3122,3123,3124,3125,3126,3127,3128,3129,3130,3131,3132,3133,3134,3135,3136,3137,3138,3139,3140,3141,3142,3143,3144,3145,3146,3147,3148,3149,3150,3151,3152,3153,3154,3155,3156,3157,3158,3159,3160,3161,3162,3163,3164,3165,3166,3167,3168,3169,3170,3171,3172,3173,3174,3175,3176,3177,3178,3179,3180,3181,3182,3183,3184,3185,3186,3187,3188,3189,3190,3191,3192,3193,3194,3195,3196,3197,3198,3199,3200,3201,3202,3203,3204,3205,3206,3207,3208,3209,3210,3211,3212,3213,3214,3215,3216,3217,3218,3219,3220,3221,3222,3223,3224,3225,3226,3227,3228,3229,3230,3231,3232,3233,3234,3235,3236,3237,3238,3239,3240,3241,3242,3243,3244,3245,3246,3247,3248,3249,3250,3251,3252,3253,3254,3255,3256,3257,3258,3259,3260,3261,3262,3263,3264,3265,3266,3267,3268,3269,3270,3271,3272,3273,3274,3275,3276,3277,3278,3279,3280,3281,3282,3283,3284,3285,3286,3287,3288,3289,3290,3291,3292,3293,3294,3295,3296,3297,3298,3299,3300,3301,3302,3303,3304,3305,3306,3307,3308,3309,3310,3311,3312,3313,3314,3315,3316,3317,3318,3319,3320,3321,3322,3323,3324,3325,3326,3327,3328,3329,3330,3331,3332,3333,3334,3335,3336,3337,3338,3339,3340,3341,3342,3343,3344,3345,3346,3347,3348,3349,3350,3351,3352,3353,3354,3355,3356,3357,3358,3359,3360,3361,3362,3363,3364,3365,3366,3367,3368,3369,3370,3371,3372,3373,3374,3375,3376,3377,3378,3379,3380,3381,3382,3383,3384,3385,3386,3387,3388,3389,3390,3391,3392,3393,3394,3395,3396,3397,3398,3399,3400,3401,3402,3403,3404,3405,3406,3407,3408,3409,3410,3411,3412,3413,3414,3415,3416,3417,3418,3419,3420,3421,3422,3423,3424,3425,3426,3427,3428,3429,3430,3431,3432,3433,3434,3435,3436,3437,3438,3439,3440,3441,3442,3443,3444,3445,3446,3447,3448,3449,3450,3451,3452,3453,3454,3455,3456,3457,3458,3459,3460,3461,3462,3463,3464,3465,3466,3467,3468,3469,3470,3471,3472,3473,3474,3475,3476,3477,3478,3479,3480,3481,3482,3483,3484,3485,3486,3487,3488,3489,3490,3491,3492,3493,3494,3495,3496,3497,3498,3499,3500,3501,3502,3503,3504,3505,3506,3507,3508,3509,3510,3511,3512,3513,3514,3515,3516,3517,3518,3519,3520,3521,3522,3523,3524,3525,3526,3527,3528,3529,3530,3531,3532,3533,3534,3535,3536,3537,3538,3539,3540,3541,3542,3543,3544,3545,3546,3547,3548,3549,3550,3551,3552,3553,3554,3555,3556,3557,3558,3559,3560,3561,3562,3563,3564,3565,3566,3567,3568,3569,3570,3571,3572,3573,3574,3575,3576,3577,3578,3579,3580,3581,3582,3583,3584,3585,3586,3587,3588,3589,3590,3591,3592,3593,3594,3595,3596,3597,3598,3599,3600,3601,3602,3603,3604,3605,3606,3607,3608,3609,3610,3611,3612,3613,3614,3615,3616,3617,3618,3619,3620,3621,3622,3623,3624,3625,3626,3627,3628,3629,3630,3631,3632,3633,3634,3635,3636,3637,3638,3639,3640,3641,3642,3643,3644,3645,3646,3647,3648,3649,3650,3651,3652,3653,3654,3655,3656,3657,3658,3659,3660,3661,3662,3663,3664,3665,3666,3667,3668,3669,3670,3671,3672,3673,3674,3675,3676,3677,3678,3679,3680,3681,3682,3683,3684,3685,3686,3687,3688,3689,3690,3691,3692,3693,3694,3695,3696,3697,3698,3699,3700,3701,3702,3703,3704,3705,3706,3707,3708,3709,3710,3711,3712,3713,3714,3715,3716,3717,3718,3719,3720,3721,3722,3723,3724,3725,3726,3727,3728,3729,3730,3731,3732,3733,3734,3735,3736,3737,3738,3739,3740,3741,3742,3743,3744,3745,3746,3747,3748,3749,3750,3751,3752,3753,3754,3755,3756,3757,3758,3759,3760,3761,3762,3763,3764,3765,3766,3767,3768,3769,3770,3771,3772,3773,3774,3775,3776,3777,3778,3779,3780,3781,3782,3783,3784,3785,3786,3787,3788,3789,3790,3791,3792,3793,3794,3795,3796,3797,3798,3799,3800,3801,3802,3803,3804,3805,3806,3807,3808,3809,3810,3811,3812,3813,3814,3815,3816,3817,3818,3819,3820,3821,3822,3823,3824,3825,3826,3827,3828,3829,3830,3831,3832,3833,3834,3835,3836,3837,3838,3839,3840,3841,3842,3843,3844,3845,3846,3847,3848,3849,3850,3851,3852,3853,3854,3855,3856,3857,3858,3859,3860,3861,3862,3863,3864,3865,3866,3867,3868,3869,3870,3871,3872,3873,3874,3875,3876,3877,3878,3879,3880,3881,3882,3883,3884,3885,3886,3887,3888,3889,3890,3891,3892,3893,3894,3895,3896,3897,3898,3899,3900,3901,3902,3903,3904,3905,3906,3907,3908,3909,3910,3911,3912,3913,3914,3915,3916,3917,3918,3919,3920,3921,3922,3923,3924,3925,3926,3927,3928,3929,3930,3931,3932,3933,3934,3935,3936,3937,3938,3939,3940,3941,3942,3943,3944,3945,3946,3947,3948,3949,3950,3951,3952,3953,3954,3955,3956,3957,3958,3959,3960,3961,3962,3963,3964,3965,3966,3967,3968,3969,3970,3971,3972,3973,3974,3975,3976,3977,3978,3979,3980,3981,3982,3983,3984,3985,3986,3987,3988,3989,3990,3991,3992,3993,3994,3995,3996,3997,3998,3999,4000,4001,4002,4003,4004,4005,4006,4007,4008,4009,4010,4011,4012,4013,4014,4015,4016,4017,4018,4019,4020,4021,4022,4023,4024,4025,4026,4027,4028,4029,4030,4031,4032,4033,4034,4035,4036,4037,4038,4039,4040,4041,4042,4043,4044,4045,4046,4047,4048,4049,4050,4051,4052,4053,4054,4055,4056,4057,4058,4059,4060,4061,4062,4063,4064,4065,4066,4067,4068,4069,4070,4071,4072,4073,4074,4075,4076,4077,4078,4079,4080,4081,4082,4083,4084,4085,4086,4087,4088,4089,4090,4091,4092,4093,4094,4095,4096,4097,4098,4099,4100,4101,4102,4103,4104,4105,4106,4107,4108,4109,4110,4111,4112,4113,4114,4115,4116,4117,4118,4119,4120,4121,4122,4123,4124,4125,4126,4127,4128,4129,4130,4131,4132,4133,4134,4135,4136,4137,4138,4139,4140,4141,4142,4143,4144,4145,4146,4147,4148,4149,4150,4151,4152,4153,4154,4155,4156,4157,4158,4159,4160,4161,4162,4163,4164,4165,4166,4167,4168,4169,4170,4171,4172,4173,4174,4175,4176,4177,4178,4179,4180,4181,4182,4183,4184,4185,4186,4187,4188,4189,4190,4191,4192,4193,4194,4195,4196,4197,4198,4199,4200,4201,4202,4203,4204,4205,4206,4207,4208,4209,4210,4211,4212,4213,4214,4215,4216,4217,4218,4219,4220,4221,4222,4223,4224,4225,4226,4227,4228,4229,4230,4231,4232,4233,4234,4235,4236,4237,4238,4239,4240,4241,4242,4243,4244,4245,4246,4247,4248,4249,4250,4251,4252,4253,4254,4255,4256,4257,4258,4259,4260,4261,4262,4263,4264,4265,4266,4267,4268,4269,4270,4271,4272,4273,4274,4275,4276,4277,4278,4279,4280,4281,4282,4283,4284,4285,4286,4287,4288,4289,4290,4291,4292,4293,4294,4295,4296,4297,4298,4299,4300,4301,4302,4303,4304,4305,4306,4307,4308,4309,4310,4311,4312,4313,4314,4315,4316,4317,4318,4319,4320,4321,4322,4323,4324,4325,4326,4327,4328,4329,4330,4331,4332,4333,4334,4335,4336,4337,4338,4339,4340,4341,4342,4343,4344,4345,4346,4347,4348,4349,4350,4351,4352,4353,4354,4355,4356,4357,4358,4359,4360,4361,4362,4363,4364,4365,4366,4367,4368,4369,4370,4371,4372,4373,4374,4375,4376,4377,4378,4379,4380,4381,4382,4383,4384,4385,4386,4387,4388,4389,4390,4391,4392,4393,4394,4395,4396,4397,4398,4399,4400,4401,4402,4403,4404,4405,4406,4407,4408,4409,4410,4411,4412,4413,4414,4415,4416,4417,4418,4419,4420,4421,4422,4423,4424,4425,4426,4427,4428,4429,4430,4431,4432,4433,4434,4435,4436,4437,4438,4439,4440,4441,4442,4443,4444,4445,4446,4447,4448,4449,4450,4451,4452,4453,4454,4455,4456,4457,4458,4459,4460,4461,4462,4463,4464,4465,4466,4467,4468,4469,4470,4471,4472,4473,4474,4475,4476,4477,4478,4479,4480,4481,4482,4483,4484,4485,4486,4487,4488,4489,4490,4491,4492,4493,4494,4495,4496,4497,4498,4499,4500,4501,4502,4503,4504,4505,4506,4507,4508,4509,4510,4511,4512,4513,4514,4515,4516,4517,4518,4519,4520,4521,4522,4523,4524,4525,4526,4527,4528,4529,4530,4531,4532,4533,4534,4535,4536,4537,4538,4539,4540,4541,4542,4543,4544,4545,4546,4547,4548,4549,4550,4551,4552,4553,4554,4555,4556,4557,4558,4559,4560,4561,4562,4563,4564,4565,4566,4567,4568,4569,4570,4571,4572,4573,4574,4575,4576,4577,4578,4579,4580,4581,4582,4583,4584,4585,4586,4587,4588,4589,4590,4591,4592,4593,4594,4595,4596,4597,4598,4599,4600,4601,4602,4603,4604,4605,4606,4607,4608,4609,4610,4611,4612,4613,4614,4615,4616,4617,4618,4619,4620,4621,4622,4623,4624,4625,4626,4627,4628,4629,4630,4631,4632,4633,4634,4635,4636,4637,4638,4639,4640,4641,4642,4643,4644,4645,4646,4647,4648,4649,4650,4651,4652,4653,4654,4655,4656,4657,4658,4659,4660,4661,4662,4663,4664,4665,4666,4667,4668,4669,4670,4671,4672,4673,4674,4675,4676,4677,4678,4679,4680,4681,4682,4683,4684,4685,4686,4687,4688,4689,4690,4691,4692,4693,4694,4695,4696,4697,4698,4699,4700,4701,4702,4703,4704,4705,4706,4707,4708,4709,4710,4711,4712,4713,4714,4715,4716,4717,4718,4719,4720,4721,4722,4723,4724,4725,4726,4727,4728,4729,4730,4731,4732,4733,4734,4735,4736,4737,4738,4739,4740,4741,4742,4743,4744,4745,4746,4747,4748,4749,4750,4751,4752,4753,4754,4755,4756,4757,4758,4759,4760,4761,4762,4763,4764,4765,4766,4767,4768,4769,4770,4771,4772,4773,4774,4775,4776,4777,4778,4779,4780,4781,4782,4783,4784,4785,4786,4787,4788,4789,4790,4791,4792,4793,4794,4795,4796,4797,4798,4799,4800,4801,4802,4803,4804,4805,4806,4807,4808,4809,4810,4811,4812,4813,4814,4815,4816,4817,4818,4819,4820,4821,4822,4823,4824,4825,4826,4827,4828,4829,4830,4831,4832,4833,4834,4835,4836,4837,4838,4839,4840,4841,4842,4843,4844,4845,4846,4847,4848,4849,4850,4851,4852,4853,4854,4855,4856,4857,4858,4859,4860,4861,4862,4863,4864,4865,4866,4867,4868,4869,4870,4871,4872,4873,4874,4875,4876,4877,4878,4879,4880,4881,4882,4883,4884,4885,4886,4887,4888,4889,4890,4891,4892,4893,4894,4895,4896,4897,4898,4899,4900,4901,4902,4903,4904,4905,4906,4907,4908,4909,4910,4911,4912,4913,4914,4915,4916,4917,4918,4919,4920,4921,4922,4923,4924,4925,4926,4927,4928,4929,4930,4931,4932,4933,4934,4935,4936,4937,4938,4939,4940,4941,4942,4943,4944,4945,4946,4947,4948,4949,4950,4951,4952,4953,4954,4955,4956,4957,4958,4959,4960,4961,4962,4963,4964,4965,4966,4967,4968,4969,4970,4971,4972,4973,4974,4975,4976,4977,4978,4979,4980,4981,4982,4983,4984,4985,4986,4987,4988,4989,4990,4991,4992,4993,4994,4995,4996,4997,4998,4999,5000,5001,5002,5003,5004,5005,5006,5007,5008,5009,5010,5011,5012,5013,5014,5015,5016,5017,5018,5019,5020,5021,5022,5023,5024,5025,5026,5027,5028,5029,5030,5031,5032,5033,5034,5035,5036,5037,5038,5039,5040,5041,5042,5043,5044,5045,5046,5047,5048,5049,5050,5051,5052,5053,5054,5055,5056,5057,5058,5059,5060,5061,5062,5063,5064,5065,5066,5067,5068,5069,5070,5071,5072,5073,5074,5075,5076,5077,5078,5079,5080,5081,5082,5083,5084,5085,5086,5087,5088,5089,5090,5091,5092,5093,5094,5095,5096,5097,5098,5099,5100,5101,5102,5103,5104,5105,5106,5107,5108,5109,5110,5111,5112,5113,5114,5115,5116,5117,5118,5119,5120,5121,5122,5123,5124,5125,5126,5127,5128,5129,5130,5131,5132,5133,5134,5135,5136,5137,5138,5139,5140,5141,5142,5143,5144,5145,5146,5147,5148,5149,5150,5151,5152,5153,5154,5155,5156,5157,5158,5159,5160,5161,5162,5163,5164,5165,5166,5167,5168,5169,5170,5171,5172,5173,5174,5175,5176,5177,5178,5179,5180,5181,5182,5183,5184,5185,5186,5187,5188,5189,5190,5191,5192,5193,5194,5195,5196,5197,5198,5199,5200,5201,5202,5203,5204,5205,5206,5207,5208,5209,5210,5211,5212,5213,5214,5215,5216,5217,5218,5219,5220,5221,5222,5223,5224,5225,5226,5227,5228,5229,5230,5231,5232,5233,5234,5235,5236,5237,5238,5239,5240,5241,5242,5243,5244,5245,5246,5247,5248,5249,5250,5251,5252,5253,5254,5255,5256,5257,5258,5259,5260,5261,5262,5263,5264,5265,5266,5267,5268,5269,5270,5271,5272,5273,5274,5275,5276,5277,5278,5279,5280,5281,5282,5283,5284,5285,5286,5287,5288,5289,5290,5291,5292,5293,5294,5295,5296,5297,5298,5299,5300,5301,5302,5303,5304,5305,5306,5307,5308,5309,5310,5311,5312,5313,5314,5315,5316,5317,5318,5319,5320,5321,5322,5323,5324,5325,5326,5327,5328,5329,5330,5331,5332,5333,5334,5335,5336,5337,5338,5339,5340,5341,5342,5343,5344,5345,5346,5347,5348,5349,5350,5351,5352,5353,5354,5355,5356,5357,5358,5359,5360,5361,5362,5363,5364,5365,5366,5367,5368,5369,5370,5371,5372,5373,5374,5375,5376,5377,5378,5379,5380,5381,5382,5383,5384,5385,5386,5387,5388,5389,5390,5391,5392,5393,5394,5395,5396,5397,5398,5399,5400,5401,5402,5403,5404,5405,5406,5407,5408,5409,5410,5411,5412,5413,5414,5415,5416,5417,5418,5419,5420,5421,5422,5423,5424,5425,5426,5427,5428,5429,5430,5431,5432,5433,5434,5435,5436,5437,5438,5439,5440,5441,5442,5443,5444,5445,5446,5447,5448,5449,5450,5451,5452,5453,5454,5455,5456,5457,5458,5459,5460,5461,5462,5463,5464,5465,5466,5467,5468,5469,5470,5471,5472,5473,5474,5475,5476,5477,5478,5479
6e710a1f78a4a733020a4b2d1f07b6fe4c6684f0,1f73722ffb375010e74eaa5b99004ad88df93bf6,cfa7c5e3bba0efbc88dfb2fcafb983723a1606bc,951b253fc38c09114d0fe273a3758a15c151a8b4,48055baa938695fa302fc8aa51a5a2df24c73fe7,a23a1a64ec883102dc8a3a2860c3b0d2fffc4134,f3539c7eb312b127122084279002d3fd238c9a17,7aa5ba380ef6aea0f2f594873b4c7378adab0f18,def1380280b9be6d166d3938ea4b0254e9b55dc9,9f70cf9eae15b96483b9f2daffd7d2b0521d56e9,5483ce4a46fa89b5a71ae1716de83220c5a6c7aa,cc06ae9bf7a1fb6cee46c40d2a6388ac05d3f5d1,7972f1ac1b85a5174c9f293ad98abc87edfe42e6,bd1c4ff86fa21358949e925274f5b8146f5d02cd,40aee3954ff7fbb9db6b367ae63e6b05dfa6199c,be2aa80bc371d600ab2230c545051ea6454577f5,08cf1d1fb517d9778fed6e1857a2b71df5c368be,afc1dbf04e163963fe32d080c889eabe3bffdfd8,68b033741b02c3ae54d649e858790732bc5c2d27,4f5d25205a9cec988de300a452d641a155406b79,2d5b2326b24fc18ac3fbde0bc01ca1def85e1b29,d1e97bc85338c563f4f732bcf917a08b3cbf4792,d40c01673e866c3c3b5b51bce66e9518924cc31c,5f7d5690a97b2ad95bbe381695638f0c7ca2c4ff,8d340a008767c5d954b7539e825b4c90eb15ab9b,46722e306a029ea5264004f5d2b2784757a2ddc7,84e490b66f61e11366b62efc42e64b60ae7db35b,fc939bf6838f4bf986e0b42fddee3df6712371a5,c66246c26429180e6a1d1a92499b8d2b637790a5,0be1e18d9e61a33d2c865d0555f1a65ae14833da,37f373401c3fefa832be0d52f617f0711b0bb831,c7d6d6fd0d30f0f98b87c0a2c50f653839e4e1fe,e02facfe1a2116423c826e66ae093de0f5e241f4,48c7a0cbe042a2e3d94fd30b49ecf86d68cf86da,6fb39861af2187d4160ded7e0a8a31941194e13c,5c798eb50aec6040f415b6def1912d4345f8310d,2e96cd40c91e1b40196d0d50a9e9c36e04b8465a,6ab9d41e3e9fac941966d877e57f54b49003a8a4,fcae8332d2a1b3a3fe0a971aee0493484e33a70a,523d0f70d18b5496008c9063b9f6e9321877d574,020f71e5fb37fc3ea1f547dd466190910bc78749,72b9a7f37393ae20805b1c99bb95169d4354e4b9,2b720c7df037fc7d9b1b83d3fb6cb12edc6e8ed2,f00c70d865c12d1c6679d0982c31a7916b56bdc2,d1758567765117cd395ea47319d3acde7fc663b1,275870d751f909ed771ef6c1dbfc547d7cf106a8,a2d367db9446287c22821f6595217ec5180ec959,fe96b3bb16be25bf936daac1d004e579f1ca770a,ce8cb2ab13dfe6b68fc1ecbf7ae0f165e51014bd,423b7ab26233e24cbaf6aa21f2fe97b7671d1341,e80b85d504ae9fb64b8cff4f05bc3a3a4ec8f716,52811ea2077918a08c10634f3665972378781463,59aedc8a224a12f88f2f4ecd48056ad46fafb9d2,53d3e8ce790cbf01580dad2391e9b7691f5d6c3a,fd9a406ee4cfa64b8ff4e898564d20ad142a8765,517b8beb06f63301629f0ec3f58f6b667061d3fd,5c715cd84d600c0df0215846efaece2ab4673546,17222ad8ac4456d13440e6867d66e8f08643f462,dff4cea14174548f52d6fcc66c9bfd7a339b7336,08dc6300117b9137b6df1ad6b54fec47e2c310ff,02ae34d1d3f3c9f9c25160cb14c119958f25af13,e484646c60eaca1f89921db7058d8927302d7226,8e0e1c32ff1ed1da4f09fc9917812e6457e6fef7,7217b9d270e31fe1e68803c8e25b0a03869f1556,9ea5c69bda2ed1ec0c69c081e91b72dcf6a6e81c,14313cffebe7d676ee4716a017df7e3febae6f6f,f36294048060163b60cb5e4cf8a7bc09667353e0,83246a74940203e6c4a45ecf077df3c7c82d02c9,18c5b2536c114c86b810bb3ee94474fec596a462,a6ef8926ae451bf9f604f408f9ac8e2e8dac31b6,318df20fe7e123c4ed2cbf606287453c075fc7ed,2a0efba8fa54feff44b3ae87a68578d3a59c11b1,c02386113b1867f37c1328c308425bc830b5fe6a,c6e4d8c9f534d3e70e79bf718e40724d56186109,a57988b0e5e2a55f573cba66cf19b05031920d19,eeda726246f5d06f6520e388550c2041f0435399,02227560d99240c9c5314413a0f12235caec6c40,5b5ecff53b50a67179f6245bf60047c59f027e26,46dcd98ceb70720f96d4cfa23b001ff108bdaebe,dcbfc80c4a14b91194fc8b74760b079cc0a4ce42,23492711d234f2fa647bac46997e361bcf985423,f10279a29d47d389a31da907695673a992555adc,a39a81a17e11007503076d1fc7a78b5b0cf8d40b,371dfcceb69200fd4105b5d60f2e0cfa57f7ca7c,8d5925b52b48b4c69934ea5c48aa298a2ec74e84,a30aafa016409048747fe9730d6f7892eb12d7c5,a3611513fc4de7234ef49ae46d646b0795ac7110,d0eb1d1dd1d9aed27c433d78a76962340fcbfc1d,2e7597726743c34058cf9ad6c6ba5839ff9ec4dd,1ae9dfaf45e0a51ee7d604551f7e1932d1787975,e83ed048d46b0a55c651bfa3207ac1747a07ba00,1c2d56e8a91b0f64317a9e02cfd4b45b03d3019d,2cd92aa6e3f44df6b0552a28b83022a7f92f8946,79ad715f02e02af76da0c6e47c164a80768a01ab,e5b948a1687270192753993c998d61c7a91faf49,c9bb30e8910cae0682e9cf50619df778abddbc59,b81a48d78dd9be1c3eae57cece4c88df92c30247,0b873b95a840f8cfdb51f4ceea3b524d46d20715,f11bd7cbff7ee68afa55dcc6baec97b2adaf43e1,d964c73d749538ee7ec7b3cbd96a2ff1dba201b3,d82bedb44d79b652ecb94dee6003257c5b09d9c3,fc390074467c8c1f1dccdde93e35aae38a57bf4e,4be08392978de39ffedf1688041bbf546d7b3a28,9b2d76e5c7c950e17c3a7227a1019d10b9ec44a2,99e257660ba7c6cbd5f85850ff040f63c577f04e,e350a38760c93e373562d6a3e906df5904250146,660431cf4f7e2bda887a0e35ad3a76bdccc14110,f65e9aa63f8f266023a986507834585a9580c555,535cbcd9f20b29b3c5a5d69f654cde57969b3788,faffec9020f9a9f82667bad8e519662d1e850927,2d650f890ff1409f2944bc56cdc4b518b35e06f5,0367064bb686100fd518b88e0bfcb1c41fce8818,1c4f7bde1c8f7d8c0e09484daa626fa4f40e38e6,ac11ad359369119624b1733fc3d242f03d941a8c,b9a22fb6f6f460287993d3cf087ae5ff036a6c21,14d6a09601b68f60e6b18142b597a6890e5d581b,54fdc54dd24c9ece2bfc32ca12e88545ec923a96,0ff7c091143e8326eb88dabce078ca76778a587b,a759e78d4d486c05044204391b3037b7db052fa7,32ed6601f216dd1300876719cce837bfa9824e26,7df11e15457e8d8bf4e5730d20ec2412c429e091,d6c57d547c4c0ed26f82bb20966780a136a55ad7,7a6d566a42b441d0c34c8a11c8b953ff9ae3b2f7,50e133fb2078edc9abe79fda3b721eaf28409ce4,15f7f84678a24533e42f2fde230c5f68d1b33035,2499f70cabfc8d17f2c6de124a81fc0940a70fa9,ee6ae79be8d0303db4bf48a948bcaee46b329fec,6526a5e83c1fb9644da34e44fdc5a3bb8a357c84,e58b5d453fa5bd658522a2b0355b2bb3597b6320,5904d90ade8663f5552b51036740352a9b796892,7011ede6cf0710b10f97f56b6e223baf8519a0ab,42f704c86bbc636c314bc6dd6d20947055f3a56c,fdb75911387f77912c37dcee0af4a2f2e0977f3c,538a97b115ba4ea44c57898ac7c4fbb77fe0e9b7,01ecd7c66d6965ad54e0180c822e6a5ba4731c10,fa0478f4f6fb724233dc3e00a9f8dc557ce7cdbf,33753d4afd864c8db0044420c642b8f0c3511756,dff5581168e78c4e7707637f07700087278e2a03,a0e27ea42a1ba71400bbf9407d099018fd9e31c7,64a64f5ef90dfb4b3b862d0943437f11e35db938,b8cb20968f5a3f1a0c9c38fae680e8df14ce82cb,88b9c3081d701bf6203ebbfa25c97277722a9c37,8c5a4a7bafc3685d433ee277fad060e8b046e920,58f50814635aca8626c8628ab49891ba7e2226ec,c7a78e629ce207c7efdecfec27f9d076e9d946c4,ec81d7ca5100fd97fe8428db02a2cdde967ac87d,1f978b638712eb9b3f43824bfc1e95a3bb70cd14,81c40b9820625d3f529b116baf6b4a3d45dd2f75,2b085ae34295d5ae1d7eaea5a55a2df220bf1bed,e06a9f676caf67933f778313ceac8ef23d0e47c2,d6a354e203e4901d3eb6a36b3aba620fdb222da7,bca350df1f52134e8543774dd5df4c5dfae357cb,39ee22556bb13ec9ac64bbbafb94b1a042058432,37787b96ab21fc226ff267aa26ae58a58b2d20f8,f2f704eabee027175b0c1eaf934c08e7721a9b24,9b2d0e390912a83994dec719b3603daca98790a1,e1fc87d2d57c2d7ee941e651f33b582fb000dd73,18b6de93c21793547c2317b28854c96f68fabf16,fa8f024d082998c7ae48b21f3eb6f8f2ca56a719,a295e82baa22958b57ef4d9e2d8bdd186a3cc686,6bce493e47fdac9e64a9ae1cb3c358f31975a43a,9daac904cbc627e4a43e72f72159c552b25caf74,fc743aa9d6e88ca0741c4a1715eae08e86b29285,658d5a97c708a926b0425585f9437a0c1fc2b81c,db695fe90b181948f271e4970ec83d4de9348577,9c06ff87decab7357d44d8766f6a277ff887d921,198d448ceab2bc061d18a1a689056bd2b96b76c5,8c27540ec037a8eadfb3403f3605b34d4e4ed0c9,5b39e092699f30553a12547b943380c6271f736b,46b15af8c5fbfb026be350ae16eca89fcdc87aac,70f4b5549622b0ccc70bd2087700c510f10fc6f0,61e203c962890075b3ac52d8a8309144c80a23cc,51cd2f37a67d1d6a2c3e97a2a667d3881b9f71bc,b7e86cdd772cc47a031d187b79d075af8155c2e0,198e589e62f687a91d4c27057ebad918e9f9bf3f,fa510146c09a498e25e590ef5cc558074337fc4f,e5841c2092b5587c73990f6bf62b7ab17e208156,5d5f09ea371d19fdd9e487a5ce45a26f97fe9b3c,191939dee130a65161cf4822c303f98d4ac0d300,31b26e74569478f57f7eef05d6c12236d8498f25,5db07bdcccf727ec50d8d7c85740b52b3c5ae362,badca06dd1c70207215c7186a31955901b637661,1e30aa94791f6fefcca779f047667f3e42260be8,883157b93e4ee9f827446930303798d22d35f888,6f8302fed2a4ae538f2733baeadd08e7eb835e08,9029cca391c6cb2e6f77ea3d6b99bf60644fa446,91ac1574aae31a29baf883d2cf45e4e1f5aa9bbf,82ca28e2ec8fe9771f01b5aab3386311ecab80df,9f8120beb6b351608652002e057f97f8f6c0dfc3,18061ad1fc81e68636ba24bb79e83c67247965b4,9e85ac3f0020165b008c111682e47c1cc135bf7d,069d003efc343a9a2d627d5805431be5d88e5344,c66b23747627a2b432e0068561d457cab9f97ead,a6a5e3033d424468cbd3a6af051aabf3b5bd4d00,ff2f32b914a5486e4f4870c6bc6fae14a85fb086,8d851390736dcb916646b043a5ed7ff8f212e37c,2902a9a3c07e881dd7aeae0a55189facfab1966c,86d1c40475d6962e6ad256f248636467bf0a58cf,fe487b3336f8279d8b74eff05c5ebfe6e01281f0,3e5c9e3cfe8588f85ec8dcab879c1371901b94ba,3076802a78f14eb1b4f23831d5a1ccec79b26554,5063d256221e7fe8a8c433401bea988d7ccb0a35,750dbb845b51219655bfb105331c4ad1907dfc6a,a6b9ca3f71d44dbe2562e13d63e4b30fcaccdf50,81fec3193ad12a0f78eb021c4a1548484595860b,902a680951f318488a4bbe0184a3a223c5709b01,b84f786db6d85cbf9973adfccdf135cb71824b87,a2b5c7a9aa0b5f617502bf6003d43913d507a11f,571725cb7bcf091b5457f1e2a857aa51e8a70f7e,c95e6a35b21bc5bcad2ac3a2d2d58843959b52f9,f6322b7fb747b6a6830f6f331e836690adb95067,10118c9c1b00d31868d6ab43e8171e3c16efdcfc,ee94e6d82370b6b6086cae2693dc2fe31388fb64,6d2e199e31f8109d21b3865cbc45b34d8b725a03,dc58a824466ed492fc6d5ab11960eb86584eff26,56c04300e8f05bdaccc2ec60fc751c09d86b7b68,03542311e2a461f0324ec700e98e78b5540bcff8,4746531428aaf9e3ae7d505b5a203350d138ea41,05b14fd01e43ab8a385bcfb53102a270ef2d9375,89a0de6a8968ffaad64422377a1fc67da93b843c,77868bf772a03d61701bc0d32dfafea63a0382c2,83fcd3e1e220b9f3aacc63aeb4da0a898684dd0b,dcde20001063fc25f622e4b1c7775f735a7255f0,82bd5be8735c01a767fc3ebc3eb92369ac68302d,e1188f368087ba4bcfada44d645e4f8661d7f9b2,2c03505da053d07cd3f729692738912bdfc2a5b7,05a457b9a0e8b1e7917670de9ace5572b9ab117e,12d3f281814ad5be2d1012b9ea41781414724529,da7d5df6de444468ebdb4b79ae0d0dc3ac90b59d,5240c8825896997f0845e354a51b1ac725dfe06b,3fd058c02a1f8881110409be33ad56d3af6386f6,12e1aaf5f6df97584e795b5e2cfedf5c5f180455,bb3ddfe426cf4ff5390f742d35bdba02a4ce7624,09b1a632c17b34650d2bcf748be14690c9882e52,537e13241a7ffd99e5a3676e574e3cd9ea9aae03,7b7b37726fb328a6d796b64f2947689c6a8eb3e9,f463013f34a5c5c61b7dba22c9ed4096fbd3b218,ac266c0e40b5d09f9f9f1e300f358ee1532f7aa5,9967600bdf3b856f00c9078282847d76410140b4,d19212c03ec7eb82e37e11746bac7a064738b686,c4bb60046de9ffdd1cf07cfcdba201df06b194dd,539e1ee1d68c27defd0aaad09a1a0b68e059de96,8ff6e5a90f725ce7acd56f2c919221d8c179270f,f6377533645ca415addf9e1c428600e10053d72d,850a888c546bab897542a2d89ff76ca9debce0ee,b308d598b603056e3ff7e8d53e099b677d4e8d38,d8c3ef1363fd2c9d88df1093db4fe04340bedec6,3d30c8ca715492e11c5c7d196668d5dcec1bcbed,da69323b29fe8e373364b9399bc67523dcf2af62,c1ad21bf966d01dc5cceca82f102c0f7843d5617,efa756288e712849c78c4230df05c2d1abeba91e,2f757454dc41f4d130234aea68b348da4f12a0fa,36e99429c22af17bcc3ecf6031ed531055aaada2,fbbf092e4986635703bf9a3bfd57d4f639c86095,1f0c99d0e012d84863e6a818facb143c9f03fac3,baf03a919c75822d1dcdaa7ffd460ec635b6a50f,096c5bd0c1674733aee8822dbceecd069935472b,007939d9fe34faa83d4b242dcc37d2e1894c4f09,24b5e00be753889e4907473ce57271acb290cb67,7f293a06a0b7ec9b554d51f150991efa9b7dd54e,95a524ea06e546330ec3d95b9c139b7edc599b86,a9880a18fe1c30ede7b409093dbc4b5c24042d33,8b9f2d5177c849b37809ab38035e1d757d963314,8f35a1d28e795833e6a095ff55ecc37f3db882aa,314dfa80d4e815ba3c689cd3ad0d508209665bf6,c07d659cf8f7b16452472da6052a1de326bcb6a4,545536e34f180edd32fbb21b0a5613e6407f0980,fb3ccf60e9a2d55a1abe8aafe38e45861e7a8eac,d7651dce4016976d41d71d07d9f5e7f4bebda902,3cf36b8cacd27557e0af0695c2c827f82d29d6e4,973704dc1c284a148c989e3da92a546bd0d2af0d,3b28fffbbac2a707906e35c7c014aa3eecef3510,225afb8bad88c9bbb70b24d9ac3c28fb21f39465,1c23268d775b1d10c5f6fa55cfd07965949cf036,9235380f05e88de1a881950cb21a3d254585d5df,aed63ae84f10aa758a905d5827994068edb71e0d,041e9565ab8b187ad0b88780a5fc0a5ea24f29a1,0c0ee3551826c822646c8076ac138c97d8db3071,d9665bfc1819077c7a41d0c132a27ba4b08d94ea,c4828bfd09ea8c579fa8840cd77733c64b8ebb39,4b6e0bd179c5f728761c953249b6dda4d33fe18a,c871265452e473224b3cf4f0f66497691b75d7b7,d0f7f364ff959a69ab961eda69956bd42bc17815,6607bdcb3ba69d2ab4f41be6292cc5a6df6365ba,dcaacf4cae54fe199055830f097d4ed504b3238c,585a702138f1cc87df3b41509cc42ad34b6acd62,6f22f4b49c2a3a59840d28e6cbe0c37a56ab1f90,d4c3cbccaf05beeb11712294ef4dd0af25d9d0f4,1a283ab1be5b495f5be8cf6c2ab2b96453dd32f9,c0ccd54005c0fd2e493c9faa280061b9487c5f96,41fefde64401d2173ff019a896c4dd72b4fa5636,080e96a6cdea2f5fe8727b8249044b89bc54395d,497147e3e6ba0a50c32817e14985ca5bf1041f9d,40708bdf04dae6aa49bf8f3617f2efc16c83c5f8,84ad767a87c69a265e9105c51efdd87ee57b8635,366fb741f0772c8309f9dfe963f6032b091d7b89,f0e8d41fc8cc746ba9b66b72646db6bd8b25c6fc,df5930892d9c6eda392b96bdae2e7afd342f7866,f4237388ea9b93278db12a43c9db9f18e51b6f7f,a9dd1573eb0edbfa977da90dd3bcb1863451ec2a,08fc7320de07cc41318fc7505a2f3ccc2a6b04d4,cc7509b7578f0edcab46177cf05b1bb7de8fcf6d,0cdcb1fd8df9e9185cd3abb128d927d25d7de8b5,186fd10776a0fd576d5deb733af654c7e20b3f30,463a2c89c3840c35ceadd786a6b1781e0e8fd5a3,3c047a1e700c4e47c80745d0e9145578b95f36be,9c14146a98888377702bfb217dee1dfb6892ec30,cf15c51722dd4b406876dce1ccd52eea787d84b7,90c42ec03e34dc63fb0b62bae4e8e7671c47cb31,b691f81b482175665b45cabc056e58ab0df03ff8,ab8b608744500c6af9933df5977a2aa054ac3c04,fc8ef4d22c95b13b907ed14b19cea8ff5fd1e653,d2e4494b4719f956babeae65c0f6ffd340a5e234,ade1bb48431ace910cb718083b39ee333f52401f,8054f746bbd6191f5a297cf6f7f26f9fefaba307,6b610aa411df723b59d4b683baeebd5d65e356b7,e292769f29748054e1e364ee3e7d442c709447b6,fa21d6f7e70f057c42d4af9c40ed47d3d841e5b6,bac647543497f0aa2a9f92fe726e1eb18631b4cc,cc6ace18900eb92606b6a312cb1ac5c4ab5f435e,c947676916c99f2feb5e183aef9629a1b21d863f,1f3dd9ff8a4f8302eb4c0bf4072d2bb7d8aeddd9,ca7f64f016d8354aecd38ef73405e1b3267ca791,06005610265c342b52051b997a43ad6e963c5a0f,0c0845e95cfc5d4bf0909e4ad86be9da5b00b277,3ac2567bcab0d108d52160f9dda91464bbb594cd,4272bf28b26cb1e4bb33750e938fb02e97caf2ac,1029078559eec0cc515e2a9ad3ed18c83bd00dcd,5c4da82785513c3a904726e3207299e75e290d75,46c7cba7d0aabf179654a0a1c423343552e40210,9a686e7388c5ded097e6c5ffb1554ec2461113c1,709c7f71e5be2eab1164ff580c4682d797916c20,579410e7f8d8b864005253e9350b1e7dbf362421,d86ae886e0f261171ab9cd73f867d86bfcd84d3e,4e2846d5f453b1190b1a6fe73e804ec726d072cb,5d7896111816441de05158671897406f6476baf5,4a8068579ea5bf1e637f8bed09a203508abde315,30c217ec400b9175e9490807748ec3e48fe2ba22,d80acb29c04a8e92a3ddbc539b0be8a521098870,2f4bf4db63516297d2c695932fb65fdbc360558f,a1236508420e902ca672cac736788a19d49aba40,14bdf34a9bb5f2b93205c2972d54889d4fd2aae9,da461de2db180f85c628552eea1a3a92ff94c8d7,47061a88cefcaaedacd1d570699f30a4266c23af,e43138b0b5f0912cb358c0e73eb6247b273eba75,1b84f2ee7a41e8ab12faa73130187763ee5858ea,12aeeec70feae05a87a5adfe7b9c2c63744be37f,4b5ef21ed6104befc80e1dd501f964e7ca6f1ce6,c6c1971ca1fb5054a0847b0884488165606bd703,68e0a9c71443738b1842e99925d37bf545f5a151,1d3567f3051682dd0ea8406a3f605cb5c42de27f,7ebc8107a22038c06c0b0ff095f9f73d854e1422,9003b5b5aa4465e84c934819f45c1ab4365dc51c,ae27582d1ba0cb6c2b18d30a81cb1b82033069c3,783276d948afe1c69b6309be9d1e8828df0ae9fa,f83bbc1d68bd457dfccd370afb248126ce031eb6,1e6ad5c3ab06188c6690b4af4fd7dfe7e3cbb47f,5b5f84db290450f81cc6b93cad7e7900ef9a6cf2,4b8647bf6ce2b478e6bc90d0158ce81939a14378,2d1614a2077eab0b981d4a0c4c6e10a7ecda71cf,8543a0056a90f06bcc69d0052fcafea7131e689b,76ace5792c06da864999374c8a1f0d734d8d5a92,47949e9b95761db19ef2c37321b1f6249c57ec19,1fc99654bdd1ddbfd75c90cbfc3f1f08acf929b8,25ad33cb9e0c73a0898be36f3dbbf96a5e14efe0,acd569595ee919d1afed3884cf7584cc609ad9ef,a4ffd393334bb3d825738581add321c94f47983f,3631295c437c5b8915afc7b2b259496eb2d5d782,6527a801c181090326f44bffef6709f898cae70b,b12610d35e7798c66fc1d9b0811d10aadb87569d,f3a785108f853e327001dcd435e92525d7fba96c,881a4ee8db1e1826b749579d2284ace982c953ca,13188390f33649b1881dbd4d9f2440894a36463a,ed73c356c7a7987c78b8f6ee6dd7ec1e5f9b3e67,d83cdb913332b02fd310f5cdf3df045162c4cc54,2b24ae34b760239677bb3cef4e7f17f6d586178c,bb014c3ebfe20bf7a7fce5e7a8124121de695350,2a671338058e46b26a951ba01246b33a67d0eff4,0a75cbc380f537c06e26fa5bd9654cf878a9587a,aad194a34655f5c1ed5e4b221ea9d01aad166b38,0f13370f354da824b97a8004f4b8dd9d23500241,e91d0f0510ee8d69c76ee89b4e57341418866c6b,842351710e2897c032b788a8e61fdbf36e18bb2f,7cfbc0da48c8cc8939e97427d8ee5b22c5e55f28,672b58548c867ca6e5e341057d4af8797d7478e8,7ce5950963068f4a797da805f895842adad38a3e,8f7c59ce888a687a6c9089caf0c5469984a073b4,e5dc3ad337f2e6650b7422dd7584a072974b1270,3c644cf87ec8c0e6313b3a10b6cfd66279b8093f,e8d0d4c1ddb40c7752fd4ac6a70ee619323deb4d,06d490a4bd763fb634596f2755b436f7f8fbbad8,a7a380f93478356b287791b917d6e68e89d20a8f,0079828734d62dbc2b44ccf4f21e3dc1daa7b90b,dcdfd7ed9e8c34637a54e52ffe1eae6692d05e01,99189ff527554aa345f63fc038fc8eacf28cbb39,f0ae42aa934c10686c613277bd7a0837f6a1602d,c5ae09d77e8756ab73e1c39f77f1b303aa4ba384,71fd124ddb1f311a8cb64b608f385c87b67cef14,d385c90c2e74fdfc0070f7d92d6d0c260251fc16,792839b464bc3df40f773147b7694b761cf23b5a,e875e6d59875be86fb8de8df7642c370b652eb76,58d613bd8d20a77f4da8c1ee49cf4028c011a2a7,d8bfc8c8f8864f9c22e0409780d5dd3fb30497ff,26ee48193928f525fe0885cba6b28fdc8eff6af9,d41364faa4f73fc885dcc9e99a838e8fa4c95998,b148046add84f6c5bd19aeceb10c1a0fcf2e1283,fbf5a51ea5f700be8d92a4485e468ebfb67cf310,9e1b0acab5721a6805743e291f56d6d0ee8ba851,c5b90dc474fbc86b57631123e1f4519d758cd4b3,0c0455fd66eed4113bf53829cfdb501901cc70f9,ce98d00852e21ce34d8d247db7f6be138967b559,fb7e1e265dd9e560b3a3127a6593b6602f60026c,1c9c43c1d4bb76d7e47cdfc9c6681a38305a95e4,4025b62c7d8e0cdc7ebca856ccafc6365183fb87,2aa4681cb82f5b3eee09b2b491a16ceadf52bd27,bf7e9d505a75728fd69a51b1bee30e645c813c27,f7ab3a70ec426669398b4f16d0f2dd5458d87a2e,9867d9f2817fd6dd20d458022de3dda8c3b43b2f,18f181ada7826542725fa4a9460307d606695b5d,bb7e8951cb6ef08ca9df5fc036217c3a45c4d33c,e280c8636792c5426e54868d464c9d28287a98fb,e21d4d436b51d88f9554751982cd7b8552854c49,5d61fcddd479319473e0a9b891cff59c5884a173,fdd505d9850350592d758a28048d3f0f78e5b6e5,78504bde01522101a21e175f724d83f1d36e687d,08014552131b5e55f28513f24dbaed7172b7e228,1e1365c7b48da04db1e29f225ab1fabe40d13c5e,3a45bc5b6d9b884be25f98982c9cabcaecdba96c,54a7796ff234a9cbd2c66f8b1e5621f0898402f1,c1ba07bb65f41afed35c12c12b40b4e8d03a408a,aff82362cf13646b0dfae6375c895df7d5ca6b6b,ba3c2201c6689818c457b5a03d14eb75af55063c,8e5867eda8328e4cb2e103d098d0c9f3c2fab50e,e42da5d9d21438c220768464b6a1f5b36bad92a5,c823ac5673e9da094a3b24b99987a533c548dac4,7573e9eec065ac1ccc2134aa751a191da3ca3dff,1cdc902f3d7cf877b4db7a31f19eb1dfd2fade3e,e9ea52189a92f7e2ab051e4d75c4e0c872034b18,ab0a2f761f4529daa0a1e7128ffb8ae417a0104d,7ebbaea90e8002f5542e22bbe92075ffb5383d2a,721730b00b1dc2ea616a3e7958e4ad15134de975,05aae985d9d0e26cf278cdd6f69672ebe3f8ed92,f7222ca6c3b6c1018a52fd649029394e6608f1db,b285f17023da248bdcb3093283e4b9e930bdd09c,af858a6ca224946195b1923a780678b20cb99603,fa027a4685bacd9e32b3bc7d875717b4457f6829,edf56632b8a5413f5e0adfe2d1b65e595b88a1d0,6c4f5135420abf982605f2fef8e8e31e9b3b41ff,a3e4cbe0bb26acab07f53a7d4ced1f24045e08e0,83444ebe71a3a6b76bc813ea8be48c12e07fbda6,57eff0d0c37ec003ebed48d3334c93cd9c038f64,169a31600365ab05e1790ec2478aa382b87f152f,0faf0131f604e5eed73ea1559b702f319fc7d8a1,18a6d9c773f88576dfb083162982613e12fdbaf9,c8c94b8a1f451888a2b9cac0f8a7454a1a02d688,4345758ddcc52224322e15b3a8cf353c365b3d6a,3491906594b069a042f38e7526ca67f46efac2f4,aaa0eafa092993a067583283b26b76e79f1f65be,dfc232415a89295afd1a944a65ddbcd3e6a4adb9,f2db15c31f0910316316698d1b7cd3922513d677,638def643f318731ae058597f5e89231896fcc4b,bb2dc86de1fd207c0a4a8b649536364179fb2ab5,cfee7161823a1d24aa55e5807a6f31f1c3b6af7f,ac7733fd6994a61ed8917894c476164fd8724565,692142457acaf2b99911babddff1e337ca1d59e7,9b3a46e20540dd07cef3e996cc498e5fd6bd4996,2c9438da238f61f9e952d301cf22fbe70c5a9405,63d88c74b7a11d7633584b007e94314ba9a555d1,145cc675d35b677157eb6d3ef57c1104dd5142e2,01e1ca4bfd51741bf7d905266d24ffc86345b711,43ef84b729332ccdfe95ffae4067a415c2b37a85,e02b8f8a5aa4c89234114b53050bcae9722798b8,58693fbcb3236a9adb0f47088d88ee3ef7178cb4,d42fcbdb2fcebae67c757ccd8e5fc664550de1b2,6a6c06acdf555e13b22bce6c5d017e5d8bae0654,91291520cfd5f6c2c91fc242018860c5d1d277e4,2a3b56daa03253a8abccf5d895a310831ef0275a,1e6915db879b63e6bd5caf8b6022696af3044184,8025900b3ac50d2923aa8e52515dd5e55c4c3ad3,faf997271b36b80d9a342bb1a5a666e8a7a1fb56,796c8329d6db90687d7340cf947fce29a5191f40,7bbba6995a12412cd7cbe1ca693057c5299ab4cb,ea030e732e3556a2a4fa51bcaabc080927ddfa48,310008f48c0a830138d35b3024106560d55b6bd2,423371e79077e43cf5e87fb053e0d885b6d5192a,ca22dac3f852c7290f60c3c3a5d66fbecfba91f4,bcba29320f5f6f860335266d6be8249418ceaedb,9dc30fddc109504fc80fb62e33554d54cca47faf,764f56955d499fae11db1aed6e7f0d2d0886e6f9,2933e5773b1d64a9348024b2a6e8dc6dc90e6590,0fa8bcc008b6a011d6fe41e64ea4379d0b57f20b,7897aa6a83a5e63da487e72c2735fb042259f6e4,19c1c3bb9bc175f9c19b026e7cda1d0fe47ade90,3b501993588d27d91ad526a436e3a10ecc8d6e8b,739708f1af316d9b31a83b9e5d0cc7303155853d,b353d07bcca9fb62ac387d69d3e99004e27f14c0,6b43922648fe2dfcb4cb1aaaf5d795f00a6aa174,de219058597dbdefe93f6e4e935d797a05dc74e4,b268dfbb824ef307862e489aef7e71bba4cdcac5,d434c5d0cca6d501a95748e1dbbddc5726419d77,b957ee1646d893fd946a8b9a53c779957ae7a240,996c0c164a083c3dc2fbf2768750e3b3a81d77e0,5ae01f1f990b554ba075df63013159a23ba693a2,12ddf37f23cd77903729b3e611ffae10e96ded47,7e6304ce63da6c6341cb072abfd08caf0456328e,b9b73fbef5c0f18aaef22ef60442518d7f23ec83,39430886ba9364a7c99c9f0e58b009de3f659601,675d4c8fc848ec5438e48deb2e8218b6f0078814,7460c082a39251193108da52ce05e63f3e3796d1,567127c109added3dbe04c191a510a3dec1b1672,4158f9746365df20b45f8c2b5c0d1436dc1756dc,fc9cb0ce163e54e4bba232d2bbf2f79dc495585d,4cdfc143ea07ff13a26b06ea9f1595289835e3c2,8b697afded6133210249f943c220756951b64cbc,49685c8bb46468bb2e3d65d8f8d8d506e636f653,3e18e999c7a0648cc9eee72202e07669df3c4ffb,4dcae270e688a3567b767b85354029dd1cbc7c0d,8916830e8a2d551b87ed64559246621d439a8694,46b2ce2ee046ec3c35919ce72ce67262dfc37c5b,c12ae52424b3b93bb8f2ca39a3daa8392caa1348,57096ad696cc088ff94f6b7e81dac1e068df2c3c,9a012f530ea7d938e3d64ad6786b0f1c67f19df8,b01933b17f1978c9da0a252ff6791671e01bdcae,613a83c56a439a0c0f4a2363881653838e4b6bc2,b0521ef7e0d2946fe237abe67e309d88108d9e4a,499101c88c8158844e7bbdcba35b8fe91bed8314,1a6879a0023a2892323221622e0d1e759613c68f,3c1bf79202f0b95e9b01baa988b797c0f9a88571,d19b226c543bf404ae41025cbd0bd00008f10499,fe0f518f50b1c224c75338ea689f8cf5cf1c9335,4332119866de75449fe5ad24be0dde4517c6f7ef,1cd5a3229c2fb9b35fa0ced635765bf59497d074,a9d0cc42fe5ef7fe35256bff4844b9f1b6d347e1,5ea537df99415bf8035684d4cf93898329b7d4b9,ed7ac7cf743ca4a303dacd2bfc0c3fd834500103,927361d78782a836d5c3d09687c8930012d2c0ab,f299ecf3309c48dd02f16621da4e5019fe0b9c30,a573059d0504418f5437db4a600672a52cb4d8cc,9ac2b15e4a56be293b6f2b9f2b8d8b1e945ee998,b122db9edab9a5b2f93c79a5fd880e9d33671c9a,856e3cf0075136c15f3cb38cfc1a51cefbeccb09,1358d274dbb7b94bf81e37c88883a68b54a88c84,eb66fe4a1f5357be07c356fbd28b6d013d88e87d,a6f963066692aabd04aad9114e6ea1ccb32cbb5c,e2dc384d7bbe3414047049a67ca48b4885eba493,b95cfc9b579e91a456847b2369295dfae7da8bc6,007a701755f318562b0cbf2005d84299733d9b45,3f0a000feff036509963ff93d59fe3e084611c08,5929846a208518582a7783d8715c401ea1e2acf2,6ab8b148472782919ca5a1c7a51e5f477e40d4fc,4670a7fb9ae1a56afbdc1892cd254a80938983c9,5c70086611bca0da6879b569f97d116b666b890e,6d3f22348ccfc7c138e0b70e0821dd03de635801,c678ddefaefa05b1f15914e9ee08824bbd8ad8e0,70101ee3ca37b56a471b3731667c75c447da90cb,7f31bc04bdf8821cf24754bfdc9bd4c0e8660228,7f162008a2eea123a43f241e5e214dadf6b9e88e,931a67ff52aeebb5950d28b7ba9c2ad1c0bc80be,cbc32459f8f36e5c57a9db74709e813e5f77bb5e,f4c926ea82771de22a32150a8b0b1a502faf34b2,2a6c6409a919c1091ef3af778cc9738c57d67575,dc666f419e691e6a04342bdd9cf2e899455a8738,9bab875f03ffea0aacd1d92fbbecc96d491c1201,6abd9f7508c121fada3fdf2c188a68097bb50b12,26581ccd6688742b5458c474d05939c371390df0,99abe75d485722a7fa48204a18f4eb5d9f9a1d19,8f9bb4b451fabcb0f2ddbb90b3701e84a45d3693,950f90879c76b36d13b6a377db4b03e45588167e,5a6ccd587231ed1268dbdf142bf1f98065ad8348,a197ba858ecf364f9ddf2fe56f3611cf97b4c3b1,8d3d915dbd0ccf716f0d15b6b2396cff214d9cd3,326beb22c6aa872cbc0ad3706cfbe706bf9eab41,ba62c59dae2385b279a0810b2f133f0d9664583b,d4f978ddd58fc47f472d0dbac79b4b96ca1453df,0714c7cbe61a8db315e2aac578614f5a706f8014,44b5c55e07b51833c69f1ab03c9000db0734ee85,7b3e0d4297a5a8257a8e33b28ad7f2d3a23edb05,afff37e03b91c9a4e02c284646a7629b4f9d45a9,e31a222cef8ef08f4dafb01f41b6a2d6c26d64fc,f08b05b15ac09709c948fbcb8f843f421c1d4db1,02cf7cbffaf42ba6cc76452bfa70db8b2da611c6,b69e6ca5c1a74f5a5646df240bea701922caef83,a4118e288f01ab16e861cd7ac107fff62a32b86b,61b2d1f34c1f3c2b14fe4a131ec5d552c3dbbb61,75d4db00e1b1d4ef53ca4d0c5ac247ec92cdb2d9,08e918330eb2555fc90b67957f53ce08141d3b13,fca88f8e3d44d743e82ef2fb3ce880f8b98149a3,ad882055edb50369bd174ae56a372838aa89cdae,a7363a2ae67b585790896de45f57154474480fc9,cc4ab51ee9e001a0a999a2a43ad5bd323494b800,1744e2803f1600761afb2ea8a91a7fd12f7fbc94,2af899b74b5969bb56a2ef813315a1d85f0c9fcc,f25a61670e378dd7f24ac45f55df00632979192e,2f2a2ddaf6ac85da7cfcc5957614eeb880b795d3,2bc9e7ea86a8cc1c3b2436c46115c87080228004,76f154179b8dc6940355d7fe7db468314ca39e84,30b9f935e7ea56026e5c5347e897df52a3ad18a7,e9464c0a6db34576fa390d041e702b1f03c74b37,2a59e0ef4b8e70742a21bca76a629853aedbbd09,4080feff61e8dc1cd4af2361990c33c9f1014147,97accb47de63ee5063eda23641c6017e29ab81d7,e3dda4407a3f59bd73350ac780f43eb885967b5f,cde43197f980538e411d851735ac7a63ddd613e1,a67f0a33e68abf1c985db28b19ce70f427fd48bd,9d14fe21a4044dafc984e1626ac5f465e35179ee,69273dca6188a3d7d629d0d32dcf9cdb5b6c1036,0dec6e76fb544fa3e8bf5fd17f16314735971dd7,a3fdeb4da91d8aef50f40a3f9906494593ce2eca,f820d06fc0d1204b0cb386214ffeb42ccec669ec,321fd029ec5c9c3c9717f1ede0add49d8a709a01,566c4d59a177be4b65d17540576eeb34d28d24ce,a516976947341e0e18bcc0858d85d34cd0c02cdb,f44d4852ab758cdf0011efa028c85c68b8b36bee,31fae6431438e26d6b47b988164847048ceab314,7200c43dea3dbfbd9d38b937c44b6e71744b05c5,25aa4bd3665d8b265f03fa2b3e7ab6ee68256367,45ae5c7e42b07ff24e2385de57f70e9484a46ae3,cd28a018fb327d38a30c502bedca66cffb26f271,596ccd59a11ad5e9fda19ccd0f4fc714d8d3394d,e3700ef350bf28b3ae3afa2fca5eba01e7801741,301ad592142079d36f4d33f5309c103c7f4f5dfb,f8a8ea748a0b3015490ccecec7b97f0ab2daf9c4,8aec465b44dedb7deacf80111ea5286914093094,046e3a2f58decdc3eb9f69e14fc0f5c3a9e6b4c3,0802df0f7376ca7aaffa7a23b2cc1f2c4c0c8aa9,136bf34297a9ac8049e451800df819ebf092cdf2,c29e3d681f2a46cc3288dc4f38925efbcf30c233,5f667c031cdf02adbee9ef83cb71990333c58ba3,6525cc4035fe8df3308c03f0ca9f450728e122ac,34f3f4196084768b2ef6b3db4608d8eccec50364,c53f2106109153eda10c47a6960a5a579d1530b8,84cf29ecf31c67c7640f8821d4fdda625a173aa6,e6aae3a8bffb981b8dce19642cc1ab831a428cae,d21d3a94abdbcf5a890fb1b5de28f1060e9e584d,b4fb13bca9c41e3e59a5ea8e3f8ec4bc0110ba17,17f52a2e559e68d5c6ccc98fcebb5523161fd0ed,10b1c517cd5c0083cd0ad7a5f23167d66d1e59fd,fd7a4362caf2cd69368a38f2f71ffe19706e341c,753f278d10fc0c92e912965379401ac182644101,491786ce4182daa57ea61deaf701f756f57f6f1e,de73ad3115c19d5f0771754d233d74055a2a10bc,2fb2221d487d925fd5d716173a80c798986aadf0,d5f586bd4e1a20fc09a33aaa5c2b9320f4a2aa72,809f0f89cb53548a7d0a9f9f52c4b36f60c7b6c0,f80f577748c0dbde45d24654247a82a7121d456c,b723f82bd55e1b78a370925393d3ee638020da0b,540aa2e7ed7c0c0add1daad7fb548e156435e0a2,8d4fd1dabbae4d7ebc2b273af9275ef8bd0e1ce1,6e5eedb3fcebc5894c41733bd26c8b4d9197873b,3b7d0b95466139a147fc504b7c18897dcc826c65,6a82f92584b36e28798479c82c0d3263c6347b90,3a7519fcb190a096f4f00b9da357f79acd517bc7,61f3eba79d382c68c27ecb9eb3ad259fc5b75c20,5e6f4f18ff315825284d697adc1d721983da8693,b8e9475505fee98aae2819c03a33c7aa3db843d3,a14acdf6395f588dda7597bb4c7810dacaa503d2,c4768568c9981ea4efc942d045d9349ef2596af8,85a20aad64be04127106f492e26f6ad6d6c228c8,1325e114108136eea3fe77a4a270a2da7eff98e2,bae46709ecb13f80aaad0d279b3618ab83d09275,dc5f850d1d9b0b952b7f0dabd6778cf0f7675cba,b4abfb93676fb0abbab1d9bac40ba2714a3872f5,9a9e7268162f9fed146c74a8acbd234d9bc2ed84,b262c2359c9ed53dae3ce2ce7a0092273f4eec65,c30b59103b6f1390b0040ee74b985248e8b1b849,0f36265123605cac6af05b7b8c8f4036b58f4da4,cb177b56b7664ab323558545737646896f4d7e70,15bdcc3be2b84f68ddcd822da52ef045ed89e57b,6a8ba1fecb47e5ffd5387654d0cdb7c372ccdc9d,75efbfd6b21ab36fdbc440bc001c133f824bdc3e,f7e42d2ccf949a5893a439227c8c6bafd2598f26,e7bf6afe5052d30a2c448ae958058dd83410d076,f3e1598dfded2857a8734ecabf7b46bfb676655d,c7fcb448c99ae5fe9db9b217bea1233df3ee6e57,d0721feadc1e0cae6efa3e0d82f523debc5b8d97,5f47ad718e0ffcbbe6cd2f8d32b2e345c4af3a48,745d383af12137ccbcbe1f3cb4c9db73f87a66ca,2c94388179fd38bc95e3b47af96666493027f57d,d746a54c2ee50711283bb49e557f58ca491e1bac,a56d4998cf16ff08f5593fb7d4dda66ca05dc269,76d5be34f0327c8d39015d2962005babc2652cf7,dc9fcd4140b3e200e4dad8d1a52a6f76b7de4d9c,e6fe53fdae66b16ed0f0d32d68b75e62925c4c71,e92a76bc1a13cf05986a649609ef23af5d67eddd,03e65c98da2a0b2e27b14713543c2a61d56b1237,0d3545e5f68d024cd4a05724a15746d8dad986d2,96ba5ec21669469c9345910630f7783069c5ee7f,6b1b592887d9ce95fb5af1e216bff56b18c7902c,ccd0fd51a5712ef1d85110eb61130c906fe4db13,d98897b11e6f4adf1d0a91591b1bb6be501cd29e,3fd9cf1753a24587ee9d64d2133784adaa099219,35b688b7ec3b32dc671af4c7cb9556ff26e761eb,4e08e17ec536038c9c0dd888f77b912cae82816c,51a9539c693b805714674d1641dd52c5a997bd0e,4aa4c6d31f98d8cd80ccbcf99ded77bfc6de25c5,86eb3a2fa74988e4ccf3aae7f4b77edb84555320,ce2badf02e266a84e2485f1793f13bf722c29306,cc467caf26e1ba94be02f27a349647c62dca6a7b,45df5da2640f8f097915b8a2a0249ef0f6cf514e,ab9c3e935ebfc4864c413fc6880363d4d7282f16,7c172a091a2c623d264f98a36f141f5726e65296,76b7413d2b1eb2dc22f05de5b76f9519be5142e0,bfb3cf8bba6aab198c4644e236bbc9f3807111d0,9e26d9933a22709b3ff19c1eefd9ed8133860015,b7d8801c368778e370ef98832a1c6201e8197207,093e3bb2e3cd9992f3f0d14373d406bb9b2ed36e,c440f668aca99266b5379235f6d99d378630c938,a1c5a582760c7f65572d0883fbcedc843332d7eb,54b2a69a63be2da849bf4ddc56d7ee48ae850223,c768ed307d08484cd61ad8ac3faac330d22c8775,0a499402d707bc8cf775d7f9b3840780a7401f7d,b8e4612d484cbc5d1bb36b397b96a791a1a04928,a06a15846544681467c040d471d9a2daa281a866,8937821b5fd47226ea10ee0297e8b0604a8fa11f,8d210b4f84b85e3d67933be3079e1ce51b60eeaa,5d549fc352d26290386cda47cb35aea1239a4919,8e4e5221515f820108f48396a18ceaed73de8dc1,306fa74602973d8e6a5d542d43b13c9630408288,0737cf82db33f55cdfcb68e8f02f0b8fed40fa15,b6488f0869b79d3ba5a1ea1d3221e9ea191182d5,4aa1d98adf4520f62ac895a0aa76607300779348,fa6fcf2080a7d2a2202713035d887d80e8a9400d,a6ed07c55cf8c42e196dd6e6e1bf0a38f0f7b754,845e1d54231d3ff3fb04bdbf5dc5f6b631d9b01e,3a4e18ddf151a624eb5c3596ce8400ca4679ef97,8ed40d530295d819e0ca964b2d4542f6ca6a9929,a6abb8b00355db97486ab5023305c3f4e9e19ad3,b494caa01985c623601735f1bc10871cfb8aa048,afcfbf57b993aa96a3697e3869679894e8f460bd,35f4fbeeb6feff2fd364f79d845449417d84cc74,5597ed7ea300ae3d08cd893b0133bce26038a7df,002276ea313fd880122502e9840b43f996acd537,bd5afc0b5a977c168cf046e3244477b48fa72c5d,613afdb0c33b9754f049a295ba9f7351de04a748,b313ae68888445f4c08521bbc8d19f39310c6890,c8cb7524317761af98958753fcf38da1586126a4,c771c0080b08abd80418c4e88f1be3efec828f0a,6571233ed2e9c926b07d752992a96532714ae9af,e4b3ac8597a186ec8aafeda561031b95fe969d57,51cb31ef21f879220b8fa20e37bae15bfb2c4d21,a675ca7802065f459a96bdbd593d8dc491180cbf,903f280595099eb6ef4d9d9aabd19dec8511c861,15a24dc0fc9067fabe00857f8546aee4a5234a78,c44bfe000cd84d0b48401f8c7107bc37c09ec622,441687e5a4ac22d7a370cb3e99c6af91138c2746,8be87e032a8c05622148357f30bdca3c614a669f,5f5937fcc2dcf3bf49c1776d341189c557b2f01f,96eb80efe1da48f37846aa899260aa0c84b15944,8f35fcb8f7b17c7201a31f157e7d77bf3e6fe2b5,75c2b24c681e314c4e4e07243b31430ba4e42723,276e22858cdd56f5725e0c2f7a3522df99967973,471e6b078a7891aea99b77f200e828a7b1c9bc00,6d7ee38ceed6b496d70502e276f80be6de618014,5cfd99f0dcd0d10689e480f0854e859079f125d0,ed6c47dd9ebbb2e38fb3e17a2b961f0fcf0e6df3,088d0f9222337a1b3be44b99523094ff0af06cde,3ac3ff62b862ee89effcf1a4889b04f32fd8dbb2,5f9dda6b900ced96f21c4c0cee9bf14ea58451b2,70538e67fba268e0734a77494849629acaa05423,9036edd6d6256a45d2fb7efb2fbbdc7fb844b019,0f6812858ad6e3b28e4a2843c526ec8cf501b176,32d33210a92b1197a6c5a07f19aa25426af72723,1fe7a43505aa9d00bd9dde45aee77935a5147561,387880a630c65b955a3329a2f7b987214c41f6da,cf4416a84203ff9d360d4398da3b166e6d0c72b9,a7fe613853516f0abde34821996a0424882bb919,7a8a7783315917b56b6a71c4f28cec4ed1d91a7f,9c545d44a4a703c88d417a6fa43298a80ee67735,09fe956a62e19c160d0093f8fecf254c2bb6f0cb,4f73871cf40b6dd05c8872d39246c67f798ed915,41f297809965523fcd021bef20b304b3584d9b4f,03178c8b15f1b522b98ded0f83cfb0e79f5ec4d3,f70741c9b216d3836d047c542847920d4778cf9d,5ca0a1c3564d35293a5ecf03e5f32e6f0f6f445c,4c4b3e2e32ddae35e4c1a6ffce1cd2b2eafa958b,72a46babeb0da02071e47425ebd55da915b98178,9c51e5316babbd370bc32aed0fee134216726ec9,392323e2d44bacdac605c1a4f037f06e21dcc239,10dc13c80752b0489d291b54440212ca54c59fee,7b9df59a96adfce979c8c564dc5eaa6a29b7f25f,818533e92bfb1c142ae4ce5be18ab92d1ae17025,47fa07eade06908ded4206651571e71a2fe684a6,46e97d9e04591e8198ff38bd2949fd5514da0d3e,08cc26e70bf145aca293d55fce12aef835263f53,6c21bdb4a107b49e57c9e5d6598d13ce6f85fc5d,18a027b1f04e420c18ae57aebe8fd031b5ff251c,82b84c0fe9054198099752a66575cec0c47524c8,b10b90b0a3947bea98e3646e7d29f853f3b5c6f7,870d11b6662dad5980ae2684aa05b1be2c5cce03,2091cfbabc4e4940f70c2628cadc08da0baaedc8,941b13f8ede6dbaa4fa64ebb9b9156c2709cd281,26e878ab3a5b0844e09ce305fa07eb2d0ad93d41,8c141a1705808491f16a27b53e1ff0db0a2807fd,40f969bc9e162deead55967da3c128e2da933dfc,f348d34fb1ef3c968e2981283618aa85db203901,999761ba1bc5da820a1d2527c4aae29d95a7013a,ce131449a4ca0b06c6bb27ee5d8d6d89b1467bbd,924e1e9064f90d958b4f57e9c9c0c543bd19dcfb,f36090e3141cd3cd6fd58f1f46a30af2582559be,6fe2094e30107512e470571bceac91cbedbd21d0,fb0078159d2463da149de54018fca79a9447153e,73351b6adbf403600521505bef288057beb2bdde,079a07fe18f654632b80b274f247775582261e5a,4158323ee456bd412e7357a4a6bc8bf50deb5d9e,2fd6c8fa1e392f985ee860d8ee154a612ddde569,6c4e1d719fec98f04f0d80d2ff79dbfc2861bfaf,66d0a9a0a00dbb259425f17745f7dddd7e676f71,1b5925b5632494c77bdffc9e89d149f5f88fe17f,e14d9ce8e3c57b7352a647c0a8e62eeb88ebfba4,9e0c5ad4b3148f42f3940faf7d67b305e34bef0d,fa1aa44c7623fb2142e588c59eaf56db7bc237eb,ad12d97cbb4c35017d55c4105174671f1c38b36a,026fce5c5f01d7b712dc06db738e9e2699c9b118,8e0b98bf6bd30713d94b72c7c410addb26c3c472,1130658baf7ec92ba5ea309244c8bde74f385ba9,63a179da8b48c16b535872f5538f071654adc41f,3150dd3c7da3c95c9cdb262bec312f1e2a4797d6,175e1b3637b0be2cdc0c4c76b1a924924d2f4c62,ab908d64bf11667157ead570311725ae6a2fe4f6,2272f5cce78b86eddafe916eb4b94af5b400d339,3e0ffb9f52675ebe309812287449a011317a0df4,85a20b502327f2279e243dee98c86144026e560b,5005d1173c18917d52f015a01e816fd3bbf4aac4,8fdda846c4653b6ccd49c47a9586c374bb20a255,a94ff90ab6cd2d92ccb2eb1fd7913b4e5256f02b,5a1b473d5c57092e7f77ca008b1085c512577ce7,268bcd622685b28c2d50bcbce64ac38f7e90390b,09e31a01b51d7418fa0034ecd4cc11848436fc18,2e87f2934e757a6229e20ac3c7d7413a42619ddd,d510921649d762e7aec2176685cc76f06b267b79,7851a3e2bf24c58eea66da70fa42a32f03532620,487ac1980148522d628e1d2aab50b107c372798b,5f9cfa6ebf748be6065680fcb3656ab8379441e8,2bfd539dba6e69a35d75a301d8b4a1feffcfcd3b,34646ec9b52192a71e52ffc09cf7fefdd506c48c,7afc1c34fc16ec04f82105f9106b7d1e5232c4d0,5566a21d2b34090d1ce8129f41b551a1187e7d5b,00439211981af7b5baed495f526ef8ad76ee7c5b,1d635088f697178660b6e1c9a89d2b7d3bbe2d29,a4a62ed7c1e3c7aae09324f0ad1c6078f0fba471,b3a68ca842841c4b9713462d5f01742cf71a6b4a,2d868410eead061d59de524bada4de9e3d2bb442,813aa11d505b9507b6795d36070806cb2d96e5c2,88b29fa46bcf6f56df4213e1ba7810735a28d755,eca374db08ffbb3dd8de746632fbd74acb8f2c92,2ab17f529d07c1f618ea08d968b2fdf3a382a792,9a87c766bb3137a50656871e5dee5a309543bc7d,bf803b119be94bfd71902ea5db06075aada82672,b72d8677bfa9aa177b9b973fc76322080f5de470,dd9cb37df54a3016e8efb283732012ae14bea1cf,4ebd5b61720a680e8507f0a4f1eebf0d654e8e09,a7294ccd794d2d3f55b67b75b9798de151451fb8,9ce4e1a371418e5eacc69227885815f9a4221c65,c9b1c8f9662f865a613632e1d390922050130b60,564345179f3f33d249daca36f0054773996d5782,c7f7da754a911302dcaa6935be6fded84e1ac348,4cbb388ba9099be121f81d75000acc3af93bf993,87497c72460c9c58f829a372d741b386fc2ac8f8,921d0d60d40d8fbda29f14a64e848c70026ea32e,ffae3bdbb6740e336a223a82a3dd545c24cde7b5,f9e72000a17eb9d524b38a9f2c982c037dd94891,e34f50dd1083fa8ed9fe25fe701b64bd2ea7efc0,581b474f4b194731eb9cb22cdde7330a1ec81c3b,e0d17fed51f5018fc34578699d824c20efc44368,4fc5b3402c58d6a4b317bf23b896ea91d22af6fe,d8e2f892e48423fda73204be3ec239d282e71c65,8d6d088622f8e4ea89e66ccbe097510fb4c932fd,f0943a7242041a16c8f7fca845592e48bb19ac74,d1123894d33922e7c8ca838f9dac9bdceefa3f7a,fb83ba3fdb46537a36832a900f124d4c400f7ed9,e779883b29a67d411493f985de984ffb8088ca05,a71c820baeb91025eaa7f07b172a39500c6f5692,a4eff51bedd73a0ea56afc23b1021187dd03561b,8f6bedeb724fa78583c26423aaece05cfddc04c9,e38bbb9f4191d0d21dea0ba31fdc131b97a5597b,fdc116f0bcda6d1fffbbe505d0687b0406e92fa6,8a8ca83f25bffb9927f67469f2230ed0067d1256,66608db56c41e91ee34fdc1e6157d69b69893fad,43800e34600d5045e7770af325fc18b84e8a9f37,d7f0ca1011603d0ed70ee167e3ad9861bcbf756f,7398af480396894c5f246f233b98fa3a3efa0b74,67566fe60b2f98dd586a6512889f9973d4ef380f,7bf9d3dbc5998608e85f165b6c93bb7fc98e66fc,6da8a0eba0d0bc19764a9cd8f0b0c3bb4170b8d1,fe8646e83e66a4bac75e4503824c2078779c9a18,22991a71c698537a3a67389487ce9b13a03043b3,152073fa08a8218dda7f2f90a0109cf1855d201e,7644b5a2bd9a3c96a97f7e4a603d86e33c4ad1a4,02641ff72989f451a79125f08df649e2bfe60e8c,12aea8407550ddff1ff25a838571b40f5ff15b67,f8fa8259db335fc3221f011dea926bc716918efb,738e361a363243bdfcdec56c07937e922f722760,df355deb13e42d161555505be9b1913af2afa602,defa2be2ea4a2ec95899e2c91ba0689af73a9348,d67f7e2af93a1f715ce14ee373b07bfae9389370,58e713233db41a67dc20c6fa60fc6bafc3d3d36c,c9aa8f334a5c7fc51cf93f300600e2124170a43e,dbb04c1ccb17222ad83294ffdd2f500078568873,c4e2ddf2661ddfc252c7a27316a3b8a5907234b5,b21b4c8dedc90d95aee684c1266f451ee071e2f8,1a26866d771d8c3795e89712e530bd4976b506b1,c83289781a19ae52c329de125c7c87c614ab53d2,213cb76f59b6366378d13fb174b84e1c31170f7e,b3c16860932f7eda0cc58c41d61f0b2545e6d4dc,301b0a811092b9c5a3b22b0028a126a63576d1da,e7a46ac6ca11c6a51a924e96114a9e02312376e4,79c47193962b00cf82c79788b81f1107e18ad752,87d71e9d46c046cb5aaa333b37bc8dcfcc3b065d,121c6b6892d1827f0ec543245d88b7f030af6eaa,35c99d4dead2545f941e109ed37aaafc8ced38a3,40faa3ef128e3e04d7fdcffa65fd0ac840b9d788,d4b56e80b43def8568fdcdb5884729667ed8cf59,3d93574d2c2c32c3b7582aef7948f9d99cf7d482,93d4d37c5f441a4e5f081ebcf7c09f381c1cccd2,e10c80fa720fe9ec59d84500f189d7049e50a3be,335e9df40844f1c388bf1383c33d9af85f96ab0c,c4dd533843b14bee28db9a12b4a6472195913220,c053a327f9f64d0a02fc70ae198d8d9f96cfef02,aab178594f3a908061ab2ffd1e6cd5d27304cf80,6d1fb4dc3e9241d14efb0a04dbe0254441390abb,41bbbd468a214ff51d18e1571965de68d983e26c,1077ae03c0bbba820a6fc9bad8cefcb00c888129,c4a093c1f2d4048cce2c24466108a078b4a9c6d6,91b931f79fbf85b8240b8103e870a59ab0ad075d,1f14ff6ce8909f28fa7d5f0af3299e9a2cdb0d79,85b941ea1f3922fa5ee6adbe049407e8a8b15596,ba1ce9b9aaef27b78415acdc4e84aae0ad31075a,a961a2ec9c2b0b0370a560cc522b9af114cbab90,de903324903d441b3224b2170476629b979d2ad8,34f1f6a485cf3dbe9270cbf0232cab986ba13cd2,eef2ed3144d873a56cf5f62cd81dddea87d37544,548dfd8bead389790d1c438d54afaa1f060f0eba,5246aa0529add36a2fba243dc23a8edb0ff61094,272a25500464aeb1a8b45657413cd2f93b7c53c5,7139af330bcc4cab7c19de4ff75b4d29f1618a56,756ba33a2059b2ecaa00b921648391b3daf8742c,ba6f4a44799a1ed0f7aea6762b658f7d5ef05f1b,2f8b15ad07b438413f9b8513ed50fd5cf14ceadb,b5c1893a7069b3771855a58c6feb8a32cc2d3cd8,c23335bae449d804f21e949b220aa03c2f24f460,235a0914e97fb3da2750a745c77fc01166bbb59f,9e2307974840d5d20e4a590bbad9fc0514ac425d,084ab518eecbac7b9b9a711d21021bd7df13dda8,7a5431ecb6efd9ae83c3469f040817d01cdef1c3,87edfd2751ba8bf84f15aa1df288722c36ffcbf0,a2718fc3a9bc54d5932214b07514446a2fe4c5bf,d6a8ed57b8e1fdeaa3b6bb4360b6de0d66dc6450,7fc003df8e22a4dcd2f16f5634fb9d8263ff5d04,2e4b80f86606e8ee3e363ad4860afdd50503374c,f3cdf561fd06b177a0b602b3ae6d6e845788c6bd,53af14730cd52af888a37c35c326d735f54c76c3,60afd02a508bf721734eba66d1ddf412fb6d0970,73b76598e776bbe7962e18cea087bdca1d560769,7a1c10a162fd6e0043f523af98d57549573c1982,277321564dd18c68fce97594652d5aea50ff221c,0ddec2917a8543e1f58e85e317ab4d07bd94f786,771eb6a606491375a61fee1aa537025edafacc34,49747dc1d34a48e966ceb424f40f0b7994d1cea7,1d4d89e9fb191af54a8f2eac924a2fcb285f760b,a2efc6b6b998a511666079b6d4c63ac38f215648,6e4265d61c22aa0a5b627e8bb4814fff382a7170,0aa826e84b14f6f39b23a057986c1329657b9c46,346a81d770fcd5e7e401a8d1daa42acf6493c2f8,355b55e4c6fa22a98983b745579c43077cc387b6,2a4984980af61442ce8b9009c8c86bb94b2bab4c,dd9dc9457722787992347ae54d9a8fe8d4b91d2e,305934dfbd2b37deb50cf93732e442c51bb1603b,82cf2774a215ae46477e4b35decf77321e20ab34,9d47e0f911981bee44146aa40ade3571f64e2d3f,e76bf903a268c242011618730cba7a7bae8d380c,5366158572bd88f18df7883ab823ea62b7701d77,2df0a3be66f6fa1067d976d7a05500beff7eda53,4742149a8d979f3d97d846f90774460f41184104,068e4f1792bd2b157e6ed6703e792d628f1bff00,81a6c88778a6b84c14d07e087f20484f018ef320,2edc62af90db14bd9166eb5e0d8c62eced9351bc,81288e460f85d71a5f0815615051fe0cdde82039,4abfe08ae38927921ce2d754f0fde4221fccbed7,e0a8ac4fb5891e6760f7238027dcbb3e23e23054,16f46dcc3df28afa0231fa68a6f43ec9ca44b0d1,5b940aaf301c4fc3b1b8e1b9c9b4e419d987ddf0,32280b862c77e64fcd104da16bd1b588026c0be6,7c31eb6634d55db044b6c4297d38550a9b248046,a4456b8fd51adf73e007cb7d598bf2feb3e4f6df,df46ed5edde4aea856cb16b8bc4ab791fef206ef,aaf4027bfb90785279ce2ee68bdf056380b8ff1c,17bc99fdff3e8863be845211e2af050e8c9f98f7,56888aa666b4997a4eeab7d1044f5358c213a178,794dda1fbb2d54dd54934e88d9867ada0c7ac54d,e0b2c86c8754312d1e89307fbf84e6efbfa9fe0b,050dfa6f0850174fdf958ce6751d2f06900201f8,6c94c16e46127c05fbf70b1fdeb0cd8c2ac98537,7530b4bdceef0ef37af252f0b97978554fb9b99f,a6eda3d8eff423ecb4901aa07339364732c02ddf,a5035d0e1cde068320984d789473e1140adefdc0,dff43a0530a6fbd524e3af24795cf6b92142735c,1d5f8faa87a410fdd1141ad82f270ac238293770,82f4ce516c18ef5fb3096f6a90455fce90a5b290,228b49fe2afea3376c4f30f80bdeb70d083a9206,adfa016f3ef7ff262643e0f0a5a54d3ddb7d7e1d,f72b5e65c0c5210cc0be585959ae84fdbc87aced,26d668f6d5a2f202ef7ff6a73ff3cbd7bbdf4b06,808149305ba26224917e29aa0c0089701bd91936,55fd738c86ea1796d5152d818ab4b5060bb11803,7a8dc00b8be18a9271e2d9c2444ba91077ffafa5,77c24aa92600598ee7994a1504b7bafc560b3809,ae2c81ad18f82278c5840d12ac22e572c3d31bf3,34515698878ff0a4641e72486f0ae8a7e30df0d5,96f2b16b3efb93580e6aeaf1da97d9dffd5e260b,b577805347d56f1927615fad311868a3537a9cb6,e366894658914c0f2fb41cac003392b0dfa6e4b7,3ab3653e48f65bc273c1fb2522cd814ceed8e396,3411f29e2377788cdaa5a4eeaddc53355f085a78,880b04814c564ea7a1bb8fe97c15b4735c67e8e9,3066a8085f86b743da14a161427c403a7038e8b0,37c4939a8a027eefb3673b49301814d086f2eef1,8ef033be5c92a895139b4f910af5a7048f340cc7,350c477161a0d1df94efa02109ae07e6acbc527e,0880a21c56cec1a2442b5123c3845bfc99e83a7f,84143c462986417ccfc5e8c05481e983cf668e2c,f16d5b1722eb55c2d55eb623999f16799b088b98,ac37165ed7a22cbdeccfe348b10245dc83b414b1,d9ae4e2601d4c0744bbc275b6b4f503477b789ea,7c1a59fa7ab58f5f7cdc124ff2667cc501570a4f,93d35c8f291b8953f8460c0eb02a51cc6d6cac22,b77184a2189c8f91100d148354d1fdf38e83d13f,f81e0465460ff9abd450eda836bbb4f9b13837c7,6fc152e4177e0482450b13eb7fe496de677ce5b6,0c9af5f450ce73da9b791051f861cb9a6420e0f1,11409e628b0461be3c268f81642ce36bc4b0bf84,63a9488f2910434851e98a8fc0ec8c053b24083b,829a4e9ce35d43670a7061b957ac951901c31ad3,d70736425701b66bd64ad3aab3941bb930a18b66,7331773448c1f2e0b24deae4144db0deec85fc07,11a7e62a898e54d66936d1b8b67cb5e62578ba98,0484bdb3f61d309ff62da4df4be92cf139d19f6b,f9f632e7056cd9d2b3c88bad50fe0597610e2eca,a3fae474e5cf5084c89835fce1950991aa678a41,f3108e2771083bfcf02c9c67ebd70a3ac0ddfca8,b720481312289d9fb311caeb4593c10561af317d,a9fdcd64bf0a982901d298596151d13e56442a11,521b9b3385d73239b96ab209cb34ceb5c1c1400a,d7a1666f9a89d9a517f5fbaf283e711046fd054e,022a020bde5afba4f2e9b6753c199386e79d7825,1b5aef881bb3acdcde5d9fcbb6e43ceed6db145d,0caba0845d4363025e619eb3db6f3138b2c3d394,8e71711c1caaa404d84ec6682f1b7b266064c2e9,363be2fea66f861d7ec4f893a05901fa0c7ecf92,412a8a0ba61c84d71c0cc740ba7e50c10f3bf9ae,03380256795725c7d17db97d882a4c4da3b76b8d,653b46857a4a48252bfb094e39ee9937b2079fa2,748cb609306ee5a046a952a0ca13974ef0b6e770,0f9ce497b0c6841e3aca845336ad095012c41da7,36ee52223387eed452c266490a25b4c62f49abc0,a8c6d43b5a61d8da784f0ac188d40b88a15dad50,8fe2360920a8228c10cd59ba0978df701174c961,a3677db89ef3863e8ac7cf578df499f85d970b76,64c51505a82baf8260a34c7e83652ae3014009e4,ccba0cfc3f1b81dbaffa5153aeb84d48cd7630ff,e7c42ed0fb83faa2b57184cb72f6d9e8b621ccd5,633de29fedf11544f2c3d5052890cb014e612bd5,362ab2bc41697980391c4a61c23cb3ef6bce740c,fc9d93db68a3c33e5ead8c7ecb187fdf0f06cc4f,66a775c9feb7dcf00c28a16b7a365af4372886f8,a6a48cfd370b226955a531e678016db414ebeed9,dccc1255413adc1a212dbe3bf40accb70ccd44ef,5c341d9ded098fafcbed3ce88643e96286928011,c64856ff7f49c1c2e3098a36e5951f6e3a6cc366,540564e190662e6617d8c8974854ded6ff2b365a,83b70a377f79ba90f846b3a720e6c402c63bccc5,819318486d9cfb430749ee33d3c5c4ec4417babc,827d9644c864336fa84f15744375ba7412da047c,af6bbeefbf197f50d194c7f20419c2a4590ad630,a215c3f91a5b4baf56e767a4e91b6511cf1544ac,ae8f5f04574be75727f5e948e04bc649cbdbbb3b,6348d47ca3f9a64421d092673b35bc834a071e11,b9cd3558133ae9f26aec73e0bda3a8f635d137f7,f672e826f51824582273fa1f5b6ec37aa5fdb2fd,72df12fb2ba453afb57cf185d25c502d4daec6d1,7b42d43fa0827557f51cb4111c89fb2a78512c68,af1b5872ab8355acea3197522ddf94972b3c8386,b1d38d9bf25d715d2eca86876baa360a2df356d3,5c753a87c328678f16bf89e0178448f04194f0b4,0956e2d2338531a96f2ff7d4ab405acc1b18421e,c9709dd49d438e17ebb5bdc003b5353b0201c432,657b1b49da5ea1593dd7f950eae99a88a8ada87a,6563275706015b000cc5bf14be7fa9322964bf49,e9e76131f35c112046b9f184816683beab605e9c,843267df5a0b44145d5b9ee9153d17aa5e15cce1,cd64fa339a97300c64dfc434483e478a58f507a8,b0b23c179ac55334f760aa29fce262c73a909268,31e3a88efe59b1e31a438354d51c2620bc859985,b815d2af5a15901dcfd90cd76f0b6f431b0f0048,dff1a0953d97d46290750a46d01be1e1519ae698,cc26f76ad1e02bc157066d1903aae9214ad34702,e082e0c48ed611ce3aca949cb47d0e96c35788ef,50d2939125522b7fecb16546fe7a5c253566df15,35e0ba449325e759e04203fcaa71920cf473baef,c7d20472de0dad34bce9483557f43c524e4f3e16,e508ad09d79302d3cc6b86077d4a6ddb0679a0f5,a27ca511a591caf813c26862a888e90e54af19a9,9be91f380c209f895da36d13c40b99687bb4c8c1,09c55eb8120da36aef1807628f87bde83749428b,05edf06360cc8a1a61fbd1ce5f9abf5d83f9d3f9,9df5e9419d83c11b4a2c3421c5ff7ea1f544366b,ed1ce82d822ffe185875b7b7d38352f20171c096,1b80dc49658ce86375c6c3fd089d7dcd176f4ad8,10e38114032cb4c585b29e946e1d70e05d52a878,d71ead41fb685431dad02d4bb7cb5675e196b8f2,e7b4025ee0b6152f9bbf7a72a317f977402a27f7,0f3648f749b7b67c2c61282297569657ea6220dd,bf915848967a6e35839e5565e98c716079980e18,e3eff1e3a426f8931ad23a3d7a7e790adabe9f48,2ec4deacfda46ad85e3effb3171a5e330ea8e714,7f74708201c2ab9f5d1f83c7052487116b8f7114,d442a770f2ea6b8c0b50a001b1ef1d92511e9832,494745fdd0fb1c1a6cb7b955c42a8b6d956bd945,97dc91d1545a667b4021b6507d927799e53964da,3200db1671d4b360abc43165cfb31e534966da92,4a37273818d2d7fe684136e84511e4e46e6cb1b0,d9979fa97865b7a57b9da975efb6e6c4d80b0cc8,af7f247b648bb255307c87764c787c0f0fff8df9,6f27b4ae8f8ecb62698e760ab7df3973874b1f51,67ef6efb61f3c07e1359e083bbac5d90953cfe43,1b53f09c3a9dcd64dd281c1955b062fc28999366,34adc606601cb578486d4a019b4655c5aff607b5,b05bd69cdd841c02a3b645568ee5478fdbfc07d1,e1f30a1c32eb292e51db274adbe2fd6ed09b555b,bd82fe9fc034e7921eb589420bb4b86dc767a11e,2c6e3404bc72e76b2e9d308121368f09b723c8df,13e0ba5aff3fe14eb0e1d748cad4b9f99e681ca0,3b7deb943877b0c2d8627531959948c5d1e4d3ef,b657c914c0005b37e24c1cd74c5f4ce886147606,a61fde99657c1b9d11e8eaa682181ea59e65814b,29c067466ed78c3e7948fcb8f0d25b3d984a1a93,fd86d06ec5d3b009f3882dda7903e9913858ee14,a43b8d68b8b7e6d7f23977a7432880290e6c6933,31e4a6df19cf4a13f8f0e9048198ce7488ad2614,3c0c9d83e27e436f9d3646f177bcb0ac2fecbeab,db7a08583a5ebfab310efde6d0636f2e2fc108ad,015e3cd37d128e4ade9b2d49f74f3b4fc07d82f1,8dba68a38c8bdae91c15e4eab35cd83c427d8e71,4ce6378eb6024e33a86fb76e25086621971da586,bd15dc78c74bd9eede3419b70469511f196a3716,c4218b83851c8dba1f275e3095913d9636aa5000,c3ff46e30397bc0355584c593d500d2564c1c515,b2d4b2ac3a738d97e23e53cd459d9c57ee8827c5,06bc5ac61a204128b1f69104acba83f266883b1c,3e24c28e68e617735b25791b0bc3f67f31624ebf,b1a8299ad223c3b2552f6d03e51c2ecba5df46ed,4e931386569c0a28b7e47c52d199aa32b6ca32fe,24d3dd8ba7032bc4590b82a99ff37713fb3cc5bb,ed98d264cff306f7326db096cddf65cb26ff5498,1f07a0bf70049cb0a2f6b52ea7c261da5adb1abb,60bcdd450d6950da981d70b8b08379bdd744c82d,74133837585f81d1c6434ce32f73fc8694d5f132,0e9f604e87a5b42b27abc13a9328846cadd640f4,53a0a9ff85666348a38054e335f5b4c5355a6419,73f3e2b3d6b3f4a7000187bb3e6a4d82b118d3b9,b295635a87da0c20e5e2495103d4877ef0187d4d,8f88dcfc902b5bc86a239756afffc9f3813d245e,9a5b9ec253f145fff8fe80f602705302de1802f4,c9c4dfa594ab2901ba627d68c0fc043806ec0ab1,815b269deec60ec69f4e5e5d555afe9b98c18cb9,8ff987bd1b9ad2b00d32f8bd6594bffc27cff335,f1cbfeab32df7fa41945204568e01fb2d4c4a4b8,2b0658c59d6285547a5c6de7ac71c7cb134ce975,657db79f304679aff1f0d74a6d618ae23a3bdb54,364232f781d0cc91cd4b83012e1f49e62fa81190,83af8f89e7b7c8669520b9d46ce212665d0d1b90,10ec5a35b13963b953d3c6a9d8321dcecf11fb3f,9d4f7a03f3a02c8598751c2c93f09525aa1f1789,6ffdfbb8c97d7f70e5cb57be566f1c90e35e03ba,8a3b3b537a30b14c4ffb5eb32ffa41d5027bddad,530432ce029cdfc7ab479b0002281f0f719ae724,3ab6698b6ae590ae1ac5758d988837d89ea74b3e,5bf5366e2d5eca700d33d5882b65a5795cb3d656,e972869486f85c3424875a443eb04bda2eeb6bd3,ccf1b0aa6159ad15c07cbc75ce6b9f17ad18f9f0,780b2281d86cf89cf5dd717c1cf54bbd48783654,06c27b37ccbde70514e035a50ba0a6ee1ff94ea3,1d1c41945a50a740519131bfff4e1875de69dd6b,dd2aaccc0737eace57a949f2d7d7291bddb81ee9,bbda5de4098e0ffb884384a2fbbccae8b181742b,927ee0fc7f47c7c6ccbd72a184aaa6215d77943c,71e40d0b30fbef976da3595fef8736a4e1245466,99323ad68c5eb3f9bae4314984931acca3699521,c49a87abdb6c07a123a2234f4ec5ca3d21306d69,f781fcaf0f19766f7c9105911613f86d22b2091a,9cb610bcbc3c541a3326d6504056d5526876c4cb,dfbf61485179f5c020a4f4a5e57db61451ad3c37,3b150986e192686a30508b2690434a8b4bace9fa,001b970685ef0cb3904d2d8b0b2dfc2462eed870,66336833dbcff38eb7c26595ccc15f7260450cba,57e30900f5c023af6415ce35645ff0a5b2503e42,a83ea28f9a9c400e32a14173f6e6d4e5578da720,cb8cf1574f99fc51c9e67b9456ea4d494fd4cf29,101ce134125f513eb9bfbe86f7a7ba7262c1c5fa,a4ecf95d9a40472b7e7afa1d4839138b7fd8767c,b7ce303e349329cbee3eb45a064f0a2ce3179d0e,e1da6a8f2e717adcecfe47abadcb036725378d40,c63413182017e069393963d07570ec69f373ee1b,8bba18089a1acf29f9d2433efc229d5c851f42b1,189b6fb17acf08680f7bcdcb27ea030f5439cfdf,3ca9d81f0503ad6100612031d57322e7ac40b9b5,f295b186fd8f6c619d34a8c69c6a1307f2276779,bf90d2225e9d94ed741a19ce2200dd80c49a17b1,818af0c8d1a99b34e5bc3bb67ef6c86bbd9b113d,02c7974c113cc2a51d6741491080058470265899,686b9844bac3f741b6ba98e400a2a334ba8bb6ef,2b0c681de2a8cb1570682a8309e70d047177a7d3,027c193cf1c012cd5bae06446496136a582c180c,3e2685014a3b02938488718fbd2218d849e3fdb7,b73744b718bff5da7b22c798ceb9d58b360fb1ce,6434081874fdda9b8bbbd9c2b76818116f33f9b9,432d6f4beed5a24df71271b9b65552b6e6f4bbf5,5ff03d2416c10fd1ad6313a993adacaed232ba1f,f06bab48060d2fb4075a339b7eb01887a241d403,bddd536a9f951db0dc14930c16233de30d950e03,c75bce14266b727c0bd022929d3ee10bc3062704,1d3c845a415f1e103cfcbe319d99fb0d29597f98,11bfce381bfd0ea9fb854514460317156c3e9be2,4a10030ee78ea8da944f6d52e3c671799d73b5d2,1788d2820668df9d4cbeb73b1e28ef88a203a7ec,4fceb8eef077039b116ae6bfd4003f023ba47f50,d141f3c34d9251071f95188da50e4c57f9870bfc,2ff81900cad4eab3eb7805194cac5546ae1fa71a,139ea515194e9fb0129e28ebdab801cf2759dbdf,db36398f07586da1150cea33282e42fd07fec6af,bc6032121f27c3c7d4ace97615162546aa202dda,5166f3dd04980177e46293408d998087040d4c19,eb19eaaf33695abbdb032f8f60e121a73a33b6d4,b14ad2e30a3f6f8e3112b375a1379f5eefb09050,570a54188a2b3e909285c40b8261a9edb91a8d56,d37041ca62ea9eab6e777bffc15ddab49941217a,09e627c07fa47a256daad84fef2663a2783aa8e5,9bab385a04bab326263ebad1582da1e7d54aaa95,9a9366c785b9975d0ea208c357a3353652e6d63a,53e5e3fa8531bbb4d70523197215fd19b89c1a76,33871c3db6d870f460636f6205bc23f8d48fdd4d,6618b269933a363af1b73714df8a07832cdcc2ec,62e6242804e4167f5c476ae34acc784009a1af0f,cc116419421b8f9b53dd95c5410277c316391dae,804797c806f8c994fd28ec972109111377f58ee5,284fe0ab9d98c14a66aa32ada0c46b294f94329d,73936c0c79d32d33a2ac4ec8f05980889bb9c65b,6f6d69f572fad13bb6f4a25086e966b19753e6fd,a21b4f5c08e34a2887eccff57047b3e0acbc0ec5,740b6e34168a3cf38ba8ea88a9450babbe76393a,a0b5cdc621d55f0017fc64e9dda68ffbe98f7f92,324e8b4d43f0260b4857dafef46e8c5f349f633c,b7d3abce569b5a4bf0ae39b24c6ac9920032db01,24c27ceafb963d96d0ca8ee2fe2090510a39b400,9fbc2a346b86872c397ff891d379115abe5846cf,c5a15b2b66b6b4f018589d8f60cc7acc71861822,8e610f183caf1829337559e63a68c6a7d4f1ba05,ebf108170e9a6215176174d84313a0564ddde0c4,5f96aa323dce95467365b41077b609852ddb08aa,c17c55110b216ed3d5e0adb06734677a9cb04abd,a9cfd7ee6e576dfb8289969950199d33177dc7ce,cb9b00a64c5173fdbbc34c16648e2f643a18d622,f1984c42b64788a0737c3bd43e4da95e015c19e8,904b790c41d6ec4629921befd1c5286e482fde57,c2abe862ecb7f980260a7b44d907fa116a6bbab9,19a56adb00295d528015045cacd443ff10f7bcb2,39543151993c21cfde1b29c9a130a762339f4deb,e2ea5359798ce8dc77d4b23b0f9b4df33b37f940,ce4385a413dc822f8849678608d0bbac2defbb81,3e408074a0aa3bf06779cfa890960fd8d642d804,c11215195bed3261d88486d0ad1644080afbb97b,7048667393bc4290f381312243d13688407b9350,b188b5ccc0f1f8702313eab62a5dcc164f817200,4efd950d4dd822f3e087db9830d09cfb3fdcb541,cff6e00097bf7dd97a5404080df3bf7e95813a1d,27214015c725619e0098e227fd29816d0891d4c5,a59765cd4eb84f58af508ba5494c42b579c1dab3,f8fbfc9fdca4b5e9ba1a5608ca17e7b6feb18c3c,f1f241370145a601b6a08709df547428b6a95bdf,0733d7c2ba214415a8d2e4efba5c6e26b61d3291,d8cdd5eeffe9b63949129d09f6b0c7ad2d517e90,e2cf4811ba485b0bb29d7d80bc853666bfbfa958,580e0d1e26ab2a9275f01506f3af56fe8fc32988,45ea3f77397ee833bf6370769fce38f339f7ca2f,f74a86f4b6a6f93d3a1e10f2a4852c5898feefb3,d447459a682cdc7e06b3980a59100ea94a6a180a,3ba27e9f4a29be1922b3a19f9c6c5127f93027ab,8fb1341ad7c460286211f4f2a6be41bb5782653f,041507d3aaf718ae536f9ab66e4eeb4065cb339d,406021733baf6cdd339d7b14a413b2ffeeaae42d,32afb6a8bff7fb5c630ecf0c610ca8f5bc2f62b3,b4eb29107afb3cad68d3acadd6dccaa63ceef9a9,065a62975b1f6f9da50b2efe0c02346d30332968,99cbf0da308d532eb96094855e74e718b6ae497a,735b1b59862dc1b5f7e60549aa7c33dbcc4095b2,62d9fd2988f64afd6790626b11cb769dddc95994,60595251eec5979e14540c6d00043e24905a7404,bbbb4313846efaba9546e86052940f0a79b8948f,980366284db98e0515dc5e827aaf4f750699bc80,6c2dbf2885fb4602b8e42bd208ebef66df23329b,6f80a89705d84dd74da902d512ca4682aed07a57,3df659b9bfb02084e782f1e8b6ec716f56e0611c,ca9a1d943d4cde23fe36d0c557ddb4110bad0260,cb6ee2cbdeadad5d277a6e7293d88bb915090c4f,d372ad1de8212901641ba4bf896188c58be1b017,108fa9a93c2cd126a138f8813390e197d0a3584e,c0880fb689ce188c7616de65a63444c8595a0549,a00624cf27791193be74a610723a9a0b0980d23f,08b2c429e8cd65205a9776a7b9d033bb60c420c6,aae0f29972d6323ad51ef18cdbc84d643a4739d8,1713b4497a8a2aee1c1272e3a95703914f96b716,911d59f46d0dce2e07a93dc0ff705154f568b7ba,560c484387eea32a00afc1de8ef96a81ce304ef3,226612f48bb40eb55ef5814ab9ee995fe9b30f71,d378c0656ff2374a867abe0383aa841275a47d8d,1aa543286acbcb3c23aebaba003fa024a54aabb2,f418eed3089d74caa11affaf947a40b774e9c8cb,a13691b5be40d31099d39f7c8f3ee9970ebc20fa,1484f1d637b4d33490d15a905d8d736de850e9b5,cc173c2e4d47d6ee49b4b6050a0fea779d691429,ac1e0fd303361803d2ceb789d568e7b43ba25e9d,15ac7bd178a0f06e7a1fa18a85d3dee631bc7fc9,3e66f1b6c4efc96421d43ff3dfa00686e72e6d8a,c2097051c11479284f73485da46d02ba15e241a3,56321aab51a470cd2004b76fb1f5330881b943c1,b5b6d5c27443e1837b80b089206aad480852cd1c,0201285c0e7f3c263de80f3b992079dc57418e13,5a0f9cafc024c691de224f676c574c00fd56e8b1,08e163ca5f07db9ad9460a686b7e5085b12d9128,93aa3aae172ac0206f60d08c6877c565b343e386,db12fcb723b504ebaf8c30ef72121917e67e987f,c5b8162aea8cec2204983d85f544782fe87f9336,05a916ef1726e4487e5aefaec1c170a3ee763895,3e8b8aa06bb7742cd1643fad72d7739cda400010,a1db4c96f62eef05fff532b59300edeff3ef21f5,5321c7ff2ed082524bc319e44f0aedf7ed8960cf,e7ce3bf49bbdc7b81ba229736c9017bbc57029bf,9be73347bd09934dd0c99d32bce9c4e12fccf6ce,4362e02ed0404d12ca75ee3476d4a32f9f671811,d3f0ee5e0928122b41ee25e2b4ab09bdca5bd00e,f82b5b57840389fcfdc4f16cb75703361d6ea059,c2c14e9af7a519aacfde5173f641c86e17ce50ed,51d564f738b20621e4e14649bc1b15c929668e1a,cdcb989749cdc56926c1c99c2c75372f105c92bc,5bd82306a8e44e2b9ff098f29ebf4c69c195b9ad,9959b3c5a777845aa19040a5a761814e483a6483,1094f19b22edd1a508b3d10d4a2feb976e18207d,a0611b06f05e3c37c622f48a783836f89247c237,f02f2e54ac7d88a6b7ee620e45e1bba878c63a56,98d6d15235e046762f3b09294e896994f616627c,d61bc3e942616a7be5740b4ba805f420bdb84bfb,1dbc6cab06e5ddc41afb629330565097a519004f,a800c6ae0dc4e6badcbc9f3812a69422f86314df,fad5b541cdd4377fc92c0941c4e586b0420a5a86,fca0e6ecf6012ee47fbc92fef4533320c1e3d849,aed96a73cf44b53c0657411dde6240aacebda2a9,1e851de8fe60a7122bd7b75b4278bf23bd0ec12d,b50e3db7b1e701a4474d862d46375f4187f16b79,a27bc326901fb19558a2cc4cdd5fd64b000102c2,db642a3c3ad93606d27d6e277b529da3a50057e6,1929834c27a931ab505f7a389d38fafd10331d8b,a5cb9a4b4a196bd2048cd21ed2fef175bc1181cf,c2f1b685abecfc11de76ffd0a28771f41b566782,30b6759387b4402987f6f4a6100fdc78e8bf755f,50b126dc0eb075a2193b670eb7ae2089896ba283,489283b8b7322fec0d2d1c0d0add3dfce3075fcf,7511b06e23d2f330a496f4e133f3b4d5bab35913,07524191a42c58356915077020fad06b9939906a,6b08874607dd51c9d8f600a96650a330cd9e6b95,e24f0e78dbeef99bc09a34ee0663e085cb00b8a1,c9685cd5e462926aa401fca7321ea23927492006,b50aefc261156f289d0cda76c357150491adbd67,ce8d0f7a47f7caba8ab937389c59b68b20f6994a,de079d82172220c0b3f2a5e1f1cedf73f4c1ba5a,376c0a5654493295b1d5595fe236509bdc3a41c5,98b8758e761caf659608f48fc5c9e9056f911050,e73fbc241cd510a0fd7caec6f7cac2e4537ba699,95b2fe97c7f191e43b7fe11e8e027d87eb47f15e,79237dcd2bf537d56ff8d73f897cd639af7bf8f7,8460b286448012ab3a7dcec8598215154ff76518,7fc7998398373a14b4cdc0ce18abdeb221b1ccf9,60edcf9df1bbe271b1414b04e914641937395d8a,a458e1a2f3cd1ccd692f1530b64d3143c9beda51,181affd5c937755f54ff31ef056a6ec091e95f51,ded56ffd598e41e32817f6c1b091595fe7122e8b,dd92a9db6b288def8159f30336f6793239882c9d,d6f082b9be5d507ff60c6bc83a179cc44015ab97,ad443210312d2420efef6d03a0296d71e71feb22,cb04562742688f8a444a52c90b2183c4be528be6,e3b95020f777eb5e0651977f654c1662e3ea1f29,c334a1bca8338c92e76f0f1cf2ef4884e3eb5dbd,043fcde300267e183972056a007bcf406e5c484a,454fc3655509f1f4f47ce44acaff7c1566ede108,0637e2fbcd401f47bb062d5c2d1cceddabf372b7,dcd1c33f0dba247b43418b922c1c3a2fc432dc11,c3936baa95fdf419754a544dd1810b107ea1616a,1a5e5c6802a920cd8e379de0552dd289f680fa56,56326400fcb5df7bd9336f143f7a3b7d601e5f58,efa48b214d30537bb184884ea30ce817bb350153,b45c4bdb496381b5f90df6872edca12e0a2e68ca,37f72dc079c4cd69b2de16f3532b55f8108d3ac8,a87c98163505fab39bcf8461b11fbb909a4c1bed,4b1ff8f4b9dfa0ccb064ef286cf2953bfb2c492d,42662f8750a2c33ee169f17f4b4e4586db98d869,2282c22c5b252859b459cc2474350fbaf2a588e9,f8489499aa6d460a7548b14d516638b0bd7b862b,76a2ac814caa194c46be1cf7a3f5dc129546b1c1,ddbeb4dd17d9c219b99b1e66d8be28efe37e3aa6,8bfd9b4d8f4fb0a2b522c9328f67eb642066306b,c6764c4a0848abf1d581e22df8b33e28ee9f2ced,b82d96218bfd37f6df95a2e8d7675d091ab61970,94a8bf6d304d08e8a1fc181e7a06a545103e8ddb,31fb4dfef212791f86f052ce8a3adeabaf830cf2,ccfca8f714055cd9fbd00cf7e847b880132cae69,a29815abf4f0e51b332a8af1b83ad344104c14d9,f1da5e927ed18aeec1610bec67f88facd6a470e1,92e6d716069686583b852a6dcf12af986d6dc694,251a495d2a72de7e892ade7f64980f51f2fcc0dd,d105819a0e72765ff5ba4efa5622d727360ee2b8,3aa6f11785a2f1b3b09df328a02a2c28dfa0bb57,ad06e61143d6ad3d883907e75100014b9554c357,b7a82a918f0a595a96047f7eef2672fd95d5626c,52f3240d90f2397cd1850ab11674ba08a0ecb2a0,d70fdbc40195077057a1edb14ccd16a26435d007,0751f97bf6677c3d55aa71542d572dc8fcb9e79a,e505e1fea57e0ab9f1d5edab92546d778a5f41e0,b4380f20059dc9e4ccfe2b709587e8069ac0fa34,32a9c6d42a3a48314d3f9fe2956bfc8bf49ac5d5,80417356f04c5ee1cd6f636e9b043db3f2de24f2,807915b4cacede6a8de49630469b673b7c248a6f,f48bca0510703b0673709b10a806a9d54894a999,f1b54876ab8893a5d9c0e3d7c1a9c884e683dc8a,c82f703768eb8a122546de23e412a037aa1770b2,36a02dc549f32433d7329444455dbb1be2e67f20,fa8957d7939b59e8d391fa17000b34e865de015d,d084ad29e0a2f456407f655c99999e070bf529f9,ea81e9aac328b2a89226417e58d4d8366891a9f4,998d6507ecabf025188d9f3e8c8367f810895a17,258349426eecfbe5c135f91809bae80e60c6db6a,12ee6b442bbf6557c06ecd7c1f7ae2fceeae55d6,5acc6a5502bffaa66be7e859849856de0ea27acb,031a762d105bceda2049204ba54b8f8737f359b4,b58789c5badc4f9680ec5724568af05a84670e22,77826fda8751bd5c0acbca5d0c3887e9a6b10f65,9ee3a16179cb65f5fe4170257ab7cde558f1dbeb,2e3c05359a0e21be44d307104eea3134afcef5f0,4ed0bdf1c73fd82d3080d15085675de96d5be0aa,bfb314505469afcd5ea7b5bd15121acd50425318,ff7a4863152a4d3873ea038af73024e9999426ac,4950ad86a16e63fa26d51cd709e39666008c5fbc,920192a542ab9e9dd2fbf090e1efd3c4ec99977d,b61362933f7a564d2ae0b7d6b9723f79f4948769,f28aa71041181867a720134e26b64b03cbccb6ec,720b988fd8d7a50fbe922e6c73a3681b1c566331,9d744f7136f23da9a5f9324432b300b5a68e3b39,9993450ad1f023e0e2b59291361d0b3b9f0e1c8d,98f54c158acb12a26fa6f335b1665accd2aed347,22c6d087012fd55bc65e578a27f2edb66f4d3808,890b387d713d04c22406db6d5a5fc9b51bec2df5,c7d56cffbb4668d0955ef00196e08f42f2efe363,7680fae14c9f544d0585a7b150004a1e48fff53a,136c5ffe80e558a87cde01baebf823b06e3cbe75,8769d0f2cc4b7555dc025b7c0e49a81346a1e2dd,4b5cda5a2c6ca613db5129d50ffffce2604ad9eb,918609f2cc4e4de95445ce4fdd7dc952b9625017,2e62764c0c386632e87ee8d12d0505848df1015e,4590f14e97beb6d10ffb7b5dd312c632af155ed3,079bcd0339f30343c01c5fd3d5521be4b822d30f,29283b775291bf03cd9a7e1aaa496faaa5757578,89321a2dee438328e75a11954e972175c78f0a2a,412ab9669810921d04f9feabfbeafa906d4de506,46448e934250705b6ebd6f21caa09698d611dbfd,5c2ba72f9b4897d4441eff34ff0591e74a1d94bb,1f3e72fa069536ae20f37b29575288ff65e66803,9fde65345e677256975bcecdc027649f31450a57,c7720ca4c232d317cfc800a04eda4a1d5a44a944,a747456bfe077da467ff036172968a37f3b1e893,2f2c8b1cc6e6e731f7bc52b0988ea8316f475004,013b445ede8d9e7aad4915859d0c869b9b712f8d,f4e754e66e3661274df624bc328991cd88dd03d6,741944332d5bd90112b610a8b5f2eeefe51e08bc,4c7d7523088373be3c7ff203ea895d5a6d84083e,fcd568282b2a150f9f42953f12268dc88d09da89,f79c9365d0ee89cb407b90cc084eece8fcf9a8a2,8714dd031647be34d0d27f461894e7b194f25cd7,83406b73e70a251eec5daae34f1bd8d554cdddec,b86f68e39dc7b6a7c2bff1e4fea3bb7c28d103f0,2f956f46580e5b4752173e885d37a20fe31a78d8,3f36b7b50bdda3eeca632ad5440bb82b8e34cb40,01fbf81e34a36cedf505f20b1c52306afceedc3e,04f524d5ad91b1cdda66dfde4089f2f83f4528aa,9962a0fd02fe2ef06765271605b06729af8b2e59,f203d809d7b94501a2e5409c667ba86206480f90,c3819688c48480ec75a9563c71f18ea755e34620,b1ea059a66c7d6d6bb4cb53d2005a9b7bb599ada,5294c64b342818e021800b38413f36f426e35b3c,5a45ae3b1deb5117cb9e9a13141eeab1e9ad3d71,440882c659967572311402c7fe534cf13d501cf4,efafa61992658eab64c893e9eef49f545d75673c,630830476a6270e317e84229996a6bf92bd903ca,14097c64d243794610788d3ebb2e81ba8fd867c0,f2615d9a611db401cdedc022112c87ad938b5680,a24d624aaabc14a455d18450d9127f88d1b4f8be,49169033546d893dae3db903a2fa6af712f125c0,fa7588c4c0f8d403e4815fa72e3b8a3bc98d73ec,367fe13b46a0b4dda56b7f12273d6c9afb1da23f,368588b5c5c4140f39ea8b9a8ceb3d1af0708804,84b2b74179da8e279e2fafdafd031748c285e1b7,30ee10d2740fe1f28595989c6b21f22b75a147fc,c38386d6b5622915a2d42d989c56d37f17c673d6,af9fd052d1c208f191fbdf85873f965552465598,57694790f8ca0e1a4f3ac76fbd25a6dd13041e03,0a711ebcec7d32b66ab3c90b2a1f48681201e557,a4acf53336a482f50335d33b4f650a70c9243b7b,c26fa78817f30cc3eb91165b783e07fb80d80f59,6c9ca4d4c0de4dff29b79f28ac5c51b4f6fed0da,944291b748bcfec4e2f3c17623884db7a17b9f21,c44f982e89b63a97190638cd12bd8bee2bafb883,fb46b941f7763314d667c437c06b1675e61c3d38,1f91c79de5e2d852c6e7d0cf7a4255087ef618ef,e9928c94ce1385ec72028336417f19f30ac38ac0,d4021487539b0f7758ec644f2e0d83df95c66bba,ac62c1c29f319a97a2552c39f32c8e6acd70c9e1,dc08bb8ea6cdf01188f6699559e779e6cc296287,82b8ecc3275d7c3578a6531ac3f1da3ffada9dcc,6b24a1d1b5e2792a7821ad172a45e38d2b04f9b8,36ce032b612fc0a1156d28bca7327e06337c8815,3dd2210e79a8eb84378c370b32652f9a53f87a93,2f22533ef41533e2b839a6b41b262dca59e6dbf9,39a3cd0f4210dbec1ae8ef39a87d34b76eac91a3,c3f3830f771f26a537d2930b00b270451bbc5627,da69d4b764f4d13d38a4f7fe7462ef0c7d17c619,1f470253c46471033048383c027192e757480492,9c40a7bb3c9aca51d17490960c988dfb7b5acebb,7f8e952abc4d2fc4b96c97a51aa25fcf6ed8af02,bd0b5af025fab9cad8f94260138741c252f45fc8,e036d60d8a210d5ac28b2e5c51a45ceb82b58f09,626014eaf093fc2e3b53f5ad00c425bc209e1428,6a62646bfcecec9c0806a216b17e1a4ccb4609aa,5c85b8dda5f3047732a17b818256b9289274d071,ea402becca436dc1a8e47ac9385a3db475b49355,30aa91012cf6019bb9720609c1d03b5386a87ffb,898f3d0f652f313473c67fef32e22d94d8294d4f,255f10834a67cf13518316de0e2c8a345677ebbf,044de16c14076019f87763b7b58c45664ee57c11,e54ca615f213f5db6d34d9163c97eec98920d7a7,b59be86597cfcd805c24fa406af46071400e24c8,07a42d3ffd034e467e49b5c449d4f5f81c471cc5,e6da0f682436e1387ad68e86edf7418c0f7cb368,de99127d77dabfc6c8134b3c58e0b9a0b74e5f37,59ec4f018963eb55e32fafc2b924826c39c09682,ece4b70cce24b89483236b4cff079c10597d680a,e5cd652aeb3305ef2b82a7925cce3a132bf6f5ae,cf991604d75d446d02baddc536c7c05b43cd8dea,09d28fe7995db1a4da2c651d362007d2082c663c,4fd34e6517f2c400a06e3c1d43ec56df2ff5c392,98c27699cbcf65c3d9d655ecbcd67adcd8b45b05,71cff7c5940b7101ff098601850d46b7a4698180,89e0607cf6470dda1a6a47b46abf37468df4e50f,f68dbc3ea20230cb14ed3364539ad16e114bcdd9,6fb60857be1fed21bdacc4ce830bbf99103b6fdd,3634821fa515365618209f0452443728e7290fca,2fd62ee4d524c270764e9b91dca72e5cf1a005b7,70f28810a5547219e18ffc3465f519c454fee6e5,a703ee75c40e0207f6831c4d48e1c7e62f160305,fd7cfed070c2aab60521afb7dcc633a0b7abea80,1de41ef4baeee1c95e245837299f8be265294445,9491d7a61681f7acc7103a6d1d45efe96f7981d2,9d58b6a83aa79dcad01c3bcc2ec0a7db74ba83b1,2d3203b10cc8edf71a6e3e0822f0d742c9516aa3,352b906996f392030bfd53b93e3cf4adb78d1a55,d55a572e5867832f6d5755fcd46101da51a38aa4,328c5deb015ee5bc0a24623bc29225f6ec1ae23d,170cfa758547b4d9be50058ad93cf60ce0da5564,132b2a8c553bdcfd445e88680beac6f225c50ac4,da3e8eb7e5a8cdc28ab0e36651bd7eceed35c2fe,9191fbd202cd76d03fc23057c5a16cac547d90df,3783ca4476fec8186c867e4e57084e649c318c6b,4d996d1bac1bb1886cd9c473ba00e53e3c19cf3e,878ebcd0bc2592fa9d5dda01117c07bc3c40bb33,89aeec028b6f56be96b9c56c2fdbb931f80853ad,445cb9dc2f07553f8e1e5f7c1150f00fbb05c63f,ad80bfe559e7380fedd7998daea5f27393ab643b,8bbc6cb95fd9b4b9e86c924ca1e40fd555ecac1d,3d2d4fd1588c8eb3f67f34d75b66967d0c7b06b6,0a86429939075984edce5e3b8195dfb7f9e3ab6b,d54fad867da7f762ac4c0d947adffdc1f8f356f1,12bbaf3550d56bc945b50f538b5f18af93bd316a,d61d221c9e752ce2cc0da65ede8b55653b3ae21f,150c578edb161bdb2e8c039f0914984f570ef8f0,af977adc43a071a09652fea4ce3deba2d5b8d171,f84938441be49c665595c936ac631c3e5f171bf9,e021734b62ea5ac273e516b4ac83727cbb99ec08,b635beb6efc07a97c143775c78a32d42b3b73c8e,345e2d541128471641e76aaa44dd5046f199197d,3fd2492fcce073f0c36e4d7e23e34881557e6e5e,a918c493296c88da94b36600213c7c188f2589b4,9181e1d536bafedcb3587ca30e5b6e2d66f06bf0,f2d58718a5c7759d0f46d68ac954bd1d8064d7be,cc8bdf1d13639d12d02170d40cc4890180bbabc5,33ee5497490cbc97f3eabe9ef7a6391e4dbee8bc,dc61e510126aaa1a95a46fe39bf1529f394147e9,d320a457a9de67be25a03f79e1695d549a0145f3,94ae6c84d22ed33e158b3cc822ca4a0484c829c9,e9e36cdc44a68662885e35773187cca00d20239e,7d4041d827aed7d9f3eb14310b824a2faa96b8b4,6f5f99440e7117ee3bb6407e06745fff14bb2a4d,3eb4be60cf00c20e46b75fb72366dd0649700c2f,5a509030a946646780e963b9f492a4eaff734116,edbd9842cfca892b10c2e9c8da0384fe005cd67a,01329b7cf5d494f32da31c2169d7ea66dab9c517,b6e5ed05866242eb6c7c23a82d3b892d4461bb54,96c30e248d6d27a1df8e26be14aa10c633168cdb,bc8e23808b9d8d0c9b67270ef35d04ebd9d89cc8,635e41ea181c5fee8860a7044c84ae3557b51189,e5a3039f7a1e727fca40db7357a9191b6a7cf41d,c4ddbe6456c9631c301171098a8ac016eb4e582c,63f1d6b83bc10a2880f5ec17a172fab284d2eff5,10e18ae9b47dfe04573884739823d64825105694,d3252a5ca5571e0a97e9a31966ec6b847a3a8574,86c76dd5ea04d1881a52d79113d6dbb1d57c38a6,73a8fba6fb23af45ee77f52f33bb8d791a9caa05,e8db7237a9c347d2225fce9b49ff92bb741adffa,7af67bdd16a4f103bbe6334c5a865436c900adfe,71d7c3264239c55b6e2daf89c44c5685085f26dd,89eea1e72b6c9f9faa986fbe548a4fb1914cca9d,94faa31bcf5c4fcb20818a3a0d23ae789932d2df,958029bdd45c3e341eb146031ed38b4487d7b0b7,5556026ed1dc17e70946a4a030842ade3a33baeb,3c92830ec51fb6b6e9a7ca2fb8fda324cd33e48a,5e62bf80f345ff28d494c2b407a9e8691a9fb684,0fe9685c8a78ba2d780a3ec1e1a323990dc6d218,eb2b89efbe15ab0b70fd94f0ecd0aa03866fb4d2,bd7788b384a87024ddd6bbe6a9bd9a167cf2ec12,dfecbe970917754511a081f8b86efac211e624f6,ef51b068aef14fa347710497cfb67aa9c6e65c0d,173c162a45b4be6fcbf7a30c44d1953062a25086,c4c03a33c8b8b94eaf75d368473bdd10a21cd0df,2fefdc7dc3c9afbbe534ff69db5a754be0716b11,f525bc3ccd9cfb69603bd9778998263a458415d0,9072a7615a54d5e753cf088326d9e14f1a5a6751,11491d355da8a851d6badb6348b10d8c4acc9d8e,2bc2ffde1f4752e7a8c7ea0a51c559faae194786,35f1cc00274122c0274b522d0b544a06faaba931,98817e88f04cc6757c42ae52d653b63cb85af486,83775c432382b9c0367362491d0dc515bf0e131c,a498b87dbcaa0a61c6088d7156258a3cb06638cb,34558845e3777afdc1bf90ebbcb2017ca17aea86,59985b43f0868d9a4a588d9ca1debd03108f8cd9,8ea1aa1e7cc427c28a89878fd2dfcb110c992b20,d4c7f63054e584b69024664bc2f221faf9863519,76cc69c3f08cbf31efd56f631504496307ab7a5c,c9d3c58e44738bf38c3974f054daeab1d7bf0f89,20c733229df741e57b8ac205788ece2d563b2f3d,3051264e1bc1d41a29c9dae7935c090568f64af4,db0f2304bd7c3ced65cbdfe9e17e80fe0774c13c,2f67045b9647de10ea5d01d8d1e98ac7de3e1cfb,7ef106b23772995e4307f84afd1bee4e2337ce0c,71f6746f81bb9650f6f228ea204d85ba2c5b7392,5aa87b52f1b3f958e1c13ce3b811379ad6f71d9b,2ed96f00f724c3331d6b56b6b5650b9632f43954,3720683699bb830a4aae6fb66a78ce7079ad2c56,df37e605fe4b027406bd9dd85b320526ab12a122,1b9d938d66a172b200fd90d4a61707852bdb4b8f,4ad74f449258781e9df189413423ffd6ad95c526,02a98515a337991f0ce05271ac90121fa204d9db,d81ea83a0eb1761bb4e90a91f3b70f23f88a7d2a,e2c0ea4374c02539ad9bc6c4328b74f25eb72405,cf42ae522e12e9b412e1a1f008ea73cfd86a5979,fb7335ab163588fe6ee67ef26d3b3edad5cf4bd5,e580d35e1a07431109a5835411142bd1c1c2b3b7,ea60fbe0633082a131bbb18de94fa60a04eddcc4,90e31fd93fdcaedadcd4b030fbc20f7375672def,52adf52e4669b54399fa50f2624826c06a19cb7e,71e515ab6d2007d34d96df5604f74c6fba92c0d7,6d23e85570fe1139cf5ef3bc9b4e57ea73680b6e,cb83f7cb31e50f265e098c5380b3f0051e257f46,bea1ae92aa52a985f8c171c6e17ff7fc4aa61fe4,775203dd2cfce017910d04c58a0b1b4e0a64923c,2584b4a0ef536e59bf28ba140844597a093d848d,cac520971206093d32bf17925f880bd06d93f736,6a99050166c945a226d5f8275ce4a9dca3518285,6dbb48c8e685f65f45ad5df9f7684bed910036c8,260e0e0cd21af7b03ab0dae33b4978233db67773,b5749b4f54b30c0c2050e456c12cfcf516434f13,07ec8ad2dd862c8669b2557b995ec5180663d73f,28656559d2fc67193a84d5cbc48d378b2016f74a,0add1e8975336c65513b26123d48b221e2515ddc,b37837ce638048384756850a3a6892519ddbc743,8e7ea70a33ecb8db5207849ea6371b4a5a8ffd26,abfcf0a8cfb40cd30c83d30923bea6d412cc5a22,aeb6f86bcdec061ee9c6be96066fa19c56523490,6f653f6bb82757963a87d725808c080109e7e3e8,1974c83561d09cf73a575f992fbd8416e3354d20,37c20df721522b175bc9df3f06a361297010df5e,061450a927ba1cc65f7b984f4ff41866ec2eceac,60b32953a968e5623f82a6b27d6c679bc17c48e5,f175a241c811d2d0843026b2dde5c3ae308cfb95,ea1a69d638d97d5ffc451b32d240479357e02b0a,cae70c10b4451ee3b919764f72dc4a4caf0f6f27,155cec1085f9bd5383241e4c93fb40117081aaba,c0c7112dcdeb75b521d55cd47d0c61be66b0499e,eb5f7ed8914fd53eea1ad360fd88f42ad8a7a33b,8d0214a7417addf790713440f10855dc279876fa,e2ec4f2fdb2bb8d97f64a33e9ac288d52854a530,fc73151cfca36ea2641f340700dbe339b9e1f103,54facb4fd93c2ff59b3096c6e64b9be1b3c9cd88,dfc9888860bf192cedde21e5e843bc3caad4b74b,5f9e0851da9e74c12e04f5a62cb7aeb1a8ab7589,7d5a61ed64315bd6570c5cb55c1f53853a3fffa5,82152f41ac8a727c2f0042bd555452dc2dda11b1,474a837858a8e7a98316f97e9ed387d0161015f2,39380da86acc717f419da48f070f8cf7d9f9ec94,0e266204f535aa48f74d4f2480b2268c13e26b22,5b7608d1549989d92dd159392c19d9ba8ce0e62e,e79a590e0cdabd93883aca964db2a862ff3f8490,adc6bc4104514063b3e8ebe7a301d5dd4bce36d3,636a5148405f567310b9fcd4dec131fa1936130c,405bde36c42e591bde85d6bca1ccb1910a33a962,ec4d8a9a6b783f1d5d603d5272c94deb1e7375ef,507451866c98cf9e2ddff1008fc0152935ed9e20,8ac3334a04928faab627aef4daf4ac51c28a95ef,6bb871786e563ed82e2b8d26314c22772808fe5d,633ce604968078151e03363d5c67042af74310e3,18b3437c15d78c54510964728486831822809d9c,bcb33ec1c7c4aa98758d1561c8b695737d0a15d5,d68f7f5f44924ddee14428e16b7458e2878baef2,a48071b0d489420bfdc0c2ed7254d1dba243f700,5637a5204ffd7b77f569ed28f85610eb782a159e,0611710c619e67affe9e3b6471943d0ccdb9da73,ff3492b06299c0a38c029c8d7a524d0027de357f,0343b4fda87161265acf30d5ee61e525e751358d,3acffccf15027bcf87e25a432f085c45e103b0ec,756ccc935ef2a8f9f48e96f28c7c622ffb3e6627,612236c8a77d5d8c4755e287f682cf06d773a902,f37f4b68f3343e2b8f8d82c40398f975116102f2,0822b4226f31e50ec244d311e56e3446a8e5811f,78e2f4c1223d45db3c5f7c20bf51586fbb566948,06b7cd3a31c4565ceb0a127273ef800a3d084caf,04b55bc7ca0b0ac444fdc8ad01acef8172852a8f,54ff33b2ad26e3969cc59d7f2723563dee3e37dc,54e63005446a2b0a4255ba16838122c5808ef886,1a002c67f2d3c198411a62165e53b31d6b414aa3,ec2fa6bd5695b36435cc66ca4cdd8183d077a0cf,52b46e74dd29eb3eb65a593a872fd57694bc154c,59022fb870c2c45a27e00943003c5acdeddaeec3,03fe88ab71cf2eadaa39654786c3fba713742768,a0b798c27a0312df2a110073bd7888993e56d05c,61579335bcb3da854fc8be82b5e61dc52b5018d3,fb7784fa1472b4c55d329aacae672f416e11a703,cc1aed9bdf196403c673a886bbf723101171a9bf,421db380d060e9f037a8ecbc446c414efaa6923f,17a6d163c62d7bbfc9e19c11e0d52ae06b5160b1,d79e43216faba4b3e73536915bfddc550cc0f20f,5fb158cc05a9ec78e31e49abb654e00a7b65721b,f59a674a26d349b7069158023194ad0d7a38a9e4,fad946a1d79486c5118a596e8ac67ef7d5189070,d190655a97c33c886997b9570697f432e7d3a21a,6849dfc8a660bf8c95354520a2fa1283c9b3aa43,68acbc803e416a38616bc25505cb88dde81af5ca,e8a2c29721d145c52c970049e5469cfb0dcefd87,00fafe772ceb91c9f26d79f5a2f6c3695a141115,3a68fe8b7e2aecaf75535415d2a7c8268345cd26,94ec5a11122b2e60fbffcc35373c978c839bf8ae,31466db6ecd115aa74616e14a75721b45c0f59f9,6d3796e64bdd5f3f4857bfca6982e6ecf98a2b33,131917a0d3303ca2c38fd1d6765b9bed2c23ff89,51512905c31ff19b91fc67b2cb3ddb5b1fa0fd51,56f0e1053c9aa767ffaeee37cf06a6056a221163,b1762bd557c3d7605490e026bdf31096d83b4dde,94184ce3837e4268f3d0a7459f90e6bb920dd54a,b4842f559f0d8b8b5a98a19b1f3795a42c1a2614,242b815437b9a988c2ce9e980295ca8a9e302e7a,a06f83a7621f323012ddc69836cda1294a5e2114,5eae0a646469672d1cc5385bd7bd6aedc4aed19b,04b41e2c97fe5faaf521c2e0581c30e18e2f0c27,d75fe46b8f1b0d5c27887052ee4714d6a9c7ea4b,bfcdeeaf441feffba724f03602cec2cf7b181a86,2ebf9a21d2dc99ab2f434111cac9dcd6da99d574,2fa0b168d62a07365b2787d0ed97fa1c2cfb673b,84d52919ec3b3c75f28a185ad7cd87603c3cc4cf,1002c9e243883654f9c1e6beae643fb4e72fc172,afc942c7b2bc0317cb549a3fd05080646e7274fc,18f5f54ca0e78df12586e0750e257058746a5a39,bb76a6848b37cc3f418a370c56f597486618197b,69d4bf883cd7402d13497a40422d20096b2b9aa9,8bb3526317408fba3ae351719feb68703aa5fdbb,b212aa3c6fb91c34a0faccdf783a0a085d40be94,f8b1f6e7456a92b8aeb3e0aa8ef88936873dae00,04a5d83aecc325f87696c83b1a5dba45584ddaa7,3af7d0dace7bee3f42b88abcaca853765cee3557,c202aa8cec19d80f4671e77370287540a0777b7b,e55aaa5706f031df2e8d68bdf088604c79944246,ddcf6aa50b2e4f0c432add091ed6ea44b7f12365,63374a181393d941c805b6909c2ae5c41159e745,2b15e1f43de16d204a28f72a530abcc24208f4d5,4ceba113050407f10e116df7ecade93b1abcf6fb,5e5ba1b8129fc0d235b149ee699ecb2fdebfd39f,bcc7c0c85878d19735f4eb014e6b17a3c0deb0dc,f3a7cf629c19dc80734b5b6c3933fcc76c8a50a0,a72a5ced53067d3516ffbebf00a633743bbfeb5c,69e97c8b42b9ad0880618132a613466f4e4779d3,56e52fe4cbf5d3ce8fbbad9fa1cc4739e2915ce0,7642423cfa70fc797601afd64ad28ed1609df9d2,04e52eb6155b3cbf5fffc0d52689a3f679e40b19,a1cde6ab707515ae014c2635f9d32ad0ba64e7a0,15b80753a6e8f481ea5029bc278e362994cb7bee,ff902c15612f2d771483ce6bb06e55609247c34e,833885c29d3f037b8985e7822f714fbc484d0378,3f796bf74666ff9a4a6d31f10dbde4fd5e837d6a,c158713b66856745427f793f14a5dd1fcaf941ee,e8300276291ae634eda52d812e6e8d7cfef2f8eb,fac65b868c549d28b786568636bbc8362d2a78f2,ac1c341558ae3139a5c1eb07bf148230192d6f57,c99a787752770b8952297e24e07bd404cb2f4f74,77d187eefc8596ef8203eb827486099cc8b27835,b877fb9abef4a19eec9cc7329acbd433648b8f7b,2b52dedd56503bf89b28cfbad21f59e3dd4d1d32,c6fac966ab314769d27e117bab05aee1a72df760,bbd1dc343992fde4baaa0309178509dd07eed536,dd5a0e6e1e3edb41afb4b40e4ec2c99e5932e73c,864721d54b8b372808b098e13120abe5c22fb9b1,18b1bc203bdb236bfd9084193aa2d55d4b605139,b2c1afce7eb13ea44fc7d25562cc3bb83cc91b2f,5b223744b49d3ceac9608959d2db82bbadb47897,eccf213204b776e40efcc031f4c0df560b9421e9,031f6b082ff21cf1138907a7c666d6ff391bfd72,b9f04d9be3e7ff300520da194fe29ed5c1861787,afedbae8aca69a092d65766640361801bf2b5d9b,c35a04102274b330aa833030c15f722b00062812,9bc992b133f7169288f1fa6b53a04f74c1549947,7e85d1cf54b1e467607a0019b56f91577ebe2e4f,fd59e545f4f2d697ea7e197f002c5e8eeca27004,3eddcccba7e0361d6e833407320908187b16ac8d,34a5e7fa91aa7ec9e75a16eb6f3d859d794d399e,fbb5d31a581c24e925c442a7754358d2b62a669d,17e65488113a2dbe9894f824f4321a06ee009e02,9625891a7bbc0a8b11f7cf9c2b4650775ec8ac53,13cd4e0ac3ab76a4dc091eda457f9a111727cba2,8ef8e2a7a5326eef6180951207f65d3c29bce419,e474263669a6bfb5ec56dca742b8e220f02fbe1d,844b2901fe4049fba29ce8c6961dfa25966974ef,faeaa303b903139f36c15751c8e48ef982222842,5fef9575646f6583fd2d9ee01368b3deefe6ce82,6c687c70a1d5cdbc71c113b7d7402dd89a942849,c049aeeffd41dd9fb8075e719320846c83e5ea91,9bd439b4e0aa69050ef1baa537e552fa4620e5d4,8d6bc0ca625f3a1a98b486541fa613b2fac4b41c,7fd021d82ff431fb31f42bc6c5c44a3b979cb426,d2fb3b0865a87cc909e4faab7733f993356141e2,10ebb32ce1806821518f52074f0d171fab20b3ea,caaf97ed8804ae3bf6fb17cd98a5814cab834688,ce0c082898e3551d313fb5b73763f399232b3fd5,bd9adbb637a8a4aa5eb61c6fde2c576d0ab3c4fa,e4b7ee81c1773eeb0bb71ca53bf722f046c16a16,aa31bc6c313789c344d715b7c1aeea0cd8de47e2,3899cc6570bd9176c84ad2d5d14febc6c0ddd964,0223a4d4cd127a1e209a04d8e1eff3296c0ed8c1,648eebba22d6398a01b0924975bedced8469ac80,eaa9269ac80c2a957cabed0c46173149a4137c24,8d95ae41975a2307501aa0f4a7eba296c59edce9,1f56bd103d53c8c6ba7502c6586c26be01bfdb80,c7c85ee39892df3ca007c6596c41654865be7e43,c503d742f094dc2048b72c3f78f5e2e6070a44e1,a2d41db55aa46bd4fedb215c978f03e282cf1ffb,5ceb5f57212935386737ef4af0d066e9fd38c5a4,cf6b6d8eb1b524b73cdb74168f3190ab471aa52f,ff8fd9578ee8f66e6f80cd7b9f204767845b7339,ab60f735c721103ac888d8d7b801055921336687,a2660687980b36003a612eb89b40d6fdecb4b153,b3c31a379e9ad7cd22cb7f0669b82361ced84992,204ed0048f4812201ef65c9a0c44fa54a7d1e04f,103b64a373256feae6ca85f2bf220e7694e48fa4,9c506279188a90dbbe124386cc52016682d17b5c,8eace0187ea2c0c1a6e3a5b5e24e701f6e23ae94,72bbbbc559992e5e6bf17279d8194aaa80c62e85,feb7ba55120feb5e3ad3f526fae7dee1b5189d9e,bdb074610c87a210ea4c0d91d579cb4558f4b19f,64d820bffae723b9c8669301b246ae199db61b5c,09686fad46d49016057bae8f02dc79f409b7bd10,d58d64ddb1f205a54c7eb57fe0cbec9c59cad8d6,d962a2b31c9a7216c2df557eaed3e475b13939f1,9c5b6cdc7108eb071785b0c4edd205650cdf1ca4,db6f7c1d74ba64211221a69cfa9fe7171a9199e8,1eecfc948bf6f4cbb9a2481313ca7368ec653056,ac5a216f767c6defa4da720c6ecb3baa05e30254,5acf310d08b2bc5182cf936616ef70938cb2c499,38140a5d8dffec88f7c88da73ce3989770e086e6,d9a2c69a9d1db6072e1d7b7ea4fcbd5c15d20b5d,d0f6be9886afaee6080cd4b7cd5d165c767b71f0,8ac857c41ec8ae02e57eb0c1c1a012525e7e14b9,10d2363fcdd6e15568f765ba0dfd5f0cfa0b04eb,8232c096cef785a2ba88a7324b882a7badb0af44,5f4249e2ec8cccb17b27a7ffd032c4fc237a6927,86a59601b570585dcb7a1ce3d1ccc8e16008f53a,809e2bed22f02264e0ac58bba070f6d84386cfc5,c37a911d3a1541adc25c8d76f717015b2266d123,6423a7665516d738ae50d272e3b4ca72cdb89a9d,a40b2a907a69e51675d7d0502b2608833c4da343,8274993e293a79fc75829df398233915a6387a4b,e2dbe55d56bd6c1209276050f527d36717e33e1d,10325422e5a4735aa87a4d47bdb377e09fe963d2,a069c490e8119189fa2b43d3b597b79b3d42a367,a945ecbbdda782b51d5c2c670345fbf4dffacab7,e4c72a5522aabfa6a660088aa9262d849756e464,4f82195afdc4279c05826fc20f8642bfdaaafec3,607e3447c92754d871a3f2eb8c472e45afed6c1c,aadb9a31ed969fc72cc87d486ec02383faa5bd06,0095d8adf26b9469115b1be0358cb09d1fcb5fd4,151f2cd3d80c006f4ec228cdf610c3a35feb195d,33884b226454324f27700f9069f4702b44ef8ced,23108b1bd90de315aed37fa3fc1f38f8a56ab9ba,d6644e4fbe3d125eed2d85e58fc7133466042f10,96c8ea2fb3719e2f6e3d7a4d7b46718f26515a86,dc53e49b4afa5d59c533cf2b4918402c37411fbd,f9cab271b3bc8c2fb6e2c51449ad3bc07e62e174,383bc8eefae7e17d0bb0349ab2300488c655ec42,eafeca43268f16aa9d4a179e44b9e7747699c1eb,9b481a97010a19e375cf423ffe25dda1b40e0e47,cfdc3f767c0063224622af168e78c6b2d2c77388,4733cb5b798cd72aed82a9118648b4a86c91539f,9f89fd4626bbb4e34a905835e397bcffbad59307,2dd459003e19e4bbc2811b10d38337f295fc5a19,8d601ab71228f7c3dff950540e7ee6e4043e9053,ff4497aff8cc9de4e0b2c6e5e23e5b6550f76f29,0f6a292a29fedd49741310cd517ac4ba907bf8d4,011775551ef75d75f81189eb4604fd0f2ed424ba,695342cb1cef42f30fd1a8496f181c92b21ae82d,c14890f08b9bb47ab8ad27f4dd4c714e32961d0d,f3d2d55ab9b783af65f2050272cd0318a9ad23a2,c0771cbc3c445a9d1d2a43ac4ce3c0edbc806957,3aface95813003ff75505e2ed7d75b072228d3f8,2c437a12bbc578442daaef85ab486d1e55763853,ab0570e63aae3027239dcd5d22caab95111a5de8,f015fb2b31a5621689a57ce9d2d300e5f32357e1,0f87dceb80b432b434dbd81ed4f1ab97c740efc1,c9a5e54a7c0b4c0be46940d136677a2c9f052ed7,23c706ff915c4be7d371d3098fc8de2cc3aa2b67,cf950e7365848130c5c2d57c871652e6f83e96a8,e6b830bf95f712672cb9e77cd852606cd134c5fc,09c52410e62b0e1e221d413d7ab18feefcca6bf7,9dcd87f9c46786f3da54af7ac1ba4696840dffa8,f55530a2ffd3c481f6554d98e9d73f2e8c62ec8d,dfd69e038cc7035031d1807c4ade870d2a7e2ece,a49ea7a65b7990b3e6e625bc8bfff7396ee49300,aa75c23b2e51c8d42730c8b410e6a7148a7bb094,41bc4cd029fc486b5570ec344cdeae049bbca860,51b2cabf2c3737de06fc889b39d40240d1b134c2,8a05e0b0f640289c32f2f261f35450532cc2a1aa,def3c4672b1f99b35ec1fb1aaa316e6043463d73,2cd3f0f10a797b744509903b8eca4fd2fd4ed6f6,8c1a0d2ee1433681958809b4a0fede65f62936e6,a08ec31dbf212a033953dc6916a743dccbb93e37,6b9c3315885f8f9e4be19db9ef05257035b97bca,795fe5d869594bde53f8490d75eedef6185b6c37,5556118ad13fbb80a56d7b8de6f960e9ff8255b8,f643b4fa939e89348618ddffae20a804f4461363,bd5cc81ed7f91865aee7a5a7febeb237220d0c5a,657704627b297a19a693645cf03c5c70ccd9a8bd,600eb9eb99dc5c03b047e3c81b49ee4769787c6a,363cbf7908cfcc6a538126bcccf5c955afda6aa1,c636539836ecb541d9ef71f2d347772cf9f6bc52,7cf5e01c2a152a0b612cb19e02213879a57c14d2,ef3015cc99f7bd51862c1d95014e8332d24c2341,9b3257e4d1a63e0a4d971a331eaf7b9a08d98040,e8d861359ade336badcac3211e5aa447097479a6,d0e2bfc46659025e6262b2e5de984a8359c9dada,044367419dd317eb9f9935d8360280b8b8695462,86a082e8be8c51f07079ded82d6d125c9efc1791,00bf35cdd92813881274a355a33e7e659f5eddaa,ab25f67348d4885620df86497889c1826f013a73,07811434b773b6e1737fe7dd3775aeab8afb18b8,ce1bd5785d05d3df324e1169aab4abd45f4281f7,5bdf0a938adb384bfdb6cc494a2781e2ac33b0ea,30c85ad05363767deeefee577063c2c432b971d4,1661e5519c4836a5a940b13b7797263443156fc9,a64153a3710c5035988690f0acf57dd61b711cf4,954ade4c1ae2adc0aaac3a1dbe800495c519520c,4bd982d1a1df87724682c17c39bf27b5cbe389be,a6443e146f825291308319c6a0f2eb82aa34f8c3,914844e1b226a1ac7ba45626ecfdfb56e7b2e263,44516f77ecd06aa818263ec31e150bab3edd956b,98fa164cd88d126d0f137f5bcb4a1d180e0c2fc4,c79e6fb8f95bb07d2394221b29b75fcc016f4900,6597c196521af500feef7a02610727eafa7ec1dc,4670a941be92a55fbaaa3b4055d444e07ffcadb0,cde4c529034e182a982fd842252ec410d213c34c,b5f5449cf338376d12404d0190054525987f4276,721a6e59f7e4f5c0f3196d3eb0e81cab5e41d065,c7c424fb9c3a39b6ea036242e44cdca324f7d104,a8f41ec97d139f5d0d7cf161e8484f2bb809facc,0181c8059c081d144cad36d003379bd50fcd9da7,90f0a680adf3eaa95e46e96d28ecd6848c74bfdd,12e597a78cbf9d82414b944a5b285d81a2e27e51,b45435c950e6f6864671bdffde29e26cdc8ce15b,4259a706ab8641f408afc3ce224b1c0ba5a43d17,f0f896ee600ea7ff66c083747f370453b914be48,5482ce61b003726a9476c76a4337e043af4318c0,31a9fa0cce769c976d74cdcb6e6ce8831793db7b,844cd4298e46027ba1201df4eceb2dcaa5c1bb26,3ce7f9eecfacbf3de716a8338ad4929371a66ca2,1a20867d01ef8ee5b32b0620125b7c38a10b80c5,6bc8650ed456810d600feea4b80a665fb5895832,1731949116a7278f2b729cbb9e505580c8f56980,b521820b23c45fd068618d10955eceed48801eff,661d16d190708a1a396d8b75ba10738e4574c11d,3c2673e82d33b6c9bef3005a896e5b0d52b108dd,99900ae089cf996bc969f0673349c06c2e6fbf1d,811dbe7226ba0ede04c2062c2dba8f72a1c03e58,46007c151e4cd79891eed4d289ff372ba39d5b8c,b06f13ff0ef8655de1a4f9976f7a9ccf2ca76724,9f7d03f09172afcf0a7be40e3262d151ef053b3c,3c89994355f3574078c832b2dcacba0e65e87ed1,d547412bbd2a1ca56769a2bfa13b7ed9547310ca,d3146a545612422d3f8078f10afa00342b327199,8f54030347e31e0b1492fe874a1f1b67b89b836a,f059e5f7fa1ac4a906b5d2e18d72d410bf28fa2d,fb4803623b8f089a8dfd265a68461f4283e7ffad,c82b1f062af2a1a376e514020707597f6ed1f82d,a5e76ebc404d419651c2a25b1a62199de64cccf5,a91f76da21faf4e8b70f0f69c6db2521409e7d29,5a52446090a67b9b04b67a0b7aec94e73bd21930,82cc24437f43d07880d8883229477735431e5d02,52d6e24d19465e6f468839650c969d5931f66d65,ff6b0ada72106d67aef1ee21d51bacac2f3af7ac,859224ffadb79147088840732236c1fad341d842,314b6b56bec4af56dba667d66a25c1613f4bc800,8cafd87c83f4197f7e8d14de8cba453c844266c0,d5be24a12668a94712247d31f06ef7d416b8118c,a060733e63a9cc476342ca190d04ad027a241d33,e685d847b4c70e354e47ea3990cefda3265aa5c6,c8e648b92cc133a604b5e1f4da1ced943788e64b,ece2f255eed8ad9eff6e236152de65e804c6adb5,9766e22b42b7b3f3923cb9c2502dfc2dd5d0a5b0,776b86e99a1ce18a5093db457109807b766d49c1,e1bc286245ce5f798b5312d65bba64c71921a3f4,585b1cb97b4b9e81b55d68e04b6c1e1195058a8f,7587431987258e94748d5f2fda1e6ca049a21600,53def501409cd1f9e20ac43edba6f2949bb366c8,7c19a1ff4c217f03c0be62baf1169d689f566825,ebe7bb58a541bf397333f466d412e617266ee5aa,6a688cf36e23aded8c9796b786e92144cb4a5830,8cfc1b1207577943d412789765a3a2085f1b3036,577f7b3b5462fdf84c0956a3bec5296bf7821677,65b08c4f91a4e5d78eb645b46d06d7a46f8c62dd,fa91c1b28647bd4217b0c325249aff9638fbeb6a,8a8b8ec8d244b18eeaf651d0ea6e84db579e7d92,3a818ed6a833f083a2db9bb6804c1bdb43b9b0ec,309b34f0573d0ec593c17008e8ef4151dfc35a12,0344ca3f2d43e3732bf16370262303be8761a523,c68285bb3392665827595ac408a5fad828b0351f,ad648cf8a8a90bdee129266ca7b686a5b9a87561,18e692478dcf91fdceb9b9fdca7c61a1111d63aa,5ffb662019501692112fbebf15d92d01c17f1322,f2d8493ac44995170ff84bb895e3a73e0127cc68,f5ebb9a649e9dd0773f9bd3457d6ce1895266d59,3e08af573f8b50da5202f55df62c925f88a47f3d,cc94767e7eabdfcf9d1cab1d8d1d8556864394c6,d6ad3f01574b839670d4ea5cf82a601eee7e0c16,a2dce32cdab108e7e281dfc27dd0a394e1419ce1,fdf05fa29babe21e64f9a5b268dc8406d449d4f1,0b70b01a9f1d9664bb5eac737175f58f06979b60,7076b7408f06bc8a277f58e7bb6c2ec3372d5d6f,cc6beb2d05347fba64d933906ae2b712b1a43302,c7554151d3f695718a5bd431e22c7f4c39a0b261,ae862ae116f2056421ab8d6e997e7b64a95828a5,d65b9d2bed09847ef28b9ceb30c9f8a96e0c12fe,36217ee164239391c672fdfc8f5bd080beab5c4b,44854912194177d67cdfa1dc765ba684eb013a4c,fd60085a2a3891ab6db46dd3b75e9dd67a7c734a,f4bfd9c71f51fb541d0fd203f0df2e609632dc62,3b6867fc25b5dbf27925fdced660553ea8289dda,ed94e5a5cce33af89dc1b1475204734b17f64bb0,87eff4c78fac85c1b5f2309887f6be5fa2972537,732ea5e94fdf8fef42b5c21d001983fb24d2842a,09d70ce73dd37544c92621eecb7faf062fccbd5b,1dbfaeecbd104a6edae43fcd3350c06a7cb51146,060e66bf995177adfc4d73a2a4c9bea70dc5e441,9a7de3974d64a5410e577933e141797928adca71,1e9e36640f762d29c07d8322c361ece163b179fb,c56b87d6efe530590b6d9a07e41ca00af208ce37,07f3694a5c85ff5ee8c556817c0d2ea3504f26f7,5cb988334179b4f04a27c59c1e6a888db0dbfc9c,713c77ceda21d0c3cc9c213341259d64fb46fdc7,ae924788d9b222beefa1723b3d704975fc4e877a,729bcc46b503c1574c7c93a65e902f436b4ec6ec,1f0dfc31b51a445eb2cfbee5321800cf51e10b67,88654b79c92386b7c411f064cc373e7698a49449,6ea2fc8d38e035bafaa92c7d3b007be38c2e9000,95fce758b0e12837869cae450d8029d7237b0dbb,6ce88517b3af6d48c979b6e984889b69c044561c,b52c69b1b0ba1c542b917247f1f76deb4ce2a42d,125cfb4cab35daebe874a599877d6280b464212b,8e8e78d849825696237b9f540f3e082a44b1e838,6f03c0ce11db4a270124b9bf93338d3db9fccf5c,96a1a31d734e663af5c9bcda58c7bb5870e8a363,7aad59482002d0b4bc3546259d33eab20ce76b9e,c1ffdbab58712cca8463b3edc88f9d5a09b0ca9c,758228f691b34c97f421ed92336772531495e0cc,a26c66a8edcf029ca5f94354cee0db267e9ccc20,a618b844c5a261ced37385ab3947de6e215d46f7,fc409b5791ef8145a791cf7bd9b35d68a4ad3305,8dae1f2904b93127f101bd36c1c79e801385a8f7,4f928504ea91c3c1dd43ce696acadf76624240a1,22c30471564c730b02f5f7cedec28fcfe5749fc6,10122741eac52e218771f30c6dc2c0aca54ff006,e863dcb2e7a654af6b8eb5865d8d1d8eee0a6d28,d8ec011d770e1e04ef4f87fba673f3748f363278,f7cbda67518ed7335566ebf942cd170a66746096,7d061e33e59e23dc4b03378f35f50a7d70f033b3,49a876cb1c2a49583b9184ab58a579ac75525986,6dfc3e64037f10b84fe203415e79e2435acff558,5fb74a6618da0ca8b12a3346038164913a5d27d5,f5a9effebd7209f3fa5385f18a5e59e8a09122f2,c614fbcc79615f93d2c60a153db6e82d7474c425,d575057852ab2be41abb39b8de69a35cace5c67d,c8e61afdb89c58ea8ffaf04593da41ff0888d30e,c3b1fefbad0c67c8556ba6b4573f135197f87598,60412131f3679b720bcaaaf3dea4be666cefea7a,2ce40494073aa4e9bdcba4c39d24727b7141d227,2e9f3a80146262511ca7bcdd3411f095dff4951d,2c0429aabd2632c8c6a242e4a23d5eb6f46035c0,bb3fe2a37975920d1c7b9cf16309d86fe86e1a35,cb686673a70a6f14c35575550c48c37d19a1598b,50ce8c44e1601acffa39f5568f0fc140aade0564,357fe1378889e5934e8f60c8d35397bf63871991,9c886bd4a188c91301029040b3a839e4b8e2812d,8b62c114cfc5fd347bd8cb5a391fdfa8cb539435,56b7ae44f957aeb884efc797ec74c790a7a3abae,17f9d22f334c91e701808808170bf60aae7342f9,9901bf98e4921df1c85e323c4b096b7feb80221e,aff0fae2ec3a7d74356776c183c6986eb9eed520,1415c9a2a6317dbdca6f1fbb530db1f558d9bef5,e51bd89201477092c32c180e4f8d00569db17ac1,152e5d48eac990bb3e08b2409816738020ba9a01,efba54d35fa094de5e580b200a8607bfc7bd5a7a,58a8f12b443d7cbc16ec00b8841138ee55ee6630,e7d16c27629722a93a9d36a0b5e0a3a793850544,3fadfdd69f4682f05563ce53e55743f55813f488,7129c43b08da58e1c907dd2b90bb58e7a09bf85c,bcc4f82a7aca3fe72142bd8d9ab3ac6c9d4d2767,54acb6e10f33d5f71770323e9769d2dcc1130a86,bd4066eba88a772c06394d818d87aedca8bea53c,09ef69c5b51115300da6df43690cd455d83c8027,87937b2e7192524306aa58d74c90537eec997cfa,a5391bb34cbe168f2c5f5f6e8fc3a1eeb9399e13,96cb498f9bb88b534e49f9b8301c9fe7113b2dfe,f4a262df5204221184f1f5008b06957868684a25,81ee0d062c888d8f8bcbc154cd7f0143710f458c,e767af7e7eb8ff7724d5f72709ee4bb7a72d2284,96260205dceea0e4734fa275c8f72a617bd8ebc4,214cc7fd596b575ed07a7d7c1006b46d5c75613d,b610707cd072f07efb816074a4844bb1b31e482c,77febcfa8d3a5e078330c4911a94e399589734e5,4aa4291ffc143486757617b743c9670001f8a7cd,ae6a24dd439a7b778e35b484a3a6eae1a8eb64d7,f56931c176fef5e164b681c740746aebdccccec3,9379d0d36acdf78455e81518b3b1476c7691f056,2521d9619fe1f052ced8ea1107851ac98a1b7488,7721302ae5d70d2986d74ae7e7df648bf849997d,1cec9a6fe588c047daa6c711814453840405561b,a36c903d4f1065bc59f5e6d2bb0f9d92a5e71d83,08aa21f9217df0a28d48be5be5db03ddf4867140,b31877a46009d5ee52af9b5f737dabe241689931,4f4e2b064e98ce1abce98428965f8eed86f4543e,2a11642511a3c69bac5aa1abd83d3219871395e3,ce178d8e87ff6f9a12aea4b217c1e09254936236,b4609c81e41d678cf03898a7cc4a4660beef0f88,f013141f60df0bbbd57388c7bdd01a764ddfc1fd,9fb4f47f352dc1c1f5f20de80840d39e1eebb985,bff752134ba7626ca4cdb11a5a8d743d03af4cd8,3ee9cc840088762c875a9c02531077279f7c237f,54f8d3c02abe04765ffe957e7d412bde2adf58c1,2bcf86d8af125b45d39bd1d43b8375911c551d78,bce28f99f383051b419510ef72531e0f6fa67352,aad2db8b12b8c61556df9df7de4fadc927633504,7e440785d9ccdafc84ae7a50022097dc3dd422e8,d3f2a89ba229c57073e4f2a63a9a7f1053a5720d,d784612d0d3d18b2c3e892b85eaf4e7cff38c9dc,c0779f42c7ca46c4cd3ade6261544b0da733e5d1,ad97f2020253c787e2978093976c3b6716955e32,74c24ad1942abb68c8084e0ab1cf0d6e234a0650,f6f8e5dbedfed0d10bf483b636abac87d90925b3,8912be8a88781518e8e47d37a73d42a03a7e0e8e,4077b57f6dd784b0232db0c66999ff351176c323,6e9f406aacc8444d22c35d50ab2e90afab5cddd6,eabf1aaa2523d3f4dc9c99631cc42cb03fa61372,5445f22747d0aba7d9c42d37fb596e29ca51bcbc,3e58ab33b9c294817699ce18277aa6e772d3ee4f,0b14928ee447a59f69bcaa87051af62300c72c84,89f3d989e0bd78f4db8db1d3fc39a50ae5c66c37,729adb624d3e720afb8686093814ab2bcc2d2f13,dd761382d3cfdc11b5de0cb1246de4567cdf2fc2,762641dcdbae9456aa2b72ec8fa1baa0acab942f,884d273f4207095f881167b3398fc2a55617ee9a,cbc8e0b2952164f97779c9a5fadca6acd2600ae2,182e335432fe4634d770c5861be40dacf1816f0c,f110da945a8af0914f348cfe576b5a8257159fd9,47a9ea7c828772625b9e26c0c7a6db494ea626a3,94beded83960af2a15992f6cec8f1f59d1f3c051,46c9b97454b17150b3ee7b2de973eae4aed8522a,ed3c3be6015564a3d542dcccb68123ff1a846ec4,1fa1b9ec8b48e6a3e69a2629b051927bd70305c8,addf9529dd35a7a01b3baee7472736dcff28d294,31ca60623ff48b6b4563ee81901486277610c34b,d0af24cdff2aecc9c63affbb395759d8ab44aee4,c266a88173dd8d12da5519f0b4f114e9441e92d6,760661dfd35d3c51f4aaddf914b32223787ad0c7,60de42750746ab7aa387e2946accd62bcc88a626,1f8cfe7d2b2306384243cae9a45de523f4e0a8f8,ac306ed984bc863a37731a1cb73c415b7658a7e9,d8bbd2f6cb457e84429ef13425851beb272a09af,4a8be9a26366fd482a0b7075bda48f6562dacb2a,ac65ef8457de014462967ee6d9354ed43cace618,9ff7ca5e6079b51ffc3c1bd93380db8f5dbc6e86,bcba9364c60b6b24dc916b1f30af6912c73949e6,5e305c6a2c7d0e3d2dfc9c07a702167f55944373,9d090d40ef488c6c8e0784da877b93a05034e339,1ab1a17fd37c377d96c8b41f41178ef1498c7fb5,50a124bf76c36d47d797306ccadcb3d97c43caca,65302de24316b21a3955265203c60cf663067743,34074f97a0a0572518c8736a30f017563cd7e9b3,8ade49c09a726757d9a479f0a310d77d79d6819f,a4ae7b2374bfab3729937f8e293f3621d3b07654,1e7d8d6f659709d694587261774b03fd93340d0e,e96cf344ddaaf7efe4a7e1f3fc79bd2656bdb63a,55ebc7bc2c7ef36f27f3433f581fb300c4093178,4db794070fa2f8a20fa761e1849ae4a2ebcdd838,616cad1f99efc4d4bbb2220225e7169355197b3f,cb10f50d16626e5fe0c3f6b177efe234a04cbff5,727f55cccfe0310487271a148f185e41f3775c8e,061d70dd783a9150601fc884cc93831d39efd751,b26a3b41b047cdcc37aa65625075fa621d13f66e,56db2c59b0c6ff261f22b8e45d4f26b6e5c51f5f,de559667c7f469bdc9b44661d8d7ff552efee45d,2fec372148a0d8a77e5aaede4af677a644b1f2e1,4115f80821f408d6bf57651dc9ac6f8a296f8790,8fe92b712ea7e5041bbbcbfccb32d6b68d6422f6,131a120d7e3fc8cedf6552f9e5fdb4ff933a7386,e7e48da660e17bbe5c0f8959c2cb9f6d60555cab,b77ce8229b93b02e7acb48b88f904312348005f9,6e790e42d80700474fd942c466dd9013c1056263,9eeb9c1507dd319eddb3ba9e21667d3101f1371b,72ea0f2be8d01e1559aff14889967c8ccbf1822f,d75f0c4266157c351d9df54d877c79eaa0fc3516,c5192345305636887229eb7ae0829d621effc2b4,aee94d0b51becdc83ea4a74e86b242d0ca3d6f0a,506d027199a615962ad5df482f077792841a01c1,5555226cf8d009ee9fdb9164a919e96d768c529e,ebf09d320172073e83a57fa7cfbd2c53f660e1c1,c3d192479bc0727ea892f75b3d98f08eaf58ec70,a9d7cc5a03cddeae813b36e1949d373602749e59,41bdc4e2626a9009b0a0be4d25e182d7929770a8,dfadc09fb25e22ef01021bb5a062b721f80e26fc,2e6efa8f0eff04d95fc55fe0c3bd0f78a72bbc1b,e68628bb255ff74b33ae19a37e17058806d9592a,752a551c95abe091bd69a4c68c8f9d900e5e3b67,b8f3226deacb7b4f969875c88670af85884dc531,1eeecab0f038a35b93faf57e0a9b85b733285a16,487861257d138ed7b0eedeed48bca28c7d0c4134,9a06c433d25aa93fc8e192e1f3310b77cf61acb0,d7eb24cbc1fbdfd09ac61daf4b78022c8641aec3,efa533b3a01e42af04770f8c4ccd49fbc369f374,fdf3d2c2a275f384fa6361f705f73bfdd0a29b88,17ecff749acf32ddeb8c8e9883491503b8d953a0,3ac7c4c9da9c15f3b2762ec6786fdf7f46a76f75,fd10c3d7db77ae3274c89c8fa926c0b5ecda520d,d219afb072c0786e1195479d9bf1731ad8c6da1f,61d2ab41b1d40984be06fbff282c89997f2952e5,809652a391eca056eebc494d106a4bb0ceefdd59,e2c979909b4486962e5fab150e615f66bd46164c,a4a8f826376808e955a226fc7415a30dfa04ff34,c422412d32e14e8afa259124b75f864b4c8833be,76fa83ce78b09a69418a028402eb3011fee5298c,fb85a39f461baa097aad5fbe026673b190574a10,a9a7910409756eeb5aeeb729ee612bad014a7edd,be045051b6193d80af768f0dbc3caf35f78838bd,19783e58f789c44a5595b8f50e14842121e0dbfa,b262d06a27c3d1e7f0b970ef86b16a6270f9119d,59f559ad79c588b648e14950af68e4436e37705d,cb5b5c3d7c87b141078fafe1e19571be8318add8,4b325fe9ccc7dc239fc338dbb97baeb5cbfee3c8,0c0d1df4c310e989855557ec1f22a59f0bc51266,50fe5b9dc521e0833e62df1f2a1b917c9c26105b,306f43c22f3c087e7f541f0083b60068cb8663cf,bc21e8bde6b30b563f4e6c7d321adf128855de9f,32f3b815c9340c9d72e4c65de37488b6a8cdebbf,c2be3466f161ce090ba100107ae4513d45fc60fe,330a6717c673a69996160846513d74f6bb096e3c,b01fe9bf2a54859d6e2d908d04aa760cf37b4674,231850ff0bfbf6883b74b9a2cedb02d30fd6b931,90124986fa98f10b88d0676bfaa612db9d152a2b,d225362cb1753ac98af81477ad4d318e783500e8,20a4cc7811893962b8e21fdf2f52edcff611e803,5337e4e7a559293c8c18adaae3d89f0bd150f821,0e2f4d6f33eb3b74142e1bc2f53dc0d292191b83,e0aba3e6ccb8166991907ec82e38a58378af9b12,7caaa91a86e1cf827a6fde2e5a04aed2859ac980,1bde5cd5bfd78ce4f0b39e66439966688380a0b9,5e34e05fd8e4ce1204e19eaf34e55aa95df4c5c0,9fb2ca62d1cd49e037d14fb35a00d75a6266a8ea,0a3c3449fe484d17b04516d562226337c1b10255,d822758c2d452f6cc75014bb773f9badc3d8fb07,33df0280d9cbe0f2ad2ec3bceea0bebdf1eaa43c,85b6e11636bc561ac4a866ece232ddea65b2f39a,3426c6e089b41243648033f9cd9ed6dcbb0968bb,1762d632b7c343fc524e1e6495babeaf2b9b8550,966226bd2af09ecfdd470d049a9ea1075dc4289a,00104e73df37ae873fd6a6b2b9e0b69bd940ec25,cd2d049fac6301077e0e5f441edb55bd71930448,c0277c63ac45e691270e5c7b41844ccaec02bc47,92e5980b81abbc34a81fe4b07596253653002c48,6eda86daf5dc2668edf4e352b6eed7cbe0dff5e5,a31fe81abad3509c3421f3084326a5d3f3606012,45113dcfed17aa8cfb9777bbce366a1fe9af65df,f6d1a4d9d0fa98e275bef1a65cd40374bfe751be,fa0e3dd534bc53e5923327dfc8dc1d39fe369586,ff519f3d36dc3b4751a06e47def7f7551cc121fe,12f145e46190bea7d100aae6ab45ea0e486be12c,53468c6803842a1c699f16b3cd7e4c935e60de2d,55758ab02604154cab4d44f637358625f2fd897d,4450add7927f8fc8b6ef630af09ab5bc2aa44b0e,31044ba56dc378d68c04334b66344a718116821a,452081a36e6e649ec8958f74a780ddab52e74644,6512d665aab8b9c5760043b64cced13134c5ef10,9524915162881d999befa134a42969bb7a02cda0,f1bb5ed022dfd002221d6e41b1864381d5bf68d4,06adc0bd7e8774da1f02d621b58d01acef940fd2,d4267c5a70f24b96bb96a2e1d3695cfaeaca91ac,414018941927a4b55b1d730fd9091e14eb1feb42,5e3fd2b36e87e86dabb0649f867d464b68dbe61b,83b950724307dc1551a7325961be1da89acbabf0,a19fae7262f9212ada7acde170ded85a12720705,77a30c218d8b1505a9ed450e62625321bdf000fb,e8d76ef9c72325b773b9141a8566ce1147c1ebc6,ab2fd4f98af4d34de1a5ed28c6424c0686f05ed4,2586f75769dc9c82de31c47412f3b41076a9c55b,f3eae24d5955de2a2b98b677718f29edbadd7b97,36259f7c1c9491b70687a7961dc865498b269d23,c34b95d8ca27574c979acf99ee8fb81ab4227cc9,45c80e3aae8710e386a4f7560d45ca1f14e5b5f8,5d369c4fc53a2ef5c47f16eced9fe917a87146a9,8834ab9d6553eff2c2389cc8f6dd3060d2107242,349bec6e65e6abb1d69ba18336e60e3296bb8673,02ae1898a1bc9eb7fe541072b6bd1ac0dbf6a915,558f84322cefd02246c49666d7e7a3b2e2cddc13,5379e899b05a2fe89c1c52f2b90ebdc7127e2c5b,7e3ba40585f473071bb3b05d155d3474f39d7575,92dd4eb80de367ec8df62ee8aa4fcaf40f3eb16e,f42e49c710e732f9be1efe22568f72d6db699192,208e8af1160c871a98547aa02a2be048a8d18530,96e16497119db404a4e59709e022d4f9564d23e6,acf58cffc617b2328c70acaf22026cfaadfcb592,19af5379fa93633e2c7bc0326fc5f3b28aaf192f,0af2fc75f2a7a9e6f5021c68c7d503feb596bd52,9313bac710b3c71d0c7d5d196550bbe88314647e,599448703d8922923874db240f29f2669cffc71e,8138f8c25af368ba6b31e6c0885265cf0783d6d8,bec3eaa55584966aeab7ad00cb16b07656b82553,fa4642768201907dad2d4e37009bf73cc2890ba2,370657f48e607266ea493d5949875322e7d32849,9b4a86e68cea12630e5ade386ec78d29d9b8a466,c9fd4d57412828c0df0cd68cc40677e822ecbfe7,ab4a888d3863dd22c6828b01e3e840b4013c70a9,cd299336abb873f53664063e0a977650f22fe8f3,6f254e5e71609487a6dc99b2858252569039abd4,c038c0c1c317861366eae15f3b3dc70d9e927992,d5c724671fd72d49ec416e7fd086220ef7c8f4e2,ddaa71735ac8c1e7875d4b7bfe30c92921389982,6697e685dd8d3bb7a41c65a013276e79910203f5,796a288e0c2e17ddf7dc44a4cd790a7eab4e158d,057b36f3f0235f39b65ede6292dbdd4546201666,e68020c44a66557c13422e416b8c388f6f2d3835,108c5edc91122f913d6962d557e497da18a66067,9cf95344c06ae96954cacee357694253d12559a7,f6b86b380606073a2847b8926d893be047903995,4564a17fb24a851771f83a614d0bde5bae05bcfa,58c67ff22e0a1531d28369ce52f7b30b4ec3d434,4a62504cbd24ad342769ef538e31e91f311f72dd,b785836d28f31bee038d45e33374c4ec5e15b435,72ff538d79184b2542502edbbbb4b6e38d2a71c2,e477b4c1b4f8b32ad5b90287146ffa9ad1b811c1,c9aaf4d4fc9b9dd31f61d95fdbafc820ca470910,c296d280f5c66277a7f0b6fcd0843eb7ad061858,01a27abd5809c9fe5a552bd081991af301ab7459,d969913836215396e8f586ffe6e0151c47d057c5,9a8268b53dc2d9bec4c227c454b815d68fae0f11,76036954547d0ead559f4e7b258019b3355d05a4,ac37d8d64c3f5aeb0032f420ea976712947f2cc6,3a7c1a0ec0ef23e318e465fc5cafeebf544f10be,d651fb37e5a3ebc1f0a4241fe569d13f6e460bae,43a4141d3eab58255bd74a0e433fe54fbeee5ec4,bd93ccda0479075258d18c1596d1c6408ab854f2,e759649cdd49383c850d9d38eba21d0aab4df930,e4c5b3536ee6df12f621583a2bcf5da9f576015f,1c95a2a5d9e40d1b7d8b4626890ff1babc4f8862,1acb3d3f5f8230e4329be95644c9f433b75bf0cb,d8f9af13ba04b2b483f6d441d1c4071174726988,afa886998bb8ea7efaa2ba1c4547dbf398cc86d8,3817c05c41caa37a46f114ae995a439b68f46c18,5cf11219eed630818a4ec33da3aa78486e02ee5b,1f53268e6c72cb65abecb04826c5e4243418789a,c93eb599030a1b151300fab3aff28a1bdff5905e,5c76214e780ded02c42788f7031c36864352dd62,e6ba4903c70f15a22637d21a49fe49baa8370dc1,cf9cc619ffdc632b9fca6add307da0243d34bc20,91170b25ed8503338b905ab1e962f9fd9ca2b70b,056f2e0e0ff61dd3bcc63791214bfd87e60726b1,d13cf6f856458e50e8e4528b5be87505fece74ee,72e2cda2f031bccb6cba1547981fba70f5d34327,f57b0881bcc8733ea6b3e47e7345913b0662f03c,7ac4da1c3a1583ab4e288bfe47bfd9ba45655d45,dfd5f19d42454efe3f9ab3f290ab219c96659eee,de2bea7643c2a1324a90c9e6931ee37a1d9e0f4c,a4c2318b1c86fd267e490818311859de7130c6d8,7fabd00432b9974240f1df75e1e7fa63ba276589,1863723f01e10e3930def14b89e12322bc6f9217,e08fbb9e9adffc54c5ad87ddfd57b590e65ef862,f5e5d18165434e8ee03d980373e883850a3f8cdc,2d935482d9b026ccd2cb2b55fcb05380a4466500,d08c40e1af3570b58733be06dc5bd227b44e30fd,98d829eb6af5449ac27b66382952de37602ebe4e,42874dde9a3ae6dd3d6b49b8c78b4bf4c7f893c1,51bf45a89751196f24c72878d568c50c307e6cc8,fb7aae4c64f7d2bf6dced00c49c3ffc428b2d572,b0e7365e0cd233ee93d05f620dc141992efdfcdc,fc4bd9b4d0f05c0706f19e20c0fa6cfab852b719,0721f49bf0d8b954c8a4b8d75e5375de43af981e,b0580d508bdee2903f05d95d59e6e9a1dc9d710f,32155107dd982360e813d10d0c76f6f7cc2cc7bd,6b323f0f53f2018f83b070d7b3a21f16d2f6acfb,1954a51bb5aa0ab3cf762c07b961ea8fd873f17a,1642b00d67b96de87cad44223efb9ab5b4fb7be5,5ec476b0b756852db865b2e442180f091f8209ee,596afd4f5a73c7fc756d9bdc12c6613856ca27aa,7f0046cf4e2161f0145e0e59a1b9684b04061916,1f5e68b5612053cf35b31a13c8b5e8341d892f93,b236d5259f95b755aa5e1d955c8f835312047d77,8fe95aaec201acc964ffca80954e60f7c57d7413,d5b16405c77037e37bd180843c1eba79117da7a6,d3aa5b77428d77f5954e30b14e7385c15f6f398b,83119a80aa1551bea003ea6b9e65b616b7795246,c4de3dd2bb8afb3323fc3aaf394a463aa4222768,30f5f14baab2392c40874b5d9aa4a852ea9f7136,5df60bb0e65f30d0c79615f53e988076ef1bfb96,f7f4b909d0961528c9b02ca5492b2a57a8df8bbe,bb3d861fcde210e45f3d3ac59d8ee6e1e4086cb9,1e6dceb8ccfd2c97379f78066ef4ad2b9a17b1d5,361b73775230d91b4ad9ed588d6d57f3a049e907,9a2f53d2d56fc58617f2bc7e8ce7f488dd05d47f,53cf9ed7f642bb2055c54d41c77cc2a252fc2da5,7d9196da0ef3889ca60a5dd90e9b9eea77bdb01b,315b0c786f8f64623c13789a842153016047a031,d6b40fdbe9ead76ca40d81b0e7bfe568fbbbdf6e,274aa78fcdd50e045eec8394eb4f2f5d84bd6ac2,6ee118d2a12a4c0bde2c5b828e05ea9b18d4be2d,eef240cfdf77df4d3ec55c2f03dc52112dea7553,b979fd11e1753823021b9d718398167497415b47,0ba5e75432717181296459b9bdc98f9cc3cb2c7d,b7430de759bc66fcce9c5becb7dc0b022606d8ae,5d83e4deb81aa7e06e4587809642e70ef9a03662,c635393fb9996ec9d33b32ca27a720d6d5593255,cf4d2789901be233792839384ba76b94dbd25888,46a1c86ab3f4e2068023a1faf1c704443f3f36e9,d40336887992ddd75697d957b8bfcf09b5881ab4,d31ea317a5fa6cac0e281bf0aec5367ebe45a217,9af55b64790072e5e82efc067a01bd8f2e38bf93,88564caa20e4bee55287b258543cab35e9d3adf6,810250d7223969842dfb20812f0a715b5edbcd4b,7d54ee797c49148126d8fd99729a9dcf74fec278,9f0af0bfee5a92e67ee54c185f49fb7c771c15ff,05f3b74fd581ea5f8946c64edcb293747b4d9a71,43e4df85bda71ca1500112912a83d3ed19868c4c,8283d966f47280f682a1407d499346a383d1b1a5,5878adfaf37ce37e6988956e4cd5c833c6ec61be,ace5ba00f7067d517a35713f439344f24144fb79,67e443370e06288fb2702d62c0206221413ab852,9687cf07f34bbf5f67c17e75cadd287b9f6662cb,94cfd56bd9092e0fd8579120630dba0c857b7777,077913c7e9eb8e4cf8863b7545bf53c2923066cc,c68c274bfa036bb0c2c44bb5ea774ae3dd0451ac,fbb81a37f80fab1d1e21435782e034eade76114d,278eed3e1f7cfef2d39a25aba53f4478c3ad8c58,73dcea01b19ed9fc9c0d5a8c38e752bfe071c801,54bbca89040ed195b89478713fa4a181cb2bca3d,1fe64733a2a28b795bddb152e9adf7489b6ea7c2,1194c69fb122709872fd634ae9890cecd1d83e90,709aa7bf9c998cc75f6e0be7d258aa5a07ebce8b,cdacd4a987755572bd4d6d328b371644ac07ecd2,ee7ed6e655c08774387f9ee60ce11b84d7901cd1,edd64cfd822ae2ca2faa8dc1c73edc38a6e19f0f,467d516b9cd00c1aefd2569b41ef43bc187d1312,81e47470cc76677668dd8f44c99d2e7b1071834e,ed085d064c0f80b0bcf382550d10fe6b6fc9f283,4a025d3f8e31bc3e944399990b3a4baedb90e630,157aa8daebcc6a464cfb350de346cc550ac13d15,0dee0324f694b1e035b9c3dcc6923278defe1d3e,136b96c803ce4353f2cca2b24171ddbe74345fe6,99c63edb10e945d466dafcbacbb6fe930f2a31ec,20619b096cbb250518fd99eed15a4ae81345ce9f,68c0a80d17688d6d56644deaaaec5d3575042587,1c8fbeaec2ee80d45b78742d63aeec0c9d0c4e9a,7725a72c7322d3e3628ced092082d1b76baeeff4,a02dafa47d0b28996ee52d1cd442673aacced572,b1162d812eebc9298b7fd62eac1dac119ae5f271,125c820e8d43df150ac09c9da5b38dcc1ea6e03e,0cba84e103773cf86b8691593e9d8a0d8afec1fb,4f00c553897cc3342089c4b40f7bed5f36e924de,680752e1414c07fe4357d5b6fe3052f3d9dfa374,f36d6870f2e1feef7f1d6fffeda056fa72c051f5,62e69cf4f2fcb3ad8bdc44f75f8a9e3e20ca7337,7df57879c92a467cd71860e6cfe14a04a49fd031,fe63f95fbff43495e57ebc37350798dee024cf9a,719d0c56036111d07c46ab5b0f379f62f14ecdc6,4951344fb2ce246e0cc5a2dff90d24cea6eb3a75,c151913ae25d55814c40b7f922886d52c7086787,a4d444d9de192ddcb1e37922c5f213760ff3a24e,ba1e716261e055f84baa9a47f9ae2ba959d54390,4fca8268a9c360795abf143452c8dfa06c442d78,894fd838fb695d794fbd28cc66c82b80a9688c91,ed7710f41c594c030188917cc773adbb6107383d,648a21eb5ddd2b74d5267919c6c84c5b7ee97934,11ddae0a3570fdeaa421e4e378ae14bc173598ba,9e8b370391f5b3e71cc349a2ff556d8a3cdf1232,15ee56bd0f91ef807a3e729ab3410a834ef3fcef,72784c46f6a7d7644398db5c7ac8bd3822c523d4,539be680cd2b1a8f6833b28ee0cca22a88161466,a06a726acf59ec624fd65f73dab3051962a71adb,5a87d98aa1b85f6ed33275135ab4622bcf1974ff,90559c49bae582697906598c735385c19daa6da6,0f5b35aa8d60b03f1974f1ebb784fc85054c67f3,b34856498ed290a4883b077db0d4df2991ba190f,d73ff41fa177ac154aa01c67ee80411c68696790,8cc80dd1a449f98924ca9e74970b35f940d43800,04af9bc8eec8397c0a5c3502145db66eb0c87ecb,4f296da76cb2faeafebac39435a14b5a64aa258b,15ad7824efda1e1632d24f4c273796863841c537,69aa3946d2a6da812c44a4e7e7fe45087afe1cdc,6607ad4329efd056fb38cc87f2c84ae775fd4a1b,84a844af5d30ea41750071dc8140a56e9e146bc8,6f95e26fc92e929fde30d592e7572493d360ea3d,fc3d530961ce4f23fd2c8310f82d6d1fdaae6c16,53c08a37ef81ed2aa3ab57f5933ebbc5db68328b,bd861c0d8009bbd51137bb97d15d5aeb8902eb2f,584a10fda56263ec0ed555f9866a1a82851a83b0,aa0c114ac9636012a941ebee49d69cbd6f6291e6,bae09b4838de43ab6a8be25ee25d0d11f0fe7477,4d8331ef9c3993ae1d3c091a758b24cb9a037fe4,1d1cb74151d6fa0272d607d06ffb85ff4a50e972,6602d00afa7a5f32218784dc54975cae5540a255,cd78c96d225752e3656a2f1a302298370b55a4c9,f27cca133f9a28899e00488ef56b2f8a2700a68e,3fe52d0cd85c01eadc44933df5596d177c3ecebb,81d1982c3cbf56f77e2edf3f063ff84e6e748549,e32f477085a9b6f658463bbbf355405980c515bb,7419cdb1fbff1096edca78bc5db34f7fdb3b7342,ce1f9e29288cdef4fc295ec2d5b4f846f0b732d3,60a8028d22b88ee2f2d7cf7657ed35f4046efe79,c779a5ddb807f1a84e1e6a5e43a0f1296dd565cf,c2bfafd4bb8ed95e30dce29e65a9afce26a7d860,e48157a0de54d6b82137d62dde9cdbb4bf5c6f40,6d908d014c25ef3da000789dd56de0b6e7c9ea8e,5bef000847001240749e50239a25ea69485c849b,82c1bee3f786f96fda51243f4cc6d50995bd90b6,5f84693e1db2c35b9b797614e17136655c433335,dc8138a8a9b022d156c4d04b2491b269661db396,233746d8fdb7e71a63b5cddb55421eec87bbcc4f,84daf6aee0175303801e710dd2d326ce252d2f88,6df343df2635e7e0518a09c374532ebf22a30529,6cf4249650d72cf21ae3addacb5202089923ad91,d990feb36764cda778e6b4ce9469654229ac716f,35d4fd2ae778b4c3415b7ea63d2fa7c806ce0033,c00465cc99e5704a0da2d210512b220f4ba105f1,db058c359ece2c7b7e158840d88cdc458062b06e,393fa5df9262c339e004e061809c73d7637a909b,59899e1c820cd3fb8789b9cf8648b269b97763be,ba8758326c28cad8411edb42a30bb833779d0f05,3a1d8e7db0e13a69fd1bd272396fdb48a31fbbfc,2ddd54a7ddfead528f2b1de92dc8dd16be7f5f89,76d073f5a805ff16b6ff9345696c13201c5603eb,c7599fd2a84b3d58473fd16c5df4034a8658e925,82b547ad25147df44f27a3534a5b618755217378,a431ff8881eb8ac70af70af6483b03e3579574ca,bc85bab7a53a1569b4740c5b142b4dae062062de,c48007f44b05a445122e7c425e869b7ac479aa85,d61e967badf734499ccde4750729662b20d6545c,62e56cd3884d224e42cc8b449ef631a0909a19a3,a85fe84ce63f873b760e311f27ec42e05f1b3f42,320c0acf89acb5950a10816ca7dd083842ff739c,527213decc04c4b45393cd0f67e96cb7a67a8f66,0a114bbdb01548a69c7a8c155bbdef7785ecb389,bb0a4b6b038bf912873d10fc0f124ac3238d3e32,0a7871a1411b64a7c90f4ae62f9eb44dcee31181,5310e25a6cb79eafb21408fabd744f9a76c2a020,8834c8e380b7278fc37a4e6b80a9198a895d8280,ef70e7408fb01c164fb0f1d4f45e4d9ae2d284cb,b9284992ea3c8c484893517ee9df3b2274296959,939527bcc5b80a1788d876d7e47fb45d71d21424,26e77ea86294f5a9aa929f9acf7dd76a046453bd,3adcd2103d1be4feca870536e8f7a7549f6d492c,2edb7a20f3856723fc715f7c72e10e72ea7df385,9843210e5755d2584efd3496d59e50e721187842,e6cde856d76935ce2ca5323579d2557f5412c774,c460996e75df489d6bbcb732763c10d01e62516f,115198b9c94bc66c7a659a04d0e2f65959ce9297,276552d5e73525cdd29d9e809659d35f34c5250e,c0e4ebfbb0f8c38ef672394015f47fd72ba06cda,c61154272699761265a1f2e5282ff1bdaf714b6a,f0b18d27f01492af6874baa8415ad17511eb5d4b,45a0337e1d9d23126dcaeff9c0ad96c5b4011957,e6c2735e952c4972095afcd9f286d5c5c6f933a7,90f4139bf75c94aa1ed62c5f64c3ffd78a1441d2,67c51ed7ef1d7acc4010e45eaf8088bd91cb702d,9acc3e824e2efa2e496df8458d207b5fb5722e6d,9dbf8388c5bfa0c7beb15e835b3a5e6fc74ecbf8,f30855735a40daaffda15794d7abbc6ab8c699d8,30e5023265aa76e6c32d3ba43952aac964112ebc,dd5e51e5b31f36b66431ea6e4b5a2a6bc4dcab34,a3b3b74ec6325cd19169fdbaea26f27a96a72fea,2db7aa771a4ee5cd0cae28fe54d7d89fa62da81f,39513f9142cb82b84181a11905b3866a49d5a3c0,583d96b0895beafad326793c0cd0d273013ff137,640670bd862d008990c442d2d7cc26d7fb3b6e86,0f4a98cfe1940e3f7b341ef6d6dc87fd951e6e58,289e7a769ec9ab110f85848b281c4c143ba84e57,0e11402b986da1eaf4a96a11c8c6318c51fa47f8,1918bb005e33c134564c4eea8531cc5fc78880e5,27a92653a00658f76f91752f1fd88b93d8dfc7f8,eb5e737f8fc9640b948878ce64f1ab84455d982c,e57282bd9cdde1c4f707dbe111459b4f8e370bde,9cb3de671396635382b6a5052a67a12d752a2b01,c193f6556f7cba0fd7efc000653050457f09b9d3,b1e21c8a6e008439d69785e2244591b664ceb6ee,ba72be98b6cfad5268ef8208f21c17027e726973,fe95eebf7d6d34e843679b5b9368d9cf953f5002,1a3337262c7bff09eae06e3b4247f6c7133f8fee,6ed868d4d0a48a7f8d086c16e3f6c45c5a973a3c,159b36e66e6bc64039294c7c04bd147a9888fdd6,4c818fb356563d9bb0cc01cfde94825aeef33ffa,b3fd2560172abe0a7cf78c89b461a50d97413fab,8b04e571945fdeefb75a6278c4a53c493054c928,2eb1586bf77efcacf701df14ad98d1d6a704a35e,d684f950c4a29d10097590cbe4346ad6e82e5e25,d4fbeefc52919ce6a50a95e80eca04492d1734a8,0ec653ec42dd2e81de51614753c5cbfad0d814b8,e3edcb934930f79aa7992bf5d4d4073b92a6ad89,7727c1cc080b9f9f1c082b7e8c050dedb992a33e,ad618b7af93994f0f597b98ed41a299902250c3c,ee1a5f5639d46b6ba3821d90845b80cb117770f2,2d00ed4676f637af5d81333d750c74e3ad185313,7c99c6234c7b403449420b2688fff3d516662591,73d69dfe8677210e44049bc1a2a7d1ff85bc1ca7,bafb7096f0518bb2dfc845564e821c94c9f7cdc7,c33d3969a3abb36b8bce7a8f1bc0596612868f6d,ed39f93348bec6fc6df694b54bdf9b70503404b0,5214f666185e28be8bb6a19bee96f174d62025ff,6c8caea3311ce08b6fa1bd2eb38054494faa2949,ed1d755babdeba49bf3912d2e3788d777293bea2,80b08f8c3ad0c9386447ba54e277ef31041ebf86,fd7506f4d78a5710f4a34145e6a9d55b7b01eaa4,a049083c8fd6cbb8129ebe9f1c0c65725e8b5d57,f4693f0adf5c9994127890877d018c4ba7bbca06,be1e92fa7936b62c044e274f2f44cb7fd43d71d5,b653182a8a6340296aba0b62bc0309489d5052f7,eced8829bfbc81c2e6c5b2272ecff0470af9c53b,fb08d55cbe50160fcd7184845ef723f813b7ec84,4f5a854b287fc4cd24cbd316c704d15d6f3d4ac5,68b92abce7b614fbc2c6852fbe8124c67ddbd4e3,9f363c0dae340911f0e76644f1536bf94e2fa212,0acb702f3e6a6a3900d75f2b1df2aca76e853f11,90509ce84e7d1c9f78ea0aa919ac373159fb28ae,9314193c8c6e08b1b6ec1f8d8ae1380c4b7d0585,0db8c22eb19a52d4f22cfa9413e677ed3d53428c,f8bd75d37ca12c5d49c1b628c33c0b45e2d082eb,3b691712fd2dc7251907912124de0954f0652f6c,e585cd0433ae4cfbc56e58572b9869bd0c86b611,da1a5fe00d79e1840b7e52317933e9eb56e88246,0d1c6168f4864891c2997b09ce014e986a649361,3eee44cf63b1ebb0da6925e98b3dcc6ef1e4d610,e58963b51e0f4f04750ebfe3662df4611d89292a,59c6e94d52eae65060b30fe9210da71bcd14665e,8ed80d9d68fb4c0219563a99f8026d8f8dd67462,ccda2db1619658077a07d577b7892d88f70c2d43,b2b8f4adc557e4ef1ee2fe5e0ab46866c06ec55b,52372e8f2b33596c1c5644808d4f7124830e3713,ffe13cfcca913a3eff9cec27f0a3ad2b6dcedcc8,d471da930cbed656eba9167316f809fec2597bb3,dd3ac288b6143ce6c3ca9cbf1f3bb93bd1e6e782,d323621656afd9c1a31ba8f607e7dbd3039efa51,42dfee86e39492a46e5dc47d5685cfaeeb6332bb,dc77a0915d9ceaf940067780ca09aa2fa09ef81d,64aa0558791501126ecd1bce65924874c5297f8a,64e8b87291e229df32a43922fe74c3c96502927a,a0eff4bffd88d6c0428c3a8132b3709d893142cb,42d42b2397bd4cd96dcba38165f59973cd04cf69,930015a137f6bc34127d7646b36d0550842fedfb,a270ff62852e62b5ac0f943a7e57292a72b77271,9f0d58985f4588981eefaca0408e767eff1bef73,8f346f9f1263b2fd5923abc0956134df15fd9325,ee851e403b5ab4b6b33713b08f9568e966ace052,55e8eac25d81f07bebb16d812c97edaf1393083f,9ae946c7daa09b20f4089f01202c5e73c5afb471,c8bdf60d1d0be609094e14054be0b9af0fb05521,9d4f2ba886b003980f2c37a4de7a3e6c3c701820,8713af90d540e7bb01f8ba1fd99f6c04e41a7433,cefe846e3e4a239dd568623346160ad41d7256ab,712ddb1e193967c27f5624485938e7de5d732c6b,992ab3c9f2855034f24ee3f7638f57126bc1cb93,b5eb4fcc8d325810297f10c595961d4eee528ae0,eed8a7adb3de7441751e846f4a75d110dd205f23,b9e2a97758ba6c007fcda160c4d8b0528bdbfebd,1bcfa1cc87889cd97e62a9402079f5bc70a0f563,07de4dd578727555bb94ed421498f455838b317d,641aa1c663ebead0189bf001a06ee56463070ddb,b9522976f462687b0693b7229ba5c7faee0cb74b,be6789ced66778415184f6d36bf662704cbbd911,8b66a577f44a16e259ad5ba11695d20e7c3a9cde,2fd2a76110af7ae07712af01708cc00310af64ef,5723ce72d04c8ff7af8f245518cc48291701db0d,611c73889b772dab7315c952902d5c649635126b,c6dc370abbbf0b487a13bd7f564287a41755bf71,9e62a0e998eed0b5f7c0d7ba32c61b5efd287f54,059c468f73aaf76ee7118e0167142d556dd9453b,b5b45d3260bc83d2432566dfbf22f0897240bece,22daa5f1dd4396e94224841b3bf0e9f226e86695,4a9bcd0f5211c91c4c2f47313c8f8013d0dfe03e,864fda4370a8d1bbd942400dd899653fd5d85244,96eddd6ae1427222986eca344b898b3332792a01,8da9a65b6398931af18febe082299c5c4b932924,8354ffffce024a97ef5e05b7cef4a82c263fc07f,0ca8f9b9feb2d74c6373d1762b1eb4a6b1f7f4b8,13467cbc7f319f7f7e9e9185a673714736e77b83,e63c5361937cc2598a3cd030f79733cc8c22b6fd,bbf65339023bf627a1843073cab699ca1831aa96,56706c8203ed023a3d21784b6e7fab40375eb9d0,274c9c1d37a47ae9bc1cdec1b0b0e4189dd44845,b88b065aa955d7a7d8f74c427b05d2243eda0779,949d74737327f114ae97a18f9bb4a4f5626b59a5,51186c1def4ac732f7d8ac6efa553e676fb7b8cd,9f1dabed562e5953af25369121fa7fe221a20276,d86509b09672b874de2f933a511a1f74af6814f7,525d1fd7ca383b3426341c58ba9e2d2e886a59ac,a528bcb1ebafb1eeae14fd3e305f3636d6c04717,c4190304baa18d3a376c3c2232f45f63c479a5b8,bce159a0c905f673b8e0e4c9899543a812fb904d,333971caf33dcc05b6f714fada447e9417f6fdc0,9a6e25230eccfa131d40eefbc4f48a13ac31d640,b1c45ac691d46a8c609f2534d2adfa59c0599527,23747116069c150e26e0dd42d61331b1108e1e01,74ad2114700446837ed451f36107a056301a65fc,dc9032be284c70f53d8f9031cc90e01678a0e55f,6b9e6419fc944d3b5eac58187a6cd56e97328c2d,a424d2ff172aa3be9eb5155e732e6f61915d7b5e,13a119de0b5709d50214458482f249f5de2fd4b6,004d5e672e9b2734a4c27f0e20504fc615da3476,b6b59b189c1274ae43e844863c7a2468c0e16b4d,73733206b943f8a03d18574eb7585285eeef05b9,30681261f39988bb5fa28ded714bf52c21a60731,a784206a3ada24c0151d6c5f5c25b095fc260dfa,fff00791ed30f338ffc085f099be5517dc359261,6f129ef861152c94e953c8151b2d09ce9482dc68,b8ed8bbd5eaaa6d3e463bde3accffdf3dcbb77b7,256420016e2321dfd266f9a2ebf672516cc936ac,c4161ee29051c6e44773fd1837d2080489727dbf,06e7d46a49c5d31abca644fadc2e3ecf6f9001a9,1e8a31f417256b9f555b537a09c13f1135addbf6,2d79319a8d4a3ea256ba1bb6364c1330518134a9,2a491590568140349f776b2a63bcb4ce74d147ce,32080b32a4eed0719b79f4be332ff5a55468ab7f,3f66e516a7f5833be9c87911952465220acef149,2a069edb7e7c46ef3c1f56e8fb6cadb779ed2e42,963757362ab2ff0f1636008815549322fef1148c,485615107d09a9e83dc88dd4f89e6358f2351ea8,9f673d4da60a889ad5fefb6fadba1c40bb3e735d,1688a5a2444b3b636741d5675646b0b74820b4fb,284b6f5477838fce398036497e1acc206b1eaaeb,ffe28c43e0486d443234701ab9d791e703c88071,3761b5514470d3f06c9076b0821430d0c2cb2da7,a36442f0d08bb1a5b964b4c77d4c64eaf251c3e9,2ecede5902f9a132a632b8431a35daf5174e1a80,4a2e49fd8daa81cf2ce331c3a3795844e79814b0,90e83728aca598a545159168581f433e1ec1b234,8c44a71208f640835d7a205a7b6e58dc065d8dcc,74abd625bcaaffccddc3ca9faa1402b179c251e7,ea64efd6dc61cd9c9b1207d2da37fdbea14d6b50,530049b41c9f42e11144fbad4d1fec65ff0956e9,66c451d618577c1a1e1bf964ff990574782c3bb5,d08fa6d71e51dda58f265635ce344d272f228552,a10c6b01425a9c21cf687294bac43a63de0a0d3c,f9f92677a92ef76f92c90521904c20b8512b05ff,d378d22b164cc87b517b99af7f14e0c7cbc83faa,d02934150a04489fa20f108d6695055c85dcc206,416444191683859a50a112b865f84fc2503d057f,30117b78f52a32cd9ce0029025e38a0ff7962c47,989135e762d3f00767240e7b42ee9e1cccbe43dd,12cd61925c37177a82d2adc76f6475e662030e12,17f4a06be88ed9c950e562aa72755c7a493b8ae9,c3768b0fba8f2f565118c611f4ced4bd6143d022,16d64a96a0a07468bb8b2d3293d374bd4373cd70,1f0919e28420fbd1568ea1c1fd4cf7b46eca9b04,4e347adfdb1a84535440d6c9f392d134a84969fd,9818f5ce6f76224f0d5d5c8ad583d854b8cc6872,dca231dd1b2629f45e65cf46b6f91803fb448aa2,9930786b2d05890fd071332dd1b9d7d7ad0e1b3d,b367c37c2e92ae652e49b361425bdc7ab3390f25,bbd32a63be1334620c1f52bcf4494de4b1e6931c,6868968abdfb03229bb0dd60e57a502db45394bc,3fcfac543d8e54b93695ea5f32b1820c5e5849dd,af50960c662e2d006dccd4156ca85ba3b2d3d5b9,99d1ccf360643d89b88bdd218fa917d365d95cde,3c32e5384eec3142bb017fde824dd1cc0db48876,b4621118821f29afd3d5ea47eb8a684f4e5ed3ee,eb3f760c1c38fe3910d979e75093da67f685e2f5,efb03bdc301d917b746e6716f2a074f54ded723b,3ff71911718c07ca1016ca855aece547061db85e,01f84f2b0d9c13ac82ad471469b6a5692d0f8cbb,a95c1598ef693cbd7d874c33eae82433693b75d4,6fb796db3d138b4e97dc1fceadf6bfdad74a3533,cae430631d5472394441cc82e142103c3a70dc83,47b76cc60f7b73188cbb47a0879aabfa0228be31,c64d12958fc711d667f26d0173bbaf96157d629a,643590426ee7255ee5e1e661b9e2ac8a9052dbed,31ad1256c66f47e58b7ef40955953e4a1c6bdbf0,3c984c22552eda0fb5b200efb3f239213a4a04ca,95db7d0aab9bea25d3a14db42a7787ef77861f45,40f0cea10371f88cf29e634bedb1ee7736ec14e5,1d6f5e40ff44f08fa67c6a2b57f7ae4a5e4b0be6,e0270b0562d42658a57c4fcbf0cddfb5673baf5c,6eebee491388abd2ad61a15d3f28b167c9f0f7dd,3866c74f9a5cf7afa7fe5366fd056e92e0551191,ae3f537711b1375c4892130d65cb60928549cf58,49c3caccf463ee26dffacdf11356ff4fadbd854f,25ac3249dc2a40bd52ceccc9251c8446b036d197,6ce9662add46e3cf144be07f7ebf18e2d25a7abc,111c4a5e54dbb1bec6537eca02618e2287bd23be,e30788367dc7ce4e4e2d8152bc7370af8ac2fd0c,b1875ac1abf9ae86f5a589c5144c8c9902a1dfa2,307ed458578e68e68918d3ccdcf4798c57e084f2,0caff290df54a8a3b653840fe257fea94807d697,b44b3d95b321cef0281cdf130e8c286bfdcd60af,8f77bd63d8b5b2ab593b134fef2bf5e59bed0441,4e410e068b8d367c53766a7da712b1b6f3fd8101,2412c90ba5584fed123fa6a33e752e6c8eaf74e9,47ed0c7cdcb4d516e41769e38a9cd5ef4d01713d,f5ea49326cd5c09f0782b0d1bcbdcde9053ee316,7b0388878e522468f90ea163b15ccfba05616c95,3a44d5871521f1abcfb65caf81ac28811260bb69,a653374b2871d67f51cbb4ad2083444e9c3afe1c,430f96525f80fe4909208ee4d2aaff81c312aff5,295d46aeedf3660d89d6c578b84c410089f9b1b9,7c05411f80b6748b6b2197d2014bb98c8b0857c0,140846cf81678649b6bc29497c3534aebaa1f6c3,0d0e7bce86d9f17e95dd39a20b9781121a0e5b56,0512bc21bf4d0f1e391e4158adf0ae145d408ee6,283e14cbbdfa5bd246a3ea9dee5739959f64b4c5,354b72afb59ff145afffebbeac8a7478d4140e75,15c72674ebb4bd99790de97b5645f1531a3a7c00,1a3d74470eab60d668859571938b470723726139,330d5cf99c1eefe3fe86dae260a8873068650866,586b6ee15f526d585628a7162d10f08deea6a93e,71491e23d68df50555c52db62ae9bfc0a2543b6a,e56b2b598a2742ae8ac97ada82a97655b538ee94,3d129b7e2f6373f7885336225d3edc93b3f624d2,4d3dc80e4b3f7fd0e034d544345a568d6d5c5d26,269e6693ca1f05bb7e2623c538b9b934fa688f41,c2452a5af3b2f1db542175221dbc19eb492f02f3,9ac217fc697b3afd0963b897edbfac265ba2f571,a5f357667b195f9cbebc1d1de8f70c6e0c28dc3f,c3d13908a2e8ca7b9832fa693ca72bc228a4e92d,283351276ff704df65779624e195701a21f0e25c,38e3e41049464fa3b8ffc1e810f87c18d91a7bc4,49eaf68b54f4114a0176ee56790d8415fd64876a,42308f780fe3d0c2223c121493f97c747226bc17,a097839338082366071d8a1e0b68e9762459b634,10ffa59e1b117b507544f2977ceecfcc2d7800f9,a33d634e68061f507e9ac62ad185158b58e502ee,ce5ead2f93b92c815f1304fd51dc3fd3338cf19b,3e26470374ecdfd77ac29a0f1b99c4030abdc6f5,2f86fe76da3a8c488a0bdaba147c826f19e65944,0e7457b00b0a7f0c18eb80d3311e1ec0c5971a8e,d4b340c85f5141a73daf678dc22dd6af90c4796c,e8ebc1e1dfe2b0bb7b9f549ff35bd2d1a1fcd2f4,fb85082c40dfaf4af4a671c57272927657d1e983,01f60b1a57a63348ee59101e70faefa58b5aee74,cbe2d5b469cefc3f03fc95725d57149a31755c40,a76f39d4b284633c6792d8c7977abf8fb52a017b,97a64af2d6adc157f6ec9e4d4855b2924caa69ac,5e2559e3ac936ed985d5fa9d7160a284b9a83644,dbd77cf4fb93996fb7f312bba2aaddb87e5d6a39,4fec4e856d81145bdc59307aaf4d8b1ee4374601,1e8be6ff174f1d7027e848d5788d63ef9827c659,0847a34f6d1f15d3d35ddd9f3283d54c1355b299,d1cc91686abf34d073ffc496506da9ef712984b5,0030e4bbbd3cd3cea505bb1e4f1edbfec5986fd1,3b6dec3c581f883cf9dff6f04512011cf277f586,c44f209fe457fc6593b09bbec020680665da5443,c1ea2007d4f6527bd174869603f53841380b5c31,87361f16b0eb35ab5fe25fe2ce3cb57a96dcedbb,f10f849935076a7c773283789c75a4c35b9e6c03,034be5fcdabeed034bfb562ae7014e021caadd7f,8c52cbf8dcba19310a569a23ad3e940836b5e7ce,9d4e26a501903d404a809acc8ce93df1751a5429,7dbcbaa0d72723a1682dfe340fe05b2f0d3cd3a7,b3240c0b4dec02d8a511b831e07eb0d03094f677,8fd7e711bfe61b7ac7ee82646bb40fed95cedc8c,d37a2097286c6385bf8cc757944bb3568672d873,39ed7bdf558cd8286e62492f6c91d2af73f807aa,100bab5d8bdcbf802af6437fcd778e7f2b9bffbb,6523431f5c00d94a814abc2ad8ba06edc65e1ee7,21892745c86fa03b465cdfabb99554e9659b1941,511499162fc2ea958f3c78b1081225d335b52227,fe718980550f0221041cfdb56f83638c328cfb9d,8f577fbc1c44a4e5e39551cad677978452ea0797,76c125c3b74a390a39cdcd6666cf7e9cea0e5c1d,ab1ee1b68b15234b62a840c4b1f6d2485d771450,37ba197e62d6b60037d18afc33801e6221f1b8c6,5b2806103d5e6d4a7a6df1ebc8d88005ad7731be,28b7b958d39730fc278fd1919bf335c52133a1a2,9c881675d214b95fcf861b69b4204bcd7932f66b,05f878016d583b58806e59de862fca60e2e69d67,203918573c29676b179b673aa7e41366dc4215d9,c5154bc584847d19e75c421b71e2f3499164d2a9,4063338a3c8c87657a75c3c45a8b69560fee0e57,803e5eef54ae9033a4e180e9d7828dacd2db3dd0,b88b3870a996b61ae6a1f865586c97794a1f3038,9bc3701fc327a1730381bea688f62da60891fd40,fb09a1d1244fe0331a05418f5ccd32b62f2200e7,8fc193527df27beeeb638e6e812e8c4df6c72f46,c82fe35c48bd0082c16644d16d82d1be79d6b9d1,2ae03e1633ec0a79761b215e8eae2574106bec99,158d178c58e892ba87d782ecf436d30c038d464e,91901434bd199b104bac6eb89769f78d97f18f3e,f983a961455efed4dbfbfb7623e43941ba8d31e3,afc89ebca46a71a9a3a91c9ddea6e17b49282479,1b7b452c7e49efd2bf6fbca0b4239c7aedc993db,7388ec14401571d45af94906310e136463f7dd58,ce54f3476745a68d02b1db11444b71c758b1d1bb,7f35bd3eed6182c040155d1b672b9e34f89667bb,1f0d32796cd7f4419069b1c6d738895c753c6916,07cd4567d96f916c20af10e2779e44d21c9ac703,895315e100486f5778f13106c4ea4f3440eb1298,4970841052d709afe55d975ac82eaa1c0d385477,a82070e546d2c2f871895d32cd2f6629480c02bc,82d967a3f9e3d4c1927ff682d0df7a09399df7b6,b120a8574071197ee494c6f272bf0f4d2e93c2c5,e8c09f05be1310ea2ded05bdd808c46a1e4485e2,b184666c1975fa4050121c694e09a88060854eec,b83e111c619232be9ba0a7bba682ebc141b618b8,2a6c6ca711f0f0d6aeef30853d5eb05bc68c2e85,190b24bcb395e1772624c7f7c3c0bc76876d47e2,8ed787c3799bb9d194e948b54d68ebdabcf1a2ee,e7b0dde346e610fa273bd4ff2c82f6cf8e6de6c2,01911a40eaebf2aefbac34cb2760f7f77ccd07a6,ec733cbbf25c103c2c661625717527448a42663d,300578058c7d6db0671648cbc5bfca84fce6285d,63950ad11917411d82d9adbd0ad1ccc4884ebb4d,1e48e151ea23f8891902834a4553a806c1312d60,e941b7e3c45e7df96dad9c49235553b1bf585b61,c48289b1457f825240043b942ab621b59c5d2490,7b67f1bbc2ed78561db2527e3035bcf1b49e2817,f9d6655b42d8e1b1071f78cd7f1e38cbaa20350e,858aa75ed257a24acb983df372f634c3fc6c49c7,83c4b1c364c075bbb2bc44ad64d8a282340de4ba,76a941217f9272693b5484ef360e8cf6491ef3a4,a6130f9c8c04fc91ebcbe1af7bf8839ff1c7376f,affe77a64dbf8c90b795ea0b2bb7a44bfbeef781,8bb467aa5ea9d916e82e6022cb492d1c829211f2,8e1667fa9326aae9e63c4d44eb376b048ba8fa42,cbea3176308e86c6c5c82dbcb8fde367945ca1a0,7ff71807ce589931a56ae6f1306af43c6b8632e7,bb1135e50c27938eeeeb6e6c1ffb3882dceb9f1e,f0299220ba7dc33b1865068db0c184147283a9e4,4a6c36401518a45a709ade671d442e061138d3ec,ae5df796be80dfafb523072e4efb30e34dbee46e,7e19596505676c5b300bddc39792289441634f02,55e9d25f779a3ba726a9904641e656de93a1fac3,3b6468ac4f765262f68d3d289d25bea3da521c16,89b1661fde38bd12c4d83b9fbe696db0c8657a78,f054152346cbd7c8afcdcdaf55c39f9967edacf1,346009fc677b252d052e9ee22c6a4cd2be10a032,4c84e204cbce349f3c5722750561b91607d3fcae,c353239c4fd22b8991e1488ce81218b1c9769bf9,516f6889c9153a59110d3ee9bdd907e95e10cc08,7b6bf45d83c3ec028e686318b8d4f1a061723908,b72dee3f2590f842283f1a383a384fb1e680d463,817666037d3c09b9138b161964b0fafc76d65998,c3b831fa7e4ad148d8e3abe2a0e3c089029044ed,5a5bbc662104afe8f020d89d6e560f2897678984,f8c39cfd773d797adc1b4ee19aa8fc17268946ec,7817bfdadb9cda107955de03d3d15d64ab89b5dc,ae70bfc75587321da4d6877420ac91f7a83b9c02,8ab0ecd0af3932f40b931e1d84b2951f7777a305,599e57b27c19953487dfa3828432b8ecc7cb8b38,27388c817bf558af48568ce724b9de080e80e8f1,68ae60d779e3bf4a46064fc1b537057478a627e4,c600de52e107d1fd3d5a9c1aa1bdbbd6754622a7,8939061a3c0218dd3fd27f96f3e60e48f74622c6,cff360a340b48070d88a48f06e8748a916ce52e9,52cfbfd91e60db255c3285c90b94cb6e3a75fdb7,ae31e56476646b33b0c2a1f03bb095145a22097f,0b683acf0a5910fdc4235d3103eccbfdebbb18ff,861646b25a39dcdf79bcf5a7643bfeb28e137a8c,3ea4d5d580a78213504a4611fc7bbab58b93db0c,b5955f5948a973a248731b774773bd225af39c82,09db9daa292e74b6bcff84edf406aec41ecf536c,410ab04290294dec74180043dc2aa635ca1e4e80,b7e7b40a3328122549b31c007fa10bbddcb415eb,1f799f62932c5551c99699f46f7de75c9a85dbeb,db6f9bf17c1cbf9e6ce518318fe4d14119b87d60,cc279433f33ad0c00e80ff5af734062d92c8a3f7,f0028e1b90f8d10266f3fe26bafa0882a81ffe82,efe3699122699151984e8499da9d42673a42851a,d2f27093d7d95a07da901902f894d88b4ecc3e95,ca30fae3acb59a5caef3c3c21eecae7c928827e0,5ef5bd199a4e3df74479b4b363fa29b0b3092547,9e8eec78a71b7d1274043f55c9a5fc7811d53132,6a0a1876772e74a1d4a7c82669784f8bcca8397e,8c5c6b936ee6d1afb75cc2cbc151887937dbcca5,484698c5415bb578cb480845e2dfa930d3d49d9c,29a7e67999568a5c86b32ef513a90d5d090ad2b2,87f142f5c85c9a7e86d02b4599e3973e773f3d41,d664776d4cf41d7e1e46b92bd8a4e907cd3bd438,8e601f5773c71a005cbe6f3db7592387bad690b9,847a6d07793a198d28819731e5166f9ed3845164,7f5616887127fbe0776d2e7ec6d351658d18c7c8,c8c94f9a36adaffe058baa07fabb71e2223e6d1c,ce44cfaa0a46b79c6c1e00c23f763a2a4b8a15cb,b17739cb60bed7286f10d62969972303c490bbdb,65782e92806986680757585bc0e995a7603625a9,c8235763b9c043e8b6b2a0630948c585a1fc514a,dbbb4035cdb8669f42b42ab2a76460f4da8450c7,28910eec203524b002f0dfeb8a391b88f835a7c0,208d3dba9a64dd95f86fb105bcba4ed50ecceb30,52f45c2e9f12193a265623541cc3950f0b39a2f6,2d678c28b3a09b89308f7d8231712f8733357acf,fea1da48fef9e28026704e9cadaeba3e0ecbf6dd,c7a5a6afd5d2f7d8c3d518ca625b7d8a1445934a,76920b7fb6d6ea5a794512161bb29d3e8ea2625e,0fdd249cadaecd32a39d25301f5242f9a92ed351,924540abc919d32a8aaa92c6f18906f01e64e167,c87b885cdfdfdf9cd5dc87267301b95842c7d7fb,0842a997e840cd2a7c18121b67f21f334a343a0a,b64e6546559e371c729b4b45a26d4c63897ec2f1,aabe13f3861bc7727611043a05ae7d09b4cbdfb6,f779eecbfceb73b3179c14ca067e4285281e0a6b,043178c583cec0271bd00aab4eeb93145dec327d,8edd3ec573649443c2dc0747cf3cddc1608d43d6,46649dc97546418e1d6d2362d74dca92a8eb401f,a011e57eb7b9fd47b33a582e0b59015b5eee7d72,832cd7177f5daf0deeb5025e2b9441cb88933d1a,e08c12f7216dd5abd1933cb8c033873bd9f10f33,ff57a627511793d7c95c5354b3cf4247859c0b52,8707fddee27d10bded0b3f814845b4a7dddf2776,3d9bb608a1fa4f77c243b41386d977561c7ca53f,2c66bceaa7c11e0c44522dd28624b79914953407,3eef2f7fa643a9a11bd917d687ce1eebf92f27ca,67e76550408b235e5cd635bc1c87b42205626b17,02011f8ab0c62deb8566b574a310a978bb70aa10,a9690db48eadd3643adc34cafd6ccc5d4a5bf589,e9a2edc877ebf928ad0c056273f64cdc861ba609,74989844d7692245f9e19b0e803d748c73e91e41,4d1c77bae99174b67a462bd5a44950ae08f46796,90211fccfc48dc36b7cd81a1ce18e1506a6f15a7,e246d2ac01f1ac741aa4673aed3d028e08a63c73,36fccb4325f924bf46babd4d8d60226f8dd3f154,5ce931b904d1f2961078b99049c293c11e779fec,cbbeae7719943308494825574a0002ea649b3de3,eec10fcf0c795bdfacef4c9933585f65f953fd58,516c38fd95fff30841f9af370f50cf1f7733c209,09aecce588d736955b803c9df908013960699836,33c95771c804abc02223f24a0234343b93ffde56,d50feb67569fb5881b8a2ff5996f656c5f207c2e,6e8bb88263dd64b703679bf853c15f40ac07e347,b72b5c716ac18150396d05988d9eab745bea02b9,a433f625f89c1d464b05186411ff20802e292fb4,5d027c32c97eaf43c5f296afce98f1e4afc7baca,36335e3face4b866c7bb88b39fa8a99959d0a907,b88dd3ed853738b8e7fe9652b953db569bf7f79d,a2ba6d54852aceda5e3bf9285730da743ef04e77,952a50372dea32e78800b5127ce3e969ce8ba5f0,f87a7ce9321b4901a77786387cfe8026f1249721,abc2d23900ff5adeef648879af6bc4d2f79c261e,7e35f57ae9ba9e716da122dfa0bec418b1e2b6e8,f965bc23bc9f12748b6693424f829b6b08c8a71b,350f01c78374b4df99c1a84cc32122eeeb48b036,7117039b146155d81857ec29cc48b64324e5f19c,03239b0ea42312c7b5daf4520c1ce1caaf6189fd,a428e428df2766f1d1b2b793b3f812344fa61fdc,f1a582111a26c4044c289d96ced42fc1621212d1,5c9661c300bad40cbacdb391637dacc991f16da6,8705e97fbd1aa9de951456f05dff9ec56c4344b2,c61c68d802266e0265a60e81f2eb5ae56e14b315,3b81f3a94da9e26ec0458f4b5bd3a0469d8a93f7,70594bcaff1d553cbd35312bb63a33bcba0680d3,7d73baf10e435fcaa4927495afc185fb473c416b,daa69a5981c7c12e0af5922f0a07653446261b07,b10528a62e51b2c5fdc0c4b7884cc93f03f8ce96,0e8ff9c44058afbca9c9126a8feebe41cd682626,8a6bb5623e92f3d636969488a04a516cd0ae7f36,f43590aaf5416ce79cb1aad770c83096ddf2a5c2,1fbb16b037e62c6af90ab89ab3ac8d3633c59a90,c8ee9f781900f874b075433141de779723b3e110,b1e524891f908cd667b8c54b4a04b3af2e65969a,72fec65e1c09e14b92a21aae5d0f0dd20e8fe4ef,982ce0eca9935e65915278ae07febd3a1d52273d,e79465bbecc6033780f91fd41ab7d66c5e9e7bae,2f56fb5c10e6b8c8e01033ee1c50669028f28340,1cdc1622ccc608487014a7f10d43d5784ce60037,03cb05cebcc65b923e03fa9f41d664885bdb38ed,f4b675664a7c633bdd62d5f85fcf3f95d11ade9b,acab253ab45dfa7b6b80dbec9f3623969c4a57a5,4344ff7331a4f8908478e72c5c232c7a9d5dc403,5375fd9dc55f1dd01e155af8646d1ec67bd6be29,5170392a5b1e7cd7dccd7e3ef4d6c7279022696d,043f42b65d9c67fd064d2ba638b246389ad3a26d,ad661a8d347c1c0ff1b9264cf0f8c89de7057a69,0bc43314c1216a88d0e281e7ed66244c47c57c56,b893471b95285cc2364e3b2b8f6220ac6dc362a4,86e2bd0781261b5b0192bdd2c5285e0982daf8c2,f7e0a4a0212424edd1765d1abe66772af069dafb,3381e41abe04ae99f984f3d2d63f201e5ee6f808,47213feb954bef78d646da4f4ffe6a8156c7d3f5,62202d2acd00b43415ce9ed45e1c37f42d6ef616,5ce60be9d55c62b72262680249ad933850aaa064,08113862c5dda6dfb0562d84db8db8f5f41bfa4a,30fce9d42c5675e9cae0db0401181f84a73a293b,2cf575115748e9865daaa369507019141573b86c,abf07558021a0ecc50c265dcbdc5f2f99fdbeb35,3112bc302f32a74c827d672ca84a80091b0700d4,f05101e28403494b81704029cc50e66703c34151,f668f7bb87d3b0a0ad0642acdbf56d6e2fb18476,674886f560b2b1ca051b4cb6346a09a04a3cb628,13a039029ca7d7fca9862cfb792f7148c555f05f,7e89c9cc80bc3fd2aab64f25dd816c6d14790988,26eab98e3a0d403587cc915eaa8f7d4b7b894cef,4e442bb44280243f6e0e72d845fa8275d665ca84,2247ff9601374845012558ecf5963ebb7e1066c5,0ee8f1e8ab53746ea9f735aa07e857a0c4e55656,508be17bbc9079769ea99b780db9abcb4655399c,3bf400edc1add6078a9bd935e3ae684b8bf8493f,76390c0b54bf145f65532ffe1e7b24639f108247,9a92b8526cd13e092b5185a59c7ff0f68a1ad56e,6ae55beb2d28bd6cf36780b4c58da41854dc8248,d681042e60a3a1e92f4c891ce9dcffd672868e7f,932d4f89922e96fb1b89ba220d124db187ab7741,a793612b9e09795feb253aab9a738bd1f7280700,22fe7f3c8b3fa204c2406c3d15811b2581e1b7b5,3856d3f0a0826be3ccc6b160e740d5c7176df743,4cc3f6e7dbee9e3684884780af82822485c4c7c2,886e924019e35dc28eabe7515f614ba4f6c63a2f,4e619852cad8b9b056d4239aff597124e901fe8a,037209cb3e585e59ead364b36d1f1b82a2fc8d54,c4ad0b75c1f814d5ec5dd600183fb303f7241c33,bd64dc7abee36984e830c740588990739b71cc93,abfdf35fa5df95853d0f1f9fe0c60f4a1ae8fdee,4ac67bf326c1494126161b18612bb62975246ab2,e3e137df87f35b4249133478b77c4222f8e530a8,702f27a8779fa77a2ea0a1b6cc6e1e4d678d4fbb,a4b0ee96fc87effd27a4c0af23835cce3647cc0c,ca7ea939eaa9dad5f00c8a5e269f09681602bc98,f2af9f0c583ce5d5e294b60ada9e14516f5e92ac,fef18a23d3b09025e0ddc3733334a4587c3af712,591b9f9795c6eaf782580327e82a70164a640d34,0daa8708dfcc5c0c3803ab2e41542dba134d71d0,e97823fb5a340dcdaca397f1c68fee7c907c831c,b1dcd19c2f87a57e4c4b96aebeb4a226f10af636,12edac73ec454bfbdd634af474e140cca7522774,d75b89856ef29bbec6784cd6aa714eafe0eeb312,4d00e14ec8d1e83533a8aeb788437568b417ca88,b6ae1d09c384b57115bb34ed94c90e256e4b66b9,b861b4f0e45135e737e1ec2a514d3051157c3c7b,11fcc89fec70aae7eeda710e2bd26d93cb3c05c6,7254daa3f84a2b7780050da936304ea42db324ef,496691bfd82374f1c1bfee8719309343c2fa878d,6f379134ae1807cd404ed6c9579707e5dc6a6df0,3c2419db66d156dae631715d5d42ef90e36ad7da,cec72ce690353c90f3867191d7e657ba59ed2612,db586baee29fc90f79898e9a274cc1bd585b5f53,b53ead4b43c6c248b1a39f4a1cce7a0c4062285d,6b2bd2df127be522a18d044980e84a8b638f25b7,2c8892a206c9374b0cde6fce72299b0fe630f3a0,137aa57f9291b5f390de740266042587cfede7ce,02735ad7e6313515a846bc15bcc89cf254f8161f,4be9979b45ceadc50dc24607884d34613fead1f5,a67bdc013c9fd965abaca375b9b47554a115f40e,b745af3975a0bb3acddbc59ef85860d08221a010,90a73a4dee53129e33a552e49cb7835ecebb3a5f,e57007c00d577c8f66a5d93681058a528613645c,c93d3e1d7db2971a4e1e7e79d7bf933268cb970e,9caad351f30249cc72fb2840f87ad12fe660978f,14fbf3aa807d987e706939c41b7386b82889f3e6,19e1b02f754a9b7bc969eb17bd52cc36a85c4d74,ffa1c55e7f9d8808e4e440effe78e31aa89a4ec1,31ac0e5f3594a4517ba2be1735b1219cf85c715a,5499fa02b08b8546827a1a055c5af3f0245257d9,1261172afdae9a4b15dc9f691583261a1b020ccc,64573bb2e0bd2c7a7b1282b8a574a4796ae61609,9bcdc3e9f77f101a0d3031c341c9b4ea554d34de,dddfb600beb0511a4a2aa17f266b4cda264d6ba1,b09b95124bc27f39e27ecfed90ce40947bcbf663,5481dd326025de2da7d89089cb969759972e7a8c,992911d0fcd230497ee3fc50dcf49042b7372a47,d0595b7121f57f1f49fe7fdc384479dd73ad64f5,cd1d329dba95dae161317c123269c24282001a66,8251cd68f4db4bd56d88646e10d34ef4a1fdf90f,8526b85e269b87187008b502692406a5ab1bb907,283f1bceb87883ba6c965750e9880ce3d67af089,fde66702c33d3888b682adc7e6c35dd21cb1e8da,0065a044e998559df5127a7494953fe863016dca,d5c4ab74ac0c40787bd7194c353746c558b32ec0,10dbea13f4da599af0032dbd77ac7ef9bf047b45,1ce02e03a870247293051654aeee75807c2276de,cd90f9ea24823be24133075130cc7cf899527620,b4445543def1cc905f66334d42f250d5a637a01d,3e3a1388368e8e4421fed0b5222904d40a8805ce,002d7bf508ee59f23a04a9f21d02e9673dd38a71,d64f164b59721f05fa36df04b5d2af89b7af36a9,8e8de29c2b6a8f387a1a72eaaab433d9041ee26e,9f5af267e8c143e16f8b20fddb02ada096ee9df8,083dd8ca0d298e3f9f9407f3b81a6fbfb11bc5f6,f8a7156259dcc1b3321086939234d80b6ab828c6,661008f8238acb71301b172a6aa9aaa8114d0c9c,469cf4d886f9a184168ba2d179899a600725d4c4,12d9a805a6df7afdccfac94a7061d369cc986efa,bbe4d51f7bbd50e9f878e5c884501856c5e6388c,77beca12bc1e957b864c6f128238c40f758e2f54,c82dc1fc6238b6f22797c678f10b64c9cd36ddcb,7984387af004fcfe1d1ee12e2c8e6b68f23be001,1c382914c0ca52e786937e222d8e7aad17348cfa,099cdc213efa00355f3b6d968423b8ef09fede47,a0aec901f411b4bc26734745297b7651d7e6b9a2,e83b4d8484cdb3dcef44ce3aede866663b526158,ff0e842058091b3310340f51a130a65a1cf6f725,f488eba11289fae758646a21f86b2ad6c4156538,2a2f1dc48e22a34ddb72321a4db211da91aa933b,9db5028656f9be41ae5809f88ddd4c8ac0b48364,810ba6f292cb4eca0d843555c1e8985d9df977c4,34b75c6f0ac96df0221bfbd11cafdc62dc0baa79,ccf4ce767a6cc07f1a88a0c33393e394af3c328b,0c75ccec267ce902ff36278ba928b4573f4fb937,de9665f3cbaee56c5089392fbee0a6b81689ed8d,d07f04b73c06c45b75f53f38b03b25c987b7bca5,3e9b0e88ff11a38d05b303f1bd1f13a0afa9380e,2042aa001474179a031a368f9d6ec73c2c686965,ff5fb8a7a657a9068e8cade4566c69c62a1825d9,a62c3d0d8301c450d5bd0ab1bd9bb3862aac5853,79e76d5f48fc44ae3d716ac28ebe1a76ebb90b61,07cc1a278b217d45cb090ff6cb3a7934105cb2d0,7e8e9bf968665d59ac11dbd11dceea7c01c0a1f9,c36fef5f567576ae143ad83fb0b0fa68998cab4c,ccc3067f5216630d6c96f21f1ed2ef174aba9bd5,53ec5829855e8a80b2857b7cfef8bce3e63058a7,0e74bef9b2bcc7f41123fb2eb6d10433ebb80a23,b97a02ca1c1c220f18971bce3dc41d781da8f5f0,f4b750165bc27f6a36bc3abed650e18d474e296b,334f1de9a3efa31303c2788c209d249d7b33d3aa,aed74ea03276362cd301a36787774843ebd4f70c,27b16a26212d5e4b61ebe07c4bd9c36465f56702,9d721a0af60c54509b01c2daf5f3bac0dbba0a93,d549178f36aaf95fd1aa2fe6a3c1403c095929b2,0517c7f2e4ea6806098453b295f230dd42a8f510,a123142d947dbf38fc053c29291b555872c91ff2,c2906092f9fab7bb718ba177d521ae152d4d9f1c,ced2075cabcda4e5fb2db60e88cdf87bf815d24b,07ed545022f30604d0a4fc4ad5e4866e24e6a172,073fe2452f0514f100fa10781f081647d3384cd7,77a0a69e3135253b3762672ef6bdf96ebaa8a882,2d25368dd82e50dd68cf0d256084881e6a3153d9,3600a5f510cee298397d5ffc21c978ab6e52a160,32d507b028b15fd21775f25c83f41059cdc58e75,45b5e0cb3a4a499ff8b0594c082d490d7b7b7c1d,29ce3e0e9ecc31a5c3cecb19246ff978fc7e7c20,3bf9dad70ea4b93de850312cec2681f3242280c7,135dd48fda61f81d9b8e0aec0661c1d48226ae3c,90d775ce2270c35a7c514f5638b8a3b23d5a4f3c,e8720d6a93e80aa77ad5a66f217a362a512ba93c,738c708be3dbfd99a6ef5c0b486bf0b55e315406,c66db899cb061c79934986f0efa19a50ca33703f,43e8d3d5f13209ee0c0bcf4b5a7d785fcae796da,b2fac804f5e867099cd84fe525d52bd77fa4ff19,c30de4b2259b04ced7917589dbcaa827d0f11ca3,eb816f66486a7eec9cb544bbb1637be81636ad71,0194bb8ca57e5a4a3fd5fe3c39b0ccdeb4711043,f21a7054086522e3d34b569d8d05d5caa6297f69,f8e33e702ca0570076c58eaa7a83baeefece9553,6c203ab46b24751c285f021caad9d8969cf2f45f,5b56985334a63d63cdd9bbea30f225013302a7d3,bf0dd95b52e0627c10c072f8b05fbad3f86fda71,bfbe9966ab45dc4787fdbc55735241023d826d95,271e0a76d4e41171ace14bb802c990d4998dd621,d5f61b4398e6572d974ee13d01f47f82744fb495,0367fb31efae4535e15f01f6c27ea814a0739b81,0e1e80c2ab0db3e66445b469cc7deeba8dc40864,c1470f52ed67a82abcadb0333ea2620f11e475c5,3c452f77969b3578c0f678a08f6fb0549cc27b2e,34a1f829c3b465d031a875b9c1e409bd05de7ff6,237b7e3d8b0bcccc4962a7ef6d163b8bed2a5e1b,66607ddc07ecc319ef7cba0d9994066ad6928b9f,1bad4f4193a86fe3a8ba1cabfd87a9e6e1e436e3,7dcce66f1354cd54a6e64228bd56f0476a1ceb4d,4f2f4727f570a3f86249302dcbbdc053c07ae50a,2e74d637f9c25cfc02d6e2b3b568174057a7cf86,f35ff5f49f9255f1d0dddbf8aa9d810ce51c7f0a,8faba69945721e10b2bea0acda2db53298ffa124,f13364b0251ec9739f9d8e0f3f996532c1ab02ad,69f38e81872d70705fd7919df3d771f28c22dadc,765b8f88bdb9d3f9f0c7032208ab020d217953b3,7778533696b9644be3680228f25fce21e680e364,bd3e6cf204f249c2d60eca2268c8b9f402149f1b,166b186e826799d30de2b2cab4bfc54410d02b0a,02c963a47ecb50a7f84b9711841e60447f9bfcc1,22c79b2f6abf6fbe7292e097dfb1edfaf8584613,0646aa7d4d0ece484e26e8ab262265cc9263c350,d6b07a11ab9e2c4eacecfb8dd1b66741817674be,b8f7d772c96b0d1fa3b7a82c741d336d052940b2,74abd5b73c28bb625d0c74323e64a941c4dc02e7,36a5631ebe2cdb53d41428d1f17ce72ed618045c,be86c6236d4cbea207f3a4924687a0bbd99af360,c5e3fbe07b3dff5ac66ba155889ab1af8193da41,906d27704c5952cff37e76372f9a44a85746aa20,f45ba62db9f503483c68d836c094b018bb5b479d,69d5b2f0b54c1478e4122466b3ae298eff53ec31,9c3c448cf2561131d7b573e94eadfb4afa581231,0bb584bb8cae3ca8fc221ee0411a89100e24ae39,a29131675a69d4fea14326fe48ff8efabf91ba1c,97867f6fa3634c77dfafd76c89ecb1087f5cd1ae,0de76f159c6cd6b65947ddc3fb6481b737ca39a2,9146faa1d7f1375c50c2732f4a18fe955772a1b6,eee4d197d25ad99614cb63445ea71557d6a75c43,f62c523154dfedcf49a87a865db545bb8c55e795,82f9bfcb9102d84e96ed68172a1ddedeea3125af,30a595d0d7b97a60e9703cb73214248b643c60ba,251936e2ed5ee2d784569d3fc28aefa9fc816a8b,5694aaa8f624b9eb48bd12ae56575682bc85c57e,d1f9ac3a0b322b11b5cfc656237fb3627c23a9ee,9a84b4eec3ce4e22cd3e637a2eb9528fe71de5e9,b15221d6f8478c936542c2c1a4cc1b6475c8a903,fe2ba8d320a10a988086378be2ae8621c55a6dab,15e9c80f56ff63ba71ff7df894266e3174636953,44980ffc7a0f0a7052e61b6ddb3a873d3d27f287,335582530a7f0dbb137e42655716962abae3addf,75a7edc742215c3354befe8fc0ec6d4ffe3bd663,ffb618d50a74e316aef01ffa2e381d4617900f3f,e15c80ae3fafe8903f220a6232c37a77b919c60e,0aeda4fcc3c6de7109acd8cf78f8779654b9f771,4da56433ba20213f51e887d9ad6dfffe9669ba13,436a2ce3111d019a98a8615bb83dd93091b3a0a5,44785c780487c41944fb2ee3d206ddbd6b963522,b87e8e87160efed310bc088173ae33cd92143a3e,446555b160d4221d414710ea97a3140f50f889c6,81398f69f131da572f24995d4e43b343ffc737f1,dc52c6b8da6cdf4f23c87c2e55c46cbdaf96d6fa,848be9d922bd9d803e6a1ebf58fedc1d357ef930,7a10230e1ecbb0f642eb2352a7f85f00961a6d54,58cef1268241036356e72b5452760a51ec8ab2b5,7a34528b18b5ebdd33089a9b330206ccae56a9a0,789c39551ea74f8b2f8ac754d20a1c7ff3ab55b5,c67040b8d18e6cb3ad8035045039ac066c3eb923,2544a0cf5252027dcd42d9c9fdd73fdfceab396d,63eeef3e0ea511229fd3417b7863e8c709cca2fb,8cc2702c9bc6f39bb7eaba8a35a171869bb3f394,4224709bc3aa602135da6aa73c783e0d9d6f6ee8,e8c44e6090536bb4603d2c478724a7675e0a99fc,c2ace88644826c227191ca52c8d4372a13605e50,a080293da69f3fe3d11d5214432e1469ee195870,e9f2dadb916063c1e97ab2bbf41bee059e277c19,16e358e242b41ac350fbd7ad9a93a0cae3e92564,53f6d42f748d771d5269aec5c377d5058e8cdf4c,af6fe141036d30bfd1613758b7a9fb413bf2bafc,22b0d0629267b88749f78412caea672d6539a5b6,9e80104befc54daaa097870b857e1bc334521490,17575b8836ba18201ac7b839aeb432421b0c89bf,72bfc1247553bdd2711d6bb27a7179be86ded4f1,6f8c4960c2af25b7e4b36473d81fe652490dbbeb,c5c231e643365485c5805cbca81070a51429de9c,792da6735e532a6e7f2f2a017d999a8f7c30f2fe,0fe6ae319d50edd1389b6ecb5a6fd12f8091aea0,64ed6dde03afbef6715fdfdeab5fc04be6192899,a41ce6892cb0590b2e658704434ac0dbcb6834c8,ba53647bf0fa16501445c7ec50d0ffa4a8288eff,0326bd90ac20652f1efd747a3c293a8110d109be,087e4a9d51437243eb0a4698b3bd2b71b4567c3e,f7726c4f727dd78f616374f87ae1e9424b41af67,ac3d73153725fa1bce721055c4ac61423570d34c,6e1702e95e6a487b42b6642b9cd8f3d865151b8f,1152309971ae0e31ced5365e81e5c80af8bf251c,a8fc27c1d9a40474085464ad1f592c65ac81a906,cfec567237c7300d0335f8ec5358e5dbfbbcdf00,14242fe6bbfe3dcb455ccfeaf210d3fef1c0a72f,7a3889d47b76b248deb4ae6d3c71cf7cf48dc734,fd69d8ca2212d373a5a8f220530e8c0fa17ddf3b,e8457776fe1b49d6208f21a51c988980b1e4e23b,979260717c1a4730e49a094e02c9c873946e1237,88d3eccc6805ccdb122b0acd50891229646b5ec7,2612035deb0c873174123b5f841ef6edc00261b9,3b98bf44eba7958f12faa33cc0e5635b33fdf0b5,f10cb0ae4f7e395bff64990f94cf32ffa21b668a,5bdd4dc1c46eb4949be1a41161ed12aac21b2add,d0db7f2df94c68120e72de479c773dc77d359f14,210ecb5015a870f2501ed23eb7a896dfcfa981dc,0efde604a26e730631ae8bece0d1e137dfcfb5ca,5d23a96a09f7401ee5fdb9d5b1fa2588e8d6d2b9,514cdf8f1ae0ebff29e600e4888928bb28b18345,21fb80f02c177a99cccd69899703424eab803c34,5755533ee0d4c2a0ae42825978bb97a141823b5d,8c1ab0dbbe2ff8aa733fcfeca774ae0dacaa6ca8,dfc6dfa3ed711d08678fabf98fb70bdf1170820c,998fc42b9a73b7cef079fcfe99b1f36da210bf6c,ee5885049faf1933fac107065874d54a2c6ceea3,fd19235ddf3b1e0290fa06e67ab30eaef2312cf1,5dce7b8948fb6fbc9951d2815ab07620ab77b1c1,96531689d341eb26103356410280447e94529b5a,fab114fa0c0dfff6c3541fb08de6c261dc5710cb,acf6e75f21c004eb498a7317e12c0bc3e491deb3,5035d291aafe4ddf3de657ac41ed4f68521c45b8,5b7d3f5f4a40ad6e0ccf8ddde120219ba53cb3e6,c3f8825c6b07812567c37c2901fd13851154ae85,007ccb24ec4b6f9b8480ec0cfd9bc1894bfdee0e,10a33f30954af3ca26ffd8eeaab1081cb0e8a360,3a771aaec8b8c7f991bec11db5d6c7c572206550,b985d79f12b7110e9b1e13dd437b25ebd40be551,dcf38a0d2a49b6b96c557aa4475f734a6ab2dc02,9720cbf8b2b6595f79e08f2964c53e47c96324f4,663521121083c36fbff550f23fa14bc74b73174b,c967c45dda15afa1ef018ed262d4749d3cf7a1dc,c0b20c88436ceefa62fa46d96581d00068ed82e0,32245cc39c025ce9a55b094dc90c2e07121b8453,4832020a4536cf042f0c57e391ac988be8c34786,be14171c38d4056a0ee6c0f3d9f89e980b0ab1d6,e2b5ec79fcafdaff9f017853620ca2a6ee224fdf,e36edf93c3759561110185fe4c70828b2bc45570,a3dc5a0af3c951e78bbcc65a24280368d8f9df96,d38e655b40297b019841baead8dab939cfab666f,98d467455efde1154658fce4f167c8b0d8208924,5e6c50f762e5962382c3facbe638c0bae5e94382,b66ff17a80c4909609fdc6ae26ea756edfb2f788,870ecd661de26988c206c95ae805cb67f4850946,06b9c1c9fc4a87b97edf865827fccb725e9bc598,41edd3fe866ed84011e1f5e5c2edef9513729dbf,f4af86529dd72bf046a14d1ae3e871fe2e78492f,3794d76fc988731e53e36954794c8dcdebc6b91a,004ce99853502341d572ccc952ad6627e7aef7e0,1946c07f8aeaa2307ff828943dd1d341c426d2f8,91d4a41281e7b4134ef8946bb693229301719115,8090863a37bdb89c24fe2a38c4ddcf4cd5dcb3f1,c6eeedbeb8240cc9ccde667c61c3c5f8266805be,036ecdffae37f5dcbbbe9e7f7626de5eaa9bd932,7e8559b8e3f84bdf1acad71e4ffce4a448a436c1,25123334009c01f8b7e1130e9f966e5c8232ecd5,015f1362ec11ec4c30c49514b42b25d862eac90c,f23d57eae35b5f0ff44109065e303a743fcff109,911bb2896267c57be1d584bf5057cd5bd1dad471,3a073ec934c6aab347c2838e30d575277f4020b6,37b133e015182287496a85cec1912f07c768db9f,e8f28efc5da4334832e5f76c5cb3894f3180c09b,1170e40d193ebc027f4c21c6548c23326c70b465,1370689d55a2b86e1c78a869fe3b38a11ddfbb36,586071e2d4bd1ace41e78cd89c4da0aece46f17e,958b8eae6d3a9ecb21db8f16d579c4b1fd3132be,b05f76a77b155ac2b0ba6de83af8873b56c024d3,c1566ae386d4198066220465c32a131c76c5105f,e471ce1b2b5684ad376d5f4fb54d19c0a88d8c97,a63c727aaf66c154bb1590c5449470b38b8263bd,4d9e906a21d2f0428b57f95d473ad526edf43a18,12653b4dad46f5612270c89f048ff74ef348c666,2e4676f3a07f459462a3ce058b660b82750536dc,f571fe507adaee60b91a8f18a9a29e819bd93272,f4f34a8bc81dff4922a027d67c54de3309ba6d83,3b1fd6e9ed559254660adb634859466b3f823625,d03932d4cdd43ff06783028d8da2c463e38e72e4,0ff0bba8387bd5e2237691be296ab93cd955aae9,1bdb4f08c7587a002527f4b3e3db969edde84f60,80e349bc1f2337e31c83f39092fcbdb3f517529c,f422e89f9243cb8d96bdd09865fc0e590bd809ff,7756e29894533e1a143496297b9414ad1d53e92c,c5142c38927a7321c4d3ae14b0e34975d51a784f,87e198768339b82a74387db0d3546f509ac117e4,08f67d612fef14178aa5a3617c215eb23e0d98a8,790b1d02406384de43461c179149e2c12cf079bc,deb54fdc9f0453d42005c1b2d1702d1eedcb829b,8a49d020da51b457b161de75c2c4fa786ff63c75,a887d014e70f4dbbfb5349658522f8a4de7c9e58,b90cd29f3c12ccc160c9ccd78d38e0e40842c6d4,5a399d9dd4b0db1c67f286d1e62afd1ffacef6e8,cfce62427386671fb8d29c4810bbf627fe79785f,e0faff9555dbd7720426a75336d018b9f214616c,80059048841a8e5058e1e4b249c94b6a4b5c83e1,5e826b61cae5778e077d7474b323e13de6e1fece,c96270c1ab7e5f2e7da77efa89fa34b400294b4a,facc73f8abec77294a660c54d2a495e7169cc790,a1ccb74de390d944bb83e14c6f7662db7a246c6a,761d859888d28aff2b88aff24b1d421c0591cda2,c86d19ed1f6c979ce953f8650085143c9854958c,cbf42b56b7940e443156e50d3aa02eebd9395702,e4b1623c37283d97319bb308c89914525e7d5587,b49bb6713e6f6ccf8a96d3ee2e08480e982caa4a,2f29c4d3b869c10fd73062a72e5ea7d13aaf0170,39f8ec0a00690367a887b17d3985cbad8a2e40da,485946e15ed24c69b0dfc2f384a30571e0509d83,e63ef41e8cd356d46bd04f75bd1e51bdc4522b18,881237af27ce4f7525470a7bd8b06e990f29e19a,6368cc0b6e9baf91d1a5bb603f4ef637b23219f7,1610213557426151394bc46a75235e76fa855a80,02cd7b198af0774f58949d322f9ff4c1ac2a899c,fcc08bc79a3e0aae892852181fbd4ee264c1bda6,d6d786a181cee72df79c36dc4305cbb16f734088,06d226a91b3d6696c816f1612703804a4c3ee7f4,7ac015c17a073ad3c16038d2b65afc6c1d6bd455,1ce0ae86f4284d340e71def34d2814e59f8d5a08,e9011223d20acb1a441202d0af11fdc9c22467f0,16f6dcfac6e126f617f36ea3de1ad2912af2fd06,821f876ab37c743e25462c4de32d08ca11a7db11,4377cf2cac81344dd9b3eaf93646faa2f38efa12,84061841f359d13264c90b208f024e658aca1a1f,7f573be1bcbccd4e3220597c1eed2a83084cdc62,9b63cfe4269c151de0d3c4c2c8d3cb9c229a1bd3,4a8632e1362b7d64c31b3239dfed64e4c5270d7f,54ee0b3ba45361c040ecba5974df27e96f60229c,cfb17c0fbd5db32b93915a8dfe16c5952c47e323,a0f1d58cbf23bbe1936de6a6cfaf8705e9f212b9,280e0f23518ea87c53f62a6af0379a4232cf24a4,c7c5ed326ef3608c476d82057620f8197be27384,e4c1ba5d08674c750b07362283dd383396007c5a,e59c03ea61222307a653aef3c0f078cf54f85c63,4d68f9fc446c494e24a1cc823c531a0b509e9da8,0f5078fa738ff0366f67415db9dd6c79963bb241,bf90499fcb1535818f30757feb8f134ecdc10f5a,388866ac8030f13bc878f42b18b9f2f028c67fb0,8d738b2e00dbdbebeacc2bbdb6a426818db54c98,c7433b2b803ff4092b1654cc40f04cdf30de2392,8664d0ea0da38e000161ccdf6194f95bd8a5e48a,514525c6a44acc2c58cb0e3e62fceb9149ffe489,da7e55cc7aac7cb806699d234dbb90a455c21502,6913193d33ed83bcb98cbdb94ce410069ce2513e,7f65af524d6b7fa43743a3c5593c3c57fee3e9d6,a76743a390e6750a59f9494ab338cb1920bc35b4,4493ec15a72045bcea25a4c6c9b4858ad5448b7f,2f7b1a605feaa7f846e9a7cec7ac9cad9aa4b990,a243755cd2cdd3451d095f89e919c512c44eea9a,3ab9eac33a1dec0e98009d3f20b0b7ed41e3efc1,55595e71e145a7b63488751ffd6a485e1fd41ebc,a216362a393976500b515efbe08e7d96c688600a,846fab062c1d8750325b1cab596e23c9bd86938a,71ec042187560a8f958dedb932c85715c781f998,14e2700a20c792a6bb7f8dd3a72c115e55e1bde1,cc3c0a92368f8976ec3f611bd36184c37f14c15a,effd9c047ee58fbde47590f83549031d4f5c06fb,ab39c78cdbbde1a27176acc50353820540d8bf5f,b38a7411945c7a3d9c907f23671d515bc2a510ab,94ef347a55986d30dad3e2e9994392108af1bd27,48a42c69db4be8df22bfb14b431ee34b3c809573,c7ebfba785ae7a0055b57373046b6004e5df6856,768964ad6f8a34151d0d9aa1a24235d2efeca901,f329571a6754551b0a173598b707f73140fe58b0,3b610d3ab52bafca476d23ca4e58a3104ff20d85,77d022ebf809753274bc365d657a505815441a3e,a6b025dc4873d164edadbbd0a2edfeace2b03258,17eef65fbfd22c6a851c08f23c6e6b10cf41b559,301e60c29366209467458c4394519aaba6f430d8,2754e2cf8a402b104c11e229234b3539bea10395,8847d1c226cf80bd2163f4592e8068f5118e459f,9cd808291f752c603d3f87610cfde2f6eed86aeb,0245d66f72e0645a448e2d03a7b957bcc18d919f,0c883a3f6e449ba18b255b9560b7a2be1cb9a6a2,6bd2ec752406b9ff8160f2f2904ed9a379054536,d68bef420a6d4043f9c63983541e93cd6de2d644,d2274baf423727ab95cfd07e6d8c8a20a73b49ad,9e28136f6f68b7e8f0dac8a8b03999af929afd01,40ce05bcd36af111697b4421e00cab34d45c81ac,9d84f5ad707cc7a258d5b11ba3a0ea2615f92a13,b7a88c79524a840d8733c6cbcd91e22a7f2f7d1b,023620083e3bb96ec11254adf47ccb635c4466ae,01d5fbf81c4faca84dad8f8df3ab59a286ab0944,43b165b3c5e1cfb53d5f64037a3dda636f613765,50227a7359afba0f475453a215424403b4ed54a8,0f2e465e41e249e105dfb4a30242f1925988d6e3,321b6255fb626fb72e99c60f40424f20644d7586,1f44ef2bec5a7ea3198e0ec0ee9616a3d84400bc,997f50595fd7b2df1730c7d4f9a0332ae9aad9f6,3af8e6e23b211cd7d564b4d32cd214987131183d,55f62e3f0a761ba60300f70285d10b038092c36f,4975496a3ec2c152fb48a7b681000447c784d336,eec9248006dd30d2a52e3ee47b5328399b2debc7,9c3b1ac386c73ec6a99c84958b9ddef9e7d335b3,0c6837581dd42a8b972be6a9b2a5c6364ec1d5d5,13d0cd190180c7af98d81c9ed6457d745e2c7ae4,102a2dd7cf9b947100359af15f99d152998d299d,3824b5c6c63d86d3d2323cef9ddbfeb7709a268e,ad08eb7ef257615742e8059b514acb2f218e1b84,457104106870b1c1cf99c6b87fd9041eceb8489b,46f6defad6eee69a7f1442fc6ae0e75e4fc60b60,1e879df46d5e93a4aa3b54968ba3252b78d4b36e,8ae65923e3032165b0aefea5d18442901011b0a4,18d765cce74d0bc5abfa1d1512bece48fb906dc1,23e75147fb87cc95bc9e2ba7ae7177b4347a6711,103d2f753fdf5ebea497d1e20fe7594e54f722a0,49dd2fde4339254afb866ffaa48b3f0cdb6bad2a,694392ece7e84b75b05c042bbf2306b24e7f1867,f776baf25bf0bf8aa1132b810f30fff0317682c5,b9b966d59f5942c7e6a4b6beca34f58a8aa1da48,4ef026525bbf5784555254cc8d181d9c9ec0a1c3,36dad1bc2bc92930a2b8082f7c4bd9d7ef9cb108,b91505361004b229f30cd0f33d1fe7618ae7bb81,6dbc989762cd1d0a01c2c56c8e843d21ecd48d37,76137770309d1ff3c0059d88378ef4ed55975b9c,6f119f1cf67f01c8a4895ec2a0cc07125085d689,a09b2760079b2752500d8077ceb832d6780cc3e0,c2d79d798c34620095ed02892f4d9162b45f95dd,b1b14eaa68572560f65781c2371ac579bcc45688,9e399d4e16581a3ef32cc0ae2373128cba197a34,1b7dc86bc021caa391e578a81e99b089b30c341b,d3cb4b9fcb0ed137e3d96d3e93bed54071aa4091,d07ff5721890702b62fc0f327314b359f9ab2393,1da3452ab2710543161bbcee08f5c7dbcfa1e4e8,8c2acdda4b9b5d1e0cb2929f5369b511c3bb5e6c,0a0b9694379b74e49e66371104676757d159859b,ea76a05b00b46d47a28099154eb36509ecb19549,0e56d20ea9718d9f74598f1f3dfeaa301f71d5e5,605f8233b6f2674032d929deee2afa1f6b1d8300,44de79b1ab7a21a88d6928d7a482ec43f69de8c0,dd157a51aee6f1ca5bcab03e08c1ac9854615c8d,29ac8c6331c9819b98e2f76a27017dd939fc4407,6f54b5df2f260da8dfa9629a170bffea045b9f94,0516bc683eff01ab32a09f7b6dab57bc5725579c,bb888c9fe658940fd0f4d0c02d06a279bdf74304,620a30da02016e54a36e73c3178ce8ed4df494dd,e148346fb50e40cf4e0ba7c2b95603aeda740c29,6b873e468b5cae08c073f7d7816912a78db40550,4bbdb3b88c5f833dea35d6e611e66e43772f21e4,be9e92bc4439a6e0cc85365709370dbadbdb6180,52f6e7f2eec773f8fd94808d3e9bbae105cd439f,4d9a5876938afc1b6e882bd4c340f433d25703c7,07a18aea27165309f0e7c2c3cbfe3c328af52098,76b15a177b49fd32aeda89bea24090f79d03375a,11ffbb9a156266551aa7e2d7ed1569c4a0700811,d277ba88ab4bd34e19609b21c2494b1fdcd680bc,003e712952fb081b7eaf1ea8579a20f7a6785069,c53b31eedc0623cfcfb2e326d4bdb961e7d1ea5c,9712293bdafda3927b73e832d04ba8641946745e,20aa1be7d78ef0d3bd0b42b1b596b2815b1560ac,2d247017bcfba1d2565fe286b049cae5f2e6c950,8f98b4fcf487b264e02f9bfd09ce90feb22f82d7,ef143df014ca39660005335d94e99120b343c06e,cff3fa5afcd61b7fee6f99cc8b1698ee39b3a2a3,36d421a57dafb2e8594792d0d3dd3ed37081ebff,fefac9e889da2e7a01e88f9403035c647920c7c7,cceda0d8eea21145c4ecaec7d69538e3bb08c177,7f85fc5b987d69391d8530a2ecbfade130e9f55b,fe7d944731edd714f7d37daefd6eea2f0a3dca20,b5caa8e8c8821dd30bd3c95c62ed0a5ea14acb88,df285b05e8c988ac20f685c7600c6e9469c6dcf1,60e0cbe87ad7038de3e47a954b301a00154b4ada,75b2d209c5ab7d1cf3aec51254fe93056aee2135,1f207424031bd81af858ffc98e64152b3ce2f22c,cf9cbbdae44b88a7cc982765bed085b434f4816e,00d9578b74a107e3811c407ecc3da2bcdb166f81,3410aed6696622cb6b7b8bec088f9a92ea55227f,8d34352d3ca40ccee76e1473d3e132f7bd8d4a62,f3a8208d7c69dca84bb2e9e7126831f83af3b1e9,1761c73c6c3162affccc9879eec0d8af6ce27149,d042d3592e7be9e7c0f9ebb0f1ac8f12db6419ee,67407f284b52a672fc49db793f10e55cae20b90d,bea5ca1141531a4c2c14c4059ebfcf0b00862d42,5544b5af78ba07308f17e37915c2c919bb143870,19abbba0d95840158ed7804c29a0acbe36dc6249,05077ebc87ff764cfbec2be39fefdab7a149eeb8,db9e5beada39ed968d166ded6d9b0cb89c4bf5c4,57753e16dabfb23c415610dd37907b809b267c5e,0e1332c0fbc630c9f34ec7ee6f94e8c29d73eaeb,2e9734b128f1bee856bc73a5dea7e106c04442d3,1c543973e93f01249a7e879cdc3f30c604895462,a3fec41476ade3604519145f929e68a6cbef21ff,a3e6680f935a0b6533563c0b58d41a217996aa93,a23dfda185b8414033aa2350c75fcd56a0911728,33469fe1be59affd9b4a7a9562dd1ff4862323e1,f21a3793d06495214fcc46c081ae0c663c272ae3,d7437c79bbeba415523c52488019cca0f5cbb7cd,8c3a9eacc52d8908130a29ea7675514decdecb2c,3791b9e31a48899a3aa8a317982bf1dc27a11662,76f63549524946005a34ff3eab3c30ae2a505e50,a04afd1f20290d0097b1ed9ef2a4f476e0b79ac0,825419f9128cb7bd01ca31b0179bff96bf1a5ce5,6215969d2a1f8d95667c208af868758c8636c234,79f997c1d6976f5327cbe5e80676a65245d961ac,4ec3674e06fd98a10de28be7ba6c6036e64116fe,6eed45b023ff3c609ef423f28fc87b42d0614f79,002e4de0d68ffab9af339283f02659472a1febe7,ef8eb3d269274d2e6e4915875d027ada1efa0470,78b8d323635b47f68a93da04f04d221f3412d9e0,055cbd0d42dfec901c7b2532f7a71f937b1d4756,771841e493ddd9839a4c029db6b217fe19968148,39f6f7fd6333da2b983f7d9001a7a51f31fa9434,6bb1b9a7bcf9d4d1aa0f4c12bb0cbb4cf4e2cc71,4824774675ec1a2c9e7b1469dd93a6bd09854210,09e2fe28c098908ab80bdfc68f5e971d70c7ddaa,e532c2a634be7155b8850332a4b637107ed4e2f1,2522714052507ad525f01d6f95184476a7adb756,f9d80e5b2960b3cb4f9fcb25b106eeda3a0c1f9e,bb17cd79c44c4462e2f3a2ed91dc44fc8bd3ef77,717800fc588389b143b5c8ac20a0289a9217715d,3644942d2fa6445b6a24b2123fb812d50611915d,4930140ec6fdceb7e15d31afa45243dee7d1e217,0635f7f27ec605303b7f25182e091777d38c7955,ee61bde4e14fe5d1f63e0f1b8e52011b5fb57ed1,3bc576a7e41c5482dbfddefeaa99e696f34de50f,21a0e874cf3d14cfcef60d20b97e4c81da581788,742cf80acfc8eb4cf9c0f08275725b9bafde8d2a,02b1f0040f67e7817a2f1151360b3a7838aac870,be68400d3001b6ab81f1e6d2e957a45d8ee7de44,0471658da03f5b01537153a72c0ffa7132709900,bc69f94466efb770e78d1bd89a8a1bd460fc437a,861f6fc042985dcf07968f41b7a97155ef00fbb3,5303d7cdae954938e6aadc32d3e0c89a38c30463,5eda1d70605f3407bcae58a77f2c92266e91815c,11b374b0779e6ff3e67f0e03c940b4bac4eaab5f,fe8f43befbdc5241d8c0c687d50114f4eb77fcef,55c4afa6abc98c0c9a728a7772c9feef0de3c512,ac114d2fc57319200607f7d88033fcb936ef5544,6a85ac15cc0e4ef99834e68bf479c0dec545db45,893a67efdf4fd2b02f5a7b1d6e3a22e10bf969cc,7a4fc498fbe96e83af20c5d0576c42a761fe3d95,3e438a80fc5ae21862125b13e9ada9b5c30d27cd,15b4031ba94a60f20b854e6ce2c7964d77086387,543970edafd3f8e08d945612d09663060718ae94,4b7c4908277f5777b5495a83d2782ecf39306432,a606523ee9b6715ad4d976c8a507fbff964638ed,80e4a06124a712fde81bbee093ba2ddd71851c93,454a82cb2ad2853544e641c8c80f5ed34bbeb1c5,a2bde0190da2e32a5925df5aae1f2c37a4498bf0,82cde14a4d72b13b5ff5e719f4c61b1673d643f6,3d4233823d8b4de30ac2047c713e3b76dfdf40c0,f9dfa3fa6b9a28439f1226c202c41df9fe2e4380,c50da916c252ab282d978da3f114b81d91ec2912,e0bc1afd7878a91fbc30e79941af8a797637ef22,aa75d3aebeb30d1bb3ab0ecabd60201bfb3aaff4,774d1801e057326b61461bbc9cb479319145f811,76f12abd9d81587eda4c50e7816c75607b4b23ee,9900d951d41ceb438be79b2bf1822aa6cfd1f37b,f6dbdcf3acc3009f3ae17d607a2ac898e804395f,110084e432a04d061d71768c23f500f283081e31,656abed01d37434d69881ca1292dee710209bf51,d6d2307a9ca0ecf8c540b3bf7183de5d550ab099,801f4f4b10c788212d555729d5eed92ee1a02036,5fa1935c52f3866f0675e9fd64bd04d153b9f225,d728087751d2e6f19504876d7a3f40ee7b1f4d28,e0fc7b4dc80a31bffc8c8f87a2fe4153e6cd0cfb,5b743d5e7270fa41de8b4fd6ced0d82a6e38c38a,dc565c4fc02421b58db9c0f0cb9bfe767d904216,ad56c3889328fed27f021bba3f071f676fc4ffe0,47e13b0fa2ca7fb11e52abd429d538c3c9ab07ed,97c6c963e2045def1f19c650f638b304f6464c19,9200911bf40a2bad68477e54b0e9554e4e8556b0,0b7369cbb67e46586e9e031c693564ce7ca583c7,2fdea0d5f462d48a97aaca3b987a716ca2934f24,2645862ccff2183b731e7d6f1a66df6f2b04a99b,27df5e894a2133e122ca7e78c5de45d26f7210a3,619aa9bff4055f51df04f5f837605785a998e9b8,4c55341a48427f7bc0ce30f0699c673f7e69f63d,27ae87a59cb2f0d06ea21d4a886f3afb9a14247d,962128ce971b2edd3fc9e4a85b417fba01a0246e,287254724ea66841b932fb5f6d8cbe37b04eea81,06c38617a3b7e708688fdcf2f001c82f5d1a2f2a,8262a735578ad84638e36c8597ea55a91dca4bfa,67bc6ba3f34a4b98d518394df45f6e68e513d59b,88c2ecccc5d0c5272c9e5b6af88888b71bad633e,5b2f4431b4180d84b580b7dbf21ad67b698565dd,9d2ae5ff4f33f5a55a3674be1230e4b16fedf6ea,5700d639e41457da51e9b6abbf21ee106f23aa2c,237c79aa984408bb97fe6f1d243d21dd7296ff4a,a4222c7aa3a2bc5bd693bfc8d39026243f80135f,cc20cd302cb2a1b29bc766e6ac68c16cff22cd17,dc442a0dbbcd573adb8b8a5cb0db77250c8048e7,ed20ebc6ee70dc2f0da14ddf43d5ff08c24a48b2,f39ed1e056442992e953658f4e5687420e9c5f3f,c737c5f7408ad6f5e8c3c2f53c62abbe5c3722a7,aeb06ed6224c5b5d334c031f5f2091ca59c0b311,8eafa31b724e03854b546bf28944dab65f452ee5,32c2a858385ce6e4926270e02aceb8ab0760f363,d8b1e555f7830bacfd5ef9ddd3650efaad057c4c,e3a9db20570a749bf3c6e14437a0c7bdd8399b01,17039522e978bba2ba22666b4dde67eae99aa149,59099c3bb3e95eb46d2307795aa27c3a02f29aca,1207a117e8fcfce2e85088638b47f11d4496fda1,3313c825ebbd630126287e52b99c5f883b3cc8db,fe01a77ba87909e202738f1bc2061e93d30df4fd,5e8c49b40801f9e6abf7ac2f4ba770fd18e4ff17,9605353c9b9a5c7862c85d9a94581fd289449d63,46ea87e3c2467265a9bdac0719bbf179618d73cd,ad3284eee10d21bb7f980077472d316bd0e63ac8,7d99887c7a94827aa193a1fe87a2900048277592,167bb9c19d3988e4b0d66e33c6ab7eb4fec69e67,c38444bfa790ac5a19c53d478d21c6285bab4080,d3108035ad56f34a6e46196b13b11bcd06a05cf8,167cc57d7eb14c95ba84597d6edfafa26ddb7012,7a34dae3e818010b6998572a3600a769ed5d6fd7,98862be0277f02e56ba0c3bfd7ad4136c7a72d30,54839bf41f6756064f68c11bfb05826ce3b7df49,3a08f8bc299f0a4af5de2b78398077a034f585b3,bf1941aaf7595835abded012c7e2bdd1aa9dd9bb,98398234beb832dd2d4121cbe20b6373ba4c8e69,b74bbe45ad4ec45ab6cba89eb1207e25d0d74ed1,552c3d1f4b7d055919d7a0d22fe75756830560db,e6d3ae0ba939c8a1e6ab4809925b1c3272964cbb,c0535cf4590667532f933d299f9cd7301f6099f9,8e15ea1a3ae8effd6aadad442cfa3543b537eb1c,8c0af4007a7d0f616e56181ac538f36383a4349f,c271c38d52735b00a5f456e949d404043410cb1d,53ff1658012cb1605894f739ebe48e598fe81f38,47ade52aa3ab0b642acd782021eeb2dd2d611c56,eacfe9111042a24b92828dffd78c025e4fe73b24,e67e5d75b411591c00cbe9da53c0b60b156af312,c0e1a2f243a73a5d55dd58d385eb926482244024,459af4924bf419c7f8b854dd42ab132171bffc78,2b0fdf8fe719f234635f652bce0a5b2abf03bc4b,a5a0a319d897ff312dc418401a37b55653086444,81ce781c3e996b359a94660bb55efb6761c06dd5,d3312d91b2407ee05eb2451d4ec01371b636dc82,5c66a672f4d268990de569f226eb0c4aec57268d,a7c5c7655b63b6c1229132e5f13d736a9b10f61e,8ab36ab5aef477d719b3881c6ecab8d962863411,5dd5c37408d848fdfc41da77fc0f21698c0057a0,223ac6f560b0b61baf7cca99a22c9ec57a6d63b5,ad52331fce912f0dabb893ef529be21798c8466c,da24eb7d921b7c2c65bf1c075c01d293dbe87a48,0b4e7766302d7302450140b5d79841fcef1c0a90,ffe5f635c89468c0517e3aaafa41e15137e7eb57,9ede79daf83881ed3631a21e000505c519878750,1bdba701ff9068cc53acbd015a27636359fc54bc,5ca7e28fcda1639145c28a136286e26ff66d6856,3526158533320abd4ff2ebd5993192332628e5da,702ebc10bb924843e44ac05c0b4e7ec22cb4e7fc,95c73afbaf62bc986127dd068aa0cae8ade360b7,0db94306270fd99b6c1fae904a2c1f88d4e68f29,a5e782e1caa27bea1720b545adf4221fe2b55e8a,6d36feaf65aff0be037e14f37e365a7059626b71,0a5cf03d5301aabdcc9698242a9ef8dea3225774,4521c75a978f2504e85959a01c1bf1cf13c835db,1b7dcd32a50bcf5ee4e1a4219512b8a9534180f2,5799116806a415777225a19cee2b48fcdab1b538,fed2743a2e68493965a6bec977d460dff619aa67,894abb412282eccbf43cbafaa2e1dfba2f5e08e1,b95e4bee89f398f744d62d13ec11242e0d954895,48a877cf7201e2903fe932add19998fb8563d986,8e6f40c4d643bf40f533ce0a7cbc95687115e3f7,2f35921900d56288b2ac2825e57e7403efee2d2c,06e772d3cbcb18d4a7ed2f1dcaa8c83b6001fa80,aede7314a5283c7ffddf9a481d95bf7cfd87ee0a,9599af73728c2641e32505eff2bd4221674cd49a,c544f26583172d98492e8e9999167a9d9de61b44,9297d9d3e908fb294521b6c163a524042292d97a,685c05dbe5377e2b7bf2f5c585ea5e2d52298b86,df776077d7537e0ba318c83c2257a4f52e356201,8725ba6db84fce34907e5d5ca9e1ed6f6dc68cf3,25331d1b07599fa48df9d442666db96a69834c40,1bef44f26f9dc176365dd9f911fc3b103543ea8f,f2bb50871914ff7ea63594e8f56461085a659513,1d7098a6dbc247a1483facc2638c2b7873df80c3,ad7c84c9b91829d9e4a379d508b5a69a99e73d12,f9d8dc4d24e534a4d50782ba1928961265c32c8d,d8f0cb041e4c49bee724bfb4c51c56b9e88aeac1,b8d1e586e865966b0aae29b57dadd139c6542d16,09ab989d9d1f545250a32b3a16fcce16a028b3f6,0ce005b856eaec0c086802898ed2bfee884517a4,05edaae8dede448ec6aaac31adbd39571299027c,c83f5919085272101ef8ba7d53088b53f2dd701f,613074455600ca29c046f4243b8864c69e52fca6,16697df6cd0170deb51497a8a8969a2c050b1dcf,77d03d6a7547d3693f8fbbe2197fa9ad9aaca399,124fd4291b03b174f98446c88b76fef3990d0ce5,63ba3995fe16a2af9e9b1b206d3bdc517310f53e,51c28e617000c69aedf42581d88d0e5b11541a50,c9960cf37c0a661b3b9b1751867619a61668f12b,592a745893adaca307a7149a856606c9ac093ef3,11143a48f3942794365840c46ea0c07814442da3,b49f070b7458bf7a3e4b6f3775061a2264fdce12,75d8364771414b52179e7084cad838b6c0a0660a,fa8689232f77a6a59d6f872edfd1817c06d71239,47e9ce67f70955b69242246fd4c595193f115bd5,5893df78bc679834004ea94f074ed7b33d2c92e5,72a6bde63237bb1ad3836df48b34fc25f0157174,1e725084aa52844723cfb65662d54ef2dda2f135,4f65001ed266b95cb46801d6c4b789110a0ecb2a,5acfcd51b6282e3d8378a49032da149519bd0350,dcd4b69905294286428e17fbc1f344308abe0d9e,760e2d59d84b218746d93ee3212a980ed04e5da5,a23b9b9942380dec975758091348657052114425,38fc00aa8db401eefa934c9ebe40c0f0b7ae1eb3,f30165f1bee7e1979bec54b0b0003b9403707ea9,f88cd3b647cae3983ba0ccf6c63b83d9696f702b,971e5f1d2388f380bbce0f1ccae5f914227413a9,64f15329caf0ad73379f1a45aaf2f3cd721e5ae2,fbe6c2efe450d306ddf00c45c2679ba9806ec30a,215ac3d7536b9a50e0de482f3b9feb5634910188,909f2c048ab6f46dd9115ae8aad4298f6271844a,c0aeaba9bf2b86fc636c32fefc50e9d973539ad0,fbdda17ba982c5e4d7a5384629c5c370c975af4c,01a37288498253b6795c139f91c7633437ef3f6f,1fdb3a719283209e417d57b2d77ce93540de4cda,174f3ef3f43b680468d7535d5fa8ce3fb3a4d113,8ff705130a6c360e7d2009cb9f1a4d0a307985f5,a61f3728d4e2c6454dd0069148397745b6b3a5bf,f568436033fac9fe4dc9b38342a029f20c79dc96,e5d9b495607bbe9b85e94e449f169ac8bc76bf0f,6f7e19084444846c61347540aeb2f1876a95bb2d,71dd92c686e224881a315ab28eb3e6b467f14aaa,3d51f8e3df413ff487bc4ace382cad5e22a9a1f5,4ced0921710d931f6157c9d6112ff02d25860406,46641137d0d0925c07541a5af66ce9a29c42ab6b,754f43703ab3e4c9b0541222b5df47fabe148e13,007901c19daead0f9b76fda63f4fa67518206d1f,55c2ef2fe79d24677becaf2430c6015ffa0ba52c,b9a2cd846922536904c71eed878deb327e318f21,d98161380e273e6360c4a73ba9d4d41111c76422,637d107d1b3d4952883333f27b101226c95e21ef,3c5212670a01b1f6640a7f1786656632d707fbde,856f110f028e0ed00f20cd711c67dd0369c6eceb,00e2128980e09636965a56bb76fb81be389b30b7,513a8483f47099ee72bd256e4055b623b6f93af2,34c4e30709a057ec34b58415a1ca2cd75909edcb,d61995f60e8deef0a8baf9712c3d3033e2a8f6ce,3f69e986780d65fbc791b530d5e80a0b29fd3a07,a587059e6c72704964a0630adc1249be0db3faed,9f4380b6c2a7479097d30985cd5a079625da0d90,0119cc87f7518cef2c9af49c87a7d17623f36535,a16c159f7b7d329cf5533d2292ef08a1d398c587,a38302c6c21a7d9739933b0637ae51ff2e29d42d,7c3d011b00bf62a8e8b0663324ec8f0b65370cd1,47072b3835089fe58e2abc3d17146557e2adea12,c002c76720bcff54ebdb429bfce3d75d6a7ea6b2,ceb088f333ac5acecae1b8e80a7ec9a81be530a1,8f8e1d75f88de42a4a92b67081ddb397abd24ff1,0c5de32c657ad3b1e2f2ab6a0949ecc2c354092b,5b8a1da763d387a7e8e2c7c9c0c2c1744e579601,7177608175b331c73c78a1111b0ff9f82ad94887,0345aaace8773fc0eb7bb0c4cb8ea76155a66f7b,cf0e5a5364d13c840a8a21fd23ce87410266ea8b,f848a328a50d436542bda186c42caab6ab037341,a47961a30d9bf9ebbb3f45b5de4316e4a6351150,6f7f07847d71fb3125eba80ee9eb6cb0f5710687,ebb6a96a2b7be2cd2e7bd55f4af329b41e0b5b0d,c0b874406621ebda3c44029ffdf0f6017d6d8c22,f9b202d5fc01551828216a11b6ff2e0b0e24f976,0b2a0c2cbe511debb4e7d884f0262e8d40abaa97,23cc0ea22911ad746259b61589f7a75a4e34d4ab,e638690b0ddcd63f55aae62e927cb2292f81ed84,2aa17a48b2b1e3704f7c3230e5a418509020ced2,52ea3c337615e386507dbafa686d1f02c03a4c82,8688adaee68dce1c54c05b44946635973b37fa06,27f467b4eab7864a4ff799fb2289cddd2c45d30d,1ffdfd2ad15f4f62b9474a2ae72f2ad0a42c6a98,24c8eb250b9c7dace0efe91fd1f36c799b174606,060cfeb90df4fda2d572fa63225c63e304c8615d,3ec04d06cd96131c7d2a508e1526a07f33efb490,ec3d2af993826b57cf47446d809db2c8b49c7a77,f79ba553c602c9cd1a673c30db79edb6b38f0db6,3e6117dacd54430e555a42a5fb8177f4553fdab6,7ee877a4db8c6d6871444abab28e95e9dad7c932,00c3c8dbf20322d372ebdc28c2b9fc25926a766d,07c01318ea4ef19ede234484ed102f94391cdcbe,f56aab06534e643ab1e413c36e367fa25e24621f,6d1c4002aad95031c84bf3bfa777852492d23fa1,7e3c917567dc3163c2228dd01e4ad90dd0b76320,bf173920db761927c139f86745df368f45c4e37e,167676d596bbbfe82a52f0dae6847cad025dc095,8152cc7a1a7e56e4e4a4e70a1f552301f576857d,9c24b00d32acfba096d8b3fc12168bbe0ac4ef55,5184d3d390f3c77fba1f05f83a8965b4c398dd40,0e6578069293282865a3dd4843d4f80f52476e7a,81e60b1eb541557f5be44e7f663d5a816fa90227,e25b6fedefdb1967fee9f64e0d0242d6472ad828,7f8236cfa274504e0f59b95285e7fbf2efecda90,ddcfef13549be8395d2c9339632b3ebe80363d49,dad7386767de599295c2845cda7072e048d2e021,4a5aeb1abe8ef10eeb5488e04e688e2daaf4eedf,13ce8fe63c8972c54ca717055c231bdc487d479a,8c12ad11eea80440bbe691cb50531c70f53cce95,692be5e1d4326c6e505c10e8dfc3adeb7958bd74,8507fe5934b7b05c7e887c0d2f479242f6372fc2,a733b7a87ce7abc0da33a3d56da82b72407683d8,f1fc61922c3d8b4aefa26f6f51f0fafd94baf28a,69fb4550e96fd677a922af10fb11d9482a3fc433,4627d99022750437431889d9a222964592f4ef8d,13218943435188789ab706c2d97da8e2aba1770d,581baeaa99864979aad55bdd45f054c8a53c341d,18af885b3cf4605812a35fb656daef176fe233a6,ddcb014f074dde2f0e442d6493ec7d834df5bbf4,0a4ce90b8c886e85e4e7cdb5158ac7494761548d,80fced6db6c15d7833e2c06fac4098640ff4c742,0ff845a477db67a485e7a8c1cd8265e520bc8c05,e650290f85e431f59ba3e11953fbd1afdd16687a,eee7e7c4b278274240ad7458da9d9073b7374415,66b24cabe95485abbe4398ff468a57e5ea0e3cf8,5ec70549ae7e7d2eb97d3d56e696dbf0cef7ca35,82c95c5f951ec316a717d72a46e9f1f7792dc818,0a4b1c3b316335a1ee22ea86c28c1cd58b1bb583,3b700639ef337839c69f45ebeea59dcd061d09ca,096155dd316ed242fa3bcf0ccffb207a124e1e4d,cf5e503db4274fd2c060571c982a0fba8b00c09c,60431261912586b5fe0cc5c8b4206e711cb0639a,ee8a2c9ded95d5c77e4e43a2307ac15322d96d3c,89fee834756bbe6d9e060376f95188d66789b1f7,4f804f78e5c0458ddc6dcd9350edc222a6e1a4af,2468492a1aef370c66a6636f976543212371405a,44b5e31cde3e53b3cbeb4ea5b61728d9284d0e31,6c7b45bfb6af71c0cd821938d9b4e4fb1c1436b1,a6c881f8c42433b49eb378881b9bdd63a1a52202,a780f35fe5d27eac0c0c8aa95eeb22d1587a1687,3ddfcd62e2a1367391595d2dbc182f2dee8d3651,8db6323266dabbddac15052cdafdb02cf5788908,02d88008e65c7b66c91b46ffa80a0692ab156da0,a8f8bb545769ebc2dd0adc2071203236870b3f18,adb5bacba3fb370e84c6a8317ac01b7efdb011da,6c0db77156cd67b5efb0e00dced7e2daf055ddec,b3fc37802a1f53e92a1600680888dcec4a6ce428,4c2bca77a04633496d7670c00dcdafb787606243,873d9776d7f3e506b8e67721b47315aebe16de67,bcd3845dcc9f26c5bac4094fe6323f03ccf6d87f,d61ec0994e594f0c514c1739e0689f2595d8bfd5,c5e9745b8301bde2bab0e46bab2313423bda7910,8f5c5e892b907ba7d05c2cf5f4dc7adb2dd2702b,5b1e314826a40490ce38b532c4ad36fb01afd37e,6912f621d22ce66e8b94710f0decdcae3354ca76,d2d23c8aa02960549451c58ed3f0e84fd5ab3821,2e6a9131a07ee0e8844e8e79e84460b7f56ae646,875e98d3fb54def645b0339fb43ddc26a72e14cc,40b6fd273de1cccf752fb7e5d1a8470eb5257a9d,7517f7c33543c0232e002ff541db6e4e3a68f52c,93f189e8a8166004e8bce70bac3041a84e389883,38ac95d9bb36722fb9b3e596911aaa7b81caa9e3,b8d387e57c79b252a1ec739c3f466892f80ee49f,90323aa9f6c1cb89337b60e966e743bce82a6fa2,79d6630fefae5e21648dd874566d72ccf8cca4f6,36156fcd0e07726a8883a0825799734ac0058559,0970e8f84e95d8662a826f8417141e3feffb18ae,7f1ab60f7c1a30eb09cb06f23d6f010e3a187274,1020c3985dea224ad0ef885ba6d8dabb48816c5f,332a7ffebdb4c69222c75ba1b0a5b462a0e8f467,e91c5e4045a37afe8ef5bac994f9e6f2cd10a9ba,7a401a73688b72f43e4c70ab1c074a3e710b3b53,9d450d0b1dddb586ccabe8f1acbe2d2ff7523ee4,cb5c4dd73597780fce451e1b643c9b25d4ce7b4c,32fb3adb49f4e729ea541f9dabe960d7aee04de0,b6c2d3fd1f70e51aa88f8d12aff006f6b390deb4,9138cc232a21a24e07dd89cbf43b684dced80c00,0916ce72d8cdc6b4dbd213117ecab6f7cf8d5bf1,b45826e3888ec7adbacb4887f4ae1da5520b9d90,3a2e35c85c92588b1219e2b9df8dcd516f5f2dec,c0bfa13cc0d139245c58ad39728ef0a10bd99ab7,965aa7f4fafe59c4f0d09f96f98bb83adc2187fc,cfa533f9cccde6c1fd9cc41d72ab96367c77cba9,bb8acac034b1fcdf91a6b1b066d33f3e38a4c117,ad76167a8ceade7e58ce0ed8658bdf22ea248904,345e06a95754c7babd443ab8332dad39dc738bc6,d1c0b0c922855436f3ff54feb822349e97229d78,537607d90533283a42cd1c5bb8b75b62cac684fd,50ebba3d096b49c3d6856f9cda1664be55c222fa,7cec158bc9faa1d2aa267ddd6a02790ac1f2c3ec,2b6f5d7ed93f9975b11ba631eb2f974078c7155e,b829f1e92cf347184d6d184d3c17babda68abc79,41fe91b0d099ec15c7d4e7e24e598e853ed65f67,f11bea50aa42035f426343e1d0e5058e75e0d928,70a9d5f1e7ea844758ce3ed9b4f5e46a7015431c,d6269627862b9ec693ec0d268907953a09ff25a3,44b28a38c3bae21d0530c85b7ac8ed52fe3d8fa9,e9fb730f64a372e05022034429d5450537341a22,5250af878ef0ccd0612cda08e88d341b13dd9f56,33f3cfdbd24c4714f8d6a7841430127b33c89118,27f8aa113360ba931dc8c8f5b9a72c472ab3762f,67f0a2dca2686b5b740273fb9f20d32ecdd1e5c3,20b42321488c9af31da430f83eb2267e287dfdf4,943e461b72fe527a725eab26dd3232ad766c7219,7b7341a69bd379484d8e073d979b3f9acb465902,2d14965b4eb591ce9e0d6f0557197bc20926171e,1a867ff80af1fdad617d9b5066966b65f481742e,aaa1a0f7156df819896da55e51e17f495717f33b,caa2a94074b6e45fd4ab631408d3d6dd39a1c1fc,b6ea863a2667310b470ae59413204ff6b2719ba9,72a8407bb1272e0b6efe62a284cfb8d9ccad1cf8,3a8a2dd2a4e02616c54804b58250a6b51f9ff746,cbdf25e0c7cc5b53eb8b65e334ef18f1afaa7518,91b3989b803ac85f06a39751ae282cc5b88d6415,267fc4ed3f2d9f63921f07cb5c12527eadacf73f,f49c113d05845093aca46c22031617a5f2c4997d,81d41105c8c5f5e04da4b2370e18604aa2e6d7f3,4eec965458c88e4cd08783da5a30d775011fbf82,e581de2f71fdfa4b51d024b56bb38f1c70e7a60f,ec767ef3ea627c18a6cb788551f8709d2ccb1cfb,486582e34e95eee6cd9a59c2dd8298f2f39fad09,0e55dab80c10fdee37d2a07f664322fb774bd3ff,2a0af129ef96830e46a75eb31464646a8bf3544c,732ff44a4bb3b41e30139901869fa1b72b7c216f,9f9ef9aa0b0063215cf0e6526768fd4bab879ec8,1ae31c786079e0b7eb6585feac71c80baf224a9b,be37c2e2b103aa83de4ccc9aa08c3aa4a1da6c24,90375f06cf8c0154fcfb792aef471964b3cee042,53c5eae8c2b188ccf0c9d29a120b80ce937c6750,2bc7921b2f2b479a7a391a51054526b716f703d7,00c1cc0cc0b16daaf8b284ac0e7e9328caba5022,1d3cd1285a9f875a4b00c7fa609155288d977c3f,095cc25a6b7bf9b9f99d6afb41f44d41cb41b8e6,d68ceb121842d109b3da0f932bdc8f5b94253f40,d6ae360653de7813c0d15e315d733aaee372df3d,fc195c451f817641319a2668a534e01cca088144,75489a661dac6b1823be5804b78d31023e81e509,1ad2965a54a325d7d11d7daa07d38e0ec575e505,83b8f7860d22f0517373904e9fa7e41e9e23add2,883b6c3b3969eb7f293ee0fcddde528a161fcc89,688f9d20a0ff88c3349f73d8cd912959fc236e4e,cd31d7a1e4ced0ec0700275441563b235c236f95,9790fd24cb14e8861576404587eb2907dedd6bfa,4b2982f13fd4aa0707d5fd4243425a6cace6e238,80888f9c55abb7ecb18fc342cddc973ec4f46f70,5c49de8d09661f5250084af0b9c94a7eb5b96a6d,a6d1cd29574818dc220a3751a9c160633f2998a6,2badad205dd69a9f82edbe150ca5437b0ac0d16b,5e621cb6739ab6718831e6650495096f718b8014,13fc1eca0a4e7e8215541159b93a956615b1c6e8,e0c6cd514c071ec81a447d43c93bd22832104469,feecf333cacd2edfa06028db62e5d209f57f0dad,3ac59a1df27a7c34cfda89f6a84b8ceb6f430fd4,55cd95f277b1a6f5f50d0dbf064beeb092fc6019,98befb689ec8a5b034a25bb9936d63d44223acfe,d80f242fcc1f9213c179b4651ffd9b9b7f634917,0cca1bb8bad342b3f6fe085ec6807187faf4016b,2c08cd5f0c1203186e9cf67a4c9440b77d54117d,49acf7f8a5caad67560c82043cc1f755c0eee826,be59feb75047d2969795ca52458adb9d4a9deffd,13a3bd86de875de77c547b4f5b222e166e67b3b6,02852f48243245666c0ccf4d0b8dd455d2747fd3,a015b34be8d12bbe5919ac2b8c5b6f74a57e4d37,c73f626405dc91058ce5cbf4f87acb23384188b1,c321cc96e9b3666035524af0c17767ed8e865bbe,806ab4a928235bd36fab40e23bf450e1db5a8e9a,871c1c1aec516d4d70854e4ee929866bab981a64,d6310d06318e8d17e698c766eba5d733d80696c8,6b70a706e2d339ff3b689dfef7441c28d290f725,847320656335f3ee30378d43c102d3a809b3bad5,bb2aeef4bc11b17be9233572b7afcfc3da04b887,90949470217f96b3b868e4ac5e02252d03194728,e9b70c1841c5b1c1d771bb278b34a17ce31eaffa,3fc9fc01b08334fdec57f18b6f845906246936fc,cc14ebffdc65f98f68f8e61643e6fced026e5062,b65542de8a2422ed56d1d821eb85bb808e466de9,6d030727fbc3a61ed47a6916074bbeb4ffd30b21,26acd219f08cf99be718f2bc3127a41dc33df6a3,02dc8c7e77db316553699f0e371f3e7803d3efbd,f7c09b93c2386c6928a082e96d1ddd0925a19092,aad6359c39d59176c51e0d4e5ee31def1bc10077,50a7fdcaf8fb9a684a96568ceeb8643b4941c475,1170279dc85c2bbdea594b053c56b379a72a2104,32eeb20ee9096257520cded0d1af33d4664f8619,27830ee8c22d74464fd3cae4e662bf0ba97e887b,59ffcad15d220c2bc1f70f01d58bc31dec04b423,41dfac731ef973b03f70d8f9c01afc67bc5f311d,199dd8dfd1cef867ad8712c7565f090f81be0e7f,61bfd7be89e97e204caea839e37c67c6f837a710,8d52f694da0484cb2783a8b35dad845322af0c07,750d338864a92521f4daec993af7ef0aba9d609b,4dc97b64005f0083b2facaa70f661138a4fa3fc0,513f20ad26f2e940e9224be387eafd5d9c58556f,bdd455596c53a97ce5edbf616a30f33d278ae41f,0986e7970561a77ade9bdaaf701e14017d105464,39acf07bc85fb77c2eb287d05302948597ccc0d9,9b24a71e9930d7e929f9413c769ecd412fe830e9,def9299707ed1063d249559f0182f0fe559d33be,baba8cc875f5b197c08123b2d9add4cec3772300,55d3cf0ae5dc7b6f5f9f60bae65c1c5abf196b18,19b55afedf54bfc9e3b08c1636251339b2be4c42,c6edda83ce73bd42f5dbdb92eba7f9e4a9264d58,a4fc3e9b714e9c91768c04f6268179ed582dd922,84ca5c79e31dd177169f4c074da5cb98fa1cdedd,9a9b83857fd20c38a520642553c9106de548854f,cbff61409d719d08c711baba4e89e03e2397df79,6b47a571b665934d81ea8b3d000a3b56ed1310e5,016222a00fbcaf6870f4552d5f27b7a375412340,33a52972db9afbe9baf2be23d8faeeb9bab01ea7,00f2cbe0dfe83947126fbfcbb6fa186899b555aa,5a62c007b8b791c025cf2d4d60bb6da1aad86589,13f756d83675e7bbdf62d3375cddae8bf4bcc599,27c4c88da63eeedf546d6a4df5f8cddd43069537,5509eb7e31b74667950d30d166c77428061d6b4a,c0eb48f7e83987c5ed112b82f0d651aff5149ae4,071dbe7c211380bd4bed252c9b7a767279d112bc,586296992e5fb4d68bf87c7914573813e1fcacd9,82ccf0ccee1b0981198fa67c1899b38656c0efc0,6262740b678153a5f8a4dc2774f51f0691167e87,0c429b4b93406ed5e5877b613c96ff8d81410330,0663e3e8c502118313a6c577758912c326bc19d3,c8bdb9433a203f585ca750f326678423cca328f9,6feec370c38a8776be3f0cb17efa720750377b30,e8db278a29e0b363c8fe22d2cbcdd7db36b614b5,9264ccd2857cc25cabf6a309f323dd95ed319495,d4e1ad171208fc1a63de63b4a7e4c08e43edc41a,ed1723428847e2e7c24e9a8c3e379fda0c0f7496,49f8c2a817f811bdc9fc3e7f550a8e0b13503e7f,67325cf97946f053da51dd358a9ffca0a9676c03,0bfb0f2b5ec98b5fd85dd5ab58c6a4dd3c0a821a,2bbdd4e503e69fc06c5d371c15eec14258eac6d8,6af248a09f5ca72a7cdbc6a0c0518026d8963149,c7be7b41fb1a8da249ebba27df1b2f0f4ffcdb17,1ef212e0629d8b19a3b974cbb428a1f000f1c540,56708e632e69a889eec8bf926bb3551ad53ded86,539869352a5f4183028a3e6b33b4e002c5053ba4,6e6cb12471757b4d2edf8ce110855fa6fa7c7329,a5f85b0a383d9983ddf0dcaeb744f7ea6b5c27b7,3c8b03103f9a120be50b9e81f738ec1b903336e9,ce81551eca5b514ad588c020f9e89ef0b9da90a0,a053fefc0e9349ad5e97ff2353e3a8cf6873bfa7,7c58d8a9919c5c9dbc1485a21d56bb3f37444060,8700816250e849d9f8d0fc402b090aec6ba7ab60,e896a18f4c92b81837982ae7d678a8618d09293f,dea25cad0dc2fe6163dfe78dd0d54a385e2ac676,6c870782ecd20e5d460f8454fff316834710d4f2,2df53eb9e85e7151b0115e3d293398f4b8b6a2b8,2541eb43d2716599ab687bce2a61751a3ebdbe9d,e191b9ca9486f2b4273ed5effba490c27a096ddc,35ea189f533c703906d9f770dff684c4557b18a7,afe78a030b57e3f74825e134d6615ef4878778cc,76e45d6a50da6228c44b04a565dca96432c4b197,6a3aad23990b7965e726f76653ba3513e5adc836,5d072ef89fbc2532f621a5a0b4d6791cb926a997,b9c2c119c18dea618854e43639284a6eb799c925,e76397c0c7f7889f82a0a59203ad16a673f1e704,b34408aa82918b6fa8cd4033921d0331d8ef2b5a,7f292bf8cc6770c47d5148d92f2ddae051afd332,57f493adef716d49ed1fd2f4e857febfe0a48aa8,84dcf5f3e54ee40b806108a713fd4c334900834a,344403579a552b26c0a1ab79915b7c91aac4a13c,a9159aba0efda305e6985f904072bfe82ee2a1d1,ee4ce5f4ece734cb6d3d9f0e215e42b565290fdb,c65777acf65ee83967ca394adb6619330be9790f,699d6f0eca65837501d7ab7a92ae2c614f8e6cbf,109a55735e2b93889e6fcc5d8b867451f291e9ef,4d49a1953e287fffbd10ba2707ed1b3806eef21b,e4e9fc66487aa7386917030810fd468856483ab4,9adf0d7f6ebd27aee0124c73037085abdb048748,fdfbd85433facd2259fa8bbb45bfe2e99bf9f432,c3a83486048dba356a8f6638c5cbd1eb12a93bd3,e23402c1dc133842c1acef0a2d7cd1f386647de7,718b2bfcb7b5d94b6def4d7e89f6ebc49ff11563,22a39cbc721d5c0391dea1ed10e5350f917c79db,b38438075dd34fcc19c8df877446e4014ed8579c,87c5e5377589c4fbbd499010a27b1e345ec38224,fe265088974f937c8a9626052dd5d29b1a207dbd,7b1b3624d78e659e0bf80b061756d8c6e08640c6,b2da444800d4c5d472da58a6b776891621d11718,76c4ec233c1a61b1f46df6d6847b889c0a7a978a,1d031d6eb6e6861f38e228bd587ff74e7f6fcce8,426cd8c52ef1732ad3a57171429bf7704d80bcc0,24df623ed69f86a13a2ec453f480a4e3f93b04ff,14a08584c7cf63dfadddaeec102820f9de901c60,d9406824aeba0e977c0692971a6dbb2e62823886,6c3a1bb78c3e92fded50c1c1e9f4c3e2e6e9dd4c,6aa7ba1d927cc57769d4ed589326053849b235ea,3206b41cc6b60ef2854273ab0eee5e406f9f6efa,c1d92d87157b7d5a27aa989eff14e302e15f96d7,842bf6f447aac7d05c75c6143a5affe9e383b3b3,eaeffded81ec88f4d0e7494bd544821412435ce8,59bc597a256f0146b5bb05d951ae2d84963cf3df,51f13c846dae950e1d27693c9e23c1063945210f,81210eb267181b766acaf201a424a80d96bb5bed,209976ee53c9b584c013a9b0b21ec98ef733c6f1,5e3359388b0732fd1b3d055036187525eea76521,ab2aa8d6fdcdf5b3d326e7e86ac9d045f4859e98,e180578289a5c65e19e430bd3300a72c9ba97a9b,d6beaa363bca8324c7a699ce797a89698d49ba54,65e1c9c38becbee2f84d822cd65fd7dbce42b903,822bd135f3a54b8fbeb23c313535b13c18198c3a,9e2b2c09732ca596331f7ca34ba4e0f03d70093d,a7bd568249f9ec20b69b2a700da6a0648e93a842,c5f2e40e7a8234fe48e08d451d3152ba58a03ac6,9d432121e1c60557da3e159252a88885944e5f00,0c838a799ace7673e721bd29f0570097eb8f2925,6b57d2a14089735cf1c653a2717d05023a3be441,79b4df582d0035e196d4dc10894778fae58311ce,933796e9330ed5043ad8e76d9fa2cb8b1d3a8e3a,2a915f5872beca562a72a1ded95652f87b5daaa3,31c0d3a8e94b1016843596acea17a63bed9d4558,e95134229b9066aa2f1d312a53f5a670d271dbfa,45fbfb82fd1f5168a7183e78ece89da7a60e21fe,d675cd1362d502de0a94e0ff4d10e9c4ada579e4,f5c46b9fc80754c601205e6ef13c5b7e9a5003e2,722a5af4f1786599f22e91a34af459883c7a6a8b,5411db017b093f0995a9b7807a6a4dabb0f1e0ea,31e141019010d27dfb3c1a1fb712433268b520f0,419ad3e4aaeb2471c86eec1b6799675a70bc12cb,d357d9d563c4a34fa2ab3cdc68221c851a9de4f5,bfd83b00eb5743ad4ad0d24957f84b61ef9f5f79,3378280035f388157e007a06f7fcb74698b91e3e,41a3e9c52d52f60d121ae99d281881a55e006bca,a64b4cc5329f2275a5513b12622863e99a803a24,c295a589777a35730c90b26f28f7cc938d4053e3,c29e08e98a4d1f12842375cb8fb259b8e5054b0f,70b9170cac5a47f6d55cdced51e94ac9a8fec28a,d4f28d7ff397386b208823c577180938e15769d3,936b820a4e9b9f96661c961bab87e4ec05ca0574,92a07f9aa109f0f55af963f86e466c80718f9466,8d5c46f420fe3f7365579aabc8b40912a3610957,5899f1eb7239ea26291b9e38490f5922b86158d8,46a2c6bebe30989d51d59e14def38a82e8edfd78,4d5e45cdb44f61202ce439caa3d417813375f9b7,51eb5df8b27103169878575cb421e3181dcfd525,9198e9498fbbb81851048d0eb71251046f16987f,56c60017199b255f38843e33beef95e8d767a10a,73202a1e336eccbf9928bcfb5a780a0b97a49680,27de9894f9e9102eac91fa928eb1443001a89feb,ca286ab3fba24ff27294bba50497b81978b27bad,bc8773df85d2db0d2d5bd99aa69d7e7c795e7aed,7c6520ec7b665c28ac4ea97c02b54151c1f6fadc,25f3713d9280abd57a49a9979a23d4ebce27732f,d654978ff5a8980c0efe10632f55218f4de4e6b3,2a31bc5fc0282cbeffe8e41c1c8c576314b4eec1,4ed92759f28026d813b59a5ee66384043e3fd513,fcca356d6a1bf190d335ed1db4cba5233f7b24d2,14b52eb4f630f32c66122977331bd894b9474978,a43d2fa2f74211881eaeb4188dfe330f905c8342,e460f4f93817bea10b2fba8aaddeb892421d2668,36940b6418283806ed10292776c9c4269923e1ca,56f2a758983611adea7308e90ae9934c973efa72,72499caf6f7905122c97987953a313bf1c95901a,bfe3c22bc3e866fc499433faf57a9239d4f6e1f2,928da12b15c987e16b2481c43614c8e868be1c04,5e223a403e65992d2d18b1b8cab5da2c6c1aa37d,7379cbb2fe7b69aa871127e64a51763c445a570e,0cbb22ddd4cd4bd356dad0e8dca8dfe1080aae0f,d8e8908db227ec91608b386a65b5f8559d92d8c9,06033035f09c662020ffe0300983697c78d3039a,6e2ac190ce379fb19acb8b5cf06c0a1b25d19059,dcf6e82f8610b89075e00711e186792053928c7e,84a0d90783b095775b5d14b2a807497862d80db5,10c8db1b1ae0fd9be8b661dbf24643c0a9012d68,4f50c37506de036bb34094095aaa6d4d831bfbb7,30280a9ba706b330cbf6b18e6f2f6660743c0f16,9cd31226588fa303886b9daac162d5aa753e8e15,d19259a7774e23ebdaac4af5ee4def8602fe2969,2736b6fe0b3fa22ec8e2b4184897ecadb021fc78,d3fc1a2877c165a57949414f5737ef00ffcd867d,ed15b09985a073d0b17769bb9a28d3e41419a43b,459cebc515b11fef06464b711b3b33cbc1dd8c26,947c01f6d8000122a174da3d668208eec877a799,72d00532aa8f0fb96371f01688ace8b9d53b17b8,27fb1044f1f244a9f8841f059392bd7e595797a3,467386105ad855e793a09632142c00cd01c5dd10,9e405ca54138b63a4daff58d14d0527fef1e8e66,0f98e790a43b17ae1bb60d264931fb4f13300762,8f957f527b9048f51aad91b544bed35c48bcf3a9,f03149e07dee90b23369d1cdb7f15c142df5e31d,8993c0060e4eb2d5bca20e3529a829a9dd90efdf,48f7e179e4c5f4e59afdf0bfb4ec5228692e00ec,91a94d9f47b2bc928eaaf83d7c9dd06c235a2824,b498cda5bc8d834ab311a6a3415e990100d8a81a,276b2825778c0f6286ead1dac0dfe5fca307e77a,e4e03ef4c091f5a35da0d97a6a35224197b8be02,d24dd1a3abc4624be55c0772ae4432686ee18792,71fc2c4c817a8c9bb41650d5b27a89e207a68c39,f0751b65cf680456557aa1bf5c56b12f5c1a0fe0,d08dbbfdbc41cfafa122abf06d39ed543b473464,a4705cc3c310ffb422336b319891f63eef021f1c,e996235aeb7908c74e85fdcdf1369a5e46672169,0aeeb46737c5e4a5d8c21c26e6793956b0296cda,fe38f8892a2e99cfb6b941c48a57e1415d7ab223,7791a851c4a303f47743b156007fb19c6ed8ed81,9e801d916c3d163a4cfcc822e50dd75ac7cefcc5,ef0fb794d49e9184913581f561c87ba8c62d5e4e,0298305934801cf65136ce20c59dd133d8ee4d17,9ba69d7b9af1ab71e0ca2d0044f464261ae6a199,c6b8a383de96cd0a8e94037a04510f162e4bbc68,44c5c5618d924a06fb9adae7856f31e75228d987,c97e637951ba8bedf74725a62644d7578ce1aaa6,7b813b674adc6c94a6c9a19524913c07b7d8bc9c,559de2c461e94ab636c959149c775bb27111fb48,16c983693a235bdc45c6286a1e7b01d8ef58907e,3ad22fe3d689781a76a92908d0bbc119b2c68892,e7a431fe539df61d38a602c4c44820f1ee0cc4a5,762c634e296d2c32a5658170ab2b613d5b087f13,b17feea4827863c85207c0aaa5c8c5b035d27df1,eba2b2899787ef0476c1dd8852aba5b0adb4f5f3,8691eb95522d9421a8b2883bf65e535d581f1a06,6af929eb622b07742d4eeac3b754c60ad6a60a3d,2a9e8302789d593dfbcc4ea0f15ec73284657275,1b91a77c1a41a57799da93ce0ba3a4b58760148e,4e13be179dccbf311fced2a2eeb71a04db170bb7,8cfccaf4c36d98e397ba24083bb99be2509462ed,eae26f2ed787c88c07ccb83f0e5550689ad47bca,4b6d66fbc021744136d02733ecd375cf1fde2bcf,1cb454d0221a6ea535f1c0ec5c5abcaa3212cf1d,8d4b217045ac12013e9c1986dab89451fceb478e,5c7c7a419f7dbbe738dc40e4e00dff3637b38b13,de4356072f1dcbd81f721c17be39625d1f8cdbe5,87d7236ce1ba34d8087b8485d5e190788239e01c,5c83e0659cdb4cb0651c31c59f37a5f053eae155,f9357b4147f0feb2e613d6a9fabc6d073eea7b4c,cbc4aff11a1a1cc5c18efa68877379b9b2bca30d,81b311fd0d2a084a0c29740714076218fb6c2302,f8b79d0c21165faf4dbd620cbc6eae9dcd3ebf42,70f580a56ae8edea6178be6b2188472f87623542,a0ea8ae2761be32410e435c8e4b616711fa3e4f9,a8b7f6e98ae201787b6a77c00531f83026c6eb4b,aff9ec4e0774f915b9816a177a55a81ba225583a,f7c21753a9f0e43a08543d43af7e8564b6f33a2c,64b682cb6a0ab5976596065291fd07eb662c5a73,316af191841ab980570d0c3c4f5f91bcef1d45de,1b43f08e9e06f604432e20d5d8feba05afdebd1f,60de0da4acbaf41818ecee2e0930c8e9e9257395,21b8fd06473bc5e6c35b80e4d1633da283236487,19bed73bb2fd71a1be7a7f26b132c47d5c81fa72,77dc36f5644910cbffbedb9dbc7e0b118b14fa66,c06cba3eda67d5e2ba02f6efa7296c8927af13fd,e2f293ce22aaeff7c467aecbf6a3299e71d37a07,753114980a2c19c86244e26198a712c77ed3b247,d916c50745b109551d81471f408250a2ec18ec84,3661f45140430ba0ca99445ecec70d16610783e5,67ace732f08e5ac19bdf011412379a8d43387541,e5138486b700aa657c06760d60a7bcd6f1b05a62,dcf5c40f880c86d800a4563dd203e5fb89f3cd8e,07ad5e56818b6937986a1327fdf13102f9baad61,6ba9e778ef1f99a80f8463fbf68b39e02add6797,757057addf72d587387055dd964ecb2a562a2cc3,cafd9c77865ecb86ed9fd71637f2bcc87ce7e2d9,0c0fabddf6dcbf8411689df9c5cc29115da18be1,a2c0152ba2c45680f399a7e4d74f898ae3184f39,106c77756d7e2efff5355d0587d17cc261ae2850,592c9464379f97d67a76747faaab1af2316febae,f7a651b096d56484d44a704fa714c2ad712f8f2f,9b71bf1406e0eb9892915542232211ef47602227,4a2f04c88d459a2fa5a1619d91ea953662d2afdf,7496e853214fac4e15d70acf9f19ed0144e34e13,711846e5d03d6743205f8c747ab78c2ea43714f2,d759684b89fdf0d3cbaa033f8596f0a78a466b52,c204f7940bc73acd6893bff489fa970edbaeb5aa,5f9a44d3c5cfbbba360f29308e776f04cf2665f9,96099eec30e81f16efd94f385b45707bed515ed2,08f9a8924a1028620866565fc43b7058ded0401c,0d52823fd924b806857d4a5bec6fa9f5b6ed30d3,5db13dbb9e7e6b28b443017397c8db3f82bacc95,0ac04dea137e817031abe6ecb577f4d76db2e011,80a819dbb4cd398a8eca38008656ad45550d553d,be38c1853ffb59825df763d61239992b9aff9127,06104090a6edc145cbdc2858ca224c12cbf66aec,509cb24e2c759eb17556fd3d2a158e3fdf60ab69,6eb761413871082d2ea128d8e132dd5ac06bbf4f,046f547b562ba2df5bc03f9a5c0125840a39cb2f,e3c841e10f951fc54b51e7949d7a65f996c73b8d,b24e7f33aa4c19352a5aca076dc3880b3924ed61,4f0841e04d88db62129618493ff85b87efec7712,437ab1b6235071e572cb3fd39aea1abb6a9a78cf,251bf6b18f83b8391ef3dfe83157ef5c51148fea,a5d7dd51ec0942096afc8dae17abaaec09e93366,031f8ff3212c426ca7510dc6fd160dff22165be3,29402ee9790273d3957f70bfe9b281d3630d2f38,5faba67982689543f69fd316c38f16b7ce39225b,6f6f0f698dd81a0220cc74d6c10f545f23374bf4,de1d783fb598786fb054f05c027f54c79d054eb6,8847e59f64c43651db01a5c066c844940ddbc475,ad21dbcc8d97dbf7b553a3e1cf6c908854ff1ab0,321fd426406b6e60b6ea1bf9bf60857d6484f0f4,49768f8bed23fe42100474423a6699580b972a16,35e75829ef4a2cb124718e9a01301621d82ede8b,08233bfb9c8f554fa7b236d3dc7bd622d0ce154e,a61c3c544a5d116f1a6503af08f010f33ead500b,b4a10313c5c7017aa0afadca7ce6bce93278a1e2,5155f49df062171fec0a73480485926c1b428e2c,8233b90eb074a0d04c503bc0e23376d4cddf02a4,f8b4e224b0c719e4d9aca6b26c03214963cd6af8,8da7f06a6b0c5c391c7062f3b2d348c87d147ed7,b5dd05b28613314e66cbd20906daf40424433331,5de358aad3eac65822bdc4c62f50af24c36f2b8c,b39a4adf6f31875e375435ca720a8d2e06ebcc53,144d205df2fcceacd3898e9d9afe7cbcd5ed8340,81ec66a027bd860d6da043c3ec4c15500cd77b92,686d4aa79adb4d2b1e62a97e73ac150fb9f8b291,1cc51f55d6513baeb9948a53e23911ba68dc62ba,a55b13b7a0aa77d3e194563126f22db057873142,99d942b5551cf24d539bde05df5f8add1f151956,a721a26fad811ba618ff4fbf6371a43f851fb21e,9fb7a6368684ce4f07db72c4310fc380388f120a,05e94b8229535800e57c82a04dea764714cd4ef0,3c8c62b342d0e5b666930e2cb2a42606d76e44df,d1900d3717dd2a94583249a0561467f9024872d5,a59d8f1b4504e30b36c7a22ef2e087cbd98a7553,6c5932ac952a1b3d335fa7217f3b54799321dd95,b2b670f8b8e0ff1a673d692be2ea38cb5fc54e66,c2656e9926477da08cd26d60e55691ba26ee6b9f,279f3461b310661bac99cf13791feab3f9b22c61,8dd45d4129046ac0b4f819e916beba6a699bad23,0798c75fe3b08ce4128bf161622988c5b107c181,043a39baa8befc916faa0d4cca714b9fef2c19b3,452c628c21466ec4f68d90921c8ebeab362fa17d,01fd9c792b8a2f3a7206d43c21d34de8135eaf6e,5120797447ee6b029f483049db56cc4aac673e50,322b49f7267ffd5f1f4b7dc46b24912ec66f7d20,a352bd937f6f5473b175457baffbf0d6aad8ce44,d543ec4344dc0dabb0f39d4df1c0edfc5a4a1b67,c2eac3e4cc3ed56580d610eddc358d2c19e9b6ef,e3a8c9df14e8ae123c96ffae433a327693dc04b6,8598bbd763abdd16b9ecf7e09ae099f7acb0a4c9,8b1c2db40ee034c9f3a4d60ac3870791cb01ed72,21c6eb036c5fa43f5f2cfd1ffcc2be7263fd80f0,305f9facaba21515c001c64e78504e480bda07d1,c2319cbf65acfc6c42a1594cd98ff5628205afcb,edad71ad47d5f78d7cc93f2f281bfb3b60c56200,b696e321d599319a4bc94e055af27298c979874f,cfc78759480f2fffad23e33671f6434bee1d25c8,df673f2e8cd47a4ee3af18b78aac1b7c6cf80cac,d2d384e9b3fd15fbe608537fb82a806e09115923,ce75ee2ac03aa084ff859667d6f7876807c1a1f0,36b27da17c1088fcb7978b0b6d6601833b68d371,23d4b3363b867a3dc9c40d6b90831d0135691756,f91d7d6a911ed3ce6d6fb6751ae150342a7a0cc5,f4b76f86d28584f768e8eef740e2b3a9858a1920,2ab24146742814814a56c4277c8e25b2238113da,d70a041b08520a1588113f1fc21cc27ccb03d370,37fc91035983235d24e88368a7bae3de38789640,ccb7ab62cd014b620e0755788e7c7a9fe9d3c10f,24fa94e0dbe879517e383605c485c997b26c8da8,50c667a121b91828f50593850b94faaf846fd643,0b8ba2992a76c889864d697a7122c5e5d124d87b,4d24f9b5ab7fddad2c62a6ce47ce9542835a3981,2fc302e1ea9a5c0eedba4d27488670467c823190,18d5f4ba6e975408c9c171c316fcd38eac2d981f,1b0bba01654cc6912c7901bceaaa18de900030e1,59209e74d8ab3499afa52669c70081e0bfc5b52a,6557ab539177a1a130ab33c0ffb7c3ed3a9c6c4b,91300eb4de2b72c7dd6a2f300ccb38cf9e4fd99c,50ebc0f5446a38762932f9f7d202856501b2c9c7,71ae282ead03e312808b80b2cc3214b641496bfd,0822508475c82d83ea93edaaf6b6d3a7ace3778f,9cad8211cc6ecf280e031d9c8b1c0e985d70019c,3a88001d966aa3f9abc03e8116a3d9981e4a6cd2,891a13d5a9a328b20aeda6330079ce4f86e6a991,e97dc18159bfd8ae0aa14aaeb6b18d541cf03e3b,155333ae881e52a4ad49b3de6cfa848bca838677,f398b292b3463ffdf104db050849de74962392d8,f7c43cd216051aeff62194bfe1b98a7fe7f75c9f,03bf0d33143ebd13e4f389cd4ecac8aec17c2057,ead6ffdd5f924cb7b100b3ff7fc2cb9edc17a66b,698b384a95456673fdfaaac2b9b3088dfad6f2a3,c45994e38779957dbc09d74831aaa664e7031a46,173baf88e4d0fd247addffa7f20019aaf3ac9a2d,2503f516334f884a39ff9c82bfbd64c720bf26bc,4f3bab6fd20a46cab2d709c8d1e51de6956fc38d,b455d026a1c743e4f5362007479d8cfcf7d4e01a,69d178919b0d9d1b015c8d80ed2c6e338fb1c5e0,01c19ebfa73e98ea8d5a56d8c599d1e864938734,a022b47e7808d165401115a1b40fa655acae63f4,8e4ffb044bc78cb8c317e14e9c25b0affc28df73,05de0f3b3b7ef1785c4e80c14c3009d73230c5d5,cb9e256f9e69ebdbccb802fcd890d5d181cdd1d4,eae9dfe50078f332847a65db0f3d8ed9b330cf3a,700dd81e5bc3e30586b168dca6b8f54f0e81005c,6320e4fe55ca5390894042b4aee769b640f30aa2,69824a90e8be025b922d67e84def48e40fc71412,a5138f48e8a08b57124dd88d7b41e9ae99f4e59d,9e95e23f8b114a141246ed8ed4aab2a68c94d1be,4f92ca6011dae1649126a56ab0077d1a71083013,0110a996fdf2e25217ff5c3c54cbcc625e3f0f20,ecfd9ad84c9c4b7e1f09f7a8368f954f356e4e3b,7431e024984957b5fc1e2092ca304cf786eca8ce,3ce16ccad16c15f607227606a65148cc6c84e58a,63ba82ab1b6035bd26dbc615cf722c40f969691f,3721b60f4efb87035e18df7c789f40592a600623,eb0d74bc8ad21b9ab7f588a9fcf129001ca3d09f,a6a20929e0f6b25370a57d13f57815a6d06131f4,a44ec12c0f7dc53c50486177710801c0e8526825,c247c6e361bc1ea677526418cbbc2eb5ab2d54b9,684bd348e0496cda429e3f3b32dcd70cab85d5ae,27f1c3badc173b2e739121dce36b3a6634dd3a65,b01e9e0720f663f3e4fd0dd0a03e013957998f84,2d611069d28aa79786b7503346ba5a7c4fd3df54,8bbbe31ee3f78967ccfd67d2eafe5d5ff58ca8e8,4f60e5229d741623257a0053e613f44721418da0,b03c73b9607fe2c49678d26ba19d9bf1b342e7d5,fe4cf39c6c7053f880dbedc6b0ba2ea1e66b2816,97bb5737b3df25c876719851eb59d4b2c68e5616,e7f0ac87fe0fda375e1ab1f61ad6cbafb321366f,0bf39837426e0385205ed287bfc4da5e865a886c,57e69040a10e6db1e71336aee941fdd03249596c,fe29c2dd861bfc0fe4c397f9f9b220b735ea4ce7,c22ca8c6de19ec24e3c2c5ef929c81a22f3d61a1,63a111bcb0d676bea8b2568330aa7c01a1d35c3f,8fac62dd211b3940291190a78ebfdb80bbf98aa1,de7a2666a98ff6c65e1993aa23829ba30a1e61a1,0b28374cea07a63f32ae996c9b43f2dd519cb478,ab1f195d44a61b2a01bb4c3f626afcacda978867,6b8a399cd55e3a33b986732eded9b312dc3355b6,1690b61aaec2155a96804bdc4c6e455558b94a21,4d24d49dd99b5d264337f5224d4863f2a875b9bc,c0d692324c460ecec36008c65c73a8c0fb4f5521,f299a7ec73d86bd1b2984bb9fb95ddc9630425b3,ac09c383d90fc2dd702e111699ab733c6e28dbba,e4a3737c6c07420ee7c27a968c443b04d71c3eaf,e2feaed85df37bc91fdeb59220c90fac2d3ade4b,ba559195253cbe42f2f04642e93bcb7e72599005,4761025603e130c659cf40e5767c766bee6cf537,1e9f687d4c2121920803faee55ad61333e7a1fca,946da9d66480c27a221e6ef1282c88d7f81ee8af,e88831c2367622ed95f0452433ccf84ad33d7106,b702664be09458c06c7270520c4500b5764fc036,388dfbd3f2f7ef66e0b8c62797c99305aa964247,b9d80c7c713bedba5bd8a40c0e46b25d32c0fa1e,f8bb11cf1e85936db56754b950183d7120918dd7,342b4b2ebeae12c774a3f325411fe19eb6df3d07,e4a6a3ca3a5dcbcbbd65edde61bed03977a75af3,c53e5639b7e149e2ea9efe78a9217afdcf3bbcbd,b87ba478a390a8dadd681bda54d0e2e21811cb1f,6007fb22e41468b446b257bac13660cb2664e45a,f9ce41a0d6be994f6aceeafaed71f23487770aa5,88acd6de3508aa297affb97625acce98877fa98a,eff38bf063fbd052cfe47bca56e4b2d8073b6ce6,aa4861217bd3f6876331309a92dd5eaff303b1d4,9e360ca017b1f639957c799a8b7b64047c286d93,00513a091d6cebf1ed4c5e2b6619dc36a4b5bbc6,58d258c7768cfc3ab47e455549f8e10b8a3bdc0d,6322cd019c486b6b98cd3f94ad9097245be3447d,0f4bfb3d662f4f6eb4c71ca408a42eac8e329bca,5c81e7355dfead2da26406b1c787e8a449bb6beb,caa82d3e1b0019b373c55c23168bb8c007fd6100,3b73cc3a9bba6c25520d20f83d7f68f69e2ba911,9e2996fef15bac17b20c641900f4e641c40c6aa0,6e1845426045c86a0d2ba96783c4f2ca8c5d0689,ae1e4c3704cb315c241e4512f101fd101e64069f,d2cabb3883e5847f39f41ad8cc7ce5adf8c6959d,21c42878ac1e8c3a8c5cee99cd72ce7a92092379,03cadc209ee3d5145eadaeb8abb0842ab09a4a17,9e1aa0406b26f67fd021465903a2627b960e8c8b,bd2d4a000c4d5b4377e9a28bb225d3f61d45de31,16e434606776d7961f8b67b7d1062e15f23facf0,d070f158d01e2719990d1d7e273f10788aa9cb17,535bee81aae6a7f3bbe61d93ea6be611260442b6,088ad36f5b8c0133d23b464610a6e6dc4aa5ef0e,5e25ecc7c2080aed188563e11f716efdf0fae98a,202de8a0296d0cd45a9ed8c25bc8633baa89b3d2,ac79155c97e1b10cd17d221960312cbf2ce8d511,05cf5add4877cab893d308461ba6bab3ef033d38,4cb82f5ef77d1bc568a21057582878b3c777df79,510f90aa19b1bd6e0d92c9bf823671c5d62dc659,9c15dbc1d0b479bea20ddc1e8fdada60693c2be2,5903fb5aad8fcb57baa15ae74af54ce38857719c,ef1619cea3303ef48f81ce9b1ca3cab044971e4f,8ff7252b4003f3590cf3f67b33ee6dd73c47ee44,3447393a6a6d380d7ba3cdf6566819df3ede2734,904616201f705118eaa565658034d0d8432717e0,d6dff710eee0d56a1df3a761112002e4a1ed5758,6851e81f7f52a97b7d5e16d06f663b1e82d59745,316fa5fedd04ec2621202651c6d4d27749717294,e14529625e16ca3ca11d616d144ac078474bb711,dd747a7f70cd0688ec6eeb2e3c4cc5552efbc9d6,7a5feaa8d38b5639e258d9df82844e4b29c58994,ce8c02f092c147aac9072545aad39c254f08f2d8,90b5274f2f3d670c1f7c145b7eb06c556c503749,049d85bd814ce0d552ed83217e9dc3a23e2ace9d,c7c37ebd69906cc9681841e625ca26df0298504e,b75712b5032dc492930ebb2715adb9aa524a7f76,f3cce42f2d006ab346cba58f22709e3212dce6c0,ca9ec527f40c67d38a90a44ca2b2f0ec7daedb35,83f194c1842b431030b6296fe59ba4eb20ef72c4,2b0270addb3d1f3bade8bdf1cbeb7a5c263de9c1,57ae8b20a35b9ba9de7658a100ee2e2c9c5d7068,5fc7a74cfc1504b2742d61a81c7b3923697e44ea,dd9ed3fa5cd6dec0ab5573e464b2cc5258066695,294f0d5783e4abb5f85b69ccc861f8d1f48414a0,746133b210300aa581efe5b6a9bcd8969f2447d6,5629107ed8ba0fc170a9cec00980d17dda25354f,cb8369931bc000ae271af0f9eb4b2683ffdfc638,93b8e303efe494eb2e62a8d504ca92b7b60bc874,32ab76c1cf4ff1f762364fe10f08a54e43f0cb42,2b9dd184be2aa29b7876b15436e9967a1683d8e1,9db8cfac09046b16a349a96233e173bc070d02dd,0b2102cfc42afb2629973a3c0f2b9d614f33be7e,79ab66952eb3f27e99e71a902b482ea3d9553321,b4bf3478b454c4c6ce6d9f859904c0d901beab4e,c81fb5307f5d431f24822a8f3ce86ecacd95e79b,50f831cdcfa0c30a5c4403d77c363dc56de11e0f,ebfa9238effab582f48400c371a4b8c07e8d3bf3,47bc6d9f42c91c7a32c3e4451f381e47a65ec93d,6e2d05638b243da413658003647f1a33adb49933,8862e06dc4d4f47e3d7e9e06e8f0581fc4767c61,4779067fb3cea6527ea4fb9aef97b8497c516912,d8f85358851e6f59a50112958c91da7ba5c31c30,24c75b9c650a7254d00ee4f820fc6327a5edcf08,cd639652a35026e9e890b3a74dcdd138c3e1f395,dc59b87231431d9b95a2cdce857c7d6d09f34684,bd85cec8ed32e384b8d2e13246b12cf818310f25,df416d3a5a0f688830c1787666b1017981b27233,72f1d8a48a261bb0a15bd879a51559ca059a24dc,75f54c482430c99e107aeb3ef8b6742007fd0544,f070d7c0174e3588c5f1f1347a7baa839c97262c,6ef334bf37cc066387da7cc06d6c1837e3427808,31b4fa6189e23d1bfbeadc4357bc680bb0dbfff7,57d4b655bac96f3716570eaaf89278f2a87189da,46d1a118370309516351336a252c09329d51928c,3b0c26329e0d6ecce1d72536268e42db57fe1302,4d054f1d9d1524694886f2e2f1ecb9abe2210328,fa2875b53071a837c52a6e6a72bc229176210227,6bc8cb6861de786a8b7b95c4225a6c97ac13a76d,7440d7886c633fd99a994c34f261c2890b3897c0,1f564c2cb6346539416cc094d9bfb9dd50393de6,c4d6e6678a1380ada4e8774e5c66a4592ecdc5fa,eb09aeba4946d6027af23c2d2470dd452d8ed772,2847adbb14c0d6bbbf2d905efd3d507a58424555,f6a5f157cd72d25a2d3da7a384dcf4786f511d42,9f473e3dd85f448f5c3e76aaa7671cadc70546cb,9aea59329362a8100237a0076e1f071237eb76bd,607627168519405b3727ae869e5f491f65a33163,3a7cac6ea395f6ad28240b4eccb4d3379e622998,5894c4a557f8e760b78e49fd54c0c4a804c0b5ed,0729366497d231d045502806847116324e0b5434,627ca74cf81eb95bfd01d7f036fedd85539ead25,0535fc054080c5d9b8667da41b2dbb3dc88fdd77,563c0c459497a5f07a970068d4e84c835b20a4e0,d6cf5ed96ae5c3d6264057c129353858ea7aadb4,0ac6c73dbdb75e156a3e5c06ea443f371749e144,9cb1dfc36fa3c76c11930a4f6cb7ebc175a77c53,e81d716573a9c986081254aae1526883c37ef498,5e1d3501917aa22b0d40e48235d0a97bb74f1681,f09035290b1cdcf54f40c331e8c84d925eb454b7,ef9974af8ecfc809b18fcf3e238221a61e65b6fc,e9b790d50a18dadd8450836dde7737009281a6f6,87e18b1cdd76581940c6c5e1d1eaef6e64eb02fc,b3028cfc9922fb266b2d0da59989b7782532f24d,751461e58213b0e8296dea6dbe04ac650c9ab728,422c4f5d6822a77679a2c70166d72adb7d426c98,f69ebbb0e8323cb635ded0d56bd5ff4b60f631c6,15aca89b0c1308137f66f4e1fa479a4673287335,7af83ae82144e9f7223a24ff96e544ddd1700bd3,4edd8c4a18ee1ac19791c63901a0917dc5224435,d645125364e998b3f0648c6909d1afe62791f836,ca6cabdc42c3394d55a2a20d5c6f8b6fd9f7446c,805f5ff26a689d3d89c64b13b9034d1292b7d3b0,b37c8aacf143318b992154b642f3d04b7b11f327,61d79b7e77f488ea2ebfe6862a29b4149ddf20f7,77986d18d70d7d99777d973f6910b52d84a802e4,2b5e291952f780e50df8c47707bcca2fc8d5b306,71128d3d504167b16895e90f732aa2eb3e3cb8dd,ad664ec95daeede3805e086a603971d2600c50b6,d20ae38fb8d7effe60a020efec1b5068a0e2ac8a,20d026bda72139b0b17e892e1ecea53f97e4569b,0cd0a172d9f4e41a4e77c5695088861632e18697,680d1b95a699e73ee8765ac846887adde681eea4,6860a7efc3c6975bb258fb892b7b0087bf1a14f4,307e4733f46c1e41d2a7ba6b96b3f45af85c94b1,a95559e5276e56649fd6390154750a1106e2f005,86cc1db6887178f4c07cb0ebb190b694900d8cef,459b179d687021a7991475787ba82424001bf863,2579c0909256b6feacc87fb9944c50198fed02ae,296def5ae78622b8c8e6e4fda2d223d76bd251eb,310709eb808205afaafd2eb23f557d9b2b0bedc0,cf501497e4889166bf7875cb753373d38c7f03a2,0446117276dddd0974bc23fe9fdc66f8011e8e63,f052896ac6ece2b36c36706604780dbda90b7f41,9912cc90ab10fe23ad633dd87847f170fa443874,165549671cdd9ee81fcc8e4e5ddfd4e62a116548,e48478c8bcaf6720b300b8fcd14475fddb7f5066,f843029843558642c5c29f4788b539a819ac3a59,937365e1a9b2e185ed4d6af9411cbffae837916c,de681e1b13c5af66b1a1f2301d8b094525cf6edf,9b14935315ff59eb62aa2cd19298e19c4de76004,1457605d24601e45a6b21f72078b4063678283cb,2d89208a6d21e28961f0d8057a704fcbb61984ff,31d4e7fae9743ddfe08aa32c8e638af887333425,c77f5bda4f0dacdd5f69d01c2b7b1a4499b381b4,2b238460f659b0bb00f26f45fb9fc60968eb7874,f2afdf33061fb7cf8f3d0d2a0fd75b9751fdbcb5,aa40ebfb5968ec48600d3555fc8bf3b273bb7139,2e511a4809edabd77779939e43c448bfe1a30fdc,4c284fa75377ac279ebf4b06991896e587caefea,dff58f05b8ab7322a6dda1d1e58b54e51f3c916c,ede779611ce2e816b4fba650591f2f4b07ebcff1,24450e97f811ed25a25384f24d7f8a2158abf61a,ac14c89ec0a57fc14f37d709c7eb8f4355402d7c,2c92ffafab28e0d77f1e26bfb453e462c0d37a43,d09393c89acd8653c9dfa058cfd4460777ae868b,70e28a6e5b835281b74b3c9d8b39fd4b30c86c31,63f2d6e9e8f520ee0fa8b1ad15979ab6257670bb,3101596daf7b37b7db692747a79b20f45c6c61e9,2d7ee256f10ed2b235a533aff73b67166cf41e6f,6cd3352472b99d11549c66326dcd1243c551a4c8,c9bac8cfc4563b5f377ada6db19b0252eb57b4e4,a48323e4877e3466d9847b28d26103457de05719,9758c4f3c61fb0c814e4c54e378812d388e1269e,b93829390d6eb3dd337faf79235bd8eb2efdf17e,a3c33f6ee887789e695f289172bb7a7e7beaea5e,00f44612507728a678f64d8bc3144cb7ec49d0ad,a9bf61161b4343011d51724a505e82339fd9992d,c486706099b3dc4ce34d16e4e0a3173b9de7dd2f,6a46b00a397374989dd5038de9310d292fa88452,04bffa014d7473d62b972a4376748f4381c782fa,37606c7ea11c8356778b5b10582abc04e6f587da,c172c147b3c33af78c3d7320939f416188bdaa93,af46d68230bed03777625577374204b2cbe22e9d,0177a34c51bebc5e028af7682a6c6d1ee9c271aa,e8626b9972b23f1902e7e4c0b2ec03c4cfea91b3,fb39a0a1e1bef9e40e9b358278e783fa7d402314,1cf57633c98f5559c203bb48f1d8e2b22dc459ba,621d0f57e3fdd279ef1e8e0e9beda859e9d7be74,4c3b552c6d3e8f08e0cd41577292103a5c549142,fbb560af0395d2ad4674bc6e0f406aa05e3bbf95,c7ec8c54bf2b458a2002f24a3655c17a2bc316a2,7c0f14aa7c14e9397e6cd68683bdab77218a5d92,57370d049dd7b05d35096ceb475b4f80494db5ed,222061e1a92d6abfaabfc9406cd655a5ca8ea2e5,064cecd073953686418d089495eea9d534af9e73,add2c3098953d0766950e8dc78e3484a46bcde7c,430aff38a3c4428ce43d0f30f259ee0b8b80122e,eb4e834b6ae3a17756bd2732ced075ad4a0e5ba6,ff2ef9f1a32a9ec436b8cb193947061b0a017a24,d3d180e84143f0e801bf73494b1a71f77d2c25f7,2ff50c9e620032456165037fe00f3edb99711d53,71a07dcf9ad6211b83810ec187b617d005b818e7,252254380c6b9ea99fc978b6abc1b3b4fccf9cf9,d34cd289ee1291b6a7d1b4675394248be2b8ea6b,4cdbee9efeade254ad0a8b03dbca33086525c6f8,3fffb43ecffcd08fea1f28f6106d5c3c8cd97091,ad548a350635141c415930c70ce31d8173592a0f,3286bf48497f3f831f5034569c8d37da1ed6e76f,38d899e0f288a24173a6c4c5898bb176102ca9b9,682baef7109c87a6ddb4f41d79965704887c4ec4,e9999fd04a6338058d27421f427304699dc53c29,cef7edb3028a11c60be8f9dd676587e97fab7e3d,3e1cc8f9b982bce46c6471475bae47c281be41dc,653ffe15ad341350015201a1ec3188faffb4b9ef,b913ebd36a136efc99195fef9f8a857b55d02545,176910a51361cbea23194d5483256594d7f09ece,e07f9edd339973fb532ecfa88928884c75794957,72bb347aa55688e4dcdb112401512faa8768aa8f,4fd9e0be85d9dbe6b969cfd434dec6eea988228f,fa518eb7d8d3f00e1b6b4e831f0a0d2fd472476b,294b73583fc0dcd548ae95a841829f9ad2ab3ed0,8af453cdab42b5276cec2e89d83ce5c87d70a137,7d0e006992574973bbd732373af32462393f00b5,ae01f0399cae6baab045b2ece0d71096aebe8ca3,96968fdcadb1f87017c6e7853c4a63ba065c6611,e5a21c4bb27055cad85f1d9dd494867c0fae8c22,26d31606bda1000638b7fec59e1914aa83e1c71a,7cc54575d867e37a43020df309a78cd65c3fbdc0,13d84663bc4eedb2e9e4035af75622b0a3cb480e,62f9fd3fd3c13c8387e7448c4f3ea6b8f65b8a8c,9cedc7d76f2bbe52b3d1cc4caf8024e730266f83,535a333b7776f7a229b76c7656e928d8a21d21bc,4a133f5766c09362917e0416af503c0a00b24e87,372c35ebccedf64266a38a35e365d3810642fef2,61cb37ecd50b0d9400873624e46692c3282e4cfc,02d9e6c2533a3cd108f5e6feaf40f26e95deb64c,969a488183a42dedbde8dcec7ac00595a836974c,de0efb07518082439b9a5cccd503270b09f40e84,f43f450093876ba8ae164681789cad0e6ea4b68e,54a1a8dedbd4af64ca8079da69878f89a69d9e5b,dc4d9a2a7f5d2e40fc1e28c3b8da011306d7dccc,81d5badf7b76e9f1efde1cebe2150bee70e4cf58,5a04dc554ef53ddc39895a9211286b9fb2e65586,24bed1a9bdbe3a1edd46bc3b2af83ee385e041a9,fafecee712bc9b2ce8ef081d8170cdf99c48288b,9b6d6f9f6f91c5d6a8a153635f7e5f3c52a1f4f2,6256a761d61a5b27a05878da2449ce8537d60c99,916763e747b0f2d3bf2dcda76100dbc0d5714a9c,51f09376456ed8dadc2e801afaa495863fd7ee3b,72562004cfa5106472f61efc5d456788bbc256f9,160a0d35f64a52b9e31a725adc2672498d1f3f29,2ddabf3b84d42184d9781e02a936fa1160177866,824b34cac1d05917eb2bc3dc8c62c9772d0c6e4d,ffed230ba8958ba3bc27310b71b0c6df589c3e63,acd532373072b69d0d802c4456943aa35388bdca,add1d4f07c925b8a9044cb3aa5bb4abdeaf49fc7,d7e4bde11fdbfdef13e9316702c914e749a7757f,f9dc6b59eeb9b80f1cea47f504b6c969e5c560a3,3b7c68e54a76d02ae721161b1b81c15c2e22e44a,1a4756b66bbd219943dce80a95dd46f44f46cbeb,6cb6acb44a1cff4136125faf763e67525ea696b1,1ca3222078064fe4bc1f92fc94a58cafa39f2643,03ade425dd5a65d3a713d5e7d85aa7605956fbd2,6f5a457fa93ac8b53cc77afd0eb8729f1e5665af,f183402ea3aa777fd7fe822eb794837a8e0b3478,4a188d8d13e44b397bb40ce1280279d0c9b1feb1,47da751824e9a58cd51fe6b77acdfba566a8df79,5b0cd0e0a2ddbf722b6140d28474295c8376e561,843d1863d3624eeda4f094beefdd1eaf6eb23daf,b735f02bde1ed684eb0d0db2ec125d26d103aced,c32f465d442c52edb8aba4e7fb78c153639d8cd7,3d51e770c28b404ac119acd7c108ba174251a929,ca36f1d499a70b1aee85ac637de53f153a9f4c92,1e802da3a611eb2953c4ec3c650436278d76b9dc,24150590597c89aa7e322ed56f4c916b666b3b09,3c07b123c22a2fecd875e76371afdaa5a1d5b9fe,c6af3ed8a52ddfc3c54c69dab18e36345ba5b92e,e4aa99d3f603e70c7db3a55ae5d59470c1a37f58,a927450aa63fe8e21f7da22cc79de182cfcfd780,77ae12e00e6e0b4955949bc71e9b275bd6d70538,4170eeb054ba1414eceb08ec6c0fbdbdb17eb5c2,cc2fa8a4b8f4508dcc05044f97acac50dd49259b,16dba64c31c3eb18ac916d49f1529fe4810fe754,97e26e65f0ca669926c9c8ddc05f19da76180ab5,093e81995e94ee6dbfe6278f04d59a29cd54ac8b,b5b76c28408e7401dc61fc2047182d971bbc2537,c9ab310db6c63e9151e0cbd01b83f3b2378b4676,b5284cd9b0d66523f6aa0a57576beace90c86e55,b90b59d2b5064782c501dfca5a1497f1ef513a6a,fd61fdad30c073f5b2576d1dc65452c5e4dac657,1c7552b1a3c2bbde15f98671c7b7c1424494c128,0b1962253c8cd3e2194b1b0015c4352277c1ce0a,7cacb1830c3385098d308979ae45e3ea42b9b16c,1c554424859377458fe3d808692122403001304f,cf6abc09a3b4077646c0ec03ec3d1046acecc57a,608d50697c5e19a8249dd9290cd15b652f5f01a1,c94dd9c74895d419f72974fcbe5456fbae84b7a9,fe87b23fbd86d8f978142dc326231ea6bd4a61f0,5068b6f0082a020a6124cd7e652558efe3ec5f37,b5a63d8162d8756e4ae73b80ff125439a1b47613,24664b9397a6dc153251ffd7a4d3c01515988748,d827c97fc244dd89ccee46e686eaf008889550ed,2185f5946edfddcca8a5bcb76160212bfe2ef797,8eb1f763d0cb0f98de1f12e3d48d9c516f5ac7a8,77a24a9fcd3b01961f881143e485b4be0826c139,3793c9ef69993bf4b180b6f6b15bb2a5edde5530,faf339206c5611651d4dfb38af0bf638caba6c74,23184e15023157312d7a8afe0adfe30b5d7864a8,28cbe037cf9299ed6a089cc78039d0a16d0116ce,819f293f4c780fc6833785da27e10f965570f44e,b51ecd27cccc520764c9ae53cabcb61d67d46d15,b0262f8c81c352c0cf3ac11e1e98646aa9587944,8a2ec5ebd9afa8a299cfdd5d3cd359898346588a,07dfe0f23c3aabdb4dd47d2a7a26bbd75934da5f,b7c533baf4ce8f0fd3d3e7d521cc355e71bca797,daf6bd54af7149e06961607f36e3034aec1e70ef,d3c8c564ceef470411821b5a6c82db17782ea3b2,a15675cae4c91d0fe0496a879de4242ffbc5f9ce,0a8225712e4b4a4471c5efb1ca11e97e2ddbd71e,9d7bb4b52a78301ea6256ae20279a8db63523e99,693a71c85a9e899b8f4054778e886fdcdd4470de,2ae95bd6e65f698120eb3a7b774b4a7b252ce168,8205f0d26abda68a740de8c962a32172d2bc7e8b,2117d1dbba8f18b08da70e890c30111edb3aebe3,984f45efed6f79e41d7e5e684ea8705172c90436,c4cb42f7d77138beb79d66c70c8b42448078d992,833ccb78e61f01d1525f6c6af6757ad573d8a78c,8bf08f545d15b39e43874a2b1ac5b0586a917a4f,b2c982294b90f03d507e3078b0b3bf0a359a29c6,f892342140c4dd4e852eebf3279723fe6ef6519c,f5b685efa09b539b1f95925405723f7ac7b1dcea,ad84a99e2ba630fa81aa6823515bfdeac1f3fe8a,24b8c0e031669c34f6912415fbd501599a857364,e61cbfddbb54afce67a086811c9788eac8a66a6e,8cb309da868afdc03f0dbddbdd18bbc0a6a1eb90,f37f373a04af7de05b089a55bfb4d2d86d055fce,18c67ca3c221cf2961d59ac19a245762f4dd8f7d,9c2d135bb030213819e40f73c47e7e33d35ab3c6,3dbd158c7b0b1df5785d3a395a3ae058b7867381,a1d546f7a39df6ffb7d3ed9d3bcc47126ab2e579,2173d87cf4aa84937abe438d0f836c8fdd3ba1c1,ebb424989c23060feb869e0cf817a4d5285c853e,ba8c6e130e524fc1454b279ab329b03a9877b13e,e354e067ea6b5d099db609aff76a199a81e92d12,c9621e30ba79b20322f449e24a2f438918ce33fa,4f9c6c24a8b4b03e2836c77fe2e53e38b6519420,d4596a029984865ace68fab981047bed1f1d1494,67540b32bea000574561485e11f7f033be1dc2cd,02e73b917972ef69c7b901c3b5c493a4a504731c,e2f82b25d19faa263bbdbdf074948c6537d85e3a,ea7753f06b2fe66df61b63a49558ff80ac3a09bb,0f39df025ff43caff8a6fc0b841ad429379db242,6903248d4ed5a383bf0fa080992c038185221a59,5ed0d65dd3b79a990f8f8c4974c3b20c82964e50,cc489350eba8db8bc62a4fca77b7ad9aa14bcf3d,fc996e7530dadf0cb498ba1970a6de5ea6edd817,448ae1c06150d4fd62939b5a31f38c03d9a33c7c,d4db3a650fa40ee89513ff581653dbe2d44cb671,b8f966acb480b84e8076a539b346a1ba6b29af69,22e8511f2f68b536a0b1c31b2ec271fab255d5bb,3bbac90fc37d225ff4eefaab018fe6147a5a0937,83d06d95dd70db6e3340afead3bd32fa58d9a396,2e7ce47dfc59e772a9fcc8577bbc6b14f9311bf3,dc500a7adffbb3cf94604097efe1eb93bc43822d,8e2df4f8cff43e2fd7f7eda1b9f73cd093008c3e,f944f5cc3dd7874dac049e0c8c4d7212df781452,1f959d076ed7f29c3f8a5c6e99cbfcc62c1058d9,14845725ea57e4ff110bc5fd838aabe6e6d20c25,94a3ac5fbd184bde121f94895a5bdf22cf034d70,39eb2533b8f7c6c8cb17ee30d5c2005e74873ff4,8e6ec266190d59558f369f808c53cf9186887ce5,d86d0d56e363a20ffa1ef48deea045851fc49d91,251b167e9a17d29b3da6074933acaf92cf5dec81,d16b6b8ce843e6e931cb8dbc92823f82ab10ce0d,5c418ff33ad704d0596c631dad9e082c4b2076ca,3273f2572f79bfcfc9abe1d821a9743108c65ebb,60752aab7f8c3ce2b1fd57e232c7305adfb6200a,345f3db49a7f4e662d117fb778bc66b49de14dae,b2d77411ae4a43ddd2386c4a1db5e0191790acf6,81d3805cae760e12ca120b2725a6c31b83da035f,0c1e2ebce6e4f6e1a47d4dec5c0b8475433ef8df,239ea8fb3cab9e2c052d933e8f0ae25648782e95,6128d66eba5b1dfc0a5e047a057c33d00abac6e7,7f6a33d94efdfa9f1db4bd71da6ddff10aace45e,843cd6eea60431ae527164f8fe9b0e054c7f9157,5e44c4e4be97e93f5d13cdc7bd52b7374635398c,36ea4c00124e0a44cc32c9c2d11ff3f77a2da541,583c8311df06e92afcea0f3c89d085a980e2dd9f,1ba982d80ba74544730f36f3cd46cdbe894a9e6a,d41221966cece5ed8c029a7e941b5d621486ddb1,4f72517b0e7881107a0db3046f0247ea2218039d,8a127b81963d28a06bc438c47dd551f860ee8055,80ed7676093c6ee19c271fd9414d360b6a8d1712,3c08cbd2ebb2ac5bf335bdb38d3fce0b0482673a,a35b256ce3c2aebcc96d054b2a526bb37b4f0bd4,eb15183f8f1272ee3cfde61eeaf048c2280f0e23,145272c6a729e6ac3aaef5c973c2c86bdf0f329a,8e00ac7a927f8ab42cae75fb6c5a54cb2bde8c83,c96a3e5a40040ef43e0a51935a368458763d3424,e4472979707c9e59ef5edc9f6541902310d3d036,b73ff92c29ff18c5cbe81ef75e44ba752392b0d1,bf30b1f2af61a37d8e1215e1af6022ede913dc2d,03264295028ec1baa23189bdc5b3ddf09c16c94d,5627e45ac3b893b7b8f69566738f8f09167fc87a,d0474edbfad324e68daa95e58d73b670d01ffca1,b227b3b6aa81ad319bdfe91a7611b957f0beffdf,7e303218009724e91ed7d3a008f89e8659567072,06d969a8fe228de6a637e832743cf6df518fceb0,c06fa14c5e96ee1114e701cb522bc84e0e1a1a91,4374b673a2b2ebbc7042c062b4f87ab49dd14930,2ac8f67206fdaf6563b97baa9ef4cb2bbdfb8c70,3d2e4a013b9f1bf0612afcf53eaa996d654860ff,de39dc6e141e79bc5eb87616764247867ca11449,84b282ed15ba3999b328c92720d48f668d8493e5,7befe93c8533645ff3b23cddfc7c7eed56b8ed80,e83e010913d19a91ad9ce75adc69815a974f7c0a,479212c2a8bb941d4621a42e640847c58a7a71eb,97abbb745f31c635c5e2b9a9a4edd8ec7c15430c,d8bf84a141b46cde9f0a31294e21053bd8d7cfec,885b0a0a353275739c9b1658a8384fdbf6a9af2b,bad2013536c318ef13b48443c1ed08c60fa8ccad,04c041211cdc102ec44ca098a7e7ddfee27a0ce8,40448470d6384fd4128840151a62be646f1eb88d,3251bce2d463c4ba51fc24c04904a8e3ac886c3b,6e08c112527e45080ff99c6bb1ae4bd2165d292a,f53ac2222d10c1f749a616919f6bcc383f599cec,9bebecefb2ffeffe0c2834b2be10aadb33b559e0,f3fbdfc725b5f1644b7a436c38ce953d0b464a17,feba9d2cb9dcb009f64fb8107febf1af8a9b8b40,042888cd680eb37a4461f7d35220954c0cc59055,38cf22a1846fef0a718386791f029b3ec7f125bf,9bbff9dd617324ebe6487a7481a85cb291985293,fbd7d3c194dd6486cfb0ded10e9a449686d79709,af8f4784a11bb885bfb79b7ba1dc9620238103c4,0b85abad6a951191875d8cb2af84a7da804c30c9,72aebb5d85dce53f02bdca3685fdaeb9a99f55ed,a0f3392d441cf422b31348a90cdcdcb971fc6a69,a40c772427c8dd563184c1922ac73262982a16b2,b5d2df194283d928c2664034bae4e2f872f6d58c,07e0698ed6961ac535a8971e52d61e53f877f58e,9b841a30265fe0652e5e94c338ef82970363f4ca,387455c408f9de0a9870a215e1e6b9497bef1eff,81d88e666fd9bdd3424b526be46626704e0b9c7c,4904788fde58204d5570dbf2268d8580a5d8d4cf,cc50f64aa8598728365f282056035cfc094e7bbd,b433eef1c1ae41112791584346558600d134f7a3,1fe62a02c75c1a1af4df78ec1b269837dee69314,100cf21e5b877d160eefebdbe109b331427aff3f,227008cff233f9424ab37044b2c0d7b2d178c330,4b46a1595c4c8688644549b3cd762819f4ccfac0,d3bef0558d47861d85ebee02bfbbe09d67a60c3c,475e02f6b0f0e7b650b44929b19cf6d5812ad2de,b5981e07909d4d1626d6f0ca359d3124c932cd60,20a1b9578effdc68ea07870f49e4e93289d86e1c,06827d11a7bddc7a02f2804618219b862f63ecdd,687fd988a316c937698c6c550b3c87507a60e361,53065084d622423dd086efdc6e76729f97d463e2,ee4ed5171c34694edac71add10dfab9abb6b003a,bbdd3e827d23c085d6c669914efa2798313b1b52,aedbfd5bef8442e5559c0439ce157e3b8cc37269,769df5afa88c6ce4eda5c675626077a24827181e,27641679e9fc948bc33ac13dbaabdd831954ca29,70add68322e8145ddcff59c2347a40c0f2e9addd,4a4074b7f330d77f296c16abd82cfe026de31f99,f5b48cb2b84d0cdcfaa99efda564a827f18bb49a,3e7ca122fd7cdd5435b5c8bf83b234b3f68bfb89,241f2ba7aa3225724a80421b56075aef7bfb21a0,92a3a06876fc47d55d189f6483b1efc37b1c59bd,b0017f772daa5e7f05094e38e4bec9bc99e5792f,f1532f0cdd5cfc6c40fdc85bc50d22ef2dba699d,5865fdde89b92235cb080637810e178f21bbfc11,2f2698fa5739eba1cdc3bdf8299a754fb98ae871,57e1baefea09dd41ad932047507bfc6401d46405,b82b8b2cc51220537d247d45133838eb868fe213,e0d62420f7020b7e6a88d6f41b27547eb8ac397b,1a0330f912c0aecdac5a394997932e94a618a4aa,bf18ab3679d025b4da88797bb9759f45b1eb00e5,7f384e85ea9ad0fc7f4cdcbf9451dece694ac63f,3ad097a555013fb78f35643d2c8c201435aef8f2,0da91a3b68d0ab6c28c89bd03057704c35ddec35,4aec5c55ff8bd122cd5d8cf093a595de81bbdce8,dc51387cfcd868ea837da2b7d2be87c70bcb8f9a,b24dc73be37f00dc35bb1e41cad90c703c96a13b,25232230d98d47fbb2be4648ce776702089ed13d,6b15ab9b40bd83a70b52d70eb24b426fd54418be,c8c91b47da7a68bfd7b335d664934c302332b06d,f2e9feb8cba3cf504de07c07c5c4791ad0af7ce4,e0522db412e3fce6e5f1e8b965a67c873b2251fe,98b0e857a4e8a54739a10e5016b6ef3b9753af77,8025b2aacf291bf9197171d9ff1f7a693431726a,2106a8ae107fc2df9099b12b23fb89f95d449f27,a94943098d61f48a5508c2ba32996a0e98eb1704,35b06e09dbebf887afb6ba5191451074496571e5,8ec1c52351aba784e90c2cabe8dd3639f233debb,0aa96a17f8cf9c96874c9519c93e9f7723d41adf,62950beb8d9ae79097a7651cc3e1fcbd8d5e31f6,bb04d083026dfd018eeebf5139850c34e6b49b1f,6b0c5a3b409511646984f34989ca7826eb4379cd,960febe9458e4213133bb7751c8ab9c3c0b88bc8,a3fc218ad914c8e1de13ec3d5f5fb4a54597bc8d,fdc460dce69c6ef2caaafaf9628ee94d07d17625,7ceb5a6b8236517d708d7965f4873344c5630969,bb9dea37dc558378dfc6559133171f45c6a3b5b7,28d51dace3fbbf8f0bd71f749e5290685b0c5df2,5f5fa24f351870d57a196a2280ae7a0b668f26c7,e74df2c0e90e5e4ee92a0d45fcc6f5db5958861a,05b614d6042e1852b8bc14fa0fd66adcbc1406ef,05164d24d77b4f05a309cef5375792b08316f1b6,efc4809b7b73febc18cdd8976ff8e9d6d4537ade,93c12bbb6d22a165a407b6184cdb40545f86c683,54a95d899854ad5a0a7b896f99cd8ba68b89d471,df7a37858bdf7c465d6ba96637558695e42e2fe9,cb9d0a8369704bfc94a84371561d30a6b4317767,db1483ae639de19872a023e2af418ac695361500,7a8ff741e0d60d6430be6f8a25bc1bbeb65832a2,90e94269f7d64684ac7dc3fcbee055eea866d370,0d33e877b1642b1bb630415304b8d01de2ce427e,d700649c1748cdec25ce871925d80a1356e3147b,4f30fa5358a7712bbaba7e25d97166d9b4a0f0a0,774228b4c6d5e6f8ec239bc9a3d8f09ca7bfa51b,ae57c74449db1d55abea013eb0274fb9a1f636bf,54567ccc2ec5ca96bf70b0926b56e97659574f4f,2a354150a2193ad32311e675d7452c8059be3bef,db6cf117a225ff973a44972c5fba128b1228a99d,6faa7858155e8311890f14e486f43d5f8cd69835,4790afd48bb04258b01965f601f979f7c71cd472,6535c04c044a9a1ff76410251e43932ebafa6872,69b4784b44ccebceef03b445f420240d07a85062,5cc4b1638d331d9f6bfa9366e26acade4b412202,11b6cb54670ec16f8597851cb010c62c6d3a6578,881af80e8016adc72f7c577bbb88e0aa37c0505f,c1f539ad85e47c5052bf0e123ef7264fbe5d73bd,a962daba86ca951dbfcfc9204b9d4a0e260b34c4,9fc8dbcd054fd82e8fde73c50b63832b6359f476,a2da1049443db9db3e2c06cff58463fe6cddb978,355dadec5d8729f25fe57408f29c75e64ee65623,41ba47a04626704ef2fc49ba03b0be0939879271,cb497ff3ac18bb0832106b624f43708dcb28e034,70f1e65a1fbd882442829cc377be937db4ee1acc,a1e4f67e9d5480de3d725295f562e98f6c45d79e,60e3bdcbbd3f84654d6df895af97740408ba2bc3,52eab6561b244a4c84572a04bf6bf05144b2033b,dc4746b69a3580443310765eba606be998e2da4d,84e2cf153d888b5f3a73bdeab13c323c6405c1b1,8ea2c18f2b69ca3d9f3a8a1033aa6078df745176,5e2febea94ae56db7fd0729e808625f7be1f6a32,2a7594a7ded5123b99791b0f16265833ad35c81a,d8bef16525907af19a253e911c964d630b1737d9,f3bd0b79313c65d41260a7dfec6e041cc5e24674,56d6858f3430e33398976b02f23cc82c25641a4a,7af57e58daa9872f2066d7d521f5c153d7e372db,3ad7450857297ed609c5b568fb55f77dd469d8b9,190dee5fa3b5374f95ae8b3673705802789ed0a7,ed403b6580ed403a814e1c821200f302ffa5805d,45da20f49abafa125ff4f616e8312b89fbd1f139,03f8b53af1526c038be1e0aa6f519a6c73762758,6114f5479d0bc640390c8f073b40eab94103451f,b925070f3842ac0ae2cd816d7dc99233e7a6ddce,67870c17b1b2e718a807229c89ddbb9eccf2cbbc,12d7f3d204a242de56a5a94ea8371bd3f9717504,6bc2d25ea6dd424148786f5e0cddeb42ee072e79,2280cbd563332a1b9f3ada9de77af40efc6c97b0,d254cf2bd17588e5111841b0ca0d349a0f4a6fd2,a3cefc2063d220efdc8a42a66164a5ff0bfd690a,d53e67a4a8ab87434b5704eacea37f98d126db15,c4193c6e4ad3e5f526df5d1e0748abffcfd08bb2,2759abae42100a486dda09e787d5aee13a9ba1f9,d8e760bd13b8a5c9ddd2029f2ddec3fbadc280a2,fa2fafcf1e1eae47296fc8ed1d609225ea381971,b0bb65029d1e3dcf57d8a0a56e4ca7cccbd18db4,624cdb14f819ec4ce5a5c02df0293f317cf9737a,a6feb941e5ff8fde22865f981d912c6d5f48546e,cf032314f935892a8cc5ca7a43bcf1c9011f3242,f675cbc93ee4bf7395befd90303cfdc79265cee2,5226462744f1e3c11fe5477b543a60b18a80e548,71841bce6f67b8e58b26caaa49b5c0b1f7269534,33172a83a4eadeb7084486256c57947567ddbf17,ff38c184f7b5e1e2b9ab88b22464041eade680d2,131e4926b7a31fff3c6bead10bbe6dcd15e32bf9,377dd0a46189c53b9af1f89c7e4e9e1bc7698646,79a242ec3ec8208a9187777cb40d8c269f3cdffb,db69349c601fca02ed236064bd7c20c359cd9707,45ce66540a365d766987c7e2d7a680acadfd82df,3e65ff983dcaba073337d3a15b21dfbee2eee4c7,86b6c0cef9e1d09db327197ba2cd64f404c22988,83420394a2e397ed46136c40081e437d5af9c2b5,f61244c48d22b86a9c6de16fc4805f10d8d4777b,89d2eb8fab09847c42ca1eb32c62e0d4ef7699e6,661fb0c9c01c87410cdf1abda41d78906656c7e5,71a4e3f5bad9e17e7213368de6af803bc3cfc160,735d9a839110590ff1c82ff619cbd7facb34d078,3832b54d4d6f8a45c7283fa42569e59d66ce3d90,53b6258b2465362ccfa3f85a482a9d54425b6d93,a310596a75ce3e0cccf268102f070ce85cf9384b,80d570d77a6f0ff71bea6fddb6519d6bc77f408b,9994ba2cdb0922cc16261cf2a165d9b7a66092dc,10f7c22ac3955b9ec0879367fa76f6c14821f512,19c15bd468dc770e255738fa474956d37b8bad07,2bcd63e545252c308f9d8b51d8f357155639e861,31dac7eb1e2c3683987adf686b0f151925d51b94,b6c1226082e9272a3a5eb37422afc24740e7b75d,1f06856824ecb1896e15059704510455938372ea,41157e7a305acd42d820b0dee0dc6cee228142b9,845fca72fb3736ba07f9f35b138295d77530e500,62e139bfbcbb1c70bd622081932b133d09aa4a62,4f65842c59170271f82f98b5eb3a985f198420a1,2f92ec1b0fa868d2c59270abd6630a3cdf2d02d0,10636cf7f281864685b64efb6b013f57331c4615,3187c92b9b39a2f0663f42d2ec2e1ffa8c45db10,0b10d14e48d1937621edcfebec24a2caa6676184,beb266a7c1a91bea734bebcfcf0768790055e8ce,e45d91d0386a32edde0ed08b57f53ec2cc1de3ea,80287ea5dcec5dc0fe8903fd94a51fcd7252dade,bc71c883eec9865f626a77e668f610f1624be43a,93b0d6b3acb2d3be277ca8c2799badb005686429,6b436a0dc1c32095698fa777ea1365f5bbfc672f,1d049600404981120633155a69a2effa10b26cfb,29cf07169ebaf45dc8eab6c7e55c0039b31dfa5a,b4d173d3519854993014731e8b8c1e73a137379b,7c272bc96e2053ae9960e61769c38696f4f3b854,6658eba6826100e9059186809927f398446e33a4,87266fdb96e7b98dbf4fd2198ed3b8f245726203,efedfb04fc0756603de3763b10110beebed8b9ba,982141d68997d48524ac4f0b9616f06ff5cfbebb,8fb9b82b186fcf137854e60f48f84bef664f10c1,fe71bba6f74ce54fd2581af15db777772d7d7be2,63379962669775afdacb14cda8a40cf9c4c9a043,9540122871676a511867c3d2ba54bf76401c8a91,064c814833c50fe1f3f87771e6e85dd6b1dfa42a,3f28c60b2ccbd4d3965eddfc2e652eb0027b10c9,57132135b269f9cf76870ac08b558fd80c861d49,9773e41c076aec1cb86f4438d37b01a97b852a3a,5d98623c312b7639c84f1d73e5bb3d4b8487fd8a,75965fd2aaa2ee1c5f34a0ea92b0a444be2cfc85,16f001b4ed6a2507861a50f73f5deed8e86bc6ce,c13bf71d3a1e8eebb624e8a113363998d1664263,cc70e908fcd9b309187789fdbc20249ee3eede3b,25d9407086393ee46fd5c981d8deaa9da2c17be6,0d4bfa919943d2053868ac7a48c2757502c5cdec,88bc781f326d51424680a3fa6955632a7883b7e8,8bcd036741fad3864b785cd424405cc7da6150ce,e9c984fdc9fa6d35744038685698ebc5114df676,56a4b2ae7539c2feb5f1a049634f07f2da082494,53d100817e07683df4932f3dffb94873d3c72602,4627678be12a3b25fae317b2f30a4b31a2e80634,ad403802e0a705e215b46cfaf4634bd674f6a3ce,773a012cf8b1f125f6a128481bbe2b531beaa023,55965e964deb71b11758bf7e8abdf698ed7dd26d,1ad8fa191c5df90d9f0388d7c483d57724860040,31d3f3456ca68f29b98ce5650dee94e1127dc805,0431fef427b0ccbc8220cc7d90e03b543fb1e98d,23977d0e561b71060b00060ca4d18cf0791ee77e,2c555d3f34cc96ac8d6f6cca07b69ac79cea57f1,de80253102670072f7a4f7e1fbb64b69cd53dd64,4858db950be1536b0645ac6b183a20196cf01770,10784b87b548683a5fd37819ec490f8272b7c806,0e85b8d81e5d8788c3b29e4979d9dd4c50e57c55,8bcb17d2e99f7dd4bdd81a103dbf839589635c3c,6c2fac139550b0168d254ee4b925ab206ccf359d,040cc81c32c269fdb4a972db04251c4691f5389d,9f6fd35b16cdd19bf5fa3e8abaed17852bc1dbd8,75c6369189b4ae60c08b21178d0798355b8fa281,cd326abd88b3ef686f566e0b1735b53383c627dc,b3f1cc30d4e1d9627ffe73e0394048dad5af651b,c432a075e7c1bca79a63eb2a8f9d9ef5495c0e48,8672c3560a180a36f854458724ab7b40ee8b9d54,e7ee9481ed978b1571fab43fde8da46439e9d503,8e1b54f21160ccfdac07039b05f6a4050114b965,6a612f3c67cc92929c236c69e70b0131726c6808,cb48137d5ab27db5da09ee3940c2cf93fa47fcc6,0a928ca2b7a16fd49b49223bba4cd778207d0fcb,f433a99608baf7ce378478ad212754e9a386d5b5,b572ad1e3f956edc958b0142c0e6d296a9d24c6b,628e21fcc75ddf52ff2ad5c67ee7b4840b6357df,00354024c64400dfaba80873e55fa365d45b1f9f,75199a4d3244bf3f97979024ac15a55728cb0860,0eca91ae405f281e734337024bf499bc2e90c8dc,5ccf73a33230857f217a8e456301c2a0e59d148b,6aa057ff95f0c14a7fcb562020d71bde571c2e87,9eb1e02873e9b56c55ac6b0bd253d5193de15b9c,3df225721c22a5eb7b7b74e774ffe5a0705965d6,16626a9b8fdecf3fa80876a244ff74dd171b06cd,8856608a047f389a40f6d1f409983de139b35850,18e6a973234edce2e46a5c4fd99ab890e8594b31,d5a24430061654ac5319ba1392415e7f3958a475,7908328f012778568c6da95f7081b8c4b9754009,f283f4c4b6183504135a98a3e0d77eb89f391bcf,e45c8fbc3e119e5044bd0143ba253380ec45ecbf,f4bc7cb026b668257dcd5b083282fc6c2f70f2e9,11dca5f8746e7b7d43cd62635497946d309fcb60,f05518d99227ade0b7928592c28a67ff1f0b3bf3,b383b9c38090f9eae7ccc7bd82052141a3eeca60,f2e00c0453b286f77872b716acfc3ed75467b159,37daf894acfcb89582e701a36e1695f772fee3a4,812121b8e36f8588973c7ed4deb44838a5616d61,e176d65e03aee3135bf91691c0a43f0ef7f24b02,c510b94ad8905d4346980c68af1dec143c0f4813,21d75a867ed4659b6796406ea26510f683f3ee42,63bee061f37d09d409aa02d4de122fdd94b538bd,c5dc98d98d8b1d06585b9e23e04418532a6cb3d8,b7df9811bf66d7f8ae855a82572fc8472b206c5b,99facd0219053f660c43b318b0966de40354d76d,155eac83dbf06ca184a49e35577aca1c0f295299,35a456bb612cdf33cf84a92098ce58ee9a298137,a0c48c1e155462c2851b41eb7aa707f310516411,b53521ba1a104bb725b63f5d11c551447b78ea59,d7f3d4f5c6a163f18af993fff9d8e52a2f384aea,7a2d76735fce33b815c9fd674b1c3e3eeb3aebf0,6fac1ecfdbc6d088498b1e7a5556c7041c86bbed,c50607e7c834422c7fd926a345b1badebd1a2675,ea82ea44b4d9e1578d479a5ba5bbd539e15f8d54,a78ebb040a841a14fa0ab8260977f9d2b92623a9,8e4a56526f342b5ebaf36ea2003a614ddb7e4059,bc4cd88aa7d8343dbb031c65d141f4b021a95d0a,bba1b111e213523054d467c3fe477d0722437a2d,e5707c51408626d40bc07c70e337494386343feb,8c2c5f6b0bf96c162bd98eae595f06b5ba990bc9,76c80ad2819c85f71977e584bd1bfb3704ae6fa1,64a13ee391894a1aa8b9c0d40d91783d5804377d,3118343d4ed0c932838acb0f733cf67435653b79,ff6400238181b6d4ceda00c1eec79da6877bb171,d815c27f7652dce234403fd95b55278a0423b5b6,adece42b0228e45f0fd0b131db25080b9a926611,5dd2debd744ac8d57570e05070ad742bd9c82af2,82dc4a18c2118323e4b43cc36a77114d0427f5e6,0c3e4e0d3f697fa4113555f440a342e1aecb88ef,eda95607e97ee903c627460456986be9024fb384,6fdbd4f12282791d95d636d427e65b383f46febd,d6819f7cc25aa649682215eeab9d7040b5438560,70822f11d1a290a74f91fa688d73cf76650e3b4b,d7969ac934e752e7a7b258fa5a5af9a563c40a13,bc7a3969c039f179d5a73c8aff19cfe19d511503,c2efa4a80ff5bdc422999e3cba6843935aded1a0,af598460ac9990c2a02823b3cfbdaf9f5429ad5e,171528a88cca65f5b192be643c2425458d1edfbb,81aea944160608838cb2d7cdfb0d9b6893a655d9,3449a42bbaeed0ff5b0d07998169ff2896bf45c7,5bac43f7b775c9c876af614e745f80ccb495f01f,16c46bdb4330287fa64cbb2b71014c76852e5c8b,749e5b3918721a1143905e1482916d8674128a5e,04e3fe1d2cfd176784f164413010d87a01f1e5c2,3fe15786c11fdcf1808aacc05b8b15d61f7ce23e,258371be0c31e424ad2392313f15fd126830996c,91fa2dae7647558bc68ded9c3e7eb5a1c1846404,d49d45eba50fae24715a78df93bf5d951c82c6ac,f36ff599a7670c025010ed7d86ea0fbda7e26bee,34cd3da6f240bdd9a0e0844923715ad1fb7a6cc4,ebd133cf778dbee92a1fd175443253ba2bebadf3,8d719d4ea9dd0996de476e2c4a9728b1f367fe2b,db4130171a9fdd567b86b73b8538d3d9d802e60a,6c97f898c82df5dd9815aaf1bbbc0fc4f4ed6d00,6880e8030b8d26438500842959756b441271ed48,578127901a96327d398a42ee524d9dedcea64dff,4060b8ee3347833490dbb2c065f14c1bd592b527,fbf2ef51728b2cb8459b1edab75b023ac67f8d8c,de62c65578ee43d0f038db757b18954b54c49dbc,11a7aff1b5c38a9cdf056714a20c8c7478925c08,88a02cecca5cde95090603e19624c285e484c23f,3bddc5c5321e492835413bf4e8c9b3caafe4fb68,3d64f608ecf0153c2080374810711428d689cded,fa10cfda08c3e12c5c187c1880f52f89284eb0e6,15e3ba0f7bbf0adec8ca93d6acaf5f488582c949,168a1dfebdd4a10ba593311856d3addcb32696ff,0a2a72eaf5832da87b80fa41008e0b28182d928b,64443cc75f7e10ba91788c53befb0411a8c122a4,68302e213747700ca38cef546f05d0f15a3e99b4,c6c087c9f8672bc386d93994e49e68dc97087896,f681764a1b3fb9daeac57266418a874794d22809,8267561e52a02bf9faf70a24484aac105cdcc9d0,b7fb9eea768a6daac93d1835726c737153f45ef4,348e020e1df6c0b3a5b8c38b220746617320fb43,05b791a62c03a35bdfbf156f795ff00edc61e4a1,6617b0bb81b7c7da327acf3be2bef9b8cb77337a,516f366cc27fa2654cf4017fa151cc07ad902a6d,7c3390d0a7cf72afe3ffb3e3748f993e85cce48b,2695794ad01132486447e489b7e179edb357b974,89109b855537050f5b9d125a88d26ca2c1d12f78,27b015e5dfdb67f8530e7c110d36aa55d0e42cb1,c72f418ec98b259673c695ed60fa7290708a1d55,b61eeaf0529f070ba19db904821b517a9e5528dc,5e383ef974541804382a639b79e3efbf6b03d2b2,3b44781f9514988a31e2748416b1cb7015e2767a,ecd3c598b98212cbd47cd415819b62614496839e,4ce6a6e423700c72b99d28c7419aacc1dfe9e1ab,2fe2c2bbbffcbeb968e523dd332ad087827b3f92,163624a9596298bf80bb41360fcd246a886a0688,4ebfabb194c88fa10db51d6f2db6282a357ae15d,cc452f8dc0d864c50279dfa61d56e57e5e40a740,71a95b98f37d268eeafd2fb653ee1b2158416eaf,434398203b50c8bc4a71b116ebfa99ef6d0de8a2,055d5b48cc618b41b2a2d41d95e83fcfa232d838,2d667edb08ac241e857c9922d05f13a00c91fdc3,c485f5bed92b784a4dd915c6fe5d7b95a9990618,390a4358394c91b08ac7903d69689a62cc8c0fc8,dbe962a24475a2d288e1e1ff681c21ccd05b5cbc,a51b719cb265ec63f9699f74b498efc0d27c1920,6ee55e92440c2eb8a25bffce9fe0b18e1d49b67c,08fb5dd3465bf636093b056b059c8ce2deda42df,9c384099633c80249316af35922c99a70cbbc5be,c0aa76eb16031973f3e897ea535a0b38bfb7f11f,7a5d7677e6ae10318907876c58727d68bdd72bac,c5352b0e077ad1bebe6f3536e7fd1efe2fef5cfa,7a56d2484badfbceff130dab0c128f1a581827c0,d555d56324cfa620bba111242931fbb7337bfe4e,1500916bf165064d370c3583a19350010a88e2a1,99894b82ae77290ff43d84eeffe638c3ed55d2d9,962d7a6ad830b8a6feca752ddf39f4d705bd563e,a9a3ad4922a45a76c8c6b1b76c011d72736e0c30,170b62aeae48d2cff474edf0b275b0f2bb3a5f88,b26691806891840645059fa5e3a6c86f167f32cb,a2d63caeac9b1b640ea2d2004e4312393ec6efcc,2695207be60528c10f0d03ac097c0af73a2ab292,0de528effcfa595ff9f9c5cb3d0c7eaf18392554,460f9f5b0f30b4ddd5d568ea4c381779e9dcf6f3,266ebf464983940a1e36f2bf15737d258d471f24,1fba41622f64af497b9da81fe6aa7de069da32c4,bebc7a8a524e19739f6128437bab06212a35e75b,18c6426d1fbb60f0a52a5a7a021690f62d821955,683d902dc66c21b2353292880a00e0e149e548d4,31af406eb992beebcb8c0f6908df8031ef179aeb,837b12606b3c857c1d8df4b05424c607f3580230,7a0174fa338294b3ff20859ad3b776b7f0e2970b,2303e85c5ba9e2aaa72b0e3ea88d589e312df104,1d5ce0051975f0aca46258ba1efe714768589b2d,43ddc91f9e0b77cbefdda850b7aadf3261505e04,e3496145d2ee1d147bcf2af176b99c0ad12d43b9,0ae4ec44259ea0e3feec3e76671420438547fdae,bf1165fac897d7d51fd6645a0eb8dfdd4eb4165c,6dc22695d51eb464df4bb27765b1af18ca757b9e,f028a548b933c73c85c1f15a4900fe93fc1c4908,546a1c7d5d40f45e7ce2331255c1763a5b04579e,e66d8cd80c0fd29925050aec9ff96095617dd076,b06da5f32ec572c88f7ec5245a4b573c73ae8c22,73db5970c0248433d25be914308f76b03fdef175,b782a0a58ad5886604e1e80a051727dc7fe101f3,76cc89cddd2cbda42518de8e304e92e3f341a744,0ee48ab3d96445a280852a1fd04206efb883baa9,eb4937418e700af5f8518f66e3d29bfc4d110798,6d40006563f96442c039b9541355e3c18390ddab,0afed6a711c208fee64328cb852712e57036af5d,8e3e3f35b903be1f73ae866f03b9c0da8c097db5,0b60c1fa734001f087c9865c49fdeaebae574557,8d99c0554f4dcd620489eefd7963bce4d0a89dab,4ca9bd3382d1e6b5e768f984b4ab804d6f0259bd,3dada3ae68d58491197deb8a3c1cc3f5504a48f8,791e14cb9c8ac13fe4506470f2b8921c3cc542da,77be0d83d64f51553a915915ee6d56dafb6e75ed,5578e731d97d974902d923da646650228a2a1446,fb4b3552a497ea082cec27c69512e7f91dbca619,4346216ffbed9a9adef2b90589436de543167c4c,a8398651d0b75fe9f161496b266b43d6382399b8,7545170df8047ea6127660c1750e1d0b59044e49,b1e2ae4c902691bbce02a90b76c4bee1c6e58455,db7540e045fc07ef39d37163a263615c6e580efe,87eddc2495cdeec9b28246ea08708540c365f34e,740ab8145ac6c004d2b10ea46ea0f5c2a0a9f71f,446f42ea3685691ee10cf5054a055e8f1685077f,ad8a8978a5bcc1cc177bc2fabcc92cf70e861906,6a90102ca121229db1e172fd4f84481117a71dbc,0361086ee17ecf823c5e5c59dbc8b27a77097c94,40ca0af450471fa0b0051200f93f1a30730ee380,3d921068b225994b20a31eef703d889cdabb05b4,0a0ebbf02c08e303eacddc45854f8cd6e0e0f9d9,6a8f225173324e4bf593b3ec2bd60015e80d3f08,c6396de2d9100032e58a39e6138787a2c133257e,ccdddfe067274bfa3612d9e866c2f86c2a6c87a7,6e552cf090053ecbb1ab4251528754373d0dd511,c57a14611951a6587f8eaba95b5b6b378997385a,405bbf6bc240b726f6088a9782a2dda9a6c1c8f6,9b4f29d41a71f58e2a0a31d03f1bb8117a9e8d60,2325c61a9280d310818f99dea19853718c613557,e6e6c2d91e0e8b6549b5eda8973e5f3c150a7774,ab40eadf2da890903f4c5d74d0cb6f5459a5f995,7b80edbfe28a488e1bbbe69741ff9f8432a676b8
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
fix : invalid url when using dynamic ranges ( ivy - 885 ),improvement : parse license information in poms ( ivy - 892 ),"improvement : write home page , description and license info in xmlmoduledescriptorwriter . this is useful to be sure we don't lose information parsed in poms , license information being especially useful ( related to ivy - 892 )",fix : ivy ibiblio resolver chokes on variables while checking descriptor consistency ( ivy - 818 ),fix style,"merged changes from 2 . 0 . x branch back into trunk ( ivy - 910 , ivy - 909 , ivy - 907 , ivy - 911 )","fix : stackoverflow when using ivy : settings with ""ivy . instance"" as id ( ivy - 924 )","maven accepts illegal xml for its pom's , ivy not ( ivy - 921 )",fix : can't download files containing space or + in their names by http ( ivy - 923 ),fix style,merged all changes from trunk into 2 . 0 . x branch .,fix : listing of url's under a given url does not handle fully specified url's ( ivy - 959 ) ( thanks to randy nott ),"fixed a problem with the regexp used for listing the possible values of a token , this is causing problems in combination with for instance the ivy : buildnumber task ( ivy - 970 )","use exact matcher for organisation , module and branch to avoid unnecessary listing ( and support ibiblio resolver which doesn't list organisations / modules )",fix : dependencies don't inherit exclusions from dependencymanagement ( ivy - 974 ) ( thanks to john gibson ),fix : pommoduledescriptorbuilder does not resolve ejb type dependencies to jar extension ( ivy - 1058 ) ( thanks to andrey lomakin ),fix : transitive dependencies and conflict management ( ivy - 1083 ),ivy - 983 : - make the 'callers' aggregated by the requested conf more than the conf currently resolve in the hierarchy of confs,improvement : added support for ntlm authentication ( ivy - 1094 ) ( thanks to mathieu anquetin ),avoid npe if pubdate is null for some reason . . .,fix : [ originalname ] not expanded during retrieve when module descriptor contains extra attributes ( ivy - 1096 ),"fix : ivy : resolve ignores branch in ""dynamic"" resolve mode ( ivy - 1087 ) ( thanks to aleksey zhukov )",simplified the code a bit ( the inputstream will also be closed in the disconnect ( ) method ),fix : credentials were not set properly for urls that require authentication when using httpclient .,fix : fixed name snapshots are not updated even if they are marked as changing and the publication date is changed in repo ( ivy - 938 ),fix : resolveengine . getdependencies does not work using extra attributes ( ivy - 1115 ),improvement : ivy doesn't support maven 2 . 0 . 9 'import' scope ( ivy - 807 ),fix : ivy . settings . dir space escaping problem ( ivy - 1162 ),fix : authentication won't work in some situations ( ivy - 1168 ) ( thanks to sven walter ),new : support ivy . xml parent mechanism ( ivy - 742 ) ( thanks to jason trump and jean - louis boudart ),fix : latestversionmatcher . needmoduledescriptor ( ) does not honor custom statuses ( ivy - 1170 ) ( thanks to carl quinn ),improvement : added support for 'gzip' http content - encoding ( ivy - 1194 ),"don't check content length if content encoding was ""gzip"" ( ivy - 1194 )",improvement : added support for 'deflate' http content - encoding ( ivy - 1194 ),we don't need to pass a url if we have a resource available,"full exclusion and exclusion parts are reported as checkstyle error , and i don't see the purpose of all final used for local variable",fix : resolved ivy properties written to cache during ivy : resolve incorrectly represents forced revisions ( ivy - 1159 ),fix : can not use a v [ revision ] in an artifact pattern of a filesystem resolver ( ivy - 1238 ),improvement : ivy : retrieve can now convert 'dotted' - organisation names into a directory tree .,fix : valid path does not work for filesystem resolver ( ivy - 1268 ),[ ivy - 1299 ] ivy does not apply overridden properties to parent dependency versions specified using properties,[ ivy - 1301 ] ivy does not apply overridden properties to parent dependency versions specified using dependencymanagement properties,fix : infinite loop in latest - compatible conflict manager ( ivy - 1233 ) ( thanks to payam hekmat ),"improvement of the resolve process of an osgi dependency : - no more extra attribute , the kind of dependency is in the organisation name - while resolving transitive dependencies , make ivy aware of the packages by making them real module rather then tricking it by immediately trying to find an implementation fitting the requirement",ivy - 1060 : take into account the provided encoding of the page ( thanks to robin fernandes ),- fix : unnecessary warning when parent ivy . xml is not found ( ivy - 1346 ) - fix : stackoverflowerror when using < extends > and . . / ivy . xml is not the parent ivy . xml ( ivy - 1437 ),fix : memory leak and infinite loop in moduleid . java ( ivy - 1362 ),fix : memory leak and infinite loop in moduleid . java ( ivy - 1362 ) ( merged from trunk ),fix : maven 'orbit' and 'pear' packaging is now supported ( ivy - 899 ),fix : maven 'orbit' and 'pear' packaging is now supported ( ivy - 899 ) ( merged from trunk ),"when catching an exception , and the stacktrace might be miningful ( actually hightly valuable for a npe ) , log the stack trace in debug .",attempt to fix problem with finding parent ivy . xml on unix .,add support for retrieve of uncompressed artifacts,"when retrieving , the uncompressed artifact should take the place of the real artifact",re - implemented ivy - 1281 because current implementation had too much issues .,implement ivydependencytree task : display a dependency tree on the console,use stringbuffer in place of stringbuilder to be 1 . 4 compatible,improvement : optional < include > ivysettings directives ( ivy - 1392 ) ( thanks to yanus poluektovich ),ivy - 1421 : ssh agent support for ssh and sftp transports,"add support for ""packed"" artifacts : . pack . gz bundles in an osgi p2 repository for instance",add missing import on sshcache,improvement : ivy : makepom will generate an exclusion when transitive = false on a dependency ( ivy - 1470 ),ivy - 1141 : dependencies failed using branch attribute ( and extra attributes ) thanks to stephen haberman,fix nullpointerexception in dependencytree with no dependencies ( ivy - 1539 ),"ivy - 1522 fix fileutil . normalize to not base its normalization logic on "" : "" character",use static import rather than import of nested class,ivy - 309 refactor all those split - trim - join and unwrap some logic,reverting r1062831 because the same problem can be resolved using the new [ orgpath ] token .,ivy - 1343 : fix for a nullpointerexeption in abstractosgiresolver ( thanks to thomas kurpick ),added static getdefaultinstance ( task ) method for backwards compatibility reasons .,missing import,added getconfiguredivyinstance ( task ) method for backwards compatibility reasons .,ivy - 1300 : delivered ivy descriptor inconsistent with resolve report / retrieve and other post - resolve actions ( thanks to ed burcher ),the updatesite resolver was downloading eclipse features instead of eclipse bundle / plugin,thanks to mitch gitman and jean - louis boudart : - fix : ivy : buildlist task confused by extends feature using two parents ( ivy - 1363 ) - fix : ivy . xml extends feature complains about windows filesystem path ( ivy - 1359 ) - fix : buildlist task chokes on absolute path to parent ivy module ( ivy - 1364 ),add support for source bundles from p2 repositories,add support for source uri from obr repositories,"do not use useful ant class , juste bare metal java","fix tests : call ""finish"" when the entire p2 repository has been parsed",use the default status rather than an hard coded status,make the error handling be less destructive : just log verbose and ignore the weird bundle,ivy - 1363 : remove the incorrect error output and remove useless resolver map ( thanks to mitch gitman ),ivy - 1367 : support conditional setting of a property,"implementation of a task which create an ivy . xml with fixed non transitive dependencies not sure how usefull it will be and how clean it is , so the doc is not linked into the toc , and no reference in the change . txt file",log only it is actually a duplicate,support for optional dependencies in a p2 repository,ivy - 1353 : fix the name of the 'ignore' circular dependency strategy ( thanks to carl quinn ),ivy - 1344 : fix setting the branch attribute ( thanks to ales nosek ),"ivy - 1288 : exposing some parent metadata ( organisation , module , revision , branch ) as properties ( thanks to jean - louis boudart )",ivy - 1288 : fix npe when there is no branch,ivy - 1252 : symlinkmass feature based on symlink feature of ivy : retrieve ( thanks to gene smith ),ivy - 1252 : use java 1 . 4 api,ivy - 1252 : fix unit tests,do actual symlink testing on mac os x,ivy - 1252 : fix the options copy,avoid error message being printed when the resolver didn't exist .,add api 'documentation',log a bit more in a junit test to see what's going wrong on unix . . .,fix : memory leak and infinite loop in moduleid . java ( ivy - 1362 ) ( 2nd attempt ),fix : maven 'hk2 - jar' packaging is now supported ( ivy - 1357 ),added extra logging,don't run the testretrievewithsymlinksmass test on windows . . .,fix : simpledateformat is not thread safe ( ivy - 1373 ),add support for 'compressed' artifacts : - add 'compression' attribute to indicate artifact which should be used uncompressed - make the cache downloader uncompress data if requested - path to the uncompressed data is referenced in the artifact download report this can be useful for osgi bundle which contains an inner classpath : they should be uncompressed before being used . this could also be useful for managing multiple little files .,add support of uncompress artifacts to the ant tasks,add support for bundle with inner classpath,fix compilation,fix sync retrieve of uncompressed artifacts,test and fix the detection of the 'zipped' bundles,parse the bundle - classpath in an osgi manifest,make ivycachepath understand osgi classpaths with their bundle - classpath header,use the word 'uncompress' every where,fix osgi manifest parsing,fix the buggy use to file . tourl ( ),fix encoding of e with acute,"fix tests : don't urlify the pattern , only the root",properly build the url pattern,"fix tests : we need the url of the parent dir , not the url of the ivysettings . . .",fix tests : properly set the ivy settings dir url,try to be a little more tolerent on the file name,"fixing tests : when trying to convert an url to a file , try first new file ( new uri ( url . toexternalform ( ) ) ) , then new file ( url . getpath ( ) )",fix : ivy descriptors are merged incorrectly when there is an < exclude > element ( ivy - 1356 ),reverting some unwanted changes . . .,fix global exclude rule in root ivy files,"do not copy the configuration as is , the configurations are already ""extended""",fix test on windows : fix file descriptor leak while unziping,fix : resolve does not deliver all dependent artifacts ( ivy - 1366 ) ( thanks to wolfgang frank ),fix npe : some server seems to not return any content type,fixed typo in resolutioncachemanager#getresolvedmoduledescriptor ( ) ( thanks to mitch gitman ),add test to show that ibiblioresolver can resolve latest . integration to a snapshot when the snapshot was deployed as uniqueversion false,only try to find a unique snapshot version when we have a version ending with 'snapshot' .,attempt to fix ivy - 1378 by converting all systemids to uri's according to rfc 2396 .,ivy - 1391 - ivypublish fails when using extend tags with no explicit location attribute,properly handle evicted nodes,fix : maven2 : resolve failure when parent has < dependencymanagement > with dependency in 'import' scope ( ivy - 1376 ),ivy - 1388 - add a shutdownhook to delete any lock which might not have been released,fix : ivy generates wrong revision in url for maven snapshots ( ivy - 1396 ),improved performance by not checking if the resource exist when listing the availabe ibiblio revisions using maven metadata .,add '2 . 3' as allowed version in ivy . xml files .,fix : nullpointerexception when using httpclient and server doesn't return content - type header ( ivy - 1400 ) ( thanks to frederic riviere ),don't print a new line after the 'transitive' attribute when merging configurations .,don't write empty inherited descriptors . . .,fix : parsing publication date in ant tasks not thread - safe ( ivy - 1412 ),fix : ssh resolver doesn't work with java 7 ( ivy - 1408 ) ( thanks to mykhailo delegan ),attempt to improve http upload speed ( ivy - 1197 ),expose an api about loading xml file without their dtd ( cf ivyde - 329 ) ( thanks to stephen haberman ),first draft of dependency update checker task extract ant test listener as a reusable class for test to check log output,fix java 1 . 4 compatibility,add showtransitive attribute on dependencyupdatechecker task,performance optimisation around the osgi resolver : - log only if a debug level is set - do not retry to load a failing repo - compute versions once - convert the bundle info into module descriptors on demand,- fix the module set gathering - fix the tests on the online repos,- improvement : new lockstrategy available based on nio filelocks ( ivy - 1424 ) - fix : nio filelocker released locks too early ( ivy - 1424 ) ( thanks to charles duffy ),- improve the fixdeps task to handle a multi project environment - add tests and documentation of the task,fix test of fixdeps,add more context in the log about errors when parsing osgi versions,"- make the buildobr task a post resolve task , so that it can work with set of resolved artifacts - document how to manage an osgi target platform , with samples",ivy - 1438 : - fix the parsing of header values with space,ivy - 1431 : also copy original metadata artifact ( e . g . pom ) on ivy : install ( thanks to erwin tratar ),ivy - 1454 handle multi - threading ( as opposed to only multi - process ) case in locking,"better support for ""bundle - requiredexecutionenvironment"" from an osgi manifest . mf",add tostring ( ) methods for easier debug,initialize with the default environment profile provider,some osgi environment seems to have been renamed : let's support both namings,"when inheriting a module descriptor , also merge the exclude rules = > used to handle osgi manfiest and their excecution environment",move non - root messagelogger instances into a thread - local stack logger context is inherently thread - local .,make public ivysettings methods either synchronized or final this isn't necessarily enough to make ivysettings thread - safe - - there are too many order - of - operations assumptions in play to have confidence there - - but it's better than making no effort at all .,osgi : new names for cdc profiles too,avoid copy with url resolvers configured with a 'file : / ' url if useorigin = true,"ivy - 1455 prevent incorrect ivy mediators from being applied during conflict resolution . prior to this , the mediators to be applied depended on the location where a conflict was detected , rather than the declaration location .","document that threading is unsupported , and disable test covering same",ivy - 1423 : fix revision mapping across namespaces,embrace java 5,new osgi resolver 'osgi - agg' : a chain resolver which better handle osgi dependencies,fix a npe when loading a composite p2 repository with no children,only try to load once a repository which fails to load,add logs about the downloaded repository metadata,embrace java 5,fix computation of the extension of unpacked artifacts,embrace java 5,add support for source artifacts in buildobr task,fix ivy - 1457 xmlmoduledescriptorwritter doesn't support fully extra infos elements moduledescriptor . getextrainfo ( ) is now deprecated as name of the tag was used as key . tag name can't be used as key as extra info elements can be non unique .,fix java 1 . 5 compatibility issue ( use stack instead of dequeue ),apply organize import on whole project,add missing @ deprecated methods,remove unnecessary cast,add missing brackets in if statements,add a new method on defaultrepositorycachemanager and defaultresolutioncachemanager to easily changeon subclass the moduledescriptorparser used,print the stack trace of unexpected exception,making the user - agent http header configurable by system property user . agent patch supplied by tony likhite,2 . 4 is also allowed as version in ivy . xml files,fixed testcases on windows .,add support for packed jar within an osgi bundle,fix : impossible to get artifacts when data has not been loaded ( ivy - 1399 ) ( thanks to david turner ),mprovement : modulerules . getrule is o ( n ) leading to resolution slowness ( ivy - 1465 ) ( thanks to zhong wang aka kewpie ),"when parsing an osgi manifest , add its entries in the extra infos of the module descriptor","fix : regression introduced by ivy - 1457 , dependency management wasn't properly handled introducing lots of resolution failures","fix broken unit test , force publication date on testextrainfoswithnestedelement as pomparsing can generate a publication date based on file modification date","make getextrainfos and getextrainfo work on the same data , with the explicit bias on getting the data out on the deprecated mathod",ivy - 1471 : remove the catch of the exception which makes the class not load if the optional jsch - agent jar is missing,fix : failed to resolve dynamic revisions in some cases for url repositories ( ivy - 1472 ),fix ivy - 1465 ( performance issue from trunk ),getmoduledescriptorparser now takes a file as argument . currently ivy use xmlmoduledescriptorparser in defaultresolutioncachemanager and defaultrepositorycachemanager by default like in previous versions,mechanically replace uris so tls is used by default for maven central,"minor change in pommoduledescriptor , we expect to set extrainfo if key doesn't exist",ivyde - 372 : fix classcastexception : system properties may not be strings,ivy - 1452 : nullpointerexception when accessing charset to invalid url ( thanks to frédéric riviere ),ivy - 1493 : can't resolve wildcard dependencies when remote artifact server does not set content - type header ( thanks to andrew bernhagen ),add sshconfig property to ssh resolver,ivy - 1474 : ivy bintray resolver ( thanks to evgeny goldin ),use java 5 constructs,a workspace resolver for ant . the code is inspired from ivyde’s one . work in progress .,avoid an npe on malformed p2 repository,make the latest - osgi take also into account the implementation when resolving requirements,use java 5 constructs,optimization : limit the revision numbers scanned if revision prefix is specified,fix bug introduced in 6d2e199,use xmlunit to abstract the order of the xml elements,get into account the order of the defined mapping for ivy : makepom,"when fixing a module descriptor , copy all the useful info",use java 5 constructs,"in ivy : makepom , if no description , use the one in the source ivy . xml",make fixdeps correctly handles transitive dependencies whose revision declaration have to be ‘kept’,fix the unit tests : the order doesn’t matter,ant workspace resolver : fix fileset injection,ant workspace resolver : avoid a npe on not found resolver,ant workspace resolver : handle properly when the cache contains the wrong resolver name,we can use java5 methods now : ),"ivy - 1529 add ivy . maven . sources . lookup and ivy . maven . javadoc . lookup variables to control the lookup of the additional artifacts . defaults to true , for backward compatibility",ivy - 1526 use parent pom's license ( if any ) if the child pom doesn't explicitly have licenses of its own,ivy - 1430 : dynamic revisions are not cached per resolver thanks to stephen haberman,java 5 typing,ivy - 1515 : usecacheonly should allow lookup of changing dependencies in cache thanks to ilya,ivy - 1521 : update bouncycastle to 1 . 52 thanks to michal srb,seems there is one last maven 1 repo available,"ivy - 1545 : added tracking for a cycle in parent - pom ancestry , throw a circulardependencyexception if found . added tests for cycles in parent ancestry and references - self as parent . this closes #66 pull request at github / apache / ant - ivy repo",fix : checkifchanged is not settable attribute for checkdepsupdate ant task ( ivy - 1549 ),revert optimize imports by intellij,made the maven 'test' configuration public so we can use the test - jar as dependency ( ivy - 1444 ),reverted import optimization by intellij,"ivy - 1531 fix translation of * for groupid and artifactid , in pom . xml exclusion , for implying transitive = false in ivy",throw an illegalstateexception when retrieving the resolutioncacheroot on the defaultresolutioncachemanager if the basedir ( or ivysettings ) is not set ( ivy - 1482 ),address failing tests,[ ivy - 1558 ] support dependencies in active profiles,small cleanups,ivy - 1478 fix retrieveengine to take into account the correct extension while dealing with unpacked artifacts,"ivy - 1448 use the descriptor url to construct an uri , in osgimanifestparser , instead of using the descriptor resource's name",ivy - 1554 add support for sha - 256 sha - 512 and sha - 384 checksum algorithms if the underlying java runtime supports it,"ivy - 1495 delay the processing of configured cache ttls , until the ivysettings object is usable",fix transient test failures - don't share / update the mockmessagelogger between test methods,use the specified timeout for connections in basicurlhandler,"ivy - 1555 don't error out if an ""optional"" file included in ivy settings xml isn't available","ivy - 1540 fix infinite loop in dependencytree , caused to due circular dependencies ( coming in via maven module descriptors )",fail ( ) means an expected exception or an assertion,a few loose bits in junit 4 migration,"ivy - 1528 don't ignore the ""classifier"" when creating pom module descriptor from ivy module descriptor , in makepom task",make java 8 doclint happy ; adjust javadoc ant target ; remove connection to svn from build . xml,more loose bits…,bc - bridge : supply 'old' classes / fields / methods for bc reason while correcting spelling,extract method,ivy - 1475 throw an error if a common base directory cannot be determined for cachefileset task,fix regression in tutorials,"remove main ( ) in tests , optimise target dependencies in build . xml and address diverse checkstyle warnings",generics and other fixes in tests and tutorials,more foreach loops,more generics…,ivy - 1561 take into account environment variable and system properties while evaluating property references in maven pom . xml,- rename some derived variables according to their sources - javadoc improvement - more tests,complete generification of examples ; update example dependencies ; use java 7 syntax in test ; fix regression in moduleidtest,untabify,java 7 diamonds in tests,more java 7 syntax in tests and other optimisations,more java 7 diamonds,diamont operator,generics + foreach loops and java 7 in util ( except filter ),generics + foreach loops and java 7 syntax in ant and tools packages,"ivy - 1557 pass along the requesting url and type to the underlying authenticator , when ivyauthenticator can't handle the authentication request",ivy - 1522 don't randomly strip off the path's starting character,generics and java 7 syntax in osgi package,generics and java 7 syntax in plugins package this closes github . com / apache / ant - ivy pr #48,properly release the file descriptors and avoid duplicate code,"ivy - 1562 fix potential double encoding of ""location"" value of ""extends"" element in the ivy descriptor",revert 4b6e0bd179c5f728761c953249b6dda4d33fe18a since it introduces failures on windows ( needs investigation ) this reverts commit 4b6e0bd179c5f728761c953249b6dda4d33fe18a .,"fix some string comparisons with = = also fix moduledescriptormemorycachetest to have it use a settings variable , while resolving a module descriptor in cache , before changing that variable this closes #51 pr at github / apache / ant - ivy",ivy - 735 support timeouts on resolvers this closes #54 pull request at github / apache / ant - ivy,ivy - 1562 add a test case to verify the parsing of the location attribute when the value contains an absolute path,fix : local conflict manager didn't handle deeper conflicts in transitive dependencies ( ivy - 1404 ),an asciidoctor macro to create links to jira,code cleanup / refactoring - checkstyle + not using deprecated methods + fix unchecked casts,refactor system . getproperty ( ) and loops,ivy - 1336 add a testcase to make sure that the http handler ( backed by the httpclient library ) doesn't end in a loop while dealing with 401 errors from the server,ivy - 1336 use our own implementation of authfilter in the test case,follow through on deprecation,"ivy - 1355 update the help text of ivy command line for the ""types"" argument",ivy - 1498 fix potential ivy cache corruption during retrieve task when symlink options come into play,ivy - 1498 make the newly added test method robust by setting overwrite = always as a retrieve option,use java standard api for symlink handling and deprecate symlinkinmass option on retrieve task,ivy - 735 fix accidental recursion calls,"ivy - 1447 add ""overwritemode"" option to ivy command line for retrieve task",fix stackoverflow,revert 'optimize imports' done by intellij,refactoring and suppressed warnings fixes,follow up on deprecations this closes #53 pr at github / apache / ant - ivy,ivy - 1566 - store external form of url in cached files this closes #59 pull request at github / apache / ant - ivy repo,"inline variables ; adjust exceptions , annotations , and formatting",add a target to generate javadoc for test cases ; fix javadoc for doclint,refactor aslist ( ) in test cases,more aslist ( ) refactoring and code cleanup,refactor iterators,use collections instead of arrays ; optimise their use,refactor and fix test,ivy - 1476 better support for maven timestamped snapshot dependencies in ivy,make httpclienthandler public again to prevent backward compatible problems for upcoming release ( see https : / / issues . apache . org / jira / browse / camel - 11727 ),upgrade to apache commons vfs version 2 ( and watch vfs - 360 ),ivy - 1420 attributes on configurations / dependencies not inherited by extend / include,changed contents of repo . jfrog . org broke a test ; correct obsolete url to ivy file schema,"ivy - 1420 , take two : defaultconf is a mapping , too ; add test cases for related issues ivy - 1315 and ivy - 1419",checkstyle : modifiers in interfaces,check spelling,no need to synchronise a concurrent map,revert previous change,findbugs : iterate entry sets,findbugs : make currentlockholders final,findbugs : use native line breaks,findbugs : deprecate static dateformat,refactor append ( ),stringbuffer - > stringbuilder,entry - > map . entry,more uses of isnullorempty / isempty,checkstyle,"checkstyle , continued",ivy - 511 coding conventions,new url for maven central,"revert previous change , see http : / / central . sonatype . org / pages / consumers . html",do not use try - catch - fail to re - throw exceptions in tests,"chop extraneous throws , fix imports and javadoc",keep test parts as private as possible,use expected exception and try - finally for post - mortem ( until junit 5 ; - ),"do not fail , assert",showcase of parameterised tests with introspection : - ) ( requires hamcrest - library where matchers dwell ),refactor tests with hardcoded maven central url,simplify set construction,tersify logic ; - >,use switch rather than a chain of if’s,tidy up the code,rediscovered a couple of tests : - ),"another fail ( ) that should be an expected exception ; import assertions statically , too",tidy up the code,tidy up code more,resolve current ivy . xml from cli ( by specifying “ - properties version . properties” ),ivy - 1573 do not skip versions with url encoded characters,ivy - 1282 add missing trim ( ),ivy - 1569 avoid reflection warnings ( or worse ) in java 9 +,use java . specification . version rather than java . version,ivy - 735 don't force existing implementations of urlhandler to understand timeout constraints feature which was recently introduced,ivy - 735 missed out changes in previous commit,"math - 949 increment iteration counter . by default , the maximum number of iterations is ""integer . max value"" .",improved speed of several fastmath methods . double . doubletolongbits replaced with double . doubletorawlongbits at several places . jira : math - 953,fixed wrong array dimensions in secondary equations handling . jira : math - 961,[ math - 898 ] add implementation of fuzzy k - means clusterer .,[ math - 898 ] finish fuzzykmeans clustering algorithm .,hard - coded number .,use binary search for scanning the table of interpolation intervals .,"math - 985 fixed wrong indexing . unit tests that now fail set to "" @ ignore"" .",fix mistake in code introduced in r1488025 .,math - 989 added method to check whether a point is within the interpolation range .,"math - 1008 created package ""o . a . c . m . fitting . leastsquares"" to contain a modified version of the contents of ( to - be - deprecated ) ""o . a . c . m . optim . nonlinear . vector"" , the main purpose being to provide a new ""fluent"" api ( cf . ""withxxx"" methods ) . along the way , class ""levenbergmarquardtoptimizer"" has been further cleaned up ( e . g . removing protected fields and deprecated methods and using local variables instead of instance fields ) . an additional constructor was necessary in ""baseoptimizer"" .",math - 1045 singular matrices were considered non - singular due to strict comparison with zero . reported and fixed by sean owen .,"[ math - 814 ] added kendalls tau correlation , thanks to matt adereth .","math - 1054 standardize ""x = x op y"" to ""x op = y"" . thanks to sean owen .",[ math - 1068 ] avoid overflow in kendalls correlation for large input arrays .,[ math - 842 ] added support for different pivot selection rules to simplexsolver .,[ math - 1079 ] further improvements to simplexsolver .,starting work on bsp trees for spheres .,fixed some clirr errors .,simplified 1 - sphere case .,improved 1 - sphere to provide methods useful for the 2 - sphere .,fixed subcircle behaviour in parallel circles case .,generalized use of customizable tolerance in bsp trees .,improved robustness of 1 - sphere regions ( arcsset ) at 0 / 2 \ pi crossing .,"math - 923 implementation of kohonen's self - organizing feature map ( sofm ) . new package ""o . a . c . m . ml . neuralnet"" contains base functionality for implementing different map types , i . e . methods that project a high - dimensional space onto one with a low dimension ( typically 1d or 2d ) . the sofm - specific code is in ""o . a . c . m . ml . neuralnet . sofm"" .",fixed an error introduced by a wrong fix . . .,"[ math - 1089 ] precision . round ( double , . . . ) will return negative zero for negative values rounded to zero .",[ math - 1038 ] refactor code as agreed on the mailinglist .,fixed error when splitting an arc close to its end . fixes : math - 1093,added emo welzl algorithm finding points smallest enclosing ball . jira : math - 1095,added ball generation from support points in 3d . this can be used for applying emo welzl smallest enclosing ball algorithm in the euclidean 3d case .,[ math - 749 ] add monotonechain implementation .,"[ math - 749 ] improve robustness for convex hull algorithms in case of identical / collinear points , added flag whether to include only extreme points or all points on the hull , improve unit tests .",[ math - 749 ] change the way the line segments are computed as they can not be serialized . use the array only as cache and create them as needed .,"[ math - 749 ] remove grahamscan , giftwrap , make monotonechain more robust wrt collinear points , add convergenceexception in case the specified tolerance results in a non - convex hull .","implicit weights the weights are no longer implicit in leastsquaresproblem . evaluation . they are already included in the computed residuals and jacobian . gn and lm multiplied the residuals by the weights immediately , so that was easy to remove . created an abstractevaluation class which handles the derived quantitied ( cost , rms , covariance , . . . ) and two implementations . unweightedevaluation uses the straight forward formulas . denseweightedevaluation delegates to an evaluation and multiples the residuals and jacobian by the square root of the weight matrix before returning them . allowed me to remove the reference to the full weight matrix .","use evaluation instead of pointvectorvaluepair use evaluation instead of pointvectorvaluepair in the convergencechecker . this gives the checkers access to more information , such as the rms and covariances . the change also simplified the optimizer implementations since they no longer have to keep track of the current function value . a method was added to leastsquaresfactory to convert between the two types of checkers and a method added to leastsquaresbuilder so that it can accept either type . i would have prefered to do this through method overloading , but overloading doesn't play well with generics .","use real { vector , matrix } in leastsquares interfaces covered all of the interfaces in the leastsquares package to use realvector and realmatrix instead of double [ ] and double [ ] [ ] . this reduced some duplicated code . for example evaluation . computeresiduals ( ) was a complete duplication of realvector . subtract ( ) . it also presents a consistent interface and allows data encapsulation . lastly , this change enables [ math ] to ""eat our own dog food . "" it enables the linear package to be used in the implementation of the optimization algorithms .",change private least square problem implementation to internal class .,"added kolmogorovsmirnovtest , deprecated kolmogorovsmirnovdistributio . jira : math - 437","math - 1092 extracted class ""linesearch"" from ""powelloptimizer"" . made method ""computeobjectivevalue"" public in ""multivariateoptimizer"" . modified ""powelloptimizer"" to use the now public class . ""nonlinearconjugategradientoptimizer"" uses the new ""linesearch"" . added constructors to set the line search tolerances and deprecated obsolete contructors and inner classes ( ""bracketingstep"" and ""linesearchfunction"" . removed method ""findupperbound"" .","improved brackting utility for univariate solvers . bracketing utility for univariate root solvers now returns a tighter interval than before . it also allows choosing the search interval expansion rate , supporting both linear and asymptotically exponential rates .",constrained empiricaldistribution sample / getnextvalue methods to return values within the range of the data ; correctly linked randomgenerator to superclass so that realdistribution reseedrandomgenerator method works . jira : math - 984,"math - 1134 instance fields made ""final"" .",math - 1134 flag to request initialization of the internal data needed to call the partial derivatives methods .,fixed lots of warnings due to missing @ deprecated annotations .,"[ math - 1139 ] added gumbel , laplace , logistic and nakagami distributions . thanks to alexey volkov .","math - 1138 #comment implemented new bicubicsplineinterpolator , supporting akima spline interpolator and updated tests","reorganized code , avoiding too many internal classes .",fixed empiricaldistrubiton#cumulativeprobability to correctly handle constant bin kernels . jira : math - 1208 .,made getkernel return a constant distribution for zero variance bins . jira : math - 1203 .,"add missing @ override tags , use final for private fields where possible .",fixed wrong splitting of huge number in extended accuracy algorithms . jira : math - 1223,fix test failures for fastmath . pow by preventing jit branch optimization .,"attempt to re - implement the pow function . the attempts are motivated by platform - specific failures , which seem to be platform - specific , and probably due to jit optimization bugs .",modified exactp to correctly handle ties . jira : math - 1246 .,math - 1274 : representation of kolmogorov - smirnov statistic as integral value,math - 1274 : representation of kolmogorov - smirnov statistic as integral value,fixed checkstyle warning about parentheses .,fixed checkstyle warning about parentheses .,"fixed checkstyle warnings . these warnings correspond to redundant modifiers ( public , static , . . . ) . they are identified by recent versions of checkstyle , in particular the one shipped with eclipse . they are not detected by our maven - checkstyle - plugin yet because it is not the latest one and still depends on an older version of checkstyle .",modified kolmogororsmirnovtest 2 - sample test to use random jitter to break ties in input data . jira : math - 1246 .,"math - 1158 using the new sampler api . deprecate old api ( including the now obsolete constructors ) . apart from the main focus of the issue ( distribution classes ) , this change also had an impact on : * some of test classes that use random numbers ( where the tolerance may have its value updated when it is highly sensitive on the rng seed ) * statistical inference tests that use a distribution but not the rng ( cf . math - 1124 ) which now deprecated code passed to its contructor . * classes in package ""o . a . c . m . random"" that depend on some of the distributions",math - 1405 : iteratively double mindelta for kolmogorov - smirnov test jiggling,comment formatting .,use a faster rng .,"math - 1284 : replace / rename coordinate ? d classes ( nee vector ? d ) as cartesian ? d classes as per discussion . when there are existing overridden methods accepting vector < euclidean ? d > and point < euclidean ? d > , add a disambiguating method accepting a cartesian ? d . eliminate casts where possible .",replaced deprecated method .,added insufficientdataexception . jira : math - 1061,changed to use insufficientdataexception when the model does not contain sufficient data for the number of regerssors ; fixed error in precondition statement .,replaced deprecated method .,replaced deprecated method .,[ math - 1031 ] added new clusterevaluation base class and refactored code in multikmeansplusplusclusterer .,[ math - 970 ] added solutioncallback to simplexsolver to retrieve the best solution found .,"math - 1014 ""polynomialcurvefitter"" as replacement of ""polynomialfitter"" . some tests have been obsoleted by the refactoring ( which hides the optimizer and thus avoids some potential misuses ) .",math - 1067 avoid infinite recursion . thanks to florian erhard .,[ math - 1059 ] use fastmath instead of math .,"[ math - 1070 ] fix precision . round ( float , int , int ) for roundingmode round up . thanks to oleksandr muliarevych .",[ math - 1068 ] changed integer calculations with potential overflows to long .,add helloworld example for genetics package .,small performance improvement .,add imageevolution example for genetics package .,"improve imageevolutionexample , add test images .",add some documentation .,remove some debug code .,"formatting , use list instead of arraylist .",small improvement .,"rename enum to uppercase , make test deterministic .",[ math - 1080 ] linearconstraintset returns now the linearconstraints in the same order as they have been added .,[ math - 1079 ] improve performance of simplexsolver .,"[ math - 1082 ] improve cutoff mechanism in simplexsolver , adapt unit tests .",rename local variable to avoid masking a member variable .,we don't need the full vector api for bsp trees .,added bsp for spherical geometry . this is work in progress! it is not tested yet .,"intermediate , partially working stuff on the 1 - sphere . chord / subchord are most probably not the appropriate classes . they are too complex and should be replaced by something simpler and more 0 - dimension , like orientedpoint in euclidean 1 - d .",avoid nullpointerexception in some corner cases .,improved navigation within sub - arcs .,finalized 1 - sphere .,un - deprecated a widely used method .,removed unneeded method .,"test for 2 - sphere hyperplane , i . e . circle .",fixed missing deep copy .,undeprecated methods . deprecating methods that are overridden with different signature was not really a good idea . we can keep both methods in parallel without problems .,deprecating geometry constructors without tolerance setting .,fixed errors in spherical polygons build from vertices .,fixed missing last iteration in a loop .,fixed area computation on non - convex spherical polygons .,removed too tight link between edges and bsp tree .,improved tests coverage .,"don't advertise an assumption we may remove soon . we will probably extend the circle class to also represent small circles on the 2 - sphere , not only great circles . this would introduce an aperture angle that could be different from \ pi / 2 . in this case , the part of a circle inside another circle may exist or not ( small circles can be disjoint ) , and may have a length either shorter or longer than \ pi . this change is not done yet , but could happen any time soon , even before 3 . 3 is out .",fixed problem for spherical polygons with holes .,fixed an issue with noisy functions for ode events detection . the issue was not detected in apache commons math but in similar code in orekit ( see https : / / www . orekit . org / forge / projects / orekit / issues / 160 ) .,math - 1088 ensure that bad usage will raise an exception .,math - 1089 slightly simpler implementation .,intervalsset now implements iterable < double [ ] > . fixes math - 1090,"bsp tree now provide an api to compute a global signed distance . the distance is defined from a test point to the region . it is positive if the point is outside of the region , negative if the point is inside , and zero when the point is at the boundary . the distance is continuous everywhere , so it can be used with a root solver to identify accurately boundary crossings . this api is available for all bsp trees , in euclidean and spherical geometries , and in all dimensions . fixes math - 1091",typo in a function name . . .,[ math - 970 ] add a method issolutionoptimal to solutioncallback .,"enable choice of rng , so that the unit test can be run with a seed that makes it always succeed .","extract classes out of sphericalpolygonsset source file . none of these classes required private access to the sphericalpolygonsset class , so they can be outside , simplifying the source .",[ math - 1072 ] added constructor for abstractlistchromosome that does not copy the input argument .,"added tests for 3d smallest ball enclosing . warning! these tests have revealed a bug in our implementation of the smallest enclosing ball algorithm . so some tests are currently ignored in order to avoid having lots of messages , but i am already working on them . the problems should be fixed ( and the tests activated ) before 3 . 3 release .",[ math - 749 ] convex hull support for two - dimensional space : grahamscan2d .,removed redundant throws,"partly fixed math - 1096 . the 2d cases seem to work now , but there are still problems with the 3d cases .","most of the 3d errors were due to . . . wrong tests . the dimension was set to 2 instead of 3 . there is still one problem , so investigation continues . jira : math - 1096","[ math - 749 ] fix grahamscan2d for colinear points , improve tests .",[ math - 749 ] add akltoussaintheuristic as pre - processing step for convex hull generation .,convex hull example for user guide .,"user should not provide space dimension , it should be automatic .",rename to grahamscan as the algorithm anyway is only defined for the 2d case .,improve tests .,make constructor package private for now to simplify potential future changes .,apply @ override rules for java 1 . 5,"add enclosingball example , update convex hull .","[ math - 749 ] added crossproduct method to vector2d as a replacement for getlocation , using matharrays . linearcombination to improve accuracy .","[ math - 749 ] use new method vector2d . crossproduct , fix typos , return segment instead of line in convexhull2d .","fixed sphere generation in degenerated cases . in almost coplanar / almost colinear cases , sphere generation could diverge in such a way the support points did not belong to the sphere anymore! this new implementation uses exact arithmetic for the computation . it is much slower , but since very few balls should be generated during the welzl algorithm execution , this is probably acceptable . jira : math - 1096",add missing override tags .,"added enclosing ball generator for 2 - sphere . on the 2 - sphere , enclosing balls are sphericals caps .",[ math - 749 ] add giftwrap algorithm as precursor for chan's algorithm .,[ math - 749 ] handle case that all points are identical .,"[ math - 749 ] rename method , add / improve javadoc , better handle degenerate cases , improve unit tests .",add missing al header .,[ math - 1044 ] clarify javadoc of decompositionsolver#getinverse and corresponding implementations . thanks to sean owen .,add missing serialversionuids .,[ math - 1065 ] fix enumeratedrealdistribution . inversecumulativeprobability . thanks to matteodg and phil .,"added a getenclosingcap method for spherical polygons . in simple cases ( small polygon , one piece only , no holes ) , the enclosing cap will be the smallest one , but this is not guaranteed in the general case . the enclosing cap can be used to speed up inside / outside points when the region is small with respect to the sphere as with only one check of an angular separation , most points of the sphere can be safely identified as outside . the more time - consuming checks involving the full boundary are therefore done only for a small portion of the sphere .",simplify geometry examples by using piccolo2d .,"add zooming , center of enclosing ball .",further improvements .,"rewrote completely the enclosing spherical cap computation on 2 - sphere . the previous version was based on welzl algorithm , but it appeared this algorithm really need some properties that hold in euclidean spaces and not on the sphere . the current version is not perfect in the sense that some times the enclosing spherical cap returned is not the smallest possible . it is documented in the javadoc .",update test after adding new error message .,"separate least squares algorithm from problem . the least squares package now has two main interfaces leastsquaresoptimizer and leastsquaresproblem , where the optimizer can be applied to the problem . in this commit all of the test cases pass with one change ( annotated ) to levenbergmarquardt . testcontrolparameters ( ) . the tests for gauss newton were expanded to cover using the qr decomposition , which revealed a qr default tolerance discrepancy . a factory and a mutable builder were create for leastsquaresproblem . this commit is a backport of evan ward github commit https : / / github . com / wardev / commons - math / commit / 7e9a15efb535b91afad9d8275eb2864ea2295ab4 into the current development version . conflicts : src / main / java / org / apache / commons / math3 / fitting / leastsquares / abstractleastsquaresoptimizer . java src / main / java / org / apache / commons / math3 / fitting / leastsquares / gaussnewtonoptimizer . java src / main / java / org / apache / commons / math3 / optim / abstractoptimizer . java src / test / java / org / apache / commons / math3 / fitting / leastsquares / abstractleastsquaresoptimizerabstracttest . java src / test / java / org / apache / commons / math3 / fitting / leastsquares / gaussnewtonoptimizertest . java src / test / java / org / apache / commons / math3 / fitting / leastsquares / levenbergmarquardtoptimizertest . java",immutable optimizer configuration . the gn and lm optimizers now use an immutable fields for their configuration parameters and a fluent api . lm still has some mutable fields it uses a scratch space . this commit is a backport of evan ward github commit https : / / github . com / wardev / commons - math / commit / 157cdde into the current development version . conflicts : src / main / java / org / apache / commons / math3 / fitting / leastsquares / gaussnewtonoptimizer . java src / main / java / org / apache / commons / math3 / fitting / leastsquares / levenbergmarquardtoptimizer . java,clean up leastsquaresproblemimpl reorder constructor parameters to match leastsquaresfactory and remove an unused method .,value and jacobian evaluated in a single method . a new interface multivariatejacobianfunction lets the function value and jacobian be evaluated at the same time . this saves the user from having to cache the result between calls to get the value and the jacobian . a factory method was added to create leastsquaresproblems from the new interface .,add javadoc to leastsquaresbuilder .,levenbergmarquardtoptimizer is thread safe . converted the mutable fields to locals .,make infinite loop in gaussnewton explicit . the main loop in gn could only be ended by convergence or exception . i made that explicit with while ( true ) and removed an unreachable mathinternalerror .,use enum for lu or qr in gaussnewtonoptimizer changed the boolean uselu prarameter to an enum . this is benificial because : 1 . user code is easier to read : new gno ( decomposition . qr ) instead of new gno ( false ) 2 . allows other algorithms to be added in the future 3 . developer code is easier to read . one less if statement in optimize ( ),"clean up leastsquaresfactory * there are now 3 factory methods : one using the previous interfaces , one using the new interfaces with weights , and one using the new interfaces without weights . * make model ( . . . ) method public . * fix javadoc typo",clean up leastsquaresbuilder provide methods for using old and new interfaces . data is stored internally using the new interfaces now .,fix javadoc and checkstyle errors .,fixed errors introduced by few previous api changes .,"junit directly executes least squares tests previously junit would make the call to test a specific optimizer , and then that method would call all of the individual test cases relevant to that optimizer . , now junit will directly call each individual test case . the same test coverage is preserved . the gaussnewtonoptimizertest is split into two classes , one for each decomposition algorithm it can use . there is a significant amount of duplicated code between gaussnewtonoptimizerwithlutest and gaussnewtonoptimizerwithqrtest .",qualify evaluation in interfaces . use leastsquaresproblem . evaluation in the public interfaces for readability .,"expand evaluation tests , use weighted values . added more test cases to evaluationtest to test the other methods of denseweightedevaluation / unweightedevaluation . fixed a bug in denseweightedevaluation . computevalue ( ) where the the weights were not applied to the return value .",fixed checkstyle and compiler warnings .,removed interfaces in the fluent api that do not add any value .,"the sparse vector and matrix classes have been un - deprecated . this is a reversal of a former decision , as we now think we should adopt a generally accepted behavior which is . . . to ignore the problems of nans and infinities in sparse linear algebra entities . jira : math - 870 ( which is therefore not fixed )","make qr in gaussnewton faster and more accurate re - factored the code in gaussnewtonoptimizer so that the decomposition algorithm sees the jacobian and residuals instead of the normal equation . this lets the qr algorithm operate directly on the jacobian matrix , which is faster and less sensitive to numerical errors . as a result , one test case that threw a singular matrix exception now passes with the qr decomposition . the refactoring also include a speed improvement when computing the normal matrix for the lu decomposition . since the normal matrix is symmetric only half of is computed , which results in a factor of 2 speed up in computing the normal matrix for problems with many more measurements than states .","add cholesky option to gaussnewtonoptimizer since the normal matrix is symmetric positive ( semi - ) definite , the cholesky decomposition is theoretically faster .",make qr the default in gaussnewtonoptimizer theoretically qr offers the best blend of speed and numerical stability . empirically the qr implementation is slightly faster than the cholesky implementation .,computexxx renamed getxxx in the evaluation interface ( leastsquares ) .,added a test showing the limitation of sparse matrices implementation . jira : math - 870 .,continue un - deprecation of sparse methods . jira : math - 870 jira : math - 803,relaxed specification for function mapping on vectors . jira : math - 821,un - deprecated realvector . sparseiterator . the documentation now explicitly states that entries not iterated above are the zero ones . this is part of apache commons math reconsidering support for sparse linear algebra . jira : math - 875,field vectors now implement the visitor pattern just like real vectors . jira : math - 820,qr decomposition can compute pseudo - inverses for tall matrices . thanks to sean owen for the patch . jira : math - 1053,improved documentation of qr decomposition handling of singular matrix . jira : math - 1101,moved optimizationproblem interface to optim package .,in leastsquaresproblem . evaluation removed the getvalue ( ) method . - the residuals are the really the values of the objective function that is being minimized . - forcing the value to be a real vector and the residual computed through subtraction is an unnecessary constraint . for example rotation . distance ( ) will compute a better residual than subtracting the quaternion elements of two rotations . - method was not used by any optimizer . jira : math - 1102,"make abstractevaluation public allow custom implementations of leastsquaresproblem to use the default methods for computing the covariance , rms , etc . jira : math - 1102",javadoc .,fixed small inconsistency .,improved test coverage .,fix checker seeing not old point convergencecheckers always saw previous . getpoint ( ) to equal current . getpoint ( ) because the optimizers used the same array and did not make a copy of the previous point . fixed by using a new array for each model evaluation and lsp . evaluate ( ) now makes its own copy of the state vector as well . path provided by evan ward . jira : math - 1103,fix switched iterations and evaluations in levenbergmarquardtoptimizer the number of iterations and evaluations was switched in two of the return statements . patch provided by evan ward . jira : math - 1106,"math - 1092 added parameter in ""linesearch"" and ""nonlinearconjugategradientoptimizer"" .","add svd to gaussnewtonoptimizer allow using the svd decomposition which has excellent stability and can provide a ""solution"" for singular problems . figured out why one of the least squares tests did not check two of the states . there was only one equation for the two states . the test now verifies the states satisfy the constraint . patch provided by evan ward . jira : math - 1104",prevent penalties to grow multiplicatively in cmaes . patch provided by bruce a johnson . jira : math - 1107,"fixed failing test . as functions evaluations were not counted properly , which has been fixed a few days ago , the multi - start test in fact did not performed all expected restarts . this commit fixes this ( by increasing the max evaluations ) , and fixes the result checks accordingly .","""final"" keyword .",minimize number of array accesses .,"""final"" keyword .",minimize number of array accesses .,clearer statements .,"math - 1118 equality of double values in accordance with the semantics of ""java . lang . double"" .","math - 1118 fixed compatibility of ""equals ( object ) "" with ""hashcode ( ) "" ( ""complex"" will behave as jdk's ""double"" ) . added new methods for testing floating - point equality . thanks to cyrille artho for reporting the issue .",added an order 6 fixed - step ode integrator . the integrator was designed by h . a . luther in 1968 . we have added a corresponding step interpolator by solving the order conditions provided by the rkcheck tool .,math . nextup is not available before java 1 . 6 .,added a fast single - step method for fixed - step runge - kutta integrators . jira : math - 1119,build properly empty polygons for equal min / max box . jira : math - 1117,build empty polyhedrons set when given equal min / max boundaries . also explained better in the javadoc about some wrong usage of polyhedronsset constructor . jira : math - 1115,[ math - 1110 ] added constructor to olsmultiplelinearregression to be able to specify a custom singularity threshold for qr decomposition . thanks to edward segall .,disable randomly failing unit test .,javadoc fixes with java 8 .,"removed test based on the assumption that iterating over a ""concurrenthashmap"" would always provide its elements in a random order . this seemed to be the case up to java 7 but not always in java 8 .",fixed checkstyle error .,revert javadoc changes after discussion on the mailinglist .,added statutils convenience methods and updated user guide for kolmogorov - smirnov tests . jira : math - 437 .,math - 1121 use base class iteration counter . reported by ajo fod .,fixed nullpointerexception in bsptree . the error occurred when chopping - off a sub - hyperplane that was exactly at a region boundary . thanks to aurélien labrosse for the fix . jira : math - 1123,[ math - 1125 ] performance improvements for students t - distribution . thanks to ajo fod .,add evaluationrmschecker convergence checker for evaluations that decides based on change in rms .,fixed overflow in precision . equals with ulps . both double and float versions were affected . jira : math - 1127,math - 1129 fix wrong sorting in the presence of nan .,"math - 1128 introducing a ""lazyunweightedevaluation"" : the computation of the model and jacobian are deferred until one or the other is actually accessed . class ""localmultivariatejacobianfunction"" replaces the anonymous class that was created when calling the ""model"" method . the ""evaluate"" method of ""localleastsquaresproblem"" instantiates either ""unweightedevaluation"" or ""lazyunweightedevaluation"" , as requested by the user of the ""create"" factory method .","math - 1130 method ""copyofrange"" ( available as of java 6 in ""java . util . arrays"" ) .",added implementation of psquare algorithm to estimate percentiles without storing data in memory ( i . e . as storelessunivariatestatistic ) . jira : math - 418 contributed by : venkatesha murthy,added estimation types and nan handling strategies for percentile . thanks to venkatesha murthy for the patch . jira : math - 1120,fixed forgotten test update .,"reuse method from ""matharrays"" .",unnecessary brackets .,method for checking that no array entry is nan .,"using method from ""matharrays"" .",advertize correct exception .,typo .,math - 1130 shortcut ( in case one of the arguments is nan ) . thanks to venkatesha murthy .,changed distribution tests to use fixed seed . jira : math - 418 . thanks to venkat murthy .,[ math - 1131 ] improve performance of kolmogorovsmirnovtest#kolmogorovsmirnovtest ( ) for large samples . thanks to schalk w . cronjé,[ math - 1135 ] fix monotonechain algorithm in case of collinear hull points . thanks to guillaume marceau .,fixed binomialdistribution to deal with degenerate cases correctly . jira : math - 1136 reported and patched by aleksei dievskii .,factored kth selector and pivoting strategy out from percentile . thanks to venkatesha murthy for the patch . jira : math - 1120,"refactored removeandslice , replaceandslice . thansk to venkatesha murthy ts for the patch . jira : math - 1120","modified kolmogorovsmirnovtest cdf computation to use the pelz - good approximation ( per simard - l'ecuyer ) for n > 140 . removed r reference tests , as our implementation is now different ( but should be more accurate ) for the n values covered by the tests . also added a pi squared constant to mathutils . jira : math - 1131",math - 1141 allow same value for lower and upper bounds .,[ math - 1149 ] fix potential null pointer dereferencing .,[ math - 1145 ] fix integer overflows in mannwhitneyutest . thanks to anders conbere .,math - 1146 unit tests showing that the current implementation fails on some special values ( infinities ) . other descriptive statistics values are probably similarly affected .,"math - 1151 new interface ""valueandjacobianfunction"" ( to allow separate evaluation of either quantity ) is a precondition for lazy evaluation ( and is enforced by raising an exception early rather than wait for a failed cast ) .",recovered debugging method that were removed in the previous commit . the methods are useful and the warning about them being unused could be solved with an annotation .,[ math - 1148 ] fix monotonechain with collinear points as input : take tolerance factor into account when initially sorting the input points . thanks to guillaume marceau for the report .,[ math - 1152 ] improved performance of enumerateddistribution#sample ( ) . thanks to andras sereny .,added statistics missing from tostring method in summarystatistics . jira : math - 1147,use mathutils . pi squared .,"added all java 8 strictmath methods to fastmath . this change allows fastmath to remain compatible with newer java versions , despite it stiil requires only java 5 to compile and run . jira : math - 1156","added proper checking of expected exception in fastmath tests . some of the new functions trigger exceptions in the data range used for tests ( overflows near range end , divisions by zero ) . the fastmath implementation throws compatible exception in the same cases , this is now tested correctly .",fixed too long first step in fixed runge - kutta integrators . this change is similar to the one done two years ago for adaptive step sizes integrator . jira : math - 727,corrected variance ( thanks thomas ) and added tests for inversecumulativeprobability,changed inference classes to pass null randomgenerators to distribution constructors . jira : math - 1154 .,math - 1144 new interface for allowing caller to validate ( i . e . modify ) the set of parameters generated by the optimizer .,math - 1144 allow caller to modify the set of parameters generated by the optimizer .,"math - 1144 point must be retrieved after the call to ""evaluate"" ( to ensure that the validated parameters are actually used by the optimizer ) .",debug output commented out .,fixed end of line encoding problems .,math - 1138 #comment bicubicsplineinterpolator maintenance moved the new bi - cubic interpolator functions to new piecewise * version of the same files . restored the original bi - cubic functions and restored the tricubic function to use the original functions as well,math - 1138 #comment added deprecation and accuracy warnings,provide access to state derivatives in continuousoutputmodel . jira : math - 1160,"added getinterpolatedsecondaryderivatives to continuousoutputmodel . this method is a close relative to getinterpolatedderivatives , but is associated with the secondary state . jira : math - 1160",fixed checkstyle warnings .,[ math - 1165 ] fix fuzzykmeansclusterer when data points equal a cluster center . thanks to pashutan modaresi,"cleanup . * formatting ( braces , indent , conditionals , array declaration , . . . ) . * reduce variable's scope . * temporary variable to avoid multiple accesses to the same array element . * use ""final"" keyword .","math - 1167 use user - specified threshold to allow detection of singular matrix . [ reported , with fix , by neil ireson . ]",formatting .,clirr error return type cannot be changed ( binary compatibility between minor releases ) .,fixed a problem with vanishing sub - hyperplanes during bsp tree merging .,"reactivated method commented out during development . the method has been deprecated and replaced by a new method . it is not used at all in the library , but is public so should be preserved .","math - 1166 : bicubic interpolation new classes to replace ""bicubicsplineinterpolatingfunction"" and ""bicubicsplineinterpolator"" .",identified a new failure mode for polygons .,"improved accuracy of internal computation . the improvement is obtained by using high accuracy linear combinations and by preserving cos / sin as much as possible . this last part is important in the frequent case of lines along y axis , i . e . when angle is π / 2 . we want the cosine to remain 0 and not get about 10 ^ - 17 .",added splitters in boundary attributes .,clirr revert binary - incompatible change .,"deprecation deprecating classes whose functionality is based on buggy code in ""bicubicsplininterpolatingfunction"" ( math - 1166 ) .",set up a weak link between a line and its reverse to avoid duplications .,fixed a problem with too thin polygons considered to have infinite size .,"deprecated avltree and orderedtuple . these two classes were dirty hacks used only for the extraction of boundary from 2d euclidean bsp trees . they were not really efficient and produces some problems as topology was not preserved . a completely new implementation of boundary extraction has been set up as of 3 . 4 , that preserves more topological information and therefore should be more robust . this new implementation does not use these classes anymore . as avltree is not really a math concept , this class is not considered to belong to [ math ] scope . orderedtuple is more a grey zone , but it is really something inefficient and no need for it is foreseen .",connect closest node instead of first node below threshold in polygons .,"math - 1175 ""laplacedistribution"" : fixed special case of inverse cumulative distribution .",filter out spurious vertices in polygons boundaries .,"math - 1173 : tricubic interpolation new class ""tricubicinterpolatingfunction"" to replace ""tricubicsplineinterpolatingfunction"" .","math - 1173 : tricubic interpolation new class ""tricubicinterpolator"" to replace ""tricubicsplineinterpolator"" .",math - 1172 : simple curve fitter provides boiler - plate code so that users can readily fit any parametric function .,"math - 1180 : sequence of integers added to ""matharrays"" : method to create an array containing a sequence of integers .","fixed integer overflow in kolmogorovsmirnovtest causing 2 - sample test to use exact method when the product of the sample sizes exceeds integer . max value , resulting in effectively hung execution . jira : math - 1181 reported by gilad",[ math - 1142 ] improve performance of kalman gain calculation of kalmanfilter . thanks to arne schwarz .,[ math - 1154 ] add clarification to ctor javadoc of all distributions to pass a null random generator in case no sampling is needed .,"added bessel functions of the first kind , based on netlib implementation . jira : math - 1066 based on patch provided by brian wignall","added bessel functions of the first kind , based on netlib implementation . jira : math - 1066 based on patch provided by brian wignall",fixed message format formatting .,"removed unnecessary call to ""super ( ) "" .",removed spurious deprecation warning ( copy / paste mistake ) .,override of interfaces is java 1 . 6 +,arrays . copyof is java 1 . 6 +,improved or corrected javadoc ; added some tests .,added test confirming correct cumulative probability values for + - inf .,added a simpler perfect fit test that verifies slope standard error identically 0 .,add temp debug output,more dubug,tab police,fix indentation ( no code change ),split into separate tests . easier to determine which fails ; also checks if subsequent ones are failing,more debug,add temp debug output,more debug,document debug output,add more debug output .,temporarily ignore fastmath tests and add console output to fastmath . exp ( ) .,"revert previous commit with debug output , fix typo .",readd console output .,add temporary check for rare test failure .,quadratic mean math - 1199,quadratic mean math - 1199,math - 1198 simplify fastmath exp function hopefully also fix java 1 . 5 jit bug,fixed checkstyle trailing whitespace warning .,fixed hidden field warning .,javadoc math - 1201,[ math - 760 ] made descriptivestatistics#windowsize private . thanks to sebb .,[ math - 825 ] method laguerresolver#laguerre ( . . . ) has been made private .,"[ math - 1050 ] remove deprecated methods arithmeticutils#pow ( . . . , long ) .",remove deprecated stat . clustering package .,update unit test for localizedformats after removing the deprecated one .,"math - 1204 bracket function gives up too early in univariatesolverutils . bracket ( . . . ) the search ends prematurely if a = lowerbound , which ignores some roots in the interval . fixed by changing the loop condition so the search continues while b < upperbound . also added a test case .",[ math - 850 ] remove deprecated randomdata and randomdataimpl classes .,[ math - 1155 ] performance improvement for well class random number generators .,remove deprecated classes and methods .,remove deprecated methods in package geometry .,replace removed methods by toarray ( ) .,[ math - 1039 ] added logdensity and logprobability methods to realdistribution and integerdistribution interfaces .,remove deprecated contructors in uniformrealdistribution .,make method arguments final .,temp changes for analyzing test failures .,revert back temporary changes .,"[ math - 839 ] renamed cumulativeprobability ( double , double ) to probability ( double , double ) in integerdistribution and realdistribution . thanks to gilles .",[ math - 869 ] nullargumentexception now extends nullpointerexception .,[ math - 958 ] remove support for nanstrategy#removed in spearmanscorrelation .,"make private fields final if possible , add missing @ override tags for implemented interfaces , javadoc formatting .",made getkernel return a constant distribution for zero variance bins . jira : math - 1203 .,math - 1207 relax tolerance in unit test .,corrected the fix for math - 1208 .,"add missing @ override tags , formatting .",[ math - 945 ] added log10 to realfieldelement .,add missing @ override tags .,remove deprecated vector#distance ( vector ) method .,[ math - 757 ] removed broken and deprecated synchronization support in resizabledoublearray .,[ math - 1209 ] fix link to algorithm description in poissondistribution#sample ( ) . thanks to jonathan ogilvie,"add missing @ override tags , add final for member variables where applicable .","add missing @ override tags , add final for member variables where applicable .","fix checkstyle warning , remove forgotten deprecated methods .",math - 1210 improved error reporting .,fix sonar error : remove private final field and return the default value instead .,added missing @ override,"fixed wrong handling of a corner case . the problem occurs in very difficult to reproduce cases , as it is really a corner case . when the vanishing cut - subhyperplane occurs during a difference operation , the fixed node still has a null cut - subhyperplane . this was not properply handled . jira : math - 1162","math - 1206 new api methods in ""leastsquaresproblem . evaluation"" class .",added dump / parse utilities for bsp trees . these utilities are for test and debug purposes only .,fixed wrong intersection selection in polyhedrons sets . sometimes the selected intersection point was on the wrong side of the line ( i . e . in the opposite of the direction of the line ) . thanks to mike zimmerman for identifying and solving the issue . jira : math - 1211,changed javadoc as the randomdatagenerator class . the class does not implement an interface anymore ( the previous interface has been deprecated in 3 . x and removed in 4 . 0 ) . jira : math - 1212,fixed ignored method parameters in qrdecomposition protected methods . jira : math - 1191,add missing @ override tags .,"add missing @ override tags , formatting .",remove deprecated interfaces / classes / methods in analysis package .,remove deprecated classes in optim package .,added @ overrides .,added missing serial version ids .,added a way to build polyhedrons sets from vertices and facets .,moved fastmathtestperformance out of the main test tree . is is a benchmark rather than a test . jira : math - 1195,[ math - 1205 ] major refactoring of the descriptive statistics package .,code formatting .,rng seed in unit test .,[ math - 1197 ] computation of 2 - sample ks statistic was wrong in case of ties .,remove spurios change .,[ math - 853 ] mathruntimeexception becomes the commons base class for all other exceptions .,fixed checkstyle and findbugs warnings .,[ math - 1153 ] improve performance of betadistribution#sample . thanks to sergei lebedev .,[ math - 1220 ] improve performance of zipfdistribution . sample . thanks to otmar ertl .,[ math - 1221 ] improve performance of zipfdistribution by caching the nth generalized harmonic .,converters for univariate and multivariate differentiable functions . jira : math - 1143,add userguide example for integer distributions . fix title in real distribution overview .,fixed missing javadoc .,"attempt to circumvent some errors which seem to be platform - dependent . the jenkins build often fails on code that seems to be perfectly correct . failures also do no always happen so they may depend on platform . there were similar problems a few months ago that were probably related to jit bugs . this fix simply tries to do the same thing as before , but with an earlier detection of nan in one case , and by comparing directly the bits representation in another case , to avoid wrong optimizations .","revert ""attempt to circumvent some errors which seem to be platform - dependent . "" this reverts commit c771c0080b08abd80418c4e88f1be3efec828f0a . the attempt failed , the error is still present .",fixed wrong splitting of huge number in extended accuracy algorithms .,fixed equals / hashcode contract failure for dfp . thanks to cyrille artho .,fix test failures for fastmath . pow by preventing jit branch optimization .,use double . isnan rather than x ! = x in fastmath . thanks to benedikt ritter . github : closes #5 . jira : math - 1222,added a fast implementation of ieeeremainder in fastmath .,fixed wrong event detection in case of close events pairs . jira : math - 1226,document npe . jira : math - 1116 jira : math - 1224,math - 1229 set initial capacity to input array's size in order to avoid unnecessary resizing for inputs larger than than the default capacity .,fixed checkstyle warning .,[ math - 1230 ] throw a dimensionmismatchexception if dimension of constraints and objective function does not match in simplexsolver .,fixed error message for unknown parameter name in ode . jira : math - 1232,"math - 1231 lifted unnecessary type restriction on constructor's ""exponent"" argument of ""microsphereinterpolator"" and ""microsphereinterpolatingfunction"" .",[ math - 1236 ] improve performance of calculating the two - sample kolmogorov - smirnov test statistic . thanks to otmar ertl .,[ math - 1241 ] propagate input value to gamma#digamma and gamma#trigamma if the input is not a real value to avoid infinite recursion . thanks to aleksei dievskii .,[ math - 1242 ] improve performance of kolmogorovsmirnov two - sample test via monte carlo simulation . thanks to otmar ertl .,[ math - 1240 ] fix calculation of kssum in kolmogorovsmirnovtest for zero input .,"math - 1244 utility method ""cosangle"" .","added mapping functions to matharrays . these methods allow to map any univariate or bivariate function to arrays . this fixes several pull requests on github , but uses a generalized mapping approach rather than specific api for each function ( closes #6 , closes #7 , closes #8 ) .","add getxmax , getxmin , getymax , getymin to bicubicinterpolatingfunction . these can be useful to manage an outofrangeexception without the need to access the original x and y arrays . closes #9 .","math - 1243 refactoring of ""microsphere interpolation"" algorithm .","reverted commit about mapping functions in matharrays . as discussed on the mailing list , the same result can be obtained with existing higher level api , for example : new arrayrealvector ( array , false ) . map ( f ) . toarray ( ) ;","reverted change about getters in bicubic interpolation . as discussed on the mailing list , the caller already knows the arrays as it is the caller who provided them initially .",removed use of awt transforms .,"fixed error in computing discrete distribution of d statistics for small - sample 2 - sample kolmogorov - smirnov tests . error was causing incorrect p - values returned by exactp and montecarlop methods ( used by default for small , mid - size samples ) . jira : math - 1245","math - 1248 unnecessary allocations in ""bigfraction"" . thanks to chris popp .","use utility method for ""not null"" checks .","[ math - 1242 ] fixed shuffle algorithm used by the monte carlo ks statistic calculation method , moved shuffle algorithm to static package - private method that is now explicitly tested by a unit test",math - 1250 methods to estimate concurrency performance .,new private method for factoring out some common code .,"math - 1251 fixed initial value of the ""number of calls"" counter .","changed data size check to be positive length , not > 1 to fix resizabledoublearray constructor failure on input array of length 1 . jira : math - 1252 thanks to john bay","math - 1255 wrong usage of ""gaussian"" function .",math - 1256 enforce order of bounds .,math - 1257 increased accuracy .,"math - 1258 new utility ""checkequallength"" to consistently report failed precondition .",math - 1258 : check for equal array lengths in distance functions,math - 1261 avoid unnecessary overflow . thanks to osamu ikeuchi .,"math - 990 : improved in - place sorting by using a helper class instead of the generic pair class , in order to avoid boxing and unboxing",math - 1220 : random generator based on rejection - inversion sampling for zipf distributions,performance ( findbugs ),fixed comparison pattern ( findbugs ),"constant can be ""static"" ( findbugs )","math - 1259 new class to replace the current ""incrementor"" ( now deprecated ) . additional functionality : negative initial value and / or increment , ""range"" utility method .",use new incrementor implementation ( cf . math - 1259 ) .,math - 1263 accessor to get neighbouring neurons ( in a square grid ) .,"variable can be ""final"" .",math - 1264 sort units according to distance from a given vector .,"math - 1265 implement ""iterable"" .",missing import .,missing import .,missing @ override .,fixed split / side inconsistencies in bsp trees . jira : math - 1266,remove trailing spaces .,"fixed infinite loop in fastmath . pow ( double , long ) with long . min value . jira : math - 1272",added divideunsigned and remainderunsigned to arithmeticutils . jira : math - 1271,added negative zero support in fastmath . pow . jira : math - 1273 github : closes #16,"math - 1267 helper for finding the grid coordinates of a ""neuron"" in a ""neuronsquaremesh2d"" .",math - 1268 api for algorithms that create some visualization of a 2d sofm .,"math - 1270 various sofm visualizations : unified distance matrix , hit histogram , smoothed data histogram , topographic error .",math - 1270 visualization of quantization error .,"fixed sofm u - matrix ( individual distances ) some ""diagonal"" pixels were overwritten .",""" @ override"" tag inadvertently removed in back / forward porting gymnastics .",math - 1277 : fixed incorrect kendall's tau coefficient calculation due to internal integer overflow . thanks to marc rosen .,"code cleanup in geometricdistribution . java as proposed by gilles : * removed needless declaration of a local variable ""p"" with the same value as the ""probabilityofsuccess"" field * remove needless local variable ""ret"" ( ""return"" statements can be used directly in each way of the alternatives )","optimization of probability , logprobability , and cumulativeprobability methods in geometricdistribution by precalculation of log ( 1 - p ) and log ( p )",extended geometricdistributiontest to test inverse cumulative probability function also at point 1,[ math - 1276 ] improved performance of sampling and inverse cumulative probability calculation for geometric distributions .,"math - 1278 deep copy of ""neuron"" , ""network"" and ""neuronsquaremesh2d"" .",math - 1279 check precondition . thanks to david georg reichelt for the report .,avoid slight inaccuracies at the end of events detections steps .,[ math - 837 ] support aggregation of any kind of statisticalsummary in aggregatesummarystatistics .,[ math - 1283 ] fixed gamma#gamma function for values smaller than - 20 . thanks to jean noel delavalade,"math - 1286 new ""range"" inner class that holds a field with the number of elements of the range . an instance of this class replaces the anonymous class returned by the ""range"" method .",use a fixed seed to avoid random test failure .,fixed hidden field warning .,reintroduced modifiers needed for serialization .,"fixed findbugs warning . when defining compareto , we should also define equals and hashcode .",combined nested if statements .,replaced implementation types . arraylist - > list treemap - > sortedmap,spurious semicolon .,removed static imports .,added missing javadoc .,added missing braces .,added a nth order brent solver for general real fields . this solver replaces the former solver that was restricted to dfp fields only .,"pairneurondouble should not implement comparable . as the purpose was only to sort neurons according to an associated value , using an explicit comparator is simpler . implementing comparable induces also implementing equals and hashcode which are not really meaningful . they are nevertheless required by our code quality checking tools .","use a ""static"" instance rather than an anonymous one instantiated on - the - fly .",math - 1269 : fixed fastmath . exp returning nan for non - nan arguments,added constructors taking sample data as arguments to enumerated real and integer distributions . jira : math - 1287 .,"avoid explicit instantiation of ""integer"" objects for small values .","add ""static"" .","added @ since tags , cleaned up code . jira : math - 1287",renamed fieldunivariatefunction to realfieldunivariatefunction .,added bootstrap method to kolmogorovsmirnovtest . jira : math - 1246 .,[ math - 1294 ] fix potential race condition in polynomialutils . thanks to kamil włodarczyk,pass rng to enumeratedrealdistribution used by bootstrap .,update javadoc ; use + = for jitter .,math - 1295 increased default value for number of allowed evaluations .,add missing override tags - > trigger travis build .,updated fieldmatrix exceptions thrown to match javadoc . github : closes #20,"math - 1293 new inner class ""combinatoricsutils . factoriallog"" that allows to precompute a configurable number of values . thanks to aleksei dievskii for the original feature request and implementation . the proposed code was further modified to enhance usage flexibility and performance and to include additional unit tests .","math - 1300 removed call to the random data generator when it is not necessary . as a corollary , the change provides the property that , if the number of requested bytes is a mulitple of 4 , consecutive calls to ""nextbytes"" will return the same sequence as a single call .",typo .,separate test cases .,redundant unit test removed . renamed two methods to be clearer about what is being tested .,"math - 1304 replaced implementation of ""nextbytes"" by copying the code from ""bitsstreamgenerator"" class ( and then replacing the call to ""next ( 32 ) "" by ""nextint ( ) "" ) .","math - 1305 slight performance improvement of the ""nextbytes"" methods .","int - > long changing type of the non - default constructor of ""jdkrandomgenerator"" in order to match the signature of ""java . util . random"" .","math - 1301 method ""nextint ( int ) "" must throw a ""notstrictlypositiveexception"" similarly to the other rng implementations .","math - 1301 method ""nextint ( int ) "" must throw a ""notstrictlypositiveexception"" similarly to the other rng implementations . [ previous commit was incomplete . ]",fixed stability issues with adams integrators .,removed use of deprecated class .,fixed checkstyle warnings .,javadoc fix .,"added a rotationconvention enumerate . this enumerate allows specifying the semantics or axis / angle for rotations . this enumerate has two values : vector operator and frame transform . jira : math - 1302 , math - 1303",randomize further the micro - benchmarking tool .,"added compose and composeinverse to rotations . these method are more flexible than the existing applyto and applyinverseto ( which are still present ) , because they allow caller to specify a rotationconvention . jira : math - 1302 , math - 1303 github : closes #22",detect start failures with multi - step ode integrators . jira : math - 1297,math - 1301 using composition rather than inheritance .,"math - 1307 new base class for rng implementations . the source of randomness is provided through the ""nextint ( ) "" method ( to be defined in subclasses ) .",math - 1307 extends new base class .,math - 1307 extends new base class .,math - 1307 extends new base class .,javadoc .,serialization identifier .,"math - 1309 not calling public ""setseed"" from a constructor .","math - 1309 not calling public ""setseed"" from a constructor .","math - 1309 not calling public ""setseed"" from a constructor .",math - 1307 use new class .,checkstyle .,add userguide example for image clustering .,minor change . make method parameter names consistent ( cf . math - 1307 ) .,push down allocations / calculations to where they are needed,simplify : instanceof checks for nulls,use short - circuiting ops,simplify : remove dead params,"math - 1309 constructors should not call overridable methods , even indirectly .",improved performance and accuracy of 2 - sample ks tests . jira : math - 1310 .,allow zero - length fill ( i . e . no - op call ) .,javadoc fixes ; added tests to confirm nan behavior .,show more info when this unit test fails .,"starting work on field - based ordinary differential equations . the base elements are the primary equation that users must implement , and optional secondary equations to support features like adjoint parameters or variational equations . some containers to hold current state are also introduced to simplify api ( these container do not exist in the double [ ] version of the api ) . jira : math - 1288",interfaces and normalizer for step handling . this corresponds to a continuous output feature . it basically allow to navigate throughout current step instead of having only discrete grid points . it is a major feature of our ode package . jira : math - 1288,"interface and enum for event handling . this corresponds to an improved g - stop feature . it basically allow to manage discrete events that occur during ode integration . when the event occurs , user can decide to log it and continue , or to change the dynamics of a problem ( for example to handle derivatives discontinuities ) or even to stop the integration before its target date ( for example when the exact final date cannot be known beforehand but is discovered on the fly ) . it is the second major feature of our ode package .",mapping between primary / secondary equations and flat arrays . the api is much simpler than the one in the current double [ ] implementation . we do not mix anymore the equations and the state . jira : math - 1288,"top level integrator interface . we have merged together what was initially in an integrator interface and in an abstractintegrator class . the separation was only due to backward compatibility issues which prevented to push some functions up in the interface . a consequence was that users needed to use the abstract class in their declaration as soon as they needed the additional features . . . which was most of the cases . we try to fix this here . when 4 . 0 will be out , the same merging will be done in the double [ ] implementation of ode . jira : math - 1288","implementation of the top level abstract classes in field ode . this layer implements boilerplate code , mainly step handling and events handling . it is independent of the type of integrator used . below this layer will be the real implementations ( runge - kutta , embedded runge - kutta , gragg - bulirsch - stoer , adams , . . . ) .",separate equations from mapper .,"added init methods for primary and secondary ode . this addition is for consistency with other user - implemented interfaces as step handlers and event handlers . however , since the equations have only the state as input and the produce derivatives as output , their init method also only uses state , as derivatives can be computed only after equations have been initialized , not before .",use maparrays utility methods for building arrays .,initialize primary and secondary equations at integration start .,"step interpolator only needs the mapper , not the full equations .","integrator returns the full state , not only the time .",intermediate level implementations of fixed - step rung - kutta methods .,field - based version of euler method for solving ode .,whitespace .,field - based version of midpoint method for solving ode .,field - based version of classical runge - kutta method for solving ode .,field - based version of gill method for solving ode .,field - based version of 3 / 8 method for solving ode .,field - based version of luther method for solving ode .,added min / max utility methods for realfield elements .,the full set of derivatives are needed in runge - kutta .,intermediate level implementations of variable - step runge - kutta methods .,added forgotten copy method in fieldstepinterpolator interface .,added field - based continuous output throughout integration range .,"field - based version of dormand - prince 8 ( 5 , 3 ) method for solving ode .",field - based version of higham - hall 5 ( 4 ) method for solving ode .,field - based version of dormand - prince 5 ( 4 ) method for solving ode .,use a top level interface for bracketed real field solver .,simplified ode test harness .,restrictied fields visibility in tests .,prepared tests for field - based ode .,"replaced static double array constants with field constants . this will allow for example setting up ode integrators using dfp instances with increased accuracy , including for the ode coefficients themselves .","removed step interpolator prototyping . we can just use a factory method in the integrator for building an interpolator each time we integrate . in the long term , we will even recreate it at each step so the interpolator can be immutable .",converted constants for runge - kutta integrators .,converted constants for embedded runge - kutta integrators .,converted constants for step interpolators .,prevent null pointer exception at integration start .,"the step interpolator should refer to the integrator array . this behavior will be changed later on to get immutable objects . for now , we still rely on arrays being shared between the integrator and the interpolator .",cehck array dimensions in equations mapper .,fixed wrong state reset in field ode .,one step towards immutable step interpolators . the interpolators do not expect anymore the y and ydot arrays to be shared with integrator and be updated by it .,starting tests on field ode! at least we can now run some code . . .,reduced coupling between integrators and step interpolators .,added test for field version of classical runge - kutta method .,reactivated test .,added test and fixed step interpolator for field version of gill method .,factor test code .,fixed butcher arrays constants for luther integrator .,prepared testing framework for step interpolators .,added tests for derivatives consistency .,added tests for midpoint integrator .,added tests for 3 / 8 integrator .,"added test for luther integrator . beware! this test does not work yet . the integrator seems to be wrong for now , probably at step interpolation level because the butcher arrays are consisten with the regulat integrator .",fixed single integration step in step .,missing class parameter .,added test for classical rung - kutta step interpolator .,added test for classical 3 / 8 step interpolator .,added test for gill step interpolator .,added test for classical midpoint step interpolator .,added test for luther step interpolator . beware! this test does not work yet . it confirms there is a problem in the step interpolator for luther integrator .,fixed luther step interpolator error . now all tests related to the luther integrator and step interpolator pass .,added new consistency tests . we want the field - based integrators to be consistent with the regular double - based integrators .,fixed a parenthesis error in higham - hall 5 ( 4 ) step interpolator .,fixed exception handling for too many iterations in event search .,fixed state copying after event detection .,set up test framework for field - based embedded runge - kutta integrators .,set up a shared interface for butcher arrays used by integrators .,prevent nullpointerexception in tests .,added tests for the higham - hall 5 ( 4 ) integrator .,added tests for the dormand - prince 5 ( 4 ) integrator . beware! these test do not pass yet . the integrator is currently not consistent with the regular double - based integrator .,"added tests for the dormand - prince 8 ( 5 , 3 ) integrator . beware! these test do not pass yet . the integrator is currently not consistent with the regular double - based integrator .",fixed dormand - prince 5 ( 4 ) field integrator constants .,"fixed field - based dormand - prince 8 ( 5 , 3 ) integrator constants .",fixed test thresholds .,"fixed field - based dormand - prince 8 ( 5 , 3 ) step interpolator .",fixed syntax incompatible with java 5 .,prevent nullpointerexception .,use immutable step interpolators .,fixed additional equations mapping .,fixed syntax not compatible with java 5 .,added tests with derivativestructure field .,fixed test as the master brnahc generates different exceptions .,reintroduced @ override as master needs at least java 7 .,renamed interfaces for consistency with other classes .,avoid protected fields .,typos .,base classes for field - based multistep integrators .,field - based adams - bashforth integrator .,field - based implementation of adams - moulton ode integrator .,renamed abstract test classes to match build environment filters .,reintroduced @ override as master needs at least java 7 .,"improved digamma function , especially for negative values .",math - 1313 wrong tolerance in unit tests . the tests themselves are weak and should be replaced ( see also math - 1317 ) .,dropped useless tests ; added ks test for uniformity of nextdouble . jira : math - 1317 .,reverting commit 66608db56c41e91ee34fdc1e6157d69b69893fad as per gilles request . the work on revamping the random packages is perfoemd in the random - ravamp branch .,reverting commit d1123894d33922e7c8ca838f9dac9bdceefa3f7a as per gilles request . the work on revamping the random packages is perfoemd in the random - ravamp branch .,reverting commit fdc116f0bcda6d1fffbbe505d0687b0406e92fa6 as per gilles request . the work on revamping the random packages is perfoemd in the random - ravamp branch .,reverting commit 8f6bedeb724fa78583c26423aaece05cfddc04c9 as per gilles request . the work on revamping the random packages is perfoemd in the random - ravamp branch .,reverting commit d8e2f892e48423fda73204be3ec239d282e71c65 as per gilles request . the work on revamping the random packages is perfoemd in the random - ravamp branch .,reverting commit 8a35ca4f8e19b914a8503d1d5156212363cbaf10 as per gilles request . the work on revamping the random packages is perfoemd in the random - ravamp branch .,reverting commit 8d6d088622f8e4ea89e66ccbe097510fb4c932fd as per gilles request . the work on revamping the random packages is perfoemd in the random - ravamp branch .,reverting commit e34f50dd1083fa8ed9fe25fe701b64bd2ea7efc0 as per gilles request . the work on revamping the random packages is perfoemd in the random - ravamp branch .,reverting commit 581b474f4b194731eb9cb22cdde7330a1ec81c3b as per gilles request . the work on revamping the random packages is perfoemd in the random - ravamp branch .,reverting commit f9e72000a17eb9d524b38a9f2c982c037dd94891 as per gilles request . the work on revamping the random packages is perfoemd in the random - ravamp branch .,reverting commit 4fc5b3402c58d6a4b317bf23b896ea91d22af6fe as per gilles request . the work on revamping the random packages is perfoemd in the random - ravamp branch .,reverting commit ffae3bdbb6740e336a223a82a3dd545c24cde7b5 as per gilles request . the work on revamping the random packages is perfoemd in the random - ravamp branch .,reverting commit 921d0d60d40d8fbda29f14a64e848c70026ea32e as per gilles request . the work on revamping the random packages is perfoemd in the random - ravamp branch .,reverting commit 87497c72460c9c58f829a372d741b386fc2ac8f8 as per gilles request . the work on revamping the random packages is perfoemd in the random - ravamp branch .,reverting commit ca01fdf5808dcaf5bdb6e1c09a7de70a0adc0d28 as per gilles request . the work on revamping the random packages is perfoemd in the random - ravamp branch .,reverting commit e0d17fed51f5018fc34578699d824c20efc44368 as per gilles request . the work on revamping the random packages is perfoemd in the random - ravamp branch .,improved formatting of the benchmarking report .,fixed calls to methods that now have an additional parameter .,"math - 1158 . new ""sampler"" interface and ""createsampler"" factory method defined in ""realdistribution"" interface . default sampling implementation defined in ""abstractrealdistribution"" ( using the ""inversion method"" ) . overridden in ""normaldistribution"" ( code copied from ""bitsstreamgenerator"" ) and ""betadistribution"" .",math - 1158 . syntactic sugar .,math - 1158 . utility method instead of explicit loop .,"math - 1158 . sampler functionality defined in ""enumerateddistribution"" . method ""createsampler"" overridden in ""enumeratedrealdistribution"" .",math - 1158 . use new sampler api .,"math - 1158 . method ""createsampler"" overridden in ""uniformrealdistribution"" .","math - 1158 . method ""createsampler"" overridden in ""constantrealdistribution"" .","math - 1158 . method ""createsampler"" overridden in ""paretodistribution"" .","math - 1158 . method ""createsampler"" overridden in ""exponentialdistribution"" .","math - 1158 . method ""createsampler"" overridden in ""gammadistribution"" .","math - 1158 . method ""createsampler"" overridden in ""lognormaldistribution"" .",added unit test .,math - 1339 . avoid unnecessary object creations and method calls .,fix ode integration with close events previously integration would crash when two event detectors triggered events within the root finder's tolerance of each other . now all events are handled in order and integration proceeds . fixes math - 1342,math - 1158 removed deprecated sampling api .,"math - 1158 removed deprecated sampling api ( and constructors ) . in this pass , the integer distributions have been updated . class ""randomdatagenerator"" has been reverted to use the old rng implementation ( a wrapper is created whenever it must be passed to a distribution's ""createsampler"" method ) .",math - 1337 adaptor from new to old api . class is deprecated : it is temporarily provided to allow testing of the new rngs ( in user applications ) with minimal changes .,math - 1340 avoid exception swallowing .,math - 1343 unnecessary recomputation .,"math - 1158 adapt ""examples"" code to the new sampler api .",math - 1290 utilities for manipulating arrays of complex numbers . also fixes * math - 1291 : method name change * math - 1349 : method for checking equality of arrays of complex numbers ( in unit tests ) thanks to eric barnhill .,"math - 1348 subclass of ""java . util . random"" .","example code updated . usage of ""jdkrandomadaptor"" .","math - 1351 new sampling api for multivariate distributions ( similar to changes performed for math - 1158 ) . unit test file renamed in accordance to the class being tested . one failing test "" @ ignore""d ( see comments on the bug - tracking system ) .",adding test coverage for math4 . analysis . funtiona and euclidean . twod,increasing coverage for complexformat,"math - 1355 use ""diagonalmatrix"" class . thanks to kazuhiro koshino for the report .",math - 1356 handle special cases for which the computation would otherwise produce nan . thanks to thomas lacroix for the report .,fixed failing unit test . source of failure was math - 1340 : expected exception is now wrapped in another exception .,"fixed failing tests . source of failure was math - 1355 : ""eigendecomposition"" was assuming that a diagonal matrix could be made non - diagonal . added a utility method that creates a dense matrix from an array specifying its diagonal elements .","added changes to complexutils . java proposed in feature - math - 1290 : array - wise conversion and extraction methods for converting complex [ ] arrays to double and float arrays , split and interleaved , and vice versa ; also extracting arrays of absolute value and argument .","added testing for new complexutils methods , comparing results between complex and double / float methods",fixed bug in unit test ( french locale ) .,math - 1015 gauss - laguerre quadrature scheme . thanks to thomas neidhart .,math - 1015 gauss - laguerre quadrature scheme . thanks to thomas neidhart .,math - 1335 use new rng api .,math - 1335 use new rng api .,math - 1335 use new rng api .,math - 1335 use new rng api .,math - 1335 use new rng api . unrelated code comments removed in unit test .,math - 1335 use new rng api .,math - 1335 use new rng api .,math - 1335 use new rng api .,math - 1335 use new rng api .,"math - 1335 use new rng api . unit tests rewritten to avoid unnecessary usage of ""randomdatagenerator"" ( cf . math - 1341 ) .",math - 1335 use new rng api .,math - 1335 use new rng api .,math - 1335 use new rng api .,math - 1335 use new rng api .,math - 1335 use new rng api .,math - 1335 use new rng api .,math - 1335 use new rng api .,math - 1335 use new rng api .,math - 1335 use new rng api .,math - 1335 use new rng api .,math - 1335 use new rng api .,"math - 1341 replacement for ""o . a . c . m . random . randomdatagenerator"" . features : * no trivial syntactic sugar for sampling from distributions * no duplicate code ( secure vs non - secure data generation share the same code ) * no lazy initialization new class also obsoletes class ""randomgeneratorfactory"" .",math - 1341 unit tests .,"use explicit constructor invocation ( ""this"" ) .",math - 1341 select a seed that make unit tests pass .,"math - 1341 use ""randomutils"" instead of ""randomdatagenerator"" .","math - 1341 avoid ""unchecked cast"" warning .",math - 1365 class requires custom serialization after moving to the new rng api ( cf . math - 1360 ) .,math - 1365 adapt unit test to the changed signature of the constructor .,"math - 1366 implementation of the rng was moved to package ""o . a . c . m . rng . internal . source32"" .",changed math . ulp in complexutilstest to 0 . fixed some doc in complexutils that was getting a style complaint .,"math - 1366 deprecation . interface is not removed yet : application developers might have to perform non - trivial adaptation to the new api ( namely if they were using the ""setseed"" methods ) .",math - 1369 move class to where it belongs .,math - 1319 deprecating class that it relies on a deprecated api ( cf . math - 1366 ) .,initialize at declaration . thanks to dave brosius .,unnecessary string creation . thanks to dave brosius .,perform computation / allocation only if needed . thanks to dave brosius .,math - 1376 fixed incorrect iteration number ( variable was not updated ) . thanks to thomas weise for the report and fix .,math - 1377 short - circuit unnecessary computations .,"formatting ( tabs , alignment ) .",renamed o . h . stat . inference . testutils to inferencetestutils,"fixed derivativestructure . pow ( 0 . 0 ) . x ^ 0 is always 1 . 0 , regardless of x ( even if x is nan in fact ) .",fix derivativestructure . pow for 0 argument and power less than 1 .,"fix ""fastmath#round ( . . ) "" to comply to changed contract of ""math#round ( ) "" in java 8",fix kthselector to consider natural order of doubles,disable the math . round ( ) test failing with java 7 ( fixed in java 8 ),math - 1383 modifications required following rng - 10 .,usage examples . code updated as a consequence of math - 1383 .,"usage example ( userguide ) . micro - benchmarking of random number generators ( ""commons rng"" ) using ""perftestutils"" .",use { } for blocks .,math - 1387 : adding retryrunner to randomutilsdatageneratorabstracttest,math - 1387 : adding retryrunner to randomutilsdatageneratorjdksecurerandomtest,math - 1389 : performance improvement for array2drowrealmatrix . getsubmatrix ( ),"code update ( following change in ""commons rng"" ) .",math - 1396 : overflow .,depend on commons rng v1 . 0 official release .,"math - 1361 : unit test ( disabled ) . example code that shows the issue . unit test set to "" @ ignore"" since it takes a long time ( testing many seeds ) .",typos .,"depend on ""commons rng"" ( v1 . 0 ) .","math - 1393 : remove functionality provided by ""commons rng"" .","run the two ""home - made"" benchmarks .",make tolerance more stringent for trivial case ( unit test ) .,add unit test .,formatting ( unit test ) .,"math - 1405 as per the discussion on the jira page : * modified method ""hasties"" in order to use a single way for detecting ties . * modified method ""jitter"" : add a random value that will modify the least significant bits of the number to be jittered . * simplified method ""fixties"" . * when nan values are present in the data , an exception is thrown . formatting of javadoc . added unit tests .",math - 1413 add generics to the frequency class,"math - 1284 : vector no longer extends point . replace / rename vector ? d classes with coordinate ? d classes which implement both vector and point . when there are multiple implementations of the same method which would confuse the compiler , prefer the one which matches the documentation of the method .",math - 1382 : unnecessary copying . thanks to stefan bunk for the report and fix . closes #42,"depend on snapshot version of ""commons rng"" . replace usage of ""boxmullergaussiansampler"" ( to be deprecated in the next version of ""commons rng"" ) . update unit tests that are overly sensitive to the sequence generated by the rng .","math - 1416 : depend on ""commons numbers"" . replaced class ""precision"" by its equivalent in module ""commons - numbers - core"" .","math - 1416 : depend on ""commons numbers"" . replaced class ""arithmeticutils"" by its equivalent in module ""commons - numbers - core"" .","fixed over - zealous ""search - and - replace"" .","math - 1284 : replace uses of ""vector2d"" in comments and supporting files with ""cartesian2d"" .",math - 1284 : replace uses of vector3d in user guide with cartesian2d .,"math - 1284 : replace uses of ""vector1d"" in comments and supporting files with ""cartesian1d"" .",math - 1284 : restore vector1d class as an abstract implementation of vector < euclidean1d > and now cartesian1d extends vector1d . restore the public interface of vector1dformat to act on vector1d .,math - 1284 : restore vector2d class as an abstract implementation of vector < euclidean2d > and now cartesian2d extends vector2d . restore the public interface of vector2dformat to act on vector2d .,math - 1284 : restore vector3d class as an abstract implementation of vector < euclidean3d > and now cartesian3d extends vector3d . restore the public interface of vector3dformat to act on vector3d .,fix a bug that sometimes binomial test return probability greater than 1,math - 1417 : incorrect loop start . thanks to jean - françois lecomte for the report and the fix .,fix all checkstyle issues ( missing javadocs params and trailing white space ),removed deprecated instance field and associated contructors . the rng instance is passed as argument to the methods that require it .,"made class fields ""private"" .","made field ""private"" ( unit test ) .",unit tests should have their own tolerance settings .,probable typo ( tolerance setting in unit test ) .,"math - 1416 : depend on ""commons numbers"" ( module ""commons - numbers - gamma"" ) . transitional state ( until issue numbers - 39 is done ) .","math - 1416 : depend on ""commons numbers"" ( module ""commons - numbers - gamma"" ) .","math - 1416 : depend on ""commons numbers"" ( module ""commons - numbers - gamma"" ) .","math - 1416 : replaced usage of combinatorics code with equivalent calls to ""commons numbers"" .","math - 1416 : deleted code ported to ""commons numbers"" ( module ""commons - numbers - combinatorics"" ) .",missing javadoc comment .,"math - 1416 : depend on ""commons numbers"" ( module ""commons - numbers - arrays"" ) .","math - 1416 : delete utilities now in ""commons numbers"" .","implementation details should not be ""public"" .","math - 1416 : depend on ""commons numbers"" . use utility methods now defined in module ""commons - numbers - angle"" .","math - 1416 : delete functionality available in ""commons numbers"" .","math - 1419 : invalid usage of exception in polynomialsplinefunction fix order of parameter for numberistoosmallexception when length of knots is less than 2 in the constructor of polynomialsplinefunction to be fit with the definition of the exception . moreover , boundedisallowed value is changed to true since 2 is also allowed value . change the error message format for this exception appropriately in english and french . since this does not affect any error during using the library , but to make the code more concrete , following definition strictly is important things to implement functionalities .",math - 1419,"math - 1421 : code refactoring . replaced unnecessary usage of ""pow"" function . reordered some operations . it fixes the reported case where the lower bound was negative ( see unit test ) , but it might not be sufficient to avoid the problem in all cases .",avoid repeated computations .,math - 1425 : overridden methods for improved performance . thanks to christoph dibak .,"math - 1426 : add constructor that takes a ""double [ ] "" argument . thanks to karl richter .","math - 1429 : ""unitsphererandomvectorgenerator"" replaced by ""unitspheresampler"" . functionality moved to ""commons rng"" : https : / / issues . apache . org / jira / browse / rng - 39","explicitly use class from ""commons rng"" . change removes the dependency loop between ""o . a . c . math4 . random"" and ""o . a . c . math4 . distribution"" packages .",math - 1436 : adding fix to suborientedpoint to use the parent hyperplane's tolerance value in the split method ; adding unit test for suborientedpoint,math - 1436 : adding checks for edge cases related to infinite lines in polygonsset ; adding two test cases to polygonssettest,no tabs .,no tabs .,math - 1439 : updating o . a . c . m . geometry . partitioning . characterization class to gracefully handle situation where a bsp node has the same hyperplane as the sub - hyperplane it is being tested against,"update outdated code . in latest snapshot version of ""commons rng"" , class ""marsaglialognormalsampler"" does not exist anymore .",math - 1442 : fixing size calculation in polyhedronsset and updating the code to make the algorithm clearer,"math - 1443 : depend on ""commons statistics"" .","math - 1443 : depend on ""commons statistics"" .","math - 1443 : depend on ""commons statistics"" .","math - 1443 : depend on ""commons statistics"" .","math - 1443 : depend on ""commons statistics"" .","math - 1443 : depend on ""commons statistics"" .","math - 1443 : depend on ""commons statistics"" .","use code moved to ""commons rng"" ( v1 . 1 snapshot ) .","math - 1443 : depend on ""commons statistics"" .","math - 1443 : depend on ""commons statistics"" .","math - 1443 : depend on ""commons statistics"" .","math - 1443 : depend on ""commons statistics"" . simplify classes that remain in ""commons math"" .","math - 1443 : depend on ""commons statistics"" . simplify classes that remain in ""commons math"" .",math - 1437 : adding additional unit tests and test utilities for o . a . c . m . geometry . euclidean . twod and o . a . c . m . geometry . euclidean . threed,no tabs allowed .,"math - 1441 : cache instance of ""tdistribution"" .","revert ""math - 1441 : cache instance of ""tdistribution"" . "" this reverts commit 1f07a0bf70049cb0a2f6b52ea7c261da5adb1abb . caching does not seem to provide any perfomance improvement .",math - 1447 : adding check for infinite lines when filtering spurious vertices in polygonsset vertex loop creation,math - 1449 : fixing polygonsset . getbarycenter ( ) to return cartesian2d . nan for empty regions,math - 1449 : updating unit test syntax based on code review,math - 1450 : fixing polygonsset to return correct last vertex for open loops,math - 1437 : adding more tests to polygonssettest ; tests rely on the fix for math - 1450,math - 1437 : updating test syntax for consistency,opennlp - 730 added a missing return statement . without the return all the events were skipped .,opennlp - 744 added support for attribute annotation in the brat . ann files,"opennlp - 764 - applied patch from pablo duboue , clearing adaptive data after doc processing",opennlp - 777 - naive bayes classifier ( patch from cohan sujay carlos ),replace stringtokenizer with opennlp tokenizer the stringtokenizer was used to perform white space tokenization long before the whitespacetokenizer became a part of opennlp . this change also allows to pass in some tokenizer to make it easier to tokenize an input sentence without using pipes . see issue opennlp - 857 for more details . thanks to tristan nixon for providing a patch!,increase backward compatibility to two minor versions see issue opennlp - 896,remove deprecated code from util package this closes apache / opennlp#24 see issue opennlp - 908,restores type parameter in namefinder this closes #34 see issue opennlp - 719,"opennlp - 880 : refactor data indexer 1 . ) added method to eventtrainer – train ( dataindexer indexer ) –then i added the method to abstracteventtrainer . no other code needed to be changed . 2 . ) created a new class – pluggableparmeters : only abstracttrainers had access to getxxxparam ( value , default ) . so i pulled out this functionality into a separate class . now both abstracttrainers and abstractdataindexers can hold parameters . 3 . ) refactored dataindexer . this touched a lot of code . added init ( map , map ) method and index ( objectstream ) method . changed 1 - pass and 2 - pass dataindexers . everywhere 1 - pass / 2 - pass indexers where created , i changed the constructor , and added the init and index methods . 4 . ) changed gis . dotrain ( indexer ) to use the parameters passed in the init method . 5 . ) qntrainer – created a working init method . changed the isvalid method so it is not the init method . this closes #14",opennlp - 927 : removed pluggableparameter fixes opennlp - 927 closes apache / opennlp#55,opennlp - 947 : trivial fix to trigger git mirror resync,opennlp - 946 : gistrainer should extend abstracteventtrainer this closes #104,opennlp - 904 harmonize lemmatizer api and function to get multiple lemmas opennlp - 904 add minor correction after pr comment,opennlp - 125 : make pos tagger feature generation configurable,opennlp - 958 : add pos name finder feature generator closes apache / opennlp#170,opennlp - 1075 add streams for sentence and token samples for conllu,opennlp - 1079 added bratdocumentparser . closed annotation stream in bratdocument,opennlp - 1119 select sentences randomly and shuffle order of samples the samples should be build from randomly picked lines taken from a sentences file . the samples in the stream should be shuffled .,opennlp - 1123 loglikelihood threshold can be set by user,use string . join instead of manual join,update jersey to 2 . 25 and use grizzly http server see issue opennnlp - 897,replace manual array copy see issue opennlp - 871,opennlp - 871 : cleanup for java 8 this closes #12,opennlp - 899 : replace deprecated code from tokenizer trainer this closes #13,opennlp - 900 : lemmatizerme and dictionarylemmatizer share data format this closes #16,define update and clearadaptivedata as default methods see issue opennlp - 856,opennlp - 871 : cleanup for java 8 and remove deprecated tokenizer code closes #17,opennlp - 870 : contextgenerator is now generic this closes #19,opennlp - 871 : clean up code base for release this closes #20,"opennlp - 901 : replace references to deprecated namefinderme . train ( ) , this closes apache / opennlp#21","opennlp - 845 : evaluator . evaluatesample ( ) sends the wrong argument to listener . correctlyclassified ( ) , this closes apache / opennlp#22",updates morfologik add - on with 1 . 7 . 0 interfaces the morfologik add - on was not compatible with the latest opennlp code . this also simplifies the implementation of the wrapper . previous code was a little language specific . see issue opennlp - 902,correctly check for model compatibility the major versions must match the last two minor versions should be supported see issue opennlp - 906,"opennlp - 915 : replace occurrences of junit . framework . * with org . junit . * , this closes apache / opennlp#31","opennlp - 910 : add checkstyle , this closes apache / opennlp#29","opennlp - 910 : add checkstyle , this closes apache / opennlp#36","opennlp - 910 : add checkstyle , this closes apache / opennlp#37",opennlp - 83 : add equals to abstractmodels and referenced classes this closes #40,"opennlp - 922 : refactor equals and hashcode , add missing hashcode this closes #42 also adds a checkstyle rule to enforce presence of both hashcode and equals","opennlp - 920 : enforce typesafety in sequencetrainer , this closes apache / opennlp#41",opennlp - 929 : gistrainer must call the indexer . index ( ) method this closes #43,opennlp - 137 : add execution time to cli command line this closes #44,"opennlp - 924 : remove all old and leftover main methods , this closes apache / opennlp#45",opennlp - 926 : replace crlf with lf line endings,opennlp - 719 : override any name type with specified type closes apache / opennlp#48,opennlp - 923 : wrap all lines longer than 110 chars,opennlp - 935 : remove catch block to swallow ioexception,opennlp - 137 : terminate execution time print with newline this closes #54,opennlp - 938 : add letsmt format support,"opennlp - 928 : deprecate old uima trainers and some utils the deprecated utils are only used by the trainers and have no other purpose , they should be removed as well .","opennlp - 930 : write test for regexnamefinderfactory , this closes apache / opennlp#50",opennlp - 696 : add test for snowball stemmers thanks to ajay bhat for providing a patch!,"opennlp - 940 : use all cores for build , user 4 cores for parser eval",opennlp - 937 : print error and hint for insufficient training data,opennlp - 939 : add format support for moses,opennlp - 931 : deprecate old and unused model reader and writers,opennlp - 942 : replace integerpool usage with auto boxing,"opennlp - 123 : feature cutoff should only be done by data indexers , this closes apache / opennlp#65",opennlp - 919 : remove type variable from varargs,opennlp - 675 use verbose param to control printing to stdout,opennlp - 166 : remove or deprecate slack parameter,opennlp - 719 : fixes issue with nf default type in cli fixes opennlp - 719,opennlp - 947 : organize imports according to new order this closes #75,opennlp - 948 : use objects . requirenonnull when possible,opennlp - 949 : add more eval tests for qn and others,"nojira : trivial fixes , this closes apache / opennlp#78","opennlp - 950 : deprecate documentcategorizer . categorzie ( string ) variants , this closes apache / opennlp#79",opennlp - 953 : remove deprecated model readers and writers this closes #82,opennlp - 954 fix the maxent qn results this closes #81,opennlp - 955 : fixes docbegin feature generator the docbegin was mapped to previousmapfeaturegenerator instead of documentbeginfeaturegenerator . also changed the name of the factory by appending the sufix . fixes opennlp - 955 closes apache / opennlp#84,opennlp - 959 : correct sentence segmenations in labeld names,opennlp - 961 : add support to parse event annotations in brat files,opennlp - 965 : use utf 8 constant instead of charset . forname,opennlp - 890 - added cli for lm#calculateprobability,opennlp - 969 : added constructor to trainers that takes a trainingparameter . this closes #95,"opennlp - 962 : dictionary should implement serializableartifact , this closes apache / opennlp#90","opennlp - 944 : remove deprecated indexer code from ml , this closes apache / opennlp#96","opennlp - 972 - add lm#predictnexttokens , rename to ngramlmtool , this closes apache / opennlp#100",opennlp - 176 : switch language codes to iso - 639 - 3 this closes #114,opennlp - 371 : throw an exception if training data only has one outcome,opennlp - 968 : sets to default printing the detailed f report this sets the parameter - detailedf true as default . in a major release we can remove it . closes apache / opennlp#98,opennlp - 944 : add correction param and const back to gis reader / writer the two parameters need still to be written and read to maintain backward compatibility with older models and 1 . 7 . 0 and 1 . 7 . 1 .,opennlp - 970 : adds confusion matrix to namefind adds a refined report to namefinder closes apache / opennlp#97,opennlp - 973 : respect setting of printmessages in dataindexer impls,opennlp - 980 : deprecate low - level feature constructors and methods,"opennlp - 964 : ignore license , notice and readme files in the model",opennlp - 977 : remove deprecated map methods,opennlp - 975 : add format support for conll - u format,opennlp - 978 : set name finder defaults to perceptron and cutoff zero,opennlp - 981 : add training stream hash to abstracteventtrainer . this closes #118 .,opennlp - 983 : make suffix / prefix length configurable this closes #121,nojira : add checkstyle for new lines and fix existing files this closes #123,opennlp - 986 - stupid backoff as default lm discounting,opennlp - 229 : add test for namefindersequencevalidator this closes #125,opennlp - 982 : allow loading of 1 . 5 . x models this closes #129,opennlp - 989 : fix validation of cont after start with different type this closes #126,opennlp - 1001 : changes signature of chunker sequence validator chunker sequencevalidator should have access to both token and pos tag closes #137,"opennlp - 994 : remove deprecated methods from the document categorizer , this closes apache / opennlp#133","revert ""opennlp - 1002 remove deprecated gis class"" this reverts commit efa257676280abd316bb677e5a8de5cb9fe1dd73 .",opennlp - 1002 remove deprecated gis class,opennlp - 1000 : add a test case for the bilounamefindersequencevalidator this closes #139,opennlp - 1003 : write a test case for the biocodec class this closes #141,opennlp - 1004 : write a test case for the biloucodec class this closes #142,opennlp - 1005 : implement areoutcomescompatible for biloucodec this issue closes #144,opennlp - 1011 : fix pos eval tests,opennlp - 1006 : refactor usage of tag constants in sequence validators,opennlp - 1012 : write a test case for namesampletypefilter,opennlp - 1014 : add more tests for featuregen this closes #151,opennlp - 1015 : add tests for dataindexers closes #152,opennlp - 1016 : add more tests for stringlist,"opennlp - 1010 : fix naivebayes model writer the previous sortvalues method was based on perceptron , but for some reason it was not working for naivebayes . changed it to the one from gis fixed it . this closes apache / opennlp#154","opennlp - 1019 : parser eval test is not correctly checking the result , this closes apache / opennlp#155","opennlp - 1025 : add javadocs and test for filetostringsamplestream , this closes apache / opennlp#161","opennlp - 1024 : add unit tests and javadocs for directorysamplestream , this closes apache / opennlp#160",opennlp - 1020 : mockinputstreamfactory . createinputstream should create a new inputstream . this closes apache / opennlp#156,"opennlp - 1022 : fix documentation to remove references to 'save xxxmodel to database , this closes apache / opennlp#158",opennlp - 1018 : add more tests for objectstreams . . this closed apache / opennlp#164,opennlp - 1027 : add tests for event . this closes apache / opennlp#165,opennlp - 1027 : add tests for event . the previous commit doean't have eventtest,opennlp - 1030 : add unit test for tokennamefindertool,opennlp - 1028 : add tests for featuregenerators in doccat . this closes apache / opennlp#166,opennlp - 1031 : use getintparameter when getting beam size . this closes apache / opennlp#169,opennlp - 1034 : move serializers to resource mapping to generatorfactory closes #173,"opennlp - 1029 : add tests for insufficienttrainingdataexception , closes apache / opennlp#167","opennlp - 1033 : adds unit tests for opennlp . tools . ngram , closes apache / opennlp#172",opennlp - 1032 : add tests for trainingparameters . this closes apache / opennlp#171,"nojira : fix the codestyle violations in namesampletypefiltertest , set severity to 'error' for indent violations ; closes apache / opennlp#175",opennlp - 1040 : add ontonotes4 training data verification,opennlp - 1041 : verify test data before running tests,opennlp - 1042 : correctly tokenize reference parse text closes #180,opennlp - 1043 : ensure files are always loaded in same order closes #181,opennlp - 1036 : use object values in trainingparameters instead of string . this closes apache / opennlp#176,opennlp - 1039 : perceptrontrainer should call super . isvalid ( ) in its isvalid ( ) . this closes apache / opennlp#177,opennlp - 1021 : change xv folds from 10 to 5 to reduce runtime closes #184,"opennlp - 1035 : add unit tests and javadocs for brownbigramfeaturegenerator , closes apache / opennlp#174",opennlp - 1046 : correctly join tokens to text string the text was one space too long which results in a different parse tree if the method is used to reproduce an existing parse tree as it is done by the parser evaluation tool .,"nojira : trivial fixes , use try - with - resources , closes apache / opennlp#186",opennlp - 1048 : add stemmer for irish closes #189,opennlp - 1050 : add formats support for irish sentence bank closes #191,opennlp - 1026 : replace references and usages of o . t . u . heap with sortedset closes #187,opennlp - 1044 : add validate ( ) which checks validity of parameters in the process of the framework . this closes apache / opennlp#192,opennlp - 1056 : fix nullpointerexception in dictionarylemmatizer,opennlp - 1062 : add lemmatizer eval tests,opennlp - 1059 set model version before creating the pos model,opennlp - 1060 : fix computation of hash for the parser,opennlp - 1061 add functionality to dictionarylemmatizer to output several lemmas for a given word postag pair closes #202,opennlp - 1064 : disable evaldutchmaxentqn test,opennlp - 1065 : use iso - 639 - 3 in test code,opennlp - 1059 : adjust evalalltypeswithposnamefinder for larger beam size the 1 . 5 . x pos models are loaded with a larger beam size to work with the parser,opennlp - 1066 : add morfologiklemmatizer constructor taking a dictionary closes #208,opennlp - 788 : add languagedetector tool,opennlp - 1074 : reduce visibility of eval methods,opennlp - 1076 : add validation of spans to sentencesample,opennlp - 1077 made the constructors for the bratnamesamplestream public .,opennlp - 1078 : fix npe in irishsentencebank reader closes apache / opennlp#219,opennlp - 1081 : fix dictionary support to generatorfactory : : extractartifactserializermappings closes #220,opennlp - 1086 : refactor the data indexers the following has been done : - use java 8 streams where it makes sense - deduplicate the index method and have one common one - avoid having all predicate strings twice in memory for cutoff filter,opennlp - 1083 : conll - u sample contraction handling closes apache / opennlp#222,opennlp - 1085 : add methods to write model to file or path,opennlp - 1087 : add convenience methods to load from path,opennlp - 1091 : fixing some issues found with findbugs and ide closes #229,opennlp - 1094 : remove pmap indirection,adding sentiment analysis code to opennlp : opennlp - 840,opennlp - 1082 : add eos to sdeventstream if missing closes apache / opennlp#234,opennlp - 1096 : swap for loops in ngram generation to be cache friendly,opennlp - 1097 : enable the normalizers by default in langdetect,opennlp - 1092 : fix pos model serialization bug,revert merging of sentiment analysis component,opennlp - 1102 : adjust test for contraction change,opennlp - 1105 : add a profile and category for high mem tests,"revert ""opennlp - 1082 : add eos to sdeventstream if missing"" this reverts commit b5b6d5c27443e1837b80b089206aad480852cd1c .",opennlp - 1110 : changes visibility of languagedetectorcontextgenerator also it extracts an interface for it and update documentation .,"opennlp - 1116 : added concatenation of collection of stream . renamed method , added test",opennlp - 1117 : fix cmd line training time,opennlp - 1118 : adds data verification for eval tests .,opennlp - 1120 : make printstream protected in evaluationerrorprinter,opennlp - 1121 : sort namesample spans to avoid serialization issues,opennlp - 1122 : leipzig sample should allow skip initial entries,opennlp - 1125 : change misclassified report layout for languagedetector,opennlp - 1124 : optimize xml parser configuration,opennlp - 1128 : fix checksum in sourceforgemodeleval . verifytrainingdata,opennlp - 1130 sentence detector format support for nkjp,opennlp - 1131 : ignore hidden files in leipzig format parser,opennlp - 1132 : fail with exception if not enough lines in leipzig parser,opennlp - 1134 : replace java . util . log with println,opennlp - 1137 : add more tests and check overlapping of name spans to namesample ( #268 ),opennlp - 1138 : add more tests to span ( #269 ) thanks everyone for reviewing this!,opennlp - 1139 : biloucodec should use its own constants ( #270 ) thanks everyone for reviewing this!,opennlp - 1133 : gistrainer can use the gaussiansmoother,opennlp - 1142 : add an annotation to mark unstable apis,opennlp - 1144 : add word vector support,opennlp - 1146 : remove unnecessary serialversionuid ( #277 ),"opennlp - 1149 : remove unused member in plaintextbylinestream and change the type of encoding ( #280 ) opennlp - 1149 : remove unused member in plaintextbylinestream , change the type of encoding and add null - check for inputstreamfactory",opennlp - 1151 : all sample objects should implement serializable for easy interation into other tools ( #282 ),no jira - added javadoc to normalizers ( #285 ) no jira - add javadoc to normalizers,opennlp - 652 add 20 newsgroup format support,opennlp - 1155 : remove deprecated leipzig doccat format support,opennlp - 1158 : made nameann field public for json serialization,opennlp - 1165 : add id to overlapping annotation exception in namesample,opennlp - 1166 : twopassdataindexer fails if features contain \ n,opennlp - 1168 : resolve concurrency issue in pos tagger,opennlp - 1167 - remove wv#todouble / floatarray ( #295 ),opennlp - 1169 - wvtable fetches wvs by string ( #297 ),opennlp - 1172 : add annotatornotes to bratdocument,opennlp - 1171 : some tests create temp files and directories but never … ( #298 ) * opennlp - 1171 : some tests create temp files and directories but never delete them,opennlp - 1154 : change the xml format for feature generator config ( #286 ),opennlp - 1159 : avoid letting users specify aggregatedfeaturegeneratorfactory in xml config ( #300 ),opennlp - 1180 - lm api switches to string [ ] ( #304 ),opennlp - 1160 : avoid letting users specify cachedfeaturegeneratorfactory in xml config ( #305 ),[ opennlp - 941 ] added eval support to detokenizer,opennlp - 1194 : adds type name filter to bratdocumentparser,opennlp - 1196 : move arraymath to a more general package and add its tests ( #314 ),"opennlp - 1195 : use arraymath . argmax ( ) rather than private maxindex ( ) in perceptrontrainer , naivebayestrainer , abstractmodel and gistrainer ( #315 )",opennlp - 1197 : support japanese letters in featuregeneratorutil,opennlp - 1193 : add support for multi fragment annotation,opennlp - 1198 : add more tests to ngramgeneratortest ( #319 ),opennlp - 1199 : correct loop bounds ngramgenerator . generate,opennlp - 1200 : add util to sum features in context,"parquet - 229 add a strict thrift projection api with backwards compat support currently , the thrift projection api accepts strings in a very general glob format that supports not only wildcards like ` * ` and ` ? ` and expansions ( ` { x , y , z } ` ) but also character classes ` [ abc ] ` , and negation . because of this flexibility , it's hard to give users good error reporting , for example letting them know that when they requested columns `foo . bar . { a , b , c } ` there is actually no such column `foo . bar . c` . this pr introduces a new syntax that supports a more restrictive form of glob syntax and enforces that all * * expansions * * of a glob match a column , not just that all globs match a column . the new syntax is very simple and only has four special characters : ` { ` , ` } ` , ` , ` , and ` * ` it supports glob expansion , for example : `home . { phone , address } ` or `org . apache { - incubator , } . foo` and the wildcard ` * ` which is treated the same way as java regex treats ` ( . * ) ` , for example : `home . * ` or `org . apache * . foo` in the new syntax glob paths mean ""keep all the child fields of the field matched by this glob"" , just like variable access would work in a programming language . for example : `x . y . z` means keep field `z` and all of its children ( if any ) . so it's not necessary to do `x . y . z . * ` . however , `x . y . z` would not keep field `x . y . zoo` . if that was desired , then `x . y . z * ` could be used instead . setting `""parquet . thrift . column . filter""` will result in the same behavior that it does currently in master , though a deprecation warning will be logged . the classes that implement the current behavior have been marked as deprecated , and using this will log a warning . setting `""parquet . thrift . column . projection . globs""` will instead use this new syntax , and entry points in the various builder's in the codebase is added as well . this pr does a little bit of cleanup as well , moving some shared methods to a `strings` class and simplifying some of the class hierarchy in `thriftschemaconvertervisitor` . there are a few ` / / todo why ? ` added as well that i wanted to ask about . author : alex levenson < alexlevenson @ twitter . com > closes #150 from isnotinvain / alexlevenson / strict - projection and squashes the following commits : 6c58e1c [ alex levenson ] clean up docs 1aab666 [ alex levenson ] merge branch 'master' into alexlevenson / strict - projection 92b6ba6 [ alex levenson ] merge branch 'master' into alexlevenson / strict - projection ceaf6cd [ alex levenson ] update packages a28dc19 [ alex levenson ] merge branch 'master' into alexlevenson / strict - projection ebc4761 [ alex levenson ] remove unneeded todo c2e12c5 [ alex levenson ] update docs eecf5f3 [ alex levenson ] merge branch 'master' into alexlevenson / strict - projection 671f0b5 [ alex levenson ] merge branch 'master' into alexlevenson / strict - projection 298cad8 [ alex levenson ] add warning 8b7e4bb [ alex levenson ] add more comments to strictfieldprojectionfilter 8f65ed2 [ alex levenson ] add tests for strict projection filter c81d9e1 [ alex levenson ] docs and cleanup for fieldprojectionfilter 71139a7 [ alex levenson ] add tests for fieldspath 7d17068 [ alex levenson ] tests for wildcardpath 8a3d2af [ alex levenson ] add some tests f3fd931 [ alex levenson ] more docs 0b190c3 [ alex levenson ] add more comments 6e67df5 [ alex levenson ] add a strict thrift projection api with backwards support for the current api","parquet - 278 : enforce non empty group on messagetype level as columnar format , parquet currently does not support empty struct / group without leaves . we should throw when constructing an empty grouptype to give a clear message . author : tianshuo deng < tdeng @ twitter . com > closes #195 from tsdeng / message type enforce non empty group and squashes the following commits : a286c58 [ tianshuo deng ] revert change to merge parquet pr a09f6ba [ tianshuo deng ] fix test ac63567 [ tianshuo deng ] fix tests aa2633c [ tianshuo deng ] enforce non empty group on messagetype level",parquet - 243 : add avro reflect support author : ryan blue < blue @ apache . org > closes #165 from rdblue / parquet - 243 - add - avro - reflect and squashes the following commits : a1a17b4 [ ryan blue ] parquet - 243 : update for tom's review comments . 16584d1 [ ryan blue ] parquet - 243 : fix avrowritesupport bug . fa4a9ec [ ryan blue ] parquet - 243 : add reflect tests . 4c50cd1 [ ryan blue ] parquet - 243 : update write support for reflected objects . b50c482 [ ryan blue ] parquet - 243 : update tests to run with new converters . 0b7a333 [ ryan blue ] parquet - 243 : use common avroconverters where possible . 2f6825d [ ryan blue ] parquet - 243 : add reflect converters that behave more like avro . 98f10df [ ryan blue ] parquet - 243 : add avro compatible record materializer .,"parquet - 164 : add a counter and increment when parquet memory manager kicks in add a counter for writers , and increment it when memory manager scaling down row group size . hive could use this counter to warn users . author : dongche1 < dong1 . chen @ intel . com > author : dongche < dong1 . chen @ intel . com > author : root < root @ bdpe15 . sh . intel . com > closes #120 from dongche / parquet - 164 and squashes the following commits : 9bcb1ba [ dongche ] remove stats , and change returned callbacks map unmodifiable 3cbbeb9 [ dongche ] merge remote branch 'upstream1 / master' into parquet - 164 bdef233 [ dongche ] merge remote branch 'upstream1 / master' into parquet - 164 780be6d [ root ] revert change about callable and address comments 11f9163 [ dongche1 ] merge remote branch 'upstream / master' into parquet - 164 55549a5 [ dongche1 ] use callable and strict registerscallcallback method . 74054aa [ dongche1 ] use runnable as a generic callback 8782a02 [ dongche1 ] add a callback mechanism instead of shims . and rebase trunk b138b7f [ dongche1 ] merge remote branch 'upstream / master' into parquet - 164 93a4678 [ dongche1 ] parquet - 164 : add a counter and increment when parquet memory manager kicks in","parquet - 287 : keep a least 1 column from union members when projecting thrift unions currently , the projection api allows you to select only some ""kinds"" of a union , or to drop a required union entirely . this becomes an issue when assembling these records , as they will be appear to be unions of an unknown type ( how do you coerce an empty struct into a union ? ) . the way this case is handled for primitives is by supplying a default value ( like 0 , or null ) . however , with a union , you have to choose what ""kind"" of the union it will act as , and in the interest of not being misleading , this pr reads one column to figure out what the correct ""kind"" is . in the future , the better solution is to filter these records out - - a projection is really a request for a filter in this case . but for now , this should get us correctness without involving the filter api . i think this pr needs some more tests before merging , but i wanted to get it out and get some feedback now . i also refactored how thriftschemavisitor works to not be stateful , by explicitly passing state through the recursion - - this makes it much easier to reason about . * edit * this pr also includes a fix for parquet - 275 because i encountered it during testing . * edit 2 * this pr also includes a fix for parquet - 283 author : alex levenson < alexlevenson @ twitter . com > closes #189 from isnotinvain / alexlevenson / project - union and squashes the following commits : c710702 [ alex levenson ] avoid instantiating ( unused ) empty group type c43a44c [ alex levenson ] merge branch 'master' into alexlevenson / project - union d62ee8c [ alex levenson ] merge branch 'master' into alexlevenson / project - union df51f41 [ alex levenson ] fix tests 4d3f825 [ alex levenson ] address review comments 6dd95f5 [ alex levenson ] update tests to reflect changes d7cee7e [ alex levenson ] add tests for nested maps 9c34b20 [ alex levenson ] keep a sentinel column in map values 53e5580 [ alex levenson ] remove debug println c525a65 [ alex levenson ] update docs to reflect set projection rules aefb637 [ alex levenson ] do not allow partial projection of keys or set elements 8b4e791 [ alex levenson ] add tests for maps of unions 35de282 [ alex levenson ] add test for list < union > 098630f [ alex levenson ] merge branch 'master' into alexlevenson / project - union 77cc9e9 [ alex levenson ] add license header 63b80fd [ alex levenson ] more clean up 6341747 [ alex levenson ] clean up convertedfield dcd3ea9 [ alex levenson ] merge branch 'master' into alexlevenson / project - union 9ce4781 [ alex levenson ] some cleanup and comments 6964837 [ alex levenson ] keep one sentinel column in projected unions that cannot be dropped entirely 37a9bef [ alex levenson ] clean up visitor pattern for thrift types","parquet - 223 : add builders for map and list types as of now , parquet does not provide builders for maps and lists . this leaves margin for user errors . having map and list builders will make it easier for users to build these types . author : asingh < asingh @ cloudera . com > closes #148 from singhasdev / map and squashes the following commits : cc7da06 [ asingh ] pull changes made by ryan 825b5b8 [ asingh ] remove non - functional changes bec675b [ asingh ] remove required and optional version of methods that take pre - built type 6dcaa78 [ asingh ] address review comments and some clean up 544d1e4 [ asingh ] add key ( type ) and value ( type ) variants to mapbuilder f2a1697 [ asingh ] add listkey support 68c06f5 [ asingh ] add support for null value in mapbuilder f31f2b0 [ asingh ] add more tests to cover list and map value types in map builder f035439 [ asingh ] add map and list value types to map 1afa2c7 [ asingh ] address review comments 484495b [ asingh ] parquet - 223 : add builders for map and list types",parquet - 285 : implement 3 - level lists in avro this includes the write - side the changes from #83 that implement the 3 - level list structure for parquet - avro . the old commit was https : / / github . com / rdblue / parquet - mr / commit / 3589a7367c829b9eabc36b2e2e1cab31685415eb . author : ryan blue < blue @ apache . org > closes #198 from rdblue / parquet - 285 - avro - nested - lists and squashes the following commits : 3498571 [ ryan blue ] parquet - 285 : fix review issues . 67ed2f4 [ ryan blue ] parquet - 285 : add tests for new list write behavior . 6ec9120 [ ryan blue ] parquet - 285 : implement nested type rules for avro . 109111f [ ryan blue ] parquet - 285 : add a better conversion pattern for lists .,parquet - 297 : generate version class using parquet - generator author : konstantin shaposhnikov < konstantin . shaposhnikov @ sc . com > author : konstantin shaposhnikov < k . shaposhnikov @ gmail . com > closes #213 from kostya - sh / parquet - 297 2 and squashes the following commits : ddb469a [ konstantin shaposhnikov ] add comment about paddedbytecountfrombits coming from byteutils 6b47b04 [ konstantin shaposhnikov ] change versiongenerator to generate main ( ) method 10d0b38 [ konstantin shaposhnikov ] parquet - 297 : generate version class using parquet - generator 11d29bc [ konstantin shaposhnikov ] parquet - generator : remove dependency on parquet - common,"parquet - 248 : add parquetwriter . builder . this refactors the builder recently added to parquet - avro so that it can be used by all object models . the builder class is abstract and implementations should extend it . this changes the api slightly from avroparquetwriter , renaming withblocksize to withrowgroupsize . the avro builder has not been released so this isn't a breaking change . author : ryan blue < blue @ apache . org > closes #199 from rdblue / parquet - 248 - add - parquet - writer - builder and squashes the following commits : a1a25ee [ ryan blue ] parquet - 248 : add write mode and max padding to writer builder . 622af4c [ ryan blue ] parquet - 248 : add parquetwriter . builder .","parquet - 251 : binary column statistics error when reuse byte [ ] among rows author : asingh < asingh @ cloudera . com > author : alex levenson < alexlevenson @ twitter . com > author : ashish singh < asingh @ cloudera . com > closes #197 from singhasdev / parquet - 251 and squashes the following commits : 68e0eae [ asingh ] remove deprecated constructors from private classes 67e4e5f [ asingh ] add removed public methods in binary and deprecate them 0e71728 [ asingh ] add comment for binarystatistics . setminmaxfrombytes fbe873f [ ashish singh ] merge pull request #4 from isnotinvain / pr - 197 - 3 9826ee6 [ alex levenson ] some minor cleanup 7570035 [ asingh ] remove test for stats getting ingnored for version 160 when type is int64 af43d28 [ alex levenson ] address pr feedback 89ab4ee [ alex levenson ] put the headers in the right location 2838cc9 [ alex levenson ] split out version checks to separate files , add some tests 5af9142 [ alex levenson ] generalize tests , make binary . fromstring reused = false e00d9b7 [ asingh ] rename isreused = > isbackingbytesreused d2ad939 [ asingh ] rebase over latest trunk 857141a [ asingh ] remove redundant junit dependency 32b88ed [ asingh ] remove semver from hadoop - common 7a0e99e [ asingh ] revert to fromconstantbytearray for bytestring c820ec9 [ asingh ] add unit tests for binary and to check if stats are ignored for version 160 9bbd1e5 [ asingh ] improve version parsing 84a1d8b [ asingh ] remove ignoring stats on write side and ignore it on read side 903f8e3 [ asingh ] address some review comments . * ignore stats for writer's version < 1 . 8 . 0 * refactor shoudlignorestatistics method a bit * assume implementations other than parquet - mr were writing binary statistics correctly * add toparquetstatistics method's original method signature to maintain backwards compatibility and mark it as deprecated 64c2617 [ asingh ] revert changes for ignoring stats at rowgroupfilter level e861b18 [ asingh ] ignore max min stats while reading 3a8cb8d [ asingh ] fix typo 8e12618 [ asingh ] fix usage of fromconstant versions of binary constructors 860adf7 [ asingh ] rename unmodified to constant and isreused instead of isunmodifiable 0d127a7 [ asingh ] add unmodfied and reused versions for creating a binary . add copy ( ) to binary . b4e2950 [ asingh ] skip filtering based on stats when file was written with version older than 1 . 6 . 1 6fcee8c [ asingh ] add getbytesunsafe ( ) to binary that returns backing byte [ ] if possible , else returns result of getbytes ( ) 30b07dd [ asingh ] parquet - 251 : binary column statistics error when reuse byte [ ] among rows","parquet - 290 : add data model to avro reader builder this pr currently includes #203 , which will be removed when it is merged . author : ryan blue < blue @ apache . org > closes #204 from rdblue / parquet - 290 - data - model - builder and squashes the following commits : d257a2c [ ryan blue ] parquet - 290 : add avro data model to reader builder .","parquet - 246 : file recovery and work - arounds this is another way to recover data written with the delta byte array problem in parquet - 246 . this builds on @ isnotinvain's strategy for solving the problem by adding a method to the encoding to detect it . this version is more similar to the fix for parquet - 251 and includes a corruptdeltabytearrays helper class that uses the writer version . most of the file changes are to get the file writer version to encoding and the columnreaderimpl . this also repairs the problem by using a new interface , requirespreviousreader , to pass the previous valuesreader , which is slightly cleaner because the reader doesn't need to expose getter and setter methods . the problem affects pages written to different row groups , so it was necessary to detect the problem in parquet - hadoop and fail jobs that cannot reconstruct data . the work - around to recover is to set ""parquet . split . files"" to false so that files are read sequentially . this could be set automatically in issplittable , but this would require reading all file footers before submitting jobs , which was recently fixed . i think it is a fair compromise to detect the error case and recommend a solution . this also includes tests for the problem to verify the fix . replaces old pull requests : closes #217 closes #235 author : ryan blue < blue @ apache . org > closes #235 from rdblue / parquet - 246 - recover - files and squashes the following commits : 067d5ca [ ryan blue ] parquet - 246 : refactor after review comments . 3236a3b [ ryan blue ] parquet - 246 : fix parquetinputformat for delta byte [ ] corruption . 3107362 [ ryan blue ] parquet - 246 : add tests for delta byte array fix . a10b157 [ ryan blue ] parquet - 246 : fix reading for corrupt delta byte arrays . 5c9497c [ ryan blue ] parquet - 246 : parse semantic version with full version .",parquet - 342 : updates to be java 6 compatible author : nezih yigitbasi < nyigitbasi @ netflix . com > closes #248 from nezihyigitbasi / java6 - fixes and squashes the following commits : 2ab2598 [ nezih yigitbasi ] updates to be java 6 compatible,parquet - 360 : handle all map key types with cat tool's json dump when dumping a parquet map with `parquet - cat - - json` it throws a class cast exception as it doesn't properly handle all map key types . ``` java . lang . classcastexception : [ b cannot be cast to java . lang . string at org . apache . parquet . tools . read . simplemaprecord . tojsonobject ( simplemaprecord . java : 34 ) at org . apache . parquet . tools . read . simplerecord . tojsonvalue ( simplerecord . java : 119 ) at org . apache . parquet . tools . read . simplerecord . tojsonobject ( simplerecord . java : 112 ) at org . apache . parquet . tools . read . simplerecord . prettyprintjson ( simplerecord . java : 106 ) at org . apache . parquet . tools . command . catcommand . execute ( catcommand . java : 76 ) at org . apache . parquet . tools . main . main ( main . java : 222 ) [ b cannot be cast to java . lang . string ``` author : nezih yigitbasi < nyigitbasi @ netflix . com > closes #259 from nezihyigitbasi / parquet - cat - json and squashes the following commits : d047502 [ nezih yigitbasi ] add unit test e4cd545 [ nezih yigitbasi ] get rid of deprecated methods bdc8fdf [ nezih yigitbasi ] handle all map key types with cat tool's json dump,parquet - 352 : add object model property to file footers . writesupport now has a getname getter method that is added to the footer if it returns a non - null string as writer . model . name . this is intended to help identify files written by object models incorrectly . author : ryan blue < blue @ apache . org > closes #289 from rdblue / parquet - 352 - add - object - model - property and squashes the following commits : 23f8f67 [ ryan blue ] parquet - 352 : add object model property to file footers .,parquet - 352 : add object model property to file footers . writesupport now has a getname getter method that is added to the footer if it returns a non - null string as writer . model . name . this is intended to help identify files written by object models incorrectly . author : ryan blue < blue @ apache . org > closes #289 from rdblue / parquet - 352 - add - object - model - property and squashes the following commits : 23f8f67 [ ryan blue ] parquet - 352 : add object model property to file footers .,"parquet - 99 : add page size check properties this adds properties to set the min and max number of records that are passed between page checks , as well as a property that controls whether the next check will be based on records already seen or set to the minimum number of records between checks . * `parquet . page . size . row . check . min` - minimum number of records between page size checks * `parquet . page . size . row . check . max` - maximum number of records between page size checks * `parquet . page . size . check . estimate` - whether to estimate the number of records before the next check , or to always use the minimum number of records . this also updates the internal api to use parquetproperties to carry encoding settings ( used in parquet - column ) to reduce the number of parameters passed through internal apis . it also adds a builder for parquetproperties to avoid needing to reference defaults in other modules . this closes #250 author : daniel weeks < dweeks @ netflix . com > author : ryan blue < blue @ apache . org > closes #297 from rdblue / parquet - properties - update and squashes the following commits : c93b73e [ ryan blue ] parquet - 99 : use parquetproperties to carry encoding config . 18f8d3a [ daniel weeks ] spacing 2090719 [ daniel weeks ] update sizecheck to write page properly if estimating is turned off 71336ee [ daniel weeks ] fixed param name 5d99072 [ daniel weeks ] update page size checking for v2 writer 3f7870c [ daniel weeks ] rebase to resolve byte buffer conflicts 68794f0 [ daniel weeks ] merge branch 'master' into page size check b49f03c [ daniel weeks ] fixed reset of nextsizecheck a057f46 [ daniel weeks ] fixed inverted property logic e7cd54b [ daniel weeks ] added property to toggle page size check estimation and initial row size checking conflicts : parquet - column / src / main / java / org / apache / parquet / column / parquetproperties . java parquet - column / src / main / java / org / apache / parquet / column / impl / columnwritestorev1 . java parquet - column / src / main / java / org / apache / parquet / column / impl / columnwritestorev2 . java parquet - column / src / main / java / org / apache / parquet / column / impl / columnwriterv1 . java parquet - column / src / main / java / org / apache / parquet / column / impl / columnwriterv2 . java parquet - column / src / test / java / org / apache / parquet / column / impl / testcorruptdeltabytearrays . java parquet - column / src / test / java / org / apache / parquet / column / mem / testmemcolumn . java parquet - column / src / test / java / org / apache / parquet / io / perftest . java parquet - column / src / test / java / org / apache / parquet / io / testcolumnio . java parquet - column / src / test / java / org / apache / parquet / io / testfiltered . java parquet - hadoop / src / main / java / org / apache / parquet / hadoop / internalparquetrecordwriter . java parquet - hadoop / src / main / java / org / apache / parquet / hadoop / parquetoutputformat . java parquet - hadoop / src / main / java / org / apache / parquet / hadoop / parquetrecordwriter . java parquet - hadoop / src / main / java / org / apache / parquet / hadoop / parquetwriter . java parquet - pig / src / test / java / org / apache / parquet / pig / tupleconsumerperftest . java parquet - thrift / src / test / java / org / apache / parquet / thrift / testparquetreadprotocol . java resolution : fixed changes that depended on the addition of an allocator argument ignored adjacent changes that were flagged passed page size at compressor instantiation instead of to the factory","parquet - 99 : add page size check properties this adds properties to set the min and max number of records that are passed between page checks , as well as a property that controls whether the next check will be based on records already seen or set to the minimum number of records between checks . * `parquet . page . size . row . check . min` - minimum number of records between page size checks * `parquet . page . size . row . check . max` - maximum number of records between page size checks * `parquet . page . size . check . estimate` - whether to estimate the number of records before the next check , or to always use the minimum number of records . this also updates the internal api to use parquetproperties to carry encoding settings ( used in parquet - column ) to reduce the number of parameters passed through internal apis . it also adds a builder for parquetproperties to avoid needing to reference defaults in other modules . this closes #250 author : daniel weeks < dweeks @ netflix . com > author : ryan blue < blue @ apache . org > closes #297 from rdblue / parquet - properties - update and squashes the following commits : c93b73e [ ryan blue ] parquet - 99 : use parquetproperties to carry encoding config . 18f8d3a [ daniel weeks ] spacing 2090719 [ daniel weeks ] update sizecheck to write page properly if estimating is turned off 71336ee [ daniel weeks ] fixed param name 5d99072 [ daniel weeks ] update page size checking for v2 writer 3f7870c [ daniel weeks ] rebase to resolve byte buffer conflicts 68794f0 [ daniel weeks ] merge branch 'master' into page size check b49f03c [ daniel weeks ] fixed reset of nextsizecheck a057f46 [ daniel weeks ] fixed inverted property logic e7cd54b [ daniel weeks ] added property to toggle page size check estimation and initial row size checking","parquet - 382 : add methods to append encoded data to files . this allows appending encoded data blocks to open parquetfilewriters , which makes it possible to merge multiple parquet files without re - encoding all of the records . this works by finding the column chunk for each column in the file schema and then streaming the encoded data from one file to the other . new starting offsets are tracked and the column chunk metadata in the footer is updated with the new starting positions . author : ryan blue < blue @ apache . org > closes #278 from rdblue / parquet - 382 - append - encoded - blocks and squashes the following commits : cb98552 [ ryan blue ] parquet - 382 : add methods to append encoded data to files .","parquet - 382 : add methods to append encoded data to files . this allows appending encoded data blocks to open parquetfilewriters , which makes it possible to merge multiple parquet files without re - encoding all of the records . this works by finding the column chunk for each column in the file schema and then streaming the encoded data from one file to the other . new starting offsets are tracked and the column chunk metadata in the footer is updated with the new starting positions . author : ryan blue < blue @ apache . org > closes #278 from rdblue / parquet - 382 - append - encoded - blocks and squashes the following commits : cb98552 [ ryan blue ] parquet - 382 : add methods to append encoded data to files .","parquet - 212 : implement list read compatibility rules in thrift this implements the read - side compatibility rules for 2 - level and 3 - level lists in thrift . thrift doesn't allow null elements inside lists , but 3 - level lists may have optional elements . this pr adds a property , parquet . thrift . ignore - null - elements , that allows thrift to read lists with optional elements by ignoring nulls . this is off by default , but is provided as an opt - in for compatibility with data written by hive . thrift's schema conversion does not change because a thrift class ( or scrooge etc . ) must be set in a file's metadata or provided when constructing a reader . this replaces and closes #144 . author : ryan blue < blue @ apache . org > closes #300 from rdblue / parquet - 212 - fix - thrift - 3 - level - lists and squashes the following commits : ac7c405 [ ryan blue ] parquet - 212 : add tests for list of list cases from parquet - 364 . 356fdb7 [ ryan blue ] parquet - 212 : rename iselementtype = > islistelementtype . 5d3b094 [ ryan blue ] parquet - 212 : fix list handling with projection . b5f207f [ ryan blue ] parquet - 212 : add configuration to the thriftrecordconverter ctor . b87eb65 [ ryan blue ] parquet - 212 : add property to ignore nulls in lists . 3d1e92f [ ryan blue ] parquet - 212 : update thrift reads for list compatibility rules . 0bf2b45 [ ryan blue ] parquet - 212 : read non - thrift files if a thrift class is supplied . 4e148dc [ ryan blue ] parquet - 212 : add directwritertest base class .","parquet - 384 : add dictionary filtering . this builds on #286 from @ danielcweeks and cleans up some of the interfaces . it introduces `dictionarypagereadstore` to expose dictionary pages to the filters and cleans up some internal calls by passing `parquetfilereader` . when committed , this closes #286 . author : ryan blue < blue @ apache . org > author : daniel weeks < dweeks @ netflix . com > closes #330 from rdblue / parquet - 384 - add - dictionary - filtering and squashes the following commits : ff89424 [ ryan blue ] parquet - 384 : add a cache to dictionarypagereader . 1f6861c [ ryan blue ] parquet - 384 : use parquetfilereader to initialize readers . 21ef4b6 [ daniel weeks ] parquet - 384 : add dictionary row group filter . conflicts : parquet - hadoop / src / main / java / org / apache / parquet / hadoop / parquetfilereader . java resolution : removed unnecessary allocator args and fields minor changes for using the codec api","parquet - 384 : add dictionary filtering . this builds on #286 from @ danielcweeks and cleans up some of the interfaces . it introduces `dictionarypagereadstore` to expose dictionary pages to the filters and cleans up some internal calls by passing `parquetfilereader` . when committed , this closes #286 . author : ryan blue < blue @ apache . org > author : daniel weeks < dweeks @ netflix . com > closes #330 from rdblue / parquet - 384 - add - dictionary - filtering and squashes the following commits : ff89424 [ ryan blue ] parquet - 384 : add a cache to dictionarypagereader . 1f6861c [ ryan blue ] parquet - 384 : use parquetfilereader to initialize readers . 21ef4b6 [ daniel weeks ] parquet - 384 : add dictionary row group filter .","parquet - 389 : support predicate push down on missing columns . predicate push - down will complain when predicates reference columns that aren't in a file's schema . this makes it difficult to implement predicate push - down in engines where schemas evolve because each task needs to process the predicates and prune references to columns not in that task's file . this pr implements predicate evaluation for missing columns , where the values are all null . this allows engines to pass predicates as they are written . a future commit should rewrite the predicates to avoid the extra work currently done in record - level filtering , but that isn't included here because it is an optimization . author : ryan blue < blue @ apache . org > closes #354 from rdblue / parquet - 389 - predicate - push - down - on - missing - columns and squashes the following commits : b4d809a [ ryan blue ] parquet - 389 : support record - level filtering with missing columns . 91b841c [ ryan blue ] parquet - 389 : add missing column support to statisticsfilter . 275f950 [ ryan blue ] parquet - 389 : add missing column support to dictionaryfilter .","parquet - 389 : support predicate push down on missing columns . predicate push - down will complain when predicates reference columns that aren't in a file's schema . this makes it difficult to implement predicate push - down in engines where schemas evolve because each task needs to process the predicates and prune references to columns not in that task's file . this pr implements predicate evaluation for missing columns , where the values are all null . this allows engines to pass predicates as they are written . a future commit should rewrite the predicates to avoid the extra work currently done in record - level filtering , but that isn't included here because it is an optimization . author : ryan blue < blue @ apache . org > closes #354 from rdblue / parquet - 389 - predicate - push - down - on - missing - columns and squashes the following commits : b4d809a [ ryan blue ] parquet - 389 : support record - level filtering with missing columns . 91b841c [ ryan blue ] parquet - 389 : add missing column support to statisticsfilter . 275f950 [ ryan blue ] parquet - 389 : add missing column support to dictionaryfilter .",parquet - 669 : allow reading footers from provided file listing and streams the use case is that i want to reuse existing listing of files and avoid doing it again when opening streams . this is in case where filesystem . open is expensive but you have other means of obtaining input stream for a file . author : robert kruszewski < robertk @ palantir . com > closes #357 from robert3005 / robertk / allow - reading - footers - from - streams and squashes the following commits : 4d8a54c [ robert kruszewski ] allow reading footers from provided file listing and streams,parquet - 669 : allow reading footers from provided file listing and streams the use case is that i want to reuse existing listing of files and avoid doing it again when opening streams . this is in case where filesystem . open is expensive but you have other means of obtaining input stream for a file . author : robert kruszewski < robertk @ palantir . com > closes #357 from robert3005 / robertk / allow - reading - footers - from - streams and squashes the following commits : 4d8a54c [ robert kruszewski ] allow reading footers from provided file listing and streams,"parquet - 777 : add parquet cli . this adds a new parquet - cli module with an improved command - line tool . the parquet - cli / readme . md file has instructions for building and testing locally . author : ryan blue < blue @ apache . org > author : tom white < tom @ cloudera . com > closes #384 from rdblue / parquet - 777 - add - parquet - cli and squashes the following commits : de49eff [ ryan blue ] parquet - 777 : move dynamic support classes , add tests . affdfb9 [ ryan blue ] parquet - 777 : update for review feedback . f953fd4 [ ryan blue ] parquet - 777 : update readme . md with better instructions . aed223d [ tom white ] replace source file headers with apache header . d718363 [ ryan blue ] parquet - 777 : add parquet cli .","parquet - 1142 : add alternatives to hadoop classes in the api this updates the read and write paths to avoid using hadoop classes where possible . * adds a generic compression interface , `compressioncodecfactory` * adds `outputfile` and `positionoutputstream` * adds classes to help implementations wrap input and output streams : `delegatingseekableinputstream` and `delegatingpositionoutputstream` * adds `parquetreadoptions` to avoid passing options with `configuration` * updates the read and write apis to use new abstractions instead of hadoop author : ryan blue < blue @ apache . org > closes #429 from rdblue / parquet - 1142 - add - hadoop - alternatives and squashes the following commits : 21500337b [ ryan blue ] parquet - 1142 : fix npe when not filtering with new read api . 35eddd735 [ ryan blue ] parquet - 1142 : fix problems from gabor's review . da391b0d4 [ ryan blue ] parquet - 1142 : fix binary incompatibilities . 2e3d693ab [ ryan blue ] parquet - 1142 : update the read and write paths to use new files and streams . 8d57e089f [ ryan blue ] parquet - 1142 : add outputfile and positionoutputstream . 42908a95e [ ryan blue ] parquet - 1142 : extract non - hadoop api from codecfactory .",parquet - 1025 : support new min - max statistics in parquet - mr author : gabor szadovszky < gabor . szadovszky @ cloudera . com > closes #435 from gszadovszky / parquet - 1025 and squashes the following commits : 2a63fcf13 [ gabor szadovszky ] parquet - 1025 : use constant instead of creating new typedefinedorder instances 820df6fb7 [ gabor szadovszky ] parquet - 1025 : minor fixes at data generation for teststatistics dc838f273 [ gabor szadovszky ] parquet - 1025 : implement columnorder ; other updates for rdblue's findings 524750be0 [ gabor szadovszky ] parquet - 1025 : some updates for zi's findings a2ae97ce5 [ gabor szadovszky ] parquet - 1025 : unified formatting / comments / deprecation bc86e8a63 [ gabor szadovszky ] parquet - 1025 : updates according to rdblue's comments 70e56a759 [ gabor szadovszky ] parquet - 1025 : add explicit list of types to not to read / write statistics 95199e5e0 [ gabor szadovszky ] parquet - 1025 : use lexicographical comparison for binary . compareto also rename signed binary comparator to a more descriptive name also added comments for haxa representation of values at unsigned comparison testing 2f28c2c0e [ gabor szadovszky ] parquet - 1025 : finalize read / write stats updates c5536a0a3 [ gabor szadovszky ] parquet - 1025 : some modifications according to zi's comments 318e585d9 [ gabor szadovszky ] parquet - 1025 : finalize reading / writing new stats ; modify / implement unit tests accordingly 688ef2efe [ gabor szadovszky ] parquet - 1025 : updates according to zi's and rdblue's comments 51bc1f827 [ gabor szadovszky ] parquet - 1025 : add the proper comparators as required ; revert binary related changes 20b937f46 [ gabor szadovszky ] parquet - 1025 : reading / writing new min - max statistics ; use the comparators as needed 52cd58f61 [ gabor szadovszky ] parquet - 1025 : move comparators to type 3378b6d34 [ gabor szadovszky ] parquet - 1025 : implement comparators and use them with statistics e1719bb3b [ gabor szadovszky ] parquet - 1025 : refactor binary to prepare from custom comparators,parquet - 1217 : incorrect handling of missing values in statistics in parquet - format every value in statistics is optional while parquet - mr does not properly handle these scenarios : - null count is set but min / max or min value / max value are not : filtering may fail with npe or incorrect filtering occurs fix : check if min / max is set before comparing to the related values - null count is not set : filtering handles null count as if it would be 0 - > incorrect filtering may occur fix : introduce new method in statistics object to check if num nulls is set ; check if num nulls is set by the new method before using its value for filtering author : gabor szadovszky < gabor . szadovszky @ cloudera . com > closes #458 from gszadovszky / parquet - 1217 and squashes the following commits : 9d14090 [ gabor szadovszky ] updates according to rdblue's comments 116d1d3 [ gabor szadovszky ] parquet - 1217 : updates according to zi's comments c264b50 [ gabor szadovszky ] parquet - 1217 : fix handling of unset nullcount 2ec2fb1 [ gabor szadovszky ] parquet - 1217 : incorrect handling of missing values in statistics,parquet - 1253 : support for new logical type representation ( #463 ),"parquet - 105 : use mvn shade plugin to create uber jar , support meta on a folder 1 . make hadoop dependency from parquet - tools so it is provided . it can be used against different version of hadoop 2 . use maven shade plugin to create a all in one jar , which can be used both locally or in hadoop 3 . make parquet - meta command support both folder ( read summary file ) and a single file author : tianshuo deng < tdeng @ twitter . com > closes #69 from tsdeng / bundle parquet tools and squashes the following commits : d8dcd3e [ tianshuo deng ] print file offset , file path , and cancel autocrop a2d1399 [ tianshuo deng ] support local mode 5009a85 [ tianshuo deng ] fix readme 0756f81 [ tianshuo deng ] remove semver check for parquet tools 78c7f4b [ tianshuo deng ] use mvn shade plugin to create uber jar , support meta on a folder",parquet - 106 : relax inputsplit protections https : / / issues . apache . org / jira / browse / parquet - 106 author : daniel weeks < dweeks @ netflix . com > closes #67 from dcw - netflix / input - split2 and squashes the following commits : 2f2c0c7 [ daniel weeks ] update parquetinputsplit . java 12bd3c1 [ daniel weeks ] update parquetinputsplit . java 6c662ee [ daniel weeks ] update parquetinputsplit . java 5f9f02e [ daniel weeks ] update parquetinputsplit . java d19e1ac [ daniel weeks ] merge branch 'master' into input - split2 c4172bb [ daniel weeks ] merge remote - tracking branch 'upstream / master' 01a5e8f [ daniel weeks ] relaxed protections on input split class d37a6de [ daniel weeks ] resetting pom to main 0c1572e [ daniel weeks ] merge remote - tracking branch 'upstream / master' 98c6607 [ daniel weeks ] merge remote - tracking branch 'upstream / master' 96ba602 [ daniel weeks ] disabled projects that don't compile,"parquet - 123 : enable dictionary support in avroindexedrecordconverter if consumers are loading parquet records into an immutable structure like an apache spark rdd , being able to configure string reuse in avroindexedrecordconverter can drastically reduce the overall memory footprint of strings . note : this isn't meant to be a merge - able pr ( yet ) . i want to use this pr as a way to discuss : ( 1 ) if this is a reasonable approach and ( 2 ) to learn if primitiveconverter needs to be thread - safe as i'm currently using a concurrenthashmap . if there's agreement that this would be worthwhile , i'll create a jira and write some unit tests . author : matt massie < massie @ cs . berkeley . edu > closes #76 from massie / immutable - strings and squashes the following commits : 88ce5bf [ matt massie ] parquet - 123 : enable dictionary support in avroindexedrecordconverter","parquet - 121 : allow parquet to build with java 8 there are test failures running with java 8 due to http : / / openjdk . java . net / jeps / 180 which changed retrieval order for hashmap . here's how i tested this : ```bash use - java8 mvn clean install - dskiptests - dmaven . javadoc . skip = true mvn test mvn test - p hadoop - 2 ``` i also compiled the main code with java 7 ( target = 1 . 6 bytecode ) , and compiled the tests with java 8 , and ran them with java 8 . the idea here is to simulate users who want to run parquet with jre 8 . ```bash use - java7 mvn clean install - dskiptests - dmaven . javadoc . skip = true use - java8 find . - name test - classes | grep target / test - classes | grep - v 'parquet - scrooge' | xargs rm - rf mvn test - dtargetjavaversion = 1 . 8 - dmaven . main . skip = true - dscala . maven . test . skip = true ``` a couple of notes about this : * the targetjavaversion property is used since other hadoop projects use the same name . * i couldn’t get parquet - scrooge to compile with target = 1 . 8 , which is why i introduced scala . maven . test . skip ( and updated scala - maven - plugin to the latest version which supports the property ) . compiling with target = 1 . 8 should be fixed in another jira as it looks pretty involved . author : tom white < tom @ cloudera . com > closes #77 from tomwhite / parquet - 121 - java8 and squashes the following commits : 8717e13 [ tom white ] fix tests to run under java 8 . 35ea670 [ tom white ] parquet - 121 . allow parquet to build with java 8 .",parquet - 122 : make task side metadata true by default author : julien < julien @ twitter . com > closes #78 from julienledem / task side metadata default true and squashes the following commits : 32451a7 [ julien ] make task side metadata true by default,parquet - 135 : input location is not getting set for the getstatistics in parquetloader when using two different loaders within a pig script . author : elif dede < edede @ twitter . com > closes #86 from elifdd / parquetloader error parquet - 135 and squashes the following commits : b0150ee [ elif dede ] fixed white space bdb381a [ elif dede ] parquet - 135 : call setinput from getstatistics in parquetloader to fix reduceestimator errors in pig jobs,parquet - 132 : add type parameter to avroparquetinputformat . author : ryan blue < blue @ apache . org > closes #84 from rdblue / parquet - 132 - parameterize - avro - inputformat and squashes the following commits : 63114b0 [ ryan blue ] parquet - 132 : add type parameter to avroparquetinputformat .,parquet - 114 : sample nanotime class serializes and deserializes timestamp incorrectly i ran the parquet column tests and they passed . fyi @ rdblue author : brock noland < brock @ apache . org > closes #71 from brockn / master and squashes the following commits : 69ba484 [ brock noland ] parquet - 114 - sample nanotime class serializes and deserializes timestamp incorrectly,parquet - 52 : refactor fallback mechanism see : https : / / issues . apache . org / jira / browse / parquet - 52 context : in the valueswriter api there is a mechanism to return the encoding actually used which allows to fallback to a different encoding . for example the dictionary encoding may fail if there are too many distinct values and the dictionary grows too big . in such cases the dictionaryvalueswriter was falling back to the plain encoding . this can happen as well if the space savings are not satisfying when writing the first page and we prefer to fallback to a more light weight encoding . with parquet 2 . 0 we are adding new encodings and the fall back is not necessarily plain anymore . this pull request decouple the fallback mechanism from dictionary and plain encodings and allows to reuse the fallback logic with other encodings . one could imagine more than one level of fallback in the future by chaining the fallbackvalueswriter . author : julien < julien @ twitter . com > closes #74 from julienledem / fallback and squashes the following commits : b74a4ca [ julien ] merge branch 'master' into fallback d9abd62 [ julien ] better naming aa90caf [ julien ] exclude values encoding from semver 10f295e [ julien ] better test setup c516bd9 [ julien ] improve test 780c4c3 [ julien ] license header f16311a [ julien ] javadoc aeb8084 [ julien ] add more test ; fix dic decoding 0793399 [ julien ] merge branch 'master' into fallback 2638ec9 [ julien ] fix dictionary encoding labelling 2fd9372 [ julien ] consistent naming cf7a734 [ julien ] rewrite parquetproperties to enable proper fallback bf1474a [ julien ] refactor fallback mechanism,parquet - 145 internalparquetrecordreader . close ( ) should not throw an exception if initialization has failed parquet - 145 internalparquetrecordreader . close ( ) should not throw an exception if initialization has failed author : wolfgang hoschek < whoschek @ cloudera . com > closes #93 from whoschek / parquet - 145 - 3 and squashes the following commits : 52a6acb [ wolfgang hoschek ] parquet - 145 internalparquetrecordreader . close ( ) should not throw an exception if initialization has failed,"parquet - 141 : upgrade to scrooge 3 . 17 . 0 , remove reflection based field info inspection . . . upgrade to scrooge 3 . 17 . 0 , remove reflection based field info inspection , support enum and requirement type correctly this pr is essential for scrooge write support https : / / github . com / apache / incubator - parquet - mr / pull / 58 author : tianshuo deng < tdeng @ twitter . com > closes #88 from tsdeng / scrooge schema converter upgrade and squashes the following commits : 77cc12a [ tianshuo deng ] delete empty line , retrigger jenkins 80d61ad [ tianshuo deng ] format 26e1fe1 [ tianshuo deng ] fix exception handling 706497d [ tianshuo deng ] support union 1b51f0f [ tianshuo deng ] upgrade to scrooge 3 . 17 . 0 , remove reflection based field info inspection , support enum and requirement type correctly","parquet - 168 : fixes parquet - tools command line option description < ! - - reviewable : start - - > [ < img src = ""https : / / reviewable . io / review button . png"" height = 40 alt = ""review on reviewable"" / > ] ( https : / / reviewable . io / reviews / apache / incubator - parquet - mr / 106 ) < ! - - reviewable : end - - > author : cheng lian < lian @ databricks . com > closes #106 from liancheng / parquet - 168 and squashes the following commits : 4524f2d [ cheng lian ] fixes command line option description","parquet - 174 : replaces assertionerror constructor introduced in java7 assertionerror ( string , throwable ) was introduced in java7 . replacing it with assertionerror ( string ) + initcause ( throwable ) author : laurent goujon < laurentgo @ users . noreply . github . com > closes #101 from laurentgo / fix - java7ism and squashes the following commits : c00fb7c [ laurent goujon ] replaces assertionerror constructor introduced in java7",parquet - 124 : normalize path checking to prevent mismatch between uri and . . . . . . path author : chris albright < calbright @ cj . com > closes #79 from chrisalbright / master and squashes the following commits : b1b0086 [ chris albright ] merge remote - tracking branch 'upstream / master' 9669427 [ chris albright ] parquet - 124 : adding test ( thanks ryan blue ) that proves mergefooters was failing 8e342ed [ chris albright ] parquet - 124 : normalize path checking to prevent mismatch between uri and path,parquet - 142 : add path filter in parquetreader currently parquet - tools command fails when input is a directory with success file from mapreduce . filtering those out like parquetfilereader does fixes the problem . ``` parquet - cat / tmp / parquet write test could not read footer : java . lang . runtimeexception : file : / tmp / parquet write test / success is not a parquet file ( too small ) $ tree / tmp / parquet write test / tmp / parquet write test ├── part - m - 00000 . parquet └── success ``` author : neville li < neville @ spotify . com > closes #89 from nevillelyh / gh / path - filter and squashes the following commits : 7377a20 [ neville li ] parquet - 142 : add path filter in parquetreader,parquet - 157 : divide by zero fix there is a divide by zero error in logging code inside the internalparquetrecordreader . i've been running with this fixed for a while but everytime i revert i hit the problem again . i can't believe anyone else hasn't had this problem . i submitted a jira ticket a few weeks ago but didn't hear anything on the list so here's the fix . this also avoids compiling log statements in some cases where it's unnecessary inside the checkread method of internalparquetrecordreader . also added a . gitignore entry to clean up a build artifact . author : jim carroll < jim @ dontcallme . com > closes #102 from jimfcarroll / divide - by - zero - fix and squashes the following commits : 423200c [ jim carroll ] filter out parquet - scrooge build artifact from git . 22337f3 [ jim carroll ] parquet - 157 : fix a divide by zero error when parquet runs quickly . also avoid compiling log statements in some cases where it's unnecessary .,"parquet - 173 : fixes `statisticsfilter` for `and` filter predicate < ! - - reviewable : start - - > [ < img src = ""https : / / reviewable . io / review button . png"" height = 40 alt = ""review on reviewable"" / > ] ( https : / / reviewable . io / reviews / apache / incubator - parquet - mr / 108 ) < ! - - reviewable : end - - > author : cheng lian < lian @ databricks . com > closes #108 from liancheng / parquet - 173 and squashes the following commits : d188f0b [ cheng lian ] fixes test case be2c8a1 [ cheng lian ] fixes `statisticsfilter` for `and` filter predicate","parquet - 116 : pass a filter object to user defined predicate in filter2 api currently for creating a user defined predicate using the new filter api , no value can be passed to create a dynamic filter at runtime . this reduces the usefulness of the user defined predicate , and meaningful predicates cannot be created . we can add a generic object value that is passed through the api , which can internally be used in the keep function of the user defined predicate for creating many different types of filters . for example , in spark sql , we can pass in a list of filter values for a where in clause query and filter the row values based on that list . author : yash datta < yash . datta @ guavus . com > author : alex levenson < alexlevenson @ twitter . com > author : yash datta < saucam @ gmail . com > closes #73 from saucam / master and squashes the following commits : 7231a3b [ yash datta ] merge pull request #3 from isnotinvain / alexlevenson / fix - binary - compat dcc276b [ alex levenson ] ignore binary incompatibility in private filter2 class 7bfa5ad [ yash datta ] merge pull request #2 from isnotinvain / alexlevenson / simplify - udp - state 0187376 [ alex levenson ] resolve merge conflicts 25aa716 [ alex levenson ] simplify user defined predicates with state 51952f8 [ yash datta ] parquet - 116 : fix whitespace d7b7159 [ yash datta ] parquet - 116 : make userdefined abstract , add two subclasses , one accepting udp class , other accepting serializable udp instance 40d394a [ yash datta ] parquet - 116 : fix whitespace 9a63611 [ yash datta ] parquet - 116 : fix whitespace 7caa4dc [ yash datta ] parquet - 116 : add configureduserdefined that takes a serialiazble udp directly 0eaabf4 [ yash datta ] parquet - 116 : move the config object from keep method to a configure method in udp predicate f51a431 [ yash datta ] parquet - 116 : adding type safety for the filter object to be passed to user defined predicate d5a2b9e [ yash datta ] parquet - 116 : enforce that the filter object to be passed must be serializable dfd0478 [ yash datta ] parquet - 116 : add a test case for passing a filter object to user defined predicate 4ab46ec [ yash datta ] parquet - 116 : pass a filter object to user defined predicate in filter2 api",parquet - 164 : add warning when scaling row group sizes . author : ryan blue < blue @ apache . org > closes #119 from rdblue / parquet - 164 - add - memory - manager - warning and squashes the following commits : 241144f [ ryan blue ] parquet - 164 : add warning when scaling row group sizes .,parquet - 191 : fix map type to avro schema conversion . author : ryan blue < blue @ apache . org > closes #126 from rdblue / parquet - 191 - fix - map - value - conversion and squashes the following commits : 33f6bbc [ ryan blue ] parquet - 191 : fix map type to avro schema conversion .,parquet - 192 : fix map null encoding this depends on parquet - 191 for the correct schema representation . author : ryan blue < blue @ apache . org > closes #127 from rdblue / parquet - 192 - fix - map - null - encoding and squashes the following commits : fffde82 [ ryan blue ] parquet - 192 : fix parquet - avro maps with null values .,parquet - 188 : change column ordering to match the field order . this was the behavior before the v2 pages were added . author : ryan blue < blue @ apache . org > closes #129 from rdblue / parquet - 188 - fix - column - metadata - order and squashes the following commits : 3c9fa5d [ ryan blue ] parquet - 188 : change column ordering to match the field order .,"parquet - 187 : replace javaconversions . asjavalist with javaconversions . seqasjavalist the former was removed in 2 . 11 , but the latter exists in 2 . 9 , 2 . 10 and 2 . 11 . with this change , i can build on 2 . 11 without any issue . author : colin marc < colinmarc @ gmail . com > closes #121 from colinmarc / build - 211 and squashes the following commits : 8a29319 [ colin marc ] replace javaconversions . asjavalist with javaconversions . seqasjavalist .","parquet - 160 : avoid wasting 64k per empty buffer . this buffer initializes itself to a default size when instantiated . this leads to a lot of unused small buffers when there are a lot of empty columns . author : alex levenson < alexlevenson @ twitter . com > author : julien < julien @ twitter . com > author : julien le dem < julien @ twitter . com > closes #98 from julienledem / avoid wasting 64k per empty buffer and squashes the following commits : b0200dd [ julien ] add license a1b278e [ julien ] merge branch 'master' into avoid wasting 64k per empty buffer 5304ee1 [ julien ] remove unused constant 81e399f [ julien ] merge branch 'avoid wasting 64k per empty buffer' of github . com : julienledem / incubator - parquet - mr into avoid wasting 64k per empty buffer ccf677d [ julien ] merge branch 'master' into avoid wasting 64k per empty buffer 37148d6 [ julien le dem ] merge pull request #2 from isnotinvain / pr - 98 b9abab0 [ alex levenson ] address julien's comment 965af7f [ alex levenson ] one more typo 9939d8d [ alex levenson ] fix typos in comments 61c0100 [ alex levenson ] make initial slab size heuristic into a helper method , apply in dictionaryvalueswriter as well a257ee4 [ alex levenson ] improve indexoutofboundsexception message 64d6c7f [ alex levenson ] update comments 8b54667 [ alex levenson ] don't use capacitybytearrayoutputstream for writing page chunks 6a20e8b [ alex levenson ] remove initialslabsize decision from internalparquetrecordreader , use a simpler heuristic in the column writers instead 3a0f8e4 [ alex levenson ] use simpler settings for column chunk writer b2736a1 [ alex levenson ] some cleanup in capacitybytearrayoutputstream 1df4a71 [ julien ] refactor capacitybytearray to be aware of page size 95c8fb6 [ julien ] avoid wasting 64k per empty buffer .",parquet - 186 : fix precondition performance problem in snappyutil . this fixes the problem by adding string formatting to the preconditions . this avoids any string formatting unless the precondition throws an exception . we should check for string operations in other tight loops as well . author : ryan blue < blue @ apache . org > closes #133 from rdblue / parquet - 186 - precondition - format - string and squashes the following commits : be0b8fe [ ryan blue ] parquet - 186 : fix precondition performance bug in snappyutil . 67f9bf2 [ ryan blue ] parquet - 186 : add format string and args to preconditions .,"parquet - 134 patch - support file write mode julien , i changed the integer constants to enum as you requested . please review the patch . thanks . author : mariappan asokan < masokan @ gmail . com > closes #111 from masokan / master and squashes the following commits : 7a8aa6f [ mariappan asokan ] parquet - 134 patch - support file write mode",parquet - 162 : parquetthrift should throw when unrecognized columns are passed to the column projection api parquetthrift should throw when unrecognized columns are passed to the column projection api author : tianshuo deng < tdeng @ twitter . com > closes #123 from tsdeng / throw when projection filter matches nothing and squashes the following commits : 12c08da [ tianshuo deng ] make pathglobpatternstatus static 4360b36 [ tianshuo deng ] fix tests a74f621 [ tianshuo deng ] clean up test 3c581f3 [ tianshuo deng ] refactor unit test 6a86de7 [ tianshuo deng ] format bdc625d [ tianshuo deng ] throw when projection filter matches nothing,"parquet - 208 : revert parquet - 197 revert ""parquet - 197 : fix parquet - cascading not writing parquet metadata . . . author : tianshuo deng < tdeng @ twitter . com > closes #139 from tsdeng / revert parquet 197 and squashes the following commits : a74b5c8 [ tianshuo deng ] revert ""parquet - 197 : fix parquet - cascading not writing parquet metadata file""",parquet - 97 : make protoparquetreader#builder static author : viktor szathmáry < phraktle @ gmail . com > closes #63 from phraktle / fix ppr factory and squashes the following commits : 8b67439 [ viktor szathmáry ] make protoparquetreader#builder static 9c8fcd5 [ viktor szathmáry ] make protoparquetreader#builder static,parquet - 172 : add parquet - thrift binary tests . these tests validate that there is no encoding problem with parquet - thrift or parquet - scrooge . see https : / / github . com / laurencer / parquet - mr - bug author : ryan blue < blue @ apache . org > closes #145 from rdblue / parquet - 172 - add - thrift - binary - test and squashes the following commits : 6856414 [ ryan blue ] parquet - 172 : add parquet - thrift binary tests .,parquet - 180 : update use of tbinaryprotocol#setreadlength . this is no longer supported in thrift 0 . 9 . 2 and was only used defensively . the reason to remove it now is to avoid linker errors when the wrong version of thrift is found in the classpath . author : ryan blue < blue @ apache . org > closes #118 from rdblue / parquet - 180 and squashes the following commits : 5100424 [ ryan blue ] parquet - 180 : dynamic use of tbinaryprotocol#setreadlength .,"parquet - 215 discard records with unrecognized union members in the thrift write path fixes parquet - 215 , adds a test case for it , and fixes some tests that were quietly not doing anything previously to actually exercise the code they were intended to exercise . ( they were tests that catch exceptions and make assertions about them , but never enforced that the exception was actually thrown , and in one case , it never was ) . author : alex levenson < alexlevenson @ twitter . com > closes #146 from isnotinvain / alexlevenson / unrecognized - union and squashes the following commits : 7bec4a6 [ alex levenson ] add license header b0d8e6c [ alex levenson ] merge branch 'master' into alexlevenson / unrecognized - union e152bc8 [ alex levenson ] update comment 97232b7 [ alex levenson ] address comments c542199 [ alex levenson ] go back to using boolean for isunion 2e18dbd [ alex levenson ] remove exclusion 0a60c46 [ alex levenson ] support isunion being unknown b0dfdf9 [ alex levenson ] fix tests 68940d7 [ alex levenson ] discard records with unrecognized union members in the thrift write path","parquet - 217 use simpler heuristic in memorymanager we found that the heuristic of throwing when : ``` minmemoryallocation > 0 & & newsize / maxcolcount < minmemoryallocation ``` in memorymanager is not really valid when you have many ( 3k + ) columns , due to the division by the number of columns . this check throws immediately when writing a single file with a 3gb heap and > 3k columns . this pr introduces a simpler heuristic , which is a min scale , and we throw when the memorymanager's scale gets too small . by default i chose 25 % , but i'm happy to change that to something else . for backwards compatibility i've left the original check in , but it's not executed by default anymore , to get this behavior the min chunk size will have to be set in the hadoop configuration . i'm also open to removing it entirely if we don't think we need it anymore . what do you think ? @ danielcweeks @ rdblue @ dongche @ julienledem author : alex levenson < alexlevenson @ twitter . com > closes #143 from isnotinvain / alexlevenson / mem - manager - heuristic and squashes the following commits : acda66f [ alex levenson ] add units to exception 10237c6 [ alex levenson ] decouple default min memory allocation from default page size 29c9881 [ alex levenson ] use an absolute minimum on rowgroup size , only apply when scale < 1 8877125 [ alex levenson ] merge branch 'master' into alexlevenson / mem - manager - heuristic e5117a0 [ alex levenson ] merge branch 'master' into alexlevenson / mem - manager - heuristic 6ee5f46 [ alex levenson ] use simpler heuristic in memorymanager",parquet - 197 : gen parquet metadata from cascading retry of parquet - 197 fixed support for hadoop2 api author : tianshuo deng < tdeng @ twitter . com > closes #141 from tsdeng / gen parquet meta and squashes the following commits : d1211a0 [ tianshuo deng ] fix hadoop2 api 8686ce4 [ tianshuo deng ] gem parquet metadata,"parquet - 214 : fix avro string regression . at some point , parquet - avro converted string fields to binary without the utf8 annotation . the change in parquet - 139 to filter the file's schema using the requested projection causes a regression because the annotation is not present in some file schemas , but is present in the projection schema converted from avro . this reverts the projection change to avoid a regression in a release . fixing the projection as in parquet - 139 will need to be done as a follow - up . author : ryan blue < blue @ apache . org > closes #142 from rdblue / parquet - 214 - fix - avro - regression and squashes the following commits : 71e0207 [ ryan blue ] parquet - 214 : add support for old avro . schema property . 95148f9 [ ryan blue ] parquet - 214 : revert schema projection change from parquet - 139 .",parquet - 220 : remove unnecessary warnings initializing parquetrecordreader refactored to replace taskinputoutputcontext with taskattemptcontext . parquetrecordreader used to check that the passed context is instance of taskinputoutputcontext however the functionality it uses doesn't rely on this fact . this closes #152 when committed . it fixes the review feedback on that issue to include it in 1 . 6 . 0 . author : konstantin shaposhnikov < konstantin . shaposhnikov @ sc . com > closes #162 from rdblue / parquet - 152 - remove - counter - warning and squashes the following commits : 0a7780f [ konstantin shaposhnikov ] parquet - 220 : do not log unnecessary warnings on initializing parquetrecordreader,"revert ""parquet - 220 : remove unnecessary warnings initializing parquetrecordreader"" this reverts commit bfb314505469afcd5ea7b5bd15121acd50425318 .","parquet - 242 : fix avroreadsupport . setavrodatasupplier . this should use the supplier class's name , rather than its tostring representation or else loading the class doesn't work . author : ryan blue < blue @ apache . org > closes #161 from rdblue / parquet - 242 - fix - avro - data - supplier and squashes the following commits : ff5b7f8 [ ryan blue ] parquet - 242 : add avro data supplier test . 87a488b [ ryan blue ] parquet - 242 : fix avroreadsupport . setavrodatasupplier .","parquet - 235 : fix parquet . metadata compatibility . columnpath and canonicalizer were moved from parquet - hadoop to parquet - common in parquet . common . { internal , schema } , which broke compatibility and would require bumping the major version . this moves the classes back into parquet . hadoop . metadata and adds temporary exclusions for the move between modules . there are no breaking changes to the classes themselves , verified by copying them into parquet - hadoop and building . this also changes the previous version back to 1 . 5 . 0 rather than an rc ( which carries no compatibility guarantees , though this is compatible with both version ) . it also adds an exclusions for a false positive in binary . author : ryan blue < blue @ apache . org > closes #166 from rdblue / parquet - 235 - fix - parquet - metadata and squashes the following commits : f56a57e [ ryan blue ] parquet - 235 : fix parquet . metadata compatibility .",parquet - 239 : make avroparquetreader#builder static . fixes new api method added since 1 . 5 . 0 . author : ryan blue < blue @ apache . org > closes #158 from rdblue / parquet - 239 - fix - avro - builder and squashes the following commits : c8c64d7 [ ryan blue ] parquet - 239 : make avroparquetreader#builder static .,"parquet - 252 : support nests container types for scrooge support parquet should support nested container type for scrooge , like list < list > or list < map > author : tianshuo deng < tdeng @ twitter . com > closes #175 from tsdeng / support nests container types for scrooge support and squashes the following commits : bae3e68 [ tianshuo deng ] move set list and map inner elem name conversion to private static methods 48b4342 [ tianshuo deng ] catch classcastexception fc25bd0 [ tianshuo deng ] remove hack / fix for nested name 429c61c [ tianshuo deng ] fix exception handling , use explicit imports f54e648 [ tianshuo deng ] comments 815ee29 [ tianshuo deng ] support nested scrooge type","revert ""parquet - 252 : support nests container types for scrooge support"" this reverts commit f28aa71041181867a720134e26b64b03cbccb6ec .","parquet - 268 : downgrade scrooge - maven - plugin . the 3 . 17 . 0 version no longer works because a transitive dependency has been purged . 3 . 18 . 0 is the natural upgrade , but fails with a configuration problem . the latest documentation on updates is for moving to 3 . 17 . 0 , so the easiest solution that works is to downgrade to 3 . 16 . 0 . the build is working . author : ryan blue < blue @ apache . org > closes #187 from rdblue / parquet - 268 - fix - scrooge - plugin - version and squashes the following commits : 2b90634 [ ryan blue ] parquet - 268 : downgrade scrooge - maven - plugin .","parquet - 227 enforce that unions have only 1 set value , tolerate bad records in read path see https : / / issues . apache . org / jira / browse / parquet - 227 author : alex levenson < alexlevenson @ twitter . com > closes #153 from isnotinvain / alexlevenson / double - union and squashes the following commits : ef4d36f [ alex levenson ] fix package names e201deb [ alex levenson ] merge branch 'master' into alexlevenson / double - union 01694fa [ alex levenson ] forgot a break in a switch statement 2f31321 [ alex levenson ] merge branch 'master' into alexlevenson / double - union 9292274 [ alex levenson ] add in shouldneverhappenexception which i forgot to check in 8d61515 [ alex levenson ] address first round of comments 4d71bcb [ alex levenson ] merge branch 'master' into alexlevenson / double - union 8f9334c [ alex levenson ] some cleanup and fixes 8153bc9 [ alex levenson ] enforce that unions have only 1 set value , tolerate bad records in read path","parquet - 175 reading custom protobuf class changes to be committed : modified : parquet - protobuf / src / main / java / org / apache / parquet / proto / protoreadsupport . java modified : parquet - protobuf / src / test / java / org / apache / parquet / proto / protoinputoutputformattest . java modified : parquet - protobuf / src / test / resources / testprotobuf . proto author : nalezenec , lukas < lukas . nalezenec @ gmail . com > closes #183 from lukasnalezenec / master and squashes the following commits : 796cd39 [ nalezenec , lukas ] parquet - 175 allow setting of a custom protobuf class when reading parquet file using parquet - protobuf .","parquet - 269 : restore scrooge - maven - plugin to version 3 . 17 . 0 scrooge has re - published scrooge - maven - plugin 3 . 17 . 0 , so we should be able to use it again . lets see if travis is able to pick up the changes . author : alex levenson < alexlevenson @ twitter . com > closes #188 from isnotinvain / alexlevenson / restore - scrooge - plugin and squashes the following commits : fbec238 [ alex levenson ] revert ""make a whitespace change to trigger tests"" 5ea3d26 [ alex levenson ] make a whitespace change to trigger tests bfe181f [ alex levenson ] restore scrooge - maven - plugin to version 3 . 17 . 0",parquet - 252 : support nested container type for parquet - scrooge resubmit author : tianshuo deng < tdeng @ twitter . com > closes #185 from tsdeng / scrooge nested container and squashes the following commits : b29465f [ tianshuo deng ] retrigger jenkins 4542c1a [ tianshuo deng ] support nested container type for parquet - scrooge,parquet - 273 : remove usage of reflectiveoperationexception to support java6 as commented here : https : / / github . com / apache / parquet - mr / commit / 52f3240d90f2397cd1850ab11674ba08a0ecb2a0#commitcomment - 11065301 author : tianshuo deng < tdeng @ twitter . com > closes #191 from tsdeng / remove usage of reflective operation exception and squashes the following commits : adbe37a [ tianshuo deng ] remove usage of reflectiveoperationexception to support java6,"parquet - 254 : fixes exception message < ! - - reviewable : start - - > [ < img src = ""https : / / reviewable . io / review button . png"" height = 40 alt = ""review on reviewable"" / > ] ( https : / / reviewable . io / reviews / apache / incubator - parquet - mr / 174 ) < ! - - reviewable : end - - > author : cheng lian < lian @ databricks . com > closes #174 from liancheng / fix - exception - message and squashes the following commits : db816c2 [ cheng lian ] fixes exception message","parquet - 253 : fixes javadoc of avroschemaconverter got confused by the original javadoc at first and didn't realize `avroschemaconverter` is also capable to convert a parquet schema to an avro schema . < ! - - reviewable : start - - > [ < img src = ""https : / / reviewable . io / review button . png"" height = 40 alt = ""review on reviewable"" / > ] ( https : / / reviewable . io / reviews / apache / incubator - parquet - mr / 173 ) < ! - - reviewable : end - - > author : cheng lian < lian @ databricks . com > closes #173 from liancheng / avro - schema - converter - comment - fix and squashes the following commits : 47b11ce [ cheng lian ] fixes javadoc of avroschemaconverter","parquet - 262 : restore semver checks . because 1 . 6 . 0 to 1 . 7 . 0 was a breaking rename , semver was turned off until the 1 . 7 . 0 artifacts were released . now that they are available , the check needs to be restored . there were already 2 breaking changes that are fixed by this commit : * a field in avroreadsupport was made final * an accessor method in thriftschemaconvertvisitor was removed author : ryan blue < blue @ apache . org > closes #200 from rdblue / parquet - 262 - restore - semver and squashes the following commits : 09aeaf4 [ ryan blue ] parquet - 262 : restore semver checks .",parquet - 151 : skip writing metadata file in case of no footers since schema cannot be determined . this fixes npe seen during mergefooters in such a case . for this scenario onus of writing any summary files lies with the caller ( it might have some global schema available ) so for example spark does it when persisting empty rdd . author : yash datta < yash . datta @ guavus . com > closes #205 from saucam / footer bug and squashes the following commits : b2b3ddf [ yash datta ] parquet - 151 : skip writing metadata file in case of no footers since schema cannot be determined . this fixes npe seen during mergefooters in such a case . for this scenario onus of writing any summary files lies with the caller ( it might have some global schema available ),"parquet - 286 : update string support to match upstream avro . this adds getstringableclass , which determines what string representation upstream avro would use . specific and reflect will use an alternative string class if java - class is set that is instantiated using a constructor that takes a string . otherwise , reflect will always use string and both specific and generic will use utf8 or string depending on whether avro . java . string is set to ""string"" . the new string representations required two new converters : one for utf8 and one for stringable classes ( those with constructors that take a single string ) . the converters have also been refactored so that all binary converters now implement dictionary support . author : ryan blue < blue @ apache . org > closes #201 from rdblue / parquet - 286 - avro - utf8 - support and squashes the following commits : beb5a44 [ ryan blue ] parquet - 286 : add tests , support for stringable map keys . 0e9240f [ ryan blue ] parquet - 286 : update string support to match upstream avro .",parquet - 266 : add support for lists of primitives to pig schema converter author : christian rolf < christian . rolf @ adello . com > closes #209 from ccrolf / pigprimitiveslist and squashes the following commits : 5a69273 [ christian rolf ] add support for lists of primitives to pig schema converter,parquet - 246 : fix incomplete state reset in deltabytearraywriter . reset ( ) . . . thod author : alex levenson < alexlevenson @ twitter . com > author : konstantin shaposhnikov < konstantin . shaposhnikov @ sc . com > author : kostya - sh < kostya - sh @ users . noreply . github . com > closes #171 from kostya - sh / parquet - 246 and squashes the following commits : 75950c5 [ kostya - sh ] merge pull request #1 from isnotinvain / pr - 171 a718309 [ konstantin shaposhnikov ] merge remote - tracking branch 'refs / remotes / origin / master' into parquet - 246 0367588 [ alex levenson ] add regression test for pr - 171 94e8fda [ alex levenson ] merge branch 'master' into pr - 171 0a9ac9f [ konstantin shaposhnikov ] [ parquet - 246 ] bugfix : reset all deltabytearraywriter state in reset ( ) method,parquet - 297 : tests for pr 213 ( version generator ) adds tests for #213 how's this look @ rdblue @ kostya - sh ? author : alex levenson < alexlevenson @ twitter . com > closes #218 from isnotinvain / tests - for - pr - 213 and squashes the following commits : 8ee996b [ alex levenson ] fix group indexes off by 1 b239a2a [ alex levenson ] add license header : p 38fc78d [ alex levenson ] add test for version generator,parquet - 314 : fix broken equals implementations author : nezih yigitbasi < nyigitbasi @ netflix . com > closes #223 from nezihyigitbasi / parquet - fixes and squashes the following commits : 5279e60 [ nezih yigitbasi ] override object . equals properly,parquet - 311 : fix npe when debug logging metadata fixes the issue reported at https : / / issues . apache . org / jira / browse / parquet - 311 author : nezih yigitbasi < nyigitbasi @ netflix . com > closes #221 from nezihyigitbasi / debug - log - fix and squashes the following commits : 59129ed [ nezih yigitbasi ] parquet - 311 : fix npe when debug logging metadata,"parquet - 306 : add row group alignment this adds `alignmentstrategy` to the `parquetfilewriter` that can alter the position of row groups and recommend a target size for the next row group . there are two strategies : `noalignment` and `paddingalignment` . padding alignment is used for hdfs and no alignment is used for all other file systems . when hdfs - 3689 is available , we can add a strategy to use that . the amount of padding is controlled by a threshold between 0 and 1 that controls the fraction of the row group size that can be padded . this is interpreted as the maximum amount of padding that is acceptable , in terms of the row group size . for example , setting this to 5 % will write padding when the bytes left in a hdfs block are less than 5 % of the row group size . this defaults to 0 % , which prevents padding from being added and matches the current behavior . the threshold is controlled by a new outputformat configuration property , `parquet . writer . padding - thresh` . author : ryan blue < blue @ apache . org > closes #211 from rdblue / parquet - 306 - row - group - alignment and squashes the following commits : 0137ddf [ ryan blue ] parquet - 306 : add mr test with padding . 6ce3f08 [ ryan blue ] parquet - 306 : add parquet . writer . max - padding setting . f1dc659 [ ryan blue ] parquet - 306 : base next row group size on bytes remaining . c6a3e97 [ ryan blue ] parquet - 306 : add alignmentstrategy to parquetfilewriter .",parquet - 201 : fix validtypemap being overly strict with respect to originaltypes author : alex levenson < alexlevenson @ twitter . com > closes #219 from isnotinvain / alexlevenson / parquet - 201 and squashes the following commits : 1cd8b58 [ alex levenson ] merge branch 'master' into alexlevenson / parquet - 201 1d83e13 [ alex levenson ] fix validtypemap being overly strict with respect to originaltypes,"parquet - 284 : clean up parquetmetadataconverter makes all method static , removes unused thread - unsafe cache , etc . turns out the ""cache"" was only read from * after * rebuilding what needed to be cached . . . so no performance gain there ( and no loss by getting rid of it ) however , i don't know if this will fix the issue mentioned in parquet - 284 , i don't think concurrent access to a hashmap will cause deadlock , it would just cause undefined behavior in reads or maybe concurrentmodificationexception update : i'm wrong , it can cause an infinite loop so this should fix the issue https : / / gist . github . com / rednaxelafx / 1081908 update2 : put the cache back in , made it static + thread safe author : alex levenson < alexlevenson @ twitter . com > closes #220 from isnotinvain / alexlevenson / parquet - 284 and squashes the following commits : 4797b48 [ alex levenson ] fix merge conflict issue 8ff5775 [ alex levenson ] merge branch 'master' into alexlevenson / parquet - 284 ccd4776 [ alex levenson ] add encoding cache back in 9ea5a5f [ alex levenson ] clean up parquetmetadataconverter : make all method static , remove unused thread - unsafe cache",parquet - 317 : fix writemetadatafile crash when a relative root path is used this commit ensures the fully - qualified path is used prior to calling mergefooters ( . . ) . author : steven she < steven @ canopylabs . com > closes #228 from stevencanopy / relative - metadata - path and squashes the following commits : 988772b [ steven she ] use outputpath . getfilesystem ( . . . ) to get the fs for the path 1cea508 [ steven she ] parquet - 317 : fix writemetadatafile crash when a relative root path is used,parquet - 320 : fix semver problems for parquet - hadoop . re - enables semver checks for parquet packages by removing the parquet / * * exclusion that was matching unexpected classes . this also fixes all of the semver problems that have been committed since the check started excluding all parquet classes . author : ryan blue < blue @ apache . org > closes #230 from rdblue / parquet - 320 - fix - semver - issues and squashes the following commits : a0e730d [ ryan blue ] parquet - 320 : fix thrift incompatibilities from ded56ffd . ba71f3f [ ryan blue ] parquet - 320 : fix semver problems for parquet - hadoop .,"parquet - 325 : always use row group size when padding is 0 . for block file systems , if the size left in the block is greater than the max padding , a row group will be targeted at the remaining size . however , when using 0 to turn padding off , the remaining bytes will always be greater than padding and row groups can be targeted at very tiny spaces . when padding is off , the next row group's size should always be the default size . author : ryan blue < blue @ apache . org > closes #234 from rdblue / parquet - 325 - padding - 0 - fix and squashes the following commits : f4b3c2b [ ryan blue ] parquet - 325 : always use row group size when padding is 0 .",parquet - 308 : add parquetwriter#getdatasize accessor . this returns the current file position plus the amount of data buffered in the current row group as an estimate of final data size . author : ryan blue < blue @ apache . org > closes #212 from rdblue / parquet - 308 - add - data - size - accessor and squashes the following commits : 1c0d798 [ ryan blue ] parquet - 308 : add parquetwriter#getdatasize accessor .,"parquet - 289 : allow parquetreader . builder subclasses . this adds a protected constructor for subclasses , a getreadsupport method for subclasses to override , and exposes the configuration for subclasses to modify inside of getreadsupport . author : ryan blue < blue @ apache . org > closes #203 from rdblue / parquet - 289 - extend - reader - builder and squashes the following commits : 692f159 [ ryan blue ] parquet - 289 : allow parquetreader . builder subclasses .","parquet - 152 : add validation on encoding . delta byte array to allow fix… parquet - 152 : add validation on encoding . delta byte array to allow fixed len byte array types . * fixed len byte array types are binary values that may use delta byte array encoding , so they should be allowed to be decoded using the same delta byte array encoding . @ rdblue @ nezihyigitbasi could you review this fix ? i executed a test by writing a file that fall backs to delta byte array encoding , then read the file , and compare the read values with the written values , and it worked fine . author : sergio pena < sergio . pena @ cloudera . com > closes #225 from spena / parquet - 152 and squashes the following commits : 93fa03e [ sergio pena ] parquet - 152 : add validation on encoding . delta byte array to allow fixed len byte array types .",parquet - 324 : row count incorrect if data file has more than 2 ^ 31 rows need to change numrows counter from int to long to account for input files with more than 2 ^ 31 rows . author : thomas friedrich < tfriedr @ us . ibm . com > closes #233 from tfriedr / parquet - 324 and squashes the following commits : 0120205 [ thomas friedrich ] change numrows from int to long,parquet - 327 . show statistics in the dump output . closes #237,parquet - 329 : restore thriftreadsupport#thrift column filter key thriftreadsupport#thrift column filter key was removed ( incompatible change ) author : asingh < asingh @ cloudera . com > closes #239 from singhasdev / parquet - 329 and squashes the following commits : 1e44a70 [ asingh ] remove o . a . p . hadoop . thrift from semver excludes 4a1e572 [ asingh ] parquet - 329 : restore thriftreadsupport#thrift column filter key,parquet - 279 : check empty struct in compatibility checker add the empty struct check in the compatibilitychecker util . parquet currently does not support empty struct / group without leaves author : tianshuo deng < tdeng @ twitter . com > closes #194 from tsdeng / check empty struct and squashes the following commits : 35d77a1 [ tianshuo deng ] fix rebase d781cf3 [ tianshuo deng ] simplify constructor cd2fa8e [ tianshuo deng ] add state e75a6ac [ tianshuo deng ] use immutable fieldspath 2bff920 [ tianshuo deng ] fix test 69b4b9c [ tianshuo deng ] minor fixes 2db8c4b [ tianshuo deng ] remove unused println 5107ce2 [ tianshuo deng ] fix comments 265e228 [ tianshuo deng ] wip,parquet - 337 handle binary fields in set / map / list in parquet - scrooge https : / / issues . apache . org / jira / browse / parquet - 337 author : jake donham < jdonham @ twitter . com > closes #243 from jaked / parquet - 337 and squashes the following commits : 8129fe5 [ jake donham ] parquet - scrooge : handle binary fields in set / map / list,parquet - 336 : fix arrayindexoutofbounds in checkdeltabytearrayproblem author : alex levenson < alexlevenson @ twitter . com > author : alex levenson < alex @ isnotinvain . com > closes #242 from isnotinvain / patch - 1 and squashes the following commits : ce1f81e [ alex levenson ] add tests 4688930 [ alex levenson ] fix arrayindexoutofbounds in checkdeltabytearrayproblem,parquet - 340 : memorymanager : max memory can be truncated using float will cause the max heap limit to be limited to 2147483647 due to math . round ( float ) if used with a large heap . this should be a double precision to prevent rounding to an int32 before storing into a long . author : chris bannister < c . bannister @ gmail . com > closes #246 from zariel / default - mem - truncated and squashes the following commits : bf375f6 [ chris bannister ] memorymanager : ensure max memory is not truncated,"parquet - 346 : minor fixes for parquet - 350 , parquet - 348 , parquet - 346 , parquet - 345 parquet - 346 : thriftschemaconverter throws for unknown struct or union type this is triggered when passing a structtype that comes from old file metadata parquet - 350 : thriftrecordconverter throws npe for unrecognized enum values this is just some better error reporting . parquet - 348 : shouldignorestatistics too noisy this is just a case of way over logging something , to the point that it make the logs unreadable parquet - 345 thriftmetadata tostring ( ) should not try to load class reflectively this is a case where the error reporting itself crashes , which results in the real error message getting lost author : alex levenson < alexlevenson @ twitter . com > closes #252 from isnotinvain / alexlevenson / various - fixes and squashes the following commits : 9b5cb0e [ alex levenson ] add comments , cleanup some minor use of thriftschemaconverter 376343e [ alex levenson ] fix test d9d5dad [ alex levenson ] add license headers e26dc0c [ alex levenson ] add tests 8d9dde0 [ alex levenson ] fixes for parquet - 350 , parquet - 348 , parquet - 346 , parquet - 345","parquet - 341 improve write performance for wide schema sparse data in write path , when there are tons of sparse data , most of time is spent on writing nulls . currently writing nulls has the same code path as writing values , which is reclusive traverse all the leaves when a group is null . due to the fact that when a group is null all the leaves beneath it should be written with null value with the same repetition level and definition level , we can eliminate the recursion call to get the leaves this pr caches the leaves for each group node . so when a group node is null , their leaves can be flushed with null values directly . we tested it with a really wide schema on one of our production data . it improves the performance by ~ 20 % author : tianshuo deng < tdeng @ twitter . com > closes #247 from tsdeng / flush null directly and squashes the following commits : 253f2e3 [ tianshuo deng ] address comments 8676cd7 [ tianshuo deng ] flush null directly to leaves",parquet - 362 - fix parquet buffered writer being oversensitive to union schema changes parquet does prevent records with unknown union fields to be written as it would create a tprotocol violation . but it also prevents records with unions having one their field itself having an unknown field ( which is acceptable if it is a struct ) . author : laurent goujon < lgoujon @ twitter . com > closes #262 from laurentgo / fix - parquet - union - write - bug and squashes the following commits : d15ee74 [ laurent goujon ] fix parquet buffered writer being oversentive to union changes,"parquet - 343 caching nulls on group node to improve write performance on wide schema sparse data for really wide schema with sparse data , if a group node is empty , it could have a huge number of leaves underneath it . calling writemull for each leaf every time when it's ancestor group node is null is in - effcient and is bad for data locality in the memory especially when the number of leaves is huge . instead , null can be cached on the group node . flushing is only triggered when a group node becomes non - null from null . this way , all the cached null values will be flushed to the leaf nodes in a tight loop and improves write performance . we tested this approach combined with parquet - 341 on a really large schema and gave us ~ 2x improvement on write performance author : tianshuo deng < tdeng @ twitter . com > closes #249 from tsdeng / batch null and squashes the following commits : 0a61646 [ tianshuo deng ] use curly braces even for 1 line if statements a8964c0 [ tianshuo deng ] optimize writenulltoleaves 5309612 [ tianshuo deng ] optimize cachenullforgroup ecbdfca [ tianshuo deng ] add comments ed692c0 [ tianshuo deng ] wip 0cae1b6 [ tianshuo deng ] remove unused class 8e07db4 [ tianshuo deng ] refactor dead618 [ tianshuo deng ] reformat c3c0c70 [ tianshuo deng ] refactor 636ab52 [ tianshuo deng ] remove unused method 767b4fd [ tianshuo deng ] use parent definition level 8f251a0 [ tianshuo deng ] use intarraylist c549c84 [ tianshuo deng ] fix 9583d04 [ tianshuo deng ] wip d8cb878 [ tianshuo deng ] wip 35f1fa1 [ tianshuo deng ] cache columnwriter for each parent 46fd464 [ tianshuo deng ] address comments 8c83964 [ tianshuo deng ] flush null directly to leaves",parquet - 361 : add semver prerelease logic . this also adds more versions where parquet - 251 is fixed . author : ryan blue < blue @ apache . org > closes #261 from rdblue / parquet - 361 - add - semver - prerelease and squashes the following commits : c01142d [ ryan blue ] parquet - 361 : add semver prerelease logic .,parquet - 335 : remove avro check for map key value . this is not required by the map type spec . this does not affect data written by the avro object model because this bug is in the conversion from a parquet schema to an avro schema . files written with parquet - avro do not convert the underlying schema because they use the avro schema . author : ryan blue < blue @ apache . org > closes #241 from rdblue / parquet - 335 - remove - key - value - check and squashes the following commits : 1fd9541 [ ryan blue ] parquet - 335 : test that map key value is not required . 247cc76 [ ryan blue ] parquet - 335 : remove avro check for map key value .,parquet - 363 : allow empty schema groups . this removes the check added in parquet - 278 that rejects schema groups that have no fields . selecting 0 columns from a file is allowed and used by hive and sparksql to implement queries like `select count ( 1 ) . . . ` author : ryan blue < blue @ apache . org > closes #263 from rdblue / parquet - 363 - allow - empty - groups and squashes the following commits : ab370f1 [ ryan blue ] parquet - 363 : update type builder tests to allow empty groups . 926932b [ ryan blue ] parquet - 363 : add write - side schema validation . 365f30d [ ryan blue ] parquet - 363 : allow empty schema groups .,"parquet - 355 : add statistics test for parquet columns in response to parquet - 251 created an integration test that generates random values and compares the statistics against the values read from a parquet file . there are two tools classes `datagenerationcontext` and `randomvaluegenerators` which are located in the same package as the unit test . i'm sure there is a better place to put these , but i leave that to your discretion . thanks reuben author : reuben kuhnert < sircodesalot @ gmail . com > author : ryan blue < blue @ apache . org > closes #255 from sircodesalotoftheround / stats - validation and squashes the following commits : 680e96a [ reuben kuhnert ] merge pull request #1 from rdblue / parquet - 355 - stats - validation - tests 9f0033f [ ryan blue ] parquet - 355 : use columnreaderimpl . 7d0b4fe [ reuben kuhnert ] parquet - 355 : add statistics validation test","parquet - 381 : add feature to merge metadata ( summary ) files , and control which files are generated 1 ) add helper to merge 2 summary files , useful for merging 2 directories of data into 1 2 ) add more control over whether common metadata , metadata , or both is written author : alex levenson < alexlevenson @ twitter . com > closes #277 from isnotinvain / alexlevenson / merge - summary - files and squashes the following commits : 86232f5 [ alex levenson ] address comments 96b9495 [ alex levenson ] fix null extrametadata 099c913 [ alex levenson ] make deprecated method delegate to new method 7a98957 [ alex levenson ] merge branch 'master' into alexlevenson / merge - summary - files ddaf4ff [ alex levenson ] introduce job summary levels for controlling which metadata files are generated 87a2ebc [ alex levenson ] update comments 9d2b8da [ alex levenson ] add helper method for merging metadata files",parquet - 373 : fix flaky memorymanager tests . author : ryan blue < blue @ apache . org > closes #269 from rdblue / parquet - 373 - fix - flaky - mem - manager - tests and squashes the following commits : 1b55889 [ ryan blue ] parquet - 373 : fix flaky memorymanager tests .,parquet - 241 : fix parquetinputformat . getfooters ( ) order parquetinputformat . getfooters ( ) should return in the same order as what liststatus ( ) returns author : mingyu kim < mkim @ palantir . com > closes #164 from mingyukim / parquet - 241 and squashes the following commits : 86fe900 [ mingyu kim ] address pr comments b0181e2 [ mingyu kim ] parquet - 241 : parquetinputformat . getfooters ( ) should return in the same order as what liststatus ( ) returns,parquet - 364 : fix compatibility for avro lists of lists . this fixes lists of lists that have been written with avro's 2 - level representation . the conversion setup logic missed the case where the inner field is repeated and cannot be the element in a 3 - level list . this also fixes the schema conversion for cases where an unknown writer used a 2 - level list of lists . this is based on @ liancheng's #264 but fixes the problem in a slightly different way . author : ryan blue < blue @ apache . org > closes #272 from rdblue / parquet - 364 - fix - avro - lists - of - lists and squashes the following commits : 41a70e0 [ ryan blue ] parquet - 364 : fix compatibility for avro lists of lists .,"parquet - 378 : add thoroughly parquet test encodings a new test case testtypeencodings is added that test v1 and v2 encodings for all supported column types . this test case spans many pages and row groups , and reads each page individually from first - to - last and from last - to - first . author : sergio pena < sergio . pena @ cloudera . com > closes #274 from spena / parquet - 378 and squashes the following commits : b35c339 [ sergio pena ] parquet - 378 : add thoroughly parquet test encodings",parquet - 396 : extend parquetreader . builder < t > in avroparquetreader . builder extend parquetreader . builder < t > author : chris bannister < c . bannister @ gmail . com > closes #294 from zariel / parquet - 396 and squashes the following commits : 79c1d0e [ chris bannister ] parquet - 396 : extend parquetreader . builder < t >,"parquet - 387 : improve npe message when avro arrays contain null . previously , the npe had no error message but the avro support accepts schemas that have nullable array elements . author : ryan blue < blue @ apache . org > closes #291 from rdblue / parquet - 387 - fix - npe - message and squashes the following commits : 39d3c83 [ ryan blue ] parquet - 387 : update test case to verify help message . d6b6bd8 [ ryan blue ] parquet - 387 : improve npe message when avro arrays contain null .",parquet - 349 : versionparser does not handle versions missing 'build' section this change reworks the regular expression in versionparser . java to allow for missing 'version' and 'build' sections . author : reuben kuhnert < reuben . kuhnert @ cloudera . com > closes #283 from sircodesalotoftheround / fix - version - test and squashes the following commits : 0f4a22f [ reuben kuhnert ] parquet - 349 : versionparser does not handle versions missing 'build' section .,"parquet - 305 : update logging to slf4j . this removes the log implementation based on java . util . logging and replaces it with slf4j . the compiler removal of debug log messages still works because log . debug and similar final constants are unchanged . this commit adds slf4j - simple as the test logger implementation . configuration for slf4j - simple is in the root pom . two modules can't use slf4j - simple , parquet - pig and parquet - thrift , and use slf4j - log4j12 instead because pig depends on log4j and tests die without it . author : ryan blue < blue @ apache . org > closes #290 from rdblue / parquet - 305 - update - logging and squashes the following commits : 89257e8 [ ryan blue ] parquet - 305 : remove deprecation annotations on log . 9f9b99a [ ryan blue ] parquet - 305 : update logging to slf4j .","parquet - 353 : release compression resources . this updates the use of codecfactory in the output format and writer classes so that its lifecycle is tied to parquetwriter and parquetrecordwriter . when those classes are closed , the resources held by the codecfactory associated with the instance are released . this is an alternative to and closes #282 . author : ryan blue < blue @ apache . org > closes #295 from rdblue / parquet - 353 - release - compressor - resources and squashes the following commits : a00f4b7 [ ryan blue ] parquet - 353 : release compression resources .","parquet - 334 : ut test failure with pig 0 . 15 i made a few updates to the original patch parquet - 334 - 1 . patch proposed by daniel . as the inputschema is maintained in evalfunc , any reference to the private class variable inputschema should be changed to getinputschema ( ) , and inputschema can be removed because it will be null always . author : thomas friedrich < tfriedr @ us . ibm . com > closes #292 from tfriedr / parquet - 334 and squashes the following commits : 012563e [ thomas friedrich ] parquet 334 : ut test failure with pig 0 . 15",parquet - 318 : remove unnecessary object mapper author : nezih yigitbasi < nyigitbasi @ netflix . com > closes #227 from nezihyigitbasi / 318 and squashes the following commits : b8e4ca9 [ nezih yigitbasi ] remove unnecessary object mapper,parquet - 413 : fix java 8 test failure . the footer merge tests rely the order of unmergable values . this uses a linkedhashset to ensure the order doesn't change . author : ryan blue < blue @ apache . org > closes #304 from rdblue / parquet - 413 - java - 8 - test - failure and squashes the following commits : 57a83a8 [ ryan blue ] parquet - 413 : fix java 8 test failure .,"parquet - 421 : fix mismatch of javadoc names and method parameters in m . . . …odule encoding , column , and hadoop codes change now and then , but some corresponding doc comments are left out . this pr fixes only the doc comments that should have been changed . it should be ok , since none codes are touched . @ rdblue could you take a look please ? cheers . author : proflin < proflin . me @ gmail . com > closes #307 from proflin / minor - - fix - the - mismatch - of - the - parameters - and - their - doc - comments - in - module - encoding , - column , - and - hadoop and squashes the following commits : 34c7b01 [ proflin ] minor : fix the mismatch of the parameters and their doc comments in module encoding , column , and hadoop","parquet - 422 : fix a potential bug in messagetypeparser where we ignore… … and overwrite the initial value of a method parameter in org . apache . parquet . schema . messagetypeparser , for addgrouptype ( ) and addprimitivetype ( ) , the initial value of this parameter t is ignored , and t is overwritten here . this often indicates a mistaken belief that the write to the parameter will be conveyed back to the caller . this is a bug found by findbugs™ . author : proflin < proflin . me @ gmail . com > closes #308 from proflin / parquet - 422 and squashes the following commits : df1f908 [ proflin ] parquet - 422 : fix a potential bug in messagetypeparser where we ignore and overwrite the initial value of a method parameter",parquet - 393 : update to parquet - format 2 . 3 . 1 . author : ryan blue < blue @ apache . org > closes #303 from rdblue / parquet - 393 - update - parquet - format - version and squashes the following commits : 0e4c798 [ ryan blue ] parquet - 393 : add time micros and timestamp micros . ca4a741 [ ryan blue ] parquet - 393 : update to parquet - format 2 . 3 . 1 .,"parquet - 432 : complete a todo for method columndescriptor . compareto ( ) the ticket proposes to consider the case * path . length < o . path . length * in , for method columndescriptor . compareto ( ) . author : proflin < proflin . me @ gmail . com > closes #314 from proflin / parquet - 432 and squashes the following commits : 80ba94b [ proflin ] addresses pr comments 6ccd00f [ proflin ] revert updates a4d2a4a [ proflin ] parquet - 432 : complete a todo in method columndescriptor . compareto ( ) 694b76b [ proflin ] updates","parquet - 480 : update for cascading 3 . 0 the code in parquet - cascading is adapted to the api as of cascading 2 . 5 . 3 some incompatible changes were introduced in cascading 3 . 0 . this patch forks the parquet - cascading module to also provide a parquet - cascading3 module , which is about identical save for overloads which changed from requiring a foo < jobconf > to requiring a foo < ? extends jobconf > author : cyrille chépélov ( tp12 ) < cch @ transparencyrights . com > closes #284 from cchepelov / try cascading3 and squashes the following commits : e7d1304 [ cyrille chépélov ( tp12 ) ] adding a @ deprecated notice on parquet - cascading's remaining classes 05a417d [ cyrille chépélov ( tp12 ) ] cascading2 / 3 : share back tuplewritesupport . java ( accidentally unmerged ) 7fff2d4 [ cyrille chépélov ( tp12 ) ] cascading / cascading3 : remove duplicates , push common files into parquet - cascading - common23 338a416 [ cyrille chépélov ( tp12 ) ] removing unwanted file ( what ? ! ) + . gitignoring this kind of files d9f0455 [ cyrille chépélov ( tp12 ) ] tupleentry#get is now tupleentry#getobject a7f490a [ cyrille chépélov ( tp12 ) ] revert ""missing test conversion to cascading 3 . 0"" cc8b870 [ cyrille chépélov ( tp12 ) ] missing test conversion to cascading 3 . 0 2d73512 [ cyrille chépélov ( tp12 ) ] conflicting values can come in one order or the other . accept both . 33355d5 [ cyrille chépélov ( tp12 ) ] fix version mismatch ( duh! ) 7128639 [ cyrille chépélov ( tp12 ) ] non - c locale can break tests implementation ( decimal formats ) 53aa2f9 [ cyrille chépélov ( tp12 ) ] adding a parquet - cascading3 module ( forking the parquet - cascading module and accounting for api changes )",parquet - 415 : fix bytebuffer binary serialization . this also adds a test to validate that serialization works for all binary objects that are already test cases . author : ryan blue < blue @ apache . org > closes #305 from rdblue / parquet - 415 - fix - bytebuffer - binary - serialization and squashes the following commits : 4e75d54 [ ryan blue ] parquet - 415 : fix bytebuffer binary serialization .,parquet - 509 : fix args passed to string format calls this pr fixes the args passed to the `string . format ( ) ` call . author : nezih yigitbasi < nyigitbasi @ netflix . com > closes #320 from nezihyigitbasi / debug args and squashes the following commits : 43a6088 [ nezih yigitbasi ] fix args passed to string format calls,"parquet - 385 parquet - 379 : fixes strict schema merging this pr fixes strict mode schema merging . to merge two `primitivetype` `t1` and `t2` , they must satisfy the following conditions : 1 . `t1` and `t2` have the same primitive type name 1 . `t1` and `t2` either - don't have original type , or - have the same original type 1 . if `t1` and `t2` are both `fixed len byte array` , they should have the same length also , merged schema now preserves original name if there's any . author : cheng lian < lian @ databricks . com > closes #315 from liancheng / fix - strict - schema - merge and squashes the following commits : a29138c [ cheng lian ] addresses pr comment 1ac804e [ cheng lian ] fixes strict schema merging","parquet - 430 : change to use locale parameterized version of string . touppercase ( ) / tolowercase a string is being converted to upper or lowercase , using the platform's default encoding . this may result in improper conversions when used with international characters . for instance , ""title"" . tolowercase ( ) in a turkish locale returns ""tıtle"" , where 'ı' - - without a dot - - is the latin small letter dotless i character . to obtain correct results for locale insensitive strings , we'd better use tolowercase ( locale . english ) . for more information on this , please see : - http : / / stackoverflow . com / questions / 11063102 / using - locales - with - javas - tolowercase - and - touppercase - http : / / lotusnotus . com / lotusnotus en . nsf / dx / dotless - i - tolowercase - and - touppercase - functions - use - responsibly . htm - http : / / java . sys - con . com / node / 46241 this pr changes our use of string . touppercase ( ) / tolowercase ( ) to string . touppercase ( locale . * english * ) / tolowercase ( * locale . english * ) author : proflin < proflin . me @ gmail . com > closes #312 from proflin / parquet - 430 and squashes the following commits : ed55822 [ proflin ] parquet - 430","parquet - 431 : make parquetoutputformat . memorymanager volatile currently parquetoutputformat . getrecordwriter ( ) contains an unsynchronized lazy initialization of the non - volatile static field * memorymanager * . because the compiler or processor may reorder instructions , threads are not guaranteed to see a completely initialized object , when parquetoutputformat . getrecordwriter ( ) is called by multiple threads . this pr makes * memorymanager * volatile to correct the problem . author : liwei lin < proflin . me @ gmail . com > author : proflin < proflin . me @ gmail . com > closes #313 from proflin / parquet - 431 and squashes the following commits : 1aa4a44 [ liwei lin ] empty commit to trigger ci 5e94fa3 [ liwei lin ] remove the volatile modifier for memorymanager d54bb99 [ liwei lin ] undo the deprecated anotation fd1df4e [ liwei lin ] adds synchronization around the creation of memorymanager as well as getmemorymanager ( ) 615aa5a [ proflin ] parquet - 431","parquet - 529 : avoid evoking job . tostring ( ) in parquetloader when ran under hadoop2 environment and log level setting to `debug` , parquetloader would evoke `job . tostring ( ) ` in several methods , which might cause the whole application to stop due to : ``` java . lang . illegalstateexception : job in state define instead of running at org . apache . hadoop . mapreduce . job . ensurestate ( job . java : 283 ) at org . apache . hadoop . mapreduce . job . tostring ( job . java : 452 ) at java . lang . string . valueof ( string . java : 2847 ) at java . lang . stringbuilder . append ( stringbuilder . java : 128 ) at org . apache . parquet . pig . parquetloader . getschema ( parquetloader . java : 260 ) at org . apache . parquet . pig . testparquetloader . testschema ( testparquetloader . java : 54 ) . . . ``` the reason is that in the hadoop 2 . x branch , `org . apache . hadoop . mapreduce . job . tostring ( ) ` has added an `ensurestate ( jobstate . running ) ` check ; see [ map - reduce : job . java#452 ] ( http : / / grepcode . com / file / repo1 . maven . org / maven2 / org . apache . hadoop / hadoop - mapreduce - client - core / 2 . 3 . 0 / org / apache / hadoop / mapreduce / job . java#452 ) . in contrast , the hadoop 1 . x branch does not contain such checks , so `parquetloader` works well . this pr simply avoids evoking `job . tostring ( ) ` in `parquetloader` . author : proflin < proflin . me @ gmail . com > author : liwei lin < proflin . me @ gmail . com > closes #326 from proflin / parquet - 529 - - avoid - evoking - job . tostring ( ) - in - parquetloader and squashes the following commits : f464c7b [ proflin ] add jobtostring 5d4c750 [ proflin ] parquet - 529 : avoid evoking job . tostring ( ) in parquetloader . java bb4283a [ liwei lin ] merge branch 'master' of https : / / github . com / proflin / parquet - mr 839b458 [ proflin ] merge remote - tracking branch 'refs / remotes / apache / master'",parquet - 397 : implement pig predicate pushdown this is based on #296 from @ danielcweeks and implements a few remaining review items . closes #296 . author : daniel weeks < dweeks @ netflix . com > author : ryan blue < blue @ apache . org > closes #331 from rdblue / parquet - 397 - pig - predicate - pushdown and squashes the following commits : c7a9b02 [ ryan blue ] parquet - 397 : address review comments . 54e23a6 [ ryan blue ] parquet - 397 : update pig ppd to throw for bad expressions . 388099b [ daniel weeks ] cleaning up imports 6b405b4 [ daniel weeks ] merge remote - tracking branch 'rdblue / pig - predicate - pushdown' into pig - predicate - pushdown f1ef73e [ daniel weeks ] fixed binary type and storing filter predicate a39fdff [ ryan blue ] wip : handle a few error cases in pig predicate pushdown . 2666849 [ daniel weeks ] fixed test to check the actual number of materialized rows from the reader 7b019a6 [ daniel weeks ] update tests and logging f8ca447 [ daniel weeks ] add predicate pushdown using filter2 api,"parquet - 528 : fix flush ( ) for recordconsumer and implementations `flush ( ) ` was added in `recordconsumer` and `messagecolumnio` to help implementing nulls caching . however , other `recordconsumer` implementations should also implements `flush ( ) ` properly . for instance , `recordconsumerloggingwrapper` and `validatingrecordconsumer` should call `delegate . flush ( ) ` in their `flush ( ) ` methods , otherwise data might be mistakenly truncated . this pr : - makes `flush ( ) ` abstract in `recordconsumer` - implements `flush ( ) ` properly for all `recordconsumer` subclasses , specifically : - `recordconsumerloggingwrapper` - `validatingrecordconsumer` - `converterconsumer ` - `expectationvalidatingrecordconsumer ` author : proflin < proflin . me @ gmail . com > author : liwei lin < proflin . me @ gmail . com > closes #325 from proflin / parquet - 528 and squashes the following commits : 2c90740 [ proflin ] minor style issue 25444b9 [ proflin ] still keep recordconsumer . flush ( ) non - abstract 8776e3a [ proflin ] parquet - 528 : fix flush ( ) for recordconsumer and implementations bb4283a [ liwei lin ] merge branch 'master' of https : / / github . com / proflin / parquet - mr 839b458 [ proflin ] merge remote - tracking branch 'refs / remotes / apache / master'","parquet - 571 : fix potential leak in parquetfilereader . close ( ) if an exception occurs when closing the input stream `f` , the codecs will not be released . this may cause native memory leaks for some codecs . \ cc @ rdblue author : nezih yigitbasi < nyigitbasi @ netflix . com > closes #338 from nezihyigitbasi / leak - fix and squashes the following commits : fcc5528 [ nezih yigitbasi ] fix potential leak in close ( )",parquet - 581 : fix two instances of the conflation of the min and max row count for page size check in parquetoutputformat . java author : michael allman < michael @ videoamp . com > closes #340 from mallman / fix minmax conflation and squashes the following commits : 79331a5 [ michael allman ] parquet - 581 : fix two instances of the conflation of the min and max row count for page size check in parquetoutputformat . java,"parquet - 580 : switch int [ ] initialization in intlist to be lazy noticed that for a dataset that we were trying to import that had a lot of columns ( few thousand ) that weren't being used , we ended up allocating a lot of unnecessary int arrays ( each 64k in size ) . heap footprint for all those int [ ] s turned out to be around 2gb or so ( and results in some jobs ooming ) . this seems unnecessary for columns that might not be used . the changes in this pr switch over to initialize the int [ ] only when it being used for the first time . also wondering if 64k is the right size to start off with . wondering if a potential improvement is if we could allocate these int [ ] s in intlist in a way that slowly ramps up their size . so rather than create arrays of size 64k at a time ( which is potentially wasteful if there are only a few hundred bytes ) , we could create say a 4k int [ ] , then when it fills up an 8k [ ] and so on till we reach 64k ( at which point the behavior is the same as the current implementation ) . if this sounds like a reasonable idea , i can update this pr to do that as well . wasn't sure if there was some historical context around that . . author : piyush narang < pnarang @ twitter . com > closes #339 from piyushnarang / master and squashes the following commits : 3ecc577 [ piyush narang ] remove redundant intlist ctor f7dfd5f [ piyush narang ] switch int [ ] initialization in intlist to be lazy",parquet - 584 show proper command usage when there's no arguments author : kaufman ng < kaufman @ cloudera . com > author : ryan blue < blue @ apache . org > closes #336 from coughman / master and squashes the following commits : cd459f9 [ kaufman ng ] parquet - 584 : fixed formatting 1d1e965 [ kaufman ng ] merge branch 'master' of https : / / github . com / coughman / incubator - parquet - mr 25b6d86 [ kaufman ng ] merge branch 'master' of https : / / github . com / apache / parquet - mr bee66e5 [ ryan blue ] parquet - 384 : add dictionary filtering . 283f7c7 [ kaufman ng ] show proper command usage when there's no arguments,parquet - 484 : warn when decimal is stored as int64 while could be stored as int32 below is documented in [ logicaltypes . md ] ( https : / / github . com / parquet / parquet - format / blob / master / logicaltypes . md#decimal ) : > int32 : for 1 < = precision < = 9 > int64 : for 1 < = precision < = 18 ; precision < 10 will produce a warning this pr implements the `precision < 10 will produce a warning` part . @ rdblue @ liancheng would mind taking a look at this when you have time ? it's a fairly small addition ; cheers . author : liwei lin < proflin . me @ gmail . com > author : proflin < proflin . me @ gmail . com > closes #316 from lw - lin / p - 484 - 2 and squashes the following commits : 207e509 [ liwei lin ] address comments b227484 [ proflin ] parquet - 484 : warn when decimal is stored as int64 while could be stored as int32,"parquet - 358 : add support for avro's logical types api . this adds support for avro's logical types api to parquet - avro . * the logical types api was introduced in avro 1 . 8 . 0 , so this bumps the avro dependency version to 1 . 8 . 0 . * types supported are : decimal , date , time - millis , time - micros , timestamp - millis , and timestamp - micros * tests have been copied from avro and ported to the parquet - avro api author : ryan blue < blue @ apache . org > closes #318 from rdblue / parquet - 358 - add - avro - logical - types - api and squashes the following commits : bd81f9c [ ryan blue ] parquet - 358 : fix review items . 0a882ee [ ryan blue ] parquet - 358 : add logical types circular reference test . 5124618 [ ryan blue ] parquet - 358 : add license documentation for code from avro . dcb14be [ ryan blue ] parquet - 358 : add support for avro's logical types api .","parquet - 585 : slowly ramp up sizes of int [ ] s in intlist to keep sizes small when data sets are small one of the follow up items from pr - https : / / github . com / apache / parquet - mr / pull / 339 was to slowly ramp up the size of the int [ ] created in intlist to ensure we don't allocate 64k arrays right off the bat . this pr updates the code to start with a 4k array then keeps doubling till 64k ( and stays at 64k after that ) . author : piyush narang < pnarang @ twitter . com > closes #341 from piyushnarang / master and squashes the following commits : 0bc6b84 [ piyush narang ] fix review comments - add spaces , check slab size , fix slab init d1b4df1 [ piyush narang ] make intlisttest values relative to constants in intlist 9617015 [ piyush narang ] update intlist slab creation to keep bumping up size gradually ebf1c58 [ piyush narang ] merge branch 'master' of https : / / github . com / apache / parquet - mr 3ecc577 [ piyush narang ] remove redundant intlist ctor f7dfd5f [ piyush narang ] switch int [ ] initialization in intlist to be lazy","parquet - 548 : add encodingstats . this adds `encodingstats` , which tracks the number of pages for each encoding , separated into dictionary and data pages . it also adds convenience functions that are useful for dictionary filtering , like `hasdictionaryencodedpages` and `hasnondictionaryencodedpages` . `encodingstats` have a unit test in parquet - column and an integration test in parquet - hadoop that writes a file and verifies the stats are present and correct when it is read . this includes commits from #330 because it updates the dictionary filter . i'll rebase and remove them once it is merged . author : ryan blue < blue @ apache . org > closes #332 from rdblue / parquet - 548 - add - encoding - stats and squashes the following commits : 5f148e6 [ ryan blue ] parquet - 548 : fixes for review comments . dc332d3 [ ryan blue ] parquet - 548 : add encodingstats .",parquet - 569 : separate metadata filtering for ranges and offsets . range filtering should use the row group midpoint and offset filtering should use the start offset . author : ryan blue < blue @ apache . org > closes #337 from rdblue / parquet - 569 - fix - metadata - filter and squashes the following commits : 6171af4 [ ryan blue ] parquet - 569 : add tests for new offset metadata filter . 3fe2d5e [ ryan blue ] parquet - 569 : separate metadata filtering for ranges and offsets .,"parquet - 560 : synchronize writes to the finishcalled variable reads of the `finishcalled` variable are properly synchronized , but writes are not - - so there's some sort of inconsistent synch . going on here . this pr fixes that . / cc @ rdblue can you please take a look ? author : nezih yigitbasi < nyigitbasi @ netflix . com > closes #334 from nezihyigitbasi / sc - synch - fix and squashes the following commits : a85cf0c [ nezih yigitbasi ] synchronize writes to the finishcalled variable","parquet - 372 : do not write stats larger than 4k . this updates the stats conversion to check whether the min and max values for page stats are larger than 4k . if so , no statistics for a page are written . author : ryan blue < blue @ apache . org > closes #275 from rdblue / parquet - 372 - fix - min - max - for - long - values and squashes the following commits : 61e05d9 [ ryan blue ] parquet - 372 : add comment to explain not truncating values . fbbc1c4 [ ryan blue ] parquet - 372 : do not write stats larger than 4k .","parquet - 367 : ""parquet - cat - j"" doesn't show all records . added jsonrecordformatter which formats simplerecords into an structure that can be used with objectmapper to create a valid json structure . unit test included . author : reuben kuhnert < reuben . kuhnert @ cloudera . com > closes #281 from sircodesalotoftheround / fix - parquet - cat and squashes the following commits : 67207ef [ reuben kuhnert ] parquet - 367 : ""parquet - cat - j"" doesn't show all records .",parquet - 544 : add closed flag to allow for closeable contract adherence the closeable interface states : > closes this stream and releases any system resources associated with it . if the stream is already closed then invoking this method has no effect . as internalparquetrecordwriter implements this interface we should adhere to this contract . author : mark reddy < mark . l . reddy @ gmail . com > closes #345 from markreddy / parquet - 544 - adhere - to - closeable - contract and squashes the following commits : 135db9b [ mark reddy ] parquet - 544 : add closed flag to allow for adherence to closeable contract,"parquet - 645 : fix null handling in dictionaryfilter . this fixes how null is handled by `dictionaryfilter` for equals predicates . null is never in the dictionary and is encoded by the definition level , so the `dictionaryfilter` would never find the value in the dictionary and would incorrectly filter row groups whenever the filter was `col = = null` . author : ryan blue < blue @ apache . org > closes #348 from rdblue / parquet - 645 - fix - null - dictionary - filter and squashes the following commits : ae8dd41 [ ryan blue ] parquet - 645 : fix null handling in dictionaryfilter .","parquet - 642 : improve performance of bytebuffer based read / write paths while trying out the newest parquet version , we noticed that the changes to start using bytebuffers : https : / / github . com / apache / parquet - mr / commit / 6b605a4ea05b66e1a6bf843353abcb4834a4ced8 and https : / / github . com / apache / parquet - mr / commit / 6b24a1d1b5e2792a7821ad172a45e38d2b04f9b8 ( mostly avro but a couple of bytebuffer changes ) caused our jobs to slow down a bit . read overhead : 4 - 6 % ( in mb millis ) write overhead : 6 - 10 % ( mb millis ) . seems like this seems to be due to the encoding / decoding of strings in the [ binary class ] ( https : / / github . com / apache / parquet - mr / blob / master / parquet - column / src / main / java / org / apache / parquet / io / api / binary . java ) : [ tostringusingutf8 ( ) ] ( https : / / github . com / apache / parquet - mr / blob / master / parquet - column / src / main / java / org / apache / parquet / io / api / binary . java#l388 ) - for reads [ encodeutf8 ( ) ] ( https : / / github . com / apache / parquet - mr / blob / master / parquet - column / src / main / java / org / apache / parquet / io / api / binary . java#l236 ) - for writes with these changes we see around 5 % improvement in mb millis while running the job on our hadoop cluster . added some microbenchmark details to the jira . note that i've left the behavior the same for the avro write path - it still uses charsequence and the charset based encoders . author : piyush narang < pnarang @ twitter . com > closes #347 from piyushnarang / bytebuffer - encoding - fix - pr and squashes the following commits : 43c5bdd [ piyush narang ] keep avro on char sequence 2d50c8c [ piyush narang ] update binary approach 9e58237 [ piyush narang ] proof of concept fixes",parquet - 612 : add compression codec to fileencodingsit . author : ryan blue < blue @ apache . org > closes #343 from rdblue / parquet - 612 - test - compression and squashes the following commits : a5b7dbb [ ryan blue ] parquet - 612 : add compression codec to fileencodingsit .,parquet - 654 : add option to disable record - level filtering . this can be used by frameworks that use codegen for filtering to avoid running filters within parquet . author : ryan blue < blue @ apache . org > closes #353 from rdblue / parquet - 654 - add - record - level - filter - option and squashes the following commits : b497e7f [ ryan blue ] parquet - 654 : add option to disable record - level filtering .,"parquet - 651 : improve avro's iselementtype check . the avro implementation needs to check whether the read schema that is passed by the user ( or automatically converted from the file schema ) expects an extra 1 - field layer to be returned , which matches the previous behavior of avro when reading a 3 - level list . before this commit , the check was done by testing the structure of the expected list element type against the repeated group's schema . if they matched , then avro assumed that the user expected an extra layer . however , for records that happened to match ( 1 - field records with a field named ""element"" ) the check could be wrong and would cause exceptions later . this commit updates the check to convert the file's element schema to avro and compare the compatibility of that schema with what was passed by the user . this checks the entire tree from the element down and gets the answer right based on the element and its children , not just the field names on the element . author : ryan blue < blue @ apache . org > closes #352 from rdblue / parquet - 651 - improve - is - element - type - check and squashes the following commits : ad9c1ee [ ryan blue ] parquet - 651 : undo accidental default setting change . 1efa248 [ ryan blue ] parquet - 651 : improve avro's iselementtype check .","parquet - 543 : remove unused boundedint package . this relocates the devnullvalueswriter and zerointegervaluesreader , which are used but are not related to the boundedint code . author : ryan blue < blue @ apache . org > closes #329 from rdblue / parquet - 543 - remove - boundedint and squashes the following commits : 0158c51 [ ryan blue ] parquet - 543 : update new import in parquetproperties . 550a1a3 [ ryan blue ] parquet - 543 : remove unused boundedint package .","parquet - 511 : integer overflow when counting values in column . this commit fixes an issue when the number of entries in a column page is larger than the size of an integer . no exception is thrown directly , but the def level is set incorrectly , leading to a null value being returned during read . author : michal gorecki < goreckim @ amazon . com > closes #321 from goreckm / int - overflow and squashes the following commits : d224815 [ michal gorecki ] enhancing exception message 7334be2 [ michal gorecki ] parquet - 511 : integer overflow when counting values in column .","parquet - 668 - provide option to disable auto crop feature in dump https : / / issues . apache . org / jira / browse / parquet - 668 1 . added option ` - - disable - crop` 2 . updated `readme . md` to reflect changes author : djhworld < djharperuk @ gmail . com > closes #358 from djhworld / master and squashes the following commits : 493c3d0 [ djhworld ] parquet - 668 : removed usage instructions from readme , replaced with - - help flag 696a5e6 [ djhworld ] parquet - 668 - > updated readme . md to fix issue in usage string 6cbf59b [ djhworld ] parquet - 668 - provide option to disable auto crop feature in dumpcommand output","parquet - 601 : add support to configure the encoding used by valuewriters ### context : parquet is currently structured to choose the appropriate value writer based on the type of the column as well as the parquet version . as of now , the writer ( s ) ( and hence encoding ) for each data type is hard coded in the parquet source code . this pr adds support for being able to override the encodings per type via config . that allows users to experiment with various encoding strategies manually as well as enables them to override the hardcoded defaults if they don't suit their use case . we can override encodings per data type ( int32 / int64 / . . . ) . something on the lines of : ``` parquet . writer . encoding - override . < type > = ""encoding1 [ , encoding2 ] "" ``` as an example : ``` ""parquet . writer . encoding - override . int32"" = ""plain"" ( chooses plain encoding and hence the plainvalueswriter ) . ``` when a primary + fallback need to be specified , we can do the following : ``` ""parquet . writer . encoding - override . binary"" = ""rle dictionary , delta byte array"" ( chooses rle dictionary encoding as the initial encoding and delta byte array encoding as the fallback and hence creates a fallbackwriter ( plainbinarydictionaryvalueswriter , deltabytearraywriter ) . ``` in such cases we can mandate that the first encoding listed must allow for fallbacks by implementing [ requiresfallback ] ( https : / / github . com / apache / parquet - mr / blob / master / parquet - column / src / main / java / org / apache / parquet / column / values / requiresfallback . java#l31 ) . ### pr notes : - restructured the valueswriter creation code . pulled it out of parquetproperties into a new class and refactored the flow based on type as it was getting hard to follow and i felt adding the overrides would make it harder . added a bunch of unit tests to verify the valueswriter we create for combinations of type , parquet version and dictionary on / off . - added unit tests to verify parsing of the encoding overrides + creation of valueswriters based on these overrides . - manually tested some encoding overrides scenarios out on hadoop ( both parquet v1 , v2 ) . author : piyush narang < pnarang @ twitter . com > closes #342 from piyushnarang / master and squashes the following commits : 3ebab28 [ piyush narang ] remove configurable 149bb98 [ piyush narang ] switch to getvalueswriterfactory call to non - static 0b78e04 [ piyush narang ] address ryan's feedback 1da6ca3 [ piyush narang ] merge branch 'master' into piyush / dynamic - encoding - overrides f021ed2 [ piyush narang ] tweak comment in valueswriterfactory cb02ea0 [ piyush narang ] fix review comments bf4bc6d [ piyush narang ] add support for config setting in valueswriter factory 8a852a3 [ piyush narang ] log values writer factory chosen e4b61a4 [ piyush narang ] tweak factory instantiation a bit b46cccd [ piyush narang ] add class based factory override 6a5428f [ piyush narang ] clean up some stuff in valueswriterfactory 0f8cd09 [ piyush narang ] refactor mockito version 9ead61d [ piyush narang ] add guava test dep 5c636c7 [ piyush narang ] add encoding - overrides config to parquetoutputformat config b9d6c13 [ piyush narang ] refactor code in valueswriterfactory a bit ff4c90d [ piyush narang ] pull out value writer creation to valueswriterfactory and add unit tests","parquet - 400 : replace compatibilityutil with seekableinputstream . this fixes parquet - 400 by replacing `compatibilityutil` with `seekableinputstream` that's implemented for hadoop - 1 and hadoop - 2 . the benefit of this approach is that `seekableinputstream` can be used for non - hadoop file systems in the future . this also changes the default hadoop version to hadoop - 2 . the library is still compatible with hadoop 1 . x , but this makes building hadoop - 2 classes , like `h2seekableinputstream` , much easier and removes the need for multiple hadoop versions during compilation . author : ryan blue < blue @ apache . org > closes #349 from rdblue / parquet - 400 - byte - buffers and squashes the following commits : 1bcb8a8 [ ryan blue ] parquet - 400 : fix review nits . 823ca00 [ ryan blue ] parquet - 400 : add tests for hadoop 2 readfully . 02d3709 [ ryan blue ] parquet - 400 : remove unused property . b543013 [ ryan blue ] parquet - 400 : fix logger for hadoopstreams . 2cb6934 [ ryan blue ] parquet - 400 : remove h2seekableinputstream tests . abaa695 [ ryan blue ] parquet - 400 : fix review items . 5dc50a5 [ ryan blue ] parquet - 400 : add tests for h1seekableinputstream methods . 730a9e2 [ ryan blue ] parquet - 400 : move seekableinputstream to io package . 506a556 [ ryan blue ] parquet - 400 : remove hadoop dependencies from seekableinputstream . c80580c [ ryan blue ] parquet - 400 : handle unsupportedoperationexception from read ( bytebuffer ) . ba08b3f [ ryan blue ] parquet - 400 : replace compatibilityutil with seekableinputstream .",parquet - 460 : merge multi parquet files to one file a merge command for parquet - tools based on https : / / issues . apache . org / jira / browse / parquet - 382 . author : flykobe < flykobecy @ gmail . com > closes #327 from flykobe / merge tool and squashes the following commits : b031c18 [ flykobe ] check input files da28832 [ flykobe ] merge multi parquet files to one file,"parquet - 623 : fix deltabytearrayreader#skip . previously , this passed the skip to the underlying readers , but would not update previous and would corrupt values or cause exceptions . author : ryan blue < blue @ apache . org > closes #366 from rdblue / parquet - 623 - fix - delta - byte - array - skip and squashes the following commits : f85800c [ ryan blue ] parquet - 623 : fix deltabytearrayreader#skip .","parquet - 660 : ignore extension fields in protobuf messages . currently , converting protobuf messages with extension can result in an uninformative error or a data corruption . a more detailed explanation in the corresponding [ jira ] ( https : / / issues . apache . org / jira / browse / parquet - 660 ) . this patch simply ignores extension fields in protobuf messages . in the longer run , i'd like to add a proper support for protobuf extensions . this might take a little longer though , so i've decided to improve the current situation with this patch . author : jakub kukul < jakub . kukul @ gmail . com > closes #351 from jkukul / master and squashes the following commits : 27580ab [ jakub kukul ] parquet - 660 : throw unsupported exception for messages with extensions . db6e08b [ jakub kukul ] parquet - 660 : refactor : don't use additional variable for indexing fieldwriters . e910a8a [ jakub kukul ] parquet - 660 : refactor : add missing indentation .",parquet - 674 : add inputfile abstraction for openable files . author : ryan blue < blue @ apache . org > closes #368 from rdblue / parquet - 674 - add - data - source and squashes the following commits : 8c689e9 [ ryan blue ] parquet - 674 : implement review comments . 4a7c327 [ ryan blue ] parquet - 674 : add datasource abstraction for openable files .,parquet - 726 : increase max difference of testmemorymanagerupperlimit to 10 % author : niels basjes < nbasjes @ bol . com > closes #370 from nielsbasjes / parquet - 726 and squashes the following commits : f385ede [ niels basjes ] parquet - 726 : increase max difference of testmemorymanagerupperlimit to 10 %,parquet - 685 - deprecated parquetinputsplit constructor passes paramet… the problem was not discovered because the test was bugous . updated both sides . author : gabor szadovszky < gabor . szadovszky @ cloudera . com > closes #372 from gszadovszky / parquet - 685 and squashes the following commits : 9cbeee2 [ gabor szadovszky ] parquet - 685 - deprecated parquetinputsplit constructor passes parameters in the wrong order .,"parquet - 686 : do not return min / max for the wrong order . min and max are currently calculated using the default java ordering that uses signed comparison for all values . this is not correct for binary types like strings and decimals or for unsigned numeric types . this commit prevents statistics accumulated using the signed ordering from being returned by parquetmetadataconverter when the type should use the unsigned ordering . because many binary strings are not affected by using the wrong ordering , this adds a property , parquet . strings . use - signed - order to allow overriding this change . author : ryan blue < blue @ apache . org > closes #367 from rdblue / parquet - 686 - suppress - signed - stats and squashes the following commits : f9d459f [ ryan blue ] parquet - 686 : add getconfiguration to hadoopinputfile . 301bd3a [ ryan blue ] parquet - 686 : address review comments . c099c35 [ ryan blue ] parquet - 686 : do not return min / max for the wrong order .","parquet - 743 : fix dictionaryfilter when compressed dictionaries are reused . bytesinput is not supposed to be held and reused , but decompressed dictionary pages do this . reusing the dictionary will cause a failure , so the cleanest option is to keep the bytes around once the underlying stream has been read . author : ryan blue < blue @ apache . org > closes #376 from rdblue / parquet - 743 - fix - reused - dictionaries and squashes the following commits : 28c0903 [ ryan blue ] parquet - 743 : fix dictionaryfilter when dictionaries are reused .","parquet - 751 : add setrequestedschema to parquetfilereader . this fixes a bug introduced by dictionary filters , which reused an existing file reader to avoid opening multiple input streams . before that commit , a new file reader was opened and passed the projection columns from the read context . the fix is to set the requested schema on the file reader instead of creating a new instance . this also adds a test to ensure that column projection works to catch bugs like this in the future . author : ryan blue < blue @ apache . org > closes #379 from rdblue / parquet - 751 - fix - column - projection and squashes the following commits : 7ea0c16 [ ryan blue ] parquet - 751 : fix column projection test . 1da507e [ ryan blue ] parquet - 751 : add setrequestedschema to parquetfilereader .",parquet - 753 : fixed grouptype . union ( ) to handle original type also fixed grouptype . equals ( ) to compare the original type and 2 unit tests that weren't setting the original type properly on the expected results author : adeneche < adeneche @ apache . org > author : adeneche < adeneche @ gmail . com > closes #380 from adeneche / fix - grouptype - union and squashes the following commits : b04af7d [ adeneche ] reverted unnecessary formatting changes 5461a57 [ adeneche ] fixed unit tests in testpigschemaconverter that were failing because of my fix to grouptype . equals ( ) ec91315 [ adeneche ] fixed expected error message in testmessagetype#testmergeschema a1d7f63 [ adeneche ] fixed grouptype . union ( ) to handle original type,parquet - 755 : create parquet - arrow module with schema converter author : julien le dem < julien @ dremio . com > closes #381 from julienledem / parquet arrow and squashes the following commits : 9792683 [ julien le dem ] parquet - 755 : create parquet - arrow module with schema converter introduces schemamapping add repeated mapping,"parquet - 783 : close the underlying stream when an h2seekableinputstream is closed this pr addresses https : / / issues . apache . org / jira / browse / parquet - 783 . `parquetfilereader` opens a `seekableinputstream` to read a footer . in the process , it opens a new `fsdatainputstream` and wraps it . however , `h2seekableinputstream` does not override the `close` method . therefore , when `parquetfilereader` closes it , the underlying `fsdatainputstream` is not closed . as a result , these stale connections can exhaust a clusters' data nodes' connection resources and lead to mysterious hdfs read failures in hdfs clients , e . g . ``` org . apache . hadoop . hdfs . blockmissingexception : could not obtain block : bp - 905337612 - 172 . 16 . 70 . 103 - 1444328960665 : blk 1720536852 646811517 ``` author : michael allman < michael @ videoamp . com > closes #388 from mallman / parquet - 783 - close underlying inputstream and squashes the following commits : f4b27c1 [ michael allman ] parquet - 783 close the underlying stream when an h2seekableinputstream is closed","parquet - 220 : unnecessary warning in parquetrecordreader . initialize rather than querying the counter method up front , the counter method is resolved per object . this allows us to use the 'getcounter' method on any taskattemptcontext with the correct signature ( ignoring versions where taskattemptcontext does not have an appropriate method / signature - preserving current behavior ) . author : reuben kuhnert < reuben . kuhnert @ cloudera . com > closes #280 from sircodesalotoftheround / context - utils - parquet - 220 and squashes the following commits : f118990 [ reuben kuhnert ] parquet - 220 : unnecessary warning in parquetrecordreader . initialize",parquet - 321 : default maximum block padding to 8mb . rdblue's change applied to the newest code . original pull request : https : / / github . com / apache / parquet - mr / pull / 232 / author : zoltan ivanfi < zi @ cloudera . com > closes #391 from zicl / master and squashes the following commits : b1c5c1d [ zoltan ivanfi ] parquet - 321 : default maximum block padding to 8mb .,parquet - 791 : add missing column support for userdefinedpredicate this extends the fixing #354 to userdefinedpredicate . author : liang - chi hsieh < viirya @ gmail . com > closes #389 from viirya / parquet - 791 and squashes the following commits : d6be37d [ liang - chi hsieh ] address comment . 7e929c3 [ liang - chi hsieh ] parquet - 791 : add missing column support for userdefinedpredicate .,parquet - 801 : allow userdefinedpredicates in dictionaryfilter author : patrick woody < pwoody @ palantir . com > author : patrick woody < patrick . woody1 @ gmail . com > closes #394 from pwoody / pw / dictionaryudp and squashes the following commits : d8499a0 [ patrick woody ] short circuiting and style changes 4cb9f0c [ patrick woody ] more missing imports 1ec0d39 [ patrick woody ] fix missing import 3ee4489 [ patrick woody ] parquet - 801 : allow userdefinedpredicates in dictionaryfilter,"parquet - 825 : static analyzer findings ( npes , resource leaks ) some trivial code fixes based on findings on static code analyzer tools ( sonar , fortify ) @ piyushnarang : sorry , renaming the branch caused the closing of the original pr . . . author : gabor szadovszky < gabor . szadovszky @ budapests - macbook - pro - 8 . local > author : gabor szadovszky < gabor . szadovszky @ cloudera . com > closes #399 from gszadovszky / parquet - 825 and squashes the following commits : 68a4764 [ gabor szadovszky ] parquet - 825 - static analyzer findings ( npes , resource leaks ) a689c1c [ gabor szadovszky ] code fixes related to null checks , exception handling and closing streams","parquet - 822 : upgrade java dependencies 2 minor code / config modification related to the version upgrades : - testmemorymanager . java : i guess , it was caused by the junit upgrade however , it is not clear why it was working before . the issue was that the second run of `createwriter ( 1 ) . close ( null ) ` failed with `ioexception` about that the file already exists . - pom . xml ( added exclusion for fastutil ) : the shaded dependency upgrade in `parquet - column` caused failure of api version compatibility check . `mvn clean install` worked fine . any idea about additional testing is welcomed . author : gabor szadovszky < gabor . szadovszky @ budapests - macbook - pro - 8 . local > closes #398 from gszadovszky / parquet - 822 and squashes the following commits : 25d0c7f [ gabor szadovszky ] update hadoop - 1 version ; back to the old httpclient because of hadoop - 1 test failure 17a8137 [ gabor szadovszky ] parquet - 822 : upgrade java dependencies","parquet - 806 : parquet - tools silently suppresses error messages the ""error message"" that used to be org / apache / hadoop / conf / configuration now becomes : noclassdeffounderror : org / apache / hadoop / conf / configuration author : zoltan ivanfi < zi @ cloudera . com > closes #396 from zivanfi / parquet - 806 and squashes the following commits : b1fe699 [ zoltan ivanfi ] parquet - 806 : parquet - tools silently suppresses error messages","parquet - 772 : fix locale - specific test failures . the statistics tests were failing in locales with a decimal mark other than "" . "" author : zoltan ivanfi < zi @ cloudera . com > closes #395 from zivanfi / parquet - 772 and squashes the following commits : acec99c [ zoltan ivanfi ] parquet - 772 : fix locale - specific test failures .","parquet - 665 adds support for proto3 this change bumps the protobuf version and adds tests to show compatibility with proto3 . it does not actually change anything else . tests are mostly identical to existing tests , and tests that tested functionality not present in proto3 are not present ( such as groups and extensions ) . proto3 oneof and map are represented in the tests . tested by running `mvn test - - am - - projects parquet - protobuf` author : mark chua < mark @ asana . com > closes #407 from markchua / mkc / proto3 and squashes the following commits : 40ef997 [ mark chua ] parquet - 665 adds support for proto3",parquet - 969 : update parquet - tools to convert decimal datatype to bigd… update parquet - tools so that decimal datatypes in parquet files are converted to their actual number representation when cat'ing to stdout . currently they are output in binary format . author : dsfcode < fowler . dn @ gmail . com > closes #412 from dsfcode / master and squashes the following commits : 7f05509 [ dsfcode ] parquet - 969 : update parquet - tools to convert decimal datatype to bigdecimal,parquet - 196 : parquet - tools command for row count & size this is a rebase on already existing pr - https : / / github . com / apache / parquet - mr / pull / 132 author : swapnil shinde < swapnilushinde @ gmail . com > closes #406 from swapnilushinde / master and squashes the following commits : 59a8980 [ swapnil shinde ] spacing to conform java style ( if / for ) is fixed 5fd0279 [ swapnil shinde ] parquet - 196 : parquet - tools command for row count & size,parquet - 852 : slowly ramp up sizes of byte [ ] in bytebasedbitpackingencoder https : / / issues . apache . org / jira / browse / parquet - 852 author : john jenkins < jjenkins @ kcg . com > closes #401 from johnpjenkins / parquet - 852 and squashes the following commits : 334acec [ john jenkins ] parquet - 852 : slowly ramp up sizes of byte [ ] in bytebasedbitpackingencoder,parquet - 990 more detailed error messages in footer parsing include invalid values in exception messages when reading footer for two situations : - too - short files ( include file length ) - files with corrupted footer lengths ( include calculated footer start index ) author : andrew ash < andrew @ andrewash . com > closes #408 from ash211 / patch - 1 and squashes the following commits : 74f5836 [ andrew ash ] more detailed error messages in footer parsing,parquet - 884 : add support for decimal datatype to parquet - pig record reader adds conversion support to pig for decimal datatype . based on the scala code in the spark project that provides a similar function for their sql library . author : ellenkletscher < ellen . kletscher @ capitalone . com > closes #404 from ellenkletscher / master and squashes the following commits : 7714738 [ ellenkletscher ] add comment for precision check 50c75c8 [ ellenkletscher ] remove check for primitivetype null 08d4dbb [ ellenkletscher ] parquet - 884 : add missing al header 57c4d72 [ ellenkletscher ] parquet - 884 : add missing al header ea61267 [ ellenkletscher ] parquet - 884 : add support for decimal type to pig reader,"parquet - 1005 : fix dumpcommand parsing to allow column projection dumpcommand option for - c is specified as hasargs ( ) for unlimited number of arguments following - c . the very description of the option shows the real intent of using hasarg ( ) such that multiple columns can be specified as ' - c c1 - c c2 . . . ' . otherwise , the input path is parsed as an argument for - c instead of the command itself . author : gera shegalov < gera @ twitter . com > closes #413 from gerashegalov / dump specific columns fix and squashes the following commits : a6b2df3 [ gera shegalov ] fix dumpcommand parsing to allow column projection",parquet - 1026 : allow unsigned binary stats when min = = max when min equals max this is a special case where unsigned stats would actually be the same as signed stats since there is only one value . this is useful when the data is partitioned by that column and there's only one value in the file . drill for example takes advantage of this . author : julien le dem < julien @ apache . org > closes #416 from julienledem / min eq max and squashes the following commits : 1d71624 [ julien le dem ] revert package import ordering change 47d89fc [ julien le dem ] allow unsigned binary stats when min = = max,"parquet - 1133 add int96 support by returning bytearray , skip originaltype comparison for map types when originaltype is null - pigschemaconverter : added a null check before comparing a mapkeyvaluetype's original type with the static constant - pigschemaconverter : changed the handling of int96 types - return bytearray instead of rejecting input - pigschemaconvertertest : added unit tests for int96 conversion and handling map entries without original type specified author : addisu feyissa < addisu . feyissa @ c1159 . local > closes #422 from adisu - feyissa / hotfix / remove originaltype check for maps and add int96 support and squashes the following commits : e6fa3444 [ addisu feyissa ] - pigschemaconverter : added a null check before comparing a mapkeyvaluetype's original type with the static constant - pigschemaconverter : changed the handling of int96 types - return bytearray instead of rejecting input - pigschemaconvertest : added unit tests for int96 conversion and handling map entries without original type specified",parquet - 1115 : warn users when misusing parquet - tools merge author : nandor kollar < nkollar @ cloudera . com > closes #433 from nandorkollar / parquet - 1115 and squashes the following commits : 5504a39 [ nandor kollar ] parquet - 1115 : warn users when misusing parquet - tools merge f2ece26 [ nandor kollar ] parquet - 1115 : warn users when misusing parquet - tools merge 4f3ec99 [ nandor kollar ] parquet - 1115 : warn users when misusing parquet - tools merge f97e620 [ nandor kollar ] parquet - 1115 : prevent users from misusing parquet - tools merge,parquet - 1152 : parquet - thrift doesn't compile with thrift 0 . 9 . 3 author : nandor kollar < nkollar @ cloudera . com > closes #432 from nandorkollar / parquet - 1152 and squashes the following commits : fd578ec [ zoltan ivanfi ] undo unrelated whitespace changes . 8bbcfad [ nandor kollar ] parquet - 1152 : parquet - thrift doesn't compile with thrift 0 . 9 . 3,parquet - 1143 : update to parquet format 2 . 4 . 0 . this adds new compression codecs that are required by format 2 . 4 . 0 . author : ryan blue < blue @ apache . org > closes #430 from rdblue / parquet - 1143 - format - 2 . 4 . 0 - updates and squashes the following commits : 0aca87812 [ ryan blue ] parquet - 1143 : remove staging repository now that 2 . 4 . 0 is released . 89b01cb64 [ ryan blue ] parquet - 1143 : make brotli - codec an optional dependency . a2f57ba5b [ ryan blue ] parquet - 1143 : drop hadoop - 1 tests from travis ci . d0f81d7cd [ ryan blue ] parquet - 1143 : use slf4j - simple and log4j in thrift / pig tests . 326b8ac74 [ ryan blue ] parquet - 1143 : update travis to use the default ubuntu image . 4ad46f94c [ ryan blue ] parquet - 1143 : use slf4j - log4j12 in pig tests . 785e84dff [ ryan blue ] parquet - 1143 : fix travis ci . efa171fda [ ryan blue ] parquet - 1143 : ban slf4j - log4j12 dependency . bf61e84ab [ ryan blue ] parquet - 1143 : update to parquet format 2 . 4 . 0 .,parquet - 357 : parquet - thrift generates wrong schema for thrift binary fields author : nandor kollar < nkollar @ cloudera . com > closes #439 from nandorkollar / parquet - 357 and squashes the following commits : 90cfcfb [ nandor kollar ] address code review feedback 4bf8089 [ nandor kollar ] parquet - 357 : parquet - thrift generates wrong schema for thrift binary fields,parquet - 1141 : fix field id handling there are two places where field ids are dropped : * map and list type builders were not passing ids when building * parquetmetadataconverter was not writing field ids or reading the id for root schemas author : ryan blue < blue @ apache . org > closes #428 from rdblue / parquet - 1141 - fix - column - ids and squashes the following commits : 475a90ed7 [ ryan blue ] parquet - 1141 : fix tests by adding type$id#getid . e110c00a7 [ ryan blue ] parquet - 1141 : fix ids in parquetmetadataconverter . a63066a8c [ ryan blue ] parquet - 1141 : fix ids for lists and maps .,parquet - 1185 : testbinary#testbinary unit test fails after parquet - 1141 author : nandor kollar < nkollar @ cloudera . com > closes #444 from nandorkollar / parquet - 1185 and squashes the following commits : 533aeb4 [ nandor kollar ] parquet - 1185 : testbinary#testbinary unit test fails after parquet - 1141 e75adef [ nandor kollar ] parquet - 1185 : testbinary#testbinary unit test fails after parquet - 1141 5e919cb [ nandor kollar ] parquet - 1185 : testbinary#testbinary unit test fails after parquet - 1141,parquet - 386 : printing out the statistics of metadata in parquet - tools author : gabor szadovszky < gabor . szadovszky @ cloudera . com > closes #442 from gszadovszky / parquet - 386 and squashes the following commits : db8c4b9 [ gabor szadovszky ] parquet - 386 : printing out the statistics of metadata in parquet - tools,parquet - 1191 : type . hashcode ( ) takes originaltype into account but type . equals ( ) does not author : nandor kollar < nkollar @ cloudera . com > closes #450 from nandorkollar / parquet - 1191 and squashes the following commits : c7131df [ nandor kollar ] parquet - 1191 : type . hashcode ( ) takes originaltype into account but type . equals ( ) does not,parquet - 1170 : logical - type - based tostring for proper representeation in tools / logs author : gabor szadovszky < gabor . szadovszky @ cloudera . com > closes #448 from gszadovszky / parquet - 1170 and squashes the following commits : 8f1f8cc [ gabor szadovszky ] parquet - 1170 : make interval test more readable 90f73b5 [ gabor szadovszky ] parquet - 1170 : fix endianess of interval 612d70b [ gabor szadovszky ] parquet - 1170 : add unit test for different locale d8c5204 [ gabor szadovszky ] parquet - 1170 : implement tostring based on logical type so values will be represented properly in tools / logs etc .,"parquet - 1215 : add getfooter to parquetwriter . this adds getfooter to parquetwriter , which will return the file footer that was written after the file is closed . author : ryan blue < blue @ apache . org > closes #457 from rdblue / parquet - 1215 - add - footer - accessor - to - writers and squashes the following commits : 79c5965a1 [ ryan blue ] parquet - 1215 : add getfooter to parquetwriter .",parquet - 1208 : occasional endless loop in unit test author : zoltan ivanfi < zi @ cloudera . com > closes #455 from zivanfi / parquet - 1208 and squashes the following commits : 665ba37 [ zoltan ivanfi ] parquet - 1208 : addressing ryan's comments . 2ff96a3 [ zoltan ivanfi ] parquet - 1208 : occasional endless loop in unit test,"parquet - 787 : limit read allocation size wip : this update the `parquetfilereader` to use multiple buffers when reading a row group , instead of a single humongous allocation . as a consequence , many classes needed to be updated to accept a stream backed by multiple buffers , instead of using a single buffer directly . assuming a single contiguous buffer would require too many copies . author : ryan blue < blue @ apache . org > closes #390 from rdblue / parquet - 787 - limit - read - allocation - size and squashes the following commits : 4abba3e7a [ ryan blue ] parquet - 787 : update byte buffer input streams for review comments . e7c6c5dd2 [ ryan blue ] parquet - 787 : fix problems from zoltan's review . be52b59fa [ ryan blue ] parquet - 787 : update tests for both bytebufferinputstreams . b0b614748 [ ryan blue ] parquet - 787 : update encodings to use bytebufferinputstream . a4fa05ac5 [ ryan blue ] refactor bytebufferinputstream implementations . 56b22a6a1 [ ryan blue ] make allocation size configurable . 103ed3d86 [ ryan blue ] add tests for bytebufferinputstream and fix bugs . 614a2bbc8 [ ryan blue ] limit allocation size to 8mb chunks for better garbage collection .",parquet - 1135 : upgrade thrift and protobuf dependencies author : julien le dem < julien . ledem @ wework . com > author : julien le dem < julien @ ledem . net > closes #427 from julienledem / parquet 1135 thrift pb and squashes the following commits : f23b32d9 [ julien le dem ] remove double install 78cbf734 [ julien le dem ] remove running check on protobuf build 4bc2b8f7 [ julien le dem ] add timing ; upgrade proto version e17ca956 [ julien le dem ] without - nodejs d15e523d [ julien le dem ] parquet - 1135 : upgrade thrift and protobuf dependencies,parquet - 1246 : ignore float / double statistics in case of nan because of the ambigous sorting order of float / double the following changes made at the reading path of the related statistics : - ignoring statistics in case of it contains a nan value . - using - 0 . 0 as min value and + 0 . 0 as max value independently from which 0 . 0 value was saved in the statistics . author : gabor szadovszky < gabor . szadovszky @ cloudera . com > closes #461 from gszadovszky / parquet - 1246 and squashes the following commits : 20e9332 [ gabor szadovszky ] parquet - 1246 : changes according to zi's comments 3447938 [ gabor szadovszky ] parquet - 1246 : ignore float / double statistics in case of nan,parquet - 1183 : add avro builders using inputfile and outputfile . ( #460 ) * parquet - 1183 : add avro builders using inputfile and outputfile . * parquet - 1183 : add deprecation warnings to avro read builder . closes #446,"parquet - 1263 : if file has a config , use it for parquetreadoptions . ( #464 )",parquet - 1264 : fix javadoc warnings for java 8 .,parquet - 1264 : fix javadoc 8 problem in versiongenerator .,"parquet - 1128 : [ java ] upgrade the apache arrow version to 0 . 8 . 0 for schemaconverter when i converted parquet ( 1 . 9 . 1 - snapshot ) schema to arrow ( 0 . 4 . 0 ) with schemaconverter , this exception raised . ``` java . lang . noclassdeffounderror : org / apache / arrow / vector / types / pojo / arrowtype$struct at net . wrap trap . parquet arrow . parquettoarrowconverter . converttoarrow ( parquettoarrowconverter . java : 67 ) at net . wrap trap . parquet arrow . parquettoarrowconverter . converttoarrow ( parquettoarrowconverter . java : 40 ) at net . wrap trap . parquet arrow . parquettoarrowconvertertest . parquettoarrowconvertertest ( parquettoarrowconvertertest . java : 27 ) ``` this reason is that schemaconverter refer to apache arrow 0 . 1 . 0 . i upgrade the apache arrow version to 0 . 8 . 0 ( latest ) for schemaconverter . author : masayuki takahashi < masayuki038 @ gmail . com > closes #443 from masayuki038 / parquet - 1128 and squashes the following commits : 8ba47813 [ masayuki takahashi ] parquet - 1128 : [ java ] upgrade the apache arrow version to 0 . 8 . 0 for schemaconverter b80d793a [ masayuki takahashi ] parquet - 1128 : [ java ] upgrade the apache arrow version to 0 . 8 . 0 for schemaconverter","parquet - 968 add hive / presto support in protoparquet this pr adds hive ( https : / / github . com / apache / hive ) and presto ( https : / / github . com / prestodb / presto ) support for parquet messages written with protoparquetwriter . hive and other tools , such as presto ( used by aws athena ) , rely on specific list / map wrappers ( as defined in the parquet spec : https : / / github . com / apache / parquet - format / blob / master / logicaltypes . md ) . these wrappers are currently missing from the protoparquet schema . avroparquet works just fine , because it adds these wrappers when it deals with arrays and maps . this pr brings these wrappers in parquet - proto , providing the same functionality that already exists in parquet - avro . this is backward compatible . messages written without the extra list / map wrappers are still being read successfully using the updated protoparquetreader . regarding the change . given the following protobuf schema : ``` message listofprimitives { repeated int64 my repeated id = 1 ; } ``` old parquet schema was : ``` message listofprimitives { repeated int64 my repeated id = 1 ; } ``` new parquet schema is : ``` message listofprimitives { required group my repeated id ( list ) = 1 { repeated group list { required int64 element ; } } } ``` - - - for list of messages , the changes look like this : protobuf schema : ``` message listofmessages { string top field = 1 ; repeated myinnermessage first array = 2 ; } message myinnermessage { int32 inner field = 1 ; } ``` old parquet schema was : ``` message testproto3 . listofmessages { optional binary top field ( utf8 ) = 1 ; repeated group first array = 2 { optional int32 inner field = 1 ; } } ``` the expected parquet schema , compatible with hive ( and similar to parquet - avro ) is the following ( notice the list wrapper ) : ``` message testproto3 . listofmessages { optional binary top field ( utf8 ) = 1 ; required group first array ( list ) = 2 { repeated group list { optional group element { optional int32 inner field = 1 ; } } } } ``` - - - similar for maps . protobuf schema : ``` message topmessage { map < int64 , myinnermessage > mymap = 1 ; } message myinnermessage { int32 inner field = 1 ; } ``` old parquet schema : ``` message testproto3 . topmessage { repeated group mymap = 1 { optional int64 key = 1 ; optional group value = 2 { optional int32 inner field = 1 ; } } } ``` new parquet schema ( notice the `map` wrapper ) : ``` message testproto3 . topmessage { required group mymap ( map ) = 1 { repeated group key value { required int64 key ; optional group value { optional int32 inner field = 1 ; } } } } ``` jira : https : / / issues . apache . org / jira / browse / parquet - 968 author : constantin muraru < cmuraru @ adobe . com > author : benoît hanotte < benoithanotte @ users . noreply . github . com > closes #411 from costimuraru / parquet - 968 and squashes the following commits : 16eafcb6 [ benoît hanotte ] parquet - 968 add proto flag to enable writing using specs - compliant schemas ( #2 ) a8bd7041 [ constantin muraru ] pick up commit from @ andredasilvapinto 5cf92487 [ constantin muraru ] parquet - 968 add hive support in protoparquet","parquet - 1285 : [ java ] schemaconverter should not convert from timeunit . second and timeunit . nanosecond of arrow ( #469 ) * parquet - 1285 : [ java ] schemaconverter should not convert from timeunit . second and timeunit . nanosecond of arrow arrow's 'time' definition is below : { ""name"" : ""time"" , ""unit"" : ""second | millisecond | microsecond | nanosecond"" , ""bitwidth"" : / * integer : 32 or 64 * / } http : / / arrow . apache . org / docs / metadata . html but parquet only supports 'time millis' and 'time micros' . https : / / github . com / apache / parquet - format / blob / master / logicaltypes . md therefore schemaconverter should not convert from timeunit . second and timeunit . nanosecond of arrow to parquet . author : masayuki takahashi < masayuki038 @ gmail . com > * parquet - 1285 : [ java ] schemaconverter should not convert from timeunit . second and timeunit . nanosecond of arrow since the import statements were collected , i restored it . author : masayuki takahashi < masayuki038 @ gmail . com > * parquet - 1285 : [ java ] schemaconverter should not convert from timeunit . second and timeunit . nanosecond of arrow remove unnecessary updates . author : masayuki takahashi < masayuki038 @ gmail . com > * parquet - 1285 : [ java ] schemaconverter should not convert from timeunit . second and timeunit . nanosecond of arrow remove unnecessary package name author : masayuki takahashi < masayuki038 @ gmail . com > * parquet - 1285 : [ java ] schemaconverter should not convert from timeunit . second and timeunit . nanosecond of arrow add a conversion pattern from parquet's time micros to arrow's microsecond author : masayuki takahashi < masayuki038 @ gmail . com > * parquet - 1285 : [ java ] schemaconverter should not convert from timeunit . second and timeunit . nanosecond of arrow fix to specify `expected` positions in assertequals author : masayuki takahashi < masayuki038 @ gmail . com > * parquet - 1285 : [ java ] schemaconverter should not convert from timeunit . second and timeunit . nanosecond of arrow add a test to convert from parquet's time micros to arrow's microsecond author : masayuki takahashi < masayuki038 @ gmail . com >","parquet - 1297 : schemaconverter should not convert from timestamp ( timeunit . second ) and timestamp ( timeunit . nanosecond ) of arrow ( #477 ) arrow's 'timestamp' definition is below : { ""name"" : ""timestamp"" , ""unit"" : ""second | millisecond | microsecond | nanosecond"" } http : / / arrow . apache . org / docs / metadata . html but parquet only supports 'timestamp millis' and 'timestamp micros' . https : / / github . com / apache / parquet - format / blob / master / logicaltypes . md therefore schemaconverter should not convert from timestamp ( timeunit . second ) and timestamp ( timeunit . nanosecond ) of arrow to parquet . related : https : / / issues . apache . org / jira / browse / parquet - 1285 author : masayuki takahashi < masayuki038 @ gmail . com >",parquet - 1304 : release 1 . 10 contains breaking changes for hive ( #485 ),parquet - 1317 : fix parquetmetadataconverter throw npe ( #489 ),parquet - 1317 : fix parquetmetadataconverter throw npe ( #491 ) new test case in testparquetmetadataconverter to reproduce npe and ensure backward compatibility,parquet - 1309 : parquet java uses incorrect stats and dictionary filter properties ( #490 ),parquet - 1321 : logicaltypeannotation . logicaltypeannotationvisitor#visit methods should have a return value ( #493 ),parquet - 952 : avro union with single type fails with 'is not a group' ( #459 ),parquet - 1335 : logical type names in parquet - mr are not consistent with parquet - format ( #496 ),parquet - 1336 : primitivecomparator should implements serializable ( #497 ),parquet - 1341 : fix null count stats in unsigned - sort columns . ( #499 ) * fix null count stats in unsigned - sort columns . * fix test case for old min / max values and unsigned ordering .,"parquet - 1344 : type builders don't honor new logical types ( #500 ) * parquet - 1344 : type builders don't honor new logical types call propert constructor when builder is caller with new logical type , call the deprecated originaltype version otherwise . * use static imports in test",parquet - 1335 : logical type names in parquet - mr are not consistent with parquet - format ( #503 ) add test case for string annotation and revert utf8 annotations removed in pr#496,format source code,inline division operation,reuse code already available in stringutils,lang - 972 numberutils#isnumber does not allow for hex 0xabcd,restore binary compartibility,make checkstyle happy,don't write parameter,use final consistently .,lang - 1020 : improve performance of normalize space . thanks to libor ondrusek . this closes #27 from github .,lang - 1052 : multiline recursive to string style . this fixes #34 from github . thanks to jan matèrne .,"lang - 1077 stringutils . ordinalindexof ( ""aaaaaa"" , ""aa"" , 2 ) ! = 3 in stringutils",lang - 1015 : add jsontostringstyle implementation to tostringstyle . this fixes #12 and #26 from github . thanks to thiago andrade .,lang - 1055 : strsubstitutor . replacesystemproperties does not work consistently . this fixes #43 from github . thanks to jonathan baker .,lang - 1100 : avoid memory allocation when using date formating to stringbuffer,pmd : useless parentheses,lang - 1107 fix parsing edge cases in fastdateparser,updates for lang - 1058 : stringutils . uncapitalize performance improvement . similar fix also applied to stringutils . capitalize ( as mentioned in issue ) . thanks to leo wang .,extract logic for checking string representation of objects into separate methods,fix sonarqube warning : the user - supplied array 'typearguments' is stored directly .,lang - 1133 fastdateparser timezonestrategytest#testtimezonestrategypattern fails on windows with german locale reimplementing lang - 1107,lang - 1085 : add a circuit breaker implementation ( closes #95 ) squashed commit of the following : commit 1b12db706b457408562a166c21bc6470a8064620 merge : edebd97 def7832 author : oliver heger < oliver . heger @ oliver - heger . de > date : wed jun 10 21 : 27 : 17 2015 + 0200 merge pull request #1 from kinow / patch1 this commit : commit def78320c5efcb734572c5b48623a952e3c94c75 author : bruno p . kinoshita < brunodepaulak @ yahoo . com . br > date : wed jun 10 22 : 57 : 33 2015 + 1200 this commit : * fixes javadocs warnings in checkstyle * adds license headers * renames the memorycircuitbreaker to thresholdcircuitbreaker * adds more tests to have a good coverage commit edebd970582ce2984258352c8482bcb51587f7d2 author : oheger < oliver . heger @ oliver - heger . de > date : tue jun 9 22 : 11 : 11 2015 + 0200 documentation updates for eventcountcircuitbreaker . commit 3d8a4ff85a78173dd8f5437d9b4d931069128e20 author : oheger < oliver . heger @ oliver - heger . de > date : tue jun 9 21 : 55 : 02 2015 + 0200 renamed timedcircuitbreaker to eventcountcircuitbreaker . this name seems to be more appropriate as the main property of this circuit breaker implementation is that it counts specific events and changes its state when a certain threshold is reached . commit 0e4ce5a984ef699ddace61bbf430d695b011c6b5 author : oheger < oliver . heger @ oliver - heger . de > date : tue jun 9 21 : 51 : 22 2015 + 0200 added documentation for circuitbreaker interface . commit 0e6b22190ef1868655fec9b3814a2345ad206f76 author : oheger < oliver . heger @ oliver - heger . de > date : mon jun 8 22 : 27 : 05 2015 + 0200 initial import of circuitbreaker classes .,"refactor fastdateparser use hashmap for performance break down regular expressions to per - format , allowing parseposition to get set add parse with calendar input , allowing client to set leniency and / or replace display names",lang - 1002 several predefined iso fastdateformats in dateformatutils are incorrect,fix nullpointerexception in fastdateparser$timezonestrategy,lang - 1219 : fastdateformat doesn't respect summer daylight in some localized strings,"lang - 1115 : add support for varargs in constructorutils , memberutils , and methodutils this closes #89 from github .","lang - 1023 wordutils . wrap : customizable breakable characters ( not just space / whitespace ) changed wrap method to use regex pattern to find breakable characters rather than only spaces . added a few basic tests for ""regex wrap""",add final modifier to local variables .,jsontostringstyle : improve private constant name and remove wrong comment,introduce some more local variables to make the code better readable,simplify isempty be reusing getlength,simplify isnotempty by reusing isempty,pmd : useless parentheses,scope of local variabel shift can be narrower,use not string . contains instead of indexof = = - 1,pmd : useless parentheses,use not bool instead of bool = = false,pmd : useless parentheses,pmd : useless parentheses,use beforeclass hook to set up test date,test fields can be private,build requires at least java 6 - check for java version can be removed,format source code,remove unnecessary assignment,remove another necessary assignment,use annotation based checking for expected exceptions,lang - 1109 - number percentage formatting with fractional digits,revert muddled commit,lang - 1111 - fix findbugs warnings in durationformatutils,implements lang - 1074 : add a method to arrayutils for removing all occurrences of a given element . thanks to haiyang li .,suppressed two unchecked warnings .,added a brief comment to explain suppresswarnings statement ( thanks britter ) .,implements lang - 1050 : change nulltoempty methods to generics . thanks to james sawle . this closes #33 in github too .,update for lang - 1069 : charset . getinstance documentation does not clearly explain how to include negation character in set . javadoc expanded and unit tests added to match examples . based on patch by arno noordover .,"corrected javadoc ( mentioned in lang - 1058 ) , added examples to unit test .","refactored test into separate class , to avoid needless repeated execution by subclasses of the original test .",explicit static imports .,lang - 1112 : multilinerecursivetostringstyle largely unusable due to being package - private . thanks to liam jones for reporting this .,"lang - 1118 fix stringutils . repeat ( char , int ) dealing with negative repeat value","lang - 1118 adding a test case for stringutils . repeat ( string , int ) checking dealing with negative repeat value","lang - 1119 : add stringutils . rotate ( string , int )",apply patch contributed by bruno p . kinoshita,"#lan - 1114 fixes bug in typeutils . equals ( wildcardtype , type ) where it was incorrectly returning true when the second argument was not a wildcard type .",add testchar and testdate cases into jsontostringstyletest,"fix the jsontostringstyle : except number types and boolean type , all other types in java should be 'appendasstring'",use calendar constants in fastdateprintertest,use calendar constants in fastdateparsertest,use calendar constants in dateformatutilstest,use calendar constants in dateutilstest,use calendar constants in durationformatutilstest,fix imports in jsontostringstyletest . java,unit test to show fastdateparser has same behavior as simpledateformat when dealing with greater than two digit days values,lang - 1116 : dateutilstest . testlang530 fails for some timezones,lang - 916 : dateformatutils . format does not correctly change calendar timezone in certain situations lang - 1123 : unit test fastdateprintertimezonestest needs a timezone set,add testnestingperson case to jsontostringstyletest . java,modified appenddetail method for object value in jsontostringstyle class,fixed tab to 4 spaces in jsontostringstyletest . java,set default locale to locale . english to make test independent from system default locale .,format source code,lang - 456 : hashcodebuilder throws stackoverflowerror in bidirectional navigable association . thanks to bob fields who provides the inital patch . thanks to woosan ko who wrote the final patch . thanks to bruno p . kinoshita who updated the final patch so that it was easy to apply .,variable names should follow naming conventions,format source code,zz format not displaying z for utc with openjdk 6,"lang - 1127 create a base test for the time package , which sets and resets default locales and timezones",correct indentation,lang - 1127 : use junit rules to set and reset the default locale and timezone .,"equalsexlcude notation , hashcodeexclude notation and tostringexludenotation",add threadutils,incorporated feedback from peter,reference constants in a non static way to align the retention value with the target value .,"incorporated feedback from fabian , formatting adjusted , count > > 1 replaced with count / 2",allocate array of the correct size,inline unnecessary local methods,use hamcrest matchers for better readability of assertions,better field and constant names,lang - 701 - added new joinwith method to support varargs,lang - 740 : implementation of a memomizer ( closes #80 ),lang - 1127 : rule alternative implementation,fix sonarqube warning : org . apache . commons . lang3 . classutils . < static initializer for classutils > ( ) makes inefficient use of keyset iterator instead of entryset iterator .,if statement can be simplified,lang - 1131 : strbuilder . equals ( strbuilder ) doesn't check for null inputs,doc : stringutils . containsany . add : containsallwords to wordutils,use final where possible,remove compiler warnings of joinwith tests,remove compiler warnings from threadutils,"add @ suppresswarnings ( deprecation ) in joinwith ( ) , because it uses the deprecated objectutils . tostring ( object ) method ( which is o . k . to use as long as we do not require java 7 or greater )",add testconstructorwithnullobject case in reflectiontostringbuildertest . java,add checknotnull method in reflectiontostringbuilder . java to fix #lang - 1132,add expected = illegalargumentexception . class to tostringbuildertest . testreflectionnull,consistent treatment for negative indices for swap method,new test case explanations about algorithm,clarify behavior of containsany for null entries in the supplied charsequence array,clarify behavior for chars that are not next to each other in the supplied search charsequence,clarify behavior for chars in the input char array which are not next to each other in the charsequence to search,remove explicit ( redundant ) array creations for var args parameters,remove redundant qualifiers,use enhanced for loop instead of iterator based loop,fix potential npe by checking for object identity instead of comparing one property only,always return false to contains a null word,fix whitespaces and indentation,rename switchdefaults to systemdefaultsswitch to better describe it's role,write basic unit test for systemdefaultsswitch,added new addlistener ( ) method that takes a boolean for if duplicates are allowed . added test method to make sure that duplicate listeners are not added .,format source code,allowduplicates will always be false at that point,add stringmatcher#tostring ( ) ; useful from a debugger .,format source code and remove spaces on empty lines,"lang - 1139 : add null safe methods in stringutils to replace by regular expression : - stringutils . replaceall ( string , string , string ) - stringutils . replacefirst ( string , string , string )",avoid raw type warning,show more info on failure,add some tests with other whitespace characters : tab and newline,split tests up according to methods tested,"lang - 1059 capitalize javadoc is incorrect add test to show that first character is upcased , not the first ( alphabetic ) letter that is found",lang - 1147 enumutils * bitvector issue with more than 32 values enum this closes #97,use the proper constant,lang - 1151 : performance improvements for numberutils . isparsable ( closes #99 ) ~ 2 . 5x performance increase wrt 3 . 4 version ; added a couple checks more to unit tests,[ lang - 1141 ] strlookup for system properties now sees updated values . the lookup implementation now directly accesses system properties without caching the properties object in any way .,"lang - 1225 : add randomstringutils#randomgraph and #randomprint which match corresponding regular expression class these are useful over randomascii because they do not contain the del character but otherwise contain the full range of ascii printing characters , and optionally include whitespace . this is useful for testing user defined inputs where characters like spaces , angle brakets , semicolons , dashes , etc . can cause issues .","lang - 1224 : extend randomstringutils with methods that generate strings between a min and max length ( closes #101 , closes #157 )",lang - 1152 stringindexoutofboundsexception or field over - write for large year fields in fastdateparser,lang - 1149 ability to throw checked exceptions without declaring them,lang - 1149 added alternative checked exception wrapping / unwrapping methods,"lang - 1120 : stringutils . stripaccents should remove accents from ""ł"" and ""ł"" ( closes #105 ) .",lang - 1154 fastdateformat apis that use a stringbuilder,lang - 1075 - deprecate systemutils . file separator and systemutils . path separator,lang - 1057 micro optimization : replace stringbuilder with string concatenation so that the compiler can better optimize the code,switched capitalize back to using totitlecase . added a test for this using the 'lj' letter . lang - 1142,adding a createstarted ( ) method per request in lang - 1138,"lang - 1155 : add stringutils#unwrap ( closes #107 , closes #136 )",simplify boolean expression,reuse functionality from stringutils instead of duplicating code,fix exceptionutilstest to compile with java 1 . 6,lang - 781 : added methods to objectutils class to check for null elements in the array ( closes #108 ),lang - 1162 stringutils#equals fails with index oobe on non - strings with identical leading prefix,split up and simplify tests,lang - 1163 there are no tests for charsequenceutils . regionmatches,some more tests,lang - 1169 added equalsany ( ) and equalsanyignorecase ( ) methods to stringutils .,"lang - 1171 add null safe compare methods in stringutils : - stringutils . compare ( string str1 , string str2 ) ; - stringutils . compare ( string str1 , string str2 , boolean nullisless ) ; - stringutils . compareignorecase ( string str1 , string str2 ) ; - stringutils . compareignorecase ( string str1 , string str2 , boolean nullisless ) ;",add sugar to randomiutils,"lang - 1002 : several predefined iso fastdateformats in dateformatutils are incorrect since the naming template is iso < id > , new constants have been renamed to iso 8601 . . . additionally , the constants represent the extended format . that should be reflected in their names .","lang - 1171 exclude methods from stringutilstest . teststringutilscharsequencecontract ( ) : - stringutils . compare ( string str1 , string str2 ) ; - stringutils . compare ( string str1 , string str2 , boolean nullisless ) ; - stringutils . compareignorecase ( string str1 , string str2 ) ; - stringutils . compareignorecase ( string str1 , string str2 , boolean nullisless ) ;",lang - 1171 remove log of excluded methods in stringutilstest . teststringutilscharsequencecontract ( ),stringutils : remove unused import,lang - 1183 making replacepattern / removepattern methods null safe in stringutils,ignore deprecations in test code,"lang - 1185 add remove by regular expression methods in stringutils : - string stringutils . removeall ( string text , string regex ) ; - string stringutils . removefirst ( string text , string regex ) ;",lang - 1185 add some tests for stringutils replaceall and replacefirst methods,lang - 1169 add some other unit tests,"lang - 1178 : arrayutils . removeall ( object array , int . . . indices ) should do the clone , not its callers ( closes #116 )","lang - 1234 : getlevenshteindistance with a threshold : optimize implementation if the strings lengths differ more than the threshold ( closes #118 ) if the string lengths differ more than the threshold , there's no need for the algorithm to begin allocating arrays etc .","lang - 1193 ordinalindexof ( ""abc"" , ""ab"" , 1 ) gives incorrect answer of - 1 ( correct answer should be 0 ) revert lang - 1077",more javadoc and tests,"lang - 1192 partial : implement format 'u' for fastdateformat , day number of week",lang - 1192 : fastdateformat support of the week - year component ( uppercase 'y' ),lang - 1240 : optimize bitfield constructor implementation ( closes #119 ),revert lang - 1192 while investigating travis failures,lang - 1192 : fastdateformat support of the week - year component ( uppercase 'y' ),"simplify , less clutter .","revert ""simplify , less clutter . "" this reverts commit 18f5f54ca0e78df12586e0750e257058746a5a39 .","simplify , less clutter .","revert ""allocate array of the correct size"" this reverts commit 60b32953a968e5623f82a6b27d6c679bc17c48e5 . following the advices from http : / / shipilev . net / blog / 2016 / arrays - wisdom - ancients / this seems to be faster and safer on current vms .",lang - 1232 : diffbuilder : add null check on fieldname when appending object or object [ ] ( closes #122 ) .,add method to diffbuilder to allow appending from a diffresult .,add sanity check test .,"[ lang - 1191 ] incorrect javadoc stringutils . containsany ( charsequence , charsequence . . . ) .",added new property is os mac osx el capitan in systemutils,"strsubstitutor can preserve escapes strsubstitutor can now optionally preserve the escape character for an escaped reference , which is useful when substitution takes place in multiple phases and some references are intentionally unresolved . prior to this change , an unresolved reference `$ { a } ` and an escaped reference `$$ { a } ` may result in the same string `$ { a } ` , making it impossible for an additional substitution phase to distinguish between escaped references and non - escaped references .",statement unnecessarily nested within else clause .,statement unnecessarily nested within else clause .,format nit .,statement unnecessarily nested within else clause . \,statement unnecessarily nested within else clause .,format .,format .,format .,fixing crlfs,"newline pain , despite having run the config line",[ lang - 1146 ] z / os identification in systemutils . simplest implementation .,"[ lang - 1201 ] add a timeunit - like classes for base 2 and base 10 digital conversions ( bits , bytes , kb , mb , and so on ) .","[ lang - 1201 ] add a timeunit - like classes for base 2 and base 10 digital conversions ( bits , bytes , kb , mb , and so on ) . forgot to commit those .",reuse,formatting fixes per https : / / patch - diff . githubusercontent . com / raw / apache / commons - lang / pull / 128 . diff,applied javadoc patch and added new test per https : / / github . com / apache / commons - lang / pull / 115,add tests with a better comparator . closes #132,add tests with a better comparator from #132 . fix formating .,formating .,lang - 1220 : add tests for missed branches in dateutils,clean up javadoc ; fix complaints from maven - javadoc - plugin,lang - 1202 : parsedatestrictly does't pass specified locale,lang - 1134 : new methods for lang3 . validate this closes #87 from github .,lang - 1205 : numberutils . createnumber ( ) behaves inconsistently with numberutils . isnumber ( ) this closes github #87 thanks to pbrose,"add tests for missed branches in stringutils ( closes #135 ) side effect : close pull requests which have been merged , but have not been closed due to missing commit comments ( close #115 , close #120 , close #128 , close #130 ) .",lang - 1013 : add stringutils . truncate ( ) ( closes #137 ),"[ lang - 1218 ] equalsbuilder . append ( object , object ) is too big to be inlined , which prevents whole builder to be scalarized . closes #138 .",[ lang - 1227 ] add xmlcharacter class .,[ lang - 1228 ] prefer throwable . getcause ( ) in exceptionutils . getcause ( ) ( closes #139 ),"lang - 1229 : hashcodebuilder . append ( object , object ) is too big to be inlined , which prevents whole builder to be scalarized ( closes #142 )",lang - 1230 : remove unnecessary synchronization from registry lookup in equalsbuilder and hashcodebuilder ( closes #143 ),lang - 1176 : improve arrayutils removeelements time complexity to o ( n ) ( closes #144 ) based on patch submitted by jeffery yuan,lang - 787 : add stringutils#removeignorecase patch by gokul nanthakumar c,[ lang - 1168 ] add systemutils . is os windows 10 property .,lang - 1197 : prepare java 9 detection,lang - 1206 : improve charsetutils . squeeze ( ) performance ( closes #147 ) patch by mohammed alfallaj,lang - 1199 : fix implementation of stringutils . getjarowinklerdistance ( ) replace current implementation with jaro - winkler distance implementation taken from apache lucene .,lang - 901 : stringutils#startswithany / endswithany is case sensitive - documented as case insensitive ( closes #149 ) improve the documentation and introduce more test cases that verify the documented behaviors . patch by matthew bartenschlag,lang - 1226 : stringutils#normalizespace does not trim the string anymore ( closes #150 ),lang - 1223 : add stopwatch#gettime ( timeunit ) ( closes #152 ),fix deprecation warning in constructorutilstest by using assert#assertarrayequals instead of assert#assertequals to compare arrays,fix generics and rawtypes warnings in methodutilstest,"lang - 1214 : handle ""void"" in classutils . getclass ( ) ( closes #155 ) getclass ( ) previously deferred to an array type to get the class , but this fails for void , which lacks an array type . instead , map explicitly from primitive name to primitive class .",fix compiler type warning,avoid serialisation warning,lang - 1190 : typeutils . isassignable throws nullpointerexception when fromtype has type variables and totype generic superclass specifies type variable ( closes #158 ),"lang - 1242 : "" \ u2284"" : "" & nsub ; "" mapping missing from entityarrays#html40 extended escape ( closes #159 ) fix commented out nsub in entityarray",lang - 1189 add getandincrement / getanddecrement / getandadd / incrementandget / decrementandget / addandget in mutable * classes,lang - 1243 simplify arrayutils removeelements by using new decrementandget ( ) method,numberutils#withdecimalsparsing : eliminate redundant calculation of isdecimalpoint . ( closes #160 ),lang - 1195 : enhance methodutils to allow invocation of private methods ( closes #141 ),remove unnecessary else .,fixing testtsvempty to use gettsvinstance instead of getcsvinstance ( closes #164 ),"lang - 1229 : performance regression due to cyclic hashcode guard to fix this issues revert the unreleased ""lang - 456 : hashcodebuilder throws stackoverflowerror in bidirectional navigable"" . this reverts commit b5749b4f54b30c0c2050e456c12cfcf516434f13 .",lang - 1018 : fix precision loss on numberutils . createnumber ( string ) ( closes #156 ),"lang - 1241 stringutils . ordinalindexof broken show that the method is no longer broken , now that lang - 1077 has been reverted","lang - 1018 : add changes . xml entry add test for lang - 1187 : method createnumber from numberutils doesn't work for floating point numbers other than float ( fixed by lang - 1018 ) add test for lang - 1215 : numberutils . createnumber ( ) method lost precision sometimes ( fixed by lang - 1018 ) side - effects : close #9 , close #7 , close #93","lang - 1245 : resurrect applyrules ( java . util . calendar , java . lang . stringbuffer ) for binary compatibility",lang - 1247 : fastdateprinter generates date objects wastefully closes #168,avoid deprecation message by inlining the deprecated method code body,lang - 1248 : fastdateprinter memory allocation regression closes #169,"lang - 1250 : serializationutils : : deserialize has unnecessary code and a comment for that ( closes #174 ) there is no real cce possible , even the javadoc say so . github's blame showed the code and javadoc is written by two indiviual person in two different years , so that may be the cause .",lang - 1251 : serializationutils . classloaderawareobjectinputstream should use static initializer to initialize primitivetypes map ( closes #180 ) modify to use static initializer to initialize primitivetypes map .,[ lang - 1253 ] [ github issue #170 ] add randomutils#nextboolean ( ) method . closes #170 .,reorganize test classes for stringutils to make it clearer were tests for a method are located,format nit .,"[ lang - 1257 ] stringutils . wrapifmissing ( string , char | string )",lang - 1258 : add arrayutils#tostringarray ( object [ ] ) method patch supplied by ig,lang - 1261 : arrayutils#contains and arrayutils#indexof should compare objects with different types,"lang - 1262 : comparetobuilder . append ( object , object , comparator ) method is too big to be inlined extracted arrays processing into a separate method .",lang - 1252 : better naming and java 6 specifics around handling a leading +,"lang - 1252 : cleaning up checkstyle warnings : whitespace , line length",remove trailing whitespaces,better javadoc for arrayutils . swap variants,correct indent of method declaration,"fix whitespaces , add missing @ since tag",lang - 1252 : adding test for deprecated isnumber,lang - 1252 : replacing system call for java 1 . 6 to systemutils . is java 1 6,lang - 1252 : adding more isnumber tests before full deletion of method,lang - 1277 : stringutils#getlevenshteindistance reduce memory consumption ( closes #189 ),lang - 1134 : new methods for lang3 . validate ( closes #190 ) fixed method names ; fixed differentobject to use object . equals,simplify boolean expression,remove unused constructor parameter,replace deprecated method call,lang - 1267 : add test showing that xxx does work when specifing formats,gather issue related tests at the bottom,revert parts of lang - 1134 to polish the api after 3 . 5,checkstyle : add missing curly braces,checkstyle : convert tabs to spaces,pmd : remove useless parentheses,pmd : these nested if statements could be combined,"add dateutils . tocalendar ( date , timezone )","add unit tests for dateutils . tocalendar ( date , timezone )",lang - 1270 : add stringutils#isanynotempty and #isanynotblank ( closes #193 ),lang - 1271 : stringutils#isanyempty and #isanyblank should return false for an empty array ( closes #193 ),handle benedikt ritter's comments,"fix test for is java xx constants . the test would never check anything , since it tested against the java . specification . name property , which has the value ""java platform api specification""",handle comments,charencodingtest : remove tests for java versions below 1 . 3 . 1,systemutilstest : remove code run only on java 1 . 5 and below,add test for systemutils . isjavaversionatleast to make sure it works with java 9 ea,ensure utf - 8 file encoding,[ lang - 1275 ] added a tryacquire ( ) method to timedsemaphore . this method supports non - blocking use cases .,lang - 1160 : stringutils#abbreviate should support 'custom ellipses' parameter ( closes #195 ),lang - 1277 : stringutils#getlevenshteindistance reduce memory consumption minimal clean - up add changes . xml entry,lang - 1269 : wrong name or result of stringutils#getjarowinklerdistance ( closes #198 ) deprecate stringutils#getjarowinklerdistance and add stringutils#getjarowinklersimilarity instead,"lang - 1216 : numberutils#isnumber , numberutils#iscreateable should return true for ""0 . 1"" add a test","methodutils#invokemethod ( object object , boolean forceaccess , string methodname , object [ ] args , class < ? > [ ] parametertypes ) : do not restore the accessibility of the method object , because method#setaccessible only modifies the behavior of the accessibleobject not of the actual method .",lang - 1276 : strbuilder#replaceall arrayindexoutofboundsexception ( closes #200 ) avoid arrayindexoutofboundsexception by keeping variable buf consistent with buffer in strbuilder#replaceimpl .,lang - 1143 : stringutils should use toxxxxcase ( int ) rather than toxxxxcase ( char ) ( closes #201 ) based on patch by sebb,stringutils#replacepattern : fix source code formatting,[ lang - 1144 ] multiple calls of org . apache . commons . lang3 . concurrent . lazyinitializer . initialize ( ) are possible .,remove redundant type arguments .,add final modifier to private fields .,add final modifier to method parameters .,lang - 1034 : recursive and reflective equalsbuilder ( closes #202 ) patch by yathos ug,use try - with - resources .,add final modifier to local variables .,lang - 1279 : update java requirement from java 6 to 7 replace usage of deprecated arrayutils#isequals with objects#deepequals,lang - 1188 : stringutils#join ( t . . . ) : warning : [ unchecked ] possible heap pollution from parameterized vararg type t fixed by adding @ safevarargs,"add @ safevarargs to some methods with vararg parameters to suppress ""type safety : potential heap pollution via varargs parameter array"" warnings",lang - 1144 : multiple calls of org . apache . commons . lang3 . concurrent . lazyinitializer . initialize ( ) are possible minimal clean - up,lang - 1279 : update java requirement from java 6 to 7 use try with resources in serializationutils,lang - 1279 : update java requirement from java 6 to 7 use multi - catch in annotationutils and exceptionutils,lang - 1144 : multiple calls of org . apache . commons . lang3 . concurrent . lazyinitializer . initialize ( ) are possible use all uppercase name for constant,lang - 1279 : update java requirement from java 6 to 7 replace usage of deprecated objectutils#tostring with objects#tostring,lang - 1279 : update java requirement from java 6 to 7 replace usage of deprecated objectutils#equals with objects#equals,lang - 1279 : update java requirement from java 6 to 7 replace usage of deprecated objectutils#hashcode with objects#hashcode,lang - 740 : implementation of a memomizer ( closes #203 ) changes suggested in https : / / github . com / apache / commons - lang / pull / 80 : - tabs to spaces - use @ override - remove unused variables - other minimal clean - ups,lang - 1279 : update java requirement from java 6 to 7 systemutilstest : remove code run only on java 6,"lang - 1258 : add arrayutils#tostringarray ( object [ ] , string ) method ( and minimal clean - up of arrayutils#tostringarray ( object [ ] ) ) add changes . xml entry",lang - 1155 : add stringutils#unwrap add more examples and tests fix formatting add changes . xml entry,"lang - 1034 : add support for recursive comparison to equalsbuilder#reflectionequals ( closes #202 ) minimal clean - ups : remove getter methods , improve javadoc , add unit test for reflectionappend",lang - 1067 : add a reflection - based variant of diffbuilder,lang - 1287 : randomstringutils#random can enter infinite loop if end parameter is to small ( closes #211 ) 1 . ) fixed possible infinite loop that can be caused by generating either digits or letters by calling with a to low end param . 2 . ) added ( inclusive ) and ( exclusive ) terms to javadoc of random method,lang - 1285 : nullpointerexception in fastdateparser$timezonestrategy ( closes #212 ) replicate the fix for lang - 1186,lvar should not hide ivar .,fix compiler warning : exception not thrown .,the declared exception parseexception is not actually thrown .,the declared exception parseexception is not actually thrown .,don't need a copy of this field .,add final modifier to private fields .,add final modifier to method parameters .,add final modifier to local variables .,add missing ' @ override' annotations .,change indirect access to static members to direct access .,org . apache . commons . lang3 . time . calendarreflection is no longer needed now that we are on java 7 . deprecate for now . might remove depending on discussion on dev ml .,add missing @ deprecated .,"lang - 1289"" type = ""fix"" dev = ""ggregory"" > javaversion class depends on apache commons math class numberutils .","revert ""lang - 1289"" type = ""fix"" dev = ""ggregory"" > javaversion class depends on apache commons math class numberutils . "" this reverts commit 9dcd87f9c46786f3da54af7ac1ba4696840dffa8 .",fix unbox warning . show when we are unboxing .,rename local variable name to more applicable ( closes #215 ) separate test cases by a new line,fix non - critical typos in comments and javadoc fix typos in several local variables,recursivetostringstyletest now uses correct tostringstyle in tests . thanks to dominik stadler for patch .,lang - 1290 : increase test coverage of org . apache . commons . lang3 . arrayutils class ( closes #217 ) increase test coverage of the swap and shift methods .,make annotationutilstest#testannotationsofdifferingtypes test what it was intended to test by making annotationutilstest . nestannotation visible at runtime ( closes #218 ),[ lang - 1291 ] provide annotations to document thread safety .,re - implement to avoid previous license . rewrite all javadocs to be much simpler but we are open to more text .,annotationtestutils : remove unused import statement,fixes lang - 1292 : wordutils . wrap throws stringindexoutofboundsexception,lang - 1293 : add stringutils#isallempty and #isallblank methods,added new vararg methods to insert values into an array at an index . this implements lang - 660 . this commit also deprecates the add ( ) methods that inserted a single value into an array at an index .,squashed deprecation warnings in test code .,fix for lang - 1286 : randomstringutils random method can overflow . . .,[ lang - 1297 ] systemutils . gethostname ( ) api .,suppress warning about vararg usage .,lang - 1299 - add method for converting string to an array of code points,improve test coverage of utility method .,extendedmessageformattest : remove code for java versions below 1 . 4,remove commons - io test dependency,[ lang - 1304 ] stringutils method to check for mixed case in string ( closes #223 ),lang - 1307 : added getdigits method to stringutils ( closes #225 ),+ abstractexceptiontest + circuitbreakingexceptiontest + clonefailedexceptiontest + cover specific cases,deprecate systemutils#line separator in favor of java . lang . system#lineseparator,jsontostringstyle : private field field name prefix can be static,multilinerecursivetostringstyle : made private field indent static,increase test coverage charrangetest - > 100 % randomutilstest - > 100 % stringescapeutilstest - > 100 % stringutils - > 99 %,fix copy - paste error in charutilstest#testisasciiprintable char ( closes #230 ) line 238 has copy paste error from testisascii char,objectutilstest : collapse empty catch blocks this patch employs java 7's syntax to catch multiple exceptions in the same block with the | operator to make objectutilstest's code cleaner and easier to read .,remove redundant casts ( closes #235 ) remove redundant casts throughout the codebase to make it cleaner and easier to read .,objectutilstest#testidentitytostringappendable : fail test if ioexception is thrown,use stringbuilders instead of stringbuffers ( a couple of instances were overlooked ) this fixes #236,lang - 1311 : typeutils . tostring ( ) doesn't handle primitive and object arrays correctly apply patch by aaron digulla,"validate's string . format without arguments ( closes #238 ) while calling string . format ( ""some string"" ) without any additional arguments is not technically wrong , it's redundant , as it just returns the same string . removing these calls and just using the string instead both cleans up the code and offers a ( very slight ) performance gain .",( doc ) use the full alphabet for the well - known example text . this change adds the missing `s` character . signed - off - by : tobias gesellchen < tobias @ gesellix . de >,lang - 1312 : localeutils#tolocale does not support language followed by un m . 49 numeric - 3 area code ( closes #239 ),"remove redundant semicolons from enums ( closes #240 ) while enums allow ending the member list in a semicolon ( ; ) , it's redundant . some enums in the codebase use a semicolon in the end , and some do not . this patch standardizes the codebase's enum and cleans up the code by removing these semicolons .",enumutilstest : fix spaces between enum constants ( closes #241 ),"use foreach loop for arrays ( closes #245 ) since the project no longer supports java versions older than 6 , it's safe to use the enhanced for loop syntax introduced in java 5 . this patch employs this syntax where possible to clean up the code .",dateutilstest asserts ( closes #246 ) use junit's assertfalse for assertions with conditions instead of re - implementing the logic here by testing the condition and throwing an assertionfailureexception if the condition is met .,"junit imports ( closes #247 ) the junit . framework package has been deprecated , and should no longer be used . this patch fixes the one remaining import from it to statically import org . junit . assert . assertnull instead .","use long literals ( closes #248 ) this patch replaces int literals that were cast to longs ( e . g . , "" ( long ) 1 ) "" with long literals ( e . g . , ""1l"" ) , making the code cleaner and easier to maintain .","use uppercase l for long literals long literals can be specified by a lower case l ( e . g . , 1l ) or by an uppercase one ( e . g . , 1l ) . this patch converts all existing long literals to use the uppercase l , as in some terminals , the lowercase l and the 1 characters are graphically similar , leading to possible confusions .",changed charsequence lastindexof to handle supplementary characters,fixed charsequenceutils to check for supplementary chars,added test case for more branch coverage,added additional tests to satisfy lang - 1300 suggestions,lang - 1300 : fixed formatting on charsequenceutils . java,lang - 1300 : updated stringutilsequalsindexoftest to account for new changes,"lang - 1313 : add archutils - an utility class for the ""os . arch"" system property ( closes #231 )",lang - 1300 : fixed charsequenceutils indexof for supplementary chars,lang - 1300 : changed charsequence lastindexof for supplementary characters,replace tabs with spaces in dateutils,abstractexceptioncontexttest#testjavaserialization : remove unnecessary suppresswarnings annotation,classutilstest#test isassignable classarray classarray : add explicit cast to avoid compiler warning and remove commented out code,classutilstest : some tests can simplified because lang does not support java versions without autoboxing anymore,"lang - 1316 : deprecate classes / methods moved to commons - text ( closes #255 ) * org . apache . commons . lang3 . text . translate - every class * org . apache . commons . lang3 . text - every class other than wordutils * stringescapeutils - whole class * stringutils : getlevenshteindistance , getfuzzydistance and getjarowinklersimilarity methods * objectutils : identitytostring ( final strbuilder builder , final object object ) method ( strbuilder was moved to commons - text )","revert ""lang - 1270 : add stringutils#isanynotempty and #isanynotblank"" and add ""lang - 1293 : add stringutils#isallempty and #isallblank methods"" instead",lang - 1310 : methodutils . invokemethod throws arraystoreexception if using varargs arguments and smaller types than the method defines ( closes #256 ),remove test wildcard imports this patch applies the de - facto project's coding standard on the test files and replaces wildcard static imports with series of single method imports .,methodutilstest whitespaces clean up methodutilstest whitespaces as per the project's standards - no trailing whitespaces are allowed and spaces are used for indentation .,lang - 1300 : merged rob's javadoc comments and updated to use code units instead of code points,lang - 1167 : added isexcludenullvalues to reflectiontostringbuilder and test,lang - 1167 : added more test cases for reflectiontostringbuilderexcludenullvaluestest,stringutilsequalsindexoftest : fix checkstyle violations,"restore deprecated annotation of stringutils#getjarowinklerdistance this annotation was with ""lang - 1316 : deprecate classes / methods moved to commons - text"" and removed by mistake while reverting ""lang - 1269 : wrong name or result of stringutils#getjarowinklerdistance"" .","lang - 1317 : adds methodutils#findannotation and extend methodutils#getmethodswithannotation for non - public , super - class and interface methods ( closes #261 )",remove trailing white spaces,add a default case to switch to appease findbugs,better local variable names,extract method for parsing locales from string,extract some helper methods to make the code better readable,replace switch statement with if - else block,remove initial if statement by adding an early return,lang - 1312 : localeutils#tolocale does not support language followed by un m . 49 numeric - 3 area code followed by variant,pmd : nested if statements can be combined,[ lang - 1291 ] provide annotations to document thread safety .,[ lang - 1291 ] provide annotations to document thread safety .,fixed the indentation in arrayutilstest,lang - 1272 : added shuffle methods to arrayutils,"use validate#notnull instead of ""throw new nullpointerexception""",use validate#istrue to validate arguments,"lang - 1167 : add null filter to reflectiontostringbuilder fix / add since javadoc tags , fix checkstyle violations and do other small clean - ups .","lang - 1317 : add methodutils#findannotation and extend methodutils#getmethodswithannotation for non - public , super - class and interface methods add changes . xml entry and minimal clean - up .","lang - 1317 : add methodutils#findannotation and extend methodutils#getmethodswithannotation for non - public , super - class and interface methods fix bug introduced by last commit","use string#contains where possible ( closes #263 ) since the project defines a jdk 7 source compatibility , it's safe to use jdk 5's features . this patch replaces usages of string#indexof with string#contains where possible to make the code easier to read and maintain .",use assert#assertfalse instead of assert#asserttrue with a negated condition,"lang - 1110 : implement hashsetvbitsettest using jmh ( side effect : closes #253 , closes #191 )","hashsetvbitsettest : use diamond operator ( closes #264 ) use java 7's diamond operator to make the code a tad more elegant , as done in the rest of the codebase .",increase test coverage of tostringbuilder class to 100 %,adding testcase to cover a missing branch .,[ lang - 1331 ] immutablepair . nullpair ( ),[ lang - 1331 ] immutablepair . nullpair ( ) update @ suppresswarnings .,[ lang - 1332 ] immutabletriple . nulltriple ( ),avoid endless loop printing array with multilinerecursivetostringstyle previous implementation was causing an endless loop by calling 'super . appenddetail' rather than 'super . reflectionappendarraydetail' when it encountered an array type . fixes : lang - 1319,remove wildcard static import my last commit accidentally added a wildcard to a static import . this commit reverses that .,"deprecate charencoding and direct users to java 7 classes java 7 introduced java . nio . charset . standardcharsets , which negates the need for our charencoding method . additionally , the constants in the class now point to the constants defined in java 7 . fixes : lang - 1334",lang - 1316 : deprecate classes / methods moved to commons - text deprecated wordutils and randomstringutils now that commons - text 1 . 1 was released .,make code more readable with less nesting ( move block out of else clause ) .,add missing ' @ deprecated' annotations .,add missing javadoc .,lang - 1337 : fix test failures in ibm jdk 8 for tostringbuildertest by specifying the arraylist initial capacity .,make sure files end with a new line,make sure modifiers are in jls order,prevent redundant modifiers,make sure placement of curly braces is consistent,"remove magical number , using a local final variable ( following current approach )","make the var a constant , and add comments",lang - 1336 : add nul byte to charutils . thanks to beluga behr .,"lang - 1334 : partically revert changes introduced in 7c19a1ff4c217f03c0be62baf1169d689f566825 . replacing the static constants in charencoding with computed values can cause compatibility issues , since compile time constants are inlined by the compiler .",make sure deprecated charencoding constants are equal to the values defined in standardcharsets,lang - 1346 : remove deprecation from randomstringutils,lang - 1372 : add tostringsummary annotation ( closes #281 ),"lang - 1349 : equalsbuilder#isregistered : swappedpair construction bug ( closes #282 ) swappedpair constructed as pair . of ( rhs , lhs )","[ lang - 1350 ] constructorutils . invokeconstructor ( class , object . . . ) regression",remove redundant modifiers ( support recent checkstyle versions ) ( closes #284 ),lang - 1349 : equalsbuilder#isregistered : swappedpair construction bug add a test and a changes . xml entry .,lang - 1349 : equalsbuilder#isregistered : swappedpair construction bug modify test to clean - up registry at the end .,lang - 1352 : enumutils . getenumignorecase and isvalidenumignorecase methods added ( closes #286 ),boolean comparisons in charrange ( closes #289 ) cleaned up comparisons to false to just use the boolean negation operator ( ! ) .,lang - 1348 - stackoverflowerror on typeutils . tostring ( . . . ) for a generic return type of enum . valueof ( closes #292 ),clean up if in charutilstest#testisascii char the if statement calls asserttrue on the if branch and assertfalse on the else branch on the same expression . this can easily be simplified to assertequals with a boolean expression to make the code clean and easier to read .,"charutilstest#testisascii char loop the loop currently loops only up to 128 , thus testing just positive return values of charutils#isascii ( char ) . this patch increase the loop to go over all the possible values of an unsigned byte , thus testing also negative return values .","improve tests for charutils illegal usages ( closes #293 ) charutilstest has several instances of the following pattern : try { charutils . somemethod ( ""illegal input"" ) ; } catch ( final illegalargumentexception ex ) { } this pattern is not very useful for testing , as the test would pass whether an illegalargumentexception is thrown or not . this patch enhances the test by explicitly failing it if the exception is not thrown : try { charutils . somemethod ( ""illegal input"" ) ; fail ( ""an illegalargumentexception should have been thrown"" ) ; } catch ( final illegalargumentexception ex ) { }","extendedmessageformattest integers ( #295 ) use the decimal ""5"" instead of the octal notation ""05"" to make the code more straight forward and easier to read .",[ lang - 1357 ] org . apache . commons . lang3 . time . fastdateparser should use touppercase ( locale ),"refactor ""gmt"" magic string .","refactor ""gmt"" magic string .","refactor ""gmt"" magic string .","utc and gmt are the same , so simplify .",make tests a little more bullet - proof .,make tests a little more bullet - proof .,make tests a little more bullet - proof .,[ lang - 1355 ] timezone . gettimezone ( ) in fastdateparser causes resource contention < / action > . this closes #296 .,no need to nest .,sort members .,make private fields final .,lang - 1354 : fieldutils should ignore any synthetic fields,"revert lang - 1354 ; java7 has synthetic fields on integer , jacoco does not yet work with java9","lang - 1358 : improve stringutils#replace throughput ( closes #300 ) motivation : `stringutils#replace` uses `substring` to append a string region into a stringbuilder . this causes useless copies , as `stringbuilder#append` can take start and end indexes . modification : use proper `stringbuilder#append` [ overload ] ( https : / / docs . oracle . com / javase / 8 / docs / api / java / lang / stringbuilder . html#append - java . lang . charsequence - int - int - ) . result : based on benchmark from [ jooq’s post ] ( https : / / blog . jooq . org / 2017 / 10 / 11 / benchmarking - jdk - string - replace - vs - apache - commons - stringutils - replace ) : benchmark mode cnt score error units stringreplacebenchmark . testfaststringreplacelongstringonematch thrpt 21 7546534 , 219 ± 145523 , 962 ops / s stringreplacebenchmark . teststringutilsreplacelongstringonematch thrpt 21 7353512 , 552 ± 124498 , 228 ops / s stringreplacebenchmark . testfaststringreplacelongstringseveralmatches thrpt 21 5077255 , 810 ± 62358 , 937 ops / s stringreplacebenchmark . teststringutilsreplacelongstringseveralmatches thrpt 21 4108357 , 612 ± 92909 , 038 ops / s stringreplacebenchmark . testfaststringreplaceshortstringonematch thrpt 21 15911221 , 949 ± 541064 , 693 ops / s stringreplacebenchmark . teststringutilsreplaceshortstringonematch thrpt 21 10677897 , 475 ± 491091 , 973 ops / s stringreplacebenchmark . testfaststringreplaceshortstringseveralmatches thrpt 21 9271742 , 251 ± 220150 , 121 ops / s stringreplacebenchmark . teststringutilsreplaceshortstringseveralmatches thrpt 21 6158829 , 188 ± 99637 , 607 ops / s","use stringbuilder#append ( charsequence , int , int ) were possible to improve performance ( similar to lang - 1358 , thanks to stephane landelle for the suggestion )",use assertnull where possible,use asserttrue and assertfalse,always use static imports for assertion methods to be consistent with other tests classes .,use final .,[ lang - 1360 ] add methods to objectutils to get various forms of class names in a null - safe manner,"eventutilstest expectedexception usage use the expectedexception @ rule to verify thrown exception instead of boiler - plate implementing its logic , in order to clean up the code and make it easier to read and maintain .",sort members .,sort members .,comment empty blocks .,[ lang - 1360 ] add methods to classutils to get various forms of class names in a null - safe manner,[ lang - 1360 ] add methods to classutils to get various forms of class names in a null - safe manner,[ lang - 1360 ] add methods to classutils to get various forms of class names in a null - safe manner .,[ lang - 1361 ] exceptionutils . getthrowablelist ( ) is using deprecated exceptionutils . getcause ( ),fix checkstyle violations,"eventcountcircuitbreakertest#testnow : improve assertion failure message ( side - effects : close #298 , close #297 , close #279 , close #184 , close #75 )",pft! fix typo .,"[ lang - 1365 ] fix nullpointerexception in isjavaversionatleast on java 10 , add systemutils . is java 10 , add javaversion . java 10 .",fix dateutilstest to work reliably on java 9 . this closes #304 .,better exception message .,refactor magic char .,break up testidentitytostringstringbuilder into multiple test methods .,break up testidentitytostringstringbuilder into multiple test methods .,[ lang - 1367 ] objectutils . identitytostring ( object ) and friends should allocate builders and buffers with a size,lang - 1371 : fix typeutils . parameterize to work correctly with narrower - typed varargs array ( closes #307 ),normalize private method names to camel - case .,lang - 1370 fix eventcountcircuitbreaker increment batch fixes #incrementandcheckstate ( integer increment ) by passing the increment downstream .,"don't need internal ivar name for a boolean to carry a ""flag"" postfix .","don't need internal ivar name for a boolean to carry a ""flag"" postfix .",rename parameter 't' to 'thread' .,don't use single letter variable names .,lang - 1374 : fix logic in isjsonarray method of jsontostringstyle,"lang - 1375 : defaultstring ( str ) reuses defaultstring ( str , defaultstr )",lang - 1060 : numberutils . isnumber assumes number starting with zero is octal ( closes #313 ),"numberutils#iscreatable : remove java 6 only code , as commons - lang requires at java 7 + now",lang - 1364 : exceptionutils#getrootcause ( throwable t ) should return t if no lower level cause exists this makes the behavior of getrootcause consistent with getrootcausemessage and getrootcausestacktrace .,lang - 1060 : numberutils . isnumber assumes number starting with zero is octal add additional tests ( closes #314 ),lang - 1356 : add bypass option for classes to recursive and reflective equalsbuilder patch supplied by yathos ug,"formatting nit , one or the other is already null","another formatting nit , one or the other is already null",lang - 1384 : fix npe when version > = 11 the fix is likely to be insufficient if the version naming scheme changes .,"lang - 1384 : version ""11"" is available .",redundant specification of type arguments .,predictable randomness in shuffle tests . closes #317 from allon murienik's pr https : / / github . com / apache / commons - lang / pull / 317,[ lang - 1385 ] numberutils . createnumber ( ) throws stringindexoutofboundsexception instead of numberformatexception .,update test for java 11 ea .,some reflection tests must account for classes files being instrumented by jacoco .,some reflection tests must account for classes files being instrumented by jacoco .,"serializationutilstest identity assertions replaced calls to asserttrue with a ! = condition with calls to assertnotsame calls . this change retains the functionality , but will produce a more detailed error message in case the assertion fails . it also ( arguably ) makes the test code more straight - forward .",serializationutilstest expected exceptions use the expected argument of the @ test annotation instead of boiler - plate implementing this behavior with a try - catch - fail construct in order to clean up the code and make it more obvious to the reader .,serializatoinutilstest assertarraysequals ( closes #321 ) utilize assertarraysequals to compare arrays instead of boiler plate implementing it with a for loop . this change both makes the test code cleaner and improves the output in case of an assertion failure by showing all the differences between the two arrays instead of stopping at the first .,lang - 1392 : methods for getting first non empty or non blank value ( closes #325 ),"[ lang - 1393 ] add api systemutils . string getenvironmentvariable ( final string name , final string defaultvalue ) .",[ lang - 1394 ] org . apache . commons . lang3 . systemutils should not write to system . err .,lang - 1395 - jsontostringstyle does not escape double quote in a string value,lang - 1396 - jsontostringstyle does not escape string names,[ lang - 1238 ] add regexutils class instead of overloadinh methods in stringutils that take a regex to take precompiled pattern .,[ lang - 1238 ] add regexutils class instead of overloadinh methods in stringutils that take a regex to take precompiled pattern . sort methods .,[ lang - 1238 ] add regexutils class instead of overloadinh methods in stringutils that take a regex to take precompiled pattern . sort methods .,[ lang - 1238 ] add regexutils class instead of overloadinh methods in stringutils that take a regex to take precompiled pattern . use 120 chars per line .,[ lang - 1397 ] wordutils . wrap throws stringindexoutofboundsexception when wraplength is integer . max value .,[ lang - 1290 ] stringutils . join ( ) with support for list < ? > with configurable start / end indices .,format nit .,[ lang - 1290 ] stringutils . join ( ) with support for list < ? > with configurable start / end indices . reuse constant .,[ lang - 1290 ] stringutils . join ( ) with support for list < ? > with configurable start / end indices . extract constant .,extract method .,removes unchecked exceptions declared in 'throws' clause,deletes redundant 'new' expression in constant array creation,replaces 'size ( ) = = 0' and 'length ( ) = = 0' with 'isempty ( ) ',removes unnecessary class reference of static method calls which are declared in the same class,flips the order of conditional expressions and 'if' statements whose conditions were negated,removes redundant ' + ' sign,replaces primitive comparison with x . compare ( ) where x is a wrapper class of the primitive,lang - 1380 : fastdateparser too strict on abbreviated short month symbols,lang - 1402 : added get methods to arrayutils,refactored to generics and added isarrayindexvalid,lang - 1402 : refactored to return default value on negative index,raw types,[ lang - 1405 ] remove checks for java versions below the minimum supported one . closes #338 .,"lang - 1408 : add todouble ( bigdecimal ) , todouble ( bigdecimal , double )",lang - 1408 : rounding utilities for converting to bigdecimal,lang - 1408 : add final to method params,lang - 1411 : add empty checks to objectutils,( fix ) add missing @ test annotation,lang - 1415 : update java language requirement to 1 . 8,explicit type parameters can be removed,identical catch blocks can be combined,use build in methods for comparing numerical values,add missing spaces,lang - 1417 : add @ functionalinterface to threadpredicate and threadgrouppredicate,lang - 1416 : update validatetest to junit 5 api,junit 5 tests do not need to be public,convert tests for validate . istrue overloads to @ nested test,use @ parameterizedtest to iterate over available locales,convert tests for validate . notnull overloads to @ nested test,convert tests for validate . notempty overloads to @ nested test,convert tests for validate . notblank overloads to @ nested test,convert tests for validate . nonullelements overloads to @ nested test,move constructor test to top,convert tests for validate . validindex overloads to @ nested test,convert tests for validate . matchespattern overloads to @ nested test,convert tests for validate . notnan overloads to @ nested test,convert tests for validate . finite overloads to @ nested test,convert tests for validate . inclusivebetween overloads to @ nested test,convert tests for validate . exclusivebetween overloads to @ nested test,convert tests for validate . isinstanceof overloads to @ nested test,convert tests for validate . isassignable overloads to @ nested test,convert util class convention tests to @ nested test,"update builder tests to junit jupiter upgrade the tests in the builder package to use junit jupiter as part of the effort to remove the dependency on the vintage engine . while most of these changes are drop - in replacements with no functional benefit , it is worth mentioning the change to how expected exceptions are tested . unlike org . junit . test , org . junit . jupiter . api . test does not have an ""expected"" argument . instead , an explicit call to org . junit . jupiter . api . assertions . assertthrows is used . this call allows the test to pinpoint the exact statement that is expected to throw the expcetion and allows making the tests a bit stricter by preventing false - positives that could occur if the setup code would throw the expected exception instead of the statement that was supposed to throw it .","update concurrent tests to junit jupiter upgrade the tests in the concurrent package to use junit jupiter as part of the effort to remove the dependency on the vintage engine . while most of these changes are drop - in replacements with no functional benefit , there are some non - obvious changes worth mentioning . unlike org . junit . test , org . junit . jupiter . api . test does not have an ""expected"" argument . instead , an explicit call to org . junit . jupiter . api . assertions . assertthrows is used . this call allows the test to pinpoint the exact statement that is expected to throw the exception and allows making the tests a bit stricter by preventing false - positives that could occur if the setup code would throw the expected exception instead of the statement that was supposed to throw it . another notable change was performed in memoizertest . junit jupiter does not support junit 4's runners , and easymock has no equivalent @ extension , so a setup method was added and the mock was explicitly initialized . it's also worth noting this is a minimal patch for migrating the package's tests to jupiter . there are several tests that can be made made more elegant with jupiter's new features , but that work is left for subsequent patches .","update event tests to junit jupiter upgrade the tests in the event package to use junit jupiter as part of the effort to remove the dependency on the vintage engine . while most of these changes are drop - in replacements with no functional benefit , it is worth noting the tests that test thrown excetpions . prior to this patch , this package tested for exceptions in two ways , neither of which are supported in junit jupiter : 1 . with the ""expected"" argument of the org . junit . test annotation . 2 . with the org . junit . rules . expectedexception @ rule both of these usages were replaced with calls to org . junit . jupiter . api . assertions#assertthrows .","update exception tests to junit jupiter upgrade the tests in the exception package to use junit jupiter as part of the effort to remove the dependency on the vintage engine . while most of these changes are drop - in replacements with no functional benefit , there are some non - obvious changes worth mentioning . unlike org . junit . test , org . junit . jupiter . api . test does not have an ""expected"" argument . instead , an explicit call to org . junit . jupiter . api . assertions . assertthrows is used . another non - obvious change was performed in contextedruntimeexceptiontest . unlike junit vintages's @ before , junit jupiter's @ beforeeach does not apply if a parent's method is annotated with it and the overriding method is not , so an explicit @ beforeeach annotation had to be added to contexedtuntimeexceptiontest#setup ( ) . it's also worth noting this is a minimal patch for migrating the package's tests to jupiter . there are several tests that can be made made more elegant with jupiter's new features , but that work is left for subsequent patches .","update reflect tests to junit jupiter upgrade the tests in the reflect package to use junit jupiter as part of the effort to remove the dependency on the vintage engine . while most of these changes are drop - in replacements with no functional benefit , there are some non - obvious changes worth mentioning . unlike org . junit . test , org . junit . jupiter . api . test does not have an ""expected"" argument . instead , an explicit call to org . junit . jupiter . api . assertions . assertthrows is used . unlike org . junit . assume , org . junit . jupiter . api . assumptions does not have an assumtnotnull method . instead , assumetrue was used with an explicit condition of a variable being different than null . it's also worth noting this is a minimal patch for migrating the package's tests to jupiter . there are several tests that can be made more elegant with jupiter's new features , but that work is left for subsequent patches .","update text tests to junit jupiter upgrade the tests in the text package to use junit jupiter as part of the effort to remove the dependency on the vintage engine . while most of these changes are drop - in replacements with no functional benefit , there are some non - obvious changes worth mentioning . unlike org . junit . test , org . junit . jupiter . api . test does not have an ""expected"" argument . instead , an explicit call to org . junit . jupiter . api . assertions . assertthrows is used . it's also worth noting this is a minimal patch for migrating the package's tests to jupiter . there are several tests that can be made more elegant with jupiter's new features , but that work is left for subsequent patches .",update tuple tests to junit jupiter upgrade the tests in the text package to use junit jupiter as part of the effort to remove the dependency on the vintage engine .,"update math tests to junit jupiter upgrade the tests in the math package to use junit jupiter as part of the effort to remove the dependency on the vintage engine . while most of these changes are drop - in replacements with no functional benefit , there are some non - obvious changes worth mentioning . unlike org . junit . test , org . junit . jupiter . api . test does not have an ""expected"" argument . instead , an explicit call to org . junit . jupiter . api . assertions . assertthrows is used . unlike org . junit . assert . assertequals ( double , double , double ) , org . junit . jupiter . api . assertions . assertequals ( double , double , double ) does not support deltas of zero , only strictly positive deltas . this issue will be addressed in junit jupiter 5 . 4 ( see https : / / github . com / junit - team / junit5 / pull / 1613 for details ) . in the meanwhile , asserttrue ( expected = = actual ) was used , and todo comments were placed in the code to refactor it to assertequals once junit 5 . 4 is available . it's also worth noting this is a minimal patch for migrating the package's tests to jupiter . there are several tests that can be made more elegant with jupiter's new features , but that work is left for subsequent patches .","update mutable tests to junit jupiter upgrade the tests in the mutable package to use junit jupiter as part of the effort to remove the dependency on the vintage engine . while most of these changes are drop - in replacements with no functional benefit , there are some non - obvious changes worth mentioning . unlike org . junit . test , org . junit . jupiter . api . test does not have an ""expected"" argument . instead , an explicit call to org . junit . jupiter . api . assertions . assertthrows is used . unlike org . junit . assert . assertequals ( double , double , double ) , org . junit . jupiter . api . assertions . assertequals ( double , double , double ) does not support deltas of zero , only strictly positive deltas . this issue will be addressed in junit jupiter 5 . 4 ( see https : / / github . com / junit - team / junit5 / pull / 1613 for details ) . in the meanwhile , asserttrue ( expected = = actual ) was used , and todo comments were placed in the code to refactor it to assertequals once junit 5 . 4 is available . it's also worth noting this is a minimal patch for migrating the package's tests to jupiter . there are several tests that can be made more elegant with jupiter's new features , but that work is left for subsequent patches .","net - 268 better handling of cidr / 31 and cidr / 32 where isinclusive = false . return 0 for address count , and 0 . 0 . 0 . 0 for each of the addresses",simplify,"net - 401 ftp class uses bufferedreader for control channel , which does not follow the standard . changed reader to crlflinereader .",always use { } blocks for conditional code,net - 423 ftpclient . storefile might fail when controlkeepalivetimeout is set ( ditto for ftpclient . retrievefile ),net - 422 ftp using http proxy not working,net - 437 telnetinputstream doesn't support non - blocking io when reader thread is not enabled,net - 410 apache commons tftp does not handle rfc 783 retransmits,fix npe warning by converting while to do loop ; also makes obvious that the loop is executed at least once,ensure all conditional statements use blocks ( no code change ),add constant for length of reply code,net - 442 stringindexoutofboundsexception : string index out of range : - 1 if server respond with root is current directory,fetch remote address once .,net - 492 ftpclient . printworkingdirectory ( ) incorrectly parses certain valid pwd command results,net - 507 option to disable private ip replacement in ftp passive mode .,it's tricky following the range check as one end is exclusive and the other is inclusive make both ends inclusive and adjust the calling code accordingly,"net - 514 imap append multiple issues in imapclient . deprecated unusable append methods . added new append method , as well as example imapimportmbox class to make use of it .","[ net - 511 ] exception for new subnetutils ( ""0 . 0 . 0 . 0 / 0"" ) .",net - 521 subnetutils . subnetinfo . getaddresscount ( ) can overflow as it returns an int,net - 566 unixftpentryparser drops leading spaces from file names,net - 579 ssl / tls socketclients do not verify the hostname against the certificate,net - 604 tftp send & receive don't have progress indication,net - 621 subnetutils#subnetinfo - remove unnecessary accessors,net - 614 imap fails to quote / encode mailbox names net - 615 imapclient could simplify using empty arguments,simplify by standardising on uri for server and login details ; use common utility method,net - 536 imap fetch example : imapexportmbox,remove useless javadoc ( causes ide javadoc warnings ),remove unecessary test javadoc - may cause ide javadoc warnings - more to maintain,java 8 javadoc fixes,remove unthrown exceptions . these are not part of the method signature so don't affect binary compatibility,remove unthrown exceptions . these are not part of the method signature so don't affect binary compatibility,java 8 javadoc fixes,net - 539 npe if threader . thread invoked with empty list or with null array,net - 540 article#printthread should have option to use any printstream,close the resource,use separate bufferedreader variables to avoid resource not closed warning,javadoc count messages found,"don't ""borrow"" external hosts for testing",net - 543 telnet : spy read eol is reversed,camel case test method name .,tab police,trailing spaces,typo,net - 549 - telnet does not convert lf to crlf in ascii mode,added control character processing to telnetclientexample,only create string once,net - 551 util copyreader calls copystreamlistener . bytestransferred with the incorrect value for bytestransferred,net - 551 util copyreader calls copystreamlistener . bytestransferred with the incorrect value for bytestransferred rename confusing fields,net - 550 default ftpclient buffersize results in very slow retrieve transfers fix code in util#copystream ( also copyreader ) that failed to use the proper default for buffer size 0,trailing spaces,simplify conditional by using switch add missing value,net - 556 make subnetinfo . isinrange ( int ) public,don't show reflection wrapper in stack trace if exception was thrown by called code,general tidyup and enhancements,net - 554 simplify telnetoptionhandler class hierarchy,net - 544 ftpclient . initiatelistparsing does not correctly check if parserkey was cached,net - 561 ftpfile . toformattedstring prints user and group in wrong order,fix indentation and unnecessary line wraps,standardise on calendar . day of month rather than the synonym calendar . date - which is less obvious,docn,spaces,add server timezone for parsing list responses,add mdtm output,show boundary,net - 563 mlsxentryparser needs test cases ; parsing is too lax,net - 562 ftpfile . toformattedstring should print only signficant parts of the parsed date part 1 : detect which parts are present todo : set calendar to indicate which parts are significant,typo,net - 564 ftpfile . toformattedstring - allow specification of timezone for display,add display timezone option for listing methods allow multiple listing methods in a single connect session,net - 565 add ftpclient method to return an ftpfile from an mdtm command,update to use mdtmfile,net - 562 ftpfile . toformattedstring should print only signficant parts of the parsed date + set calendar to indicate which parts are significant in mlsxentryparser,more parsing tests and fixes,more tests,net - 562 ftpfile . toformattedstring should print only signficant parts of the parsed date + set calendar to indicate which parts are significant in enterprise parser,check for parse error,check for parse error,net - 562 ftpfile . toformattedstring should print only signficant parts of the parsed date + set calendar to indicate which parts are significant remaining parsers todo : improve tests - ensure all more significant fields are set,net - 562 ftpfile . toformattedstring should print only signficant parts of the parsed date more efficient implementation - only parse format string when it is set up ensure formats always set via private setter method clear all insignificant fields below the least significant parsed field,net - 562 ftpfile . toformattedstring should print only signficant parts of the parsed date only clear one field as doing re - enables the 'set' status for all others,shared method for checking precision,oops - also need to check previous entry,need to check all significant units are set . . .,simplify by using common test method,unnecessary linewrap,test precision unit tests,layout,net - 528 ftplistparseengine does not provide access to raw responses n . b . telnetclientscript did not belong in this commit ; removed in r1644803,better handling of invalid entries ; javadoc,add a bit more debug when requests fail,allow overwrite of mbox file,better handling of protocol commands,better handling of multiple item names,check sequence of responses to detect missed messages,print the missing ids at the end,docs,implement retry for temporary failures,enable alias mechanism to work from the classpath better output when class not found,improved error reporting,fails on continuum,net - 552 sockettimeoutexception connecting a ftp server via an http proxy,simplify examples / main - use predefined properties file to define aliases,replace java 6 + method call,allow for missing properties file,docs,expected value comes before actual value,test forced trimming,javadoc,javadoc,javadoc 8 fixes,net - 525 added missing set methods on ntp class and interface restore compatibility,revert r1652867,use constant for port number use different ports for tests that might run consecutively,checkstyle,tab police,net - 538 - ftphttpclient should use socket factory to create sockets,no need for fields to be mutable or package - visible,add hint,add test for net - 573,order,net - 575 ftpclientexample should support setting the date format,net - 576 allow ftpclient to use syst response if system type is not specified in configuration,net - 558 - getmodificationtime ( < filename > ) returns complete received line including response code and eol,qualifier order,qualifier order,qualifier order,qualifier order,always use blocks,redundant spaces,redundant spaces,empty catch blocks,net - 582 simplesmtpheader does not allow for missing to : field,net - 582 simplesmtpheader does not allow for missing to : field,simplify,net - 581 simplesmtpheader fails to supply the required date : header,checkstyle : line length,fix up some comments which were mangled when the source was reformatted,more info on failure,does not make sense to test feb 29 as a short future date,more tests for feb 29,alternative password input methods,add missing ' @ override' annotations .,fold long lines,we can now use getcharset instead of the name,net - 583 ftpclient . getreplystring ( ) returns wrong value after connect ( ),add final to private fields .,add missing ' @ override' annotations to implementations of interface methods .,findbugs : more efficient to use entryset,avoid findbugs dead local store warning,wrong field for error message ( findbugs ),findbugs : possible npe,net - 592 plainsocket in ftpsclient is never closed,net - 594 telnetclient . closeoutputstream unhandled exception from filteroutputstream . close,net - 593 hostnameverifier is called with ip addess instead of the provided hostname,try to debug jenkins test failure,jenkins uses special characters in path names which get encoded in urls,overlong line,net - 599 add shorthand ftpclientconfig constructor,net - 597 ftp fails to parse listings for solaris 10 ftpd in japanese,add tostring for debugging etc,move password prompting into utilities class,support host port ; allow reading password from console / stdin / environment,don't care if we overwrite an empty file,make it easier to pass folders with unsafe characters on the command - line,net - 609 - defaultunixftpfileentryparserfactory issue ( leading spaces removal configuration ),mdtmfile can return null,net - 611 ftp does not validate command reply syntax fully,net - 610 ftpclient . mlistfile incorrectly handles mlst reply,net - 588 ftpclient . setpassivenatworkaround assumes host is outside site local range,"net - 602 failure to parse times from syst l8 systems that report as ""windows type : l8""",net - 596 nullpointerexception when disconnecting telnetclient twice with jdk 7,split into smaller methods . show sent and received counts,allow override of timeout and port,add tostring ( ) representations for use in debugging,net - 612 allow tftp socket io tracing,net - 477 tftp sendfile retry broken,net - 414 apache commons tftp does not reject request replies that originate from a control port .,add verbose mode,net - 320 allow tftpserver . java to bind to a specific network adapter,net - 613 tftpclient assumes that lastblock = = 0 only once,allow customisation of the behaviour,cli app for running tftpserver,checkstyle trailing spaces,net - 618 system information leak in ftp parser,more tests,net - 619 subnetutils - improve binary netmask algorithm this fixes #6,bit count cannot be more than 2 digits ( 32 ),net - 624 subnetinfo#tocidrnotation - a wrong format subnet mask is allowed,net - 584 : forgot to write debug code to svn . . .,net - 624 subnetinfo#getcidrsignature - improve functions,net - 625 subnetutils - improve construction also make most fields final,add some debug for net - 584,count ioerrors for debug,ensure csldebug is always updated,net - 584 error with org . apache . commons . net . ftp . ftpclient setcontrolkeepalivetimeout look for command completion first,net - 584 error when using org . apache . commons . net . ftp . ftpclient setcontrolkeepalivetimeout,indentation,net - 631 bug in mvsftpentryparser . parseunixlist ( findbugs ),make sure at least the raw listing and a file name are parsed ok,simplify,net - 632 ftphttpclient - support for encoding other than utf - 8 this fixes #1,net - 633 add xoauth2 to imap and smtp \ nthis fixes #2,( findbugs ) use % n rather than \ n for locale - dependent eols,( findbugs ) close resources,( findbugs ) cheaper to scan for chars than strings of length 1,( findbugs ) cheaper to scan for chars than strings of length 1,unused,unused,( findbugs ) useless integer creation,add pop3exportmbox example code,duh! need to actually use the encoding . . .,avoid system . exit,specify locale for upcasing,( findbugs ) cheaper to scan for chars than strings of length 1,net - 634 add size command support,net - 636 examples should be in org . apache . commons . net subpackage,write individual . eml files if output is a directory,"net - 639 - mvsftpentryparser . preparse - mvs , z / os - allow for merged ext / used fields",net - 638 - telnet subnegotiations hard - limited to 512 bytes - allow override,"net - 641 subnetutils . subnetinfo . isinrange ( ""0 . 0 . 0 . 0"" ) returns true for cidr / 31 , 32",fix help message,net - 643 npe when closing telnet stream,show folders,don't replace default from source with blank,net - 614 imap fails to quote / encode mailbox names more commands with mailbox name parameters,[ collections - 508 ] initial commit of new multivaluedmap interface + implementations . thanks to dipanjan laha .,[ collections - 508 ] improved original contribution after feedback . thanks to dipanjan laha .,[ collections - 508 ] further additions .,"[ collections - 508 ] updating equals and hashcode for listvaluedmap , setvaluedmap and multivaluedmap",fix findbugs error .,"first review of multivaluedmap : formatting , throw nullpointerexception for null inputs .",continue review of multimap package .,[ collections - 580 ] proposed fix for remote code exploits by disabling de - serialization of invokertransformer by default .,"[ collections - 580 ] add javadoc , improve error message and apply review comments .",moved and renamed - was originally from velocity cvs ( which came from elswhere . . . ) pr : obtained from : submitted by : reviewed by :,field can be private,don't rely on direct access to internal fields,field can be private,fields can be private,fields can be private,fields can be private,fields can be private,some fields can be private,add comment markers for remaining classes where fields could perhaps be privatised,trailing spaces,unnecessary code - the null check is already done below,explicit boxing shows that npe may occur so document it,trailing spaces,explicit boxing,trailing spaces,remove trailing spaces .,remove trailing spaces .,remove trailing spaces .,remove trailing spaces .,remove trailing spaces .,remove trailing spaces .,remove trailing spaces .,remove trailing spaces .,ensure switch statements have defaults ; ensure illegalstateexception messages include the index value,remove trailing spaces .,add some tests for tostring,unnecessary cast,add hashcode ( ) to keep findbugs happy,explicit boxing,ignore boxing errors in test code,ensure name is used,remove trailing spaces .,"remove trailing spaces , formatting + javadoc .",remove trailing spaces .,remove trailing spaces .,document some valid @ suppresswarnings,[ collections - 453 ] clone input parameters for instantiatetransformer .,"[ collections - 453 ] clone input parameters , add null check , final .","[ collections - 453 ] change chainedtransformer and chainedclosure constructors to copy input arguments , add private constructor for factory methods to not copy twice .",[ collections - 453 ] fix switchclosure and switchtransformer .,use varargs parameter instead of array .,use also varargs in internal functorutils .,use varargs instead of array in constructor .,use varargs instead of arrays as input argument where applicable .,allow a broader range of inputs for a uniquefilteriterator .,document why warnings can be ignored here,fix up a raw type todo : the whole test class looks wrong - why is it parameterised ? if does not seem to have a specific instantiation,add again chainediterator method with 2 iterators to avoid generics warning in client code .,[ collections - 462 ] added peekingiterator . thanks to andy seaborne,[ collections - 463 ] add pushbackiterator . thanks to andy seaborne .,[ collections - 466 ] replaced collection with iterable in maputils . populatemap methods .,formatting .,[ collections - 466 ] replace collection with iterable where applicable in collectionutils .,[ collections - 460 ] change iteratorchain to use a queue internally .,formatting + svn : keywords,[ collections - 472 ] improved performance of abstractmapbag#containsall . thanks to adrian nistor .,cleanup of trie package .,"further cleanup of trie package & interface , renamed abstracttrie to abstractbitwisetrie , added todos .",[ collections - 470 ] renamed transformedmap class in splitmap package to transformedsplitmap .,"refactor trie package : reduce interface by extending iterablesortedmap and only adding prefixmap method , remove all key analyzers but the stringkeyanalyzer , refactor patriciatrie class by moving all remaining methods to abstractpatriciatrie and fixing the key type to string , integrating the test classes into the framework .",make tests compile with various compilers .,"updates to tries : remove synchronized decorator , add javadoc .",fix findbugs warning .,submap view serialization works now properly .,[ collections - 455 ] remove todos : keep decorated object protected .,"[ collections - 459 ] removed setarray methods in arrayiterator and objectarrayiterator , made fields final if possible .",formatting .,[ collections - 468 ] added compliantbag decorator which decorates another bag to comply with the collection contract .,remove todos related to privatizing fields - > keep it as is for now .,"[ collections - 459 ] made fields package private , as suggested .",revert varargs parameter to plain array as it breaks tests on jdk 1 . 5 and 1 . 6 .,[ collections - 473 ] made field collection private and added setter for de - serialization .,[ collections - 455 ] changed remaining fields in question to scope package private .,constructors must not invoke overrideable methods,fix warning in test class .,add tests for collections - 474 - with null values and with non - null values,collections - 474 exception in listorderedmap#putall if map contains null values,"[ collections - 474 ] added sanity checks , javadoc clarification , changelog entry .",rename compliantbag to collectionbag .,[ collections - 475 ] fixed conversion of timeout parameters in passiveexpiringmap .,"[ collections - 481 ] use varargs parameter in compositeset . addcomposited , fixed conflict resolution when using more than 1 set as argument . thanks to hollis waite .",[ collections - 480 ] narrow return type of bidimap . values to set . thanks to hollis waite .,[ collections - 481 ] also change to varargs parameter in compositecollection .,"[ collections - 485 ] added wildcards to copy - constructors and unmodifiable decorators / iterators , thanks to hollis waite .","[ collections - 488 ] added collectionutils . matchesall ( iterable , predicate ) , thanks to josh cain .",fix some generics warnings in test code .,[ collections - 494 ] move equator interface to base package .,add unit test for queueutils .,add unit test for trieutils .,add more tests for queue interface .,"[ collections - 495 ] fix unmodifiabletrie . unmodifiabletrie , add tests .",[ collections - 496 ] unmodifiableboundedcollection does now also implement the unmodifiable marker interface .,added tests for the unmodifiable factory methods .,"[ collection - 497 , 498 , 499 ] refactored test framework for bag implementations , added missing tests , added collectionsortedbag .",fix findbugs warning .,code simplification,enabled a test for nullpredicate,move suppresswarnings tag from for loop to method level to prevent compilation problems with ibm jdk 1 . 5,fix compilation error on jenkins .,exclude more test cases for ibm jdk 6 as these are failing for release sr15 .,"[ collections - 500 ] renamed multimap . remove ( k , v ) to boolean removemapping ( k , v ) .","[ collections - 501 ] renamed multikeymap . remove ( object , object , . . . ) to removemultikey ( . . . ) .","remove redundant super - interfaces , already defined by super - types .",add missing @ override annotations .,fix grammar in message .,statement unnecessarily nested within else clause .,statement unnecessarily nested within else clause .,statement unnecessarily nested within else clause .,statement unnecessarily nested within else clause .,statement unnecessarily nested within else clause .,statement unnecessarily nested within else clause .,statement unnecessarily nested within else clause .,unnecessary qualified name .,unnecessary qualified name .,unnecessary qualified name .,unnecessary qualified name .,redundant use of public modifier .,redundant use of public modifier .,redundant use of public modifier .,unnecessary qualified name .,redundant use of public modifier .,redundant use of public modifier .,redundant use of public modifier .,redundant use of public modifier .,redundant use of public modifier .,redundant use of public modifier .,redundant use of public modifier .,remove redundant use of public modifier .,remove unnecessary qualified name .,remove redundant use of public modifier .,remove redundant use of public modifier .,remove redundant use of public modifier .,remove redundant use of public modifier .,remove redundant use of public modifier .,added a test for iteratorenumeration,"minor changes ( typo , unused import )",[ collections - 502 ] remove generic parameters from static instance fields .,[ collections - 502 ] remove generic parameters from static instance fields .,fix for java 1 . 5 compilation .,use interface instead of concrete class .,add message to exception .,[ collections - 471 ] added boundediterator .,"[ collections - 503 ] added new iftransformer and deprecate transformerutils . switchtransformer ( predicate , transformer , transformer ) . thanks to josh cain .",[ collections - 507 ] removed wrong type bounds for comparatorutils . chainedcomparator . thanks to gerson .,"remove duplicate factory methods , no need for it .",update test .,[ collections - 510 ] fix compilation errors with java 8 . thanks to hollis waite .,"[ collections - 508 ] javadoc cleanup , interface review .",[ collections - 512 ] fix equals method for transformingcomparator . thanks to cyrille artho .,"[ collections - 519 ] constructors of * utils classes are now protected to allow sub - classing . thanks to radoslav paskalev , daniel feist .",[ collections - 519 ] revert after discussion on the mailinglist .,[ collections - 512 ] fix equals method of fixedordercomparator .,[ collections - 522 ] updated code example for predicatedlist . thanks to erik .,[ collections - 521 ] fix multikeymap when using two key arguments and the second is null . thanks to maxime nay .,[ collections - 524 ] listorderedset . listorderedset ( list ) did not remove duplicates from the input list . thanks to j goodfellow .,[ collections - 523 ] remove unneeded private method . thanks to thiago andrade .,"[ collections - 531 ] use proper type bounds for collectionutils . isequalcollection ( c , c , equator ) . thanks to dipanjan laha .",[ collections - 529 ] added methods removeall and retainall to collectionutils that use a custom equator for equality checks . thanks to alexander muthmann and dipanjan laha .,[ collections - 533 ] initial commit for multivaluedlinkedhashmap implementation & tests . thanks to geoff schoeman .,[ collections - 533 ] changing setvaluedlinkedhashmap's default collection to linkedhashset to preserve insertion order & some more tests,"fix formatting , warnings .",[ collections - 536 ] improved null check . thanks to tagir valeev .,[ collections - 518 ] make abstractiterablegetmapdecorator abstract . thanks to dipanjan laha .,close file stream in test .,close file stream in test .,statement unnecessarily nested within else clause .,"the static method transformedset ( set < object > , transformer < ? super object , ? extends object > ) from the type transformedset should be accessed directly .",statement unnecessarily nested within else clause .,statement unnecessarily nested within else clause .,"redundant superinterface multivaluedmap < k , v > for the type multivaluedhashmap < k , v > , already defined by abstractmultivaluedmap < k , v > .","redundant superinterface multivaluedmap < k , v > for the type multivaluedlinkedhashmap < k , v > , already defined by abstractmultivaluedmap < k , v > .","redundant superinterface serializable for the type abstractlistvaluedmap < k , v > , already defined by abstractmultivaluedmap < k , v > .",statement unnecessarily nested within else clause .,statement unnecessarily nested within else clause .,"[ collections - 540 ] added collectionutils#get ( enumeration , int ) , simplified code of collectionutils#get ( object , int ) . thanks to daniel stewart , issam el atif . this closes #6 .",[ collections - 537 ] harmonized signature of functor - related factory methods : collection and array based methods did not have the same generic bounds . thanks to frank jakop .,"[ collections - 511 ] added collectionutils . partition ( . . . ) methods . thanks to brent worden , nathan blomquist .",fix compilation error .,"avoid generic return parameter , specify the actual interface being used to avoid compilation problems .",[ collections - 525 ] fix patriciatrie . prefixmap ( ) . thanks to zigler zhang .,[ collections - 539 ] changed scope of circularfifoqueue . isatfullcapacity to public .,[ collections - 543 ] abstractcollectiondecorator does not forward equals and hashcode anymore to the backing collection .,[ collections - 530 ] added builder for predicatedcollection . thanks to erik .,[ collections - 426 ] revert performance improvement and add clarifying javadoc wrt runtime complexity .,[ collections - 427 ] revert performance improvement and add clarifying javadoc wrt runtime complexity .,[ collections - 550 ] added iterableutils#tostring ( . . . ) to newly created iterableutils class . thanks to goncalo marques . this closes #7 .,[ collections - 555 ] added clarification to treebag#add ( object ) wrt null arguments . thanks to m kim .,[ collections - 558 ] change return type of listorderedset#remove ( int ) to the generic type parameter . thanks to felix rabe,"[ collections - 395 ] added lrumap#get ( object , boolean ) to query the map without affecting the lru order . thanks to david hawthorne .",javadoc improvements to collect methods .,[ collections - 562 ] upgrade minimum java requirement to java 6 . replace arraystack with arraydeque .,[ collections - 556 ] added method setutils . identityhashset .,"[ collections - 464 ] add first version of a fluentiterable implementation , cleanup recently tostring methods in iterableutils , add skippingiterator and additional methods to iteratorutils and iterableutils .","add javadoc , simplify iterableutils .","add collating , zipping , reversing methods to fluentiterable , add zippingiterator .",add apply method to fluentiterable .,"add unit test for skippingiterator , fix bug .","add unit test for zippingiterator , add factory methods to iteratorutils , add changelog entry .",fix checkstyle warnings .,simplify .,simplify .,rename setutils . identityhashset to setutils . newidentityhashset to better reflect that it returns a new instance .,[ collections - 565 ] add decorators for navigableset interface .,[ collections - 518 ] revert and postpone change to 5 . 0 . todo . txt,use long instead of int .,make fluentiterable method covariant .,[ collections - 557 ] added support to specify the initial size of a lrumap . thanks to philippe mouawad .,[ collections - 551 ] first bunch of methods which take an iterable / iterator / enumeration as input shall be moved to the appropriate util classes . mark existing methods in collectionutils as deprecated .,convert to junit 4 tests .,update unit test after method changes .,fix javadoc problem .,"deprecate multivaluemap and multimap , replaced by multivaluedmap .","deprecate multivaluemap and multimap , replaced by multivaluedmap .",catch correct exception .,[ collections - 551 ] move more methods from collectionutils .,fix checkstyle warning .,[ collections - 566 ] use natural ordering in iteratorutils#collate when the provided comparator is null .,"minor changes to fluentiterable , added tolist to iterableutils , added first fluentiterable tests .",add more fluentiterable tests .,"add more tests , add emptyiterable ( ) method .","[ collections - 551 ] move partition methods from collectionutils to iterableutils . make method consistent : do not allow null predicates , return the same for a null iterable as for an empty one .","[ collections - 551 ] move forallbutlastdo methods , add unmodifiableiterable .","add emptyifnull method , simplification .","move cardinality method , rename frequency to countmatches .",add missing @ override tags .,"rename cardinatlity to frequency , apply to foreach , add empty and singleton methods to fluentiterable .","clarify null argument behavior of iterableutils and fluentiterable : decorators do not accept null values , whereas utility methods are null - safe wrt iterable instances .","complete unit tests for fluentiterable , fix exception for toarray .",add comparatorutilstest .,[ collections - 567 ] add interface / skeleton code and first implementation of a multiset .,"add unmodifiable multiset decorator , abstract base test .","continue review of multivaluedmap interface and implementations : code style and formatting , use nullpointerexception for null arguments , use multiset instead of bag .",revert to returning null .,"fix checkstyle warnings , cleanup iteratorutils , fix throws clauses .","[ collections - 571 ] deprecate collectionutils . { synchronized , unmodifiable } collection .","add indexof methods to iterableutils and iteratorutils , replace last occurrence of arraystack with arraydeque .",[ collections - 572 ] add set operations to setutils .,[ collections - 567 ] add predicated and synchronized decorators .,[ collections - 576 ] fix de - serialization of multikey subclasses : hashcode was not re - calculated . thanks to stephan roch .,[ collections - 577 ] add additional test cases for fixed problems with prefixmap . thanks to chris duncan,[ collections - 580 ] removed serialization support for the identified unsafe classes in the collections4 branch .,[ collections - 580 ] remove serialization tests for classes which are not serializable anymore .,temporarily disable tests for new multi - valued maps wrt serialization until support is restored .,[ collections - 580 ] add validation to multivaluemap#reflectionfactory : only collection classes are support .,"[ collections - 567 ] add multisetutils , fix typos , remove references to bag .","[ collections - 567 ] add missing unit tests , fix problems with remove method .",fix size calculation of entryset in multiset .,add tostring method in abstractmultivaluedmap#keysmultiset .,"[ collections - 580 ] do not use instantiatefactory anymore for multivaluedmaps : different multivaluedmap implementations are now fully typed for the used underlying map and value collection class being used . this has pros and cons , but it is certainly safer to do it that way .","fix checkstyle warnings , add missing al header .","add abstract class to simplify creation of multiset implementations , needed for multivaluedmap ; additional cleanup .",complete keysmultiset view .,document the todos wrt size ( ) and wrapped collections : for the 4 . 1 release we leave it as is as it would require too much work and can be improved later .,[ collections - 508 ] added asmap ( ) implementation for multivaluedmaps .,use getmap ( ) instead of asmap ( ) .,remove unused import .,add explicit cast to prevent compilation error with jdk 1 . 8,comment out test that create the serialized test objects .,make eclipse compiler happy .,add final to some ivars .,"[ collections - 589 ] add null - safe maputils . size ( map & lt ; ? , ? > ) method .",[ collections - 586 ] patriciatrie prefixmap clear throws nullpointerexception . applied patch and added an extra test .,"collections - 603 : small improvements for generics , conditional statements , and warnings suppressions thanks to artem konovalov this closes #17",collections - 602 : improve efficiency of defaultedmap . get . applying patch provided by john mark .,[ collections - 654 ] add class sortedproperties to sort keys .,fix findbugs issues,"fix two pmd issues , but comment others where if's were added for readability","iterableutilstest#indexof , iteratorutilstest#indexof : simplify",collections - 660 : uncomment and change order of assertequals,add unit tests to increase code coverage . this closes #29 .,use final for params .,use final for locals .,"revert ""use final for locals . "" this reverts commit 712ddb1e193967c27f5624485938e7de5d732c6b .","revert ""use final for params . "" this reverts commit cefe846e3e4a239dd568623346160ad41d7256ab .",[ collections - 661 ] intermittent test failures in windows for hashsetvaluedhashmap .,use final .,remove unnecessary casts,remove redundant type arguments .,brute force test all available locales ( it's fast . ) for maputils which previously failed on locales that do not use ' . ' as the decimal separator . no main code changes .,maputilstest : fix order of expected and actual parameter in assertions ( closes #32 ),remove trailing white spaces on all lines .,no need to nest in an else clause .,"[ collections - 666 ] org . apache . commons . collections4 . listutils . union ( list , list ) should pre - allocate result list","[ collections - 669 ] update org . apache . commons . collections4 . collectionutils . addall ( collection < c > , c [ ] ) to addall ( collection < c > , c . . . )","[ collections - 669 ] update org . apache . commons . collections4 . collectionutils . addall ( collection & lt ; c > , c [ ] ) to addall ( collection & lt ; c > , c . . . ) .",[ collections - 575 ] synchronized queue wrapper in queueutils .,remove trailing white spaces on all lines .,use final .,[ collections - 670 ] add org . apache . commons . collections4 . iteratorutils . first ( iterator ) .,[ collections - 671 ] add org . apache . commons . collections4 . iterableutils . first ( iterable ) .,[ collections - 599 ] hashentry array object naming data initialized with double the size during deserialization .,sort members .,[ collections - 675 ] modify iteratorutils . peekingiterator signature to return peekingiterator .,[ collections - 676 ] modify iteratorutils . pushbackiterator signature to return pushbackiterator .,[ collections - 678 ] the verification of unsupported iterator methods is not complete . closes #36 .,- reverting changes since these break binary compatibility . setting jira tickets to 5 . 0 . - [ collections - 675 ] modify iteratorutils . peekingiterator signature to return peekingiterator . - [ collections - 676 ] modify iteratorutils . pushbackiterator signature to return pushbackiterator .,collections - 681 : new unit test for multisetutils,collections - 681 : expand imports,some test cases going more into the details of the flat3map implementation . closes #39 .,remove trailing white spaces on all lines .,use final .,[ collections - 673 ] listutils . partition potential integer overflow . applied patch with reformatting .,use final .,moved tests from junit 3 to junit 4 nomenclature . closes #44 .,remove redundant type arguments .,remove redundant modifiers .,use a java 5 for each loop .,use final .,fix checkstyle : max line length is 120 .,pmd : avoid modifiers which are implied by the context .,pmd : avoid modifiers which are implied by the context .,[ collections - 691 ] use boolean operator for boolean result,[ collections - 692 ] replace use of deprecated class#newinstance ( ) #49 .,[ collections - 696 ] abstractreferencemap made easier for subclassing ; pr #51 .,"collections - 697 : ensure fixedsizelist respects underlying list's size formally document and test that if the size of the backing list of fixedsizelist changes , then so does the fixedsizelist . this has been the historical behavior . letting it be part of the contract is reasonable , expected , and worthwhile to note . fixes #55",refactor common code into a private method .,casting to object [ ] allows compilation on java 11 .,[ collections - 701 ] setuniquelist . add ( ) crashes due to infinite recursion . add tests .,initial revision,add an unsynchronized implementation of the stack api ( extends arraylist instead of vector ) for faster stack processing in single threaded environments . todo : finish the unit tests ( coming soon ) .,flesh out the stack - related unit tests .,applied scott sanders' patch restoring the peek ( n ) method . pr : obtained from : submitted by : reviewed by :,- adding some utilities from struts into the collections packages along with some ( admittedly weak for now ) tests . pr : obtained from : submitted by : reviewed by :,* refactored test framework slightly to support more interesting tests and to make the contract more enforceable * added some new tests and test cases,"change parentage of these classes so that they subclass arraylist , hashmap , and treemap respectively . this improves the ability to substitute ""fast"" versions for the use of the regular collection classes . implement clone ( ) , equals ( ) , and hashcode ( ) methods in accordance with the contracts specified in the collections classes apis .","add tests for the standard jdk collection classes ( arraylist , hashmap , treemap ) . these help validate the tests themselves ( by proving that they operate as expected against the standard java apis ) , and serve as convenient base classes for testing the ""fast"" variants . make testarraystack extend testarraylist so that all standard arraylist contracts are tested . test fastarraylist , fasthashmap , and fasttreemap in both ""slow"" mode and ""fast"" mode .",committing several files from peter donald and avalon,adding collectionutils and tests for it,using trytoadd ( ) where appropriate,filled in testretainall and testtoarray2,minor fixes to adhere more closely to the java . util . list contract,several additional tests,a few minor changes : 1 ) replaced with the current version from velocity's cvs - this is a few changes by dan 2 ) added the recent patch from ilkka for dealing with encoded properties pr : obtained from : submitted by : reviewed by :,"start of extendedproperties tests , and added to the testall class . pr : obtained from : submitted by : reviewed by :",minor javadoc fixes,importing classes referenced in javadoc comments ( javadoc won't find them otherwise ),more tests,added new map implementations and closure classes,added testcases for lrumap and softrefhashmap,fixed the problem reported by thomas fahrmeyer < thomas . fahrmeyer @ einsurance . de > where extendedproperties would re - process data when making a subset . hope no one was depending on that : ) also adjusted the testcase to test this . pr : obtained from : submitted by : reviewed by :,added mauricio s . moura's patch to arrayiterator such that next ( ) calls move the iterator along rather than calls to hasnext ( ) . i've also added a junit test case to demonstrate it in action and validate that it works correctly .,"deprecating . i'd like to remove this class , if no one has any issues .",i pretty sure this fixes bug 1729 ( http : / / nagoya . apache . org / bugzilla / show bug . cgi ? id = 1729 ) but i don't have an environment to test it . it certainly doesn't break anything .,"work around a problem reported by the vaj java compiler , caused by the fact that the superclass already has a private class named iterator . submitted by : costin cozianu < costin . cozianu @ cis . canon . com >","patched the select ( inputcollection , predicate , outputcollection ) method so that it does not return a variable , to avoid any confusion with the select ( inputcollection , predicate ) method which returns the outputcollection .",applied mauricio's patches to the arrayiterator and added his patches to testarrayiterator also,change all calls from assert ( ) to asserttrue ( ) - - introduced in junit 3 . 7 - - to avoid future conflicts with the jdk standard assertion capability .,added singletoniterator for iterating over a single value together with a junit test case,added singletoniterator test case to testall,"patched arrayiterator so that it can work with any type of array , not just object [ ] instances",backed out arrayiterator change to use reflection rather than use object [ ],patched arrayiterator to use java . lang . reflect . array so that it can support arrays of primitive types such as int [ ],"added bag interface , implementations and junit test cases as submitted by chuck burdick",added daniel rall's patch to support remove ( ) from the enuemerationiterator,added bay's helper methods to collectionutils,"beanutils - 289 - jdbcdynaclass ""lowercase"" option causes problems when using the dynaproperty name to as the column name when accessing the resultset - add a cross reference to jdbcdynaclass when the lower case dynaproperty name is different from the column name - provide lookup methods for column names and values - modify rowsetdynaclass and resultsetiterator to use the new methods",beanutils - 291 - resolve one of the memory leak issues - converters holding a reference to class . this is an incompatible change to beanutils 1 . 8 . 0 - beta ( but not to the previous 1 . 7 . 0 release ) . the incompatible changes are : - abstractconverter - constructor signatures are different and getdefaulttype ( ) method is now abstract - datetimeconverter - now an abstract class and constructor signatures are different - numberconverter - now an abstract class and constructor signatures are different,beanutils - 298 - methodutils . getaccessiblemethod ( method method ) could not find right public method - reported by roman mukhin,"beanutils - 291 - fix memory leaks - thanks to clebert suconic reporting , patches and review : convertutilsbean - use weakhashmap for converters cache localeconvertutilsbean - use new weakfasthashmap for converters cache mappedpropertydescriptor - store method references in softreference and provide mechanism to re - create methodutils - put methoddescriptors in weakreference ( within the weakhashmap ) propertyutilsbean - use weakhashmap for the two property descriptors caches wrapdynaclass - store the class in a softreference",beanutils - 291 - re - create class reference if lost - fixes problem on jrockit jdk - thanks to jörg schaible,beanutils - 351 floatlocaleconverter cannot parse 0 - thanks to lucian chirita,beanutils - 345 beanutilsbean . setproperty does not handle some kind of nested properties - thanks to simone riccucci for the patch,generified propertyutilsbean and propertyutils .,fixed generics warnings in test class .,fixed warnings in test class .,fixed warning in test class .,fixed warnings in test class .,fixed warnings in test class .,fixed warning in test class .,fixed warnings in test class .,fixed warnings in test class .,fixed warnings in test class .,fixed warnings in test class .,fixed warnings in test class .,fixed warnings in test class .,fixed warnings in test class .,fixed warnings in test class .,fixed warnings in test class .,fixed warnings in test class .,fixed warnings in test class .,fixed warnings in test class .,fixed a warning in a test class .,fixed warnings in test class .,fixed warnings in test bean class .,fixed warnings in test class .,fixed warnings in test class .,fixed warnings in test classes .,fixed warnings in test class .,re - enabled long - running test case . this test case had been disabled while generics were added .,[ beanutils - 441 ] replaced unmodifiableset . decorate ( ) by collections . unmodiableset ( ) .,[ beanutils - 425 ] externalized introspection mechanism . a new beanintrospector interface was added . implementations are now responsible for obtaining property descriptors . this makes it possible to support bean properties that are not compliant to the java beans specification .,[ beanutils - 428 ] added fluentpropertybeanintrospector class . this is a specialized beanintrospector implementation which also supports properties whose setter method has a non - void return type . this is useful for classes using a fluent api .,javadocs : fixed missing closing tags .,renamed type parameter . switched from < b > to the more standard < t > .,fixed checkstyle errors .,[ beanutils - 454 ] beanutilsbean . copyproperties ( ) handles null values differently . no longer a conversionexception is thrown for null values for certain data types . a special handling for null values was added in the copy method .,stringbuffer - > stringbuilder,added a new resetbeanintrospectors ( ) method . this method completes beanutils - 425 by a means to reset introspection to its initial state . the test case for propertyutils has been made more robust against potential failures caused by randomized execution order .,[ beanutils - 455 ] wrapdynabean now allows passing its class to the constructor . this makes it possible to construct the class externally ( using custom configuration ) and then pass the fully initialized class object to the bean instance .,"[ beanutils - 455 ] wrapdynaclass now uses an associated propertyutilsbean instance for introspection . optionally , a propertyutilsbean instance can be passed to the createdynaclass ( ) method . if set , this instance is used to determine the wrapped bean's property descriptors . the caching of wrapdynaclass instances had to be adapted because now the associated propertyutilsbean object has to be taken into account .",added beanintrospectiondata class . this internal class is used in future by propertyutilsbean to cache information about bean classes and their available properties .,changed the cache in propertyutilsbean to use the new beanintrospectiondata class . information about bean classes obtained via introspection is now stored in form of beanintrospectiondata objects .,added a method for obtaining a specific propertydescriptor to beanintrospectiondata .,"added a getwritemethod ( ) method to beanintrospectiondata . beanintrospectiondata now remembers the names of write methods . if a write method of a property is no longer stored in its propertydescriptor , the method can now be obtained anew .",[ beanutils - 456 ] recover lost references to write methods . when querying a write method for a property descriptor the method is automatically fetched again if its reference was freed . added a test case exposing the problem .,"[ beanutils - 456 ] provide another method for querying a write method . propertyutilsbean . getwritemethod ( propertydescriptor ) may fail for properties obtained via custom bean introspection . added a warning to the javadocs . the method propertyutilsbean . getwritemethod ( class , propertydescriptor ) was made public because it works correctly in this case .",[ beanutils - 463 ] added a specialized beanintrospector for suppressing properties . this class can remove properties which have been detected by another beanintrospector object .,[ beanutils - 463 ] added an easy way to suppress the class property . a specialized instance suppressing the class property common to all java objects has been added as constant to suppresspropertiesbeanintrospector . a test case was created demonstrating that the property can no longer be accessed with this introspector being active .,[ beanutils - 458 ] added a check for null result objects . a null input object should be accepted by a converted without throwing a conversionexception . thanks to manuel dominguez sarmiento for the proposed fix .,[ beanutils - 470 ] numberconverter now deals with bigdecimal objects correctly . if a bigdecimal object is passed to the converter it is now directly returned without trying a conversion that will cause a loss of precision . thanks to tommy tynjä for the patch .,[ beanutils - 465 ] made indexed list setters work again . thanks to daniel atallah for the patch .,convert control statement bodies to block .,add a bit of debug for continuum failure - does max count need to be increased ?,add a bit of debug for continuum failure - does max count need to be increased ?,add a bit of debug for continuum failure - does max count need to be increased ?,more trying to fix continuum fail,keep trying,convert for loops to enhanced for loops .,remove unnecessary casts .,remove unused import .,access static method directly .,fix what must have been a typo!,[ beanutils - 474 ] fluentpropertybeanintrospector does not use the same naming algorithm as defaultbeanintrospector .,"[ beanutils - 477 ] changed log level . if a property cannot be created for a method , fluentpropertybeanintrospector no longer logs a warning , but only a statement on info level . the stacktrace is then logged with debug level .",beanutils - 492 workarounds in test case . . but assume . assumetrue does not cause the test to be ignored : (,avoid try . . catch { fail ( e ) } junit will catch exception anyway,beanutils - 492 : added java 8 - safe variant of beanutils - 422 test case . . which uses string [ ] instead of list,beanutils - 492 ignore test on java 8 or more . . to use assume . assumetrue ( ) this test was converted to java 8,beanutils - 492 : skip testlistindexed * method on java 8 to use assume . assumetrue this test case was converted to junit 4,beanutils - 492 : document getpropertytype ( ) no longer supporting list,code cleanup ( no tabs! ),beanutils - 492 : always return once the property is found,beanutils - 496 don't assume is * will win over get *,"beanutils - 495 workaround - sometimes java 9 expects "" , "" in us date",beanutils - 492 : common supportsindexedlists ( ) method,beanutils - 493 handle setting by list index dynabeans author : bernhard seebass,"use assume . assumefalse instead of throwing exception as having ""too much memory"" for a test is not a bug : )",surpress deprecation warning,beanutils - 497 fix some of the doclint errors,beanutils - 497 : fix javadoc doclint errors contributed by raviteja lokineni this closes #1,beanutils - 500 : upgrade to commons - collections4,use enhanced for loops where possible,fix logging contexts,don't use boxed primitive constructors,better generics handling,use final .,remove needless type casts .,[ beanutils - 504 ] update from java 6 to 7 . add missing ' @ override' annotations .,[ beanutils - 504 ] update from java 6 to 7 . remove redundant type arguments .,no need to nest with else clause .,remove redundant super - interface .,access static method directly .,delay execution of code unless / until needed,remove unnecessary field masking from local variables,[ beanutils - 505 ] add missing serialversionuid to serializable classes .,change indirect accesses to static members to direct accesses ( accesses through subtypes . ),@ ignore for [ beanutils - 509 ] : this new test always fails with a junit test timeout ; with or without the change applied to wrapdynaclass .,[ beanutils - 509 ] weakhashmap enters into infinite loop in wrapdynaclass . java . comment and always shutdown executor in a finally clause .,format and remove unnecessary parens .,[ beanutils - 514 ] remove deprecated code for 2 . 0 . 0 . last deprecation from 1 . x removed .,initial check - in of beanutils component .,initial check - in of 'beanutils' component .,"update the unit tests for propertyutils to check out the getnestedproperty ( ) and setnestedproperty ( ) capabilities . change a few method signatures so that this works with junit 3 . 2 or later as well , instead of requiring 3 . 5 .","add a test for a boolean property that uses an ""isx"" method as the getter instead of a ""getx"" method .",small fix . pr : obtained from : submitted by : reviewed by :,initial checkin : set of basic tests for beanutils ( found a small bug in beanutils while writing it ) . mostly complete . want to add a 'depopulate ( ) ' to parallel populate ( ) in beanutils before testing ( once i can find a smarter name for it ) pr : obtained from : submitted by : reviewed by :,"add a describe ( ) method to both beanutils and propertyutils that returns a map of all properties of the specified bean that have a property reader method . the beanutils version converts property values to strings ( consistent with the rest of the beanutils methods ) , while the propertyutils version returns them unmodified . submitted by : michael l . heuer < heuermh @ primushost . com >",use fasthashmap instead of hashmap to implement the cache of propertydescriptor objects . declare a dependency on the collections classes package from commons .,"make the getreadmethod ( ) and getwritemethod ( ) methods of propertyutils public , because the task they perform is generally useful to apps using reflection even if they don't use the property getting and setting functionality . add unit tests for the current behavior of getreadmethod ( ) and getwritemethod ( ) to establish a baseline of correct behavior . this is in preparation for fixing bugzilla bug report #1200 reported against struts , where the introspection performed by these methods does not trace down nested interface ""implements"" chains .","make propertyutils . getreadmethod ( ) and propertyutils . getwritemethod ( ) smart enough to locate accessible methods in a non - public class that are declared in a public interface implemented ( either directly or indirectly ) by that class . added unit tests to validate the behavior . an example comes from the crimson parser that is part of jaxp / 1 . 1 : / / note : commentnode is * not * public class org . apache . crimson . tree . commentnode extends org . apache . crimson . tree . datanode implements org . w3c . dom . comment ; public interface org . w3c . dom . comment extends org . w3c . dom . characterdata ; public interface org . w3c . dom . characterdata extends org . w3c . dom . node ; public interface org . w3c . dom . node ; the getnodename ( ) method is defined in the node interface , but was not accessible without this patch , because previously propertyutils only checked for accessible methods in directly implemented interfaces . now , it follows the interface hierarchy and correctly discovers the callable getnodename ( ) method of the commentnode class . this bug was reported against the struts version of propertyutils , along with a patch to implement the nesting . pr : bugzilla #1200 submitted by : rashiddesai @ hotmail . com","throw illegalargumentexception ( instead of returning misleading results ) when the ""bean"" or ""name"" arguments to most method calls are null . add relevant unit test cases to validate this behavior .",collections . empty map was added in jdk 1 . 3 . replace it with something that will compile in jdk 1 . 2 environments . submitted by : kelvin ho < kelvin ho @ cgu . com . au >,"update tests from assert ( ) to asserttrue ( ) as introduced in junit 3 . 7 , to avoid future conflict with jdk native assertions .","enhance beanutils to support ""mapped"" properties , in which a property refrence includes a string key in parentheses . the corresponding bean must have the following method signatures available : public foo getpropertyname ( string key ) ; public void setpropertyname ( string key , foo value ) ; for some property type ""foo"" and some property name ""propertyname"" . a call to : propertyutils . getmappedproperty ( bean , ""propertyname ( the value ) "" ) ; will be executed ( in effect ) as : bean . getpropertyname ( ""the value"" ) ; i've also enhanced the junit test suite to do some basic tests on this functionality . this code was contributed by gregor rayman , with additional work by francios rey ( sorry about the non - accented versions of your names : - ) todo : review whether mappedpropertydescriptor can leverage the code in propertyutils . getaccessiblemethod ( ) if it were made package protected instead of private , rather than embedding the interface searching code it currently has .","add unit tests for indexed properties . along the way , fix a bug where arrayindexoutofboundsexception was being reported inconsistently depending on whether the underlying property was really an array or just had indexed getter and setter methods .",getters and setters for non - default conversion values need to be static . submitted by : jan sorensen < sorensenjan @ yahoo . com >,correct property type returned by getmappedpropertytype ( ) when it is not a string . submitted by : jan sorensen < sorensenjan @ yahoo . com >,make the caching of property descriptors ( and mapped property descriptors ) sensitive to the fact that the same fully qualified class name might be loaded from different class loaders . add cleardescriptor ( ) methods so that applications supporting class reloading ( by throwing away previously used class loaders ) can free up the previously cached descriptor information ( and thus allow garbage collection of the underlying classes ) . submitted by : elli albek < ealbek @ altoweb . com >,"checkstyle , javadoc and formatting fixes .",use final where possible .,"< action dev = ""ggregory"" type = ""add"" issue = ""codec - 184"" due - to = ""cyrille artho"" > nullpointerexception in doublemetaphone . isdoublemetaphoneequal when using empty strings < / action >",[ codec - 192 ] add daitch–mokotoff soundex .,[ codec - 199 ] bug in hw rule in soundex .,[ codec - 199 ] bug in hw rule in soundex . applying 2nd version of the patch .,statement unnecessarily nested within else clause .,document magic character values,[ codec - 194 ] support java . nio . bytebuffer in org . apache . commons . codec . binary . hex .,sort test methods .,[ codec - 193 ] support java . nio . bytebuffer in digestutils,sort new methods from previous commit .,[ codec - 195 ] support sha - 224 in digestutils on java 8 .,[ codec - 183 ] basencodecoutputstream only supports writing eof on close ( ) .,"""ashcroft"" is also coded as a261 .",codec - 200 - base32 . hex decode table contains the wrong value 32,reduce deprecation warning noise in test cases,no code change . rearrange into 16 entries per row and add comments,use final .,sort methods .,"[ codec - 202 ] add basencodec . encode ( byte [ ] , int , int ) input with offset and length parameters for base64 and base32 .",[ codec - 203 ] add convenience method decodehex ( string ) .,[ codec - 203 ] add convenience method decodehex ( string ) .,[ codec - 205 ] add faster crc32 implementation . copied from hadoop 2 . 6 . 3 . see also [ codec - 171 ] .,format nit .,sort in ab order .,format nit .,[ codec - 206 ] add java . io . file apis to digestutils .,[ codec - 208 ] make some digestutils apis public .,[ codec - 211 ] create enum messagedigestalgorithm and deprecate class messagedigestalgorithms,[ codec - 212 ] create a minimal digest command line utility : org . apache . commons . codec . digest . digest .,[ codec - 212 ] create a minimal digest command line utility : org . apache . commons . codec . digest . digest . minor tweak .,string . format does not support arrays,avoid dead code warning,"suppress warning that cannot easily be fixed it's test code , so not worth the effort",eliminate deprecation warning,[ codec - 213 ] support jep 287 : sha - 3 hash algorithms,[ codec - 211 ] create enum messagedigestalgorithm and deprecate class messagedigestalgorithms . rename messagedigestalgorithm . getalgorithm ( ) to getname ( ) .,[ codec - 217 ] add hmacalgorithms . hmac sha 224 ( java 8 only ),use foreach for arrays,use foreach for arrays,report invalid parameter,more standard separator,[ codec - 218 ] refactor hmacutils methods into the hmacalgorithms enum .,"[ codec - 211 ] create enum messagedigestalgorithm and deprecate class messagedigestalgorithms . add ""hex"" apis .",[ codec - 219 ] don't deprecate charsets charset constants in favor of java 7's java . nio . charset . standardcharsets,unnecessary now,javadoc,revert to constants,revert codec - 211,codec - 218 remove unnecessary duplicate method hmacalgorithms . getinitializedmac,sort .,javadoc . longer lines .,"avoid exception when file is a folder , just skip it .",[ codec - 213 ] support jep 287 : sha - 3 hash algorithms .,fix typo .,javadocs fix typo in sha3 224 value,messagedigestalgorithm = > messagedigestalgorithms as the former has been dropped,rename to agree with class being tested,add test for values ( ) array,ignore deprecation in test code that deliberately uses it,use same style as other sha224 methods,codec - 195 - support sha - 224 in digestutils on java 8 drop specific methods and provide sample code instead,codec - 206 add java . io . file apis to digestutils drop algo - specific methods in favour of generic ones,drop tests for dropped methods,oops - needs to be hex,codec - 220 fluent interface for digestutils,codec - 222 fluent interface for hmacutils initial implementation,no longer needed by unit test code,codec - 215 constructors must not call overrideable methods,moved standalone utility to separate package,remove unused exceptions .,codec - 171 add support for crc32 - c,treat parameter as a string if it's not a file or a directory show file name rather than directory name when listing contents don't append ' - ' for non - file digests,fix help now it supports a string,handle multiple arguments,tab police,checkstyle - trailing spaces,checkstyle,restore bc,findbugs,unused,findbugs : specify locale,simplify - always require key when creating the instance,inline the code from the enum,simplify ; merge update ( ) and dofinal ( ) methods so code looks more like original static methods .,use local code rather than depending on the enum methods,simplify,javadoc,"oops , recursive call",simplify,check for algorithm availability,,remove unused field .,remove unused exceptions .,remove unused field .,add missing ( direct usage ) tests .,"[ codec - 224 ] add convenience api org . apache . commons . codec . binary . hex . encodehexstring ( byte [ ] | bytebuffer , boolean ) .",pr : codec - 225 fix minor resource leaks . github pr,"codec - 229 stringutils . newstringxxx ( null ) should return null , not npe",codec - 230 urlcodec . www form url should be private,"codec - 231 stringutils . equals ( charsequence cs1 , charsequence cs2 ) can fail with string index obe",centralise conversion to hex digit,pull random instance creation out of loop,codec - 232 urlcodec is neither immutable nor threadsafe,codec - 145 base64 . encodebase64string could better use newstringusascii ( ditto encodebase64urlsafestring ),codec - 199 bug in hw rule in soundex revert to a fix which does not entail change to public api,codec - 233 soundex should support more algorithm variants,indentation,[ codec - 234 ] base32 . decode should support lowercase letters .,codec - 241 add support for xxhash32,add final modifier to private fields,add final modifier to method parameters,add final modifier to method parameters,use for each loop .,always use blocks .,use final .,add a hmac sha 224 test on java 8 only .,[ codec - 244 ] update from java 6 to java 7 . remove redundant type arguments .,use try - with - resources .,remove exceptions not thrown from method signatures in tests .,lvar hides another .,binaryencoderabstracttest#testencodenull : fail if expected exception is not thrown,[ codec - 244 ] update from java 6 to java 7 . use system#lineseparator,do not hide other name .,fix checkstyle issues,[ codec - 240 ] add percent - encoding codec ( described in rfc3986 and rfc7578 ) .,[ codec - 240 ] add percent - encoding codec ( described in rfc3986 and rfc7578 ) . no need to nest .,[ codec - 240 ] add percent - encoding codec ( described in rfc3986 and rfc7578 ) . don't hide .,don't hide .,rename param .,better name .,[ codec - 240 ] add percent - encoding codec ( described in rfc3986 and rfc7578 ) . add and ignore testbasicspace ( ) .,[ codec - 240 ] add percent - encoding codec ( described in rfc3986 and rfc7578 ) . sort members .,[ codec - 240 ] add percent - encoding codec ( described in rfc3986 and rfc7578 ) . use jre constant for charset .,better names ( don't hide ) and javadoc .,don't hide .,better names ( don't hide . ),use threadlocalrandom instead of random and pull out its instantiation from the loop . preallocate stringbuilder as well .,use threadlocalrandom instead of random and update javadocs for all public apis in this unixcrypt .,update javadocs to mention generating salts with threadlocalrandom internally and suggest using securerandom .,update javadocs to mention generating salts with threadlocalrandom internally and suggest using securerandom .,[ codec - 246 ] colognephonetictest . testisencodeequals missing assertions .,[ codec - 246 ] colognephonetictest . testisencodeequals missing assertions .,[ codec - 246 ] colognephonetictest . testisencodeequals missing assertions .,add test for small sharp s ( eszett ) and lower - case versions,add test to try and check all possible combinations are covered . add tests for two missing combinations,simplify by using switch on char value ; also don't convert to string unnecessarily,simplify - don't cache dynamic length,allow command - line testing,test characters above z,codec - 250 wrong value calculated by cologne phonetic if a special character is placed between equal letters,use localised suppresswarning annotations,"modified zipoutputstream to be able to avoid seeking and rewriting headers when operating through addraw . the basic idea is that an entry added through addraw is fully known at the time we call add , so we do not need to go back in the file to rewrite fields . adding this third mode increases the pain of multiple code paths , and we should probably consider a ground - up rewrite at some point .",writing central directory in chunks instead of one by one increased size of copybuf,"changed ziparchiveentry to use more optimized data structure for an overall performance improvement of about 10 % for the use case ""many small files"" , for instance a jar file . linkedhashmap was not a very good structure for such small lists and performs badly in terms of locality",fixed style issues as reported by intellij,"compress - 290 fixed error message with large groupid this is a bit of a simple solution to the issue , since there are obviously lots of other options that could have similar updates . the reality is that most recent macs that are initialized to run in corporate networks tend to get large gid's for the users . so i just fixed the one we actually have complaints about",compress - 306 archivestreamfactory fails to pass on the encoding when creating some streams .,compress - 313 add auto - detection for lzma streams,"compress - 316 detect deflate streams with zlib header , submitted by nick burch",added headers to recognize pkware crypto headers .,reduce duplication as suggested by jeremy gustie,compress - 334 ararchiveinputstream fails for bsd long names,zip64mode . always now impacts central file header same as local file header,bugfix for compress - 343,compress - 357 better synchronize finished method,"revert ""fix compress - 357 with a volatile flag"" this reverts commit 8769bb6980ea9d46f8fbec1fa1075128d6f61936 .",compress - 357 synchronize the important part of finish again,compress - 327 write zip archives to arbitrary seekablebytechannels,[ compress - 368 ] allow compressor extensions through a standard jre serviceloader .,[ compress - 368 ] allow compressor extensions through a standard jre serviceloader . revisit new interface to add decompress until eof .,compress - 373 support for writing legacy lzma streams,refactor magic number .,refactor magic number .,better local variable name .,param name 'input' should not hide field .,"trivial fixes of ""bugs"" reported by sonar",rename instance fields that look like class fields,compress - 271 add lz4 frame to compressorstreamfactory,compress - 382 first draft of preventing oom in lzma,compress - 382 and compress - 386 - - add memorylimit to compressorstreamfactory and zcompressorinputstream and lzmacompressorinputstream,compress - 388 : improve stream performance with wrapped buffers,compress - 382 and compress - 386 - - break out unit tests ; add memory limit for xz .,"compress - 382 and compress - 386 - - take 3 , create static memorylimit and remove new ctors .",compress - 394 zip 2 . 0 is required when deflate is used,'long' literal ending with lowercase 'l' instead of 'l',fix writing of multibyte name entries,compress - 459 use zipencoding consistently,improve docs,make sonar less unhappy,compress - 271 verify block checksums,tweaks,bytebuffer looks convenient but is slow ( manual method is 50 % faster ),avoid copying data,serial uid needed,avoid some resource leak warnings,avoid some resource leak warnings,avoid some resource leak warnings,suppress false positive resource not closed warning,"use builder pattern for lz77 to simplify addition of optional parameters also : * use ""back - reference"" consistently in public api * make maxbackreferencelength default to minbackreferencelength for silly values * make parameter builder public for snappy and lz4 this change is here so people will be able to use createparameterbuilder ( ) . tunedforspeed ( ) . build ( ) in the future .","allow lz77 algorithm to be tuned nicelen and maxcandidates are used in the same way as zlib's deflate algorithm . the configured values roughly correspond to zlib's compression levels 5 ( tunedforspeed ) , 7 ( default ) and 9 ( tunedforcompressionratio ) .",allow lz77 tuning in framed snappy / lz4 streams as well,"cpio crc overflow resolved for large files when unpacking a cpio file containing a large file the crc check will overflow and throw an ioexception ( ""crc error . . . "" ) . did not find a nice wa to test this since it requires a very lasrge input file .",ensure cpio only uses the least - significant 32bit of crc https : / / people . freebsd . org / ~ kientzle / libarchive / man / cpio . 5 . txt > the crc format is identical to the new ascii format described in the previous section except that the magic field is set to ``070702'' and the check field is set to the sum of all bytes in the file data . this sum is computed treating all bytes as unsigned values and using unsigned arithmetic . only the least - significant 32 bits of the sum are stored .,misleading test name,add lazy matching to lz77 compressors,actually use 4mb when you say 4mb,cosmetics,"don't use zero - filled arrays in tests , they mask a bug",fix calculation of self - copy boundaries when expanding back - references,reduce gc pressure by avoiding file ( in | out ) putstreams,"compress - 385 , first draft","compress - 385 , add archivestreamfactory ; undo boneheaded release - notes . txt fiasco .","compress - 385 , flip jar / zip back to where they belong",compress - 387,"compress - 385 some tweaks to tim's code , allow detection of 7z closes #18",compress - 387 record changes closes #19,compress - 362 fix last remaining try - with - resources candidate,compress - 387 tweak,compress - 388 : fix concurrent reads performance,"compress - 382 and compress - 386 - - take 4 , clean up and allow for overflow via longs .","compress - 382 and compress - 386 - - hard reset to expunge static parameter proposal . updated memorylimitexception to include cause when it exists . updated lzwinputstream to calculate estimated memory on maxtablesize * 6 to account for int [ ] and byte [ ] , byte [ ] .",merge hard reset - - move from other change list . . . ugh,compress - 389 only increment loc when anything has been read,compress - 388 go back to unsetting adddummy,compress - 390 : expose stream offsets and size,add missing default serialversionuid .,no need to nest in an else block .,no need to nest in an else block .,add missing ' @ override' annotations .,unnecessary casts .,[ compress - 392 ] add brotli decoder based on the google brotli library .,[ compress - 392 ] add brotli decoder based on the google brotli library .,[ compress - 392 ] add brotli decoder based on the google brotli library . add missing ' @ override' annotations,[ compress - 392 ] add brotli decoder based on the google brotli library . use final .,fix variable name,compress - 392 the semi - mandatory bla . tar test,compress - 392 tweaks,compress - 392 make test for brotli check for the library itself,compress - 391 : allow alignment on zip content,compress - 393 don't try to invoke lzmaoutputstream#flush,"avoid returning 0 from read ( b , off , len ) while debugging what seemed to be a bug inside the compress antlib it looks as if bufferedinputstream would translate a 0 return value into eof .",compress - 391 implement padding as zipextrafield class,deal with existing paddingextrafields when calculating the alignment,"readfully's return value is useless , it throws an exception at eof",make sonar less unhappy,compress - 391 : persist alignment request,compress - 391 some tweaks,pmd findings,findbugs findings,"adapt zip64supportit to #10 when we added zip64 support we excluded the extra field from the central directory entry if it turned out to be superfluous - even with zip64model . always . the pr #10 introduced with compress 1 . 11 changes this to make always mean ""always"" , but we forgot to adapt this test . unfortunately nobody has run the its in more than fourteen months . many thanks to bruno p . kinoshita for finding this .",simplify code a little,"compress - 394 adapt test , deflate requires version 2 . 0","compress - 394 / 395 use same ""version needed to extract"" in lfh and cdh . . . and skip data descriptor when copying raw entries","compress - 405 create fixed length block outputstream / writeablebytechannel this commit provides a new class that is an outputstream and writablebytechannel , and which supports writing to a destination output stream or byte channel in fixed size blocks . internally , all writes are made using nio . if the destination is a fileoutputstream the existing channel is used . other outputstreams are wrapped with a custom channel implementation which does not attempt to split writes into chunks . if the target channel fails to write the entire buffer in a single call , an exception is thrown , incoming data is accumulated in a bytebuffer until a complete block is ready , then written to the target . if writablebytechannel : : write ( bytebuffer ) method is called , the code will attempt to avoid copying data into the buffer if the buffer is empty , and a complete block is available . the class and unittest are in compress / utils . this is a minor change - thus the version number for the package should be increated to 1 . 15 . 0 . signed - off - by : simon spero < sesuncedu @ gmail . com >","compress - 407 validate block and record sizes require block size > = 0 that is multiple of 512 bytes . use block size of 512 if one is not given . require record size of 512 bytes . deprecate constructors taking recordsize as parameter modify tests to check for enforcement of record size = = 512 modify tests to check for correct overall length for different block sizes including pax default , ustar default , and unspecified . signed - off - by : simon spero < sesuncedu @ gmail . com > ( cherry picked from commit d754d89 ) signed - off - by : simon spero < sesuncedu @ gmail . com >",add - some - unit - tests added some unit tests to increase code coverage .,redoing more buffer stuff signed - off - by : simon spero < sesuncedu @ gmail . com > ( cherry picked from commit 330c8b3 ) signed - off - by : simon spero < sesuncedu @ gmail . com >,remove redundant super - interface,add - some - unit - tests minor variable renaming .,compress - 412 nullpointerexception defect in checksumcalculatinginputstream#getvalue ( ) fixed .,add - some - unit - tests added additional unit tests .,"compress - 410 remove non - nio character set encoders . as a special case , the utf - 8 encoder will replace malformed / unmappable input with ' ? ' . this behavior is required for compatibility with existing behavior . signed - off - by : simon spero < sesuncedu @ gmail . com > ( cherry picked from commit 0d41ac4 ) signed - off - by : simon spero < sesuncedu @ gmail . com >","compress - 410 remove non - nio character set encoders . as a special case , the utf - 8 encoder will replace malformed / unmappable input with ' ? ' . this behavior is required for compatibility with existing behavior . signed - off - by : simon spero < sesuncedu @ gmail . com > ( cherry picked from commit 1987719 ) signed - off - by : simon spero < sesuncedu @ gmail . com >",reformulate test,compress - 411 ensure we really set the most sig byte when length is 8,compress - 411 math . abs is dangerous,add an extra sanity check,compress - 411 actually use formatlongbinary,compress - 411 clearer formulation of the same test,"do better estimating of required buffer size for character encoding . if an unencodable character is found that requires output buffer expansion , scan buffer for all such characters , and attempt to expand buffer only once . signed - off - by : simon spero < sesuncedu @ gmail . com > ( cherry picked from commit aa30e21 ) signed - off - by : simon spero < sesuncedu @ gmail . com >","test that ebcidic encoding is supported ( making sure "" % uxxxx"" replacement strings don't use ascii encodings ) signed - off - by : simon spero < sesuncedu @ gmail . com > ( cherry picked from commit f1ec715 ) signed - off - by : simon spero < sesuncedu @ gmail . com >",remove methods and change test + throw to assert to please the coveralls signed - off - by : simon spero < sesuncedu @ gmail . com >,compress - 407 tweaks,make sonar less unhappy,fix issues detected by sonar,looks like sonar false positives to me,silence sonar where we intentionally break its rules,random coveralls bait . signed - off - by : simon spero < sesuncedu @ gmail . com >,increase test coverage signed - off - by : simon spero < sesuncedu @ gmail . com >,avoid npe when running against pre - release xz's ( which are by definition not 1 . 4 ) signed - off - by : simon spero < sesuncedu @ gmail . com >,slight speed up by avoiding writing to disk signed - off - by : simon spero < sesuncedu @ gmail . com >,slight test speed up by avoiding more writing to disk signed - off - by : simon spero < sesuncedu @ gmail . com >,compress - 400 : squash commit of compress - 400 - redux . add support for extra pax headers ( local and global ) . signed - off - by : simon spero < sesuncedu @ gmail . com >,compress - 400 whitespace,add - additional - unit - tests added unit tests to increase coverage .,[ compress - 413 ] travis build redundantly repeats compilation and tests redundantly #43 . patch applied except removal of oracle 7 and 8 from travis build . closes #43 .,"[ compress - 416 ] tests failing under jdk 9 : one reflection issue , one change to zipentry related issue . example failure from simon in jira , turned into a standalone test by me .",compress - 416 add signed 32bit int constructor and accessor to ziplong signed - off - by : simon spero < sesuncedu @ gmail . com >,"compress - 416 use signed integers for extended timestamps , per spec signed - off - by : simon spero < sesuncedu @ gmail . com >",compress - 416 cosmetics,adjust to java8 vs java9 differences in timezones ! = pacific,compress - 416 disable powermock test on java9,mostly cosmetic changes,move methods around,test fails when strong crypto is installed,"implement clone the way it is supposed to yes , `cloneable` is broken , i know . `asiextrafield` is not final , so in theory subclasses may exist that override `clone` . by not calling `super . clone ( ) ` we would no longer populate the subclass' fields properly .",eliminate dead store,don't modify method parameters,make sonar less unhappy,rename hascharset to charsetaccessor ( until someone comes up with a better name before 1 . 15 . ),compress - 417 ignore devmajor / minor unless entry is a chr or blk device,whitespace,compress - 417 add test,"missing test case for octal to binary conversion in order to ensure that there is at least one test that will enter the octal string conversion , we added a test that for value = long . max \ value with an insufficient small length of 8 for the buffer . this will check that the value can not be converted into an octal and throw an exception with an appropriate message which we check . this missing test case was an outcome of our mutation testing analysis performed on your system .",fix whitespace - closes #50,add - small - code - improvements added small code improvements .,fix typo,let parsename stop at first nul fixes compress - 421,add test to verify parsename stops at first nul,preparations for compress - 409,whitespace,compress - 409 remove internal buffering from tararchiveoutputstream,compress - 423 - add zstandard decompression support using zstd - jni,compress - 423 small fixes closes #55,compress - 423 it's zstandard not zstandard,compress - 425 add auto - detection of zstandard inputs,provide information about presence of unicode name and comment in ziparchiveentry,compress - 430 : synchronize iteration of synchronized list,expose source of name / comment field value via dedicated methods,compress - 432 make sure code doesn't get stuck in infinite loop,compress - 435 replaces instanceof checks with a type marker in lz77 support code . submitted - by : beluga behr,"use the more conventional ""zstd"" as abbreviation of zstandard",add write support for zstandard,"compress - 424 add array bounds checks , detect corrupted input",change bounds check to greater - equals to avoid arithmetic in loops,improve error message if an 3rd party library is missing,compress - 380 initial patch by christian marquez grabia,compress - 380 add license headers,compress - 380 change package name,compress - 435 bring back eod class for backwards compatibility,compress - 380 add testcase for deflat64 support based on an archive kindly provided by dawid weiss,compress - 380 make defalt64inputstream a compressorinputstream,compress - 380 deflate64compressorinputstream#available promised too much,pmd is unhappy,according to winzip xz now is a zip compression method as well,compress - 380 add deflate64 support to ziparchiveinputstream,add deflate64 support to compressorstreamfactory .,compress - 380 state is never null,compress - 380 ensure end if stream is detected properly,compress - 380 document eofexception and add a test,fix indentation,compress - 380 allow underlying stream to outlive huffmandecoder,compress - 380 support data descriptors with enhanced deflated,revert change to imports,compress - 429 also set namesource from within stream,compress - 429 tests,an example failing deflate64 zip file,compress - 429 set namesource to extra field even if names match,compress - 429 the reason for the name check no longer exists it used to be there to avoid unnecessary updates of zipfile's map of entry name = > entry but the handling in zipfile has been changed to only add entries after all fields have been resolved in later revisions .,compress - 380 - 1 is certainly a legal value for a byte,license header and whitespace,move a few files around closes #58,compress - 380 ensure reading of stored block stats at byte boundary,compress - 38ß block length is an unsigned 32bit int in c code,compress - 380 directly read uncompressed data from the underlying stream,the exception is not thrown .,the exception is not thrown .,use try - with - resources .,compress - 438 buffer bounded streams in zipfile for better performance,10 % speed improvements and decreased memory allocation rate in deflate64,whitespace,compress - 437 add read - only deflate64 support to 7z,compress - 436 sanity check compressed size is known for bzip etc,compress - 441 simplify code for zlib dummy byte workarounds,compress - 441 tweaks by dawid weiss closes #60,modifier 'private' is redundant for enum constructors .,modifier 'static' is redundant for enum constructors .,if statement can be simplified .,if statement can be simplified .,local variable is redundant .,there is general exception 'ioexception' in the throws list already .,"explicit manual boxing is unnecessary under java 5 and newer , and can be safely removed .",add braces for the else block .,revert to the original logic .,explicit tests for new bitinputstream methods,reading from the cache doesn't need to throw an exception,make sonarqube less unhappy,whitespace,remove magic value,slightly reduce memory pressure,rename variable to match sonarqube's expectations,make pmd less unhappy,optionally preserve the drive letter on windows,whitespace,allow preserveabsolutepath to be final,this is what you get for writing tests you can't run : - ),and another trivial error inside the windows - only test,use https in javadoc links where possible,compress - 446 fix resource leak in parallelscatterzipcreator#writeto .,whitespace,deprecate charset constants superseded by java 7,use ioutils . skip,ensure all skip call go through ioutils . skip,compress - 447 turn arrayindexoutofboundsexceptions into zipexceptions,whitespace,compress - 445 provide statistics when uncompressing patch by andreas beeker,compress - 445 cosmetics,compress - 445 try to get compressed count for all supported methods,compress - 445 refactor statistics test,compress - 445 can't use decoder after stream has been exhausted,compress - 445 make zipfile return statistics for stored entries,compress - 445 test cases for the remaining zip methods,compress - 445 fix stats for stored entries in ziparchiveinputstream,explodinginputstream doesn't close nested stream,compress - 445 compressed size must include size of trees for implode,compress - 118 first cut at a high - level api for archive creation,"channel - arg version shouldn't close the channel , owned by caller",entry names of directories should end with slashes,cmpress - 118 make 7z creator api public,compress - 118 use correct overload when using ziparchiveinputstream,compress - 118 provide a high - level api for expanding archives,crude attempt for adding a pax exam test,compress - 443 use native container and reference uri for bundle,compress - 445 make most compressorinputs implement inputstatistics the sole exception is pack200 which is kind of special anyway,compress - 118 provide a more fluent archiving interface,make code compile on java7,compress - 118 add projection operation,compress - 118 should have specified type parameter,compress - 118 and one more missing generic,compress - 118 simplify code,comress - 118 inner class can be static,compress - 118 extract factory methods from filetoarchivesink,compress - 118 make source a first - class abstraction,compress - 118 allow generic steps to be used,compress - 118 remove trivial factory method,compress - 118 add archuve expansion api,compress - 118 make listing just another sink for expanding,compress - 445 provide statistics for 7z as well,compress - 443 provide a custom inputstream for special skip problems,compress - 451 reject 0 buffersize in ioutils . copy,add 7z support to lister cli class,use arrays . copyof,add char [ ] constructors to sevenzfile,whitespace,findbugs doesn't like the class shadowing its superclass' name,"avoid ""new file * putstream"" constructor",add another constructor overload without password,reduce api surface by removing filter from signatures,"remove more complex examples package , move remaining example code",better check result of mkdirs,compress - 452 use password - less constructor in test,unit tests for archiver,add tests for expander,typo,don't leak resources,add test for path sanity check,compress - 453 improve exception message,compress - 453 replace while loop with equivalent arrays . fill jmh benchmarks don't show any significant difference between the two versions .,compress - 454 search for stored data descriptor stopped too soon,fix edge case vulnerability detected by @ didierloiseau while this allows a path traversal attack it can only be exploited in a special edge case .,getcanonicalpath may return a path ending in a / already,compress - 457 improve resource cleanup in close ( ) implementations,whitespace changes,compress - 455 handle apk signing block,whitespace,"fix reading of multibyte name entries this fixes compress - 459 by using the name number of bytes from the field in the stream instead of relying on the assumption that each character is exactly one byte , which isn't true for utf - 8 , utf - 16 or other multi - byte character encodings .",whitespace,compress - 459 fix writing of multibyte names and add a test as proof,compress - 459 no reason to encode the name twice this reverts commit c8ee9f781900f874b075433141de779723b3e110 .,"allow specifying zstandard compression level zstdcompressoroutputstream allows to compress data using zstandard , but the default compression level of 3 is hard - coded . programs that wish to use a different compression level must reimplement zstdcompressoroutputstream . i suggest we add a constructor that takes a compression level and passes it to `new zstdoutputstream ( . . . ) ` .",compress - 460 rudimentary javadocs and tests closes #68,verify the compressor streams really mean eof when they say so,ensure archive streams really mean eof if they say so,compress - 463 throw exception when detecting a truncated stored entry,compress - 462 can't read from ar without opening an entry,"suppress ""possible heap pollution"" warning",make sonar less unhappy,correctly set hasco . . levelchanged with repeated setlevel calls see ant bug https : / / bz . apache . org / bugzilla / show bug . cgi ? id = 62686,make lister optionally use zipfile,use createtempdirectory rather than custom implementation closes #70,compress - 466 extract logic that calculates data offset in zipfile,compress - 466 mark stream as contiguous when reading zip's cd,compress - 466 fill namemap outside of the loop parsing lfhs,compress - 466 allow zipfile to not parse local file headers,make sonar less unhappy,compress - 469 add lenient flag that allows accepting some broken tars,this was supposed to be public,use try - with - resources properly,initial version of an immutable configuration interface .,initial ( yet incomplete ) implementation of combinedconfigurationbuilder ( which is intended to replace defaultconfigurationbuilder ) .,[ configuration - 518 ] reworked configurationinterpolator class .,[ configuration - 518 ] added set methods to abstractconfiguration to manipulate the lookup objects of the current configurationinterpolator .,combinedconfigurationbuilder now creates child builders at a later stage . this makes it possible to enable enhanced interpolation in the definition configuration .,added new combinedreloadingcontroller class .,made combinedconfigurationbuilder more extensible .,added a specialized combined configuration builder with reloading support .,"made handling of include configurations in propertiesconfiguration complient to filehandler approach . some tests had to be adapted , on test case is currently ignored and has to be fixed later .",fixed a potential npe in defaultreloadingdetectorfactory . the refreshdelay property of the parameters object can now be null .,propertiesconfigurationlayout no longer reacts on reload events . because propertiesconfiguration no longer extends abstractfileconfiguration such events will never be fired .,removed an if condition that was needed temporarily while reworking propertiesconfiguration .,reworked databaseconfiguration . a template approach is now used for executing sql operations . this reduces code duplication .,made databaseconfiguration compatible with the builder approach . there are now set methods for the properties defining the database structures the configuration operates on . the values of these properties can also be queried which was requested by [ configuration - 535 ] .,"integrated listdelimiterhandler with xmlconfiguration . rather than calling static methods of propertyconverter , the listdelimiterhandler is now used to escape and to split property values .",integrated listdelimiterhandler with iniconfiguration . there was a bug that list delimiter characters in property values were not correctly escaped when saving an iniconfiguration . for this problem test cases were added to verify that it is fixed after this change .,integrated listdelimiterhandler with databaseconfiguration .,"added a method to filelocatorutils for obtaining a fully initialized filelocator . there are different ways to specify the file to be loaded depending on the initialized fields of a filelocator . if a file can be successfully located based on this information , it makes sense to populate all the corresponding member fields in a consistent way to point to this file .",backport configuration - 500 from r1382310 .,reworked configurationnodeiteratorattribute to use a nodehandler . attributes can now also be processed with the help of a nodehandler .,changed listdelimiterhandler . parse ( ) to return an iterable . changed return type from iterator to iterable . this is more flexible . the nodemodel interface expects an iterable to be passed in .,started rework of iniconfiguration to be compatible with immutable nodes . loading the configuration now creates a hierarchy of immutable nodes .,"reworked xmlconfiguration to operate on immutable nodes . the major part of the functionality for loading and saving xml documents is working , but there is still a bunch of tests failing .",trackednodemodel now requires an inmemorynodemodelsupport object . access to the underlying model is now indirect . this caused some adaptations in multiple hierarchical configuration classes . because access to the model is now guarded by the synchronizer the remaining failing test for combinedconfiguration is running now .,reworked xmlbeandeclaration to work with new hierarchical configurations . the can now deal with arbitrary node types for which a node handler is available .,set correct generic type parameters in combinedconfigurationbuilder . a classcastexception was thrown in the tests because results of configurationsat ( ) were cast to subnodeconfigurations . the definition configuration can now have an arbitrary node type .,adapted combinedconfigurationbuilder to changes in interface . registrations of event listeners have been adapted .,adapted propertiesconfigurationlayout to new event mechanism .,"fixed findbugs warning ""obl unsatisfied obligation"" . the result set may not be closed . now the official method for opening a result is used which stores the result set in an internal field and ensures that it gets closed later .","[ configuration - 644 ] fix for a duplicated header comment . under certain circumstances , the header comment managed by propertiesconfigurationlayout gets duplicated . this commit fixes this problem . thanks to andrew demaria for the patch .","configuration - 687 : removed duplicate builders . the builders for the child configurations of a combined configuration are no longer created each time the managed configuration is created ; rather , they are created once initially . this resolves the memory leak that the list of child builders grows more and more .",added connecttoreloadingcontroller ( ) to basicconfigurationbuilder . this method allows enabling reloading facilities to an arbitrary configuration builder .,"made methods for adding and removing event listeners final . sub classes need to invoke these methods during construction time - and a constructor should not invoke non - final methods . also , it really makes sense to have these methods final as the default implementation should be sufficient and not changed by derived classes .",reloadingfilebasedconfigurationbuilder now uses the connecttoreloadingcontroller ( ) method . this functionality from the base class can be used directly .,xmlconfiguration no longer implements the entityresolver interface . the resolveentity ( ) method has already been deprecated in the 1 . x version . entities are now exclusively resolved by an external resolver .,xmlconfiguration no longer implements the entityregistry interface . it is now expected that a fully initialized entityresolver is passed to the initialization parameters of a configuration builder .,"added a test case for saving to a newly created file . it is tested whether the allowfailoninit flag is evaluated , so that a configuration can be created and associated with a not yet existing file . later on , the configuration is saved to this file .",renamed member fields to be compliant with java conventions .,combinedconfigurationbuilder now overrides the configure ( ) method . the return type is adapted to allow convenient method chaining .,reloadingcombinedconfigurationbuilder now overrides the configure ( ) method . the return type is adapted to allow convenient method chaining .,"renamed tag for multifileconfigurationbuilder . when including a multi - file configuration into a combinedconfigurationbuilder the tag name ""multixml"" was used . as multifileconfigurationbuilder is no longer limited to xml configuration files , the tag name ""multifile"" is more appropriate .",adapted return type of multifileconfigurationbuilder . configure ( ) . this makes method chaining easier . the test class was updated correspondingly .,a filelocator object can now be stored in a map and created from there . the goal is to simplify the definition of parameters for file - based configurations in typical ioc frameworks .,"filehandler can now be initialized from a map . again , the goal is to simplify the creation of parameters objects for file - based configurations from within ioc frameworks .",filebasedbuilderparametersimpl can not be initialized from a map . this simplifies the creation of instances in ioc frameworks .,filebasedbuilderparametersimpl now throws iae for null input . this is compliant to the rest of the library .,"changed the key for storing file - based parameters in a parameters map . use a more simple key which makes it easier to create parameter maps manually , e . g . in a spring configuration file .",reloadingevent now extends event . the event mechanism used by reloadingcontroller is going to be ported to the new mechanism based on event types .,"renamed type parameter . the parameter t is already used by the class . therefore , e was chosen for the event type .",reloadingcontroller now supports the new event style . the old methods for adding and removing event listeners have been deprecated . they will be removed when all references have been replaced .,adapted reloadingbuildersupportlistener to changes on reloadingcontroller . the new event mechanism is used to register the listener .,removed obsolete reloadinglistener interface . the interface is now replaced by the generic eventlistener interface .,reworked configurationevent to conform to the new event mechanism . the class now extends event and can handle an eventtype . the old numeric type is still stored ; it will be removed when the refactoring is complete .,added new event type constants for basic update events . a new test class was added to check whether the types are correctly set up .,"added methods to eventlistenerlist for querying registered event listeners . this is mainly useful in unit tests , but also supports advanced iteration over event listeners .",modified eventsource interface . new methods for adding and removing event listeners were added based on the event type . the existing methods were deperecated . this commit breaks the build because not all adaptations have been made .,implemented methods for new event handlers in baseeventsource . adapted event handling in abstractconfiguration and made the base test for event handling run again .,added an alternative method for querying event listeners . the new method is more generic and allows filtering by an event type . the old method for querying configuration listeners has been deprecated .,fixed a failing test case for propertiesconfiguration related to events . also fixed some warnings from intellij .,adapted abstract base test class for plist configuration events .,added event type constants for hierarchical configuration events . the existing numeric constants in abstracthierarchicalconfiguration have been ( temporarily ) deprecated before they are eventually removed .,hierarchical configurations now generate events of the new type . the test class for hierarchical configuration events now runs successfully .,"testxmlconfigurationevents now extends testhierarchicalconfigurationevents . xmlconfiguration is a hierarchical configuration class . therefore , it makes sense to check for hierarchical events as well .",fixed test class for compositeconfiguration .,reworked combinedconfiguration regarding event handling . the new methods for registering event handlers and firing events are now used .,adapted test class to changes on event handling .,extended eventlistenerlist to query registration information . a method was added which returns an unmodifiable list with event listener registration information .,added a clear ( ) method to eventlistenerlist .,added an addall ( ) method to eventlistenerlist . this method copies the content of one list with event listeners to another list .,reworked event listener registration in basicconfigurationbuilder . new methods have been added to register listeners of the new type . the old methods for adding configuration listeners have been deprecated .,fixed a failing test case related to event listener registration .,reworked handling of event listeners in multifileconfigurationbuilder . the methods for registering event listeners of the new type are now overridden .,adapted the auto - save mechanism of file - based configurations . the specialized listener implementing the auto - save mechanism now implements the new event listener interface .,reworked test class for baseeventsource .,added a cleareventlisteners ( ) method to baseeventsource . this method replaces the clearconfigurationlisteners ( ) method .,"added a method to baseeventsource to copy event listener registrations . this is useful if event listeners registered for one object should be active for another event source , too .",reworked handling of event listeners in dynamiccombinedconfiguration .,reworked handling of event listeners in patternsubtreeconfigurationwrapper .,adapted test case to new event listener mechanism .,adapted test case to new event listener mechanism .,adapted test case to new event listener mechanism .,adapted test case to new event listener mechanism .,removed obsolete addconfigurationlistener ( ) method from eventsource . this caused some adaptations in builderconfigurationwrapperfactory . here the way how an eventsource implementation is provided for a configuration mock had to be reworked .,removed further obsolete methods in baseeventsource .,fixed a compilation problem with java 1 . 6 . simplified a method using complex generic type arguments .,"reworked configurationerrorevent to support the new event mechanism . new event types are defined for error events . the class no longer extends configurationevent , but defines separate properties .",removed obsolete classes related to configuration listeners . some functionality related to error listeners has been deprecated . this is going to be reworked .,added abstracteventlistenertestimpl as base class for test event listeners . this class defines basic functionlity for testing whether events of a specific type have been received .,eventlistenerlist now provides a method for querying registrations of a super type . with this method it is possible to find all event listeners derived from a given type .,reworked clearing of error listeners . baseeventsource . clearerrorlisteners ( ) now removes all event listener registrations of an event type derived from an error event . the list with deprecated error listeners is no longer used for this purpose .,added a fireerror ( ) method compatible with the new listener mechanism . the method calls regular eventlisteners supporting the current error event type .,"updated test class for baseeventsource . removed tests for deprecated functionality , renamed test methods , fixed some warnings .",adapted configurationutils . enableruntimeexceptions ( ) . an event listener of the new type is now registered to generated runtime exceptions for errors occurring on property access .,"fixed some warnings , e . g . regarding raw type access .",adapted adderrorloglistener ( ) to new event listener mechanism .,adapted databaseconfiguration to new event listener mechanism . error events are now generated using the new fireerror ( ) method provided by baseeventsource .,adapted jndiconfiguration to new event listener mechanism . error events are now generated using the new fireerror ( ) method provided by baseeventsource .,removed methods for adding error listeners from basicconfigurationbuilder . error events are now propagated via regular event listeners .,"removed methods for adding and removing error listeners . instead , addeventlistener ( ) and removeeventlistener ( ) have been overridden .",removed obsolete methods from eventsource and baseeventsource .,"changed return type of add / removeconfigurationlistener ( ) . the methods no longer support method chaining ( this is difficult to implement over the hierarchy of builders anyway ) . instead , they use the same return values as the methods from eventsource .","simplified builderconfigurationwrapperfactory . because the methods in configuration builders now have the same return values as the corresponding event source methods , no conversion of return values is necessary .",added eventlistenerprovider interface . this is a special parameters interface for initializing a configuration builder with information about event listener registrations .,added new eventlistenerparameters class . this is an implementation of the eventlistenerprovider interface providing a convenient api to define the event listeners of a configuration builder . instances of this class can be passed to a builder's configure ( ) method .,"basicconfigurationbuilder now support the eventlistenerprovider interface . if a parameters object passed to the configure ( ) method implements this interface , the listeners it contains are added to the configuration builder .",changed return type of configurationbuilder . removeeventlistener ( ) . the method signature is now in - line with other event listener methods .,configurationbuilder now extends the eventsource interface . this caused some adaptations in basicconfigurationbuilder and derived classes . builderconfigurationwrapperfactory had to be slightly modified again .,reloadingcontroller now implements eventsource . now all sources for events in commons configuration can be accessed in a uniform way .,changed test fields in testconstantlookup . the test class now defines its own constants which are read by test cases rather than relying on fields from other classes .,"removed unused fields in abstractconfiguration . most of them are event type constants which are replaced by new constants in event classes . javadoc comments referring to these fields have been updated , too .",removed unused constants from hierarchical configuration classes . these are constants related to event types which have been replaced by corresponding fields in configurationevent .,prevented testxmlpropertiesconfiguration to access the internet . a test case used to load a configuration file which references a dtd . this caused an internet access . now an entity resolver is set to avoid this .,deprecated methods for handling configuration listeners . the goal is that basicconfigurationbuilder only provides the methods from the eventsource interface for handling event listeners . this makes the api more stringent and reduces confusion . because of the filtering by event types it is no problem to add listeners to managed configurations which they do not support . currently some tests are failing and have been @ ignored .,moved fetchsupereventtypes ( ) method to eventtype . it makes sense to have this useful utility method at a central place . the new version has the advantage that it is null - safe .,added an isinstanceof ( ) method to eventtype . this method can be used to check whether there is an instanceof relation between two given event types .,fixed failing test cases . multifileconfigurationbuilder now keeps a separate list of the event listeners which have to be passed to managed builders . it is filled with event listeners not related to builder events .,added a protected method for firing builder events . this allows derived builder classes to fire their own or adapted events .,fixed some problems with the handling of events from managed builders . multifileconfigurationbuilder was only handling events of type reset . now all builder event types are supported and are propagated to event listeners registered at the builder .,"removed builder optional literal from eventsourcesupport . as configurationbuilder extends eventsource and now all listeners are registered via the event source methods , all configuration builders provide a valid eventsource implementation . thus , the code in builderconfigurationwrapperfactory could be simplified .","basicconfigurationbuilder now removes event listeners when the result is reset . the now obsolete configuration object should no longer generate events , even if it is still referenced and accessed .",replaced event listener registration methods in test class .,replaced event listener registration methods in filebasedconfigurationbuilder . switched from the deprecated methods to the methods from the eventsource interface .,fixed raw types warnings .,do not call setrotenode ( ) directly . the method is going to be removed . the root note can be set via the model .,removed a call to setrootnode ( ) .,removed a call to setrootnode ( ) .,removed a call to setrootnode ( ) .,"removed calls to getrootnode ( ) in abstracthierarchicalconfiguration . using this method in this way can lead to subtile race conditions . a node model may replace its root node at any time . therefore , it should only be accessed via the model's node handler . this is always in sync with the root node and allows thread - safe access .",removed calls to getrootnode ( ) in basehierarchicalconfiguration .,removed calls to getrootnode ( ) in iniconfiguration .,removed calls to getrootnode ( ) in xmlconfiguration and its test class .,removed calls to getrootnode ( ) from several test classes .,removed calls to getrootnode ( ) from test classes for builders .,removed calls to getrootnode ( ) from test class for hierarchical configuration events .,removed calls to getrootnode ( ) from propertylistconfiguration .,removed calls to getrootnode ( ) from xmlpropertylistconfiguration .,removed calls to getrootnode ( ) from test classes for combiners .,removed getrootnode ( ) method from hierarchicalconfiguration interface . all remaining ( unused ) implementations are dropped .,[ configuration - 490 ] don't call non - final method in constructor .,invalid @ suppresswarnings syntax,use non - deprecated assert class,use level . xxxx rather than deprecated priority . xxxx,raw types,missing svnuid,created new configurations class . this class contains a bunch of convenience methods that simplify the creation of concrete configuration classes . it can be used when no complex initialization is required and default settings are appropriate .,"[ configuration - 590 ] removed implements serializable clause . unnecessary serialversionuid fields were removed , too .",added synchronization to append ( ) and copy ( ) methods . the source configuration is locked to avoid potential concurrent modification exceptions while iterating over the key set .,"[ configuration - 570 ] alternative implementation of systemconfiguration . getkeys ( ) . in order to avoid concurrentmodificationexceptions when iterating over the keys of a systemconfiguration , the iterator returned for the keys is now a snapshot .",[ configuration - 582 ] fixed a stringindexoutofboundsexception . lines in properties files containing only whitespace are now handled correctly when extracting comments .,make tests run again . changed fully - qualified class names in source and test files .,added some test helper methods related to the processing of configuration keys . these methods allow the removal of all references to [ collections ] in test classes .,removed references to [ collections ] from test classes .,[ configuration - 427 ] support saving of arrays . arrays added to a xmlpropertylistconfiguration are now handled in a special way so that their storage format is adapted . thanks to ho - jin lee for the solution proposal .,added nodematcher interface . a nodematcher allows for advanced filtering of the child nodes of a given parent node .,extended nodehandler interface by advanced query methods . there are now new methods for obtaining all child nodes of a parent node which are matched by a given nodematcher .,implemented the new methods of the nodehandler interface .,added missing @ override annotations .,added a default matcher implementation for node names . the new implementation performs an exact match on a node name . it is defined as a constant in an enumeration class because a single instance can be shared between arbitrary components .,defaultexpressionengine now supports a node name matcher . by providing a custom matcher it is possible to influence the search operations performed by the expression engine .,added missing @ override annotations .,removed duplicate code . the method for querying children by name can be implemented on top of the generic getmatchingchildren ( ) method . getchildrencount ( ) can be handled in a similar way .,added a node name matcher which ignores case .,added a test case demonstrating the use of the equalsignorecase matcher .,added configurationdecoder interface . this interface will be used when querying encoded strings from a configuration file .,"added methods for querying encoded strings to immutableconfiguration . with these methods it is possible to query the values of configuration properties stored in encoded form . before they are handed to the calling application , the values are passed to a configurationdecoder .",implemented getencodedstring ( ) which expects a configurationdecoder .,implemented getencodedstring ( ) using a default decoder . a property for the default decoder was added to abstractconfiguration .,extended basicbuilderproperties by a configurationdecoder property . it is now possible to set the decoder property via initialization parameters of a configuration builder .,the configuration decoder is now taken into account when copying basic properties . a sub combined configuration builder inherits the decoder property from its parent .,[ configuration - 564 ] properties without a value and separator are now supported . the regular expression was slightly modified to support property declarations that do not have a separator . such keys are now added to the configuration without a value .,"[ configuration - 200 ] extended immutableconfiguration interface . a new size ( ) method was added . currently , only a dummy implementation exists .",[ configuration - 200 ] implemented synchronization for size ( ) method . abstractconfiguration now implements size ( ) taking proper synchronization into account . the actual work has to be done by sizeinternal ( ) which is not yet implemented .,[ configuration - 200 ] added a default implementation for sizeinternal ( ) . this implementation calculates the size of the configuration based on the iterator returned by getkeys ( ) .,[ configuration - 200 ] added tests for size ( ) to base test class .,[ configuration - 200 ] provided a special size ( ) implementation for mapconfiguration .,[ configuration - 200 ] provided a specialized size ( ) implementation for baseconfiguration .,[ configuration - 200 ] provided a specialized size ( ) implementation for dynamiccombinedconfiguration .,[ configuration - 200 ] added a specialized size ( ) implementation for hierarchical configurations .,missing @ override annotations .,checkstyle ; removed unused imports .,checkstyle ; e . g . unused imports .,checkstyle : missing space before parenthesis .,"findbugs error ""is2 inconsistent sync"" in combinedconfigurationbuilder . added synchronized keyword to getchildbuilders ( ) method . the remaining unsynchronized access to the sourcedata field is caused by the initresultinstance ( ) method .",removed some unused fields . fixed intellij warning about arrays . aslist ( ) called for a single element .,fixed some warnings . findbugs warnings about unnecessary instance creations ; now auto - boxing is used instead ; var - args methods could be called in a more natural way ; removed two unused fields .,"findbugs error ""dm default encoding"" . this is fixed by setting an explicit encoding used for base64 - encoded binary data .",fixed intellij warnings related to potential npes .,replaced deprecated escapexml ( ) method by escapexml10 ( ) .,fixed another intellij warning related to a potential npe .,made eventtype serializable . this fixes findbugs warnings in configuration event classes regarding non - serializable fields .,"fix for findbugs warning ""rv return value ignored bad practice"" . the return value of file . mkdirs ( ) should not be ignored . we now throw an explicit exception . this also simplifies diagnostics when such an error occurs .",fixed a findbugs warning . don't swallow an exception ; at least log it .,"fixed null checks reported by findbugs . some methods were partly checking for null references , but de facto assuming that parameters are not null . the checks were removed , and the documentation now states that these parameters must not be null .",removed unnecessary null check reported by findbugs .,checkstyle .,fixed some checkstyle and intellij warnings .,"fixed checkstyle warning ""unused import"" . this caused a major diff and reformatting because now fully - qualified exception class names are used in javadoc comments .","fixed checkstyle warning ""unused import"" .",checkstyle,checkstyle . also added a suppression for a false positive warning .,checkstyle : avoid inner assignments .,declared internal class as final to make checkstyle happy .,checkstyle,checkstyle : unused import .,checkstyle : unused import .,checkstyle : order of modifiers .,"fixed checkstyle and intellij warnings . unused import , missing @ return tags , unnecessary static modifier .","checkstyle . unused import , missing @ param tag for type parameter .",checkstyle : unused imports .,made internal helper class final to make checkstyle happy .,javadoc improvements . this happens to fix a checkstyle warning anbout an unused import as well .,checkstyle . unused imports and some formatting issues .,checkstyle : unused import .,formatting demanded by checkstyle .,checkstyle : variable access definition in wrong order .,checkstyle : variable access definition in wrong order .,"checkstyle : missing @ param for type parameter , made inner class final .",checkstyle : magic number .,checkstyle : formatting .,checkstyle : formatting and empty statement . the exception ignored by closesilent ( ) is now at least logged .,checkstyle : placement of {,checkstyle : variable access definition in wrong order .,checkstyle : unused import .,"checkstyle : made class final , missing @ return tag .","fixed some checkstyle warnings , missing @ override annotations .",checkstyle : placement of ' { ' .,checkstyle : missing @ param tag for type parameter ; formatting .,"javadoc improvements , missing @ override annotations .",checkstyle : placement of ' { ' .,javadoc errors : bad use of ' > ' .,"fixed failing test case . immutablenode has been made final ; thus , it can no longer be mocked .",made test more robust . this test failed in the ant build because the were small differences in the external forms of urls . the configuration files behind the urls are now loaded and compared .,fixed a test case that could fail in specific environments . thanks to bruno p . kinoshita for the proposed fix .,"[ configuration - 604 ] changed construction of hierarchical configuration . the conversion of a flat configuration to a hierarchical one now uses copy ( ) rather than append ( ) . this causes a slightly different structure of the resulting configuration . because append ( ) adds new nodes on each invocation the property keys ""x . y . z"" and ""x . y"" processed in this order generates two y child nodes of x . with copy ( ) only a single node is created . this is closer to the original structure of the flat configuration and is less dependent on the order of configuration keys .",[ configuration - 605 ] added unit test class . this is a reworked test class from the original reporter that has been adapted to configuration 2 . it shows that the problem is solved in this version .,[ configuration - 609 ] use the correct file system for include files . the filehandler used for loading include properties dropped some of the properties configured for the builder . this has been fixed .,[ configuration - 608 ] changed return type of configure ( ) method . reloadingfilebasedconfigurationbuilder . configure ( ) now returns the correct builder type so that method chaining is possible without the need to cast the result .,[ configuration - 612 ] changed return type of configuration builders . all configuration builders now return the base interface immutableconfiguration rather than configuration . thanks to jon weygand for the patch .,added new configurationlogger class . this is a very basic abstraction of a logging api . it is used internally by classes of the library to produce logging statements . the idea is that client applications can reference this class without having to deal with a specific logging framework .,replaced logger in abstractconfiguration . the log property in abstractconfiguration is now of type configurationlogger . derived classes have been adapted accordingly .,changed log property in builder parameters . the property is now of type configurationlogger .,catalogresolver now uses a configurationlogger .,exprlookup now uses a configurationlogger .,filesystems now use a configurationlogger .,add missing ' @ override' annotations .,[ configuration - 615 ] adapted constructor of mapconfiguration . merged the change from configuration - 557 from version 1 . 10 to 2 . 0 branch . this allows using mapconfiguration in the same way as in configuration 1 . 7 and earlier .,"[ configuration - 615 ] changed generic types in getlist ( ) method . the default value passed to getlist ( ) is now of type list < ? > rather than list < object > . this change of the signature has been part of the 1 . 10 codebase , but it had not been merged to trunk . the corresponding issue is configuration - 558 .",[ configuration - 618 ] improved exception handling for immutable configurations . the invocation handler now handles invocationtargetexceptions . the cause of the exception is thrown which is the original exception thrown by the wrapped configuration .,"[ configuration - 619 ] extended combinedbuilderparametersimpl . a new flag was introduced which controls the inheritance of builder settings to child configurations . if this flag is true ( which is the default value ) , parameter objects for child configuration builders are initialized with some of the settings of the parent builder .",[ configuration - 619 ] added inheritfrom ( ) method to basicbuilderparameters . this method copies a dedicated subset of properties from a source parameters map into the builder parameters . that way a parameters object can decide itself which properties can be inherited .,formatting .,[ configuration - 619 ] implemented inheritfrom ( ) in combinedbuilderparametersimpl . here some more properties are taken into account .,"[ configuration - 619 ] made some fromparameters ( ) methods more generic . rather than a map < string , object > , the more generic type map < string , ? > can be used .",[ configuration - 619 ] implemented inheritfrom ( ) in filebasedbuilderparametersimpl . here some more properties are taken into account .,[ configuration - 619 ] implemented inheritfrom ( ) in hierarchicalbuilderparametersimpl . here some more properties are taken into account .,[ configuration - 619 ] implemented inheritfrom ( ) in propertiesbuilderparametersimpl . here some more properties are taken into account .,[ configuration - 619 ] implemented inheritfrom ( ) in xmlbuilderparametersimpl . here some more properties are taken into account .,"[ configuration - 619 ] combinedconfigurationbuilder now supports inheritance . if the corresponding flag in the parameters is set , the builder's parameters are inherited by the builders for child configurations . this simplifies the construction of a combinedconfigurationbuilder in cases where the configuration sources to be loaded have similar conventions and requirements .",[ configuration - 621 ] moved configurationlogger class to io package . this breaks a number of cyclic dependencies between packages that were caused by this class .,[ configuration - 622 ] fixed handling of escaped keys in iniconfiguration . write . separator characters contained in keys were duplicated when the configuration was saved .,[ configuration - 624 ] support commons configuration as propertysource in spring,"[ configuration - 624 ] fixed checkstyle violations , updated to latest version of checkstyle - maven - plugin , ensure correct checkstyle configuration is applied in all cases",[ configuration - 624 ] added config factory bean,[ configuration - 624 ] renamed tests to match convention,[ configuration - 624 ] better names,"[ configuration - 626 ] get ( ) now supports array conversions . the method now checks whether the target class of the conversion is an array class . if so , it delegates to an internal method doing an array conversion .",[ configuration - 626 ] do not use getarray ( ) any more . calls in dataconfiguration have been replaced by get ( ) calls .,[ configuration - 626 ] deprecated getarray ( ) method . added a comment that the same functionality is available by the generic get ( ) method in a type - safe way .,merge branch 'arrayinterpolation conf - 633' into trunk,[ configuration - 632 ] better support for interpolation with arrays . variables that reference properties with multiple values are now handled correctly . the getlist ( ) and getstringarray ( ) methods then return all values of the referenced property .,[ configuration - 634 ] reworked createfullyinitializedlocatorfromurl ( ) . after a locate ( ) operation now only properties of a filelocator are set which are undefined . values that had been set explicitly are not changed . this fixes problems with the base path that is evaluated by some location strategies . thanks to raviteja lokineni for the patch .,fixed a javadoc error .,[ configuration - 636 ] changed access to keys when saving a properties configuration . propertiesconfigurationlayout . save ( ) now obtains the keys to be saved from the official getkeys ( ) method . this makes it possible to override getkeys ( ) to change the order of keys in the generated file . thanks to tim lark for the proposed change .,added missing asl headers .,reformatted test classes to match coding conventions .,made defensive copies of arrays . this fixes some findbugs warnings about exposing mutable internal state .,[ configuration - 638 ] removed temporary files in tests . some tests have been rewritten to use junit's temporaryfolder class to prevent that temporary files or folders remain after test exectuion . thanks to ahmet celik for the patch .,[ configuration - 627 ] fixed a failing test case . fluentbeanintrospector in beanutils 1 . 9 . 3 uses a slightly different algorithm to handle property names . this affects properties starting with multiple uppercase letters . this test class is affected as it tries to set the iofactory property .,[ configuration - 640 ] added unescaping for special characters . in java properties files some special characters are always escaped and need to be unescaped on loading . in commons configuration 2 . x this unescaping did not work correctly . this is fixed by this commit which takes the affected special characters into account .,"[ configuration - 641 ] improved exception thrown by load ( ) . xmlconfiguration . load ( ) now checks whether the locator has been correctly initialized . if not , an exception with a helpful message is thrown .","[ configuration - 641 ] improved exception when loading propertiesconfiguration . it is now checked whether the locator has been correctly initialized . if not , an exception with a helpful message is thrown .","[ configuration - 641 ] improved exception when storing xmlpropertylistconfiguration . it is now checked whether the locator has been correctly initialized . if not , an exception with a helpful message is thrown .","[ configuration - 646 ] changed handling of loads in layout . propertiesconfigurationlayout used to remove its event listener registration when a load operation starts and add it again afterwards . this caused problems with the auto - save mechanism because update events were processed by the layout after the listener for auto - save was triggered , resulting in incomplete configuration files . now the listener is not removed , but temporarily disabled .",[ configuration - 648 ] fixed iofactory property . adapted the property name to the requirements of the most recent version of beanutils . added a new unit test to demonstrate the problem . some tests had to be adapted .,"[ configuration - 649 ] improved list handling in xmlconfiguration . list properties defined as single string with a delimiter character now retain their format when the configuration is saved . note that the implemented solution is not perfect , it cannot handle all possible constellations . for instance , for lists defined in a mixed form ( multiple xml elements each of wich defines multiple list values ) cannot be handled and are reformatted on saving .",[ configuration - 647 ] separator for ini files can now be set . iniconfiguration can now be configured to use a custom separator between properties and values when writing an ini file . thanks to vladimir dot martinek at cenarion dot com for the patch .,[ configuration - 653 ] better support for immutable configurations . some utility methods in configurationutils or configurationconverter now provide overloaded methods accepting an immutableconfiguration . this base interface is now also used in checks in propertylistconfiguration and xmlpropertylistconfiguration where possible . thanks to vincent maurin for the patch .,[ configuration - 658 ] add api org . apache . commons . configuration2 . immutableconfiguration . geturi ( string ) .,[ configuration - 659 ] add api org . apache . commons . configuration2 . immutableconfiguration . geturl ( string ) .,[ configuration - 660 ] add tostring ( ) methods here and there to help debugging .,simplify if - else .,let these private ivars be final .,add missing ' @ override' annotations .,[ configuration - 658 ] add api org . apache . commons . configuration2 . dataconfiguration . geturi ( string ) methods .,[ configuration - 660 ] add tostring ( ) methods here and there to help debugging . conform to wacky checkstyle for { } 's .,unnecessary semicolon .,[ configuration - 664 ] add api org . apache . commons . configuration2 . tree . immutablenode . getchildren ( string ) .,[ configuration - 665 ] add org . apache . commons . configuration2 . abstracthierarchicalconfiguration . tostring ( ) .,[ configuration - 665 ] add org . apache . commons . configuration2 . abstracthierarchicalconfiguration . tostring ( ) .,"[ configuration - 666"" ] add convenience ctor configurationruntimeexception ( string , object . . . ) .","[ configuration - 666"" ] add convenience ctor configurationruntimeexception ( string , object . . . ) .",[ configuration - 258 ] support for json and yaml configurations . thanks to the alchemist ( kap4020 at gmail dot com ) for the patch .,"[ configuration - 258 ] some polishing of the original patch . applied formatting rules , removed @ author tags , added missing license headers , removed unused imports and unused private methods .",[ configuration - 258 ] renamed abstractmapbasedconfiguration . the name could be confused with mapconfiguration . added some more comments .,[ configuration - 258 ] improvements on test classes . temporary files are not written ; so there is no need to define an output file .,"[ configuration - 258 ] added copy constructors . like other hierarchical configurations , jsonconfiguration and yamlconfiguration should have a copy constructor .",update tests from apache commons dbcp 1 . 4 to 2 . 2 . 1 and pool from 1 . 6 to 2 . 4 . 2 ( dbcp depends on pool ) . local build ok .,fixes for checkstyle issues . thanks to allon mureinik ( mureinik at gmail dot com ) for the patch .,[ configuration - 671 ] fixed handling of empty sections in iniconfiguration . saving of an iniconfiguration with an empty section caused a npe . the cause was that nodes without children were not detected as section nodes . now a different criterion is used .,"[ configuration - 670 ] reworked subnodeconfiguration . getnodemodel ( ) . the new implementation returns a model object with the correct root node set . a new method , getrootnodemodel ( ) , has been added that simulates the original behavior ; it always returns the model of the top - level hierarchical configuration .",configuration - 686 : json configuration now supports list structures . configurations derived from abstractyamlbasedconfiguration can now handle list structures that contain complex objects as elements .,configuration - 688 : fixed bug related to multiple include files . the locator pointing to the current configuration file was changed when an include file was loaded . this could cause another include file to fail . the locator is now saved and restored after an include file has been processed .,configuration - 690 : exprlookup . getvariables ( ) no longer returns null . the method now returns a copy of the variables managed by this lookup object .,configuration - 691 : handling of non - string expressions in exprlookup . an expression that does not yield a string result no longer causes a classcastexception . the result is now converted to a string .,configuration - 692 : the cause of conversion exceptions is retained . conversionexceptions thrown when accessing properties are caught and rethrown with an improved error message . now the new exception contains the cause of the original one .,configuration - 693 : added conversion to files and paths . propertyconverter now supports conversions to the types file and path . thanks to l dot wolter at his dot de for the patch .,update tests from dbunit 2 . 3 . 0 to 2 . 5 . 4 .,[ configuration - 698 ] add org . apache . commons . configuration2 . mapconfiguration . tostring ( ) .,configuration - 652 : xml namespace attributes are now set correctly . when loading and saving xml configuration files the attributes of the root node are now updated correctly . thanks to claude at xenei dot com for the patch .,configuration - 687 : changes on reloading of combined configurations . the reloading controller of a reloadingcombinedconfigurationbuilder is now created only once on first access . when triggering a reloading check it is important that all child configuration sources are included .,"configuration - 687 : creation of child builders is now lazy . creating the child configuration builders of a combined configuration first breaks interpolation during evaluation of the definition configuration . therefore , the builders are now created when the combined configuration is accessed for the first time , immediately before their managed configuration is accessed .",configuration - 701 : added addconfigurationfirst ( ) method . it is now possible to add configurations with a higher priority as child configurations to a compositeconfiguration . thanks to nerdynick at gmail dot com for the patch .,"configuration - 703 : improved handling of xml : space = ""preserve"" . for tags whose value consists only of whitespace this content is now returned correctly if xml : space is set to ""preserve"" . thanks to pascal essiembre for the patch .",fixed an expression that is not java7 compatible .,fixed some minor checkstyle violations .,[ configuration - 713 ] added support for regex patterns . thanks to lars w for the patch .,[ configuration - 712 ] added a refresh ( ) method to reloading detector . filehandlerreloadingdetector had the problem that the first invocation of the isreloadingrequired ( ) method the file's last - modified date was initialized . so a changed file could only be recognized on a 2nd invocation . now the class offers a dedicated method to initialize the last - modified date from the underlying file . defaultreloadingdetectorfactory was changed to call this method after the detector has been created . so reloading checks are active from the very beginning . thanks to rolland hobbie for the patch .,remove unused throws .,"remove redundant superinterface cloneable for the type basehierarchicalconfiguration , it is already defined by abstracthierarchicalconfiguration < immutablenode > .","remove redundant superinterface cloneable for the type combinedconfiguration , it is already defined by abstracthierarchicalconfiguration < immutablenode > .",statement unnecessarily nested within else clause .,statement unnecessarily nested within else clause .,statement unnecessarily nested within else clause .,[ configuration - 720 ] replace use of deprecated commons lang string substitution code for commons text .,sort members .,rename test method .,[ configuration - 711 ] update apache commons lang from 3 . 7 to 3 . 8 . 1 . use code from apache commons text since it was deprecated in apache commons lang .,remove redundant type arguments .,remove redundant semicolons .,[ configuration - 711 ] update apache commons lang from 3 . 7 to 3 . 8 . 1 . use code from apache commons text since it was deprecated in apache commons lang .,migrate away from deprecated apis in apache commons lang and spring .,the static field listdelimiterhandler . noop transformer should be accessed directly .,remove exceptions not thrown from test method signatures .,update maven - checkstyle - plugin from 2 . 15 to 3 . 0 . 0 and fix some checkstyle issues .,remove useless parens .,remove useless parens .,use java api instead of custom code .,remove useless parens .,remove useless parens .,remove useless parens .,extract constants .,better local var name .,remove useless parens .,sort methods . a private static method does not need to be static .,better param names .,[ configuration - 724 ] add support for commons text 1 . 4 localhost string lookup as a default lookup .,remove useless parens .,remove useless parens .,[ configuration - 715 / 716 ] added alternative iofactory implementation . the new jupiofactory class provides readers and writers for properties files that mimic the behavior of java . util . properties more closely . thanks to patrick schmidt for the patch .,[ configuration - 726 ] add support for commons text 1 . 5 new string lookups as default lookups .,[ configuration - 726 ] add support for commons text 1 . 5 new string lookups as default lookups . looking ahead to commons text 1 . 6 .,depreacte and replace direct use of internal lookups for environment variables and system properties with defaultlooks backed from apache commons text . the const lookup stays as is .,fix compiler warning .,assign and return in one go .,[ configuration - 727 ] org . apache . commons . configuration2 . databaseconfiguration never closes result sets .,[ configuration - 727 ] org . apache . commons . configuration2 . databaseconfiguration never closes result sets and statements .,use try - with - resources .,[ configuration - 728 ] update apache commons text from 1 . 5 to 1 . 6 .,enhanced [ digester - 153 ] by appliyng the patch kindly provided by matt benson,[ digester - 154 ] the digesterbinder is not able to load primitive classes by name,[ digester - 170 ] digester . pop ( string ) throws emptystackexception where api doc says it returns null,"check in the commons digester module , transferred from the sandbox . note : i have omitted the rss 0 . 91 example , for two reasons : - there is some current politics going on around netscape's pulling the dtd from their web site . - it might make some more sense to collaborate with the jetspeed folks on an rss 1 . 0 implementation , if they are interested in it .","digester instance cannot be accessed directly , used the getter instead",added missing @ override annotations,organized import,organized import,code reformatted,added generic to collections,organized import,code moved and repackaged under default maven source dir,added missing @ override annotations,"digester instance cannot be accessed directly , used the getter instead",code reformatted,organized imports,muted generics warnings,added stack < list < rule > > getter accessor,fixed stack < list < rule > > access,code moved and repackaged under default maven source dir,code reformatted,added missing { } blocks,added generics to collections / iterators,added missing { } blocks,no needs to assign to another buffer when replacing,no needs to cast when invoking digester . parse ( ),relocated license header,added generics to internal collections,fixed methods overriding,fixed methods overriding,added generated serialversionuid ( classes are serializable ),removed unneeded casts,code formatted,fixed type infer,code moved and repackaged under default maven source dir,added missing @ override annotation,organized imports,added generics to collections,minor code format,"sample moved to edls , loading using the proper xml module",organized imports,first checkin of entry class,first checkin of feed class,first checkin of simple atom digester rules expressed via edsl,first checkin of main class for atom edsl example,added missing dateconverter,minor format on debug,added missing content element handling,"first checkin of feed / entry class , grabbed from edsl sample , but with annotations","first checkin of main class , grabbed from edsl sample , but with the annotations module",first checkin of abstractnamespaceuiribasedrulesmodule class,removed useless 'else' clause,"avoid compilation error when using sun java 1 . 5 : digestertestcase . java : [ 673 , 26 ] incomparable types : java . lang . object and java . lang . object","used more generic iterable instead of collection to load rulesmodule configuration instance , thanks matt benson for the idea applied on meiyo","'path' attribute replaced by 'url' , include rule in xml is able to load resources from 'classpath : / ' meta - scheme and traditional urls - todo : update the documentation site",dropped abuse of 'this' keyword,"[ digester - 18 ] objectcreaterule shouldn't keep classname as a field this fix contains a little variant respect to the proposed suggestion : users can still create classes by specifying just the class name , but when passed the class object in the constructor , it doesn't need to be load dynamically",[ digester - 131 ] allow recursive match in extendedbaserules,added missing nodecreaterule for xmlrules,[ digester - 132 ] add a compoundsubstitutor to support more than one substitutors at a time,"removed duplicated code , parse ( inputsource ) is enough to cover all the cases",debugging messages made easier to read and maintain,"minor rules apis improvement , taking inspiration from an idea described in digester - 95 ; using the extended apis users can contribute that feature just providing a customized rules implementation rather than modifying the existing digester code , forcing the custom - case cast as shown in the patch",removed unnecessary casts,removed duplicated code simply by inheriting from the abstract rules implementation,"add ( ) method can be final in the abstract implementation , used the registerrule ( ) method instead",added missing super ( ) call that broke the tests,fixed checkstyle violation : ' ) ' is not preceded with whitespace .,fixed typo on classname,"digester - 85 include filename or uri if digester . parse ( file file or string uri throws a saxexception thre's no need to decorate the thrown exception , filename or uri have been logged at error level : since the request is focused on monitoring errors from 3rd - parties digester use , logging which resource caused the error is more than enough",[ digester - 105 ] need to process [ attribute id = name ] somename [ / attribute ],[ digester - 133 ] class fields are not set if class is inherited from hashmap if commons - beanutils - 1 . 8 . 0 is used the testcase shows how the niall's hint works,"added missing exactmatch attribute processing for settop , setnext and setroot in xmlrules","[ digester - 72 ] allow setnextrule to fire on begin i added an abstraction layer in order to support the same feature not only for setnext , also for setroot and settop . xmlrules and annotations are supported as well",relocated license header,removed unused imports,fixed checkstyle violations : line is longer than 120 characters,fixed checkstyle violation : inner assignments should be avoided,fixed findbugs violation : sic inner should be static,fixed findbugs violation : urf unread field,relocated license header,fixed checkstyle violation : line is longer than 120 characters .,fixed checkstyle violation : inner assignment should be avoided .,just a matter of code style,"no reason to throw an hard to interpret npe late , better raising an exception as soon as classes cannot be load , much easier to debug - rule init and rule invocation could happen in different times",imported static methods,arrays initialization less verbose,"even if it doesn't help fixing the np null on some path , at least it guarantees 'parameters [ ] ' array is not null",beanutils static methods imported in static way,filled arrays in a smartest way,copy array values in a smartest way,filled array values in a smartest way,fixed np null on some path findbugs error,minor style of array notation,added generics on class array,"no needs to log the error and rise the exception , just throw the runtime error",[ digester - 150 ] use java5 concurrent apis to asynchronous parse ( ),fixed checkstyle violation : unused import - org . apache . commons . beanutils . methodutils .,"fixed pmd violation : avoid empty catch blocks ( just logged exception , see in the comment why )",fixed pmd violation : avoid unused method parameters such as 'pattern' .,fixed pmd violation : these nested if statements could be combined,fixed pmd violation : these nested if statements could be combined,fixed pmd violation : avoid empty catch blocks,fixed pmd violation : these nested if statements could be combined,fixed pmd violation : these nested if statements could be combined,fixed checkstyle violations : using the ' . * ' form of import should be avoided,[ digester - 151 ] the org . apache . commons . digester3 . binder . digesterloader doesn't allow binding a default org . xml . sax . errorhandler,[ digester - 153 ] add constructor support to objectcreaterule,"no needs to check if the errorhandler is null , digester already checks if the set instance is not null",[ digester - 152 ] the org . apache . commons . digester3 . binder . digesterloader doesn't allow binding a default org . xml . sax . locator,[ digester - 156 ] make ( nested | set ) propertiesbuilder#addalias ( ) fluent,missed from r1197969 - digester - 156 : (,[ digester - 157 ] improve set ( nested ) propertiesrulealias performances in the xml ruleset while binding rules,[ digester - 153 ] add constructor support to objectcreaterule ; cooperative work between simo tripodi & matt benson,[ digester - 153 ] add constructor support to objectcreaterule - even when the constructor args come from nested elements,added missing error message,re - enabled constructor test based on annotations,restored constructor test that binds constructor rules via binder apis,restored objectcreaterule constructor via meta xml declaration,[ digester - 159 ] * / object - param - rule is not managed in the xml rules,restored constructorwithclassdefinedinattribute test,restored basicconstructorwithwrongparameters ( ) test method,restored basicconstructorwithvaluesnotfound ( ) test,fixed findbugs issue : classloader must be created inside a privileged action,fixed findbugs issue : string format wants 2 arguments but is given 3 in,"removed synchronizations that caused findbugs issues , the digester is not anyway thread - safety by definition so that should not be an issue - unless users start sharing same digester instances across multiple threads",format violations reported by checkstyle,"minofr format , fixed checkstyle rules","reduced recordedinvocation class visibility , it can be hidden to final users",migrated stringbuffer to stringbuilder,removed lines bigger than 120 chars,fixed lines > 120 chars,fixed lines longer than 120 chars,minor format,minor format,added exaustive digester - 155 test case,eol,missing @ override,exception not thrown,simplify ; avoid potential npe warnings,simplify ; avoid potential npe warnings,added skeletons classes for preparing digester - 158 development,[ digester - 161 ] document thread - safety in javadoc of rule class - patch provided by eduard papa,initial checkin of digesterannotationsprocessor stuff,[ digester - 162 ] objectcreaterule doesn't allow create objects wich type is specified in attributename only,imported testcase for [ digester - 163 ],yet another attempt to make the loader failing,added ( occasionally ) failing test related to [ digester - 163 ],potential fix for [ digester - 163 ],"less efficient , but that should fix [ digester - 163 ]","check already bound rules per thread and not tracking them globally , otherwise threads are cheated","[ digester - 163 ] no needs of rulesbinder lazy loading , no needs to store rulesbinder in threadlocal , attempt to resolve concurrent issues","no needs to store system ids to a threadlocal , modules not invoked in lazy - loading way anymore",first checkin of a codewriter based on annotations processor filer,started plugging codemodel inside the annotations processor method ( it doesn't produce any result yet . . . ),just added few annotated classes with digester annotations for testing purposes,added the meta - inf / services generator to let javac discover the digesterannotationsprocessor,generated rulemodule classes have to inherit from abstractrulesmodule,configure ( ) method must return void and not void,defined more semful default values,assigned meaningful variables name to code generation components,added javadoc to generated method,first checkin of formattingmessager class,first checkin of digesterelementvisitor class skeleton,reduced the boilerplate code using the formattingmessager,local variables made final where possible,[ digester - 164 ] rulesbase performance optimization - patch provided by frank david martinez,[ digester - 165 ] binderclassloader does not override getresource - patch provided by dirk schaube,[ digester - 165 ] binderclassloader does not override getresource - patch provided by dirk schaube,[ digester - 169 ] problem when including rules xml file with classpath : url prefix - patch submitted by eugene fedotov,[ digester - 167 ] groundless 'circular file inclusion detected' exception when including rules xml file - patch submitted by eugene fedotov,[ digester - 174 ] inner list annotation has wrong @ target for most of the predefined annotation rules,"[ digester - 172 ] even with custom errorhandler , sax errors are still written to stderr - patch provided by ivan diana",[ digester - 173 ] no way to enable schema validation from digesterloader - patch provided by ivan diana,[ digester - 175 ] regression : digestertestcase#testpopnamedstacknotpushed expects emptystackexception,"since no objections have been shown on dev @ ml , the annotations - processor package has been dropped .",[ digester - 173 ] added a testcase that demonstrates dtd validation suppression - props to ivan diana that submitted the patch,[ digester - 171 ] #comment added a default implementation of errorhandlr that simply throws the detected exception - patch provided by ivan diana #resolve,add missing ' @ override' annotations .,convert control statement bodies to block .,convert control statement bodies to block .,convert 'for' loops to enhanced 'for' loops .,add final modifier to private fields .,updated to sax2 interfaces to remove deprecation warnings . pr : obtained from : submitted by : reviewed by :,restore the rss 0 . 91 processing code ( and example ) from the sandbox .,"make getrules ( ) have package scope , and add package - scoped getregistrations ( ) , to facilitate unit testing .","add initial unit tests for digester . so far , only the fundamental property related methods are being exercised , no actual parsing yet .",allow the log output to be directed to someplace other than system . out if desired .,add some more basic unit tests .,trim leading and trailing whitespace from the value passed to rule . body ( ) .,added constructor to digester to allow setting the saxparser to use . thanks to james house ( james @ interobjective . com ) for the suggestion .,"update to be able to enable / disable use of the context classloader . partial patch contributed by immanuel , gidado - yisa < avm3 @ cdc . gov > should we be setting the default to true ( use ) or false ( do not use ) ?","fix the anomaly that i reported a couple of weeks ago . rule matching was not working with namespace awareness turned off , because the arguments to startelement ( ) contained the following values : - localname was a zero length string - qname is the ""local"" part of the name and , because we use localname to match rules , no rules were fired . now , digester will use qname in this scenario .","make it possible to set the class loader to be used for instantiating application objects . if you call setclassloader ( ) , this will override the default behavior that is based on the usecontextclassloader property .","refactor the collection of registered rules , and the associated policy for picking the matching ones , into a rules interface . provide a default implementation that supports the previous standard functionality .","add a new standard rule implementation that lets you specify a factory class that uses the xml attributes of the matched element to create and configure the ultimate object that is then pushed onto the stack ( at element start ) and then popped ( at element end ) , similar to objectcreaterule . i extended robert's original implementation to allow for the case where your objectcreationfactory class might itself have a zero - args constructor , and where you might want to dynamically select the name of the factory class in the xml document being parsed . in addition , i added convenience rule registration methods into digester to match the available factorycreaterule constructors . submitted by : robert burrell donkin","when setrules ( ) is called , call setdigester ( ) on it so that it knows which digester it belongs to . submitted by : robert burrell donkin < robertdonkin @ mac . com >","add tests for rule matching , and remove deprecated method calls in the old test case . submitted by : robert burrell donkin < robertdonkin @ mac . com >","when namespace awareness is turned on , use ""qname"" ( with the prefix ) instead of ""localname"" in the matching patterns . otherwise , you cannot disambiguate between an element with the same name that is defined in two different namespaces .","added the ability to pass the digester instance on to the factory . this is to allow for classloading , debugging , checking parser props , etc .",make property name matching work correctly when namespace processing is off . the earlier fix only helped on elements . submitted by : robert burrell donkin < robertdonkin @ mac . com >,"clean up finish ( ) processing in rule implementations such that a preconfigured digester can be used to parse more than one document . previously , we were clearing instance variables that were configured in the rule constructors - now , only transient state information is cleared . submitted by : matt cleveland < groovesoftware @ yahoo . com >",convenience base class for objectcreationfactory implementations ( renamed from robert's proposed objectcreationimpl for consistency with many of the jdk apis that do similar sorts of things ) . submitted by : robert burrell donkin < robertdonkin @ mac . com >,add tostring ( ) methods to all existing rule implementations to make debugging and logging output messages more comprehensible .,"allow multiple callmethodrule rules to be fired on the same pattern . the problem was that each callmethodrule was pushing its parameter array onto the object stack , which interfered with the ultimate method call on the ""top"" data object . this was fixed by using a separate stack for the the parameter arrays . as long as you group the callmethodrule and all its associated callparamrules together when creating rules , you can now have an unlimited number of them for a particular matching pattern . submitted by : jason van zyl < jvanzyl @ apache . org >",add some initial unit tests for actually processing an input file .,modify the new test case to parse the same input file twice in a row without reinitializing the digester instance in between .,"add one more test to cover the ""multiple call methods on one object"" scenario .","- added a simple condition to end ( ) where the method specified with addcallmethod ( ) is not invoked when there is only a single parameter and it is null . this handles the case where the parameter is an attribute that is not actually defined in block currently being parsed . craig i am not entirely sure if this handles the case where the parameter is taken from bodytext , but the testbed passes and if you could look at what i did or suggest another course of action i would be happy to continue exploring the digester classes . this fixes the problem i have where a default value in a bean is set and should only be overriden when the specified attribute actually has a value . pr : obtained from : submitted by : reviewed by :","in callmethodrule , skip the method call if the argument text is coming from the body text , but there was no body text in the xml file . this is consistent with the recent change to skip the call if the specified attribute name was not included . also , for consistency with behavior elsewhere in digester , trim leading and trailing whitespace from the body text before using it as a parameter value .","add a new feature to digester - the ability to declare that rule instances match * only * elements from a corresponding namespace , without changing the functionality observed by applications that do not care about this . background : the original implementation of digester created matching patterns based on the ""qname"" version of element names ( i . e . including the namespace prefix ) . however , to be a ""good xml citizen"" , it should be possible to create rules that match based on the corresponding namespace uri plus the ""localname"" part of the element name . in that way , xml document authors are free to use any prefix they like , as long as they declare their namespaces in the usual fashion . to declare that rule instances apply * only * to a particular namespace uri , call digester . setrulenamespaceuri ( ) before calling the corresponding addrule ( ) method . if you call setrulenamespaceuri ( null ) , rules will match regardless of namespace uri - - in other words , the current behavior . warning 1 : i had to deprecate rules . match ( string ) because it is insufficient to handle this case . any existing implementation of rules should be modified to imlement rules . match ( string , string ) instead . warning 2 : i haven't yet added unit tests to verify that this stuff works correctly , but will be doing that soon ( plus using this feature in my ""workflow"" project ) .","add notion of a ruleset that provides a convenient way to package sets of related rules , optionally associated with a namespace prefix . add test cases for ruleset processing , and fix a couple of bugs in rule matching . all unit tests now pass for both namespace - unaware processing ( the original functionality of digester ) and namespace - aware processing ( new feature where rules can only match for matching namespace uris ) .","when rulesbase accepts a new rule , only set the namespace of the added rule to an explicitly set value . otherwise , accept whatever namespace setting is already present in the rule . submitted by : robert burrell donkin < robertdonkin @ mac . com >",update to correctly match on null valued namespaces submitted by : robert burrell donkin ( robertdonkin @ mac . com >,add separate unit test suite for rules ( to facilitate subclassing for custom rules implementations ) . submitted by : robert burrell donkin < robertdonkin @ mac . com >,rulesbase . match ( ) must return a zero - length list if there are no matching rules . it was incorrectly returning null in some circumstances . submitted by : robert burrell donkin < robertdonkin @ mac . com >,getting rid of jcselement,jcs - 129 removing stats from info log in dispose ( ),ignoring cachevalue for key parameters,first part of jcs - 130 : remove static managers and give factories a real life cycle .,jcs - 147 : provide file size limitation for block disk cache and indexed disk cache,add orderly shutdown for thread pools,support schedulers in cache factories,address issues reported by findbugs,address issues reported by findbugs,replace copy ( ) with standard clone ( ),attempt to fix jcs - 116 : compositecachemanager is thread - hostile,jcs - 78 fix : remotecachestartupservlet can't start with config outside classpath,jcs - 130 : simplify remotecachefactory & friends . get rid of criss - cross static calls,jcs - 130 : simplify remotehttpcachefactory & friends . get rid of criss - cross static calls . remote remotehttpcachemanager,jcs - 169 ensure access expiry policy is respected binding it on jcs features instead of faking it with createtime,clean up api use linkedblockingqueue instead of home - grown implementation,jcs - 178 fixing remotecachenowaitfacade constructor logic,preliminary fix for jcs - 178,add some temporary debug,add missing try / catch,debug must come first,"in case setup failed , no point throwing npe as well",more debug,jcs - 133 remoteutils . getnamingurl does not handle ipv6 numeric addresses properly fix could be improved ; check if it helps the jenkins build,preserve the log file at end of class test,fix jcs - 136 : outofmemoryerror when using compressing serializer,update tests to apache commons collection 4 . 0 .,fix missing imports .,jcs - 132 ensurecdiistestedwhentcksruntest fails on java 1 . 6,jcs - 139 : handle enums properly,use util class for all naming urls,use util class for all naming urls,attempt to resolve classcastexceptions when working with remote objects,don't use stubs,cut & paste error,"entry . getvalue ( ) is a list and we cast it in all but a list , wrong copy / paste or completion surely",jcs - 142 making cdi extension scanning independent,starting work to tolerate cdi extension on cdi 1 . 0,trying to tolerate ears on cdi 1 . 0 - still weak but better + pasting a sample of beans . xml,simpler algorithm for passivationcapable bean since actually cdi 1 . 1 will not need it,ensuring to close created cache manager / provider in extras cdi extension,"closing cache * if we created it , means for jcache cdi extension closing if using default resolver",fix jcs - 146 : indexeddiskcache : mismatched memory and disk length ( 0 ) for [ ded : pos = 63802 len = 9658 ] during optimization,fix jcs - 144 : blockdiskcache hangs on severe : region [ tms ] failure getting from disk - - ioexception,"fix jcs - 145 : abstractdiskcacheattributes logs error , when directory already exists",fix jcs - 141 : remotecacheserverfactory ignores configuration,jcs - 140 dont really flush http response when flushing our internal buffer + testing with tomcat to avoid surprises,fix jcs - 148 : unnecessary use of filechannel . force ( ) in indexed and block disk caches,fix jcs - 96 : incomplete shutdown of remotecacheserver,no longer serializable,better parameter parsing,log error rather than throwing exceptions,organize imports,organize imports,generify events,jcs - 151 ensuring default generator is accurately instantiated even in default case,jcs - 152 making easy to override jcache . ccf,"fix removal of items from group cache , added several tests",no longer serializable,no longer serializable,no longer serializable,misc .,replace poolaccess with a datasourcefactory model borrowed from db - torque,"jcs - 149 : when reading keys from disk , a streamcorruptedexception happens when a custom serializer is applied",jcs - 153 : fix file size limitation for block disk cache and indexed disk cache,jcs - 155 fixing potential deserialization issue,better whitelist handling in blacklistclassresolver,forgot to remove serializable,reformat,address issues reported by findbugs,address issues reported by findbugs,fix test,refactor and simplify managers and factories ( step one ),replace copy ( ) with standard clone ( ),fix tests,fix javadoc,fix tests,make code compile again,fix jcs - 157 : remotecachefactory ignores host and port configuration on client,fix jcs - 158 : nullpointerexception in indexeddiskcache . addtorecyclebin ( . . . ),address concurrency issues reported by findbugs,attempt ( again ) to fix continuum test failure . thanks to mat jaggard for the patch .,fix javadoc for java 8 . thanks to mat jaggard for the patch .,jcs - 159 fix : blockdiskcache overwrites data after loading from disk,add verification of block disk cache key file .,jcs - 54 add soft reference memory cache,replace boundedqueue with jdk implementation,make sure the softreference can actually be garbage collected .,make sure the softreference can actually be garbage collected .,fix assert in thread,strip down api,further simplify api,further clean up api and class dependencies,further clean up api and over - engineered class dependencies,fix jcs - 161 : dynamic regions leak memory upon dispose due to shrinkertask,jcs - 156 blockdiskcache is limited to 2gb,need to cast before doing the calculation,add a unit test,privatize fields,jcs - 165 : blockdiskcache partial remove / group remove doesn't work,typo,clean up,remove duplicate code,replace singlelinkedlist with jdk concurrentlinkedqueue,fix sortedpreferentialarray to actually do what was is supposed to do,remove unnecessary code,replace sortedpreferentialarray with jdk concurrentskiplistset,remove size limitation configuration of indexed cache recycle bin,make tests run with java 1 . 6,pull api straight : deprecate duplicate defineregion ( ) methods and add missing getinstance ( ) variants,reduce synchronization,initialization should not be a publicly accessible method,improve concurrency,remove redundant data,remove redundant code reduce synchronization,prepare move to concurrentmap,remove declaration of exceptions not actually thrown,remove redundant code,refactor common code,remove useless class,jcs - 170 replacing at least commas for jmx registration,performance improvements,remove unused field and method,adjust,jcs - 171 : multiple cacheeventqueue . qprocessor spawned for the same cache region,use number of available processors as default minimum pool size,"derive cacheeventqueue from the pooled implementation , just use pool of size 1",test the right thing,stopprocessing doesn't make sense anymore,avoid duplicate code . added test .,deprecate isalive ( ) logic,fix test . alive - status is deprecated,avoid duplicate storage of cache element,refactor : pull up duplicate code,refactor : pull up duplicate code,refactor : pull up duplicate code,fix log level,fix creation time not updating during clone ( ),pool is never null,add test for elementattributes . clone ( ),- deprecate getpool ( ) - expose createpool ( ) - add new getexecutorservice ( ) to benefit from forkjoinpools - add management of scheduledexecutorservices,fix : thread pool logs rejections,some cleanup,add a shutdown ( ) method,add a shutdown ( ) method,jcs - 173 support of java . lang . reflect . proxy for cdi integration,jcs - 174 serializable is not a constraint proxies should imply in jcache,make sure that attributes are cloned every time,approach to fix jcs - 177,"jcs - 178 : clients using remotecache are not working . add a test . add new constructors with better parametrization , deprecate the old ones",jcs - 179 : fix different / duplicate loading methods of remotecacheserver configuration,jcs - 180 if there is no argument we don't want to fail with a npe in cacheinvocationcontextimpl,jcs - 183 reduce reflection at runtime in our jcache cdi integration,"jcs - 183 bad shortcut , adding back the cache activation + fixing bad copy / paste in cdi interceptors",extract compositecache . get logging from the synchronized block and only test isdebugenabled once per method call ( logging layers are impacting ),adding a test to ensure we cover the proxy cachedefaults extraction in our jcache test suite,ensure we dont share the same meta cache key for two concurrent classes in cdi helper,remove deprecated code,update dependency commons - dbcp2,jcs - 181 update dependency to httpclient 4 . 5 . 3,jcs - 184 : move return statement outside of logging block,merge branch commons - jcs - 2 . 2 . x back into trunk,merge branch commons - jcs - 2 . 2 . x back into trunk,merge branch commons - jcs - 2 . 2 . x back into trunk,modernize,try to employ streaming where appropriate,too complicated,"io - 251 add new read method ""tobytearray"" to handle inputstream with known size .",io - 274 - tailer returning partial lines when reaching eof before eol added version of readline ( ) that returns null if eof seen before eol re - enabled test case had to add sleep call to allow test file to be cleared up properly,"[ io - 226 ] question with bytecounttodisplaysize ( long size ) . add more tests . add commented out code for processing terabyte , petabyte and exabyte . add constants for terabyte , petabyte and exabyte , zettabyte , and yottabyte .",[ io - 303 ] teeoutputstream fails executing branch . close ( ) when main . close ( ) raised an exception .,io - 297 charsequenceinputstream to efficiently stream content of a charsequence,"remove noisy and unnecessary parens . especially painful in return statements : ""return ( foo + bar ) ; "" vs . ""return foo + bar ; """,[ io - 310 ] add byteordermark constants for utf - 32 .,first cut at [ io - 326 ] add new fileutils . sizeof [ directory ] apis to return biginteger .,[ io - 332 ] improve tailer's reading performance .,io - 335 - tailer#readlines - incorrect cr handling,io - 279 - tailer erroneously considers file as new .,replace magic number with private constant no mark .,io - 354 commons io tailer does not respect utf - 8 charset,io - 356 fix failures in testio 356 loop utf16 and testio 356 loop utf8 reset the byte buffer and the encoder together,[ io - 505 ] deprecated of all ioutils . closequietly ( ) methods and use try - with - resources internally .,make eof public for use as a static import .,use import static org . apache . commons . io . ioutils . eof instead of local constants .,"< action issue = ""io - 437"" dev = ""ggregory"" type = ""add"" > make ioutils . eof public and reuse it in various classes . < / action >","replace ""string . length ( ) "" = = 0 with ""string . isempty ( ) "" .",typo in exception message,[ io - 435 ] document thrown illegalargumentexception in fileutils . thanks to dominik stadler .,io - 453 - regression in fileutils . readfiletostring from 2 . 0 . 1,[ io - 457 ] add boundedreader submitted by kristian rosenvold,[ io - 459 ] add windowslineendinginputstream and unixlineendinginputstream submitted by kristian rosenvold,use spaces not tabs,add missing license headers and move those before package to avoid checkstyle complains,better test reports .,better test reports .,close resources,add default svnuids,+ = generated serialversionuid,fix unavoidable deprecations,io - 462 ioexceptionwithcause no longer needed,io - 462 ioexceptionwithcause no longer needed,spurious spaces,io - 462 ioexceptionwithcause no longer needed simplify code,typo,remove unnecessary else .,massembly - 753 cr only handling . unreleased code so no separate issue for commons according to http : / / en . wikipedia . org / wiki / newline#representations we're probably be talking about files originating on old v9 macos'es or a commodore 64,make javadoc tool happy,format source code,remove irrelevant return statements,utility methods can be static,use enhanced for loop,format source code,io - 406 : introduce new class appendableoutputstream . thanks to niall pemberton .,restore binary compatibility which has been broken in rev . 1642799 .,language level code changes,extracted duplicated logic into methods,io - 469 self - supression with try - with - resources solution proposed by grigory fadeev,"revert ""io - 469 self - supression with try - with - resources"" things are not as simple as they might seem",io - 466 added testcase which proves this has been fixed already,io - 452 broken symlink support patch by david standish . also added reflection - based java7 symlink support from maven code ( original author is me ),"io - 488 fileutils . waitfor ( . . . ) swallows thread interrupted status patch by björn buchner , testcase by me","io - 425 setter method for threshold . patch by craig swank , testcase by me",comment,no need for variables to be package protected,fixed style comment from mailing list . added small testcase for java7support converted to commons - style indentation,"io - 428 bominputstream . skip returns wrong count if stream contains no bom patch by stefan gmeiner , applied with minor changes",reverted r1686512 changes back to package protected to make code compile,"cleaned up testcase logic , removed duplication",added old - style booleanvalue,close streams,"io - 471 support for additional encodings in reversedlinesfilereader patch by leandro reis , applied with patch adjustments to trunk","fixed all checkstyle errors and a findbugs error findbugs error was : org . apache . commons . io . output . deferredfileoutputstream#thresholdreached possible file handle leak upon exception also contains fix for io - 446 , submitted by jeffrey barrus",io - 481 changed algorithm for waitfor . empirical studies now show this typically completes in 200x ms for a delay of 2 seconds .,added a couple of tests to increase coverage somewhat,further improved test coverage,try a simpler character to please build system,changed testdata to avoid unmappable characters,improved test coverage,fix npe since java . io . file . listfiles ( filefilter ) can return null .,typo,io - 484 fix with testcase,io - 484 added filtering to getpath and getprefix,ensure streams are closed,io - 484 changed solution to always throw exception,typo,removed added method from interface that broke binary compatibility . clients wishing to use this feature must subclass tailerlisteneradapter until we break compatibility or go java8 minumum .,fixed testcase to use adapter instead of interface,"io - 487 - validatingobjectinputstream , restricts which classes can be deserialized",io - 487 - include class name in invalidclassexception,javadocs and code formatting . no functional change .,"io - 487 - morecomplexobjecttest added , shows the ( somewhat painful ) settings needed to deserialize more realistic classes",fixed broken unit tests . junit was trying to execute ourtestclass . java as a test .,io - 487 - demonstrate blacklist - only in morecomplexobjecttest,io - 487 - demonstrate 3 variants in morecomplexobjecttest,io - 493 : add infinite circular input stream ( closes #8 ),"changed order of checking supported charset and opening file . this avoids file handle leak in testcase when unsupported charsets would leave file open ( could also happen in real code , but probably not in real - life issues )",converted all tests to junit4 test count is 1157 as oppsoed to 1156 because junit4 counts @ ignored tests as run .,added private and test - scoped sleep method that actually sleeps for a guaranteed minimal time,output name of charset being asserted on,added exclude for legacy charcsets that do not support french characters ( relevant on ibm jdk ),added detection of xml parser charset for ibm jdk,"added test for broken utf - 16 on ibm jdk's to writeroutputstream , adjusted testcases to expect uoe",no can do on windows,fixed case,remved potential race condition between stop and interrupt in testcase,improved test that was failing on windows,changed test filename for test,added shift jis to list of oddbal character sets,use long math when calculating a long,fix funky formating .,"don't use a ""m "" prefix for ivars .",add @ suppresswarnings .,statement unnecessarily nested within else clause .,always use blocks .,[ io - 502 ] exceptions are suppressed incorrectly when copying files . fix npes due to the patch .,[ io - 502 ] exceptions are suppressed incorrectly when copying files .,[ io - 502 ] exceptions are suppressed incorrectly when copying files . 2nd patch .,[ io - 506 ] deprecate methods filesystemutils . freespacekb ( ) .,[ io - 505 ] make lineiterator implement closeable to support try - with - resources statements .,[ io - 507 ] add a byteorderfactory class .,[ io - 507 ] add a byteorderfactory class .,fix checkstyle : always use blocks .,updated for java7 features,"update boundedreader . java https : / / docs . oracle . com / javase / 8 / docs / api / java / io / reader . html add read bytes eof test patch by zhanhb < zhanhb88 @ gmail . com > , applied unmodified",now using java 7 so can avoid the deprecated constant,"io - 511 : after a few unit tests , a few newly created directories not cleaned completely . thanks to ahmet celik . this also closes #13 from github .",reimplement a la java 7 with standardcharsets ( fixes compiler warnings . ),"added the observableinputstream , and the messagedigestcalculatinginputstream .","fix compiler warnings , use try - with - resources .",[ io - 512 ] thresholdingoutputstream . thresholdreached ( ) results in filenotfoundexception .,remove redundant type arguments .,fixed files in repo with incorrect line endings,[ io - 483 ] filenameutils . getprefixlength now works correctly for unix files / folder that are in the root folder and start with colons,[ io - 515 ] allow specifying initial buffer size of deferredfileoutputstream . redo submitted patch .,io - 514 : remove org . apache . commons . io . java7support,replace usage of deprecated charsets constants with standardcharsets constants,fix some warnings in tests,replace usage of deprecated ioutils#closequietly with try - with - resources,"fix warnings in filebasedtestcase ( side - effects : close #15 , close #16 )",add missing ' @ override' annotations .,[ io - 513 ] add convenience methods for reading class path resources . apply and evlove patch from behrang saeedzadeh .,testutils : use try - with - resources instead of deprecated ioutils#closequietly ( side - effect : close #28 ),io - 528 : fix tailer . run race condition runaway logging ( closes #29 ),fileutilstestcase : usage of ioutils#closequietly with try - with - resources statements,"fileutilstestcase : test directory is delete in tear down method , so remove clean up in individual tests","trailertest : replace usages of ioutils#closequietly with try - with - resources statements ( side effects : close #7 , close #21 , close #20 )",tailertest : clean - up is done in teardown so remove clean - up from individual test methods,io - 534 fileutiltestcase . testforcedeletedir ( ) should not delete testdirectory parent,use temporary dir that can be fully deleted,fix checkstyle violations by adding javadoc,"io - 367 : add convenience methods for copytodirectory ( closes #34 , closes #18 ) based on patch supplied by james sawle","correct error message in ioutils ( closes #35 ) this corrects the wording of the error message in ioutils : there's no such word as ""readed"" , and the author probably meant ""expected"" as opposed to ""excepted"" .",ioutils#tobytearray : fix spelling of local variable name,ioutilstestcase#testtobytearray inputstream negativesize : fix typo,fail if expected exception not thrown,let junit handle the exceptions,let junit handle the exceptions,[ io - 537 ] bominputstream shouldn't sort array of boms in - place .,io - 542 : fileutils#readfiletobytearray : optimize reading of files with known size ( closes #38 ),"missing test case for negative offset value ( closes #41 ) the method copylarge ( inputstream input , inputstream output , int offset , buffer ) copies the content of input into output . if offset is a positive number , it will skip a number of bytes from input equal to offset value . by performing mutation testing analysis we noticed that the copylarge method was never tested for a negative value for offset . the added test call copylarge with a negative value and check that the behavior is the same as for offset = 0 , where no bytes are skipped from input .",io - 546 : closedoutputstream#flush should throw ( closes #42 ),[ io - 547 ] throw a illegalargumentexception instead of nullpointerexception in filesystemutils . freespacewindows ( ) .,make code style of hasbom ( ) consistent with getbomcharsetname ( ),added test to exercise classloaderobjectinputstream : : resolveproxyclass with multiple interfaces,make private fields final .,replace custom temporary folder management with junit's temporaryfolder . this will allow maven to run tests concurrently .,replace custom temporary folder management with junit's temporaryfolder . this will allow maven to run tests concurrently .,replace custom temporary folder management with junit's temporaryfolder . this will allow maven to run tests concurrently .,replace custom temporary folder management with junit's temporaryfolder . this will allow maven to run tests concurrently .,replace custom temporary folder management with junit's temporaryfolder . this will allow maven to run tests concurrently . clean up imports .,replace custom temporary folder management with junit's temporaryfolder . this will allow maven to run tests concurrently .,static imports come first .,replace custom temporary folder management with junit's temporaryfolder . this will allow maven to run tests concurrently .,static imports come first .,replace custom temporary folder management with junit's temporaryfolder . this will allow maven to run tests concurrently .,static imports come first .,remove unnecessary casts .,use final for parameters .,"replace static temporaryfolders with instances ones , so that tests are truly independent .","avoid fine - sensitivity when testing freespace instead of a fixed delta of 256 kb , assume disk space does not change by more than 1 % between calling freespacfe and the second call to freespacekb - e . g . 1 gb on a 100 gb drive . 1 % is still small enough to detect if the code accidentally changes from kibibytes ( 1024 ) to kilobytes ( 1000 )",filewriterwithencodingtest : simplify setup method,consistently use the final modifier with local variables .,make byteorderfactory a static util class,io - 506 : deprecate filesystemutils class,io - 507 : rename byteorderfactory to byteorderutils to have a common naming schema,"filealterationmonitortestcase and filealterationobservertestcase : use temporaryfolder rule , so that tests are independent",[ io - 507 ] add a byteorderparser class .,"add more varied input data to tests in filesystemutilstestcase ( closes #48 ) add tests with larger and smaller disk spaces on windows ( side effect : close #57 , close #45 )",[ io - 553 ] add org . apache . commons . io . filenameutils . windows illegal file name chars .,[ io - 553 ] add org . apache . commons . io . filenameutils . isillegalwindowsfilename ( char ) .,[ io - 555 ] recasting this issue away from a new method in filenameutils to a solution to convert strings to legal files names with the new enum filesystem .,test if arrays are sorted,+ = islegalfile ( charsequence ),add test of illegal replacement char,[ io - 555 ] add reserved file names . impl for windows only for now .,sort members .,[ io - 555 ] add reserved file names . impl for windows only for now .,"io - 557 : unsupportedencodingexception when opening an iso - 8859 - 1 xml stream with turkish as the default locale ( closes #51 ) perform locale independent upper case conversions . to handle properly lower cased character encoding name in xml prolog with any default system locale , notably turkish .",io - 559 verify hostname part of suspected unc paths in filenameutils,modifier 'private' is redundant for enum constructors . ( closes #53 ),io - 557 : unsupportedencodingexception when opening an iso - 8859 - 1 xml stream with turkish as the default locale improve tests by copying parts of the systemdefaults rule from commons - lang add changes . xml entry,io - 557 : unsupportedencodingexception when opening an iso - 8859 - 1 xml stream with turkish as the default locale improve test name,pr : io - 567 throw an illegalargumentexception in filenameutils . getextension ( string ) for ads names .,pr : io - 567 throw an illegalargumentexception in filenameutils . getextension ( string ) for ads names .,io - 567 : implement special case handling for ntfs ads names fix checkstyle violation by replacing tabs with spaces,don't need to nest else clause .,better ivar and param names .,don't need to nest else clause .,simplify .,refactor magic string into a constant .,don't need to nest else clause . refactor magic numbers into constants .,"redundant superinterface serializable for the type iocase , already defined by enum < iocase > .",unnecessary semicolon .,refactor magic int into a constant .,refactor magic string into a constant .,fix param names 'filename' - > 'filename' in code and javadocs .,fix param names ' * filename * ' - > ' * filename * ' in code and javadocs .,"[ io - 571 ] remove redundant isdirectory ( ) check in org . apache . commons . io . fileutils . listfilesanddirs ( file , iofilefilter , iofilefilter ) .",[ io - 572 ] refactor duplicate code in org . apache . commons . io . fileutils .,bullet - proofing .,"io - 535 : thread bug in filealterationmonitor#stop ( int ) ( closes #58 , #36 ) interrupt the thread created by filealterationmonitor on stop ( )",improve test coverage for ip address parsing code,isrfc3986hostname applies to ipv4 addresses so we can safe the test,remove ipv4 checks that are unnnecessary due to matching regex,[ io - 577 ] add readers to filter out given characters : charactersetfilterreader and characterfilterreader .,"strengthen teeoutputstremtest . testtee with an expected result . tee should not just repeat what's being written to both outputs , the output should also be the same as expected . for example , if the body of any of the write methods in teeoutputstream is removed , then the values written are the same ( nothing ) and the assertions don't fail in the test . this is solved by adding an expected value and checking both outputs against it .",add slots for case sensitivity and case preservation .,"[ io - 580 ] update org . apache . commons . io . filenameutils . isextension ( string , string [ ] ) to use var args .",remove redundant type arguments .,"[ io - 554 ] fileutils . copytofile ( inputstream source , file destination ) should not close input stream . closes #49 .",use final .,remove trailing white spaces on all lines .,pr : io - 582 make methods in observableinputstream . obsever public .,adding the peekableinputstream .,io - 589 some tests fail if the base path contains a space,[ io ] use non - short - circuit operator this should have identical semantics but is less confusing to read .,scxml - 191 : support foreach element,scxml - 200 : more fine - grained type - checking on the scxml model elements,"scxml - 197 : better separation of concern between scxmlexecutor and scinstance and introducing a new scxmlexecutioncontext see : https : / / issues . apache . org / jira / browse / scxml - 197 - move all persistable state to scinstance and support detach / ( re ) attach the instance from the scxmlexecutor , which no longer is serializable - introduce a new scxmlexecutioncontext to encapsulate all internal api and services - switch to using the scxmlexecutioncontext as primary interface ( parameter ) for the scxmlsemantics algorithms - switch to use a restricted actionexecutioncontext ( subset of scxmlexecutioncontext ) as interface for the action ( scxml executable content ) execution - add internal and ( synchronous ) external event queues and switch to 'single event step' processing as requirement by the scxml specification","scxml - 213 : fixing the datamodel handling and bringing it more in line with the scxml specification this is a very large commit as so many of the needed changes turned out to be interdependent , and committing these in separate logical steps simply wouldn't work without complete intermediate breakage of the build . for background and more high - level details concerning these changes , see : https : / / issues . apache . org / jira / browse / scxml - 213 important new features and changes : - complete replacing the jaxp xpath usage with commons jxpath - re - implement the xpath data ( ) builtin function and introducing the xpath location ( ) builtin function - simplify ( strip ) the corresponding builtin class and adding the xpathbuiltin to handle the xpath specific features separately - extend the evaluator interface and corresponding language specific implementations to support all the scxml spec < assign > xpath requirements using the xpathevaluator - complete the < send > action implementation proper , and the default simpledispatcher implementation with it ( dropping the simplescheduler ) - implement the scxml spec requirements for the ioprocessors services lookup and proper handling of internal / external scxml i / o event processors - also largely improve the < invoke > implementation and execution , although there remains several things todo for it to be fully scxml spec compliant",scxml - 234 adding a unit test to test javascriptengine itself to validate if we can have a common code to make it work in both java 1 . 8 or earlier versions,"scxml - 242 : providing json base datamodel as replacement for xml / xpath see : https : / / issues . apache . org / jira / browse / scxml - 242 - adding fasterxml jackson as ( default ) json parser - adding new contentparser to encapsulate data ( content ) parsing logic - adding new abstractbaseevaluator for common new clonedata method - replace all xml based datamodel examples with json and dropping all data ( ) and location ( ) usages - dropping data ( ) and location ( ) implementations and related xpathbuiltin for jexl , javascript and groovy languages - deleting no longer relevant xpath based unit - tests",scxml - 243 : remove xpath language support and cleanup engine implementation - drop all xpath usages and commons jxpath dependency - also drop no longer needed evaluator . evallocation method - use evaluator . clonedata method for creating invoke / send payload data copy - no longer support xml node 'as string' for expression result,scxml - 245 : reimplement nashorn javascript evaluator - see : https : / / issues . apache . org / jira / browse / scxml - 245 for details,scxml - 264 support < invoke > with inline ( < content > body ) scxml statemachine definition,scxml - 268 support < donedata > and complete the handling of < final > and < finalize >,"scxml - 190 : check and enforce required scxml element attributes as defined by the spec , http : / / www . w3 . org / tr / 2013 / wd - scxml - 20130801 todo : when support for < foreach > and < raise > is added , also add checks for their required attributes",scxml - 186 : make it more easy to override / replace the default scriptpreprocessor,scxml - 186 : trivial fix in unit test to test as expected by the name,scxml - 186 : fix setting up groovy initialscript as scriptbaseclass after resetting the scxmlexecutor ( or using a new one ),scxml - 173 : support raise element - rename non - standard event element to raise - rename its name attribute to event - ensure raise ( and send ) elements are not used within a finalize element as per the spec,code cleanup,more code cleanup,"scxml - 194 : drop outdated , incomplete , broken or no longer supported features for scxml 2 . 0 see : https : / / issues . apache . org / jira / browse / scxml - 194",scxml - 196 : redefine scxmlsemantics to align with the algorithm for scxml interpretation as described in the scxml specification - starting point : just checking in baseline forked versions of scxmlexecutor and scxmlsemanticsimpl so to be able to track changes made to the implementation,scxml - 196 : reshuffling class methods and members in more logical order ( at least to me ) and fix or suppress intellij warnings ( i like 'green' ),scxml - 196 : reshuffling class methods and members in more logical order ( at least to me ),scxml - 196 : getting rid of warnings ( intellij ),scxml - 196,scxml - 196 : rename initialscript to globalscript and no need to wrap the globalscript in an artificial transition and state,"scxml - 198 : remove support for deriving < history > default target configuration and enforce the specification requirement to have this configured through its < transition > child element only also , reshuffle the code a bit","scxml - 199 : map the < scxml > initial attribute to an initial transition to support multiple target states , conforming to the scxml specification",scxml - 196 : - generate < initial > element for composite states if none is defined or - mark initial been generated for the above or when created through < state > initial attribute - don't write out generated < initial > elements - disallow < initial > elements for atomic states - code cleanup,"scxml - 196 : - < invoke > is allowed for composite states as well - todo : multiple < invoke > should be allowed too , as well as for < parallel >","scxml - 196 : - < state > , < parallel > , < final > and < history > are required to get an unique auto - generated id if not provided explicitly see also : http : / / www . w3 . org / tr / 2014 / cr - scxml - 20140313 / #ids","scxml - 196 : fix testcase , manual created state requires an id now",scxml - 196 : preliminary transition internal | external type attribute support,scxml - 196 : add default entry list to step to track which targets will be entered by default this micro step,"scxml - 196 : the algorithm for scxml interpretation requires sets of transitiontarget instances to be processed . to conform to the set equality contract transitiontarget must implement the equals and hashcode methods . but in the context of scxml and the purpose of the algorithm , really only identity based equality should be considered . the transitiontarget#id property also could be used , but that would make the api much more awkward to ensure only unique ids are used , that is : within the context of a single scxml instance . much easier therefore is to just enforce and only support identity based equality .",scxml - 196 : fix npe when a transition has multiple targets ( at least 3 ) without the same parallel lca ( least common ancestor ),"scxml - 200 : further refinement on the scxml model - transitiontarget ancestors only can be of type enterablestate because history , as the only non - enterablestate , cannot have children . this also allows for more cleanup and simplification",scxml - 200 : more fine - grained type - checking on the scxml model elements ( missed test - case changes ),scxml - 200 : adding support for multiple < invoke > elements in a < state > or < parallel > instead of just one . note : this is primarily a model update only . semantically and process - wise the < invoke > handling is not ( by far ) in line with the specification yet .,scxml - 200 : adding support for multiple event names specified for a transition,"scxml - 200 : notificationregistry cannot ( and should not ) be serializable as it hold on to external scxmllistener instances . it also holds on to scxml observable which may be serialized and deserialized , which would make break the internal references . to fix this , instead we'll 'register' only the newly added integer observable . getoservableid ( ) , which is a generated unique id within the context of an scxml document . also , fix / improve the simpletransition . gettransitiondomain ( ) to be inline with the current scxml specification","scxml - 99 : add support for the read - only system variables , see : http : / / www . w3 . org / tr / 2014 / cr - scxml - 20140313 / #systemvariables - implemented with a new scxmlsystemcontext , wrapping normal context and protecting selected variables - introducing the required sessionid and name variables , and dropping the outdated and no longer needed eventdata and eventdatamap variables - implementing the required event . type = = 'internal' for internal events","scxml - 182 : support error event raising to comply the spec ""3 . 12 . 2 errors"" the 'error . execution' event now is automatically added to the internal event queue when an expression error occurs","scxml - 202 : move state machine running status management into scinstance itself , thereby retaining this status after serializing / de - serializing","scxml - 203 : calculation of states to be entered can be depending on states to be exited and thereby also their possible history - fixing this bug by temporarily pre - recording the histories of exited states in the step - this allows to still ensure that the resulting active states represent a valid configuration , before actually taking the step - also cleanup and improve the naming of the state history management apis",guard against npes,reverting and correcting previous fix to prevent npes which introduced an incorrect side - effect,"scxml - 206 : external events must only be added to the event queue through scxmlexecutor#addevent , not ( also ) trigger them , as the state machine can / should only handle one invocation at the time ( non - reentrant ) . the event queue processing with sequentially processed such added events one at a time .",scxml - 206 : ensure named events are never matched to event - less transitions,only ( try to ) keep track of loop index when requested,trivial but useful performance improvements ( thanks to rinke hoekstra for reporting them ),scxml - 209 : improve and fix legal state configuration check in modelupdater,scxml - 210 : align < send > action attributes support and handling with the latest specification : http : / / www . w3 . org / tr / 2014 / wd - scxml - 20140529 / #send,scxml - 211 : fix for bug in current scxml specification for adddescendantstatestoenter algorithm,scxml - 212 : add support for scxml datamodel type and default evaluator instantiation,scxml - 214 : replace jaxp xpath expression evaluation with commons jxpath,scxml - 214 : replace jaxp xpath expression evaluation with commons jxpath - drop not used / needed data ( ) function support for xpath language,"scxml - 221 : implementation of the scxml specification required support for the ""null"" datamodel",scxml - 222 : add support for executing the scxml irp test cases,scxml - 224 : improve scxml state configuration handling and optional validation,"scxml - 101 : add support for using a 'single' global context , required for some of the ( datamodel specific ) irp tests of the w3c specification .",scxml - 226 : support of special send targets # parent and # invokeid - partly based upon a patch contributed by michael goerlich,"scxml - 226 : support of special send targets # parent and # invokeid - support for # invokeid , based upon a patch contributed by michael goerlich","scxml - 226 : support of special send targets # parent and # invokeid - support for # invokeid , based upon a patch contributed by michael goerlich","scxml - 101 : initialize and store the global ( scxml ) datamodel in the globalcontext instead of the rootcontext - this might have some impact on external usages which assumed and ( mis ) used the rootcontext to access the global datamodel variables , like several scxml unit tests",scxml - 226 : support of special send target # scxml sessionid,scxml - 225 : applying franck foutou's patch . also added a unit test for this patch .,scxml - 227 : applying michael goerlich's patch with validating unit tests,scxml - 234 adding a unit test to test javascriptengine itself,scxml - 234 fixing unit test failure in scripttest,"scxml - 233 nashorn . global doesn't need to be put in context , which bothers serialization of the context instance . so , saving the nashorn . global only in bindings .",scxml - 237 fix javadoc errors,support javascript ( nashorn ) based arrays for foreach,javascript conditional expressions must be evaluated as ( converted to ) effective boolean expression,for empty < data / > nodes don't store the parsed node as value,fix effectivecontextmap . entryset using parent first merging of variables to ensure local variables 'shadow' parent variables,scxml - 246 : javascript engine requires global context execution - see : https : / / issues . apache . org / jira / browse / scxml - 246,ensure when entering state its context has been created and ( nested ) datamodel is cloned,scxml - 239 : groovy context lose sync after serialize / deserialize of scinstance - see : https : / / issues . apache . org / jira / browse / scxml - 239 for details - 'quick and dirty' fix : only use 'plain' simplecontext for protected scxmlsystemcontext internal context and ( by default ) for root context this prevents custom variable ( de ) serialization logic as implemented in groovycontext which causes 'disconnected' duplicate deserialization of the scinstance status object - scxml - 247 will provide a more proper solution .,"scxml - 247 : dedicated scinstanceobjectinputstream to support proper dynamic class resolution in groovycontext - see https : / / issues . apache . org / jira / browse / scxml - 247 for details - groovycontext now can use the 'root' ( scinstance ) objectinputstream for dynamic groovy class resolving - tested through serializableinitialbasescripttest ( unmodified , but again validates new implementation works too )",scxml - 251 : parse src attribute of data elements also : reject data elements which have src and data defined . according to the scmxl standard only src or data are allowed .,scxml - 251 : changes after review * add test to parse expr attribute of data elements * handle non - strict parse configuration correctly * correct indentation,scxml - 251 : correct indentation in test,"scxml - 254 update to current dependencies for groovy , commons - jexl , commons - io , jackson","scxml - 255 use jexl for scxml specification irp test verification adapted the original confecma . xsl in confjexl . xsl to produce jexl datamodel based scxml test definitions . currently 98 jexl tests pass , 70 failing ( for ecmascript : 111 pass , 77 failing )",scxml - 256 add scxmlexecutor . run ( ) ans scxmlsemantics . initialize ( . . . ) methods and scxml early / late binding this fixes 6 scxml irp tests ( both jexl and ecma ),scxml - 257 < send > delay must support decimal values this fixes 3 more w3c irp tests,scxml - 254 replace deprecated ioutils . closequietly ( inputstream ) with try - with - resources block,"scxml - 258 add evaluator strict mode ( boolean ) needed for jexl to properly fail on incorrect expressions also removed obsolete evaluator . assigntype enum and parameters of the #evalassign method , which no longer are used / needed since dropping xpath support ( scxml - 242 )",scxml - 259 complete implementation and handling of system variables event and ioprocessors,scxml - 258 align jexl and javascript evaluator error handling with the groovy evaluator error handling,scxml - 260 < foreach > must fail on using illegal item definition,"scxml - 261 support "" . * "" besides "" * "" as 'any' wildcard event descriptor",scxml - 262 support < script > loaded from external src,scxml - 263 javascript engine ( nashorn ) cannot be shared between multiple scxml instance executions,scxml - 265 support < invoke > namelist attribute,scxml - 266 scxmlsemantics#matchtransition - code flow bug,scxml - 266 scxmlsemantics#matchtransition - code flow bug,scxml - 269 add custom handling for injecting data in the javascript engine ( nashorn ),"scxml - 271 support groovy for running the scxml irp tests after adapting the confgroovy . xsl to use groovy language specific constructs , all w3ctests passed , right away!","scxml - 274 cleanup and fix namespace handling and writing , specifically ( and only needed ) for custom actions namespaces now only are recorded on the root scxml element and for custom actions . for the latter a new customactionwrapper is introduced and the ( currently only ) var commons scxml custom action is now ( during read ) wrapped by it . this now ( also ) allows using a namespace prefix other than the default 'cs' . for java based construction of a scxml model using the var action , a convenient commonsscxml class is added which automatically registers the commons scxml namespace xmlns : cs = ""http : / / commons . apache . org / scxml"" . this allows using the var custom action 'naked' without need to wrap it with customactionwrapper before writing the document with scxmlwriter .","scxml - 275 < content > expression evaluation must fallback to empty string on error , see scxml specification 5 . 6 . 2",scxml - 276 simplify and generalize reading and writing scxml content and data element body values,break out of search loop after correct custom action is found,call static methods from static contexts,"scxml - 278 code cleanup and java8 alignment - remove obsolete code , unused imports - remove duplicate code , move repeated code up to parent class - cleanup exception handling - align with java8 , remove unnessesary type casting , make use of lamba's where useful - fixup references to current / final scxml spec urls - apply protected , private , static , and / or final scoping of fields and methods where possible","scxml - 279 only use default jexl3 setting for silent ( false ) and strict ( true ) , cleanup apis accordingly this drops the api changes from scxml = 258 , allowing to run scxml in strict mode ( non - strict being the default ) which only was applicable for jexl anyway . this also removes the remaining flags in jexlevaluator for dynamically setting silent / strict mode , which were introduced in scxml - 183 . note that the upgrade to jexl3 ( see scxml - 254 ) already made these flags defunct .","scxml - 283 upgrade to junit jupiter this pr migrates the project to the modern junit jupiter 5 . 3 . 1 testing framework . since junit jupiter is not backwards compatible to junit 4 . x , or even junit vintage 5 . x , the patch is a tad large , although most of the changes are just cosmetic . 1 . maven changes : a . org . junit . jupiter : junit - jupiter - api was added to provide the new apis used . b . org . junit . jupiter : junit - jupiter - engine was added as a testing engine . its presence allows maven - surefire - plugin to use the jupiter provider in order to execute tests . c . junit : junit was removed , as it's no longer in suse . 2 . annotations : a . org . junit . jupiter . api . test was used as a drop in replacement for org . juit . test without arguments . see 3 . b for handling of the @ test annotation with an ""expected"" argument . b . org . junit . jupiter . api . beforeeach was used as an drop in replacement for org . junit . before . c . org . junit . jupiter . api . aftereach was used as a drop in replacement for org . junit . after . d . org . junit . jupiter . api . beforeall was used as a drop in replacement for org . junit . beforeclass . e . org . junit . jupiter . api . afterall was used as a drop in replacement for org . junit . afterclass . 3 . assertions : a . org . junit . jupiter . api . assertions' methods were used as a drop in replacements for org . junit . assert's methods with the same name in the simple case of an assertion without a message . in the case of an assertion with a message , org . junit . jupiter . api . assertions' methods were used , but the argument order was changed - assert's methods take the message as the first argument , while assertions' methods take the message as the last argument . b . org . junit . jupiter . api . assertions#assertthrows was used to assert a specific exception was thrown instead of an org . junit . test annotation with an ""expected"" argument . this technique has a side bonus of making the tests slightly stricter , as now they assert the exception was thrown from a specific line and prevent false posivites where the test's ""set - up"" code accidentally threw that exception . the throws clauses of these methods were cleaned up from exceptions that can no longer be thrown in order to avoid compilation warnings .","scxml - 284 issue112test#test01issue112 catch in case an event can't be fired , something is wrong , and the test should fail , not catch and ignore the exception .","scxml - 284 replace try - catch with assertthrows use junit jupiter's new mechanism of assertthrows instead of try - catch blocks in order to clean up the code and make it easier to follow . since the questionable piece of code is now run inside a lambda and is caught by asserthrows itself , there's no need to declare these exceptions in the throws clause of the mehod declarations , and they were cleaned up to avoid adding compiler warnings .",scxml - 284 remove redundant throws declarations in tests,scxml - 285 fix : before executing invoke handlers after a macrostep all internal events must have been processed,validator - 235 urlvalidator rejects url with unicode characters in domain label or tld add url test and fix up domain so it works,remove java 1 . 4 work around,fix some generics,validator - 376 revert the default behavior to the state prior to validator - 273 .,validator - 375 urlvalidator fails on ipv6 url,validator - 380 urlvalidator does not allow for optional port digits,fix most magic numbers,validator - 411 urlvalidator accepts ports above max limit of 16 - bit unsigned integer,generics,generics,replace deprecated method call,generics,generics,generics,simplify,validator - 358 : underscores in domain names are not supported . this fixes #3 from github . thanks to nykolas laurentino de lima .,revert fix for validator - 358 after veto on dev ml,validator - 362 : local part of the email address should not be longer than 64 bytes . thanks to teo bran .,add another edge case test for validator - 362 . thanks to teo bran .,update to current tld list note tp ( east timor ) has been retired,validator - 365 test very long mail string,list html entries not found in ascii database,add latest updates to tld list,check missing entries to see if they are known to be missing from the root database .,update to latest tld list,update to current tlds list,rearrange and simplify,recent updates,html file has extra blank lines don't download file if it is less than an hour old this allows retesting without excess http requests,perform array check before checking for new tlds this makes it easier when manually adding new entries .,recent new tlds,allow testing of invalid check digits,new tlds and ccs,use local array search method to simplify code,validator - 374 email validator : . school domain is being rejected was already fixed - add unit test to show this,validator - 341 make tld list configurable,validator - 361 urlvalidator rejects new gtlds with more than 4 characters,only allow overrides before the class intances have been used,validator - 372 validate 19 digit vpay ( visa ),validator - 369 datevalidatortest . testcompare ( ) fails with gmt - 12,yet more generic tlds,validator - 325 improve iban validation with format checks,allow formats to be updated disallow lower - case in iban as this is definitely not allowed .,stringbuffer = > stringbuilder,validator - 321 issn validator and converter to ean - 13,additional samples,doc,start work on validator - 380,validator - 332 iibancheckdigit . calculate does not enforce initial checksum value,final and spelling,validator - 330 ibancheckdigit . isvalid ( ) returns true for some invalid ibans,validator - 363 urlvalidator rejects path having two or more successive dots,some more tests of multiple dots,validator - 382 duplicates validator - 353,validator - 364 email validator does not support quoted / escaped character in the local part of the email address,checkstyle naming,don't assume that there are 4 groups ; check all the groups that were returned,magic numbers,checkstyle,findbugs - more efficient conversions,todo,validator - 386 - org . apache . commons . validator . routines . domainvalidator . arraytype is not public,update to latest tld list,validator - 359 emailvalidator does not catch invalid email address like dora @ . com,validator - 384 emailvalidator does not support escaped quotes in a quoted string,validator - 351 domainvalidator - allow access to internal arrays,fix indentation,"another day , another tld",also cache the urls used to check for not in root zone entries,"another day , another tld","updated to tld list version 2016011900 , last updated tue jan 19 07 : 07 : 02 2016 utc","cheaper to check the length , so do it before the regex check",revert last commit ; note why it failed,updated to latest tlds,validator - 392 - mastercard series 2 bin ranges ( active from october 2016 ),add missing ' @ override' annotations .,add missing ' @ override' annotations to implementations of interface methods .,add missing ' @ deprecated' annotations .,static fields format should be accessed directly .,unnecessary casts .,"tld list version 2016042500 , last updated mon apr 25 07 : 07 : 01 2016 utc",validator - 391 urlvalidator . isvalid throws exception for fileurls fixed code so it handles urls with no authority field,must also test return code,validator - 394 general modulus ten check digit implementation,validator - 401 : ibanvalidator fails for seychelles and ukraine . thanks to björn raupach for reporting this issue .,recent tld updates,sort to make it easier to detect duplicates and omissions,validator - 405 ibanvalidator - costa rica entry has been updated in swift docs,"test refinements for rfc 3986 , section 3 . 2 . 2 fqdn are returned by dns with a trailing dot .",sort by country - code,santa lucia format is lc2!n4!a24!c not lc2!n4!a24!n minor other tweaks,add belarus ( by ) and iraq ( iq ),add some more samples from thw swift doc,use https since it's available,"updated to version 2017020400 , last updated sat feb 4 07 : 07 : 01 2017 utc",add test to show how to fix validator - 412,validator - 411 urlvalidator accepts ports above max limit of 16 - bit unsigned integer - oops left off change,validator - 411 - decided to use parseint instead of long and forgot to change variable,use constant instead of magic number,also test max + 1,validator - 387 userinfo without colon should be valid in urlvalidator,validator - 413 generic creditcard validation,tab police,javadoc,validator - 415 simplify building new creditcard validators,validator - 415 extend syntax to allow disjoint lengths,more efficient to use valueof ( findbugs ),validator - 418 : urlvalidatortest : testisvalid ( ) does not run all tests . thanks to robert mcguigan .,validator - 419 invalid ipv6 addresses that are ipv4 - mapped pass inetaddressvalidator validation,validator - 420 query params validator shouldn't accept whitespaces,validator - 422 document that check digit routines only validate the check digits,more tests,validator - 423 add isinvalidator,update to current database,"validator - 434 synchronize when iterating a list created with collections . synchronizedlist , as per javadocs . thanks to github user @ emopers! this closes #4",use org . junit . assert instead of deprecated import,update to latest lists,ensure list really is sorted,ibanvalidator fails for el salvador,ibanvalidatortest : add belarus ( by ) valid example ( closes #11 ) patch by h0l0gram ( side - effect : close #10 ),"tld lists updated to version 2018092800 , last updated fri sep 28 07 : 07 : 02 2018 utc",fix up generics,fix up generics,sandbox was not dependent on vfs2 . convert many stringbuffers to stringbuilder . convert hashmap to concurrenthashmap in messages class,use concurrentmap instead of synchronization,fox for vfs - 343 . use atomicinteger instead of synchronizing on filesystem,convert usecount to atomiclong,replace synchronization with locking and / or concurrent objects . add putfileifabsent method to allow callers to safely add to the cache,"workaround for vfs - 245 - equals ( ) , hashcode ( ) and compareto ( ) will return the same results regardless of the filetype changing",[ vfs - 367 ] add api fileobject isfile ( ) .,fix checkstyle issues .,remove extra parens .,"[ vfs - 321 ] abstractfileobject sometimes uses getfilesystem ( ) and sometimes references ""fs"" field directly . i changed to calls to use ""fs"" directly because fs is a private final instance variable , final being the more important aspect imo .",replace all magic string with constants ( except error keys into the message table ) . order all members . change some variable names ( e . g . o - > obj ) . add missing @ override .,[ vfs - 405 ] get / set the file permissions . [ vfs - 415 ] update vfs requirement to java 1 . 6 .,checkstyle : method length is 199 lines ( max allowed is 150 ) . refactor large method .,[ vfs - 442 ] add an hdfs filesystem provider . first commit .,[ vfs - 449 ] hdfs provider is not removing cached files .,[ vfs - 451 ] authentication fails using private key .,sort methods in ab order .,sort in ab order .,"clean up defaultfilemanager init / close lifecycle , field ordering and javadoc .",[ vfs - 544 ] allow virtual file system to be closed . renamed map to typemap . javadoc fixes .,[ vfs - 291 ] zip archives are not properly closed after unzipping and cannot be deleted until the jvm exists .,"[ vfs - 483 ] [ ram ] many suggestions to improve the ram file provider . refactor local data in org . apache . commons . vfs2 . provider . ram . ramfileoutputstream . write ( byte [ ] , int , int ) .",[ vfs - 483 ] [ ram ] many suggestions to improve the ram file provider . use long for fs size limit .,[ vfs - 483 ] [ ram ] many suggestions to improve the ram file provider . use long for fs size limit .,slightly better ivar names .,[ vfs - 483 ] [ ram ] many suggestions to improve the ram file provider . use long for fs size limit . apply test patch https : / / issues . apache . org / jira / secure / attachment / 12596890 / unittest - fsoption . patch . thanks to bernd eckenfels .,[ vfs - 486 ] defaultfilemonitor sleeps for twice the specified delay when checkperrun > 0 . thanks to sam haldane .,[ vfs - 489 ] [ tests ] providerwritetests#testlistener does not fail cleanly . thanks to bernd eckenfels .,[ vfs - 265 ] [ ftp ] set user dir as root dir by default .,tab police,better lvar names .,"[ vfs - 494 ] [ sftp ] no support for sftp servers with non latin - 1 file name encoding . the provided patch did not apply cleanly , this version should be equivalent .",better ivar name : name - > filename .,sort in ab order .,sort in ab order .,[ vfs - 501 ] hide passwords from log / console output . commit a different fix from the suggested patch .,sort in ab order .,refactor to avoid duplicate code ( as reported by cpd ) .,[ vfs - 507 ] update to apache commons collection 4 . 0 from 3 . 2 . 1 and use generics .,pmd : these nested if statements could be combined .,use simple name for org . apache . hadoop . fs . filesystem instead of fqn .,useless parentheses .,use final .,use final .,use simple name for java . lang . reflect . array instead of fqn .,reorg imports .,sort members in ab order .,[ pmd ] random object created and used only once in org . apache . commons . vfs2 . impl . defaultfilereplicator . init ( ) .,sanity check that a custom enum can be properly serialized and deserialized on a give jre .,add missing ' @ override' annotations add missing ' @ override' annotations to implementations of interface methods add missing ' @ deprecated' annotations,remove unnecessary parentheses,"< action issue = ""vfs - 514"" dev = ""ggregory"" type = ""update"" due - to = ""bernd eckenfels"" > [ tests ] permissionstests leaves unclean test directory . < / action >","< action issue = ""vfs - 500"" dev = ""ggregory"" type = ""update"" due - to = ""bernd eckenfels"" > vfsclassloader . findresources missing . < / action >",[ vfs - 500 ] [ tests ] use a non - delegating parent class loader to fix continuum ci test failure due to found system resource .,[ vfs - 520 ] make javadoc compatible with javadoc tool from java 8 . ( there are still 100 warnings mostly about missing @ return and @ param ),[ vfs - 167 ] [ ftp ] add proxy support .,[ tests ] test eof condition handling in providers . ( merges ( with modifications ) https : / / github . com / apache / commons - vfs / pull / 3 ),remove commented out code and straighten doc comments .,"[ vfs - 453 ] set socket and connect timeout for http , https and webdav providers . ( contributed by jiri syrovy in https : / / github . com / apache / commons - vfs / pull / 6 )","[ vfs - 526 ] [ hdfs ] [ tests ] enable hdfs testing on windows ( remove maven profile ""hdfs"" )",[ vfs - 338 ] [ local ] [ tests ] avoid indexoutofboundsexception when validating local file uris .,[ vfs - 532 ] [ ftp ] allow configuring remoteverificationenabled on ftpclient instances .,[ vfs - 521 ] [ ram ] [ tests ] fix monitoroutputstream for java 8,make test harness cleanup temp dir,"[ vfs - 545 ] remove and avoid filesystems in cache . add / fix javadoc , added unittests .",additional unit tests,tab police,[ vfs - 142 ] remove instead of null out filecontentthreaddata,"[ vfs - 519 ] javadoc fixes , removed final from interface signature .",add unit test related to vfs - 519,[ vfs - 523 ] hdfsfileobject uses super equals / hashcode like all fos,[ vfs - 487 ] defaultfilemonitor detect re - creation events,[ vfs - 309 ] defaultfilecontent will remove thread data on close to avoid leaks,"style police ( make checkstyle happy : line breaks , whitespace , imports , bracestyle )",[ tests ] findbugs : fix assertion format,javadoc cleanup,style police for examples ( remove all findbugs and most checkstyle errors ),[ example ] vfs shell : implement 'info' command and print version .,[ examples ] make findbugs happy,[ tests ] [ hdfs ] make dfsminicluster start up more robust by cleaning test data dir,[ tests ] [ hdfs ] fix nullpointerexception in tests on linux,[ example ] shell : sort compressed and dispatcher filesystems to virtual .,[ vfs - 530 ] [ hdfs ] update hadoop - commons etc to 2 . 6 . 0,[ sandbox ] resolve all checkstyle warnings in mime provider,[ sandbox ] resolve all checkstyle warnings in smb provider,[ sandbox ] resolve checkstyle warnings in sandbox utils . make sandbox prominent in javadoc . move racrandomaccessfile to sandbox util .,"[ core ] remove java8 javadoc warnings , cleanup comments .",[ vfs - 558 ] make moveto and getparent work with on call,typo and unused import,[ vfs - 557 ] [ webdav ] avoid temp and empty directories after test,"vfs - 555 : add the ability to specify an alternate hdfs configuration file to override any specific hdfs settings . one use for this is to set a different value for the dfs . client . use . datanode . hostname property in order to access hdfs files stored in an aws installation ( from outside their firewall ) . there are other possible uses too . there is now an ""configname"" property in hdfsfilesystemconfigbuilder which can be set in the file system options in order to set an alternate config file . this file can have any number of option settings which will add to or override the default settings . in other words , this file is loaded after the default one ( which resides in the hdfs . jar file ) .","[ vfs - 555 ] additional javadoc , changes . xml and cleanup .","remove checkstyle , findbugs and pmd errors : add javadoc , fix line length and redundant braces","[ tests ] more seperate last modified tests , added todo for vfs - 563",document getlastmodtimeaccuracy inaccuracy and make test ignore it again .,[ vfs - 564 ] make some loggers static .,[ vfs - 236 ] [ smb ] allow smb to be used with empty authentication .,[ vfs - 560 ] [ http ] avoid head request to server root when creating fs .,removed unused variable,relax idendity test requirements ( part of vfs - 550 ),[ vfs - 202 ] [ http ] allow 405 for head requests .,[ vfs - 198 ] [ http ] make user - agent configurable .,vfs - 297 : fix filesystemoptions . compareto ( ) . implement equals ( ) and hashcode ( ) .,[ vfs - 279 ] better support for on call cache,fix cut + paste javadoc comment .,[ vfs - 577 ] fix and test fileoperationsprovider lifecycle .,[ vfs - 572 ] better javadoc .,[ vfs - 567 ] [ ftp ] ignore exceptions on disconnect .,[ vfs - 549 ] use file . separator .,[ vfs - 480 ] avoid leaks by startng softrefsreleasethread more reliable .,cleanup locking of container collections .,[ vfs - 582 } [ tests ] revert gettestdirectoryfile rename .,provide tostring ( ) for options keys and fix trailing blanks,[ vfs - 583 ] avoid layered filesystem leak when options are used . added tests .,remove outdated todo marker,"add new testdir , refresh test - data archives","[ vfs - 490 ] do not layer folders with . jar extension , add tests . closes #2 on github .",[ vfs - 424 ] fix standardfilesystemmanager class loading so it works in a osgi environment .,remove debug output in vfsclassloadertests .,"vfs - 586 : add several additional ways to specify an alternate hdfs configuration . motivation : the previous changes in this area allowed specifying the name of one resource ( in the classpath ) for an alternate configuration . further use with this feature showed the need for being able to specify more than one resource ( possibly ) , and to be able to load configurations from local files as well as basically any way that hdfs configuration parameters can be specified ( according to the hdfs apis ) . changes : therefore , the api in hdfsfilesystemconfigbuilder was greatly extended to allow : a ) multiple resource names to be given ; b ) file system paths to be specified ( one or many ) ; c ) urls to be listed ( multiple if desired ) so configuration can be loaded from a web application ; d ) another hdfs configuration object ( one of these ) ; e ) any miscellaneous inputstream ( only one of these ) . and the configuration step in hdfsfilesystem was enhanced to check for all these possible sources of configuration information and add the available ones to the hdfs ""configuration"" object during initialization . one of the existing apis was changed : getconfigname - > getconfignames ( with a corresponding change to the return type : string - > string [ ] ) . note : i have not been able to figure out a good unit test for this yet , but it is working quite well in our application .",[ vfs - 600 ] temporarily ignore failing test case,[ vfs - 603 ] restore old constructors on compressed file objects,vfs - 605 test against https : / / www . apache . org / instead of https : / / www . google . com /,restore binary compatibility with 2 . 0 .,restore binary compatibility with 2 . 0 .,restore binary compatibility with 2 . 0 .,use try - with - resources .,redundant specification of type arguments .,statement unnecessarily nested within else clause .,do not need lvar .,[ vfs - 621 ] add api vfs . setmanager ( filesystemmanager ) .,remove redundant type arguments .,[ vfs - 628 ] add a file inverter fileselector : invertincludefileselector .,"this class can be abstract , subclasses run the actual tests .",rename class to make it obvious that it is not to be run as a test but to be subclassed .,[ vfs - 620 ] fileobject . moveto ( fileobject ) api doesn't work well for a linux ftp .,no longer need to extend testcase in junit 4 .,format for more standard brace usage .,add failing test for tests https : / / issues . apache . org / jira / browse / vfs - 291 with @ ignore .,no need for temp var .,use try - with - resources .,always use blocks .,use final .,vfs - 189 : fail with exception if base filename is null,filelocktestcase : use temporary file,"filelocktestcase#testcannotdeletewhilestreaming , filelocktestcase#testcannotdeletewhilestreaming2 : fix non - windows operating systems",vfs - 642 : upgrade to jcifs 1 . 3 . 17 ( closes #18 ) patch contributed by ilan goldfeld,update formatting to { on the same line .,add tostring ( ) .,update formatting to { on the same line and easier to read javadoc .,add tostring ( ) .,update formatting to { on the same line and easier to read javadoc .,do not hide java . io . bufferedinputstream . count .,better lvar name .,better test names before i add more test methods .,add a few tests .,better test assetion .,remove redundant super - interface .,remove redundant super - interface .,remove redundant super - interface .,remove redundant super - interface .,remove redundant super - interface .,remove redundant super - interface .,remove redundant super - interface .,remove redundant super - interface .,remove redundant super - interface .,static fields should be accessed directly .,do not need to nest else block .,do not need to nest else block .,do not hide other fields .,test clean up : use a . zip extension for temp file and don't hard code class name .,[ vfs - 643 ] vfs should not log at the info level .,add tostring ( ),add test .,"tests that we can read more than one file within a zip file , especially after closing each fileobject .",update for style { on same line .,add tests to parse xml files while validating with xsd files within the same zip file . i am seeing a closed input stream bug in an application that i am trying to reproduce .,add tests to parse xml files while validating with xsd files within the same zip file . i am seeing a closed input stream bug in an application that i am trying to reproduce .,less cryptic lvar names .,less cryptic internal names .,refactor magic number into a constant .,format to use { on the same line .,better param name .,add debug helpers .,better @ ignore comment .,better less mysterious internal names .,better assertion messages .,[ vfs - 291 ] zip archives are not properly closed after unzipping and cannot be deleted until the jvm exists . do not close underlying zipfile too aggressively ; only do so if all open streams are not in use!,[ vfs - 644 ] abstractfilesystem . streamclosed ( ) always sets openstream count to zero .,[ vfs - 291 ] zip archives are not properly closed after unzipping and cannot be deleted until the jvm exists . do not close underlying zipfile too aggressively ; only do so if all open streams are not in use!,update tests from apache httpcomponents httpcore 4 . 3 . 2 to 4 . 4 . 7 .,"zipfileobjecttestcase : fix #testreadingfilesinzipfile , #testreadingoneafterclosinganotherfile and #testreadingoneafterclosinganotherstream on non - windows operating systems ( closes #22 )",fix typo in ivar name .,remove unused exceptions .,looking for an npe . . .,looking for an npe . . .,release test resource .,looking for an npe . . .,[ vfs - 589 ] sftp moveto operation hangs if the server does not support ssh channelexec .,use final .,[ vfs - 652 ] adjust documentation of patternfileselector and add tests .,fix compiler warnings .,fix compiler warnings .,fix compiler warnings .,[ vfs - 653 ] replace use of deprecated apis in hdfs provider .,[ vfs - 657 ] fileselector implementations like filedepthselector should throw exception .,[ vfs - 614 ] monitorinputstream should not close the stream in read ( ) . patch by otto fowler . i added an eol to the new file . closes #30 .,"[ vfs - 667 ] org . apache . commons . vfs2 . provider . res . resourcefileprovider . findfile ( fileobject , string , filesystemoptions ) should throw a org . apache . commons . vfs2 . filesystemexception instead of a npe when the class loader is null .",[ vfs - 668 ] throw a npe with a better message when a class loader is null .,[ vfs - 669 ] org . apache . commons . vfs2 . util . combinedresources . loadresources ( string ) should not throw an npe for the system class loader is null .,use final .,[ vfs - 675 ] nullpointerexception at abstractfileobject . java : 221 .,[ vfs - 678 ] fix various lgtm . com warnings .,[ vfs - 678 ] revert uneeded synchronize,[ vfs - 678 ] use arrays . tostring,"[ vfs - 360 ] migrate to httpcomponent httpclient . this patch from woonsan ko ( woonsan on github ) adds a new provider ""http4"" using apache httpcomponents httpclient 4 . pr https : / / github . com / apache / commons - vfs / pull / 38 . closes #38 .","[ vfs - 360 ] migrate to httpcomponent httpclient . this patch is from woonsan ko ( woonsan on github ) switching http ( n ) / s providers easily for default http / s schemes . closes #40 . improvements : set httpclient v3 based providers to both schemes http / s and http3 / s . so , we can use it through http3 / s as well . set default http / s scheme in httpclient v3 provider . improved shell to easily switch providers . xml configuration through system property . e . g , mvn - pshell - dhttp3 - dhttp4 - dproviders = providers - http4 - default . xml , with an example setting http4 / s as default http / s in commons - vfs2 - examples / . see commons - vfs2 - examples / readme . md for detail . add pwfs command to print the current working file system , next to pwd , which is useful when verifying which http ( n ) provider is being really used for http / s scheme for example .",use final .,add missing ' @ override' annotations .,use enhanced for loops .,remove trailing white spaces on all lines .,rest of giraph - 701 .,giraph - 734,giraph - 736 : bring back findbugs ( nitay ),giraph - 732,giraph - 752 : better support for supernodes ( majakabiljo ),giraph - 755 : make zookeeper port list available to input / output format ( armax00 via claudio ),giraph - 805,giraph - 792 : print job progress to command line ( majakabiljo ),giraph - 832 : test don't finish after giraph - 792 ( majakabiljo ),giraph - 840 : upgrade to netty 4 ( pavanka via majakabiljo ),giraph - 873 : specialized edge stores,giraph - 907 : refactor giraph code to support multiple implementations of vertexid data ( pavanka ),giraph - 908 : support for partitioned input in giraph ( pavanka ),giraph - 842 : option to dump histogram of memory usage when heap is low on memory ( pavanka ),giraph - 903 : detect crashes of netty threads ( edunov via pavanka ),giraph - 924 : fix checkpointing ( edunov via majakabiljo ),giraph - 927 : decouple netty server threads from message processing ( edunov via pavanka ),giraph - 931 : provide a strongly connected components algorithm ( gianluca via majakabiljo ),"reduce / broadcast api summary : adding reduce and broadcast api reduce and broadcast api should be a simplest comprehensive api for what it and aggregators do , and has somewhat simpler implementation , since there is no strange interaction with values from previous and next superstep . it is very flexible and allows building more complex abstraction on top of it . aggregators api is built on top of it in aggregatortoglobalcommtranslation , when reverse is not true , which shows it is more flexible then previous api . once primitive types diff goes in , it will be trivial to create generic reducers ( instead of having huge number of specialized aggregators ) current aggregator api has multiple issues : - no matter whether aggregated values are needed on workers , they are distributed to them - there is no way to register aggregator for a single superstep - in order for master to send data to workers , it needs to go through an aggregator - even though it can only be writable - value to be aggregated and result of aggregation need to be of the same type - logic of how to do aggregation is combined with how aggregator is kept ( i . e . aggregate ( valuetoaggregate ) , instead of aggregate ( currentaggregatedvalue , valuetoaggregate ) ) , and so every aggregator needs to extend basicaggregator , but that still limits what can be done . related to https : / / phabricator . fb . com / d1303953 test plan : all unit tests , will run some jobs on production . will add unit test to use reduce / broadcast directly , instead of through aggregators reviewers : majakabiljo , avery . ching , pavanka , sergey . edunov , maja . kabiljo differential revision : https : / / reviews . facebook . net / d21423","auto - restart from checkpoint doesn't pick up latest checkpoint summary : while running different jobs with checkpoints enabled i noticed some issues : 1 ) the way we pick up latest checkpoint is not correct . current implementation just picks whatever is returned last from filesystem . list ( ) , which is not necessarily the last checkpoint 2 ) if job restarts from checkpoint it immediately creates another checkpoint . 3 ) we need more flexibility in giraphjobretrychecker to allow restarts after multiple failures . test plan : run our production jobs with checkpointing reviewers : majakabiljo , pavanka , pavanka . 26 , maja . kabiljo reviewed by : maja . kabiljo differential revision : https : / / reviews . facebook . net / d23913",giraph - 975 in - proc zookeeper server with master process https : / / reviews . facebook . net / d30693,"giraph - 1036 : allow mappers to fail early on exceptions summary : often when something fails in a mapper we see it stuck until its timeout passes . digging through this issue i found two root causes : - many threads we are creating were not daemon , preventing process to exit , only main thread should be daemon - when calling submit on executorservice , exceptions are not propagated back to the caller , unless get is called on the future . in progressableutils . getresultswithncallables we were calling get on one by one future , causing us to have to wait for previous futures to finish before getting exception which happened in later one . test plan : run jobs in which i simulated exceptions on some partitions in loading , compute and storing phases , for each verified we exit quickly with exception clearly shown , and without this change we'd wait for timeout and other threads from same progressableutils . getresultswithncallables to finish . run a normal job successfully . mvn clean verify differential revision : https : / / reviews . facebook . net / d49143",giraph - 1039 : fix stopping jmap histo thread summary : currently if jmap histo frequency is set to long period we end up stuck in the end of the job for a long time waiting on jmap histo thread test plan : ran a job with long jmap frequency - verified it gets stuck without this change and finishes fine with it differential revision : https : / / reviews . facebook . net / d50085,"giraph - 1046 : add a way to synchronize full gc calls across workers summary : in applications which use memory more heavily , we can see full gc pauses happening on different workers at different times , and each of these is causing some delay because other workers are often waiting on something from the worker in gc ( closing open requests , finishing superstep , etc ) . having a way to coordinate when full gcs are called could help them have less effect on job performance . test plan : ran some memory heavy jobs where i observed overall better performance from using this feature . differential revision : https : / / reviews . facebook . net / d55347","new out - of - core infrastructure ( first patch including fixed out - of - core mechanism ) summary : this is a re - design of out - of - core mechanism . the new implementation allows for much more intelligent partition scheduling and io . test plan : mvn clean verify reviewers : maja . kabiljo , sergey . edunov , avery . ching , dionysis . logothetis reviewed by : dionysis . logothetis differential revision : https : / / reviews . facebook . net / d54549",giraph - 1065 : allow extending jobprogresstrackerservice summary : we might want to perform additional actions on events from jobprogresstrackerservice . allow overriding it and specifying another class to use . test plan : ran a job with custom jobprogresstrackerservice and verify actions on it are called differential revision : https : / / reviews . facebook . net / d58383,"integrating out - of - core mechanism with credit - based flow - control and data generation tethering summary : this diff integrates out - of - core infrastructure with credit - based flow control and adds the ability to tether the rate of data generation / processing . data generation / processing rate is controlled by changing the number of active processing ( input / compute ) threads . this diff also implements a new ( and more performant ) adaptive out - of - core policy . test plan : mvn clean verify all snapshot tests including ones with large data pass running adaptive out - of - core on large graph with very limited memory does not fail . this diff should enable us to avoid * any * reasonable job to fail! reviewers : maja . kabiljo , sergey . edunov , avery . ching , dionysis . logothetis reviewed by : dionysis . logothetis subscribers : ramesh - muthusamy differential revision : https : / / reviews . facebook . net / d55479","giraph - 1068 make zookeeper accept 0 as a port number and let it choose any available free port summary : we have a few use cases where having zookeeper bound to specific port is very inconvenient . 1 ) unit tests that run in parallel . 2 ) shared clusters where multiple giraph instances can run on the same machines . in theory we don't need to know what port zookeeper will run on . in most cases we're fine with any port available . picking any available port is currently supported by the server socket , but is not supported in the code that parses zookeper configs ( this code lives in zookeper ) . we don't have to parse configs though , as we have a way to run zookeper in process . and in that case we can have a full control on how zookeeper is initialized . for this task i want to allow 0 as a port number for zookeeper . which will allow us to run zookeeper on any available port . and i will also remove ""out of process"" zookeeper , as it clearly provides no benefits to us . note : it will still be possible to run external zookeper , if you have it running somewhere as a service . note2 : this change is intended to remove the functionality to support multiple zk servers running as a part of the giraph job and only support a single zk server . if you want to run multiple zookeepers , you need to configure them separately and let giraph use existing zookeper quorum test plan : tested a few things : picking any available port - dgiraph . zkserverport = 0 using external zookeeper : - dgiraph . zklist = ""hadoopxxx . yyy . facebook . com : 22181"" using specified port : - dgiraph . zkserverport = 22128 reviewers : majakabiljo , maja . kabiljo , dionysis . logothetis , avery . ching , heslami reviewed by : avery . ching , heslami differential revision : https : / / reviews . facebook . net / d59109","giraph - 1077 : jobs getting stuck after channel failure summary : when a channel fails currently we just log the failure . since we don't wait on open requests from every place , checking requests doesn't get called always , and we've seen issues with jobs staying stuck , for example during the input stage when request for split to read from worker to master fails . when we know that channel failed , we should try to resend the requests from that channel . test plan : ran a job multiple times until i got failure of channel between master and worker to happen , without this change job would get stuck but with it it ran successfully . differential revision : https : / / reviews . facebook . net / d59895","giraph - 1086 : use pool of byte arrays with inmemorydataaccessor summary : have a pool of byte arrays with inmemorydataaccessor , to save on byte array creation and initialization . test plan : improved performance of a job using inmemorydataaccessor differential revision : https : / / reviews . facebook . net / d60621","giraph - 1087 : retry requests after channel failure summary : we currently don't have a callback to retry requests after channel failure , and would either wait for request timeout or not retrying request at all at places where we don't wait for open requests . test plan : hard to reproduce the issue ( ran many jobs but was unable to ) , we'll see if the problem happens again in prod with this change . differential revision : https : / / reviews . facebook . net / d60675",add missing files for giraph - 1125 . closes #12,closes #28,"[ giraph 1013 ] apply @ edunov fix for block output summary : apply fix : https : / / phabricator . fb . com / d2141200 test plan : mvn clean install reviewers : maja . kabiljo , sergey . edunov , dionysis . logothetis reviewed by : dionysis . logothetis differential revision : https : / / reviews . facebook . net / d40395","[ giraph 1013 ] adding testgraphutils and numerictestgraph summary : adding simplified framework for running application tests . code for testing is going to be much shorter , especially when java 8 is used . only difference compared to our codebase is addition of sendingmessagestest to showcase these capabilities test plan : mvn clean install reviewers : dionysis . logothetis , sergey . edunov , maja . kabiljo reviewed by : maja . kabiljo differential revision : https : / / reviews . facebook . net / d40533","giraph - 1017 : add support for immutablemap in kryo summary : trying to serialize immutablemap currently throws an exception - we should add a support for it . test plan : added a test , verified that app which was failing without the change passes now reviewers : ikabiljo differential revision : https : / / reviews . facebook . net / d40575","[ giraph - 1013 ] adding prepare graph library in java8 summary : adding simple graph preparation : - symmetric - removal of isolated edges - normalizing - connected components creating a new module , only used for phadoop facebook , which is written in java8 . tests are new / modified from what is in our repo , the rest is identical . test plan : mvn clean install reviewers : maja . kabiljo , dionysis . logothetis , sergey . edunov reviewed by : sergey . edunov differential revision : https : / / reviews . facebook . net / d40719","giraph - 1018 : improving partitionstore api to better match its expected behaviour ( heslami via aching ) summary : currently for statistics operations on each partition , entire partition is loaded using getorcreatepartition method of partitionstore . this diff improves the api of partitionstore by adding required methods to only return the statistics . test plan : mvn clean verify reviewers : dionysis . logothetis , maja . kabiljo , avery . ching reviewed by : avery . ching differential revision : https : / / reviews . facebook . net / d40731","[ giraph - 1013 ] adding more libraries , algos and examples summary : adding more libraries , algos and examples only changes from our internal state : new classes : pairreduce maxmessagecombiner partitioningstats testmessagechain change to : pieces sendmessagechain test plan : mvn clean install - phadoop facebook reviewers : maja . kabiljo , dionysis . logothetis , sergey . edunov reviewed by : sergey . edunov differential revision : https : / / reviews . facebook . net / d40935","[ giraph - 1019 ] optimizing and debugging vertex mutation mechanism summary : the old implementation of vertex mutation mechanism was single - threaded and had some redundant computation . the single threaded behavior is causing a huge performance degradation for out - of - core case , since all the partitions are being read and written sequentially in one thread to apply mutations . also , in case where a vertex is mutated and has messages at the same time , the current code fails to execute which does not seem to be the expected behavior . this diff implements an optimized multi - threaded approach for vertex mutations . with this diff , vertex mutation happens at the beginning of processing each partition . also , parts of partition migration code is modified to migrate mutations as well . test plan : mvn clean verify reviewers : avery . ching , maja . kabiljo , dionysis . logothetis reviewed by : dionysis . logothetis differential revision : https : / / reviews . facebook . net / d40821","[ giraph - 1020 ] taskinfo equality condition bug fix summary : currently equality is checked based on the raw host - name of an object with lower - case host - name of another object . this is not the right semantic and can cause subsequent bugs in partition assignment and migration . test plan : mvn clean verify reviewers : maja . kabiljo , sergey . edunov , dionysis . logothetis , avery . ching reviewed by : dionysis . logothetis differential revision : https : / / reviews . facebook . net / d42273","giraph - 1021 : missing progress report for graph mutations fix progress report for graph mutations summary : progress report in the new implementation of graph mutation is missing . this can cause lack of progress errors at runtime for mutations on high degree vertices test plan : mvn clean verify reviewers : avery . ching , dionysis . logothetis , maja . kabiljo , sergey . edunov differential revision : https : / / reviews . facebook . net / d42309","[ giraph - 1022 ] adaptive out - of - core mechanism for input superstep and graph summary : this code adds the ability to adaptively control the out - of - core mechanism for graph data structure at run - time during input / output superstep and computation superstep . basically , the implemented mechanism monitors the amount of available free memory in a separate thread . if there is not enough memory , the code adjusts the number of partitions in memory , and spills a series of partitions / buffers to disk . also , if the amount of free memory is more than expected , some of the on - disk partitions are brought back to memory . additionally , if amount of free memory is marginal , the mechanism mocks the memory usage by gradually bringing partitions to memory . test plan : mvn clean verify unit tests added to giraph - core end - to - end test added to giraph - example running the code on pagerank on a large graph and not getting oom failures . reviewers : maja . kabiljo , sergey . edunov , avery . ching , dionysis . logothetis reviewed by : dionysis . logothetis differential revision : https : / / reviews . facebook . net / d40563","[ giraph - 1023 ] adding out - of - core messages to previously implemented adaptive out - of - core mechanism summary : this is the continuation of the previous diff on out - of - core mechanism . this diff completes the last diff by adding out - of - core messages , making the entire out - of - core mechanism a cohesive entity in giraph . this diff also improves the api of partitionstore by some minor refactoring . test plan : mvn clean verify running pagerank and turning message combiner off on a large graph with limited memory does not fail reviewers : maja . kabiljo , sergey . edunov , avery . ching , dionysis . logothetis reviewed by : dionysis . logothetis differential revision : https : / / reviews . facebook . net / d42897","fixing large sets summary : sets with a large number of elements ( > 800000000 ) are not supported by intopenhashset . chaning it to intopenhashbigset . arraylists have the same problem , but we'll postpone the fix untill we have a use case https : / / issues . apache . org / jira / browse / giraph - 1028 test plan : mvn clean install see also a new test testcollections ( that needs 32g to run ) reviewers : sergey . edunov , maja . kabiljo , ikabiljo reviewed by : ikabiljo differential revision : https : / / reviews . facebook . net / d44859",[ giraph - 1031 ] adding onallmappersstarted callback,"merge seeded and unseeded bfs into a single bfs implementation summary : this change creates a general breadth first search version which supports the default bfs where distances to one or more seeds are computed . additionally , this new version also supports assigning vertices to closest seeds for the purpose of clustering the vertices . this change provides a blockfactory which highlights this functionality in addition to test cases . test plan : test cases for the new functionality added . reviewers : spupyrev , ikabiljo reviewed by : ikabiljo subscribers : dionysis . logothetis , sergey . edunov , maja . kabiljo differential revision : https : / / reviews . facebook . net / d47985","giraph - 1033 : remove zookeeper from input splits handling summary : currently we use zookeeper for handling input splits , by having each worker checking each split , and when a lot of splits are used this becomes very slow . we should have master coordinate input splits allocation instead , making the complexity proportional to #splits instead of #workers * #splits . master holds all the splits and worker send requests to him asking for splits when they need them . test plan : run a job with 200 machines and 200k small splits - without this change input superstep takes 30 minutes , and with it less than 2 minutes . also verified correctness on sample job . mvn clean verify passes . differential revision : https : / / reviews . facebook . net / d48531",giraph - 1035 : make sure we are able to use all compute threads summary : the default logic of choosing the number of partitions when we use few workers and a lot of compute threads ends up choosing less partitions than there are threads . add additional setting to prevent that . test plan : run a job with a few workers and lot of threads and verified number of partitions is set properly . mvn verify passed . differential revision : https : / / reviews . facebook . net / d48993,"giraph - 1034 allow ips for worker2worker communication test plan : run several jobs in unreliable dns environment . with and without - dgiraph . preferip = true without this options job fail , but pass otherwise . reviewers : dionysis . logothetis , maja . kabiljo reviewed by : maja . kabiljo differential revision : https : / / reviews . facebook . net / d48825","[ giraph - 1037 ] surface worker index information to computations summary : it can be useful for applications to surface : number of workers index of a worker particular vertexid is assigned to index of a current worker . test plan : mvn clean install reviewers : dionysis . logothetis , sergey . edunov , maja . kabiljo reviewed by : maja . kabiljo differential revision : https : / / reviews . facebook . net / d49401","make intsupplier extend serializable summary : lambdas with intsuppliers don't get serialized . test plan : n / a reviewers : ikabiljo , sergey . edunov reviewed by : sergey . edunov differential revision : https : / / reviews . facebook . net / d50973","use partitions in localblockrunner summary : speed up localblockrunner , by not operating on a testgraph , but on vertices stored in partitions . with it - deprecate old non - simplepartitionerfactory way of specifying partitioning . ( and with it renamed simplepartitionerfactory to old name graphpartitionerfactory , and changing it to graphpartitionerfactoryinterface ) test plan : run unit - test for speed : testemptyiterationssmallgraph 6 . 5 - > 6 . 3 testemptyiterationssyntheticgraphlowdegree ( ) 42 . 0 - > 13 . 8 testemptyiterationssyntheticgraphhighdegree ( ) 3 . 6 - > 2 . 0 testpageranksyntheticgraphlowdegree ( ) 51 . 0 - > 47 . 2 testpageranksyntheticgraphhighdegree ( ) 20 . 3 - > 17 . 4 reviewers : maja . kabiljo , sergey . edunov , dionysis . logothetis reviewed by : dionysis . logothetis differential revision : https : / / reviews . facebook . net / d52425","implementation of directwritableserializercopytest . copy ( ) summary : needed in certain application . test plan : mvn clean install also run an actual application . reviewers : maja . kabiljo , sergey . edunov , ikabiljo reviewed by : ikabiljo differential revision : https : / / reviews . facebook . net / d52149","add preparegraphpieces . issymmetricblock to check for a symmetric graph summary : preparegraphpieces . issymmetricblock is a reusable factory function for creating blocks that check if a graph is symmetric by xor reducing a preditable hash of the edges pairs ( v1 , v2 ) test plan : unit tests for all changed files , testing on demo graphs . will run a full test job . reviewers : spupyrev , dionysis . logothetis , ikabiljo , maja . kabiljo reviewed by : maja . kabiljo subscribers : maja . kabiljo differential revision : https : / / reviews . facebook . net / d54411","making threads in jobprogressservice daemons summary : we noticed that sometimes job client doesn't finish because threads in jobprogressservice are still running . here we're making them daemons , so that if everything else is done , we will be able to finish application . test plan : run test job reviewers : majakabiljo , dionysis . logothetis , maja . kabiljo reviewed by : maja . kabiljo differential revision : https : / / reviews . facebook . net / d53829","[ easy ] log aggregate times per piece at the end test plan : it prints : 16 / 03 / 04 12 : 46 : 38 info internal . blockmasterlogic : time sums master : count time % time name 34 37 . 50 % 00 : 00 : 00 pagerankcheckconvergence 34 62 . 50 % 00 : 00 : 00 pagerankupdate 68 00 : 00 : 00 total 16 / 03 / 04 12 : 46 : 38 info internal . blockmasterlogic : time sums worker : count time % time name 33 50 . 00 % 00 : 00 : 00 [ receiver = pagerankcheckconvergence , sender = pagerankupdate ] 1 0 . 82 % 00 : 00 : 00 [ receiver = pagerankcheckconvergence , sender = null ] 34 47 . 54 % 00 : 00 : 00 [ receiver = pagerankupdate , sender = pagerankcheckconvergence ] 1 1 . 64 % 00 : 00 : 00 [ receiver = null , sender = pagerankupdate ] 69 00 : 00 : 00 total reviewers : dionysis . logothetis , sergey . edunov , maja . kabiljo , spupyrev reviewed by : spupyrev differential revision : https : / / reviews . facebook . net / d55113",increase info - logging while waiting for straggler workers summary : keep logging info messages while waiting for task - time - out test plan : all unit tests are passing . manual tests to ensure desired functionality is observed . reviewers : maja . kabiljo subscribers : dionysis . logothetis differential revision : https : / / reviews . facebook . net / d55467,"[ giraph - 1041 ] generate primitive type specific code for functions summary : - use freemarker library to generate primitive type specific code . initially generating two sets of files : { type } consumer , obj2 { type } function right now generation happens manually , and generated files are being committed . in the future we can move those to a separate project , and have them generated when maven is compiling and deploying . splitting of d52515 into reviewable pieces test plan : mvn clean install there are no changes in logic in this diff . reviewers : spupyrev , sergey . edunov , dionysis . logothetis , maja . kabiljo reviewed by : maja . kabiljo differential revision : https : / / reviews . facebook . net / d55527","[ giraph - 1041 ] generate primitive type specific code summary : - use freemarker library to generate primitive type specific code . initially generating three sets of files : { type } consumer , { type } typeops and w { type } arraylist right now generation happens manually , and generated files are being committed . in the future we can move those to a separate project , and have them generated when maven is compiling and deploying . additionally to generation change , basicarraylist is renamed to warraylist and directly extends fastutil implementation , to now serves two purposes : - generic handling of efficient arrays through typeops - extended fastutil class - to make it writtable , to add useful java8 methods , or anything else we can think of . since we are just extending it , and there is no efficiency penalty , we can always use wlongarraylist instead of longarraylist . there is additional wreusablelongarraylist , which when readfields is called , doesn't size it to exact size , but reuses the old length . test plan : mvn clean install there are no changes in logic in this diff . will send a small separate diff with some examples of what is now simpler . reviewers : sergey . edunov , dionysis . logothetis , spupyrev , maja . kabiljo differential revision : https : / / reviews . facebook . net / d52515","unsafe byte readers / writers summary : using unsafe readers / writers test plan : tested on pagerank app , and fanout computation . in both cases , there is a ~ 20 % speedup jira : https : / / issues . apache . org / jira / browse / giraph - 1049 reviewers : sergey . edunov , maja . kabiljo , dionysis . logothetis , ikabiljo reviewed by : ikabiljo differential revision : https : / / reviews . facebook . net / d55509","faster varint summary : varint is improved in two ways : - faster readlong and readint - making sure that negative numbers can be encoded jira : https : / / issues . apache . org / jira / browse / giraph - 1049 test plan : testvarint . java reviewers : dionysis . logothetis , maja . kabiljo , sergey . edunov , ikabiljo reviewed by : ikabiljo differential revision : https : / / reviews . facebook . net / d55755","unsafe readers for varints summary : varint encdoing ( and hence , longdiffnullarrayedges ) can be much faster if using unsafebyteinput / output . in fact , the speed of iterating over longdiffnullarrayedges is almost as fast as iterating over longnullarrayedges after the change . this difference is less than a few percent for jobs that require a lot of edge iterators , while it is significant ( over 20 % ) without the change . jira : https : / / issues . apache . org / jira / browse / giraph - 1049 test plan : mvn clean install reviewers : sergey . edunov , maja . kabiljo , dionysis . logothetis , ikabiljo reviewed by : ikabiljo differential revision : https : / / reviews . facebook . net / d56169","improve flow control on sender side ( pre - requisite for credit - based flow control ) summary : currently , a sender worker will keep all open requests ( and optionally up to a certain number of total open requests ) in its own memory . this behavior may cause high memory usage in sender side . also , since messages can arrive to a worker at an arbitrary rate , receiver may not have the ability to handle all incoming messages , hence we may see a large memory footprint in receiver as well . this diff addresses the problem by limiting the number of open requests per worker in sender side . also , it provides a cache of unsent requests on sender in case the sender already sent enough messages to another worker but has not received any response back . test plan : mvn clean verify reviewers : avery . ching , sergey . edunov , maja . kabiljo , dionysis . logothetis reviewed by : dionysis . logothetis subscribers : alessio differential revision : https : / / reviews . facebook . net / d43797","giraph - 1050 : add mapperobserver summary : add mapperobserver which will be called once per mapper before anything else happens . test plan : ran a job with mapperobserver set , verified it's called at the right time differential revision : https : / / reviews . facebook . net / d56373","giraph - 1054 : separate thriftservice from jobprogresstrackerservice on the client summary : * moves the job tracker conf options into the giraphconstants * factors out the static giraphjob#startthriftserver and giraphjob#stopthriftserver methods from createjobprogressserver * allows adding other thrift services to the thriftserver test plan : tried on a cluster reviewers : maja . kabiljo , sergey . edunov reviewed by : sergey . edunov subscribers : sergey . edunov differential revision : https : / / reviews . facebook . net / d57087","[ giraph - 1053 ] log exceptions to command line summary : when we know an exception occurred , log it to command line to make it easier for people running jobs to see what the issue was . test plan : ran two jobs , one with error in input one with error in compute , verified exception is printed to command line . also ran a normal job and verified it didn't print anything new to command line differential revision : https : / / reviews . facebook . net / d56931","setting auto - read in netty to false summary : by default , auto - read flag is set to true in netty . this means netty proactively read requests as they become available to a worker . however , this behavior sometime causes the off - heap memory to increase continuously . this happens specifically in presence of a spike in the amount of received requests . in that situation , the processing / handling rate of incoming requests may be less than the request receipt rate leading to high - memory kill ( cgroup kill or oom ) . with auto - read flag set to false , we read and process requests one by one and ( hopefully / presumably ) letting the transport layer do the flow control ( i . e . dropping packets or reducing congestion window of tcp ) . test plan : mvn clean verify pagerank - like application at large scale fails with auto - read set to true , and successfully runs with auto - read set to false . * * do not accept this diff . * * we should do more testing and prove it is reliable . reviewers : dionysis . logothetis , sergey . edunov , maja . kabiljo reviewed by : maja . kabiljo differential revision : https : / / reviews . facebook . net / d57213","decoupling nettyclient from control flow policy summary : this diff refactors nettyclient by decoupling flow control mechanism from nettyclient . through the refactoring process , some performance and correctness bugs have been found due to the better readability of the refactored code . test plan : mvn clean verify tested large jobs and the output was correct tested large jobs and it did not have any performance degradation for codes using the old mechanism reviewers : maja . kabiljo , sergey . edunov , avery . ching , dionysis . logothetis reviewed by : dionysis . logothetis differential revision : https : / / reviews . facebook . net / d56367","fixing cases when there is no conf summary : conf is not needed anymore - - the question is why longdiffnullarrayedges extends configurableoutedges : ) i'd prefer having longdiffnullarray + compressedoutedges instead test plan : test reviewers : ikabiljo , maja . kabiljo reviewed by : maja . kabiljo differential revision : https : / / reviews . facebook . net / d56505","giraph - 1058 : fix connection retry logic summary : currently when we fail to connect to a channel we retry immediately and that retry most often fails . add a short wait between retries , and improve the check for whether the channel connected successfully . test plan : ran multiple jobs which were often failing before the fix , with fix they worked differential revision : https : / / reviews . facebook . net / d57447",giraph - 1060 : add combiner to connected components summary : connected components should use combiner to make it more efficient and require less memory . a few additional cleanups while at it . test plan : mvn clean verify differential revision : https : / / reviews . facebook . net / d57879,"giraph - 1061 : add connected components block factory summary : add block factory for connected components to make it easy to run it . test plan : added a test , mvn clean verify differential revision : https : / / reviews . facebook . net / d57951","block api handle summary : - some apps need a reference to the block api objects ( e . g . blockoutputapi ) before they are actually executed . see documentation of `blockapihandle` for more details . - also , made i `blockworkerapi` implement the `blockoutputapi` as opposed to only the `blockworkerreceiveapi` so that output is possible inside the sender . too . test plan : - `mvn install` - internal app that uses the api handle from the master and from the workers - internal snapshot tests reviewers : maja . kabiljo , sergey . edunov , ikabiljo reviewed by : ikabiljo differential revision : https : / / reviews . facebook . net / d57939","giraph - 1062 : page rank in blocks & pieces summary : we have some examples of pagerank , but they all have some things missing . make one which will take sinks into account , have convergence checks , support both weighted and unweighted graphs . test plan : mvn clean verify - p hadoop facebook . we use this app internally differential revision : https : / / reviews . facebook . net / d58059","griaph - 1064 : reconnect jobprogresstracker summary : when workers / master don't talk to jobprogresstracker it can disconnect and throw rejectedexecutionexception - we should catch and retry on that exception too . test plan : ran a job where master would fail to talk to jobprogresstracker after a while without this change , with the change it worked differential revision : https : / / reviews . facebook . net / d58323","cleanup the old out - of - core message mechanism summary : with the new out - of - core infrastructure , there is no need for the old version of message out - of - core . the old version of message out - of - core also interferes with the new mechanism . it seems that the old out - of - core message mechanism is not necessary anymore . this diff removes the old out - of - core messages and cleans up its implications on the rest of the code base . test plan : mvn clean verify snapshot tests passes reviewers : maja . kabiljo , dionysis . logothetis , sergey . edunov differential revision : https : / / reviews . facebook . net / d58701","giraph - 1069 race condition in all * confoption classes summary : * confoption classes , such as classconfoption , intconfoption , floatconfoption etc , call allotions . add ( this ) from their constructor . this call updates static list without any synchronization . hence , if you create conf option classes in different threads you run into race condition . the only reason we have alloptions is to create documentation . it can be done with reflection instead . so , let's remove allotions . add ( this ) from all conf classes and implement reflection based approach in alloptions test plan : mvn clean verify - phadoop facebook checked that generated options . xml is the same as before reviewers : majakabiljo , dionysis . logothetis , heslami , maja . kabiljo reviewed by : heslami , maja . kabiljo differential revision : https : / / reviews . facebook . net / d59331","giraph - 1070 comparators in partitionutils can overflow test plan : mvn clean verify reviewers : majakabiljo , maja . kabiljo , dionysis . logothetis , heslami reviewed by : heslami differential revision : https : / / reviews . facebook . net / d59547","giraph - 1075 : unsafebytearrayoutputstream silently writes long utfs incorrectly summary : unsafebytearrayoutputstream . writeutf was copied from dataoutputstream , but part which checks the length was missed out . when we try to write long strings they serialize without an issue , but when we try to deserialize them we get a wrong value back and don't read the same number of bytes . make it fail like dataoutputstream instead . test plan : added a test differential revision : https : / / reviews . facebook . net / d59817",giraph - 1075 checkstyle summary : test plan : reviewers : cc : task id : # blame rev :,"improve out - of - core metrics summary : for the metric showing the percentage of the graph in memory it makes more sense to show the lowest fraction of the graph that was in memory during a superstep . basically , a user is more interested to see how bad was the out - of - core execution , and how many more machines he / she needs to use to run the job entirely in memory . test plan : mvn clean verify visual , looking at hadoop metric and per - worker metric reviewers : sergey . edunov , dionysis . logothetis , maja . kabiljo reviewed by : dionysis . logothetis , maja . kabiljo differential revision : https : / / reviews . facebook . net / d59451","giraph - 1076 race condition in filetxnsnaplog summary : org . apache . zookeeper . server . persistence . filetxnsnaplog has a potential for race condition : if ( !this . datadir . exists ( ) ) { if ( !this . datadir . mkdirs ( ) ) { throw new ioexception ( ""unable to create data directory "" + this . datadir ) ; } } if two threads try to create filetxnsnaplog simultaneously it can trigger ioexception . we saw this happening in giraph where filetxnsnaplog is being created by purgetask created by datadircleanupmanager and by inprocesszookeeperrunner#runfromconfig . until and if ever , the zookeeper code is fixed , we need to make sure zookeeper starts first and only then starts purgetask . test plan : run a few jobs and mvn clean verify reviewers : majakabiljo , dionysis . logothetis , heslami , maja . kabiljo reviewed by : maja . kabiljo differential revision : https : / / reviews . facebook . net / d59883","giraph - 1078 createzookeeperserverlist should use task instead of port number summary : createzookeeperserverlist doesn't have a port yet , as we haven't started zookeeper . what we actually have is the task number . port will be later set by the master . test plan : run a few jobs . reviewers : maja . kabiljo , majakabiljo , heslami , dionysis . logothetis reviewed by : dionysis . logothetis differential revision : https : / / reviews . facebook . net / d59961",giraph - 1079 : add triangle counting example summary : just moved from internal test plan : mvn verify differential revision : https : / / reviews . facebook . net / d60057,"decouple out - of - core persistence infrastructure from out - of - core computation summary : this diff proposes the following : - the persistence layer is decoupled from out - of - core infrastructure . this way one can simply implement different data accessors for various persistence resources . the persistence layer for reading / writing from / to local file system is implemented in this diff . - previously , out - of - core data were indexed by string literals . this has changed for more flexibility . now , data are accessible by a more flexible data indexing mechanism , in which a chain of indices are used to address a particular data . - with different implementations of data accessor , now there may be more emphasis on having more io threads . it is important that these io threads are load - balanced . in this diff , the mechanism to assign partitions to io threads has changed . - all the coolness of kryo's ( de ) serialization and randomaccessfile ( in d59277 ) is included in this diff , all at one place . test plan : mvn clean verify out - of - core snapshot test passes reviewers : dionysis . logothetis , maja . kabiljo , sergey . edunov differential revision : https : / / reviews . facebook . net / d59691",giraph - 1080 : add facebookconfiguration summary : just copied from internal test plan : verify differential revision : https : / / reviews . facebook . net / d60135,"giraph - 1081 : fix a bug in internal out - of - core infra : multithreaded accesses to buffers summary : the multi - threaded accesses to raw data buffers in `diskbackeddatastore` is overlooked , violating assumption on properly partitioning data to different io threads . test plan : mvn clean verify reviewers : dionysis . logothetis , sergey . edunov , maja . kabiljo reviewed by : maja . kabiljo differential revision : https : / / reviews . facebook . net / d60147",giraph - 1082 : remove limit on the number of partitions summary : currently we have a limit on how many partitions we can have because we write all partition information to zookeeper . we can instead send this information in requests and remove the hard limit . test plan : ran pagerank for 100 iterations with 500k partitions . differential revision : https : / / reviews . facebook . net / d60267,"giraph - 1083 : make sure we fail after exception in ooc - io thread happens summary : currently if some exception happens in ooc - io thread the job is left running for long time after the exception . we should make sure we fail early . test plan : ran a job with ooc on where i simulated the failure , without change job hangs for a long time , with the change it fails right after the exception happens , and logs it to command line . differential revision : https : / / reviews . facebook . net / d60291","giraph - 1085 : add inmemorydataaccessor summary : when we deal with graphs which have a lot of vertices with very little total data associated with them ( values + edges ) we start experiencing memory problems because of too many objects created , since every vertex has multiple objects associated with it . to solve this problem , we should have a serialized partition representation ( current bytearraypartition just keeps byte [ ] per vertex , not per partition ) . we can leverage the out - of - core infrastructure and just add data accessor which won't be backed by disk but in memory buffers . test plan : successfully ran a job which was failing without this . differential revision : https : / / reviews . facebook . net / d60435","[ giraph - 1089 ] fix a bug in out - of - core infrastructure summary : this diff fixes a bug in out - of - core infrastructure that caused user requirement ( max number of partitions in memory ) for fixed out - of - core strategy get violated . the cause of the problems was the un - clear definition of in - memory partitions . in this diff , we distinguish the partitions that are entirely in memory from those that are partially in memory . test plan : mvn clean verify reviewers : dionysis . logothetis , sergey . edunov , maja . kabiljo reviewed by : maja . kabiljo differential revision : https : / / reviews . facebook . net / d60573",[ giraph - 1091 ] fix simplerangepartitionfactorytest summary : simplerangepartitionfactorytest relied on old logic for calculating number of partitions and got broken with giraph - 1082 . test plan : ran the test differential revision : https : / / reviews . facebook . net / d60747,"giraph - 1092 testcollections . testlargebasiclist fails with oom summary : this test case requires too much memory to run in jenkins . talked to sergey pupyrev and we decided to disable it . test plan : none reviewers : majakabiljo , maja . kabiljo , spupyrev reviewed by : spupyrev differential revision : https : / / reviews . facebook . net / d60753","[ giraph - 1095 ] performance regression after giraph - 1068 summary : need to pass some missing parameters to zookeeper test plan : run a few jobs reviewers : dionysis . logothetis , heslami , majakabiljo , maja . kabiljo reviewed by : maja . kabiljo differential revision : https : / / reviews . facebook . net / d60831","giraph - 1097 fix testoutofcore . testoutofcorelocaldiskaccessor summary : on my laptop it failed because of an npe in workersuperstepmetrics . i tracked it down and found that it is triggered from the branch of code that prints out metrics . we don't normally print out metrics in unit tests , so i'd expect this feature doesn't exist or not functional in hadoop 1 . i'll try to disable it , to see how jenkins reacts . test plan : mvn test - pl giraph - examples - am - dtest = testoutofcore - dfailifnotests = false - phadoop 1 reviewers : maja . kabiljo , dionysis . logothetis , heslami reviewed by : heslami differential revision : https : / / reviews . facebook . net / d60873","giraph - 1098 job may get stuck if zookeeper port fixed and is in use test plan : mvn clean verify - phadoop facebook reviewers : majakabiljo , dionysis . logothetis , maja . kabiljo reviewed by : maja . kabiljo differential revision : https : / / reviews . facebook . net / d60945","giraph - 1103 : another try to fix jobs getting stuck after channel failure summary : with giraph - 1087 we see jobs stuck after channel failure less often , but it still happens . there are several additional issues i found : requests failing to send at the first place so they never get retried , callbacks for channel failures not being triggered always . added a thread which will periodically check on open requests even when we are not waiting on all open requests ( since in many places we don't ) , remove the check that request wass ent when retrying it , added some thread utils while at it . test plan : before the change , failure rate of a particular job was about 1 in 50 . had over 200 successful runs with this change . differential revision : https : / / reviews . facebook . net / d61719","giraph - 1104 : negativearraysize exception in bigdataoutput summary : bigdataio is not properly handling large byte [ ] being written to it . chunk them up when needed to respect the max single data output size . with d61791 job was still failing with the same exception . test plan : the job which was failing because of large edges now works , added a test differential revision : https : / / reviews . facebook . net / d61839","giraph - 1105 : fix number of open requests in facebookconfiguration test plan : this was significantly better in some experiments , but we can investigate more in the future differential revision : https : / / reviews . facebook . net / d62019",giraph - 1107 : allow observers to access job counters summary : from mapper / master / worker observer we might want to update some job counters for stats . for that we should allow observers to access job context . test plan : ran a job which accesses counters from workerobserver reviewers : sergey . edunov reviewed by : sergey . edunov differential revision : https : / / reviews . facebook . net / d62391,"giraph - 1108 : allow measuring time spent doing gc in some interval summary : sometimes when things are slow , we want to know whether it's because of gc or not . keep track of last k gc pauses and a way to check how much time since some timestamp was spent doing gc . test plan : ran a job which periodically prints stats from this and manually verified based on gc logs that it's measuring it correctly differential revision : https : / / reviews . facebook . net / d62727","out - of - core is logging too aggressively summary : example aggressive logging at info level : info < datestamp > [ ooc - io - 0 ] org . apache . giraph . ooc . policy . thresholdbasedoracle - getnextioactions : usedmemoryfraction = 0 . 79 info < datestamp > [ ooc - io - 0 ] org . apache . giraph . ooc . outofcoreiocallable - call : thread 0's next io command is : loadpartitioniocommand : ( partitionid = 4676 , superstep = 0 ) info < datestamp > [ ooc - io - 0 ] org . apache . giraph . ooc . outofcoreiocallable - call : thread 0's command loadpartitioniocommand : ( partitionid = 4676 , superstep = 0 ) completed : bytes = 0 , duration = 0 , bandwidth = nan , bandwidth ( excluding gc time ) = nan test plan : mvn clean verify - p hadoop facebook reviewers : majakabiljo , maja . kabiljo , sergey . edunov , heslami reviewed by : heslami subscribers : dionysis . logothetis differential revision : https : / / reviews . facebook . net / d62853","faster maps summary : the idea is to replace hashmap < longwritable , v > to long2objectopenhashmap < v > ( and map < int . . . > to int2object . . . ) this will save space and speed up some applications . i changed the type of such a map in testgraph . java , which gives up to 2x speed up on an example of page rank computation ( see comment below ) jira : https : / / issues . apache . org / jira / browse / giraph - 1049 test plan : testbasiccollections . java contain some tests reviewers : sergey . edunov , maja . kabiljo , dionysis . logothetis , heslami , ikabiljo reviewed by : heslami differential revision : https : / / reviews . facebook . net / d55587","giraph - 1111 - fileoutputformat#setoutputpath is not always available test plan : mvn clean install + run a few jobs reviewers : majakabiljo , dionysis . logothetis , maja . kabiljo reviewed by : maja . kabiljo differential revision : https : / / reviews . facebook . net / d63837","giraph - 1114 : expose statusreporter from workers in blocks framework summary : sometimes we need to call progress or update status from workers , expose this functionality test plan : verify differential revision : https : / / reviews . facebook . net / d63999",giraph - 1115 : move uncaughtexceptionhandler setup to graphtaskmanager test plan : ran a job which isn't using graphmapper and verified exception handler was set properly differential revision : https : / / reviews . facebook . net / d64113,"[ giraph - 1117 ] provide a flexible way to decide whether to create vertex when it is not present in the input test plan : run hello pagerank with this feature on and off reviewers : majakabiljo , maja . kabiljo , dionysis . logothetis reviewed by : dionysis . logothetis differential revision : https : / / reviews . facebook . net / d64485","giraph - 1118 - giraph - gora and giraph - rexster test cases fail in release - 1 . 2 test plan : mvn clean verify - phadoop facebook mvn clean install - phadoop 1 mvn clean install - phadoop 2 reviewers : majakabiljo , dionysis . logothetis , maja . kabiljo reviewed by : maja . kabiljo differential revision : https : / / reviews . facebook . net / d64683",fix checkstyle test plan : mvn clean site - dskiptests - phadoop 2 - ddependency . locations . enabled = false mvn clean install - phadoop 2 - prelease mvn clean install - phadoop 1 - prelease reviewers : dionysis . logothetis reviewed by : dionysis . logothetis differential revision : https : / / reviews . facebook . net / d65499,giraph - 1125 closes #12,giraph - 1129 closes #13,giraph - 1129 closes #14,giraph - 1129 closes #15,giraph - 1130 fix repeatuntilblock closes #16,closes #20,giraph - 1132 closes #21,jira - 1133 closes #22,closes #25,jira - 1134 closes #24,jira - 1137 closes #26,closes #29,jira - 1138 closes #27,fix #27,jira - 1141 closes #33,giraph - 1143 closes 35,jira - 1146 closes #36,jira - 1138 closes #37,jira - 1147 closes #38,jira - 1148 closes #39,jira - 1149 closes #40,jira - 1152 closes #41,jira - 1151 closes 42,jira - 1153 closes 43,giraph - 1139 closes #30,giraph - 1154 closes #44,jira - 1157 closes #46,giraph - 1158 closes #47,jira - 1159 closes #48,jira - 1160 closes #49,giraph - 1161 closes #50,giraph - 1162 closes #51,giraph - 1163 closes #52,giraph - 1164 closes #53,jira - 1166 closes #55,giraph - 1167 closes #56,giraph - 1168 closes #57,jira - 1169 closes #58,closes #59,jira - 1171 closes #60,giraph - 1174 closes #62,giraph - 1175 closes #63,closes #64,giraph - 1182 closes #66,giraph - 1181 closes #65,giraph - 1184 closes #68,giraph - 1185 closes #69,giraph - 1192 closes #45,giraph - 1188 closes #70,giraph - 1194 closes #74,giraph - 1195 closes #76,giraph - 1199 closes #78,jira - 1200 closes #83,giraph - 1201 closes #84,fix - tests closes #86,giraph - 1205 closes #88,fix checkstyle,giraph - 1208 closes #80,giraph - 1207 closes #90,jira - 1211 closes #93,replace direct use of external fields with getter / setter,"follow - up to bcel - 209 drop the field num bootstrap arguments it is not necessary , and was not kept in sync if the arguments were updated",bcel - 195 addition of hashcode ( ) to generic / instruction . java breaks targeters . never make distinct branchinstructions compare equal,gradually working towards restoring binary compatibility restore deprecated methods for now,use try - with - resources .,better lvar name .,use java 6's string#isempty ( ) .,"fix pmd issues : remove unused modifiers , see https : / / pmd . github . io / pmd - 5 . 4 . 2 / pmd - java / rules / java / unusedcode . html#unusedmodifier",bcel - 276 : localvariabletypetable is not updated . thanks to sam yoon . this also fixes #10 from github .,convert 'for' loops to enhanced 'for' loops .,add final modifier to method parameters .,[ bcel - 304 ] classpath . getclassfile does not work with java 9 and higher .,use recursive construction,bcel - 258 no tests to check the output of dump methods added ( optional ) test to check the dump methods in the classfile package,might as well make this iterable,"bcel - 257 invokespecial , invokestatic , invokevirtual need to define dump ( ) methods",bcel - 258 no tests to check the output of dump methods added test for generic package dump methods,bcel - 260 classdumper example duplicates field attribute types,bcel - 261 select constructor allows partially constructed instance to escape . re - ordered code to delay the escape,bcel - 195 addition of hashcode ( ) to generic / instruction . java breaks targeters . never make branchinstructions compare equal revert short - cut equality check because that would allow a single bi to be shared .,fix annotationentryvalue . stringifyvalue to return something other than the hash,no need for tostring on a string,use import to shorten code,remove unneeded casts .,add final modifier to private fields .,"bcel - 236 : remove deprecated fieldormethod . getclasstype - update javadoc , throw classgenexception upon call with invalid type",revert to using public object clone ( ) for now,fix most deprecations for getclassname,gradually working towards restoring binary compatibility revert exceptionconstants back to interface,gradually working towards restoring binary compatibility revert instructionconstants back to interface,ensure interface classes are deprecated,oops - arrays must be private,tidy up,revert to 5 . 2 contents ( new entries appear in new class only ),gradually working towards restoring binary compatibility restore deprecated classes for now,avoid npe,move methods to correct class,method has moved,bcel - 221 bcelifier is not working for java8example workround for crash ; may need further work,support invokedynamic,fix up strings to use the new non - deprecated class name,add a round - trip bcelifier test case,test is not really working,class already implements node . accept so show this,"bcel - 264 add missing node . accept ( ) implementations ( constantmethodhandle , constantmethodtype , parameterannotationentry )",add missing implementations,messy line break,tidy up line breaks,document other constant types,"issue bcel - 269 : make sure instruction list gets completely written , patch by emopers",add support for invokedynamic,issue bcel - 73 : allow for instance based repositories,convert for loops to enhanced for loops .,add missing ' @ override' annotations .,[ bcel - 271 ] fconst pattern does not include fconst 2 .,[ bcel - 272 ] add constants for java 9 class file version 53 .,use the java 7 diamond notation .,findbugs fixes courtesy of andrey loskutov this closes #4,fix ignored test case by canonicalising the javap output,bcel - 273 - regressions running findbugs on bcel6 reverted to previous code ; added comments,"redundant super - interface repository for the type syntheticrepository , already defined by memorysensitiveclasspathrepository .",fix test to run on windows and linux .,use exception to report the stacktrace etc,use try - with - resources .,use try - with - resources .,use try - with - resources . note that bytearrayouputstream#close ( ) is a noop so it is ok to move baos . tobytearray ( ) inside a try - w - resources block .,rename private ivars to remove leading underscore .,remove ioexception from declaration as it is not actually thrown .,rename private ivars to remove leading underscore .,rename private ivars to remove leading underscore ( and a better name ) .,rename private ivars to remove leading underscore ( and a better name ) .,rename private ivars to remove leading underscore ( and a better name ) .,rename private ivars to remove leading underscore ( and a better name ) .,rename private ivars to remove leading underscore ( and a better name ) .,rename private ivars to remove leading underscore ( and a better name ) .,rename private vars to remove leading underscore .,rename private vars to remove leading underscore .,better var name .,better var name .,fix formating .,use try - with - resources .,bcel - 243 type . gettype ( ) needs to understand typevariablesignature ( s ),use try - with - resources .,add missing @ java . lang . deprecated .,add missing isvarargs to accessflags,use try - with - resources .,format nits .,use try - with - resources .,use try - with - resources .,use try - with - resources .,use try - with - resources .,use spaces for indentation,let junit propagate errors instead of translating them into a failure,javadoc fixes,restore bc vs . 5 . 2 .,formatting .,"formatting "" ) { "" - > "" ) { "" .","formatting ""for ( "" - > ""for ( "" .",don't need ( ) s .,fix funky formating .,parameterize test .,parameterize test .,"on windows , test whatever jre and jdk are registered in the windows registry .","on windows , test whatever jre and jdk are registered in the windows registry .",don't hard - code file separator,unnecessary semicolon .,unnecessary semicolon .,bcel - 262 : invokeinstruction . getclassname ( constantpoolgen ) should throw an exception when it detects an array . thanks to mark roberts .,"gracefully handle ecj's odd generation of localvariabletypetable types , prefixed by \ ! , or \ ! + or \ ! *",fix test that breaks in a rc reviewer's windows 10 set up .,bcel - 262 : invokeinstruction . getclassname ( constantpoolgen ) should not throw an exception when it detects an array . thanks to mark roberts .,bcel - 277 : resolving the string representation of a constant throws nosuchelementexception in case of constant nameandtype constant . thanks to sam yoon . this also closes #9 from github .,follow bcel's field naming pattern,jira issue #284 handle invokedynamic . getreferencetype ( ) sanely,first pass at java 9 support based on ea releases and http : / / cr . openjdk . java . net / ~ mr / jigsaw / spec / lang - vm . html#jigsaw - 2 . 6 the motivation is primarily to provide the minimum required by tomcat to parse java 9 class files . i have assumed ( early access ) java 9 support will make the next release 6 . 1,bcel - 289 : iterate through parameter annotation entries using the right limit this closes #13,convert control statement bodies to block .,add final modifier to local variables .,bcel - 283 : support for stackmap should be different from stackmaptable . thanks to mark roberts,bcel - 287 : iinc does not handle - 128 properly . thanks to mark roberts,bcel - 276 : localvariabletypetable is not updated . updated fix thanks to mark roberts . this closes #12 from github .,bcel - 286 : utility . signaturetostring fails if a method has multiple type arguments . thanks to mark roberts .,parameter names should be in camel case,make checkstyle happy,fix typo in javadoc . thanks to michael ernst . this fixes #15 from github .,[ bcel - 296 ] incorrect comment in several classes .,[ bcel - 295 ] fix local variable live range length ; add test case .,[ bcel - 295 ] fix local variable live range length ; add test case . this closes #17 .,[ bcel - 295 ] fix local variable live range length . use less verbose code .,use final .,"fix incorrect indentation , thanks to michael ernst . this closes #18",[ bcel - 300 ] org . apache . bcel . classfile . classformatexception : invalid byte tag in constant pool : 19 .,[ bcel - 301 ] org . apache . bcel . classfile . classformatexception : invalid byte tag in constant pool : 20 .,"this test was pretending to test jdk jars but was not . also now tests jre 9 , 10 ea and jdk 9 and 10 ea .",refactor test .,clean ups : use final .,sort members .,fix bug in test to avoid an exception if a key does not exist .,javadoc improvements .,re - order for consistency,add class version constants for java 10 .,add class version constants for java 11 .,first pass at java 11 support based on ea releases and https : / / bugs . openjdk . java . net / browse / jdk - 8189199 the implementation is far from complete . the motivation is primarily to provide the minimum required by tomcat to parse java 11 class files . i have assumed ( early access ) java 11 support will make the next release ( 6 . 3 ) .,correct names of class version constants given change in java versioning . fix for java 9 requires deprecation of old values as they have already been released .,[ bcel - 304 ] classpath . getclassfile does not work with java 9 and higher . sort .,better internal names .,camel - case names .,test jdk jmod files if present .,better name .,[ bcel - 305 ] classpath . getclassfile ( ) and friends do not work with jre 9 and higher .,make ivars private final and close resources properly .,better name .,[ bcel - 305 ] classpath . getclassfile ( ) and friends do not work with jre 9 and higher . fix close .,[ bcel - 305 ] classpath . getclassfile ( ) and friends do not work with jre 9 and higher . don't use a for each loop to avoid creating an iterator for the gc to collect .,[ bcel - 305 ] classpath . getclassfile ( ) and friends do not work with jre 9 and higher . don't use a for each loop to avoid creating an iterator for the gc to collect .,"[ bcel - 305 ] classpath . getclassfile ( ) and friends do not work with jre 9 and higher . test classes in the java 9 and above modular runtime image file , aka the monolithic "" / modules"" files . this uses the jrt file system on java 9 only . tests are skipped on java 8 and below .","allow tester to specify additional java homes with the system property ""extrajavahomes"" .",add constant fields based on java 12 - ea and java 13 - ea .,preparing for 6 . 3 . update java requirement from java 7 to java 8 . don't break bc with new api org . apache . bcel . classfile . visitor . visitconstantdynamic ( constantdynamic ) by making it a java 8 default method .,checkstyle .,checkstyle .,fix build on travis ci .,[ bcel - 267 ] race conditions on static fields in branchhandle and ( #23 ) * [ bcel - 267 ] race conditions on static fields in branchhandle and instructionhandle . * add openjdk 8 to travis build . * add openjdk 8 to travis build . * [ bcel - 267 ] race conditions on static fields in branchhandle and instructionhandle . * fix build on travis ci .,don't use deprecated code : replace references to org . apache . bcel . constants with org . apache . bcel . const .,[ bcel - 297 ] fix npe in bcelcomparator concrete implementations . ( #20 ),generics,java 7 < >,java 7 < >,java 7 . use < >,refactor the closing of delegatingconnection and sub - classes to correctly handle closing and passivation of connections when one delegatingconnection wraps another . the problem was discovered while exploring some refactoring options and is now tested using the additional unit test .,add generics to delegatingconnection this significantly increases the number of warnings but it is a necessary step to resolving the remaining warnings .,partial fix for dbcp - 404 make mutable fields private,fix infinite loop caused by dbcp - 404 refactoring,fix dbcp - 180 the garbage collector needs to be able to collect jdbc resources that the client is no longer referencing . the abandonedtrace code was stopping this . this has been fixed by using weakreferences . a secondary issue was that pooled statements would not get returned to the pool once the weakreference was used since abandonedtrace lost the ability to trace all the child resources . use of a finalizer ( i couldn't think of a better way ) addresses that .,"added fastfailvalidation property to pc , bds . jira : dbcp - 427 .",add final modifier to local variables .,initial revision,"redo jmx internals to use a wrapper that acts as a noop is jmx is not available . dang it , thought my local build passed . but no . now ok .",[ dbcp - 483 ] make constant public : org . apache . commons . dbcp2 . poolingdriver . url prefix .,add two unit tests .,[ dbcp - 486 ] driveradaptercpds . setuser ( null ) and setpassword ( null ) throw nullpointerexceptions when connection properties are set .,"[ dbcp - 486 ] driveradaptercpds . setuser ( ) , setpassword ( ) , and getpooledconnection ( ) with null arguments throw nullpointerexceptions when connection properties are set","revert "" [ dbcp - 486 ] driveradaptercpds . setuser ( ) , setpassword ( ) , and getpooledconnection ( ) with null arguments throw nullpointerexceptions when connection properties are set"" this reverts commit a6feb941e5ff8fde22865f981d912c6d5f48546e .","[ dbcp - 486 ] driveradaptercpds . setuser ( ) , setpassword ( ) , and getpooledconnection ( ) with null arguments throw nullpointerexceptions when connection properties are set",[ dbcp - 487 ] add api org . apache . commons . dbcp2 . datasources . peruserpooldatasource . clear ( ) .,[ dbcp - 488 ] npe for org . apache . commons . dbcp2 . cpdsadapter . driveradaptercpds . setconnectionproperties ( null ) .,[ dbcp - 490 ] the method org . apache . commons . dbcp2 . poolingdriver . getconnectionpool ( string ) does not tell you which pool name is not registered when it throws an exception .,format nits .,[ dbcp - 484 ] connection leak during xatransaction in high load .,[ dbcp - 491 ] ensure dbcp connectionlistener can deal with transaction managers which invoke rollback in a separate thread . applied modified patch from zheng feng .,sort methods .,format nits .,remove trailing white spaces on all lines .,sort methods .,format nits .,format nit .,add @ suppresswarnings and format nits .,[ dbcp - 494 ] org . apache . commons . dbcp2 . pstmtkey should make copies of given arrays in constructors .,[ dbcp - 495 ] remove duplicate code in org . apache . commons . dbcp2 . cpdsadapter . pstmtkeycpds .,format nits .,[ dbcp - 496 ] add support for pooling callablestatements to the org . apache . commons . dbcp2 . cpdsadapter package .,[ dbcp - 497 ] deprecate use of pstmtkeycpds in favor of pstmtkey .,"no functional changes : add missing javadocs tags , skip some compiler warnings about resources , sort methods , longer lines for code and javadocs .",better ivar and param names .,use eclipse generated hashcode ( ) and equals ( ) . better ivar name .,use final .,use longer lines .,refactor and comment hashmap creation .,format .,format nit and better param name .,refactor commons code into a private method ; javadoc nits .,javadoc and use long lines .,add missing javadoc tags and longer lines .,use a line length max of 120 and add missing javadoc tags .,javadoc the scale of the query timeout as seconds . update private ivar names to make this clear .,javadoc and max line 120 .,use line length 120 and format blocks consistently .,use line length 120 and format consistently .,javadoc and organize .,[ dbcp - 498 ] org . apache . commons . dbcp2 . datasourceconnectionfactory should use a char [ ] instead of a string to save passwords .,fix typo in private ivar name .,"fix typo in private ivar name , javadocs , and param name .","fix typos in private ivar name , javadocs , and param name : camel case 'username' as 'username' .","fix typos in private ivar name , javadocs , and param name : camel case 'username' as 'username' .",[ dbcp - 499 ] org . apache . commons . dbcp2 . managed . datasourcexaconnectionfactory should use a char [ ] instead of a string to save passwords .,some ivars use as a prefix and some others do not . normalize to not use a prefix .,[ dbcp - 500 ] org . apache . commons . dbcp2 . cpdsadapter . driveradaptercpds should use a char [ ] instead of a string to store passwords .,some ivars use as a prefix and some others do not . normalize to not use a prefix .,[ dbcp - 501 ] org . apache . commons . dbcp2 . datasources . cpdsconnectionfactory should use a char [ ] instead of a string to store passwords .,use line length 120 .,some ivars use as a prefix and some others do not . normalize to not use a prefix .,some ivars use as a prefix and some others do not . normalize to not use a prefix .,"no need to initialize instance and static variables to the default value the jvm gives them anyway , it just clutters up the code , and java is verbose enough as it is .","replace null checks and throws of nullpointerexception with java's java . util . objects . requirenonnull ( t , string ) .",line length 120 and javadoc formatting .,comments .,better param name .,better param name .,better param name .,[ dbcp - 502 ] org . apache . commons . dbcp2 . datasources internals should use a char [ ] instead of a string to store passwords .,remove trailing white spaces on all lines .,always use blocks .,use final .,[ dbcp - 503 ] org . apache . commons . dbcp2 . datasources . instancekeydatasourcefactory . closeall ( ) does not close all .,better lvar names .,format nits .,line length 120 .,format nit .,use ternary expressions .,better lvar name and use line length 120 .,consistent formating to line length 120 .,consistent formating to line length 120 and better param names .,add missing javadoc tag .,format javadoc and 'sql' - > 'sql' in text .,use the scale in timeout parameter and ivar names ( validationquerytimeout - > validationquerytimeoutseconds ),format javadoc .,consistent formating to line length 120 .,javadoc .,consistent formating to line length 120 .,better ivar name .,"javadoc , better param name , line length 120 .",line length 120 .,better ivar name .,line length 120 .,line length 120 and javadoc .,consistent formating to line length 120 .,better param name .,supppress compiler warning .,use final .,normalize formatting and line length 120 .,add missing javadoc . better param name .,refactor common code .,format try - catch and line length 120 .,add @ suppresswarnings .,line length 120 and standard formatting .,refactor common code .,line length 120 and standard formatting .,better param name .,better lvar name and line length 120 .,line length 120 and standard formatting .,line length 120 and standard formatting .,no need for an ivar here .,add missing javadoc .,don't use deprecated ctor .,"add missing javadoc , better param names , line length 120 .",better ivar name .,line length 120 .,add missing javadoc .,"javadoc , better param names , line length 120 .",javadoc and suppress a compiler warning .,simplify implementation without using the catch npe hack .,javadoc and line length 120 .,better description of time scale .,better description of time scale .,line length 120 .,don't use deprecated api and better param name .,specify the scale in the name of variable for the query timeout .,sort members in ab order so it's easier to find stuff .,[ dbcp - 506 ] support jdbc 4 . 2 .,suppress compiler warning .,sort members in ab order so it's easier to find stuff .,sort members in ab order so it's easier to find stuff .,line length 120 .,sort members in ab order so it's easier to find stuff .,[ dbcp - 506 ] support jdbc 4 . 2 : new statement methods .,sort members in ab order so it's easier to find stuff .,better parameter names .,[ dbcp - 506 ] support jdbc 4 . 2 : new preparedstatement methods .,sort members in ab order so it's easier to find stuff .,[ dbcp - 506 ] support jdbc 4 . 2 : new callablestatement methods .,sort members in ab order so it's easier to find stuff .,sort members in ab order so it's easier to find stuff .,[ dbcp - 506 ] support jdbc 4 . 2 : new resultset methods .,suppress compiler warning with @ suppresswarnings .,[ dbcp - 479 ] support default schema in configuration .,- [ dbcp - 427 ] examines 'sqlexception's thrown by underlying connections or statements for fatal ( disconnection ) errors . - [ dbcp - 507 ] change default for fail - fast connections from false to true .,use jls order for modifiers,fix generics warnings,better super constructor to avoid unused parameter,fix [ find | spot ] bugs locking warning,revert premature generics changes that won't be required until dbcp depends on pool 2 . 6 . 0 or later .,in - line local variable that is not needed .,refactor duplicate code .,sort members in ab order to make it easier to find stuff .,sort members in ab order to make it easier to find stuff .,refactor to type cast once .,[ dbcp - 508 ] prepared statement keys should take a connection's schema into account .,fix pmd violation : avoid modifiers which are implied by the context .,[ dbcp - 504 ] increase test coverage . closes #13 .,use java's own arrays . aslist ( ) method .,[ dbcp - 512 ] avoid exceptions when closing a connection in mutli - threaded use case . update tests from org . apache . geronimo . modules : geronimo - transaction 1 . 2 - beta to 2 . 2 . 1 .,fix generics compiler warning .,fix generics compiler warnings .,camel - case lvar name .,use final .,remove redundant type arguments .,remove unnecessary casts .,change indirect accesses to static members to direct accesses ( accesses through subtypes ) .,fix generics compiler warnings .,[ dbcp - 514 ] allow dbcp to register with a transactionsynchronizationregistry for xa cases . apply modified patch that does not break binary compatibility . bump up version from 2 . 5 . 1 - snapshot to 2 . 6 . 0 - snapshot since this patch adds new public apis .,[ dbcp - 517 ] make defensive copies of char [ ] passwords .,"[ dbcp - 515 ] do not try to register synchronization when the transaction is no longer active . applied a different , more compact , version of the patch . the test is the same though . closes #16 .",use final . change test ivar from private to protected .,[ dbcp - 516 ] do not double returnobject back to the pool if there is a transaction context with a shared connection . closes #17 .,fix typos reported via apache tomcat,[ dbcp - 518 ] allow dbcp to work with old java 6 / jdbc drivers without throwing abstractmethoderror .,[ dbcp - 518 ] allow dbcp to work with old java 6 / jdbc drivers without throwing abstractmethoderror .,[ dbcp - 519 ] add some tostring ( ) methods for debugging ( never printing passwords ),[ dbcp - 519 ] add some tostring ( ) methods for debugging ( never printing passwords ),add comment .,[ dbcp - 519 ] add some tostring ( ) methods for debugging ( never printing passwords ) : remove user names from tostring ( ) output per phil's suugestion .,[ dbcp - 519 ] add some tostring ( ) methods for debugging ( never printing passwords ) : synchronize tostring ( ) for mutable objects .,use final .,always use blocks .,[ dbcp - 520 ] basicmanageddatasource needs to pass the tsr with creating datasourcexaconnectionfactory . closes #18 .,"dbcp - 513 create a unit test to reproduce the issue this is a timing glitch . so it's sometimes not easy to reproduce it . on my box ( 12 core ryzen 2600x ) it happens every second test run . it might have another behaviour depending on cpu cores . the higher the core count , the more likely it hangs obviously .",[ dbcp - 527 ] add getters to some classes .,- [ dbcp - 528 ] org . apache . commons . dbcp2 . drivermanagerconnectionfactory should use a char [ ] instead of a string to store passwords . - [ dbcp - 517 ] make defensive copies of char [ ] passwords .,[ dbcp - 527 ] add getters to some classes .,fix typo in package private constant name .,better names preserving bc .,add missing ' @ override' annotations .,use final .,add missing ' @ deprecated' annotations,javadoc .,no need to all caps comment .,add org . apache . commons . dbcp2 . utils . closequietly ( autocloseable ) and deprecate : - org . apache . commons . dbcp2 . utils . closequietly ( connection ) - org . apache . commons . dbcp2 . utils . closequietly ( resultset ) - org . apache . commons . dbcp2 . utils . closequietly ( statement ),dbcp - 534 allow for manual connection eviction,be more quiet during tests on the console .,add missiing license header .,"seems a trivial change to me , should i create a jira ? ( #30 ) * in ofbiz we implemented debugmanageddatasource http : / / svn . apache . org / viewvc / ofbiz / ofbiz - framework / trunk / framework / entity / src / main / java / org / apache / ofbiz / entity / connection / debugmanageddatasource . java ? view = markup we had to write debugmanageddatasource : : close in order to avoid throwing an interruptedexception ‘manageddatasource’ should declare more specific exceptions than ‘exception’ for the ‘close’ method to allow the compiler to check that no ‘interruptedexception’ are thrown . * in ofbiz we implemented debugmanageddatasource http : / / svn . apache . org / viewvc / ofbiz / ofbiz - framework / trunk / framework / entity / src / main / java / org / apache / ofbiz / entity / connection / debugmanageddatasource . java ? view = markup we had to write debugmanageddatasource : : close in order to avoid throwing an interruptedexception ‘manageddatasource’ should declare more specific exceptions than ‘exception’ for the ‘close’ method to allow the compiler to check that no ‘interruptedexception’ are thrown . * updates changes . xml for dbcp - 539 ""manageddatasource : : close should declare used exceptions""","[ dbcp - 538 ] wrong jmx base name derived in basicdatasource#updatejmxname . - add public org . apache . commons . dbcp2 . objectnamewrapper . tostring ( ) . - next version will be 2 . 7 . 0 ( new public method , see above . )","* added myself to the list of committers on dbcp * added drivermanagerconnectionfactory ( url , username , passwword ) constructor .",improve support for records - in - records .,gora - 348,forward port of make cassandra keyspace consistency configurable within gora . properties,clean up code .,"java 7 changes and improvements including diamond operators , automatic resource handling , unnecessary boxing , collapsing exceptions , and iterations .",gora - 471 datastore for infinispan,gora 447 npe fix,gora - 477 add support for solr 5 . x,fix code review comments,read cassandra key in mapping file,add doc comments to cassandra store parameters,add initial test base for aerorospike module,add simple test for native cassandra serialization,add tests for schemaexists and truncateschema methods,update put and get functionality with support for different avro data types,fix base test cases for put and get functionality,add delete functionality for aerospike module,refactored the code,refactor code,refactor code,"add execute method , get by fields for native serialization",add delete by query method for native serialization,add logs for nativeserializer,add getpartitions method,add updatebyquery for native serialization,gora - 513 add initial orientdb datastore impl,add optional codecs to support all the datatypes for native serialization,added #clone ( ) method to persistent,add initial query model for gora - aerospike,add delete by query functionality to aerospike module,add persistent base dirty check,update the test cases,add avro serialization support,update query result key mapping in aerospike module,update test driver properties for aerospike module,fix formatting issues and update java doc comments,update the query results to get the progress for aerospike module,add log based waiting strategy for the aerospike tests,fix review comments,fix container stopping error,remove unwanted container stopping,update aerospike java client and remove unsupported policies,fix functionality of the updatebyquery for avro serialization,refactored the code,add tests for avro,update the policies as per the 4 . 0 . 6 aerospike java client,add support for connecting to authenticated servers in aerospike module,add cassandra native compiler,add license headers,fix code review comments,add support to retrieve partitions in aerospike module,reformat the code,add query level consistency,fix the put method to delete the existing records only if certain fields have been removed,update dirty bit clearing after fetching from data store,fix code formatting,fix the error in removing a bin value while updating in aerospike module,add map reduce based test cases fot aerospike module,gora - 525 : add java doc,make batch arraylist thread safe,fix validation for persistentschema in avro serialization,implemented datastoremetadataanalyzer to retrieve native backend information . - implemented only for hbase at this moment .,added missing #close ( ) method to datastoremetadataanalyzer,updated datastoremetadatafactory to throw classnotfoundexception not hiding this exceptional case .,updated persistent with @ jsonignore to allow jackson serialization,added a constructor to beanfactoryimpl with string parameter,gora - 529 remove org / apache / gora / avro / mapreduce / fsinput . java,setting dirty with value - 1 ( 11111111b ) instead of - 128 ( 1000000b ) when calling setdirty ( ),"tests for gora - 421 , fixing setdirty ( )",gora - 530 : reinstated exception throwing in datastore and query,gora - 530 : fixed bug at accumulostore#deleteschema ( ) failing when the schema does not exist,gora - 530 : removed redundant logging on several try / catch,"add #size ( ) to result api : aerospike , cassandra , couchdb , dynamodb , mongodb , orientdb , jcache , solr , mock , mem .","add #size ( ) to result api : accumulo , avro , hbase set batch size using query . limit",fix 2 space indents,fixed errors after merging,initial commit of gora - pig,refactorization of gorastorage for load command,"support in gora - pig of json configuration for gorastorage . the format is the following : set job . name 'gorapig test' ; register gora / * . jar ; webpage = load ' . ' using org . apache . gora . pig . gorastorage ( ' { ""persistentclass"" : ""admin . webpage"" , ""fields"" : ""baseurl , status"" , ""goraproperties"" : ""gora . datastore . default = org . apache . gora . hbase . store . hbasestore \ \ ngora . datastore . autocreateschema = true \ \ ngora . hbasestore . scanner . caching = 4"" , ""mapping"" : "" < ? xml version = \ \ ""1 . 0 \ \ "" encoding = \ \ ""utf - 8 \ \ "" ? > \ \ n < gora - odm > \ \ n < table name = \ \ ""webpage \ \ "" > \ \ n < family name = \ \ ""f \ \ "" maxversions = \ \ ""1 \ \ "" / > \ \ n < / table > \ \ n < class table = \ \ ""webpage \ \ "" keyclass = \ \ ""java . lang . string \ \ "" name = \ \ ""admin . webpage \ \ "" > \ \ n < field name = \ \ ""baseurl \ \ "" family = \ \ ""f \ \ "" qualifier = \ \ ""bas \ \ "" / > \ \ n < field name = \ \ ""status \ \ "" family = \ \ ""f \ \ "" qualifier = \ \ ""st \ \ "" / > \ \ n < / class > \ \ n < / gora - odm > "" , ""configuration"" : { ""hbase . zookeeper . quorum"" : ""hdp4 , hdp1 , hdp3"" , ""zookeeper . znode . parent"" : "" / hbase - unsecure"" } } ' ) ; dump webpage ;","- remove empty lines . - implement tests within datastoretestbase and datastoretestutil . - fix size ( ) implementation for memstore , accumulo , solr , jcache and orientdb .","updated gorastorage to allow several loads from different origins . now the following script is supported : set job . name 'gorapig test' ; register gora / * . jar ; webpage = load ' . ' using org . apache . gora . pig . gorastorage ( ' { ""persistentclass"" : ""admin . webpage"" , ""fields"" : ""baseurl"" , ""goraproperties"" : ""gora . datastore . default = org . apache . gora . hbase . store . hbasestore \ \ ngora . datastore . autocreateschema = true \ \ ngora . hbasestore . scanner . caching = 4"" , ""mapping"" : "" < ? xml version = \ \ ""1 . 0 \ \ "" encoding = \ \ ""utf - 8 \ \ "" ? > \ \ n < gora - odm > \ \ n < table name = \ \ ""webpage \ \ "" > \ \ n < family name = \ \ ""f \ \ "" maxversions = \ \ ""1 \ \ "" / > \ \ n < / table > \ \ n < class table = \ \ ""webpage \ \ "" keyclass = \ \ ""java . lang . string \ \ "" name = \ \ ""admin . webpage \ \ "" > \ \ n < field name = \ \ ""baseurl \ \ "" family = \ \ ""f \ \ "" qualifier = \ \ ""bas \ \ "" / > \ \ n < / class > \ \ n < / gora - odm > "" , ""configuration"" : { ""hbase . zookeeper . quorum"" : ""hdp4 , hdp1 , hdp3"" , ""zookeeper . znode . parent"" : "" / hbase - unsecure"" } } ' ) ; webpage2 = load ' . ' using org . apache . gora . pig . gorastorage ( ' { ""persistentclass"" : ""admin . webpage"" , ""fields"" : ""contenttype"" , ""goraproperties"" : ""gora . datastore . default = org . apache . gora . hbase . store . hbasestore \ \ ngora . datastore . autocreateschema = true \ \ ngora . hbasestore . scanner . caching = 4"" , ""mapping"" : "" < ? xml version = \ \ ""1 . 0 \ \ "" encoding = \ \ ""utf - 8 \ \ "" ? > \ \ n < gora - odm > \ \ n < table name = \ \ ""webpage \ \ "" > \ \ n < family name = \ \ ""f \ \ "" maxversions = \ \ ""1 \ \ "" / > \ \ n < / table > \ \ n < class table = \ \ ""webpage \ \ "" keyclass = \ \ ""java . lang . string \ \ "" name = \ \ ""admin . webpage \ \ "" > \ \ n < field name = \ \ ""contenttype \ \ "" family = \ \ ""f \ \ "" qualifier = \ \ ""typ \ \ "" / > \ \ n < field name = \ \ ""baseurl \ \ "" family = \ \ ""f \ \ "" / > \ \ n < / class > \ \ n < / gora - odm > "" , ""configuration"" : { ""hbase . zookeeper . quorum"" : ""hdp4 , hdp1 , hdp3"" , ""zookeeper . znode . parent"" : "" / hbase - unsecure"" } } ' ) ; joined = join webpage by key , webpage2 by key ; joined2 = foreach joined generate webpage : : key , webpage : : baseurl , webpage2 : : contenttype ; dump joined2 ;",fix formatting code,add ending line,"updated pig's gorastorage to allow store operations . it performs a map - side store with this script : * * set job . name 'gorapig test3' ; register gora / * . jar ; webpage = load ' . ' using org . apache . gora . pig . gorastorage ( ' { ""persistentclass"" : ""admin . webpage"" , ""fields"" : ""baseurl"" , ""goraproperties"" : ""gora . datastore . default = org . apache . gora . hbase . store . hbasestore \ \ ngora . datastore . autocreateschema = true \ \ ngora . hbasestore . scanner . caching = 4"" , ""mapping"" : "" < ? xml version = \ \ ""1 . 0 \ \ "" encoding = \ \ ""utf - 8 \ \ "" ? > \ \ n < gora - odm > \ \ n < table name = \ \ ""webpage \ \ "" > \ \ n < family name = \ \ ""f \ \ "" maxversions = \ \ ""1 \ \ "" / > \ \ n < / table > \ \ n < class table = \ \ ""webpage \ \ "" keyclass = \ \ ""java . lang . string \ \ "" name = \ \ ""admin . webpage \ \ "" > \ \ n < field name = \ \ ""baseurl \ \ "" family = \ \ ""f \ \ "" qualifier = \ \ ""bas \ \ "" / > \ \ n < / class > \ \ n < / gora - odm > "" , ""configuration"" : { ""hbase . zookeeper . quorum"" : ""hdp4 , hdp1 , hdp3"" , ""zookeeper . znode . parent"" : "" / hbase - unsecure"" } } ' ) ; webpage dest = store webpage into ' . ' using org . apache . gora . pig . gorastorage ( ' { ""persistentclass"" : ""admin . webpage"" , ""fields"" : ""baseurl"" , ""goraproperties"" : ""gora . datastore . default = org . apache . gora . hbase . store . hbasestore \ \ ngora . datastore . autocreateschema = true \ \ ngora . hbasestore . scanner . caching = 4"" , ""mapping"" : "" < ? xml version = \ \ ""1 . 0 \ \ "" encoding = \ \ ""utf - 8 \ \ "" ? > \ \ n < gora - odm > \ \ n < table name = \ \ ""webpage dest \ \ "" > \ \ n < family name = \ \ ""f \ \ "" maxversions = \ \ ""1 \ \ "" / > \ \ n < / table > \ \ n < class table = \ \ ""webpage dest \ \ "" keyclass = \ \ ""java . lang . string \ \ "" name = \ \ ""admin . webpage \ \ "" > \ \ n < field name = \ \ ""baseurl \ \ "" family = \ \ ""f \ \ "" qualifier = \ \ ""bas \ \ "" / > \ \ n < field name = \ \ ""contenttype \ \ "" family = \ \ ""f \ \ "" qualifier = \ \ ""typ \ \ "" / > \ \ n < / class > \ \ n < / gora - odm > "" , ""configuration"" : { ""hbase . zookeeper . quorum"" : ""hdp4 , hdp1 , hdp3"" , ""zookeeper . znode . parent"" : "" / hbase - unsecure"" } } ' ) ; * * and a reduce - side store with this other : * * set job . name 'gorapig test4' ; register gora / * . jar ; webpage = load ' . ' using org . apache . gora . pig . gorastorage ( ' { ""persistentclass"" : ""admin . webpage"" , ""fields"" : ""baseurl"" , ""goraproperties"" : ""gora . datastore . default = org . apache . gora . hbase . store . hbasestore \ \ ngora . datastore . autocreateschema = true \ \ ngora . hbasestore . scanner . caching = 4"" , ""mapping"" : "" < ? xml version = \ \ ""1 . 0 \ \ "" encoding = \ \ ""utf - 8 \ \ "" ? > \ \ n < gora - odm > \ \ n < table name = \ \ ""webpage \ \ "" > \ \ n < family name = \ \ ""f \ \ "" maxversions = \ \ ""1 \ \ "" / > \ \ n < / table > \ \ n < class table = \ \ ""webpage \ \ "" keyclass = \ \ ""java . lang . string \ \ "" name = \ \ ""admin . webpage \ \ "" > \ \ n < field name = \ \ ""baseurl \ \ "" family = \ \ ""f \ \ "" qualifier = \ \ ""bas \ \ "" / > \ \ n < / class > \ \ n < / gora - odm > "" , ""configuration"" : { ""hbase . zookeeper . quorum"" : ""hdp4 , hdp1 , hdp3"" , ""zookeeper . znode . parent"" : "" / hbase - unsecure"" } } ' ) ; webpage2 = load ' . ' using org . apache . gora . pig . gorastorage ( ' { ""persistentclass"" : ""admin . webpage"" , ""fields"" : ""contenttype"" , ""goraproperties"" : ""gora . datastore . default = org . apache . gora . hbase . store . hbasestore \ \ ngora . datastore . autocreateschema = true \ \ ngora . hbasestore . scanner . caching = 4"" , ""mapping"" : "" < ? xml version = \ \ ""1 . 0 \ \ "" encoding = \ \ ""utf - 8 \ \ "" ? > \ \ n < gora - odm > \ \ n < table name = \ \ ""webpage \ \ "" > \ \ n < family name = \ \ ""f \ \ "" maxversions = \ \ ""1 \ \ "" / > \ \ n < / table > \ \ n < class table = \ \ ""webpage \ \ "" keyclass = \ \ ""java . lang . string \ \ "" name = \ \ ""admin . webpage \ \ "" > \ \ n < field name = \ \ ""contenttype \ \ "" family = \ \ ""f \ \ "" qualifier = \ \ ""typ \ \ "" / > \ \ n < / class > \ \ n < / gora - odm > "" , ""configuration"" : { ""hbase . zookeeper . quorum"" : ""hdp4 , hdp1 , hdp3"" , ""zookeeper . znode . parent"" : "" / hbase - unsecure"" } } ' ) ; joined = join webpage by key , webpage2 by key ; joined2 = foreach joined generate webpage : : key as key , webpage : : baseurl as baseurl , webpage2 : : contenttype as contenttype ; webpage dest = store joined2 into ' . ' using org . apache . gora . pig . gorastorage ( ' { ""persistentclass"" : ""admin . webpage"" , ""fields"" : ""baseurl , contenttype"" , ""goraproperties"" : ""gora . datastore . default = org . apache . gora . hbase . store . hbasestore \ \ ngora . datastore . autocreateschema = true \ \ ngora . hbasestore . scanner . caching = 4"" , ""mapping"" : "" < ? xml version = \ \ ""1 . 0 \ \ "" encoding = \ \ ""utf - 8 \ \ "" ? > \ \ n < gora - odm > \ \ n < table name = \ \ ""webpage dest \ \ "" > \ \ n < family name = \ \ ""f \ \ "" maxversions = \ \ ""1 \ \ "" / > \ \ n < / table > \ \ n < class table = \ \ ""webpage dest \ \ "" keyclass = \ \ ""java . lang . string \ \ "" name = \ \ ""admin . webpage \ \ "" > \ \ n < field name = \ \ ""baseurl \ \ "" family = \ \ ""f \ \ "" qualifier = \ \ ""bas \ \ "" / > \ \ n < field name = \ \ ""contenttype \ \ "" family = \ \ ""f \ \ "" qualifier = \ \ ""typ \ \ "" / > \ \ n < / class > \ \ n < / gora - odm > "" , ""configuration"" : { ""hbase . zookeeper . quorum"" : ""hdp4 , hdp1 , hdp3"" , ""zookeeper . znode . parent"" : "" / hbase - unsecure"" } } ' ) ; * *","updated goradeletestorage to allow store that deletes rows by key . bugfixes in gorastorage when storing . delete syntaxis , given a ( key : chararray ) relation : store tuples to delete into ' . ' using org . apache . gora . pig . goradeletestorage ( ' { ""persistentclass"" : ""admin . webpage"" , ""goraproperties"" : ""gora . datastore . default = org . apache . gora . hbase . store . hbasestore"" , ""mapping"" : "" < ? xml version = \ \ ""1 . 0 \ \ "" encoding = \ \ ""utf - 8 \ \ "" ? > < gora - odm > < table name = \ \ ""webpage dest \ \ "" > < family name = \ \ ""f \ \ "" maxversions = \ \ ""1 \ \ "" / > < / table > < class table = \ \ ""webpage dest \ \ "" keyclass = \ \ ""java . lang . string \ \ "" name = \ \ ""admin . webpage \ \ "" > < / class > < / gora - odm > "" , ""configuration"" : { ""hbase . zookeeper . quorum"" : ""hdp4 , hdp1 , hdp3"" , ""zookeeper . znode . parent"" : "" / hbase - unsecure"" } } ' ) ;",- fix formatting code,create template gora - ignite module,gora - 536 : avoid calling class#newinstance when using reflexion use getdeclaredconstructor ( ) . newinstance ( ) instead of class : : newinstance because it may throw undeclared checked exceptions .,"add mapping reading and initialization for ignite backend basic configuration and connection classes were implemented for the ignite backend . the basic skeleton of the new datastore was initialized using mapping files and some trivial methods were implemented ( #close ( ) , #flush ( ) , #getschemaname ( ) , . . . ) . also , an embembed ignite instance was included within the test packages in order to be used in testing .","implement schema handling methods the basic schema creation / deletion methods are implemented for the ignite backend . in addition , all the sql generation code was moved to a separate class .","implement put , get , delete the operations put , get and delete are implemented for the ignite backend . in addition , primary key mapping is improved .","implement queries for ignite the operations newquery , execute , deletebyquery , getpartitions are implemented for the ignite backend . the corresponding dependencies ignitequery and igniteresult are also included .",improve ignite datastore to better suit gora's coding standards formatting and documentation were improved in multiple classes . also dependencies' versions were parameterized within parent pom . xml files and other minor improvements were implemented throughout the project .,"improve sql building strategy and add mr tests for ignite the ignitesqlbuilder class was refactored in in order to simplify the code . also , an implementation of datastoremapreducetestbase was added to the test packages . finally , some missing formatting issues were solved .",gora - 534 upgrade hbase to 2 . 1 . 1,gora - 547 upgrade aerospike client to 4 . 2 . 2,gora - 548 apache flink support for gora,"added license headers , updated gora - pig example readme , updated dependencies",gora - 266 lucene datastore for gora - lewismc,implement size method for luceneresult,fix test cases,clean up code for the release,gora - 554 : upgrade solr dependency to latest,fix minimum value for solr url count,parameterize queue size and thread count,add flink job test utils,gora - 545 fix split size in infinispan store,improve flink module with custom serializer,fix hbase store flink,gora - 549 : remove persistentbase extending java . io . externalizable,remove deprecated api calls from hbasestore and hbasestoremetadataanalyzer classes
"['url = normalize ( url ) ;', 'dest = normalize ( dest ) ;', 'src = normalize ( src ) ;', 'throw ioe ;', 'URI uri = new URI ( url . getProtocol ( ) , url . getUserInfo ( ) , url . getHost ( ) ,', 'if ( ""http"" . equals ( url . getProtocol ( ) ) | | ""https"" . equals ( url . getProtocol ( ) ) ) {', 'url = new URL ( ESCAPE PATTERN . matcher ( uriString ) . replaceAll ( "" % $1"" ) ) ;', 'url . getPort ( ) , url . getPath ( ) , url . getQuery ( ) , url . getRef ( ) ) ;', 'import java . util . regex . Pattern ;', 'ioe . initCause ( e ) ;']","['if ( name ! = null | | url ! = null ) {', 'lics . add ( new License ( name , url ) ) ;', 'licenses . normalize ( ) ;', 'String name = getFirstChildText ( license , LICENSE NAME ) ;', 'for ( Iterator it = getAllChilds ( licenses ) . iterator ( ) ; it . hasNext ( ) ; ) {', 'private static final String LICENSE = ""license"" ;', 'import java . util . ArrayList ;', 'return ( License [ ] ) lics . toArray ( new License [ lics . size ( ) ] ) ;', 'if ( LICENSE . equals ( license . getNodeName ( ) ) ) {', 'Element license = ( Element ) it . next ( ) ;']","['if ( md . getExtraInfo ( ) . size ( ) > 0 ) {', 'out . println ( """" + md . getDescription ( ) ) ;', 'out . print ( "" < description"" ) ;', 'License [ ] licenses = md . getLicenses ( ) ;', 'out . print ( ""url = \\ """" + license . getUrl ( ) + "" \\ "" "" ) ;', 'private static boolean requireInnerInfoElement ( ModuleDescriptor md ) {', 'out . print ( "" homepage = \\ """" + md . getHomePage ( ) + "" \\ """" ) ;', 'if ( license . getUrl ( ) ! = null ) {', 'out . print ( ""name = \\ """" + license . getName ( ) + "" \\ "" "" ) ;', 'out . println ( "" < / description > "" ) ;']","['domReader . setProperty ( ""parent . version"" , domReader . getParentVersion ( ) ) ;', 'Map . Entry prop = ( Map . Entry ) iter . next ( ) ;', 'domReader . getParentArtifactId ( ) ,', 'domReader . setProperty ( ( String ) prop . getKey ( ) , ( String ) prop . getValue ( ) ) ;', 'domReader . getParentVersion ( ) ) ;', 'Message . warn ( ""impossible to load parent for "" + descriptorURL + "" . ""', 'ModuleRevisionId parentModRevID = ModuleRevisionId . newInstance (', '+ "" Parent = "" + parentModRevID ) ;', 'if ( domReader . hasParent ( ) ) {', 'for ( Iterator iter = parentPomProps . entrySet ( ) . iterator ( ) ; iter . hasNext ( ) ; ) {']","['parser . parseDescriptor ( getSettings ( ) , temp . toURI ( ) . toURL ( ) , res , false ) ;', 'getSettings ( ) , temp . toURI ( ) . toURL ( ) , res , false ) ;', 'parser . parseDescriptor (', 'Map parentPomProps = PomModuleDescriptorBuilder . extractPomProperties ( parentDescr . getExtraInfo ( ) ) ;', 'parentDescr . getExtraInfo ( ) ) ;', 'Map parentPomProps = PomModuleDescriptorBuilder . extractPomProperties (']","['private GetMethod doGet ( URL url ) throws IOException {', 'return new URLInfo ( true , getResponseContentLength ( method ) , getLastModified ( method ) ) ;', 'long getResponseContentLength ( HeadMethod head ) ;', 'long getResponseContentLength ( HttpMethodBase method ) ;', 'head . releaseConnection ( ) ;', 'method . releaseConnection ( ) ;', 'HeadMethod head = null ;', 'if ( getRequestMethod ( ) = = URLHandler . REQUEST METHOD HEAD ) {', 'Header header = head . getResponseHeader ( ""Content - Length"" ) ;', 'if ( method ! = null ) {']","['if ( ""ivy . instance"" . equals ( id ) & & getProject ( ) . getReference ( id ) = = null ) {', 'if ( ""ivy . instance"" . equals ( id ) & & getProject ( ) . getReferences ( ) . get ( id ) = = null ) {']","['}', 'if ( stream ! = null ) {', 'if ( !PROJECT . equals ( projectElement . getNodeName ( ) ) ) {', 'in . read ( ) ;', 'parentElement = getFirstChildElement ( projectElement , PARENT ) ;', 'LineNumberReader reader = new LineNumberReader ( new InputStreamReader ( in , ""UTF - 8"" ) ) ;', 'res . getName ( ) , 0 , 0 ) ;', 'if ( !in . markSupported ( ) ) {', 'Document pomDomDoc = XMLHelper . parseToDom ( descriptorURL , res ) ;', 'super ( in ) ;']","['String uriString = uri . toString ( ) ;', 'protected String normalizeToString ( URL url ) throws IOException {', 'throw ioe ;', 'URI uri = new URI ( url . getProtocol ( ) , url . getUserInfo ( ) , url . getHost ( ) ,', 'return url . toExternalForm ( ) ;', 'protected URL normalizeToURL ( URL url ) throws IOException {', 'url . getPort ( ) , url . getPath ( ) , url . getQuery ( ) , url . getRef ( ) ) ;', 'return new URL ( normalizeToString ( url ) ) ;', 'import java . util . regex . Pattern ;', 'if ( !""http"" . equals ( url . getProtocol ( ) ) & & !""https"" . equals ( url . getProtocol ( ) ) ) {']","['public static Document parseToDom ( InputStream stream , Resource res , EntityResolver entityResolver ) throws IOException ,', 'InputStream stream , Resource res , EntityResolver entityResolver )', 'SAXException {', 'throws IOException , SAXException {', '} catch ( SAXException e ) {', 'public static Document parseToDom (', '} catch ( SAXException e ) {', '} else if ( ( off < 0 ) | | ( off > b . length ) | | ( len < 0 ) | |', 'in . mark ( MARK ) ;', 'public InputSource resolveEntity ( String publicId , String systemId ) throws SAXException ,']","['String uriString = uri . toString ( ) ;', 'protected String normalizeToString ( URL url ) throws IOException {', 'throw ioe ;', 'URI uri = new URI ( url . getProtocol ( ) , url . getUserInfo ( ) , url . getHost ( ) ,', 'return url . toExternalForm ( ) ;', 'protected URL normalizeToURL ( URL url ) throws IOException {', 'url . getPort ( ) , url . getPath ( ) , url . getQuery ( ) , url . getRef ( ) ) ;', 'return new URL ( normalizeToString ( url ) ) ;', 'import java . util . regex . Pattern ;', 'if ( !""http"" . equals ( url . getProtocol ( ) ) & & !""https"" . equals ( url . getProtocol ( ) ) ) {']","['if ( href . startsWith ( ""http : "" ) | | href . startsWith ( ""https : "" ) ) {', 'try {', 'href = new URL ( href ) . getPath ( ) ;', '} catch ( Exception ignore ) {', '}', 'continue ;', 'href = href . substring ( url . getPath ( ) . length ( ) ) ;', 'if ( !href . startsWith ( url . getPath ( ) ) ) {']","['+ "" ] + ) "" ) + "" . * "" ;', 'Pattern p = Pattern . compile ( acceptNamePattern ) ;', 'Pattern p = Pattern . compile ( acceptNamePattern . toString ( ) ) ;', 'String acceptNamePattern = "" . * ? ""', 'String acceptNamePattern = "" . * ""', 'namePattern = namePattern . replaceAll ( "" \\ \\ . "" , "" \\ \\ \\ \\ . "" ) ;', '+ "" ] + ) "" ) + "" ( $ | "" + fileSep + "" . * ) "" ;']","['module , branch , "" . * "" ) , settings . getMatcher ( PatternMatcher . EXACT OR REGEXP ) ) ;', '| | ( expression = = module )', '| | ( expression = = branch ) ) {', 'if ( ( expression = = organisation )', 'import org . apache . ivy . plugins . matcher . ExactOrRegexpPatternMatcher ;', 'import org . apache . ivy . plugins . matcher . Matcher ;', 'module , branch , "" . * "" ) , new PatternMatcher ( ) {', '}', 'return ""buildnumber - matcher"" ;', 'private PatternMatcher regexp = new ExactOrRegexpPatternMatcher ( ) ;']","['result . add ( new DefaultPomDependencyMgt ( parts [ 1 ] , parts [ 2 ] , version , scope ) ) ;', 'for ( final Iterator entIter = extras . entrySet ( ) . iterator ( ) ; entIter . hasNext ( ) ; ) {', 'for ( Iterator itExcl = dep . getExcludedModules ( ) . iterator ( ) ; itExcl . hasNext ( ) ; ) {', '}', 'if ( excluded . isEmpty ( ) ) {', 'final Map / * < String , String > * / extras = descriptor . getExtraInfo ( ) ;', '""had the wrong number of parts ( should have 2 ) "" + exclusion parts . length + "" : "" + full exclusion ) ;', 'final String full exclusion = ( String ) ent . getValue ( ) ;', 'if ( key . startsWith ( exclusionPrefix ) ) {', 'if ( exclusion parts . length ! = 2 ) {']","['type , type , null , extraAtt ) ;', '}', 'if ( JAR PACKAGINGS . contains ( type ) ) {', 'type , ext , null , extraAtt ) ;', 'String ext = type ;', 'ext = ""jar"" ;']","['& & node . getDependencyDescriptor ( getParentNode ( ) ) . isTransitive ( )', '& & (', 'node . getDependencyDescriptor ( getParentNode ( ) ) . isTransitive ( )', '| | node . hasAnyMergedUsageWithTransitiveDependency ( rootModuleConf ) )']","['String [ ] dependencyConfs , DependencyDescriptor dd ) {', 'String [ ] confExtends = conf . getExtends ( ) ;', 'caller . addConfiguration ( callerConf , dependencyConfs ) ;', 'addConfiguration ( confExtends [ i ] , dependencyConfs ) ;', 'if ( confExtends ! = null ) {', 'for ( int i = 0 ; i < confExtends . length ; i + + ) {', '}', 'private void updateConfs ( String callerConf , String [ ] dependencyConfs ) {', 'String requestedConf , String [ ] dependencyConfs , DependencyDescriptor dd ) {', 'import java . util . ArrayList ;']","['+ ""commons - httpclient HeadMethod . Please use commons - httpclient 3 . 0 or ""', 'httpClient . getParams ( ) . setParameter ( ""http . useragent"" ,', '= new MultiThreadedHttpConnectionManager ( ) ;', 'new NTCredentials ( c . getUserName ( ) , c . getPasswd ( ) ,', 'new UsernamePasswordCredentials ( c . getUserName ( ) , c . getPasswd ( ) ) ) ;', 'HostUtil . getLocalHostName ( ) , c . getRealm ( ) ) ) ;', 'Message . verbose ( ""proxy configured : host = "" + proxyHost + "" port = "" + proxyPort', 'new AuthScope ( c . getHost ( ) , AuthScope . ANY PORT , c . getRealm ( ) ) ,', 'import org . apache . commons . httpclient . UsernamePasswordCredentials ;', '+ ""commons - httpclient HeadMethod . Please use commons - httpclient 3 . 0 or ""']","['pubdate = Ivy . DATE FORMAT . parse ( attributes . getValue ( ""pubdate"" ) ) ;', 'pubdate = Ivy . DATE FORMAT . parse ( pubDateAttr ) ;', '}', 'String pubDateAttr = attributes . getValue ( ""pubdate"" ) ;', 'if ( pubDateAttr ! = null ) {']","['mRevId . getRevision ( ) , """" , """" , ext , conf , mRevId . getAttributes ( ) ) ;', 'mRevId . getRevision ( ) , """" , """" , ext , conf , mRevId . getAttributes ( ) , null ) ;', 'return substitute ( pattern , artifact . getModuleRevisionId ( ) , artifact , null , origin ) ;', 'tokens . putAll ( extraArtifactAttributes ) ;', 'attributes . putAll ( artifact . getAttributes ( ) ) ;', 'null , moduleRevision . getAttributes ( ) , null ) ;', 'String revision , String artifactName , String artifactType , String artifactExt ) {', 'origin , mrid . getExtraAttributes ( ) , artifact . getExtraAttributes ( ) ) ;', 'return substitute ( pattern , org , module , revision , artifact , type , ext , conf , null ) ;', 'tokens . putAll ( extraModuleAttributes ) ;']","['}', 'if ( branchConstraint = = null ) {', 'branchConstraint = settings . getDefaultBranch ( ModuleId . newInstance ( org , name ) ) ;', 'import org . apache . ivy . core . settings . IvySettings ;']","['inStream . close ( ) ;', 'InputStream inStream = conn . getInputStream ( ) ;', '}', 'inStream . close ( ) ;', 'inStream = conn . getInputStream ( ) ;', 'inStream = conn . getInputStream ( ) ;', 'InputStream inStream = null ;', '}', 'InputStream errStream = ( ( HttpURLConnection ) conn ) . getErrorStream ( ) ;', '} finally {']","['httpClient . getState ( ) . setProxyCredentials (', 'httpClient . getState ( ) . setCredentials (']","['ResolvedModuleRevision rmr = doFindModuleInCache ( mrid , options , null ) ;', 'File artFile = getArchiveFileInCache ( transformedArtifact , origin , false ) ;', 'Message . verbose ( """" + getName ( ) + "" : revision in cache : "" + mrid ) ;', 'if ( artFile . exists ( ) & & repoLastModified > artFile . lastModified ( ) ) {', '. getInstance ( ) . getParser ( mdRef . getResource ( ) ) ;', 'if ( !artFile . delete ( ) ) {', 'ModuleDescriptorParser parser = ModuleDescriptorParserRegistry', 'return null ;', 'Message . verbose ( """" + getName ( ) + "" : found revision in cache : "" + mrid', 'if ( !moduleArtifact . isMetadata ( ) ) {']","['}', '& & current . getRevision ( ) . equals ( mrid . getRevision ( ) ) ) {', 'VisitData data = ( VisitData ) entry . getValue ( ) ;', 'node = data . getNode ( ) ;', 'if ( current . getModuleId ( ) . equals ( mrid . getModuleId ( ) )', 'if ( node = = null ) {', 'break ;', 'ModuleRevisionId current = ( ModuleRevisionId ) entry . getKey ( ) ;', 'Map . Entry entry = ( Entry ) it . next ( ) ;', 'for ( Iterator it = visitData . entrySet ( ) . iterator ( ) ; it . hasNext ( ) ; ) {']","['mdBuilder . addDependencyMgt ( dep ) ;', 'mdBuilder . addDependencyMgt ( ( PomDependencyMgt ) it2 . next ( ) ) ;', '}', '} else {', 'dep . getGroupId ( ) ,', 'for ( Iterator it2 = depMgt . iterator ( ) ; it2 . hasNext ( ) ; ) {', 'mdBuilder . addDependencyMgt ( dep ) ;', 'throw new IOException ( ""Impossible to import module for "" + descriptorURL + "" . ""', 'List depMgt = PomModuleDescriptorBuilder . getDependencyManagements ( importDescr ) ;', 'ResolvedModuleRevision importModule = parseOtherPom ( ivySettings ,']","['""settings include path"" ) ) ;', '""settings include path"" ) ) ;', 'ivy . setSettingsVariables (', '} catch ( URISyntaxException e ) {', 'url = Checks . checkAbsolute ( file , ""classpath"" ) . toURI ( ) . toURL ( ) ;', '}', 'Checks . checkAbsolute ( settingsURL . getPath ( ) ,', 'try {', 'private void classpathStarted ( Map attributes ) throws MalformedURLException {', 'ivy . setSettingsVariables (']","['Authenticator . setDefault ( this ) ;', 'getRequestingPrompt ( ) , getRequestingScheme ( ) ) ;', 'private IvyAuthenticator ( ) {', 'Field f = Authenticator . class . getDeclaredField ( ""theAuthenticator"" ) ;', 'public static final IvyAuthenticator INSTANCE = new IvyAuthenticator ( ) ;', 'Message . debug ( ""Error occured while getting the original authenticator!"" ) ;', 'Authenticator . setDefault ( this ) ;', 'original = ( Authenticator ) f . get ( null ) ;', 'if ( ( result = = null ) & & ( original ! = null ) ) {', 'this . original = original ;']","['import org . apache . ivy . core . module . descriptor . DefaultArtifact ;', 'return md ;', 'import org . apache . ivy . core . module . descriptor . DefaultIncludeRule ;', 'Message . debug ( ""Trying to load included ivy file from cache"" ) ;', 'import org . apache . ivy . core . module . descriptor . ConfigurationAware ;', 'URL parentUrl = cacheFile . toURI ( ) . toURL ( ) ;', 'import org . apache . ivy . core . module . descriptor . Configuration ;', 'mergeConfigurations ( sourceMrid , parent . getConfigurations ( ) ) ;', 'import org . apache . ivy . core . module . descriptor . IncludeRule ;', '}']","['return !""latest . integration"" . equals ( askedMrid . getRevision ( ) ) ;', 'List statuses = StatusManager . getCurrent ( ) . getStatuses ( ) ;', 'return !latestLowest . equals ( askedMrid . getRevision ( ) ) ;', 'String latestLowest = ""latest . "" + lowest . getName ( ) ;', 'Status lowest = ( Status ) statuses . get ( statuses . size ( ) - 1 ) ;', 'import org . apache . ivy . core . module . status . Status ;', 'import java . util . List ;']","['InputStream inStream = conn . getInputStream ( ) ;', '}', 'FileUtil . copy ( srcConn . getInputStream ( ) , dest , l ) ;', 'inStream = new GZIPInputStream ( srcConn . getInputStream ( ) ) ;', 'inStream = conn . getInputStream ( ) ;', 'inStream = new GZIPInputStream ( conn . getInputStream ( ) ) ;', 'InputStream inStream ;', '} else {', 'if ( ""gzip"" . equals ( srcConn . getContentEncoding ( ) ) ) {', 'inStream = srcConn . getInputStream ( ) ;']",['contentLength = - 1 ;'],"['if ( ""gzip"" . equals ( encoding ) ) {', 'result = in ;', 'import java . util . zip . DataFormatException ;', 'result = new GZIPInputStream ( in ) ;', 'import java . util . zip . InflaterInputStream ;', 'inflater . end ( ) ;', 'Inflater inflater = new Inflater ( ) ;', 'result = new InflaterInputStream ( bStream , new Inflater ( true ) ) ;', 'bStream . reset ( ) ;', 'return result ;']","['throw new IOException ( ""Impossible to import module for "" + descriptorURL + "" . ""', 'PomReader domReader = new PomReader ( res ) ;', 'throw new IOException ( ""Impossible to load parent for "" + descriptorURL + "" . ""', 'throw new IOException ( ""Impossible to import module for "" + res . getName ( ) + "" . ""', 'PomReader domReader = new PomReader ( descriptorURL , res ) ;', 'throw new IOException ( ""Impossible to load parent for "" + res . getName ( ) + "" . ""', 'import java . net . URL ;', 'public PomReader ( Resource res ) throws IOException , SAXException {', 'public PomReader ( URL descriptorURL , Resource res ) throws IOException , SAXException {', 'InputStream stream = new AddDTDFilterInputStream ( res . openStream ( ) ) ;']","['exclusionIds . add ( ModuleId . newInstance ( exclusion parts [ 0 ] , exclusion parts [ 1 ] ) ) ;', 'String key = ( String ) ent . getKey ( ) ;', 'final String key = ( String ) ent . getKey ( ) ;', 'String fullExclusion = ( String ) ent . getValue ( ) ;', 'final Map / * < String , String > * / extras = descriptor . getExtraInfo ( ) ;', 'String [ ] exclusionParts = fullExclusion . split ( EXTRA INFO DELIMITER ) ;', 'final String [ ] exclusion parts = full exclusion . split ( EXTRA INFO DELIMITER ) ;', '+ fullExclusion ) ;', 'final String full exclusion = ( String ) ent . getValue ( ) ;', 'String exclusionPrefix = getDependencyMgtExtraInfoPrefixForExclusion (']","['props . put ( depRevisionId . encodeToString ( ) , rev + "" "" + status ) ;', 'props . put ( depRevisionId . encodeToString ( ) , rev + "" "" + status + "" "" + forcedRev ) ;', '}', 'String forcedRev = forcedRevisionId = = null ? rev : forcedRevisionId . getRevision ( ) ;', 'if ( dependencies [ i ] . getModuleRevision ( ) ! = null', '& & !settings . getVersionMatcher ( ) . isDynamic ( depRevisionId ) ) {', 'import java . util . HashMap ;', 'forcedRevisions . put ( dependencies [ i ] . getModuleId ( ) , dependencies [ i ] . getResolvedId ( ) ) ;', 'for ( int i = 0 ; i < dependencies . length ; i + + ) {', 'Map forcedRevisions = new HashMap ( ) ;']","['Pattern p = Pattern . compile ( acceptNamePattern ) ;', 'Matcher m = p . matcher ( path . substring ( root . length ( ) + 1 ) ) ;', '+ IvyPatternHelper . substituteToken ( namePattern , token , "" ( [ ^ "" + fileSep', 'Pattern p = Pattern . compile ( namePattern ) ;', '+ "" ] + ) "" ) + "" ( $ | "" + fileSep + "" . * ) "" ;', 'namePattern = IvyPatternHelper . substituteToken ( namePattern , token , "" ( . + ) "" ) ;', 'String acceptNamePattern = "" . * ? ""', 'Matcher m = p . matcher ( path ) ;']","['conf , artifact . getArtifactOrigin ( ) ) ;', 'artifact . getArtifactOrigin ( ) , mrid . getExtraAttributes ( ) , artifact . getArtifact ( ) . getExtraAttributes ( ) ) ;', 'String destFileName = IvyPatternHelper . substitute ( destPattern ,', '}', 'artifact . getArtifact ( ) . getModuleRevisionId ( ) , artifact . getArtifact ( ) ,', '} else {', 'artifact . getArtifact ( ) . getModuleRevisionId ( ) , artifact . getArtifact ( ) ,', ""String org = mRevId . getOrganisation ( ) = = null ? null : mRevId . getOrganisation ( ) . replace ( ' . ' , ' / ' ) ;"", 'conf , artifact . getArtifactOrigin ( ) ) ;', 'throw new IllegalArgumentException ( ""Unsupported dirMode : "" + options . getDirMode ( ) ) ;']","['File f = new File ( filename ) ;', 's . push ( dissect [ 0 ] ) ;', 'if ( f . isAbsolute ( ) ) {', 'String [ ] dissect = dissect ( path ) ;', 'return new File ( file , filename ) ;', 'path = path . substring ( 1 ) ;', 'return f ;', 'return new String [ ] { root , path } ;', 'char [ ] ca = path . toCharArray ( ) ;', ""int colon = path . indexOf ( ' : ' ) ;""]","['moduleRevId , true , false , true ) ;', 'ModuleDescriptor moduleDescriptor , ModuleRevisionId revisionId ) {', 'DefaultDependencyDescriptor dd = new DefaultDependencyDescriptor ( ivyModuleDescriptor ,', 'super ( moduleDescriptor , revisionId , true , false , true ) ;', '}', 'DefaultDependencyDescriptor dd = new PomDependencyDescriptor ( dep , ivyModuleDescriptor , moduleRevId ) ;', 'public static class PomDependencyDescriptor extends DefaultDependencyDescriptor {', 'private final PomDependencyData pomDependencyData ;', 'return pomDependencyData ;', 'public PomDependencyData getPomDependencyData ( ) {']","['String result = ( String ) ivyModuleDescriptor . getExtraInfo ( ) . get ( key ) ;', 'result = ( String ) ivyModuleDescriptor . getExtraInfo ( ) . get ( key ) ;', '+ ""doesn\'t match expected pattern : "" + key ) ;', 'dependencyManagementMap . put ( ModuleId . newInstance ( dependencyMgt . getGroupId ( ) , dependencyMgt . getArtifactId ( ) ) , dependencyMgt ) ;', 'String key = ( String ) entry . getKey ( ) ;', '+ ""doesn\'t match expected pattern : "" + key ) ;', 'if ( ( key ) . startsWith ( DEPENDENCY MANAGEMENT ) ) {', 'if ( descriptor instanceof PomModuleDescriptor ) {', 'String version = ( String ) md . getExtraInfo ( ) . get ( versionKey ) ;', 'public PomModuleDescriptor ( ModuleDescriptorParser parser , Resource res ) {']","['}', 'selectedNode , evictedNode , callerStack , dynamicCaller ) ;', '} else {', 'selectedNode , evictedNode , blacklisted , versionMatcher , true ) ) {', 'callerStack . pop ( ) ;', 'Stack / * < IvyNode > * / callerStack ,', 'if ( blacklisted . isEmpty ( )', 'settings . getVersionMatcher ( ) , parent , selected , evicted , callerStack , false ) ;', 'versionMatcher , conflictParent , selectedNode , evictedNode , callerStack ) ;', 'Collection blacklisted , VersionMatcher versionMatcher , boolean dynamicCaller ) {']","['if ( vmatcher . isDynamic ( mrid1 ) ) {', 'private final Comparator / * < ModuleRevisionId > * / mridComparator = new MridComparator ( ) ;', 'private final Comparator / * < ArtifactInfo > * / artifactInfoComparator = new ArtifactInfoComparator ( ) ;', 'Version v2 ;', 'public class OsgiLatestStrategy extends ComparatorLatestStrategy {', 'throw new RuntimeException ( ""Uncomparable versions : "" + o1 . getRevision ( ) + "" and ""', 'import java . util . Comparator ;', '} catch ( ParseException e ) {', 'public int compare ( Object o1 , Object o2 ) {', '+ o2 . getRevision ( ) + "" ( "" + e . getMessage ( ) + "" ) "" ) ;']","['. openStream ( url ) ) ) ;', 'BufferedReader r = new BufferedReader ( new InputStreamReader ( contentStream , charset ) ) ;', 'BufferedReader r = new BufferedReader ( new InputStreamReader ( URLHandlerRegistry . getDefault ( )', 'import java . io . InputStream ;', 'InputStream contentStream = urlHandler . openStream ( url ) ;', 'URLHandler urlHandler = URLHandlerRegistry . getDefault ( ) ;', 'String charset = urlHandler . getURLInfo ( url ) . getBodyCharset ( ) ;', 'return new URLInfo ( true , getResponseContentLength ( method ) , getLastModified ( method ) ) ;', 'String contentType = method . getResponseHeader ( ""content - type"" ) . getValue ( ) ;', 'String bodyCharset = BasicURLHandler . getCharSetFromContentType ( contentType ) ;']","['URLResolver parentModuleResolver = new URLResolver ( ) ;', 'try {', 'import java . util . Iterator ;', '} catch ( URISyntaxException e ) {', 'protected void checkParentModuleOnFilesystem ( String location , ModuleRevisionId parentMrid ) throws IOException , ParseException {', 'import org . apache . ivy . plugins . resolver . FileSystemResolver ;', 'if ( !settings . hasResolver ( resolverName ) ) {', 'if ( !""file"" . equals ( descriptorURL . getProtocol ( ) ) ) {', 'DependencyResolver resolver = settings . getResolver ( resolverName ) ;', 'return null ;']","['public static ModuleId intern ( ModuleId moduleId ) {', 'public static synchronized ModuleId intern ( ModuleId moduleId ) {']","['public static ModuleId intern ( ModuleId moduleId ) {', 'public static synchronized ModuleId intern ( ModuleId moduleId ) {']","['""jbi - component"" , ""jbi - shared - library"" } ) ;', '""jbi - component"" , ""jbi - shared - library"" , ""orbit"" } ) ;', 'ext = ""phar"" ;', '} else if ( ""pear"" . equals ( packaging ) ) {']","['""jbi - component"" , ""jbi - shared - library"" } ) ;', '""jbi - component"" , ""jbi - shared - library"" , ""orbit"" } ) ;', 'ext = ""phar"" ;', '} else if ( ""pear"" . equals ( packaging ) ) {']","['Message . warn ( ""problem while listing directories in "" + root + "" : "" + e . getClass ( ) + "" ""', 'Message . verbose ( ""problem while listing resources in "" + root + "" with "" + rep , e ) ;', 'Message . warn ( "" "" + e . getClass ( ) . getName ( ) + "" "" + e . getMessage ( ) ) ;', 'Message . warn ( ""problem while listing resources in "" + root + "" with "" + rep , e ) ;', 'Message . warn ( ""problem while listing resources in "" + parent + "" with "" + rep + "" : "" ) ;', '+ partiallyResolvedPattern , e ) ;', '+ rres + "" : "" + e . getMessage ( ) ) ;', 'Message . verbose ( ""problem while listing resources in "" + parent + "" with "" + rep , e ) ;', 'Message . verbose ( "" "" + e . getClass ( ) . getName ( ) + "" "" + e . getMessage ( ) ) ;', 'Message . warn ( ""problem while listing resources in "" + parent + "" with "" + rep , e ) ;']","['File file = FileUtil . normalize ( location ) ;', 'file = new File ( new URI ( url . toExternalForm ( ) ) ) ;', 'file = FileUtil . normalize ( new File ( url . getPath ( ) ) . getAbsolutePath ( ) ) ;', 'file = new File ( url . getPath ( ) ) ;', 'import org . apache . ivy . core . settings . IvySettings ;', 'File file = new File ( location ) ;', 'file = FileUtil . normalize ( new File ( new URI ( url . toExternalForm ( ) ) ) . getAbsolutePath ( ) ) ;', 'file = FileUtil . normalize ( file . getAbsolutePath ( ) ) ;']","['Set dest = ( Set ) artifactsToCopy . get ( artifact ) ;', 'Artifact artifact = adr . getArtifact ( ) ;', 'ArtifactDownloadReport artifact = ( ArtifactDownloadReport ) iter . next ( ) ;', '}', 'artifact . getArtifact ( ) . getModuleRevisionId ( ) , artifact . getArtifact ( ) ,', 'totalCopiedSize + = FileUtil . getFileLength ( destFile ) ;', '& & !options . getArtifactFilter ( ) . accept ( artifact . getArtifact ( ) ) ) {', 'String destPattern = ""ivy"" . equals ( adr . getType ( ) ) ? destIvyPattern', 'conf , artifact . getArtifactOrigin ( ) ) ;', 'artifact . getModuleRevisionId ( ) , artifact , conf , adr . getArtifactOrigin ( ) ) ;']","['artifact = adr . buildUncompressedArtifact ( ) ;', 'ext = """" ;', 'artifact . getModuleRevisionId ( ) , artifact , conf , adr . getArtifactOrigin ( ) ) ;', 'String ext = artifact . getExt ( ) ;', 'aMrid . getOrganisation ( ) , aMrid . getName ( ) , aMrid . getBranch ( ) ,', 'aMrid . getRevision ( ) , artifact . getName ( ) , artifact . getType ( ) , ext , conf ,', 'ModuleRevisionId aMrid = artifact . getModuleRevisionId ( ) ;', 'artifact . getQualifiedExtraAttributes ( ) ) ;', 'adr . getArtifactOrigin ( ) , aMrid . getQualifiedExtraAttributes ( ) ,']","['import org . apache . ivy . plugins . resolver . FileSystemResolver ;', 'return parser . parseDescriptor ( getSettings ( ) , file . toURL ( ) , res , isValidate ( ) ) ;', 'private static String getModuleInheritanceRepositoryParentResolverName ( ModuleRevisionId parentMrid ) {', '+ "" . This parent module will be ignored . "" ) ;', 'parent . getModuleRevisionId ( ) ,', 'import org . apache . ivy . plugins . parser . ModuleDescriptorParserRegistry ;', 'return null ;', 'local ) ;', 'options . setDownload ( false ) ;', 'boolean local = false ;']","['List dependencyList = ( List ) dependencies . get ( dependency . getId ( ) ) ;', 'boolean evicted = dependency . isEvicted ( getConf ( ) ) ;', 'private void printDependencies ( List / * < IvyNode > * / dependencyList , int indent ) {', 'for ( Iterator iterator = dependencyList . iterator ( ) ; iterator . hasNext ( ) ; ) {', 'IvyNode dependency = ( IvyNode ) iterator . next ( ) ;', 'sb . append ( dependency . getId ( ) . toString ( ) ) ;', 'private boolean hasDependencies ( IvyNode dependency ) {', 'dependencies . put ( moduleRevisionId , new ArrayList / * < IvyNode > * / ( ) ) ;', 'return dependencyList . size ( ) > 0 ;', 'import java . util . Iterator ;']","['StringBuilder sb = new StringBuilder ( ) ;', 'StringBuffer sb = new StringBuffer ( ) ;']","['return ;', 'String optional = ( String ) attributes . get ( ""optional"" ) ;', 'if ( ""true"" . equals ( optional ) & & !settingsFile . exists ( ) ) {', '}']","['File pemFile , String pemPassword , File passFile ) throws IOException {', '} catch ( AgentProxyException e ) {', '}', 'File pemFile , String pemPassword , File passFile , boolean allowedAgentUse )', 'import com . jcraft . jsch . agentproxy . AgentProxyException ;', 'import com . jcraft . jsch . agentproxy . ConnectorFactory ;', 'attemptAgentUse ( jsch ) ;', 'try {', 'throws IOException {', 'if ( allowedAgentUse ) {']","['if ( options . isUncompress ( ) & & adr . getDownloadStatus ( ) ! = DownloadStatus . FAILED ) {', 'packagingManager . unpackArtifact ( artifact , adr . getLocalFile ( ) , archiveFile ) ;', 'import java . util . zip . ZipEntry ;', 'if ( adr . getDownloadStatus ( ) ! = DownloadStatus . FAILED ) {', 'adr . setDownloadDetails ( ""The compressed artifact "" + artifact . getId ( )', 'adr . setUnpackedLocalFile ( archiveFile ) ;', 'out . write ( buffer , 0 , length ) ;', 'unpackArtifact ( artifact , adr , options ) ;', 'File f = new File ( archiveFile , entry . getName ( ) ) ;', 'import org . apache . ivy . core . pack . ArchivePacking ;']","['import com . jcraft . jsch . agentproxy . AgentProxyException ;', 'import com . jcraft . jsch . agentproxy . Connector ;', 'import com . jcraft . jsch . agentproxy . RemoteIdentityRepository ;', 'import com . jcraft . jsch . agentproxy . ConnectorFactory ;']","['dep . getClassifier ( ) , dep . getScope ( ) , dep . isOptional ( ) , null ) ;', 'mrid . getRevision ( ) , null , null , scope , optional , dds [ i ] . isTransitive ( ) ,', 'mrid . getRevision ( ) , null , null , scope , optional , excludes ) ;', '} else if ( excludes ! = null ) {', 'boolean isOptional , ExcludeRule [ ] excludes ) {', 'out . println ( "" < / exclusion > "" ) ;', 'mrid . getRevision ( ) , type , classifier , scope , optional , excludes ) ;', 'dep . getClassifier ( ) , dep . getScope ( ) , dep . isOptional ( ) , true , null ) ;', 'if ( excludes ! = null ) {', 'indent ( out , indent * 3 ) ;']","['List statuses = StatusManager . getCurrent ( ) . getStatuses ( ) ;', '}', 'if ( askedMrid . getBranch ( ) ! = null ) {', 'return true ;', 'List < Status > statuses = StatusManager . getCurrent ( ) . getStatuses ( ) ;', 'String askedBranch = askedMrid . getBranch ( ) ;', 'if ( !sameBranch ) {', ': askedBranch . equals ( foundBranch ) ;', 'boolean sameBranch = ( askedBranch = = null ) ? foundBranch = = null', 'String foundBranch = foundMD . getModuleRevisionId ( ) . getBranch ( ) ;']","['printDependencies ( ( List ) dependencies . get ( mrid ) , 0 ) ;', 'printDependencies ( dependencyList , 0 ) ;', 'List dependencyList = ( List ) dependencies . get ( mrid ) ;', '}', 'if ( dependencyList ! = null ) {']","[""path = path . replace ( ' / ' , sep ) . replace ( ' \\ \\ ' , sep ) ;"", 'return new DissectedPath ( File . separator , pathToDissect . substring ( 1 ) ) ;', 's . push ( dissect [ 0 ] ) ;', 'final String rest = pathToDissect . substring ( root . length ( ) ) ;', 'String [ ] dissect = dissect ( path ) ;', 'if ( i = = 0 ) {', 'path = path . substring ( 1 ) ;', 'int nextsep = pathToDissect . indexOf ( sep , 2 ) ;', 'return new String [ ] { root , path } ;', 'final char sep = File . separatorChar ;']","['ResolveData data = IvyContext . getContext ( ) . getResolveData ( ) ;', 'import static org . apache . ivy . core . IvyContext . getContext ;', 'if ( Visibility . PUBLIC . equals ( m2Conf . getVisibility ( ) ) ) {', 'ResolveData data = getContext ( ) . getResolveData ( ) ;', 'import org . apache . ivy . core . module . descriptor . Configuration . Visibility ;', 'ResolveEngine engine = getContext ( ) . getIvy ( ) . getResolveEngine ( ) ;', 'import org . apache . ivy . plugins . namespace . NameSpaceHelper ;', 'if ( PUBLIC . equals ( m2Conf . getVisibility ( ) ) ) {', 'dd = NameSpaceHelper . toSystem ( dd , ivySettings . getContextNamespace ( ) ) ;', 'import static org . apache . ivy . core . module . descriptor . Configuration . Visibility . PUBLIC ;']","['newMapping . append ( "" - > "" ) . append ( ops [ 1 ] ) ;', 'for ( String groups : mapping . split ( "" ; "" ) ) {', 'return buf . toString ( ) ;', 'if ( org = = null ) {', '| | attributes . getValue ( ""conf"" ) . trim ( ) . length ( ) = = 0 ) ;', 'newMapping . append ( "" - > "" ) . append ( joinArray ( splitToArray ( ops [ 1 ] ) , sep ) ) ;', 'for ( String lh : ops [ 0 ] . split ( "" , "" ) ) {', 'String listSep = list . contains ( "" "" ) ? "" , "" : "" , "" ;', 'String current = tokenizer . nextToken ( ) ;', 'import static org . apache . ivy . util . StringUtils . joinArray ;']","['private String dirMode = RetrieveOptions . DIRMODE FLAT ;', 'return dirMode ;', '} ) ;', 'if ( !DIRMODE VALUES . contains ( dirMode ) ) {', 'this . dirMode = dirMode ;', '. setDirMode ( getDirMode ( ) )', 'public void setDirMode ( String dirMode ) {', '}', 'public String getDirMode ( ) {', 'RetrieveOptions . DIRMODE FLAT , RetrieveOptions . DIRMODE TREE']","['return null ;', '}', 'if ( url = = null ) {', 'settings . setVariable ( ""ivy . ibiblio . default . artifact . root"" ,', 'ivy . bind ( ) ;', 'chain . add ( resolver ) ;', 'chain = new ChainResolver ( ) ;', 'private UpdateSiteResolver resolver ;', 'import org . apache . ivy . core . settings . IvySettings ;', 'ivy = new Ivy ( ) ;']","['}', 'public static IvyAntSettings getDefaultInstance ( Task task ) {', 'return getDefaultInstance ( ( ProjectComponent ) task ) ;']",['import org . apache . tools . ant . Task ;'],"['public Ivy getConfiguredIvyInstance ( Task task ) {', '}', 'return getConfiguredIvyInstance ( ( ProjectComponent ) task ) ;']","['. setConfsToExclude ( ( String [ ] ) confsToRemove', 'if ( bra = = null | | ""null"" . equals ( bra ) ) {', '. setRevision ( revision )', '. setResolvedRevisions ( resolvedDependencies )', '. setResolvedRevisions ( resolvedDependencies )', '. toArray ( new String [ confsToRemove . size ( ) ] ) ) ;', '. setPubdate ( options . getPubdate ( ) )', 'UpdateOptions opts = new UpdateOptions ( )', '. setMerge ( options . isMerge ( ) )', '}']","['p2Descriptor . addArtifactUrl ( a . getId ( ) , a . getVersion ( ) , url ) ;', 'p2Descriptor . addArtifactUrl ( a . getClassifier ( ) , a . getId ( ) , a . getVersion ( ) , url ) ;', 'public void addArtifactUrl ( String id , Version version , String url ) {', 'if ( !classifier . equals ( ""osgi . bundle"" ) ) {', 'public void addArtifactUrl ( String classifier , String id , Version version , String url ) {', '}', 'return ;', 'requirements . add ( new BundleRequirement ( type , name , range , null ) ) ;', 'Message . debug ( ""Unsupported required capability ""', 'if ( type = = null ) {']","['URL url = getSettings ( ) . getRelativeUrlResolver ( ) . getURL ( descriptorURL , location ) ;', 'String urlString = url . toExternalForm ( ) ;', 'URLResolver urlResolver = ( URLResolver ) ivysettings . getResolver ( MODULE INHERITANCE REPOSITORY ) ;', 'if ( ivyContext . getSettings ( ) . getResolver ( getModuleInheritanceRepositoryParentResolverName ( parentMrid ) ) = = null ) {', 'if ( url . openConnection ( ) . getContentLength ( ) > 0 ) {', '}', 'Message . debug ( ""Registering parent module into module inheritance repository , parent module location is "" + url . toExternalForm ( ) ) ;', 'File file = new File ( location ) ;', 'IvySettings ivysettings = IvyContext . getContext ( ) . getSettings ( ) ;', 'ivyContext . getSettings ( ) . addResolver ( parentModuleResolver ) ;']","['this . symbolicNameTarget = symbolicNameTarget ;', 'if ( other . symbolicNameTarget ! = null ) {', '}', 'private boolean isSource = false ;', 'public void setVersionTarget ( Version versionTarget ) {', 'this . versionTarget = versionTarget ;', 'public void setSource ( boolean isSource ) {', 'if ( isSource ) {', 'result = prime * result', 'public boolean isSource ( ) {']","['result = prime * result + ( ( sourceURI = = null ) ? 0 : sourceURI . hashCode ( ) ) ;', 'if ( sourceURI = = null ) {', 'this . sourceURI = sourceURI ;', 'private URI sourceURI ;', '}', 'public URI getSourceURI ( ) {', 'return sourceURI ;', 'if ( other . sourceURI ! = null ) {', 'return false ;', '} else if ( !sourceURI . equals ( other . sourceURI ) ) {']","['import org . apache . tools . ant . util . ReaderInputStream ;', 'bais . close ( ) ;', 'final ReaderInputStream ris = new ReaderInputStream ( new StringReader ( manifest ) ) ;', 'import java . io . ByteArrayInputStream ;', 'ris . close ( ) ;', 'final ByteArrayInputStream bais = new ByteArrayInputStream ( manifest . getBytes ( ""UTF - 8"" ) ) ;', 'final BundleInfo parseManifest = parseManifest ( ris ) ;', 'final BundleInfo parseManifest = parseManifest ( bais ) ;', 'import java . io . StringReader ;']","['p2Descriptor . finish ( ) ;', 'p2Descriptor . finish ( ) ;']","['""release"" , new Date ( ) ) ;', 'getSettings ( ) . getStatusManager ( ) . getDefaultStatus ( ) , new Date ( ) ) ;']","['throw new ParseException ( ""No "" + BUNDLE MANIFEST VERSION + "" in the manifest"" , 0 ) ;', 'String manifestVersion = mainAttributes . getValue ( BUNDLE MANIFEST VERSION ) ;', 'if ( manifestVersion = = null ) {', '}', 'Message . debug ( ""Duplicate source for the bundle ""', 'Message . verbose ( ""Duplicate source for the bundle ""', '}', '+ "" did declare its target . Ignoring it"" ) ;', 'if ( bundleInfo . getSymbolicNameTarget ( ) = = null | | bundleInfo . getVersionTarget ( ) = = null ) {', 'if ( sourceUri = = null ) {']","['public boolean hasResolver ( String resolverName ) {', 'return resolversMap . containsKey ( resolverName ) ;', '}', 'break ;', 'if ( !ivyContext . getSettings ( ) . hasResolver ( getModuleInheritanceRepositoryParentResolverName ( parentMrid ) ) ) {', 'parentModuleResolver = new URLResolver ( ) ;', 'protected void configureModuleInheritanceRepository ( ) {', 'IvySettings ivysettings = IvyContext . getContext ( ) . getSettings ( ) ;', 'parentModuleResolver = resolver ;', 'DependencyResolver resolver = ( DependencyResolver ) iterator . next ( ) ;']","['public void setVariable ( String varName , String value , boolean overwrite , String ifSetVar , String unlessSetVar ) {', '}', '+ ""\' is set . "" ) ;', 'if ( ifSetVar ! = null & & variableContainer . getVariable ( ifSetVar ) = = null ) {', 'Message . verbose ( ""Not setting \'"" + varName + ""\' to \'"" + value + ""\' since \'"" + ifSetVar', 'Message . verbose ( ""Not setting \'"" + varName + ""\' to \'"" + value + ""\' since \'"" + unlessSetVar', '+ ""\' is not set . "" ) ;', 'if ( unlessSetVar ! = null & & variableContainer . getVariable ( unlessSetVar ) ! = null ) {', 'setVariable ( varName , value , overwrite , null , null ) ;', 'return ;']","['try {', 'ModuleDescriptor md = report . toFixedModuleDescriptor ( getSettings ( ) ) ;', '}', 'throw new BuildException ( ""Failed to write into the file "" + dest . getAbsolutePath ( )', 'if ( dest = = null ) {', 'prepareAndCheck ( ) ;', 'this . dest = dest ;', '+ "" ( "" + e . getMessage ( ) + "" ) "" , e ) ;', 'throw new BuildException ( ""The destination file \'"" + dest . getAbsolutePath ( )', 'import java . io . File ;']","['if ( old ! = null ) {', 'if ( old ! = null & & !old . equals ( sourceUri ) ) {']","['requirements . add ( new BundleRequirement ( type , name , range , null ) ) ;', 'String resolution = ( ( RequiredHandler ) child ) . optional ? ""optional"" : null ;', 'protected void handleAttributes ( Attributes atts ) {', 'requirements . add ( new BundleRequirement ( type , name , range , resolution ) ) ;', 'boolean greedy ;', 'boolean optional ;', 'protected void handleAttributes ( Attributes atts ) throws SAXParseException {', 'greedy = getOptionalBooleanAttribute ( atts , GREEDY , Boolean . TRUE ) . booleanValue ( ) ;', 'private static final String GREEDY = ""greedy"" ;', 'private static final String OPTIONAL = ""optional"" ;']","['super ( ""warn"" ) ;', 'super ( ""ignore"" ) ;']","['settings . getDefaultBranch ( new ModuleId ( organisation , module ) ) ;', 'branch = settings . getDefaultBranch ( new ModuleId ( organisation , module ) ) ;', 'settings . getDefaultBranch ( new ModuleId ( organisation , module ) ) ;', 'branch = settings . getDefaultBranch ( new ModuleId ( organisation , module ) ) ;']","['settings . setVariable ( ""ivy . parents . count"" , String . valueOf ( md . getInheritedDescriptors ( ) . length ) ) ;', 'settings . setVariable ( ""ivy . parent [ "" + i + "" ] . branch"" , parentBranch ) ;', 'ExtendsDescriptor parent = md . getInheritedDescriptors ( ) [ i ] ;', 'settings . setVariable ( ""ivy . parent [ "" + i + "" ] . revision"" , parentRevision ) ;', 'settings . setVariable ( ""ivy . parent [ "" + i + "" ] . module"" , parentModule ) ;', 'getProject ( ) . setProperty ( ""ivy . parent [ "" + i + "" ] . revision"" , parentRevision ) ;', '}', 'getProject ( ) . setProperty ( ""ivy . parent [ "" + i + "" ] . module"" , parentModule ) ;', 'import org . apache . ivy . core . module . descriptor . ExtendsDescriptor ;', 'String parentModule = parent . getResolvedParentRevisionId ( ) . getName ( ) ;']","['settings . setVariable ( ""ivy . parents . count"" , String . valueOf ( md . getInheritedDescriptors ( ) . length ) ) ;', 'settings . setVariable ( ""ivy . parent [ "" + i + "" ] . revision"" , parentRevision ) ;', 'settings . setVariable ( ""ivy . parent [ "" + i + "" ] . branch"" , parentBranch ) ;', 'getProject ( ) . setProperty ( ""ivy . parent [ "" + i + "" ] . organisation"" , parentOrg ) ;', 'settings . setVariable ( ""ivy . parent [ "" + i + "" ] . module"" , parentModule ) ;', 'String . valueOf ( md . getInheritedDescriptors ( ) . length ) ) ;', 'getProject ( ) . setProperty ( ""ivy . parent [ "" + i + "" ] . revision"" , parentRevision ) ;', 'settings . setVariable ( ""ivy . parent [ "" + i + "" ] . module"" , parentModule ) ;', 'getProject ( ) . setProperty ( ""ivy . parent [ "" + i + "" ] . module"" , parentModule ) ;', 'getProject ( ) . setProperty ( ""ivy . parent [ "" + i + "" ] . revision"" , parentRevision ) ;']","['. setMakeSymlinks ( line . hasOption ( ""symlink"" ) ) ) ;', '. setMakeSymlinks ( line . hasOption ( ""symlink"" ) )', '. setMakeSymlinksInMass ( line . hasOption ( ""symlinkmass"" ) ) ) ;', 'public void setSymlinkmass ( boolean symlinkmass ) {', '. setMakeSymlinksInMass ( symlinkmass )', '}', 'this . symlinkmass = symlinkmass ;', 'private boolean symlinkmass = false ;', 'this . eventManager . fireIvyEvent (', 'if ( FileUtil . prepareCopy ( archive , destFile , true ) ) {']","['Message . verbose ( ""executing \\ ""sh \\ "" of : \\ n"" + commands . replace ( "" \\ n"" , "" \\ n"" ) ) ;', 'Message . verbose ( ""executing \\ ""sh \\ "" of : \\ n"" + commands . replaceAll ( "" \\ n"" , "" \\ n"" ) ) ;']","['ivy . retrieve ( md . getModuleRevisionId ( ) , pattern , getRetrieveOptions ( ) ) ;', 'RetrieveOptions options = getRetrieveOptions ( ) . setMakeSymlinks ( true ) ;', 'getRetrieveOptions ( ) . setMakeSymlinks ( true ) ;', 'import org . apache . ivy . util . DefaultMessageLogger ;', 'getRetrieveOptions ( ) . setMakeSymlinksInMass ( true ) ;', 'RetrieveOptions options = getRetrieveOptions ( ) . setMakeSymlinksInMass ( true ) ;', 'Message . setDefaultLogger ( new DefaultMessageLogger ( Message . MSG DEBUG ) ) ;', 'ivy . retrieve ( md . getModuleRevisionId ( ) , pattern , options ) ;']","['if ( os . equals ( ""Linux"" ) | | os . equals ( ""Solaris"" ) | | os . equals ( ""FreeBSD"" ) ) {', 'if ( os . equals ( ""Linux"" ) | | os . equals ( ""Solaris"" ) | | os . equals ( ""FreeBSD"" ) | | os . equals ( ""Mac OS X"" ) ) {']",['this . makeSymlinksInMass = options . makeSymlinksInMass ;'],"['DependencyResolver resolver = IvyContext . getContext ( ) . getSettings ( ) . getResolver ( getModuleInheritanceRepositoryParentResolverName ( parentMrid ) ) ;', 'if ( !settings . hasResolver ( resolverName ) ) {', 'if ( resolver = = null ) {', 'IvySettings settings = IvyContext . getContext ( ) . getSettings ( ) ;', 'String resolverName = getModuleInheritanceRepositoryParentResolverName ( parentMrid ) ;', 'DependencyResolver resolver = settings . getResolver ( resolverName ) ;']","['public Collection getNodes ( ModuleId mid ) {', 'public List / * < ModuleId > * / getModuleIds ( ) {', 'public List getModuleIds ( ) {', 'public Collection / * < IvyNode > * / getNodes ( ModuleId mid ) {']","['import org . apache . ivy . util . Message ;', 'import org . apache . ivy . util . DefaultMessageLogger ;', 'Message . setDefaultLogger ( new DefaultMessageLogger ( 99 ) ) ;', 'Message . setDefaultLogger ( new DefaultMessageLogger ( Message . MSG WARN ) ) ;']","['if ( r = = null ) {', 'if ( r = = null ) {', 'CACHE . put ( r , r ) ;', '}', 'r = moduleId ;', 'r = moduleId ;', 'public static synchronized ModuleId intern ( ModuleId moduleId ) {', 'synchronized ( CACHE ) {', 'private static final Map / * < ModuleId , ModuleId > * / CACHE = new WeakHashMap ( ) ;', 'WeakReference ref = ( WeakReference ) CACHE . get ( moduleId ) ;']","['""jbi - component"" , ""jbi - shared - library"" , ""orbit"" } ) ;', '""jbi - component"" , ""jbi - shared - library"" , ""orbit"" , ""hk2 - jar"" } ) ;']","['Message . verbose ( ""Parent module doesn\'t exist on the filesystem : "" + file . getAbsolutePath ( ) ) ;']","['import org . apache . commons . lang . SystemUtils ;', '}', 'if ( SystemUtils . IS OS WINDOWS ) {', 'return ;']","['public static final SimpleDateFormat DATE FORMAT = new SimpleDateFormat ( ""yyyyMMddHHmmss"" ) ;', 'import org . apache . ivy . util . DateUtil ;', 'public static final SimpleDateFormat DATE FORMAT = new SimpleDateFormat ( DateUtil . DATE FORMAT PATTERN ) ;', 'pubRevision = Ivy . DATE FORMAT . format ( pubdate ) ;', 'import org . apache . ivy . util . DateUtil ;', 'pubRevision = DateUtil . format ( pubdate ) ;', 'pubRevision = Ivy . DATE FORMAT . format ( pubdate ) ;', 'import org . apache . ivy . util . DateUtil ;', 'deliver . setPubdate ( Ivy . DATE FORMAT . format ( pubdate ) ) ;', 'pubRevision = DateUtil . format ( pubdate ) ;']","['public CacheDownloadOptions setExpandCompressed ( boolean expandCompressed ) {', 'public boolean isExpandCompressed ( ) {', '}', 'private boolean expandCompressed = false ;', 'return this ;', 'this . expandCompressed = expandCompressed ;', 'return expandCompressed ;', '+ "" is not supported , "" + artifact . getId ( ) + "" won\'t be uncompressed"" ) ;', 'try {', 'import java . util . zip . ZipEntry ;']","['path . createPathElement ( ) . setLocation ( a . getLocalFile ( ) ) ;', '}', 'path . createPathElement ( ) . setLocation ( f ) ;', 'File f = a . getLocalFile ( ) ;', 'import java . io . File ;', 'f = a . getUncompressedLocalDir ( ) ;', 'if ( isUncompressed ( ) & & a . getUncompressedLocalDir ( ) ! = null ) {', 'private boolean uncompressed ;', 'public void setUncompressed ( boolean uncompressed ) {', 'public boolean isUncompressed ( ) {']","['if ( hasInnerClasspath ! = other . hasInnerClasspath ) {', 'public void setHasInnerClasspath ( boolean hasInnerClasspath ) {', 'this . hasInnerClasspath = hasInnerClasspath ;', '}', 'public boolean hasInnerClasspath ( ) {', 'private boolean hasInnerClasspath ;', 'return false ;', 'return hasInnerClasspath ;', 'DefaultArtifact artifact = buildArtifact ( mrid , baseUri , uri , ""jar"" ) ;', 'if ( compression ! = null ) {']","['md . getModuleRevisionId ( ) , getBaseUri ( ) , source , ""source"" ) ;', 'md . getModuleRevisionId ( ) , getBaseUri ( ) , source , ""source"" , null ) ;']","['targetArtifactsStructure . addAll ( FileUtil . getPathFiles ( fileRetrieveRoot ,', '. iterator ( ) ;', 'destFile ) ) ;', '}', 'Iterator destFiles = FileUtil . listAll ( destFile , Collections . EMPTY LIST )', 'targetArtifactsStructure . addAll ( FileUtil . getPathFiles ( fileRetrieveRoot ,', 'while ( destFiles . hasNext ( ) ) {', '( File ) destFiles . next ( ) ) ) ;', 'String pattern = ""build / test / retrieve / [ organization ] / [ module ] / [ conf ] / [ type ] s / [ artifact ] - [ revision ] ( . [ ext ] ) "" ;', '}']","['md . getModuleRevisionId ( ) , getBaseUri ( ) , source , ""source"" , null ) ;', 'md . getModuleRevisionId ( ) , getBaseUri ( ) , source , ""source"" , compression ) ;', 'String compression = md . getAllArtifacts ( ) [ 0 ] . getExtraAttribute ( ""compression"" ) ;', 'manifest = ( ( InstructionHandler ) child ) . getBufferedChars ( ) ;', 'bundleInfo . setHasInnerClasspath ( zipped . booleanValue ( ) ) ;', '} else if ( ""zipped"" . equals ( key ) ) {', 'manifest = buffer ;', 'zipped = Boolean . valueOf (', 'if ( zipped ! = null ) {', 'bundleInfo . setHasInnerClasspath ( true ) ;']","['private List / * < String > * / classpath ;', 'public List / * < String > * / getClasspath ( ) {', 'this . classpath = classpath ;', '} else if ( !classpath . equals ( other . classpath ) ) {', 'if ( other . classpath ! = null ) {', '}', 'public void setClasspath ( List / * < String > * / classpath ) {', 'return false ;', 'return classpath ;', 'if ( classpath = = null ) {']","['path . createPathElement ( ) . setLocation ( f ) ;', 'List / * < String > * / cp = bundleInfo . getClasspath ( ) ;', 'File manifest = new File ( f , ""META - INF / MANIFEST . MF"" ) ;', 'if ( !osgi | | !f . isDirectory ( ) ) {', '}', 'protected void addToPath ( Path path , File f ) throws Exception {', 'for ( int i = 0 ; i < cp . size ( ) ; i + + ) {', 'addToPath ( path , f ) ;', 'BundleInfo bundleInfo = ManifestParser . parseManifest ( manifest ) ;', 'String p = ( String ) cp . get ( i ) ;']","['if ( isUncompressed ( ) & & a . getUncompressedLocalDir ( ) ! = null ) {', 'if ( isUncompress ( ) & & a . getUncompressedLocalDir ( ) ! = null ) {', 'private boolean uncompressed ;', 'private boolean uncompress ;', 'public void setUncompressed ( boolean uncompressed ) {', 'return uncompress ;', 'public boolean isUncompressed ( ) {', 'resolve . setUncompress ( uncompress ) ;', 'this . uncompressed = uncompressed ;', 'public boolean isUncompress ( ) {']","['URI uri = bundle . getUri ( ) ;', 'URI uri = bundle . getUri ( ) ;', 'md . addArtifact ( CONF NAME DEFAULT , artifact ) ;', 'if ( baseUri ! = null ) {', 'if ( uri ! = null ) {', 'md . addArtifact ( CONF NAME DEFAULT , artifact ) ;', '}', 'if ( uri ! = null ) {', 'DefaultArtifact artifact = buildArtifact ( mrid , baseUri , sourceURI , ""source"" ,', '}']","['return resolve ( ivySource . toURI ( ) . toURL ( ) , options ) ;', '}', 'throws ParseException , IOException {', 'public ResolveReport resolve ( File ivySource , ResolveOptions options )', 'return new URI ( ( ( File ) location ) . toURL ( ) . toExternalForm ( ) ) ;', 'return new URI ( ( ( File ) location ) . toURI ( ) . toURL ( ) . toExternalForm ( ) ) ;', '""test / repositories / 1 / org6 / mod6 . 1 / ivys / ivy - 0 . 3 . xml"" ) . toURL ( ) ,', '""test / repositories / 1 / org6 / mod6 . 1 / ivys / ivy - 0 . 3 . xml"" ) ,', 'ivy2 . configure ( new File ( ""test / repositories / norev / ivysettings . xml"" ) . toURL ( ) ) ;', 'ivy2 . configure ( new File ( ""test / repositories / norev / ivysettings . xml"" ) . toURI ( ) . toURL ( ) ) ;']","['String expectedOrg = ""organisation = \\ ""sp�cial \\ """" ;', 'String expectedOrg = ""organisation = \\ ""sp \\ u00E9cial \\ """" ;']","['resolver . addIvyPattern (', 'resolver . addIvyPattern ( repoRoot + "" [ organisation ] / [ module ] / [ revision ] / ivy . xml"" ) ;', 'new File ( repoRoot , "" [ organisation ] / [ module ] / [ revision ] / ivy . xml"" ) . toURI ( ) . toURL ( ) . toExternalForm ( ) ) ;', '. toExternalForm ( ) ;', 'File repoRoot = new File ( ""test / repositories / packager / repo"" ) ;', 'String repoRoot = new File ( ""test / repositories / packager / repo"" ) . toURI ( ) . toURL ( ) . toExternalForm ( ) ;', 'new File ( repoRoot , "" [ organisation ] / [ module ] / [ revision ] / packager . xml"" ) . toURI ( ) . toURL ( ) . toExternalForm ( ) ) ;', 'String repoRoot = new File ( ""test / repositories / IVY - 1179 / repo"" ) . toURI ( ) . toURL ( )', 'File repoRoot = new File ( ""test / repositories / IVY - 1179 / repo"" ) ;', '+ "" [ organisation ] / [ module ] / [ revision ] / packager . xml"" ) ;']","['resolver . addIvyPattern ( ""file : "" + rootpath + "" / [ organisation ] / [ module ] / ivys / ivy - [ revision ] . xml"" ) ;', 'resolver . addIvyPattern ( rootpath + "" / [ organisation ] / [ module ] / ivys / ivy - [ revision ] . xml"" ) ;', 'resolver . addArtifactPattern ( ""file : "" + rootpath + "" / [ organisation ] / [ module ] / [ type ] s / [ artifact ] - [ revision ] . [ type ] "" ) ;', 'String rootpath = new File ( ""test / repositories / 1"" ) . getAbsoluteFile ( ) . toURI ( ) . toURL ( ) . toExternalForm ( ) ;', 'String rootpath = new File ( ""test / repositories / 1"" ) . getAbsolutePath ( ) ;', 'resolver . addArtifactPattern ( rootpath + "" / [ organisation ] / [ module ] / [ type ] s / [ artifact ] - [ revision ] . [ type ] "" ) ;']","['. getParentFile ( ) . toURI ( ) . toURL ( ) . toExternalForm ( ) ) ;', 'setVariable ( ""ivy . settings . dir . url"" , new File ( settingsFile . getAbsolutePath ( ) )']","['setVariable ( ""ivy . settings . dir"" , settingsURLStr . substring ( 0 , slashIndex ) ) ;', 'setVariable ( ""ivy . settings . dir . url"" , dirUrl ) ;', 'setVariable ( ""ivy . settings . dir"" , dirUrl ) ;', 'String dirUrl = settingsURLStr . substring ( 0 , slashIndex ) ;', 'public void testCompressed ( ) throws Exception {', 'public void testUncompress ( ) throws Exception {', 'new File ( ""test / repositories / external - artifacts"" ) . toString ( ) ) ;', 'Arrays . sort ( jarContents ) ;', 'new File ( ""test / repositories / external - artifacts"" ) . toURI ( ) . toURL ( ) . toExternalForm ( ) ) ;', 'import java . util . Arrays ;']","['private static final Pattern ALLOWED PATH PATTERN = Pattern . compile ( "" [ \\ \\ w - . / \\ \\ \\ \\ : ~ ] + "" ) ;', 'private static final Pattern ALLOWED PATH PATTERN = Pattern . compile ( "" [ \\ \\ w - . / \\ \\ \\ \\ : ~ % \\ \\ ( \\ \\ ) ] + "" ) ;']","['resource = new FileResource ( new FileRepository ( ) , new File ( url . getPath ( ) ) ) ;', 'try {', 'f = new File ( new URI ( url . toExternalForm ( ) ) ) ;', 'f = new File ( url . getPath ( ) ) ;', '} catch ( URISyntaxException e ) {', '}', 'import java . net . URI ;', 'File f ;', 'import java . net . URISyntaxException ;', 'resource = new FileResource ( new FileRepository ( ) , f ) ;']","['if ( vmatcher . isDynamic ( mrid1 ) ) {', 'return vmatcher . compare ( mrid1 , mrid2 , mridComparator ) ;', 'if ( vmatcher . isDynamic ( mrid1 ) & & vmatcher . isDynamic ( mrid2 ) ) {', '} else if ( vmatcher . isDynamic ( mrid1 ) ) {', 'if ( vmatcher . isDynamic ( mrid1 ) ) {', 'return vmatcher . compare ( mrid1 , mrid2 , mridComparator ) ;', 'if ( vmatcher . isDynamic ( mrid1 ) & & vmatcher . isDynamic ( mrid2 ) ) {', '} else if ( vmatcher . isDynamic ( mrid1 ) ) {', 'out . print ( getIndent ( ) ) ;', 'if ( options . isMerge ( )']","['return vmatcher . compare ( mrid1 , mrid2 , mridComparator ) ;', 'if ( vmatcher . isDynamic ( mrid1 ) ) {', 'if ( vmatcher . isDynamic ( mrid1 ) & & vmatcher . isDynamic ( mrid2 ) ) {', '} else if ( vmatcher . isDynamic ( mrid1 ) ) {', 'return vmatcher . compare ( mrid1 , mrid2 , mridComparator ) ;', 'if ( vmatcher . isDynamic ( mrid1 ) ) {', 'if ( vmatcher . isDynamic ( mrid1 ) & & vmatcher . isDynamic ( mrid2 ) ) {', '} else if ( vmatcher . isDynamic ( mrid1 ) ) {', 'if ( isDynamic ( askedMrid ) & & !isDynamic ( foundMrid ) ) {', 'return needModuleDescriptor ( askedMrid , foundMrid ) ? 0 : 1 ;']","['private boolean isDependencyModuleExcluded ( String rootModuleConf ,', 'if ( isDependencyModuleExcluded ( dd , rootModuleConf , requestedDependencyRevisionId , conf ) ) {', 'if ( isDependencyModuleExcluded ( rootModuleConf , requestedDependencyRevisionId , conf ) ) {', '}', 'return callers . doesCallersExclude ( rootModuleConf , DefaultArtifact . newIvyArtifact (', 'if ( callersStack . contains ( c . getId ( ) ) ) {', 'dependencyRevisionId , null ) ) ;', 'return Boolean . valueOf ( c . doesCallersExclude ( rootModuleConf , artifact , callersStack ) ) ;', 'IvyNode c = getData ( ) . getNode ( md . getModuleRevisionId ( ) ) ;', 'private boolean isDependencyModuleExcluded ( DependencyDescriptor dd , String rootModuleConf ,']","['Configuration conf = md . getConfiguration ( resolvedConf [ i ] ) ;', 'fixedmd . addConfiguration ( new Configuration ( resolvedConf [ i ] ) ) ;', 'fixedmd . addConfiguration ( conf ) ;']","['ZipFile zipFile = new ZipFile ( adr . getLocalFile ( ) ) ;', 'ZipFile zipFile = null ;', '} catch ( IOException e ) {', 'try {', 'if ( zipFile ! = null ) {', 'zipFile . close ( ) ;', '}', 'zipFile = new ZipFile ( adr . getLocalFile ( ) ) ;', '} finally {']","['deps . addAll ( getDependencies ( rootModuleConf , confs [ i ] , confs [ i ] ) ) ;', 'public Collection getDependencies ( String rootModuleConf , String [ ] confs , String requestedConf ) {', 'public Collection getDependencies ( String rootModuleConf , String [ ] confs ) {', 'deps . addAll ( getDependencies ( rootModuleConf , confs [ i ] , requestedConf ) ) ;', '. getDependencies ( node . getRootModuleConf ( ) ,', 'Collection parentDepIvyNodes = parent . getNode ( ) . getDependencies (', 'ancestor . getNode ( ) . getConfigurations ( node . getRootModuleConf ( ) ) ) ;', 'parent . getNode ( ) . getConfigurations ( node . getRootModuleConf ( ) ) ,', 'new String [ ] { node . getParentConf ( ) } ) ;', 'parent . getRequestedConf ( ) ) ;']","['String [ ] elements = contentType . split ( "" ; "" ) ;', 'String [ ] elements = contentType . split ( "" ; "" ) ;', 'for ( int i = 0 ; i < elements . length ; i + + ) {', '}', 'String element = elements [ i ] . trim ( ) ;', 'for ( int i = 0 ; i < elements . length ; i + + ) {', 'charSet = element . substring ( ""charset = "" . length ( ) ) ;', 'String element = elements [ i ] . trim ( ) ;', 'if ( element . toLowerCase ( ) . startsWith ( ""charset = "" ) ) {', 'if ( element . toLowerCase ( ) . startsWith ( ""charset = "" ) ) {']","['public ModuleDescriptor getResolveModuleDescriptor ( ModuleRevisionId mrid )', 'public ModuleDescriptor getResolvedModuleDescriptor ( ModuleRevisionId mrid )', 'ModuleDescriptor getResolveModuleDescriptor ( ModuleRevisionId mrid ) throws ParseException , IOException ;', 'ModuleDescriptor getResolvedModuleDescriptor ( ModuleRevisionId mrid ) throws ParseException , IOException ;', 'ModuleDescriptor md = getCache ( ) . getResolveModuleDescriptor ( mrid ) ;', 'ModuleDescriptor md = getCache ( ) . getResolvedModuleDescriptor ( mrid ) ;', 'md = cacheManager . getResolveModuleDescriptor ( mrid ) ;', 'md = cacheManager . getResolvedModuleDescriptor ( mrid ) ;', 'ModuleDescriptor md = getCache ( ) . getResolveModuleDescriptor ( mrid ) ;', 'ModuleDescriptor md = getCache ( ) . getResolvedModuleDescriptor ( mrid ) ;']","['assertNotNull ( report ) ;', '""test - SNAPSHOT2"" , ""jar"" , ""jar"" ) . exists ( ) ) ;', 'ResolveReport report = ivy . resolve (', 'Ivy ivy = new Ivy ( ) ;', 'getResolveOptions ( new String [ ] { "" * ( public ) "" } ) , true ) ;', 'ModuleRevisionId . newInstance ( ""org . apache"" , ""test - SNAPSHOT2"" , ""latest . integration"" ) ,', 'ModuleRevisionId . newInstance ( ""org . apache"" , ""test - SNAPSHOT2"" , ""2 . 0 . 2 - SNAPSHOT"" ) )', 'assertFalse ( report . hasError ( ) ) ;', 'assertTrue ( getArchiveFileInCache ( ivy , ""org . apache"" , ""test - SNAPSHOT2"" , ""2 . 0 . 2 - SNAPSHOT"" ,', '}']","['String snapshotVersion = findSnapshotVersion ( historicalMrid ) ;', 'if ( snapshotVersion ! = null ) {', 'pattern = pattern . replaceFirst ( "" \\ \\ - \\ \\ [ revision \\ \\ ] "" , "" - "" + snapshotVersion ) ;', 'String snapshotVersion = findSnapshotVersion ( historicalMrid ) ;', 'if ( snapshotVersion ! = null ) {', '}', 'if ( rev . endsWith ( ""SNAPSHOT"" ) ) {', 'pattern = pattern . replaceFirst ( "" \\ \\ - \\ \\ [ revision \\ \\ ] "" , "" - "" + snapshotVersion ) ;']","['stream . close ( ) ;', 'stream . close ( ) ;', '} catch ( IOException e ) {', 'Document pomDomDoc = XMLHelper . parseToDom ( source , new EntityResolver ( ) {', 'try {', '} catch ( IOException e ) {', 'if ( stream ! = null ) {', 'try {', '}', 'source . setSystemId ( XMLHelper . toSystemId ( descriptorURL ) ) ;']","['attributes . getValue ( ""location"" ) ,', 'location ,', 'publish . setPubrevision ( ""1 . 2"" ) ;', '}', 'resolve . setFile ( new File ( ""test / java / org / apache / ivy / ant / extends / child1 / ivy - child1 . xml"" ) ) ;', 'resolve . setProject ( project ) ;', 'resolve . execute ( ) ;', 'expectedLine = expected . readLine ( ) ) {', 'File published = new File ( ""test / repositories / 1 / apache / child1 / ivys / ivy - 1 . 2 . xml"" ) ;', '+ + lineNo ;']","['continue ;', 'break ;', '}', 'continue ;', 'fixedmd . addDependency ( dep ) ;', '}', 'DefaultDependencyDescriptor dep = new DefaultDependencyDescriptor ( fixedmd ,', 'if ( node . isEvicted ( rootConfs [ j ] ) ) {', 'node . getResolvedId ( ) , true , false , false ) ;', 'fixedmd . addDependency ( dep ) ;']","['mdBuilder . addDependencyMgt ( ( PomDependencyMgt ) it2 . next ( ) ) ;', 'importedDepMgt . getGroupId ( ) ,', 'importedDepMgt . getVersion ( ) ,', 'importedDepMgt . getScope ( ) ,', 'mdBuilder . addDependencyMgt ( new DefaultPomDependencyMgt (', 'importedDepMgt . getExcludedModules ( ) ) ) ;', 'PomDependencyMgt importedDepMgt = ( PomDependencyMgt ) it2 . next ( ) ;', 'importedDepMgt . getArtifactId ( ) ,', 'Ivy ivy = new Ivy ( ) ;', '}']","['} ) ;', '}', 'static synchronized void remove ( File file ) {', 'while ( itr . hasNext ( ) ) {', 'private static LinkedHashSet files = new LinkedHashSet ( ) ;', 'itr . remove ( ) ;', 'static synchronized void add ( File file ) {', '( ( File ) itr . next ( ) ) . delete ( ) ;', 'public void run ( ) {', 'import java . io . File ;']","['pattern = pattern . replaceFirst ( "" \\ \\ - \\ \\ [ revision \\ \\ ] "" , "" - "" + snapshotVersion ) ;', 'patternForRev = pattern . replaceFirst ( "" \\ \\ - \\ \\ [ revision \\ \\ ] "" , "" - "" + snapshotVersion ) ;', 'pattern , historicalMrid , artifact ) ;', 'String patternForRev = pattern ;', 'patternForRev , historicalMrid , artifact ) ;']","['if ( ( res ! = null ) & & res . exists ( ) ) {', 'if ( res ! = null ) {']","['new String [ ] { ""1 . 0"" , ""1 . 1"" , ""1 . 2"" , ""1 . 3"" , ""1 . 4"" , ""2 . 0"" , ""2 . 1"" , ""2 . 2"" } ) ;', 'new String [ ] { ""1 . 0"" , ""1 . 1"" , ""1 . 2"" , ""1 . 3"" , ""1 . 4"" , ""2 . 0"" , ""2 . 1"" , ""2 . 2"" , ""2 . 3"" } ) ;']","['return new URLInfo ( true , getResponseContentLength ( method ) , getLastModified ( method ) , bodyCharset ) ;', 'return new URLInfo ( true , getResponseContentLength ( method ) ,', 'String bodyCharset = BasicURLHandler . getCharSetFromContentType ( contentType ) ;', 'getLastModified ( method ) , method . getRequestCharSet ( ) ) ;', 'String contentType = method . getResponseHeader ( ""content - type"" ) . getValue ( ) ;']","['out . println ( "" transitive = \\ ""false \\ """" ) ;', 'out . print ( "" transitive = \\ ""false \\ """" ) ;']","['if ( description ! = null ) {', 'if ( ( description ! = null ) & & ( description . length ( ) > 0 ) ) {']","['import java . text . DateFormat ;', 'return DateUtil . parse ( date ) ;', 'import java . text . SimpleDateFormat ;', 'throw new BuildException ( ""Publication date provided in bad format . Should be \'""', 'return DATE FORMAT . parse ( date ) ;', 'import org . apache . ivy . util . DateUtil ;', 'private static final DateFormat DATE FORMAT = new SimpleDateFormat ( ""yyyyMMddHHmmss"" ) ;', '+ DateUtil . DATE FORMAT PATTERN + ""\' and not \'"" + date + ""\'!"" ) ;', 'throw new BuildException (', '+ date ) ;']","['config . setProperty ( ""PreferredAuthentications"" ,', 'import java . util . Properties ;', 'Properties config = new Properties ( ) ;', '""publickey , keyboard - interactive , password"" ) ;', 'session . setConfig ( config ) ;']","['put . getParams ( ) . setBooleanParameter ( ""http . protocol . expect - continue"" , true ) ;']","['throws ParserConfigurationException , SAXException {', 'try {', 'SAXParser parser = XMLHelper . newSAXParser ( schema , schemaStream ) ;', '= ""http : / / apache . org / xml / features / nonvalidating / load - external - dtd"" ;', 'private static SAXParser newSAXParser ( URL schema , InputStream schemaStream )', '}', 'boolean loadExternalDtds ) throws ParserConfigurationException , SAXException {', 'canDisableExternalDtds = Boolean . FALSE ;', 'boolean loadExternalDtds ) throws SAXException , IOException , ParserConfigurationException {', 'parse ( xmlStream , schema , handler , lHandler , true ) ;']","['* >', 'return download ;', '. append ( originalDependency . getResolvedId ( ) . getOrganisation ( ) ) / /', '. append ( latest . getResolvedId ( ) . getRevision ( ) ) ;', '. append ( """" ) / /', 'import java . text . ParseException ;', 'for ( int i = 0 ; i < originalModuleDescriptor . getDependencies ( ) . length ; i + + ) {', 'dependencyUpdateDetected = true ;', 'import java . util . ArrayList ;', 'if ( !dependencyUpdateDetected ) {']","['StringBuilder sb = new StringBuilder ( ) ;', 'StringBuffer sb = new StringBuffer ( ) ;']","['dependencyUpdateDetected = true ;', '. append ( "" - > "" ) / /', '. append ( "" - > "" ) / /', 'private boolean showTransitive = false ;', '. append ( latest . getResolvedId ( ) . getRevision ( ) ) ;', '}', 'StringBuffer sb = new StringBuffer ( ) ;', 'if ( ( !isTransitiveDependency ) | | ( isTransitiveDependency & & showTransitive ) ) {', '. append ( """" ) / /', '. append ( originalDependency . getResolvedId ( ) . getOrganisation ( ) ) / /']","['} ) ;', 'url = repoUrl + url . substring ( 10 ) ;', '}', '}', 'public void childHanlded ( DelegetingHandler child ) {', '} else {', 'addChild ( new PropertiesHandler ( ) , new ChildElementHandler ( ) {', 'if ( url . startsWith ( ""$ { repoUrl } "" ) ) {', 'url = url . replaceAll ( "" \\ \\ $ \\ \\ { repoUrl \\ \\ } "" , repoUrl ) ;', 'url = url . replaceAll ( "" \\ \\ $ \\ \\ { repoUrl \\ \\ } "" , repoUrl ) ;']","['import java . util . ArrayList ;', 'private final Set / * < ModuleDescriptor > * / modules = new HashSet ( ) ;', 'import java . util . List ;', 'private final List / * < ModuleDescriptor > * / modules = new ArrayList ( ) ;', 'Iterator itModules = site . getModules ( ) ;', 'RepoDescriptor site = loader . load ( new URI (', 'assertTrue ( name , name . indexOf ( ""org . maven"" ) ! = - 1 ) ;', 'assertTrue ( site . getModules ( ) . hasNext ( ) ) ;', 'assertFalse ( site . getModules ( ) . hasNext ( ) ) ;', 'assertTrue ( CollectionUtils . toList ( site . getModules ( ) ) . size ( ) > 20 ) ;']","['addLockStrategy ( ""artifact - lock"" , new ArtifactLockStrategy ( debugLocking ( ) ) ) ;', 'addLockStrategy ( ""artifact - lock - nio"" , new NIOFileLockStrategy ( debugLocking ( ) ) ) ;', 'import org . apache . ivy . plugins . lock . ArtifactLockStrategy ;', 'import org . apache . ivy . plugins . lock . CreateFileLockStrategy ;', 'addLockStrategy ( ""artifact - lock"" , new CreateFileLockStrategy ( debugLocking ( ) ) ) ;', 'import org . apache . ivy . plugins . lock . NIOFileLockStrategy ;', '}', 'public abstract class ArtifactLockStrategy extends FileBasedLockStrategy {', 'private void init ( ) {', 'super ( locker , debugLocking ) ;']","['ModuleDescriptor md = report . toFixedModuleDescriptor ( getSettings ( ) ) ;', 'for ( int i = 0 ; i < keeps . size ( ) ; i + + ) {', '}', 'midToKeep . add ( ModuleId . newInstance ( ( ( Keep ) keeps . get ( i ) ) . org , ( ( Keep ) keeps . get ( i ) ) . module ) ) ;', 'private String module ;', 'this . org = org ;', 'keeps . add ( k ) ;', 'import java . util . List ;', 'public static class Keep {', 'ModuleDescriptor md = report . toFixedModuleDescriptor ( getSettings ( ) , midToKeep ) ;']","['checkFixedMdDependency ( fixedMd . getDependencies ( ) [ 1 ] , ""org1"" , ""mod1 . 2"" , ""1 . 1"" , ""compile"" ,', '""default"" , new String [ ] { "" * "" } ) ;', 'checkFixedMdDependency ( fixedMd . getDependencies ( ) [ 0 ] , ""org1"" , ""mod1 . 2"" , ""1 . 1"" , ""default"" ,', 'try {', 'new String [ ] { "" * "" } ) ;', '} catch ( AssertionFailedError e ) {', 'new String [ ] { ""default"" } ) ;', 'checkFixedMdDependency ( fixedMd . getDependencies ( ) [ 1 ] , ""org1"" , ""mod1 . 2"" , ""1 . 1"" ,', 'import junit . framework . AssertionFailedError ;', '""compile"" , new String [ ] { ""default"" } ) ;']","['return v1 . compareTo ( v2 ) ;', 'throw e ;', 'try {', 'if ( e . getCause ( ) instanceof ParseException ) {', 'throw new RuntimeException ( ""Uncomparable versions : "" + o1 . getRevision ( ) + "" and ""', '+ o2 . getRevision ( ) + "" ( "" + e . getMessage ( ) + "" ) "" ) ;', '}', '} catch ( RuntimeException e ) {', 'return v1 . compareTo ( v2 ) ;', 'throw new RuntimeException ( ""Ill formed OSGi version"" ) ;']","['+ ""please provide one of them through the attribute \'resolver\' , \'cache\' or \'dir\'"" ) ;', 'prepareAndCheck ( ) ;', '""No resolver , cache or basedir specified : ""', '} catch ( IOException e ) {', 'super ( BuildBundleRepoDescriptorTask . this ) ;', 'try {', 'throw new BuildException (', 'public class BuildOBRTask extends IvyCacheTask {', 'public class BuildBundleRepoDescriptorTask extends IvyTask {', 'super ( BuildOBRTask . this ) ;']","['boolean end = false ;', 'buffer . append ( c ) ;', 'end = true ;', '}', 'if ( end ) {', 'end = false ;', 'error ( ""Expecting the end of a value or of an parameter name"" ) ;', 'ManifestHeaderValue value = new ManifestHeaderValue ( ""glassfish javax . servlet . 3 . 1 . 0 . b33"" ) ;', 'assertEquals ( ""glassfish javax . servlet . 3 . 1 . 0 . b33"" , value . getSingleValue ( ) ) ;', 'public void testSpaceInValue ( ) throws Exception {']","['. setMatcherName ( matcher ) ) ;', 'this . installOriginalMetadata = installOriginalMetadata ;', 'private boolean installOriginalMetadata = false ;', 'public void setInstallOriginalMetadata ( boolean installOriginalMetadata ) {', 'return installOriginalMetadata ;', '}', 'public boolean isInstallOriginalMetadata ( ) {', '. setMatcherName ( matcher )', '. setInstallOriginalMetadata ( installOriginalMetadata ) ) ;', '& & !ownLocationKey . equals ( entry . getKey ( ) ) ) {']","['Integer c = ( Integer ) currentLockCounters . get ( file ) ;', 'return true ;', 'return true ;', '= new ConcurrentHashMap ( ) ;', '}', 'if ( m = = null ) {', 'return dc ;', '}', 'int holdLocks = c = = null ? 1 : c . intValue ( ) + 1 ;', 'private Map locks = new ConcurrentHashMap ( ) ;']","['public Set / * < BundleRequirement > * / getRequires ( ) {', 'public void addExecutionEnvironment ( String name ) {', 'public List / * < String > * / getClasspath ( ) {', 'public Set < BundleCapability > getCapabilities ( ) {', 'BundleCapability capability = ( BundleCapability ) itCapabilities . next ( ) ;', '}', 'Set / * < ExportPackage > * / set = new LinkedHashSet / * < ExportPackage > * / ( ) ;', 'public Set < BundleRequirement > getRequirements ( ) {', 'while ( itCapabilities . hasNext ( ) ) {', 'public void setExecutionEnvironments ( List < String > executionEnvironments ) {']","['public List / * < CapabilityProperty > * / getProperties ( ) {', 'public List < CapabilityProperty > getProperties ( ) {', 'private List / * < CapabilityProperty > * / properties = new ArrayList / * < CapabilityProperty > * / ( ) ;', 'buffer . append ( name ) ;', 'for ( CapabilityProperty p : properties ) {', 'public String toString ( ) {', '}', 'return buffer . toString ( ) ;', 'buffer . append ( p ) ;', 'buffer . append ( "" "" ) ;']","['private ExecutionEnvironmentProfileProvider profileProvider ;', '. getInstance ( ) ;', 'private ExecutionEnvironmentProfileProvider profileProvider = ExecutionEnvironmentProfileProvider']","['public void addPkgName ( String pkgName ) {', 'Set < String > pkgNames = new TreeSet < String > ( ) ;', 'pkgNames . add ( pkgName ) ;', '}', 'private Set < String > pkgNames = new TreeSet < String > ( ) ;', 'if ( pkgName ! = null ) {', 'profile . addPkgName ( pkg ) ;', 'if ( aliasList ! = null ) {', 'for ( String pkgName : extendedProfile . getPkgNames ( ) ) {', 'String aliasList = props . getProperty ( name + "" . aliases"" ) ;']","['getMd ( ) . addExcludeRule ( excludeRules [ i ] ) ;', '}', 'public void mergeExcludes ( ExcludeRule [ ] excludeRules ) {', 'for ( int i = 0 ; i < excludeRules . length ; i + + ) {', 'if ( extendTypes . contains ( ""excludes"" ) ) {', 'mergeExcludes ( parent . getAllExcludeRules ( ) ) ;']","['loggerStack . pop ( ) ;', 'if ( stack = = null ) {', 'if ( !loggerStack . isEmpty ( ) ) {', 'stack = new Stack ( ) ;', 'return ( MessageLogger ) loggerStack . peek ( ) ;', 'return stack ;', 'loggerStack . push ( logger ) ;', 'getLoggerStack ( ) . pop ( ) ;', 'private final Stack / * < MessageLogger > * / loggerStack = new Stack ( ) ;', 'getLoggerStack ( ) . push ( logger ) ;']","['public boolean hasResolver ( String resolverName ) {', 'public synchronized void addConflictManager ( String name , ConflictManager cm ) {', 'public void addAllVariables ( Map variables , boolean overwrite ) {', 'public synchronized void filterIgnore ( Collection names ) {', 'public void addConfigured ( Namespace ns ) {', 'public synchronized void addTrigger ( Trigger trigger ) {', 'public VersionMatcher getVersionMatcher ( ) {', 'public synchronized void configureRepositories ( boolean remote ) {', 'public void setDefaultConflictManager ( ConflictManager defaultConflictManager ) {', 'public synchronized boolean logModulesInUse ( ) {']","['assertEquals ( 0 , ( ( ExecutionEnvironmentProfile ) profiles . get ( ""OSGI MINIMUM - 1 . 2"" ) ) . getPkgNames ( ) . size ( ) ) ;', 'assertEquals ( 0 , profiles . get ( ""OSGI MINIMUM - 1 . 2"" ) . getPkgNames ( ) . size ( ) ) ;', 'assertEquals ( 40 , ( ( ExecutionEnvironmentProfile ) profiles . get ( ""J2SE - 1 . 3"" ) ) . getPkgNames ( ) . size ( ) ) ;', 'assertEquals ( 3 , profiles . get ( ""CDC - 1 . 1 Foundation - 1 . 1"" ) . getPkgNames ( ) . size ( ) ) ;', 'assertEquals ( 40 , ( ( ExecutionEnvironmentProfile ) profiles . get ( ""JavaSE - 1 . 3"" ) ) . getPkgNames ( ) . size ( ) ) ;', 'assertEquals ( 40 , profiles . get ( ""J2SE - 1 . 3"" ) . getPkgNames ( ) . size ( ) ) ;', 'assertEquals ( 0 , ( ( ExecutionEnvironmentProfile ) profiles . get ( ""OSGi / Minimum - 1 . 0"" ) ) . getPkgNames ( ) . size ( ) ) ;', 'assertEquals ( 0 , profiles . get ( ""OSGI MINIMUM - 1 . 1"" ) . getPkgNames ( ) . size ( ) ) ;', 'assertEquals ( 96 , ( ( ExecutionEnvironmentProfile ) profiles . get ( ""JavaSE - 1 . 4"" ) ) . getPkgNames ( ) . size ( ) ) ;', 'assertEquals ( 159 , profiles . get ( ""JavaSE - 1 . 7"" ) . getPkgNames ( ) . size ( ) ) ;']","['this . location = location ;', '}', 'public void setLocation ( String location ) {', 'origin = new ArtifactOrigin (', 'import org . apache . ivy . plugins . repository . LocalizableResource ;', 'artifact ,', 'resourceDownloader . download ( artifact , artifactRes , archiveFile ) ;', 'if ( useOrigin & & artifactRef . getResource ( ) . isLocal ( ) ) {', 'Resource artifactRes = artifactRef . getResource ( ) ;', 'artifact , artifactRef . getResource ( ) , archiveFile ) ;']","['& & branch . equals ( dd . getDependencyRevisionId ( ) . getBranch ( ) ) ) {', 'if ( version . equals ( dd . getDependencyRevisionId ( ) . getRevision ( ) )', 'return dd ;', '}', 'IvyNode dep = ( IvyNode ) iter . next ( ) ;', 'IvyNode dep = ( IvyNode ) iter . next ( ) ;', 'conflicts . add ( dep ) ;', 'ResolveData data = context . getResolveData ( ) ;', 'for ( Iterator iter = deps . iterator ( ) ; iter . hasNext ( ) ; ) {', 'try {']","['public void testIVY1454 ( ) throws Exception {', 'public void disabledIVY1454 ( ) throws Exception {']","['ModuleRevisionId . newInstance ( systemMrid , ivyRef . getRevision ( ) ) ,', 'if ( ivyRef . getRevision ( ) ! = null', 'if ( ivyRef . getRevision ( ) ! = null & & !ivyRef . getRevision ( ) . startsWith ( ""working @ "" ) ) {', '& & !mrid . getRevision ( ) . equals ( md . getModuleRevisionId ( ) . getRevision ( ) ) ) {', '. newInstance ( mrid , ivyRef . getRevision ( ) ) ;', '& & !ivyRef . getRevision ( ) . startsWith ( ""working @ "" )', 'ModuleRevisionId . newInstance ( systemMrid , systemMd . getRevision ( ) ) ,', '. newInstance ( mrid , mrid . getRevision ( ) ) ;', 'assertNotNull ( report ) ;', 'Ivy ivy = new Ivy ( ) ;']","['it = new ArtifactReportManifestIterable ( getArtifactReports ( ) ) . iterator ( ) ;', 'Iterable < ManifestAndLocation > it ;', 'it = new FSManifestIterable ( basedir ) . iterator ( ) ;', 'import org . apache . ivy . osgi . repo . ManifestAndLocation ;', 'Iterator / * < ManifestAndLocation > * / it ;', 'it = new ArtifactReportManifestIterable ( getArtifactReports ( ) ) ;', 'it = new FSManifestIterable ( baseDir ) . iterator ( ) ;', 'it = new FSManifestIterable ( basedir ) ;', 'it = new ResolverManifestIterable ( ( BasicResolver ) resolver ) . iterator ( ) ;', 'it = new ResolverManifestIterable ( ( BasicResolver ) resolver ) ;']","['repos . add ( resolver . getRepoDescriptor ( ) ) ;', 'import java . util . ArrayList ;', 'resolvers . add ( resolver ) ;', 'private List < AbstractOSGiResolver > resolvers = new ArrayList < AbstractOSGiResolver > ( ) ;', 'List < RepoDescriptor > repos = new ArrayList < RepoDescriptor > ( ) ;', 'for ( AbstractOSGiResolver resolver : resolvers ) {', '}', 'setRepoDescriptor ( new AggregatedRepoDescriptor ( repos ) ) ;', 'import java . util . List ;', 'public void add ( AbstractOSGiResolver resolver ) {']","['List < String > childLocations ;', 'import java . util . Collections ;', 'List < String > childLocations = Collections . emptyList ( ) ;']","['init ( ) ;', '} catch ( Exception e ) {', 'try {', '}', '+ e . getMessage ( ) + "" ( "" + e . getClass ( ) . getName ( ) + "" ) "" , e ) ;', 'throw new RuntimeException ( ""Error while loading the OSGi repo descriptor""', 'repoDescriptor = FAILING REPO DESCRIPTOR ;', 'init ( ) ;']","['int log = Message . MSG INFO ;', '} ) ;', '}', 'Message . verbose ( ""downloaded to "" + archiveFile . getAbsolutePath ( ) ) ;', 'Message . info ( ""downloading "" + rres . getResource ( ) . getName ( ) ) ;', 'ArtifactDownloadReport adr , File archiveFile ) {', 'if ( log < = Message . MSG INFO ) {', 'import org . apache . ivy . core . module . descriptor . Artifact ;', 'import org . apache . ivy . core . cache . RepositoryCacheManager ;', '} else {']","['Set revisions = configurationReport . getModuleRevisionIds ( ) ;', 'protected List < ArtifactDownloadReport > getArtifactReports ( ) throws BuildException , ParseException , IOException {', 'ModuleRevisionId revId = ( ModuleRevisionId ) it . next ( ) ;', 'List < ArtifactDownloadReport > ret = new ArrayList < ArtifactDownloadReport > ( ) ;', 'import java . util . Iterator ;', 'Collection < ArtifactDownloadReport > all = new LinkedHashSet < ArtifactDownloadReport > ( ) ;', 'List ret = new ArrayList ( ) ;', 'private Collection < ArtifactDownloadReport > getAllArtifactReports ( ) throws ParseException , IOException {', 'protected List getArtifactReports ( ) throws BuildException , ParseException , IOException {', 'for ( ArtifactDownloadReport artifactReport : artifacts ) {']","['if ( ext . endsWith ( ""pack"" ) ) {', '} else if ( ext . endsWith ( ""pack"" ) ) {', 'return ext . substring ( 0 , ext . length ( ) - 4 ) ;', 'ext = ext . substring ( 0 , ext . length ( ) - 1 ) ;', '}', '}', 'return ext . substring ( 0 , ext . length ( ) - 7 ) ;', 'ext = ext . substring ( 0 , ext . length ( ) - 4 ) ;', 'if ( ext . endsWith ( "" . "" ) ) {', 'ext = ext . substring ( 0 , ext . length ( ) - 7 ) ;']","['public static List getProblems ( ) {', 'public static List < String > getProblems ( ) {', 'public abstract List / * < String > * / getErrors ( ) ;', 'public abstract List < String > getErrors ( ) ;', 'public abstract List / * < String > * / getWarns ( ) ;', 'public abstract List < String > getProblems ( ) ;', 'public abstract List / * < String > * / getProblems ( ) ;', 'public abstract List < String > getWarns ( ) ;', 'Iterator itPb = Message . getProblems ( ) . iterator ( ) ;', 'ModuleDescriptor md = itModule . next ( ) . getModuleDescriptor ( ) ;']","['it = new ArtifactReportManifestIterable ( getArtifactReports ( ) ) ;', 'StringBuilder buffer = new StringBuilder ( getType ( ) ) ;', 'import java . util . Iterator ;', 'for ( String sourceType : sourceTypes ) {', 'buffer . append ( sourceType ) ;', 'setType ( buffer . toString ( ) ) ;', 'this . sourceTypes = Arrays . asList ( sourceType . split ( "" , "" ) ) ;', '}', 'public void setSourceType ( String sourceType ) {', 'it = new ArtifactReportManifestIterable ( getArtifactReports ( ) , sourceTypes ) ;']","['public List < ExtraInfoHolder > getExtraInfos ( ) {', 'extraInfos . add ( extraInfo ) ;', 'return extraInfos ;', 'public void addExtraInfo ( ExtraInfoHolder extraInfo ) {', '}', 'nmd . extraInfos = md . getExtraInfos ( ) ;', 'private List < ExtraInfoHolder > extraInfos = new ArrayList < ExtraInfoHolder > ( ) ;', 'public String getName ( ) {', '}', 'this . content = content ;']","['import java . util . LinkedList ;', 'private Stack < ExtraInfoHolder > extraInfoStack = new Stack < ExtraInfoHolder > ( ) ;', 'private Deque < ExtraInfoHolder > extraInfoStack = new LinkedList < ExtraInfoHolder > ( ) ;', 'import java . util . Stack ;', 'import java . util . Deque ;']","['import org . apache . ivy . plugins . circular . CircularDependencyException ;', 'import org . apache . ivy . ant . IvyTask ;', 'import org . apache . ivy . core . module . descriptor . ModuleDescriptor ;', 'import org . apache . ivy . core . module . descriptor . ModuleDescriptor ;', 'import java . io . InputStream ;', 'import org . apache . ivy . core . pack . StreamPacking ;', 'import java . io . FileInputStream ;', 'import org . apache . ivy . core . pack . ArchivePacking ;', 'import org . apache . ivy . plugins . parser . xml . XmlModuleDescriptorParser ;', 'import java . net . URL ;']","['@ Deprecated', '@ Deprecated', '@ Deprecated', '@ Deprecated', '@ Deprecated', '@ Deprecated']","['String val = ( String ) params . getVariable ( var ) ;', 'String val = params . getVariable ( var ) ;', 'String val = ( String ) variables . getVariable ( var ) ;', 'String val = variables . getVariable ( var ) ;', 'IvyListener [ ] listeners = ( IvyListener [ ] ) this . listeners . getListeners ( IvyListener . class ) ;', 'IvyListener [ ] listeners = this . listeners . getListeners ( IvyListener . class ) ;', 'return ( IvyNode [ ] ) downloaded . toArray ( new IvyNode [ downloaded . size ( ) ] ) ;', 'ArtifactDownloadReport adr = iterator . next ( ) ;', 'ArtifactDownloadReport adr = ( ArtifactDownloadReport ) iterator . next ( ) ;', 'return downloaded . toArray ( new IvyNode [ downloaded . size ( ) ] ) ;']","['if ( !newBranch . trim ( ) . equals ( """" ) )', '}', 'if ( !newBranch . trim ( ) . equals ( """" ) ) {', 'if ( !mergeLine . startsWith ( "" < info"" ) )', 'if ( !mergeLine . startsWith ( "" < info"" ) ) {', '}', 'if ( ivySettings ! = null )', '}', 'if ( ivySettings ! = null ) {', 'if ( test . publishError ! = null )']","['XmlModuleDescriptorParser parser = XmlModuleDescriptorParser . getInstance ( ) ;', 'private ModuleDescriptor getMdFromCache ( ModuleDescriptorParser mdParser ,', 'private ModuleDescriptor getMdFromCache ( XmlModuleDescriptorParser mdParser ,', 'return XmlModuleDescriptorParser . getInstance ( ) ;', 'ModuleDescriptorParser parser = getModuleDescriptorParser ( ) ;', '}', 'protected ModuleDescriptorParser getModuleDescriptorParser ( ) {', '. parseDescriptor ( pSettings , ivyFileURL , false ) ;', 'return XmlModuleDescriptorParser . getInstance ( ) ;', 'return XmlModuleDescriptorParser . getInstance ( )']","['Message . debug ( ""Unexpected error : "" + problem . getMessage ( ) , problem ) ;']","['protected String getUserAgent ( ) {', 'String userAgent = System . getProperty ( ""http . agent"" ) ;', '}', 'if ( userAgent = = null ) {', 'userAgent = ""Apache Ivy / "" + Ivy . getIvyVersion ( ) ;', 'return userAgent ;', 'import org . apache . ivy . Ivy ;', 'conn . setRequestProperty ( ""User - Agent"" , ""Apache Ivy / "" + Ivy . getIvyVersion ( ) ) ;', 'con . setRequestProperty ( ""User - Agent"" , getUserAgent ( ) ) ;', 'con . setRequestProperty ( ""User - Agent"" , ""Apache Ivy / "" + Ivy . getIvyVersion ( ) ) ;']","['""1 . 2"" , ""1 . 3"" , ""1 . 4"" , ""2 . 0"" , ""2 . 1"" , ""2 . 2"" , ""2 . 3"" } ) ;', '""1 . 2"" , ""1 . 3"" , ""1 . 4"" , ""2 . 0"" , ""2 . 1"" , ""2 . 2"" , ""2 . 3"" , ""2 . 4"" } ) ;']","['resolver . addIvyPattern ( ""file : "" + rootpath', 'resolver . addIvyPattern ( rootpath + "" / [ organisation ] / [ module ] / ivys / ivy - [ revision ] . xml"" ) ;', '+ "" / [ organisation ] / [ module ] / ivys / ivy - [ revision ] . xml"" ) ;', 'String rootpath = new File ( ""test / repositories / 1"" ) . toURI ( ) . toURL ( ) . toExternalForm ( ) ;', 'resolver . addArtifactPattern ( ""file : "" + rootpath', 'resolver . addArtifactPattern ( rootpath', 'String rootpath = new File ( ""test / repositories / 1"" ) . getAbsolutePath ( ) ;']","['import java . io . FileNotFoundException ;', 'import java . io . InputStream ;', 'private static final String [ ] NAMES = { ""bundle"" } ;', 'zip = FileUtil . unwrapPack200 ( zip ) ;', 'f = new File ( f . getParentFile ( ) , f . getName ( ) . substring ( 0 , f . getName ( ) . length ( ) - 8 ) ) ;', 'import java . io . IOException ;', 'public class OsgiBundlePacking extends ZipPacking {', 'package org . apache . ivy . core . pack ;', 'return NAMES ;', '}']","['ArrayList unevicted = new ArrayList ( ) ;', 'unevicted . add ( node ) ;', 'conflicts = unevicted ;', '}', 'IvyNode node = ( IvyNode ) iter . next ( ) ;', 'for ( Iterator iter = conflicts . iterator ( ) ; iter . hasNext ( ) ; ) {', 'if ( !node . isCompletelyEvicted ( ) )', 'if ( unevicted . size ( ) > 0 ) {', 'new File ( ""test / repositories / IVY - 1399 / MyCompany / target / ivy - 1 . xml"" ) ,', 'ResolveReport report = ivy . resolve (']","['for ( Iterator iter = exact matchers . iterator ( ) ; iter . hasNext ( ) ; ) {', 'MapMatcher matcher = ( MapMatcher ) iter . next ( ) ;', 'exact matchers = new ArrayList ( ) ;', '}', 'private Object key ( Map attrs ) {', 'private Map / * < String , List < MapMatcher > > * / lookup = new HashMap ( ) ;', 'public void add ( MapMatcher matcher ) {', 'import org . apache . ivy . plugins . matcher . ExactPatternMatcher ;', 'if ( exact matchers ! = null ) {', 'if ( default exact matchers ! = null ) {']","['OSGiManifestParser . getInstance ( ) , null , bundleInfo , profileProvider ) ;', 'OSGiManifestParser . getInstance ( ) , null , bundleInfo , m , profileProvider ) ;', 'throws ProfileNotFoundException {', 'import java . util . Map . Entry ;', 'URI baseUri , BundleInfo bundle , ExecutionEnvironmentProfileProvider profileProvider )', 'if ( manifest ! = null ) {', 'for ( Entry < Object , Object > entries : manifest . getMainAttributes ( ) . entrySet ( ) ) {', '}', 'public static DefaultModuleDescriptor toModuleDescriptor ( ModuleDescriptorParser parser ,', 'URI baseUri , BundleInfo bundle , ExecutionEnvironmentProfileProvider profileProvider ) {']","['ExtraInfoHolder extraInfoByTagName = getExtraInfoByTagName ( tagName ) ;', 'if ( extraInfoByTagName ! = null ) {', 'for ( ExtraInfoHolder extraInfoHolder : extraInfos ) {', 'public String getExtraInfoContentByTagName ( String tagName ) {', 'return null ;', 'if ( extraInfoHolder . getName ( ) . equals ( tagName ) ) {', '@ Deprecated', '}', 'public ExtraInfoHolder getExtraInfoByTagName ( String tagName ) {', 'return extraInfoHolder ;']","['System . out . println ( wrote ) ;', 'wrote = wrote . replaceFirst ( ""publication = \\ "" ( [ 0 - 9 ] ) * \\ """" , ""publication = \\ ""20140429153143 \\ """" ) ;']","['private Map / * < String , String > * / extraInfo = new HashMap ( ) ;', 'for ( ExtraInfoHolder nested : extraInfo . getNestedExtraInfoHolder ( ) ) {', 'return extraInfo ;', '}', 'nmd . extraInfo = md . getExtraInfo ( ) ;', 'return map ;', 'extraInfo . put ( infoKey , value ) ;', 'populateExtraInfoMap ( map , nested ) ;', 'public Map getExtraInfo ( ) {', 'map . put ( extraInfo . getName ( ) , extraInfo . getContent ( ) ) ;']","['} catch ( AgentProxyException e ) {', '} catch ( Exception e ) {', 'import com . jcraft . jsch . agentproxy . AgentProxyException ;']","['Matcher m = p . matcher ( path . substring ( root . length ( ) + 1 ) ) ;', 'Message . debug ( ""found "" + all . length + "" urls"" ) ;', '} catch ( IOException e ) {', 'List < String > ret = new ArrayList < String > ( all . length ) ;', 'return null ;', 'Matcher m = p . matcher ( path ) ;', 'List all = rep . list ( root ) ;', 'String [ ] all = listAll ( rep , root ) ;', 'for ( Iterator iter = all . iterator ( ) ; iter . hasNext ( ) ; ) {', 'for ( String path : all ) {']","['found = false ;', 'found = true ;']","['ModuleDescriptorParser parser = getModuleDescriptorParser ( ) ;', 'protected ModuleDescriptorParser getModuleDescriptorParser ( File moduleDescriptorFile ) {', 'protected ModuleDescriptorParser getModuleDescriptorParser ( ) {', 'ModuleDescriptorParser parser = getModuleDescriptorParser ( ivyFile ) ;', 'return getModuleDescriptorParser ( ) . parseDescriptor ( pSettings , ivyFileURL , false ) ;', 'protected ModuleDescriptorParser getModuleDescriptorParser ( File moduleDescriptorFile ) {', 'protected ModuleDescriptorParser getModuleDescriptorParser ( ) {', 'return getModuleDescriptorParser ( ivyFile ) . parseDescriptor ( pSettings , ivyFileURL , false ) ;']","['public static final String DEFAULT M2 ROOT = ""http : / / repo1 . maven . org / maven2 / "" ;', 'public static final String DEFAULT M2 ROOT = ""https : / / repo1 . maven . org / maven2 / "" ;', 'String jarUrl = ""http : / / repo1 . maven . org / maven2 / org / apache / felix / ""', 'String jarUrl = ""https : / / repo1 . maven . org / maven2 / org / apache / felix / ""', 'settings . setVariable ( ""ivy . ibiblio . default . artifact . root"" , ""http : / / repo1 . maven . org / maven2 / "" ) ;', 'settings . setVariable ( ""ivy . ibiblio . default . artifact . root"" , ""https : / / repo1 . maven . org / maven2 / "" ) ;', 'String [ ] mirrors = new String [ ] { ""http : / / repo1 . maven . org / maven / REPOSITORY - V1 . txt"" ,', 'String [ ] mirrors = new String [ ] { ""https : / / repo1 . maven . org / maven / REPOSITORY - V1 . txt"" ,', 'String [ ] mirrorsRoot = new String [ ] { ""http : / / repo1 . maven . org / maven"" ,', 'String [ ] mirrorsRoot = new String [ ] { ""https : / / repo1 . maven . org / maven"" ,']","['if ( ivyModuleDescriptor . getExtraInfoContentByTagName ( key ) = = null ) {', 'if ( ivyModuleDescriptor . getExtraInfoByTagName ( key ) = = null ) {']","['setVariable ( key , val , overwrite ) ;', 'public synchronized void addAllVariables ( Map < ? , ? > variables , boolean overwrite ) {', 'for ( Iterator iter = variables . keySet ( ) . iterator ( ) ; iter . hasNext ( ) ; ) {', 'if ( val = = null | | val instanceof String ) {', 'String key = ( String ) iter . next ( ) ;', '}', 'String val = ( String ) variables . get ( key ) ;', 'for ( Map . Entry < ? , ? > entry : variables . entrySet ( ) ) {', 'public synchronized void addAllVariables ( Map variables , boolean overwrite ) {', 'Object val = entry . getValue ( ) ;']","['String charset = urlHandler . getURLInfo ( url ) . getBodyCharset ( ) ;', 'return urlList ;', 'String charset = urlInfo . getBodyCharset ( ) ;', '}', 'if ( urlInfo = = URLHandler . UNAVAILABLE ) {', 'URLInfo urlInfo = urlHandler . getURLInfo ( url ) ;', 'import org . apache . ivy . util . url . URLHandler . URLInfo ;']","['BufferedReader r = new BufferedReader ( new InputStreamReader ( contentStream , charset ) ) ;', 'if ( charset = = null ) {', 'r = new BufferedReader ( new InputStreamReader ( contentStream , charset ) ) ;', 'r = new BufferedReader ( new InputStreamReader ( contentStream ) ) ;', '}', '} else {', 'BufferedReader r = null ;']","['+ ""directly on the repository or in the connection URI"" ) ;', 'return sshConfig ;', 'return SshCache . getInstance ( ) . getSession ( host , port , user , userPassword , getKeyFile ( ) ,', 'import com . jcraft . jsch . OpenSSHConfig ;', '}', 'Config config = configRepository . getConfig ( host ) ;', 'this . sshConfig = sshConfig ;', 'private String sshConfig = null ;', 'import com . jcraft . jsch . ConfigRepository . Config ;', '+ "" , or in the openssh config file specified by sshConfig"" ) ;']","['private static final String JCENTER = ""https : / / jcenter . bintray . com / "" ;', 'public void setRepo ( String repo ) {', '}', 'updateName ( String . format ( ""bintray / % s / % s"" , subject , repo ) ) ;', 'package org . apache . ivy . plugins . resolver ;', 'if ( isEmpty ( getName ( ) ) | | isNameUpdatable ) {', 'throw new IllegalArgumentException ( ""Default resolver name must not be null or empty"" ) ;', 'public void setSubject ( String subject ) {', 'setRoot ( JCENTER ) ;', '@ SuppressWarnings ( ""MethodWithMultipleReturnPoints"" )']","['for ( Iterator iter = report . getRetrievedFiles ( ) . iterator ( ) ; iter . hasNext ( ) ; ) {', 'private static final Collection < String > OVERWRITEMODE VALUES = Arrays . asList (', 'import java . util . Iterator ;', 'protected Collection < String > getAllowedLogOptions ( ) {', 'RetrieveOptions . OVERWRITEMODE NEWER , RetrieveOptions . OVERWRITEMODE DIFFERENT } ) ;', 'ne . setName ( getPath ( report . getRetrieveRoot ( ) , file ) ) ;', 'private static final Collection OVERWRITEMODE VALUES = Arrays . asList ( new String [ ] {', 'for ( File file : report . getRetrievedFiles ( ) ) {', 'RetrieveOptions . OVERWRITEMODE ALWAYS , RetrieveOptions . OVERWRITEMODE NEVER ,', 'RetrieveOptions . OVERWRITEMODE ALWAYS , RetrieveOptions . OVERWRITEMODE NEVER ,']","['private synchronized Map < ModuleDescriptor , File > getModuleDescriptors ( ) {', 'if ( type = = null ) {', 'if ( md2IvyFile = = null ) {', 'for ( WorkspaceArtifact wa : artifacts ) {', '@ Override', 'f = new File ( url . toURI ( ) ) ;', 'import java . text . ParseException ;', 'public ResolvedModuleRevision getDependency ( DependencyDescriptor dd , ResolveData data )', 'public void setPath ( String path ) {', 'import java . net . URISyntaxException ;']","['return null ;', '}', 'if ( namespace = = null ) {']","['return mridComparator . compare ( mrid1 , mrid2 ) ;', 'return res ;', 'ModuleDescriptor md = rmr . getDescriptor ( ) ;', '}', 'ResolvedModuleRevision rmr = mdrr . getResolvedModuleRevision ( ) ;', 'ModuleRevisionId implMrid2 = getImplMrid ( o2 ) ;', 'if ( implMrid1 ! = null & & implMrid2 ! = null ) {', 'import org . apache . ivy . core . module . descriptor . DependencyDescriptor ;', 'if ( implMrid1 . getModuleId ( ) . equals ( implMrid2 . getModuleId ( ) ) ) {', 'res = implMrid1 . getModuleId ( ) . compareTo ( implMrid2 . getModuleId ( ) ) ;']","['private Collection findPath ( ModuleId from ) {', 'Collection < String > req = new LinkedHashSet < String > ( ) ;', 'for ( Iterator it = mergedDependencyArtifacts . iterator ( ) ; it . hasNext ( ) ; ) {', 'Collection < Artifact > arts = findArtifactsMatching ( dad , allArtifacts ) ;', 'public Collection getAllCallersModuleIds ( ) {', 'public Artifact [ ] getSelectedArtifacts ( Filter < Artifact > artifactFilter ) {', 'return ( String [ ] ) confs . toArray ( new String [ confs . size ( ) ] ) ;', 'Set < Artifact > artifacts = new HashSet < Artifact > ( ) ;', 'public Collection getDependencies ( String rootModuleConf , String [ ] confs , String requestedConf ) {', 'Set < String > confs = new LinkedHashSet < String > ( ) ;']","['revisions = searcher . listModules ( depResolver ,', 'return regexp . getMatcher ( expression ) ;', 'ModuleRevisionId . newInstance ( organisation , module , branch , "" . * "" ) , patternMatcher ) ;', 'String revisionPattern = "" . * "" ;', 'revisions = searcher . listModules (', 'ModuleRevisionId mrid = ModuleRevisionId . newInstance ( organisation , module , branch ,', 'return regexp . getMatcher ( expression ) ;', 'revisionPattern ) ;', '}', 'revisions = searcher . listModules ( depResolver , mrid , patternMatcher ) ;']","['ret . add ( allArtifacts . get ( entry . getValue ( ) ) ) ;', 'ret . add ( entry . getValue ( ) ) ;']","['import junit . framework . TestCase ;', 'assertXMLEqual ( expected , wrote ) ;', 'assertEquals ( expected , wrote ) ;', 'public class XmlModuleDescriptorWriterTest extends XMLTestCase {', 'public class XmlModuleDescriptorWriterTest extends TestCase {', 'import org . custommonkey . xmlunit . XMLTestCase ;']","['private Collection dependencies = new ArrayList ( ) ;', 'dependency . getClassifier ( ) , dependency . getOptional ( ) ) ) ;', 'Mapping mapping = ( Mapping ) iter . next ( ) ;', 'private List < ExtraDependency > getDependencies ( ) {', 'private List getDependencies ( ) {', 'private List < Mapping > mappings = new ArrayList < Mapping > ( ) ;', 'import java . util . Iterator ;', 'for ( Dependency dependency : dependencies ) {', 'private Collection mappings = new ArrayList ( ) ;', 'result . add ( new ExtraDependency ( dependency . getGroup ( ) , dependency . getArtifact ( ) ,']","['for ( Artifact a : md . getArtifacts ( conf ) ) {', 'import java . util . Map . Entry ;', 'fixedmd . addExtraAttributeNamespace ( ns . getKey ( ) , ns . getValue ( ) ) ;', 'fixedmd . setDescription ( md . getDescription ( ) ) ;', '}', 'for ( Entry < String , String > ns : md . getExtraAttributesNamespaces ( ) . entrySet ( ) ) {', 'fixedmd . setHomePage ( md . getHomePage ( ) ) ;', 'for ( String conf : resolvedConfs ) {', 'fixedmd . addArtifact ( conf , a ) ;']","['String resolverName , PublishOptions options ) throws IOException {', 'throws IOException {', 'public Collection publish ( ModuleRevisionId mrid , Collection srcArtifactPattern ,', 'import org . apache . ivy . core . module . descriptor . Artifact ;', 'public Collection < Artifact > publish ( ModuleRevisionId mrid ,', 'Collection < String > srcArtifactPattern , String resolverName , PublishOptions options )', '. setExtraArtifacts (', 'new PublishOptions ( ) . setPubrevision ( getPubrevision ( ) ) . setPubbranch ( getPubbranch ( ) )', 'return ( String ) ( artifactspattern . isEmpty ( ) ? null : artifactspattern . get ( 0 ) ) ;', 'private Map < String , String > extra = new HashMap < String , String > ( ) ;']","['variables . setVariable ( ""ivy . pom . description"" , md . getDescription ( ) , true ) ;', '} else if ( md . getDescription ( ) ! = null & & md . getDescription ( ) . length ( ) > 0 ) {']","['for ( String depConf : depConfs ) {', 'force = false ;', 'List < String > confs = Arrays . asList ( deps [ i ] . getModuleConfigurations ( ) ) ;', '}', '}', 'fixedmd . addDependency ( dd ) ;', 'if ( confs . size ( ) = = 1 & & confs . get ( 0 ) . equals ( "" * "" ) ) {', 'if ( !evicted ) {', 'DependencyDescriptor [ ] deps = md . getDependencies ( ) ;', 'for ( String targetConf : dep . getConfigurations ( rootConf ) ) {']","['assertEquals ( Arrays . asList ( targetConfs ) ,', 'new HashSet < String > ( Arrays . asList ( dep . getDependencyConfigurations ( conf ) ) ) ) ;', 'Arrays . asList ( dep . getDependencyConfigurations ( conf ) ) ) ;', 'assertEquals ( new HashSet < String > ( Arrays . asList ( targetConfs ) ) ,', 'import java . util . HashSet ;']","['public void addResourceCollection ( ResourceCollection resources ) {', 'public void addConfigured ( ResourceCollection resources ) {', 'antWorkspaceResolver . addResourceCollection ( fileset ) ;', 'antWorkspaceResolver . addConfigured ( fileset ) ;']","['}', '} else if ( workspaceResolver ! = null & & ! ( resolver instanceof WorkspaceChainResolver ) ) {', 'if ( workspaceResolver ! = null & & ! ( resolver instanceof WorkspaceChainResolver ) ) {', 'resolversMap . put ( resolver . getName ( ) , resolver ) ;']","['adr . setSize ( 0 ) ;', 'if ( url = = null | | !url . getProtocol ( ) . equals ( ""file"" ) ) {', 'adr . setDownloadStatus ( DownloadStatus . NO ) ;', 'adr . setDownloadStatus ( DownloadStatus . FAILED ) ;', 'return dr ;', '}', 'adr . setDownloadStatus ( DownloadStatus . NO ) ;', 'adr . setSize ( 0 ) ;']","['Method m = Authenticator . class . getDeclaredMethod ( ""getRequestorType"" , null ) ;', 'return RequestorType . PROXY . equals ( getRequestorType ( ) ) ;', 'StackTraceElement [ ] stackTrace = ( new Exception ( ) ) . getStackTrace ( ) ;', 'return true ;', 'try {', '} catch ( Throwable t ) {', 'for ( int i = 0 ; i < stackTrace . length ; i + + ) {', 'if ( ""getServerAuthentication"" . equals ( stackTrace [ i ] . getMethodName ( ) ) ) {', '} catch ( NoSuchMethodException e ) {', '}']","['public String getVariable ( String value ) {', '}', 'return delegate . getVariable ( value ) ;', 'public String getVariable ( String value ) {', 'return delegatedSettings . getVariable ( value ) ;', '}', 'String getVariable ( String string ) ;', 'ArtifactOrigin sourceArtifact = resolver . locate ( mdBuilder . getSourceArtifact ( ) ) ;', 'mdBuilder . addSrcArtifact ( ) ;', 'Message . debug ( ""no javadoc artifact found for "" + mrid ) ;']","['mdBuilder . setLicenses ( domReader . getLicenses ( ) ) ;', 'final License [ ] licenses = domReader . getLicenses ( ) ;', 'if ( licenses ! = null & & licenses . length > 0 ) {', 'if ( parentDescr ! = null ) {', '}', 'import org . apache . ivy . core . module . descriptor . License ;', 'mdBuilder . setLicenses ( parentDescr . getLicenses ( ) ) ;', '} else {', 'mdBuilder . setLicenses ( licenses ) ;', 'DefaultModuleDescriptor moduleDesc = DefaultModuleDescriptor . newDefaultInstance ( dd']","['String resolvedRevision = getResolvedRevision ( mrid , options ) ;', '""ivy cached data file for "" + mRevId ) ;', 'PropertiesFile cachedResolvedRevision = getCachedDataFile ( mrid ) ;', 'saveResolvedRevision ( null , mrid , revision ) ;', 'private String getResolvedRevision ( ModuleRevisionId mrid , CacheMetadataOptions options ) {', 'IvyPatternHelper . substitute ( getDataFilePattern ( ) , mRevId ) + "" . "" + resolverName ) ,', 'cachedResolvedRevision = getCachedDataFile ( resolverName , mrid ) ;', 'if ( resolverName = = null ) {', 'if ( resolverName ! = null ) {', 'public void saveResolvedRevision ( String resolverName , ModuleRevisionId mrid , String revision ) {']","['statusIntegrationMap = new HashMap ( ) ;', 'public List < Status > getStatuses ( ) {', 'private List status = new ArrayList ( ) ;', 'statusPriorityMap = new HashMap < String , Integer > ( ) ;', 'statusPriorityMap = new HashMap ( ) ;', 'private Map < String , Boolean > statusIntegrationMap ;', 'private Map statusIntegrationMap ;', 'statusIntegrationMap = new HashMap < String , Boolean > ( ) ;', 'for ( ListIterator iter = status . listIterator ( ) ; iter . hasNext ( ) ; ) {', 'for ( Status status : this . status ) {']","['public boolean isUseCacheOnly ( ) {', 'this . useCacheOnly = useCacheOnly ;', 'return useCacheOnly ;', '}', 'return this ;', 'public CacheMetadataOptions setUseCacheOnly ( boolean useCacheOnly ) {', 'private boolean useCacheOnly = false ;', 'if ( isChanging ( dd , requestedRevisionId , options ) ) {', 'if ( !options . isUseCacheOnly ( ) & & isChanging ( dd , requestedRevisionId , options ) ) {', '. setUseCacheOnly ( data . getOptions ( ) . isUseCacheOnly ( ) )']","['PGPPrivateKey pgpPrivKey = pgpSec . extractPrivateKey ( password . toCharArray ( ) ,', 'import org . bouncycastle . openpgp . operator . bc . BcPBESecretKeyDecryptorBuilder ;', 'PGPSecretKeyRing kRing = ( PGPSecretKeyRing ) it . next ( ) ;', 'PBESecretKeyDecryptor decryptor = new BcPBESecretKeyDecryptorBuilder (', 'PGPSecretKey k = ( PGPSecretKey ) it2 . next ( ) ;', '& & it2 . hasNext ( ) ; ) {', 'PGPSignatureGenerator sGen = new PGPSignatureGenerator ( pgpSec . getPublicKey ( )', 'PGPSecretKeyRing kRing = it . next ( ) ;', 'import java . security . NoSuchAlgorithmException ;', 'PGPSecretKeyRingCollection pgpSec = new PGPSecretKeyRingCollection ( in ,']","['if ( handler . isReachable ( new URL ( mirrors [ i ] ) , 300 ) ) {', 'String [ ] mirrors = new String [ ] { ""http : / / mirrors . ibiblio . org / maven"" } ;', '""http : / / www . ibiblio . org / maven"" } ;', 'if ( handler . isReachable ( new URL ( mirrors [ i ] ) , 500 ) ) {', 'String [ ] mirrors = new String [ ] { ""https : / / repo1 . maven . org / maven / REPOSITORY - V1 . txt"" ,', 'String [ ] mirrorsRoot = new String [ ] { ""http : / / mirrors . ibiblio . org / maven"" } ;', 'String [ ] mirrorsRoot = new String [ ] { ""https : / / repo1 . maven . org / maven"" ,']","['@ SuppressWarnings ( ""serial"" )', 'this ( mrids . toArray ( new ModuleRevisionId [ mrids . size ( ) ] ) ) ;', '}', 'import java . util . Collection ;', 'private static final long serialVersionUID = 670272039106237360L ;', 'public CircularDependencyException ( final Collection < ModuleRevisionId > mrids ) {', 'ResolveEngine engine = getContext ( ) . getIvy ( ) . getResolveEngine ( ) ;', '. get ( PARENT MAP KEY ) ;', 'import static org . apache . ivy . core . IvyContext . getContext ;', 'ResolveEngine engine = IvyContext . getContext ( ) . getIvy ( ) . getResolveEngine ( ) ;']","['import java . util . ArrayList ;', 'import java . util . ArrayList ;', 'import java . util . Iterator ;', 'return checkIfChanged ;', 'import java . io . IOException ;', 'import java . util . Iterator ;', 'import java . text . ParseException ;', 'import java . io . IOException ;', 'import java . util . List ;', 'import java . text . ParseException ;']","['import java . util . ArrayList ;', 'import java . util . ArrayList ;', 'import java . util . Iterator ;', 'import java . util . Iterator ;', 'import java . io . IOException ;', 'import java . io . IOException ;', 'import java . text . ParseException ;', 'import java . text . ParseException ;', 'import java . util . List ;', 'import java . util . List ;']","['Visibility . PRIVATE ,', 'import java . util . Map . Entry ;', 'import org . apache . ivy . core . module . descriptor . DefaultArtifact ;', 'import org . apache . ivy . core . module . descriptor . * ;', 'import org . apache . ivy . core . module . descriptor . Artifact ;', 'import java . util . * ;', 'import java . util . Arrays ;', 'Visibility . PUBLIC ,', 'import org . apache . ivy . core . module . descriptor . DependencyDescriptor ;', 'import java . util . Date ;']","['import java . util . Map . Entry ;', 'import org . apache . ivy . core . module . descriptor . DefaultArtifact ;', 'import org . apache . ivy . core . module . descriptor . * ;', 'import org . apache . ivy . core . module . descriptor . Artifact ;', 'import java . util . * ;', 'import java . util . Arrays ;', 'import org . apache . ivy . core . module . descriptor . DependencyDescriptor ;', 'import java . util . Date ;', 'import org . apache . ivy . core . module . descriptor . ExtraInfoHolder ;', 'import java . util . Map ;']","['super ( moduleDescriptor , revisionId , true , false , true ) ;', 'continue ;', 'dep . getArtifactId ( ) ) ;', 'if ( "" * "" . equals ( excludedModule . getOrganisation ( ) ) & & "" * "" . equals ( excludedModule . getName ( ) ) ) {', 'excluded = getDependencyMgtExclusions ( ivyModuleDescriptor , dep . getGroupId ( ) ,', 'dep . getArtifactId ( ) ) ;', 'List < ModuleId > excluded = dep . getExcludedModules ( ) ;', 'return true ;', '}', 'if ( "" * "" . equals ( exclusion . getOrganisation ( ) ) & & "" * "" . equals ( exclusion . getName ( ) ) ) {']","['FileUtil . forceDelete ( getBasedir ( ) ) ;', 'basedir = settings . getDefaultResolutionCacheBasedir ( ) ;', '}', 'FileUtil . forceDelete ( getResolutionCacheRoot ( ) ) ;', 'throw new IllegalStateException ( ""The \'basedir\' or \'IvySettings\' has not been set on the ResolutionCacheManager"" ) ;', 'if ( basedir = = null ) {', 'if ( settings = = null ) {']","['public void testLatestIntegrationIsCachedPerResolver ( ) throws Exception {', 'public void disableTestLatestIntegrationIsCachedPerResolver ( ) throws Exception {', 'String [ ] mirrors = new String [ ] { ""http : / / mirrors . ibiblio . org / maven"" } ;', 'String [ ] mirrorsRoot = new String [ ] { ""http : / / maven . ibiblio . org / maven"" } ;', 'String [ ] mirrorsRoot = new String [ ] { ""http : / / mirrors . ibiblio . org / maven"" } ;', 'String [ ] mirrors = new String [ ] { ""http : / / maven . ibiblio . org / maven"" } ;']","['import java . util . Map . Entry ;', 'private final Map < ModuleId , PomDependencyMgt > dependencyManagementMap = new LinkedHashMap < ModuleId , PomDependencyMgt > ( ) ;', 'for ( Entry < ModuleId , PomDependencyMgt > e : ( ( PomModuleDescriptor ) md )', 'for ( Map . Entry < ModuleId , PomDependencyMgt > e : ( ( PomModuleDescriptor ) md )', 'private final Map < ModuleId , PomDependencyMgt > dependencyManagementMap = new HashMap < ModuleId , PomDependencyMgt > ( ) ;', 'if ( key . startsWith ( DEPENDENCY MANAGEMENT ) ) {', 'if ( ( key ) . startsWith ( DEPENDENCY MANAGEMENT ) ) {', 'for ( Map . Entry < String , String > extraInfoEntry : extraInfo . entrySet ( ) ) {', 'for ( Entry < String , String > entry : extraAttributes . entrySet ( ) ) {', 'for ( Map . Entry < String , String > entry : extraAttributes . entrySet ( ) ) {']","['for ( Entry < Object , Object > entry : cdf . entrySet ( ) ) {', 'return IvyPatternHelper . substitute ( getArtifactPattern ( ) , artifact , origin ) ;', 'return true ;', 'return checkmodified . booleanValue ( ) ;', 'return IvyPatternHelper . substitute ( getArtifactPattern ( ) , artifact , origin ) ;', '}', 'String [ ] confs = md . getConfigurationsNames ( ) ;', 'Message . debug ( ""found module in cache but with a different resolver : ""', 'return checkmodified . booleanValue ( ) ;', 'cachedPublicationDate = rmr . getDescriptor ( )']","['packagingManager . unpackArtifact ( artifact , adr . getLocalFile ( ) , archiveFile ) ;', 'final Artifact unpackedArtifact = packagingManager . unpackArtifact ( artifact , adr . getLocalFile ( ) , archiveFile ) ;', 'adr . setUnpackedArtifact ( unpackedArtifact ) ;', 'adr . setUnpackedArtifact ( unpacked ) ;', 'public void unpackArtifact ( Artifact artifact , File localFile , File archiveFile )', 'return null ;', 'return ;', 'ext = packing . getUnpackedExtension ( ext ) ;', 'artifact . getType ( ) + "" unpacked"" , ext ) ;', 'public Artifact unpackArtifact ( Artifact artifact , File localFile , File archiveFile )']","['return BundleInfoAdapter . toModuleDescriptor ( this , null , bundleInfo , m , profileProvider ) ;', 'BundleInfo bundleInfo = ManifestParser . parseManifest ( manifest ) ;', 'BundleInfo bundleInfo = ManifestParser . parseManifest ( m ) ;', '} catch ( Exception e ) {', 'bundleInfo . addArtifact ( new BundleArtifact ( false , new URI ( res . getName ( ) ) , null ) ) ;', 'try {', 'Manifest m = new Manifest ( res . openStream ( ) ) ;', 'manifest = new Manifest ( resourceStream ) ;', 'bundleInfo . addArtifact ( new BundleArtifact ( false , descriptorURL . toURI ( ) , null ) ) ;', '}']","['} catch ( NoSuchAlgorithmException e ) {', 'if ( algorithm = = null ) {', 'algorithms . put ( ""SHA - 384"" , ""SHA - 384"" ) ;', 'if ( isAlgorithmSupportedInJRE ( ""SHA - 512"" ) ) {', 'private static boolean isAlgorithmSupportedInJRE ( final String algorithm ) {', 'try {', 'return true ;', '}', 'algorithms . put ( ""SHA - 512"" , ""SHA - 512"" ) ;', 'if ( isAlgorithmSupportedInJRE ( ""SHA - 384"" ) ) {']","['if ( duration = = null ) {', 'final ConfiguredTTL configuredTTL = new ConfiguredTTL ( duration , attributes . get ( ""matcher"" ) , attributes ) ;', 'String duration = attributes . remove ( ""duration"" ) ;', 'private ConfiguredTTL ( final long duration , final String matcher , final Map < String , String > attributes ) {', 'matcher = = null ? ExactPatternMatcher . INSTANCE : settings . getMatcher ( matcher ) ,', 'for ( final String removable : attributesNotContributingToMatching ) {', 'addTTL ( attributes ,', 'private static final Set < String > attributesNotContributingToMatching = new HashSet < String > ( ) ;', 'String matcher = attributes . remove ( ""matcher"" ) ;', '}']","['Message . setDefaultLogger ( mockMessageImpl ) ;', 'protected void tearDown ( ) throws Exception {', 'loggerEngine . popLogger ( ) ;', 'resetMockLogger ( messageLoggerEngine ) ;', 'if ( mockLogger = = null ) {', 'import org . apache . ivy . util . MessageLoggerEngine ;', 'return null ;', 'messageLoggerEngine = setupMockLogger ( mockMessageImpl ) ;', 'final MessageLoggerEngine loggerEngine = IvyContext . getContext ( ) . getIvy ( ) . getLoggerEngine ( ) ;', 'import org . apache . ivy . core . IvyContext ;']","['con . setConnectTimeout ( timeout ) ;', 'assertTrue ( handler . isReachable ( new File ( ""build . xml"" ) . toURI ( ) . toURL ( ) ) ) ;', 'assertFalse ( handler . isReachable ( new URL ( ""ftp : / / ftp . mozilla . org / unknown . file"" ) , connectionTimeoutInMillis ) ) ;', 'assertFalse ( handler . isReachable ( new File ( ""unknownfile . xml"" ) . toURI ( ) . toURL ( ) ) ) ;', 'assertTrue ( handler . isReachable ( new File ( ""build . xml"" ) . toURI ( ) . toURL ( ) , connectionTimeoutInMillis ) ) ;', 'assertTrue ( handler . isReachable ( new URL ( ""http : / / www . google . fr / "" ) ) ) ;', 'final int connectionTimeoutInMillis = 15000 ;', 'assertFalse ( handler . isReachable ( new URL ( ""http : / / www . google . fr / unknownpage . html"" ) ) ) ;', 'assertFalse ( handler . isReachable ( new URL ( ""http : / / www . google . fr / unknownpage . html"" ) , connectionTimeoutInMillis ) ) ;', 'assertFalse ( handler . isReachable ( new URL ( ""ftp : / / ftp . mozilla . org / unknown . file"" ) ) ) ;']","['ivy . setSettingsVariables ( settingsURL ) ;', 'try {', '} catch ( MalformedURLException e ) {', 'Message . verbose ( ""Skipping inclusion of optional file "" + propFilePath + "" due to IOException - "" + ioe . getMessage ( ) ) ;', 'settingsURL = new URL ( propFilePath ) ;', '}', 'if ( ""file"" . equals ( settingsURL . getProtocol ( ) ) ) {', 'if ( optionalInclude & & !settingsFile . exists ( ) ) {', 'try {', 'File settingsFile = new File ( new URI ( settingsURL . toExternalForm ( ) ) ) ;']","['IvyNode dependency = ( IvyNode ) iterator . next ( ) ;', 'log ( sb . toString ( ) ) ;', 'private Map / * < ModuleRevisionId , List < IvyNode > > * / dependencies = new HashMap / *', 'if ( report = = null ) {', 'List dependencyList = ( List ) dependencies . get ( mrid ) ;', '}', 'for ( Iterator iterator = dependencyList . iterator ( ) ; iterator . hasNext ( ) ; ) {', 'final boolean evicted = dependency . isEvicted ( getConf ( ) ) ;', 'dependencies . put ( moduleRevisionId , new ArrayList / * < IvyNode > * / ( ) ) ;', 'sb . append ( dependencyMrid . toString ( ) ) ;']","['try {', 'public ExpectedException expExc = ExpectedException . none ( ) ;', 'run ( new String [ ] { "" - bad"" } ) ;', 'import org . junit . Rule ;', 'fail ( ""running Ivy Main with - bad option should raise an exception"" ) ;', 'expExc . expectMessage ( ""Unrecognized option : - bad"" ) ;', 'assertEquals ( ""no argument for : ivy"" , ex . getMessage ( ) ) ;', 'run ( new String [ ] { "" - bad"" } ) ;', '}', '@ Rule']","['try {', '@ Test', 'Exception err = null ;', 'public abstract class AbstractTestFilter {', 'String [ ] result = getIFilter ( ) . filter (', 'import static org . junit . Assert . assertNull ;', 'getIFilter ( ) . filter ( null , ""test"" ) ;', 'getIFilter ( ) . filter ( null , ""test"" ) ;', '} catch ( NullPointerException npe ) {', '}']","['mrid . getRevision ( ) , null , null , scope , optional , dds [ i ] . isTransitive ( ) ,', 'final String classifier = dds [ i ] . getExtraAttribute ( ""classifier"" ) ;', 'mrid . getRevision ( ) , null , classifier , scope , optional , dds [ i ] . isTransitive ( ) ,', 'assertTrue ( ""Unexpected dependency "" + pomDependency , expectedPomArtifactIds . contains ( pomDependency . artifactId ) ) ;', 'return node ;', 'public String toString ( ) {', 'return ""PomDependency { "" +', 'if ( pomDependency . artifactId . equals ( ""foo"" ) ) {', 'String groupId = null ;', 'makepom . setIvyFile ( ivyFile ) ;']","['private static final int BUFFER SIZE = 64 * 1024 ;', 'private static final int BUFFER SIZE = 64 * 1024 ;']","['pkg = package1 ;', 'public void setPackage ( String packageName ) {', 'public void setPackage ( String package1 ) {', 'pkg = packageName ;', 'return Collections . EMPTY SET ;', 'return Collections . emptySet ( ) ;', 'isSetVar , unlessSetVar ) ;', 'boolean override = ( overrideStr = = null ) | | Boolean . valueOf ( overrideStr ) ;', 'boolean override = ( overrideStr = = null ) ? true : Boolean . valueOf ( overrideStr ) ;', 'unlessSetVar ) ;']","['}', '@ Deprecated', 'return unknown ( artifact ) ;', 'public static final ArtifactOrigin unkwnown ( Artifact artifact ) {', 'public static final FilenameFilter DEFAULT BUNLDE FILTER = DEFAULT BUNDLE FILTER ;', '@ Deprecated', 'childHandled ( child ) ;', '@ Deprecated', '}', 'public void childHanlded ( DH child ) throws SAXParseException {']","['String var = getVariable ( ""ivy . log . memory"" ) ;', 'return var = = null ? valueIfUnset : Boolean . valueOf ( var ) ;', 'String var = getVariable ( ""ivy . log . module . when . found"" ) ;', 'dumpMemoryUsage = getVariableAsBoolean ( ""ivy . log . memory"" , false ) ;', 'String var = getVariable ( ""ivy . log . resolved . revision"" ) ;', 'return getVariableAsBoolean ( ""ivy . log . modules . in . use"" , true ) ;', 'debugConflictResolution = var ! = null', 'public synchronized boolean getVariableAsBoolean ( String name , boolean valueIfUnset ) {', '& & Boolean . valueOf ( var ) ;', 'return getVariableAsBoolean ( ""ivy . log . module . when . found"" , true ) ;']","['FileSet fileset ;', 'ne . setName ( getPath ( baseDir , artifactDownloadReport . getLocalFile ( ) ) ) ;', 'return result ;', 'private File requireCommonBaseDir ( final List < ArtifactDownloadReport > artifactDownloadReports ) {', 'for ( Iterator iter = paths . iterator ( ) ; iter . hasNext ( ) ; ) {', 'final Iterator fileParents = getParents ( file2 . getAbsoluteFile ( ) ) . iterator ( ) ;', '}', 'return result ;', 'Iterator fileParents = getParents ( file . getAbsoluteFile ( ) ) . iterator ( ) ;', '}']","['@ Test ( expected = NullPointerException . class )', '@ Test']","['class DeleteOnExitHook {', 'final class DeleteOnExitHook {', 'public class DateUtil {', 'public final class DateUtil {', '@ SuppressWarnings ( ""serial"" )', '@ SuppressWarnings ( ""serial"" )', 't . tearDown ( ) ;', 'TestPerformance t = new TestPerformance ( ) ;', '}', 'public static void main ( String [ ] args ) throws Exception {']","['List result = new ArrayList ( Arrays . asList ( values ) ) ;', 'return result . toArray ( new String [ result . size ( ) ] ) ;', 'return ( String [ ] ) result . toArray ( new String [ result . size ( ) ] ) ;', 'List < String > result = new ArrayList < String > ( Arrays . asList ( values ) ) ;', 'return ( String [ ] ) result . toArray ( new String [ result . size ( ) ] ) ;', 'return result . toArray ( new String [ result . size ( ) ] ) ;', 'List result = new ArrayList ( ) ;', 'List < String > result = new ArrayList < String > ( ) ;', 'import static org . junit . Assert . assertNull ;', 'return ( ( File ) o ) . getName ( ) . indexOf ( name ) ! = - 1 ;']","['for ( int i = 0 ; i < values . length ; i + + ) {', 'for ( String string : values ) {', 'String string = values [ i ] ;', 'public final class Hello {', 'public final class HelloIvy {', 'private Hello ( ) {', 'private HelloIvy ( ) {', 'public final class Hello {', 'public final class HelloConsole {', 'private Hello ( ) {']","['for ( String s : m ) {', 'for ( String s : mrids . split ( "" , ? \\ \\ s + "" ) ) {', 'Collection < ModuleRevisionId > depMrids = parseMrids ( mrids ) ;', 'for ( String md : microIvy . split ( "" \\ \\ s * ; ; \\ \\ s * "" ) ) {', 'String [ ] m = mrids . split ( "" , ? \\ \\ s + "" ) ;', 'for ( ModuleRevisionId dep : parseMrids ( mrids ) ) {', 'String [ ] mds = microIvy . split ( "" \\ \\ s * ; ; \\ \\ s * "" ) ;', 'for ( String md : mds ) {', 'for ( ModuleRevisionId dep : depMrids ) {', 'for ( Object o : expectedPublications . values ( ) ) {']","['private HashMap < String , String > properties = new HashMap < String , String > ( ) ;', 'private final Map < String , String > properties = new HashMap < String , String > ( ) ;', 'public PomReader ( URL descriptorURL , Resource res ) throws IOException , SAXException {', 'import java . util . Properties ;', 'this . setProperty ( ""env . "" + envEntry . getKey ( ) , envEntry . getValue ( ) ) ;', '}', 'for ( final String sysProp : sysProps . stringPropertyNames ( ) ) {', 'this . setProperty ( sysProp , sysProps . getProperty ( sysProp ) ) ;', 'for ( final Map . Entry < String , String > envEntry : System . getenv ( ) . entrySet ( ) ) {', 'public PomReader ( final URL descriptorURL , final Resource res ) throws IOException , SAXException {']","['private File requireCommonBaseDir ( final List < ArtifactDownloadReport > artifactDownloadReports ) {', 'private LinkedList < File > getParents ( File file ) {', 'final Iterator bases = getParents ( file1 ) . iterator ( ) ;', 'LinkedList < File > r = new LinkedList < > ( ) ;', 'final Iterator fileParents = getParents ( file2 . getAbsoluteFile ( ) ) . iterator ( ) ;', 'final Iterator file2Parents = getParents ( file2 . getAbsoluteFile ( ) ) . iterator ( ) ;', 'LinkedList r = new LinkedList ( ) ;', 'File next = ( File ) file1Parents . next ( ) ;', 'private LinkedList / * < File > * / getParents ( File file ) {', 'if ( next . equals ( file2Parents . next ( ) ) ) {']","['import java . util . Properties ;', 'import java . util . Properties ;', 'import org . apache . commons . cli . PosixParser ;', 'import java . io . IOException ;', 'CommandLineParser parser = new PosixParser ( ) ;', 'import org . apache . commons . cli . DefaultParser ;', 'import java . io . IOException ;', 'CommandLineParser parser = new DefaultParser ( ) ;', 'Class clazz = Class . forName ( ""filter . hmimpl . HMFilter"" ) ;', 'Class < ? > clazz = Class . forName ( ""filter . ccimpl . CCFilter"" ) ;']","['. longOpt ( ""message"" )', '. longOpt ( ""message"" )', '. longOpt ( ""dir"" )', '. longOpt ( ""dir"" )', '. longOpt ( ""name"" )', '. longOpt ( ""name"" )', '. longOpt ( ""dir"" )', '. longOpt ( ""dir"" )', 'CacheResourceOptions options ,', 'CacheResourceOptions options ,']","['private final Collection < ModuleDescriptor > mds = new ArrayList < ModuleDescriptor > ( ) ;', 'private final Collection < ModuleDescriptor > mds = new ArrayList < > ( ) ;', 'Collection < ModuleDescriptor > r = new ArrayList < ModuleDescriptor > ( ) ;', 'Collection < ModuleRevisionId > c = new LinkedHashSet < > ( ) ;', 'Collection < ModuleRevisionId > c = new LinkedHashSet < ModuleRevisionId > ( ) ;', 'Collection < ModuleDescriptor > r = new ArrayList < > ( ) ;', 'final Set < String > expectedPomArtifactIds = new HashSet < String > ( ) ;', 'final Set < String > expectedPomArtifactIds = new HashSet < > ( ) ;', 'expectedPublications = new HashMap < ArtifactRevisionId , PublishTestCase > ( ) ;', 'expectedPublications = new HashMap < > ( ) ;']","['return new PomDependency ( groupId , artifactId , version , scope , classifier , optional ! = null ? Boolean . parseBoolean ( optional ) : false ) ;', 'return String . format ( ""PomDependency { groupId = \' % s\' , artifactId = \' % s\' , version = \' % s\' , scope = \' % s\' , classifier = \' % s\' } "" ,', ""' } ' ;"", 'return new PomDependency ( groupId , artifactId , version , scope , classifier , optional ! = null & & Boolean . parseBoolean ( optional ) ) ;', 'return ""PomDependency { "" +', 'groupId , artifactId , version , scope , classifier ) ;', '"" , version = \'"" + version + \' \\ \'\' +', '""groupId = \'"" + groupId + \' \\ \'\' +', '"" , artifactId = \'"" + artifactId + \' \\ \'\' +', '"" , scope = \'"" + scope + \' \\ \'\' +']","['private void runBuild ( File buildFile , Vector targets , int messageLevel ) throws BuildException {', 'Vector < String > targets = new Vector < > ( ) ;', 'private void runAnt ( File buildFile , Vector targets , int messageLevel ) throws BuildException {', 'private void runBuild ( File buildFile , Vector < String > targets , int messageLevel ) throws BuildException {', 'Vector targets = new Vector ( ) ;', 'private void runAnt ( File buildFile , Vector < String > targets , int messageLevel ) throws BuildException {', 'List other = new ArrayList ( ) ;', 'import java . net . URI ;', 'List < URI > other = new ArrayList < > ( ) ;', 'List files = asList ( resources ) ;']","['ArrayList < String > list = new ArrayList < String > ( ) ;', 'ArrayList < String > list = new ArrayList < > ( ) ;']","['private List < String > warns = new ArrayList < String > ( ) ;', 'private List < String > warns = new ArrayList < > ( ) ;', 'private List < String > errors = new ArrayList < String > ( ) ;', 'private List < String > errors = new ArrayList < > ( ) ;', 'private List < String > problems = new ArrayList < String > ( ) ;', 'private List < String > problems = new ArrayList < > ( ) ;', 'private static Map algorithms = new HashMap ( ) ;', 'ch = ( byte ) ( bt & 0xF0 ) ;', 'if ( !Character . isWhitespace ( chars [ i ] ) ) {', 'ch = ( byte ) ( bt & 0x0F ) ;']","['for ( Iterator iter = atts . keySet ( ) . iterator ( ) ; iter . hasNext ( ) ; ) {', 'private Collection < String > builds = new ArrayList < > ( ) ;', 'import java . util . Iterator ;', 'for ( Map . Entry < String , String > entry : atts . entrySet ( ) ) {', 'private Collection builds = new ArrayList ( ) ;', 'p . setName ( prefix = = null ? entry . getKey ( ) : prefix + entry . getKey ( ) ) ;', 'p . setValue ( value ) ;', 'if ( entry . getValue ( ) ! = null ) {', 'String key = ( String ) iter . next ( ) ;', 'Map < String , String > atts = event . getAttributes ( ) ;']","['getRequestingPrompt ( ) , getRequestingScheme ( ) ) ;', 'getRequestingPrompt ( ) , getRequestingScheme ( ) , getRequestingURL ( ) , getRequestorType ( ) ) ;', 'try {', 'public static Authenticator getCurrentAuthenticator ( ) {', '} catch ( Throwable t ) {', 'return null ;', '}', 'import java . net . Authenticator ;', 'import java . lang . reflect . Field ;', 'Field f = Authenticator . class . getDeclaredField ( ""theAuthenticator"" ) ;']","['return new DissectedPath ( File . separator , pathToDissect . substring ( 1 ) ) ;', 'return new DissectedPath ( File . separator , pathToDissect ) ;']","['Set < BundleRequirement > set = new LinkedHashSet < BundleRequirement > ( ) ;', 'private Set < BundleRequirement > requirements = new LinkedHashSet < > ( ) ;', 'private List < String > executionEnvironments = new ArrayList < String > ( ) ;', 'Set < ExportPackage > set = new LinkedHashSet < > ( ) ;', 'private List < BundleArtifact > artifacts = new ArrayList < BundleArtifact > ( ) ;', 'Set < BundleCapability > set = new LinkedHashSet < > ( ) ;', 'Set < BundleCapability > set = new LinkedHashSet < BundleCapability > ( ) ;', 'private Set < BundleCapability > capabilities = new LinkedHashSet < > ( ) ;', 'StringBuffer builder = new StringBuffer ( ) ;', 'Set < BundleRequirement > set = new LinkedHashSet < > ( ) ;']","['private Collection / * < String > * / circularDependencies = new HashSet ( ) ;', 'private final Collection < String > circularDependencies = new HashSet < > ( ) ;', 'buff . append ( mrids [ i ] ) ;', 'for ( ModuleDescriptor descriptor : loopElements ) {', 'public static String formatMessageFromDescriptors ( List loopElements ) {', 'if ( buff . length ( ) > 0 ) {', 'import java . util . Iterator ;', 'Set < ModuleRevisionId > alreadyAdded = new HashSet < > ( ) ;', 'buff . append ( mrids [ 0 ] ) ;', 'StringBuilder buff = new StringBuilder ( ) ;']","['mergeLine ) ;', 'checkPublishedFile ( published , ""ivy - extends - extra - attributes - merged . xml"" ) ;', '@ SuppressWarnings ( ""resource"" )', '}', 'if ( ! ( mergeLine . trim ( ) . equals ( """" ) & & expectedLine . trim ( ) . equals ( """" ) ) ) {', 'for ( String mergeLine = merged . readLine ( ) , expectedLine = expected . readLine ( ) ; mergeLine ! = null', 'if ( mergeLine . contains ( "" < info"" ) ) {', '. readLine ( ) ) {', 'BufferedReader merged = new BufferedReader ( new FileReader ( published ) ) ;', '. getResourceAsStream ( expectedFilename ) ) ) ) {']","['file = new File ( new URI ( url . toExternalForm ( ) ) ) ;', 'if ( !url . getProtocol ( ) . equals ( ""file"" ) ) {', 'try {', 'throw new IOException ( ""Resolved location "" + url + "" , of parent module descriptor , is not a file"" ) ;', 'file = new File ( url . getPath ( ) ) ;', 'final URL url = settings . getRelativeUrlResolver ( ) . getURL ( descriptorURL , location ) ;', '} catch ( URISyntaxException e ) {', 'file = new File ( url . getPath ( ) ) ;', 'URL url = settings . getRelativeUrlResolver ( ) . getURL ( descriptorURL , location ) ;', 'import java . util . GregorianCalendar ;']","['if ( !url . getProtocol ( ) . equals ( ""file"" ) ) {', 'file = new File ( new URI ( url . toExternalForm ( ) ) ) ;', 'throw new IOException ( ""Resolved location "" + url + "" , of parent module descriptor , is not a file"" ) ;', 'try {', 'final URL url = settings . getRelativeUrlResolver ( ) . getURL ( descriptorURL , location ) ;', 'file = new File ( url . getPath ( ) ) ;', 'file = new File ( url . getPath ( ) ) ;', '} catch ( URISyntaxException e ) {', 'URL url = settings . getRelativeUrlResolver ( ) . getURL ( descriptorURL , location ) ;', 'public void testExtendsEncodedLocation ( ) throws Exception {']","['return onMissingDescriptor = = OnMissingDescriptor . SKIP ;', 'return OnMissingDescriptor . SKIP . equals ( onMissingDescriptor ) ;', 'if ( value ! = null & & value ! = r ) {', 'if ( value ! = null & & !value . equals ( r ) ) {', 'if ( key ! = DEFAULT ) {', 'if ( !DEFAULT . equals ( key ) ) {', 'if ( downloadDetails = = MISSING ARTIFACT ) {', 'if ( MISSING ARTIFACT . equals ( downloadDetails ) ) {', 'if ( type = = BundleInfo . PACKAGE TYPE ) {', 'if ( BundleInfo . PACKAGE TYPE . equals ( type ) ) {']","['return this . delegate . getTimeoutConstraint ( name ) ;', 'public TimeoutConstraint getTimeoutConstraint ( final String name ) {', '}', '@ Override', 'import org . apache . ivy . core . settings . TimeoutConstraint ;', 'public TimeoutConstraint getTimeoutConstraint ( final String name ) {', '}', 'return delegatedSettings . getTimeoutConstraint ( name ) ;', '@ Override', 'import org . apache . ivy . core . settings . TimeoutConstraint ;']","['assertNotNull ( ""Ivy xml file is missing"" , ivyXML ) ;', 'try {', '@ Test', 'assertNotNull ( ""Parsed module descriptor is null"" , md ) ;', 'import java . net . URL ;', '}', 'import java . nio . file . StandardCopyOption ;', '} finally {', 'final Path parentIvyXMLPath = Paths . get ( targetDir . toString ( ) , ""parent - ivy . xml"" ) ;', 'assertNotNull ( ""One of the configurations was null in module descriptor"" , conf ) ;']","['ConflictManager conflictManager = ancestor . getNode ( ) . getConflictManager ( node . getModuleId ( ) ) ;', 'if ( conflictManager ! = null ) {', 'break ;', 'throw new IllegalStateException (', 'if ( descriptor = = null ) {', 'if ( conflictManager = = null ) {', 'ConflictManager conflictManager = null ;', '}', 'conflictManager = settings . getConflictManager ( node . getModuleId ( ) ) ;', 'conflictManager = descriptor . getConflictManager ( node . getModuleId ( ) ) ;']","['package org . apache . ivy . asciidoc ;', 'options . put ( ""target"" , ""https : / / issues . apache . org / jira / browse / "" + target ) ;', 'return createInline ( parent , ""anchor"" , target , attributes , options ) . convert ( ) ;', 'public class JiraMacro extends InlineMacroProcessor {', '}', 'import java . util . Map ;', 'import org . asciidoctor . ast . AbstractBlock ;', 'import java . util . HashMap ;', 'Map < String , Object > options = new HashMap < String , Object > ( ) ;', 'options . put ( ""type"" , "" : link"" ) ;']","['@ SuppressWarnings ( ""deprecation"" )', '@ Deprecated', 'destFilePattern ,', '. setMakeSymlinks ( makeSymlinks ) ) . getNbrArtifactsCopied ( ) ;', '. setDestIvyPattern ( destIvyPattern ) . setArtifactFilter ( artifactFilter ) ) ;', '. setUseOrigin ( useOrigin ) ) . getNbrArtifactsCopied ( ) ;', 'new RetrieveOptions ( ) . setConfs ( confs ) . setDestIvyPattern ( destIvyPattern ) ) ;', '. setDestIvyPattern ( destIvyPattern )', 'destFilePattern , new RetrieveOptions ( ) . setConfs ( confs ) ) ;', 'new RetrieveOptions ( ) . setConfs ( confs ) . setDestArtifactPattern ( destFilePattern )']","['String pathSeparator = System . getProperty ( ""path . separator"" ) ;', 'StringTokenizer tokenizer = new StringTokenizer ( cp , File . pathSeparator ) ;', 'StringTokenizer tokenizer = new StringTokenizer ( cp ,', 'buf . setLength ( buf . length ( ) - File . pathSeparator . length ( ) ) ;', 'buf . append ( pathSeparator ) ;', 'buf . append ( File . pathSeparator ) ;', 'System . getProperty ( ""path . separator"" ) ) ;', 'writer . println ( buf ) ;', 'writer . println ( buf . substring ( 0 , buf . length ( ) - pathSeparator . length ( ) ) ) ;', 'Map < String , String > atts = event . getAttributes ( ) ;']","['throw new IOException ( ""Response to request \'"" + httpMethod + "" "" + sourceURL + ""\' did not indicate a success ( see debug log for details ) "" ) ;', '+ "" - \'"" + response . getStatusLine ( ) . getReasonPhrase ( ) ) ;', 'throw new IOException ( ""Failed response to request \'"" + httpMethod + "" "" + sourceURL + ""\' "" + response . getStatusLine ( ) . getStatusCode ( )', 'final Path localFilesystemRepoRoot , final String realm ,', 'if ( validCredentials = = null ) {', '}', 'return expectedPass ! = null & & expectedPass . equals ( pass ) ;', 'final HttpServer server = HttpServer . create ( serverAddress , - 1 ) ;', 'return new AutoCloseable ( ) {', '@ Override']","['import sun . net . httpserver . AuthFilter ;', '} else if ( authResult instanceof com . sun . net . httpserver . Authenticator . Failure ) {', 'final byte [ ] content = new byte [ 1024 ] ;', 'final com . sun . net . httpserver . Authenticator . Success success = ( com . sun . net . httpserver . Authenticator . Success ) authResult ;', '}', 'import com . sun . net . httpserver . Filter ;', '@ Override', 'import com . sun . net . httpserver . HttpExchange ;', 'httpExchange . sendResponseHeaders ( var7 . getResponseCode ( ) , - 1L ) ;', 'public void doFilter ( final HttpExchange httpExchange , final Chain chain ) throws IOException {']","['saveResolvedRevision ( mrid , resolvedRevision ) ;', 'saveResolvedRevision ( expectedResolver , mrid , resolvedRevision ) ;', '@ Deprecated', '@ Deprecated']","['. description ( ""comma separated list of accepted artifact types"" )', '. description ( ""accepted artifact types"" )', 'import static org . junit . Assert . * ;', '@ Test', 'import java . io . File ;', '}', 'import java . util . Arrays ;', '"" - types"" , ""jar"" , ""source"" } ;', 'assertTrue ( ""jar type is missing from the parsed types argument"" , uniqueParsedTypes . contains ( ""jar"" ) ) ;', 'import java . io . File ;']","['public static boolean prepareCopy ( File src , File dest , boolean overwrite ) throws IOException {', 'dest . delete ( ) ;', 'if ( !dest . canWrite ( ) ) {', '} else if ( !dest . canWrite ( ) ) {', 'import org . apache . ivy . util . url . URLHandlerRegistry ;', 'import org . apache . ivy . util . url . URLHandlerRegistry ;', 'import org . apache . ivy . core . settings . TimeoutConstraint ;', 'if ( Files . isSymbolicLink ( dest . toPath ( ) ) & & unlinkSymlinkIfOverwrite ) {', 'public static boolean prepareCopy ( final File src , final File dest , final boolean overwrite ) throws IOException {', 'final boolean unlinkSymlinkIfOverwrite = true ;']","['getRetrieveOptions ( ) . setMakeSymlinks ( false ) . setDestArtifactPattern ( retrievePattern ) ) ;', 'getRetrieveOptions ( ) . setMakeSymlinks ( false ) . setDestArtifactPattern ( retrievePattern )', 'private ResolveOptions getResolveOptions ( String [ ] confs ) {', '""symlink"" , Files . isSymbolicLink ( secondRetrieveArtifactPath ) ) ;', 'getRetrieveOptions ( ) . setMakeSymlinks ( true ) . setDestArtifactPattern ( retrievePattern ) ) ;', '. setDestArtifactPattern ( retrievePattern ) ) ;', 'private ResolveOptions getResolveOptions ( final String [ ] confs ) {', 'getRetrieveOptions ( ) . setMakeSymlinks ( true ) . setOverwriteMode ( RetrieveOptions . OVERWRITEMODE ALWAYS )', '. setOverwriteMode ( RetrieveOptions . OVERWRITEMODE ALWAYS ) ) ;', 'assertFalse ( ""Artifact retrieved at "" + secondRetrieveArtifactPath + "" wasn\'t expected to be a "" +']","['RetrieveReport report = getIvyInstance ( ) . retrieve (', 'retrieveOptions . setMakeSymlinksInMass ( symlinkmass ) ;', '. setMapper ( mapper = = null ? null : new MapperAdapter ( mapper ) ) ) ;', 'final RetrieveReport report = getIvyInstance ( ) . retrieve ( getResolvedMrid ( ) , retrieveOptions ) ;', '. setMakeSymlinksInMass ( symlinkmass ) . setResolveId ( getResolveId ( ) )', 'retrieveOptions . setConfs ( splitConfs ( getConf ( ) ) ) . setDestArtifactPattern ( pattern )', '( ( RetrieveOptions ) new RetrieveOptions ( ) . setLog ( getLog ( ) ) )', 'if ( symlinkmass ) {', '. setSync ( sync ) . setOverwriteMode ( getOverwriteMode ( ) )', '@ Deprecated']","['this . upload ( src , dest , l ) ;', 'this . download ( src , dest , l , null ) ;', 'this . download ( src , dest , l ) ;', 'this . upload ( src , dest , l , null ) ;']","['new OptionBuilder ( ""m2compatible"" ) . description ( ""use maven2 compatibility"" )', '. addOption ( new OptionBuilder ( ""overwriteMode"" ) . arg ( ""overwriteMode"" )', '. create ( ) )', '. description ( ""use given overwrite mode for retrieve"" )', 'new OptionBuilder ( ""m2compatible"" ) . description ( ""use Maven 2 compatibility"" )', '. setOverwriteMode ( line . getOptionValue ( ""overwriteMode"" ) )', 'assertTrue ( ""Content at "" + retrieveArtifactPath + "" was not overwritten by retrieve task"" , Files . readAllBytes ( retrieveArtifactPath ) . length > 0 ) ;', '@ Test', '"" - ivy"" , ""test / repositories / 1 / org / mod1 / ivys / ivy - 5 . 0 . xml"" } ;', 'final CommandLine parsedCommand = Main . getParser ( ) . parse ( args ) ;']","['import java . io . ByteArrayInputStream ;', 'import java . io . * ;', 'import java . io . InputStream ;', 'this . upload ( source , dest , l , null ) ;', 'import java . io . IOException ;', 'this . upload ( source , dest , l ) ;', 'import java . io . File ;', 'import java . io . ByteArrayOutputStream ;', 'import java . io . FileInputStream ;', 'import java . io . OutputStream ;']","['import java . io . * ;', 'import java . io . ByteArrayInputStream ;', 'import java . io . InputStream ;', 'import java . io . IOException ;', 'import java . io . File ;', 'import java . io . ByteArrayOutputStream ;', 'import java . io . FileInputStream ;', 'import java . io . OutputStream ;']","['@ SuppressWarnings ( ""resource"" )', 'jis . close ( ) ;', '} catch ( IOException e ) {', 'try ( FileInputStream fis = new FileInputStream ( f ) ) {', 'try {', 'fis . close ( ) ;', 'throw ( e ) ;', '}', 'fis = new FileInputStream ( f ) ;', 'if ( fis ! = null ) {']","['props . load ( URLHandlerRegistry . getDefault ( ) . openStream ( url ) ) ;', 'props . load ( URLHandlerRegistry . getDefault ( ) . openStream ( url , null ) ) ;', 'stream = URLHandlerRegistry . getDefault ( ) . openStream ( settingsUrl ) ;', 'stream = URLHandlerRegistry . getDefault ( ) . openStream ( settingsUrl , null ) ;', 'URLHandlerRegistry . getDefault ( ) . openStream ( descriptorURL ) ) ;', 'URLHandlerRegistry . getDefault ( ) . openStream ( descriptorURL , null ) ) ;', 'return URLHandlerRegistry . getDefault ( ) . openStream ( url ) ;', 'return URLHandlerRegistry . getDefault ( ) . openStream ( url , null ) ;', 'InputStream xmlStream = URLHandlerRegistry . getDefault ( ) . openStream ( xmlURL ) ;', 'InputStream xmlStream = URLHandlerRegistry . getDefault ( ) . openStream ( xmlURL , null ) ;']","['getIvyFileInCache ( mrid ) . getPath ( ) ) ;', '} catch ( MalformedURLException e ) {', 'return new ArtifactOrigin ( DefaultArtifact . newIvyArtifact ( mrid , null ) , false ,', 'try {', '}', 'location = this . getIvyFileInCache ( mrid ) . toURI ( ) . toURL ( ) . toExternalForm ( ) ;', 'throw new RuntimeException ( ""Failed to determine artifact origin for "" + mrid ) ;', 'return new ArtifactOrigin ( DefaultArtifact . newIvyArtifact ( mrid , null ) , false , location ) ;', 'final String location ;']","['public Object doInIvyContext ( Ivy ivy , IvyContext context ) ;', 'public interface IvyCallback {', 'public static interface IvyCallback {', 'Object doInIvyContext ( Ivy ivy , IvyContext context ) ;', '@ SuppressWarnings ( ""deprecation"" )', 'buffer . append ( "" , "" ) ;', 'buffer . append ( "" , "" ) . append ( sourceType ) ;', 'buffer . append ( sourceType ) ;', '} catch ( ParseException e ) {', '} catch ( ParseException | IOException e ) {']","['@ Deprecated', '@ Deprecated', '/ /']","['String p = "" ( "" + mridPattern . pattern ( ) + "" ) \\ \\ s * - > \\ \\ s * \\ \\ { \\ \\ s * ( ( ? : "" + mridPattern . pattern ( )', '} else if ( authResult instanceof Failure ) {', 'if ( authResult instanceof com . sun . net . httpserver . Authenticator . Success ) {', 'final Success success = ( Success ) authResult ;', '+ mridPattern . pattern ( ) + "" ) "" ) ;', 'final Retry retry = ( Retry ) authResult ;', '} else if ( authResult instanceof com . sun . net . httpserver . Authenticator . Failure ) {', 'import com . sun . net . httpserver . Authenticator . Failure ;', 'final com . sun . net . httpserver . Authenticator . Success success = ( com . sun . net . httpserver . Authenticator . Success ) authResult ;', 'import com . sun . net . httpserver . Authenticator . Success ;']","['List < ArtifactDownloadReport > reports = Arrays . asList ( ) ;', 'import java . util . Collections ;', 'List < ArtifactDownloadReport > reports = Collections . emptyList ( ) ;', 'rules = new ModuleRules < String > ( ) ;', 'rules = new ModuleRules < > ( ) ;', 'engine . publish ( md , Arrays . asList ( ""build / test / publish / module / [ artifact ] . [ ext ] "" ) ,', 'import java . util . Collections ;', 'import java . util . Arrays ;', 'engine . publish ( md , Collections . singletonList ( ""build / test / publish / module / [ artifact ] . [ ext ] "" ) ,', 'String filePath = event . getAttributes ( ) . get ( ""file"" ) . toString ( ) ;']","['import java . util . Iterator ;', 'sb . append ( "" ; "" ) . append ( attribute . getKey ( ) ) . append ( "" = "" ) . append ( attribute . getValue ( ) ) ;', 'string = string . concat ( "" ; "" ) ;', 'if ( sb . length ( ) > 0 ) {', 'string = string . concat ( attribute . getValue ( ) ) ;', 'for ( String value : values ) {', 'Iterator < String > itValues = values . iterator ( ) ;', 'StringBuilder sb = new StringBuilder ( ) ;', 'String string = """" ;', 'sb . append ( "" ; "" ) ;']","['@ SuppressWarnings ( { ""rawtypes"" , ""unchecked"" } )', 'Map < String , Object > tokensCopy = external ? tokens : new HashMap < > ( tokens ) ;', 'public static String substituteTokens ( String pattern , Map tokens ) {', 'tokensCopy . putAll ( tokens ) ;', 'return substituteTokens ( pattern , tokens ) ;', '}', 'Map < String , Object > tokensCopy = new HashMap < > ( tokens ) ;', 'public static String substituteTokens ( String pattern , Map < String , String > tokens ) {', 'return substituteTokens ( pattern , tokensCopy , true ) ;', 'Map < String , Object > tokensCopy = new HashMap < > ( ) ;']","['replacedConf = DefaultDependencyDescriptor . replaceSelfFallbackPattern ( ""default"" , ""compile"" ) ;', 'import static org . apache . ivy . core . module . descriptor . DefaultDependencyDescriptor . replaceSelfFallbackPattern ;', 'replacedConf = DefaultDependencyDescriptor . replaceSelfFallbackPattern ( "" @ "" , ""runtime"" ) ;', 'assertEquals ( ""compile ( default ) "" , replaceSelfFallbackPattern ( "" @ ( default ) "" , ""compile"" ) ) ;', 'assertNull ( replacedConf ) ;', 'assertNull ( replaceSelfFallbackPattern ( ""default"" , ""compile"" ) ) ;', 'replacedConf = DefaultDependencyDescriptor . replaceThisFallbackPattern ( ""#"" , ""runtime"" ) ;', 'assertEquals ( ""runtime"" , replaceSelfFallbackPattern ( "" @ "" , ""runtime"" ) ) ;', 'assertEquals ( ""compile ( default ) "" , replacedConf ) ;', 'assertNull ( replaceThisFallbackPattern ( ""default"" , ""compile"" ) ) ;']","['return findResourceUsingPattern ( mrid , pattern ,', 'final String timestampedRev = findTimestampedSnapshotVersion ( mrid ) ;', 'Resource metadata = getRepository ( ) . getResource ( metadataLocation ) ;', 'snapshotDescriptorPattern = getWholePattern ( ) . replaceFirst ( "" \\ \\ - \\ \\ [ revision \\ \\ ] "" , "" - "" + timestampedRev ) ;', '@ Override', 'Message . debug ( mrid + "" has been identified as a ( Maven ) timestamped snapshot revision"" ) ;', 'M2 PER MODULE PATTERN , Collections . singletonMap ( IvyPatternHelper . EXT KEY , ""pom"" ) ) ;', '@ Override', 'import java . text . ParseException ;', 'M2 PER MODULE PATTERN , Collections . singletonMap ( IvyPatternHelper . EXT KEY , ""pom"" ) ) ;']","['HttpClientHandler ( ) {', 'public HttpClientHandler ( ) {', 'class HttpClientHandler extends AbstractURLHandler implements AutoCloseable {', 'public class HttpClientHandler extends AbstractURLHandler implements AutoCloseable {']","['import org . apache . commons . vfs . FileObject ;', 'import org . apache . commons . vfs2 . FileSystemManager ;', 'import org . apache . commons . vfs . impl . StandardFileSystemManager ;', 'import org . apache . commons . vfs2 . impl . StandardFileSystemManager ;', 'import org . apache . commons . vfs . FileContent ;', 'import org . apache . commons . vfs2 . FileSystemException ;', 'import org . apache . commons . vfs . FileType ;', 'import org . apache . commons . vfs2 . FileType ;', 'import org . apache . commons . vfs . FileSystemException ;', 'import org . apache . commons . vfs2 . FileContent ;']","['private void startDependencies ( Attributes attributes ) {', 'if ( options . isMerge ( ) ) {', 'defaultConfMapping = defaultconf ;', 'if ( defaultModuleDescriptor . getDefaultConf ( ) ! = null ) {', '} else if ( ""dependencies"" . equals ( qName ) ) {', '}', 'startDependencies ( attributes ) ;', '& & !confs . contains ( defaultConf ) ) {', 'attributes . getValue ( ""defaultconfmapping"" ) ) ;', 'if ( defaultMapping ! = null ) {']","['assertEquals ( 5 , content . size ( ) ) ;', 'assertEquals ( 3 , content . size ( ) ) ;']","['if ( ""defaultconfmapping"" . equals ( attName ) ) {', 'if ( defaultConf ! = null & & attributes . getValue ( ""defaultconf"" ) = = null ) {', 'write ( "" "" + attributes . getQName ( i ) + "" = \\ """"', 'write ( "" "" + attName + "" = \\ """" + newConf + "" \\ """" ) ;', 'if ( defaultConf ! = null & & attributes . getValue ( ""defaultconf"" ) = = null', '( newConf . length ( ) > 0 ) ? "" defaultconf = \\ """" + newConf + "" \\ """" : """" ,', '( defaultConf ! = null & & !confs . contains ( defaultConf ) ) ? "" defaultconf = \\ """" + defaultConf + "" \\ """" : """" ,', 'write ( "" defaultconf = \\ """" + newConf + "" \\ """" ) ;', '& & !confs . contains ( defaultConf ) ) {', 'write ( "" "" + attName + "" = \\ """"']","['public void needArtifact ( RepositoryCacheManager cache , Artifact artifact ) ;', 'void needArtifact ( RepositoryCacheManager cache , Artifact artifact ) ;', 'public void endArtifactDownload ( RepositoryCacheManager cache , Artifact artifact ,', 'void startArtifactDownload ( RepositoryCacheManager cache , ResolvedResource rres ,', 'public void startArtifactDownload ( RepositoryCacheManager cache , ResolvedResource rres ,', 'void endArtifactDownload ( RepositoryCacheManager cache , Artifact artifact ,', 'public ModuleDescriptor provideModule ( ParserSettings ivySettings , File descriptorFile ,', 'ModuleDescriptor provideModule ( ParserSettings ivySettings , File descriptorFile ,', 'public void write ( ResolvedResource originalMdResource , ModuleDescriptor md , File src , File dest )', 'void write ( ResolvedResource originalMdResource , ModuleDescriptor md , File src , File dest )']","['final StringBuffer buildNumer = new StringBuffer ( ) ;', 'buildNumber . append ( getText ( ) ) ;', 'rev + = timestamp . toString ( ) + "" - "" + buildNumer . toString ( ) ;', 'final StringBuffer buildNumber = new StringBuffer ( ) ;', 'buildNumer . append ( getText ( ) ) ;', 'rev + = timestamp . toString ( ) + "" - "" + buildNumber . toString ( ) ;']","['return true ;', 'return true ;', 'debugLocking ( ""lock released on "" + file ) ;', 'debugLocking ( ""lock released on "" + file ) ;', 'debugLocking ( ""current status for "" + file + "" is "" + lockCount', 'debugLocking ( ""current status for "" + file + "" is "" + lockCount', '}', '}', '+ getCurrentLockHolderNames ( file ) ) ;', '+ getCurrentLockHolderNames ( file ) ) ;']","['return true ;', 'return true ;', 'debugLocking ( ""lock released on "" + file ) ;', 'debugLocking ( ""lock released on "" + file ) ;', 'debugLocking ( ""current status for "" + file + "" is "" + lockCount', 'debugLocking ( ""current status for "" + file + "" is "" + lockCount', '}', '}', '+ getCurrentLockHolderNames ( file ) ) ;', '+ getCurrentLockHolderNames ( file ) ) ;']","['EvictionData ed = evicted . get ( rootModuleConf ) ;', 'Collection < IvyNode > sel = evicted . get ( iter . next ( ) ) . getSelected ( ) ;', 'String rootModuleConf = iter . next ( ) ;', 'Collection < IvyNode > sel = ed . getSelected ( ) ;', 'for ( String attName : attributes . keySet ( ) ) {', 'configurator . setAttribute ( attribute . getKey ( ) , attribute . getValue ( ) ) ;', 'configurator . setAttribute ( attName , attributes . get ( attName ) ) ;', 'for ( Map . Entry < String , String > attribute : attributes . entrySet ( ) ) {', 'conf . setAttribute ( attName , attValue ) ;', 'for ( Map . Entry < Class < ? > , Method > method : typeMethods . entrySet ( ) ) {']","['private static ConcurrentMap < File , ConcurrentMap < Thread , Integer > > currentLockHolders = new ConcurrentHashMap < > ( ) ;', 'private static final ConcurrentMap < File , ConcurrentMap < Thread , Integer > > currentLockHolders = new ConcurrentHashMap < > ( ) ;']","['Message . info ( String . format ( "" \\ nrepository loaded : % d modules ; % d revisions ; % s % ss"" ,', 'Message . info ( String . format ( "" % nrepository loaded : % d modules ; % d revisions ; % s % ss"" ,']","['public static final SimpleDateFormat DATE FORMAT = new SimpleDateFormat ( ""yyyyMMddHHmmss"" ) ;', 'import org . apache . ivy . util . DateUtil ;', 'public static final SimpleDateFormat DATE FORMAT = new SimpleDateFormat (', '@ Deprecated', 'DateUtil . DATE FORMAT PATTERN ) ;']","[""builder . append ( ' ? ' ) ;"", 'builder . append ( "" & type = "" ) . append ( type ) ;', 'builder . append ( name ) ;', 'builder . append ( ""ivy : /', 'builder . append ( branch ) ;', 'builder . append ( "" & rev = "" ) . append ( rev ) ;', 'builder . append ( org ) ;', 'builder . append ( ""branch = "" ) . append ( branch ) ;', 'builder . append ( "" & rev = "" ) ;', 'builder . append ( "" & ext = "" ) . append ( ext ) ;']","['private StringBuffer buf = new StringBuffer ( ) ;', 'private StringBuilder buf = new StringBuilder ( ) ;', 'private StringBuffer buffer = new StringBuffer ( ) ;', 'private StringBuilder buffer = new StringBuilder ( ) ;', 'private static void appendVersion ( StringBuffer filter , VersionRange v ) {', 'StringBuilder filter = new StringBuilder ( ) ;', 'StringBuffer filter = new StringBuffer ( ) ;', 'private static void appendVersion ( StringBuilder filter , VersionRange v ) {', 'private StringBuffer charBuffer = new StringBuffer ( ) ;', 'private StringBuilder charBuffer = new StringBuilder ( ) ;']","['import java . util . Map . Entry ;', 'for ( Map . Entry < ModuleDescriptor , File > md : getModuleDescriptors ( ) . entrySet ( ) ) {', 'for ( Entry < ModuleDescriptor , File > md : getModuleDescriptors ( ) . entrySet ( ) ) {', 'import java . util . Map . Entry ;', 'for ( Map . Entry < String , String > entry : r . entrySet ( ) ) {', 'for ( Entry < String , String > entry : r . entrySet ( ) ) {', 'import java . util . Map . Entry ;', 'for ( Map . Entry < String , String > att : attributes . entrySet ( ) ) {', 'for ( Entry < String , String > att : attributes . entrySet ( ) ) {', 'Message . debug ( prefix + midm + "" - > "" + rule ) ;']","['int startNumberIndex = endNumberIndex = = - 1 ? - 1 : endNumberIndex - 1 ;', 'if ( isNullOrEmpty ( revision ) ) {', 'if ( revision = = null | | revision . length ( ) = = 0 ) {', 'import static org . apache . ivy . util . StringUtils . isNullOrEmpty ;', 'if ( !prefix . endsWith ( "" . "" ) & & prefix . length ( ) > 0 ) {', 'if ( !prefix . endsWith ( "" . "" ) & & !prefix . isEmpty ( ) ) {', 'int startNumberIndex = ( endNumberIndex = = - 1 ) ? - 1 : endNumberIndex - 1 ;', 'while ( ret = = null & & pack . length ( ) > 0 ) {', 'while ( ret = = null & & !pack . isEmpty ( ) ) {', 'tokenHadValue = ( value ! = null ) & & ( value . length ( ) > 0 ) ;']","['extractPomProperties ( parentDescr . getExtraInfos ( ) ) . entrySet ( ) ) {', ': extractPomProperties ( parentDescr . getExtraInfos ( ) ) . entrySet ( ) ) {', 'for ( Map . Entry < String , String > prop :', 'for ( Map . Entry < String , String > prop', 'String newMapping = ( defaultConfMapping = = null ) ? """" :', 'String newMapping = ( defaultConfMapping = = null ) ? """"', 'String newConf = ( defaultConf = = null ) ? """" :', ': removeConfigurationsFromMapping ( defaultConf ) ;', 'removeConfigurationsFromMapping ( defaultConfMapping ) ;', ': removeConfigurationsFromMapping ( defaultConfMapping ) ;']","['""Apache HttpComponents HttpClient backed handler couldn\'t be created due to : "" + e . getMessage ( ) ) ;', '+ ""Apache HttpComponents HttpClient backed handler couldn\'t be created due to : ""', 'Message . verbose ( ""Using JDK backed URL handler for HTTP interaction since the "" +', 'Message . verbose ( ""Using JDK backed URL handler for HTTP interaction since the ""', '+ e . getMessage ( ) ) ;', 'import static org . junit . Assert . * ;', 'import static org . junit . Assert . assertFalse ;', 'import static org . junit . Assert . assertNotNull ;', 'import static org . junit . Assert . assertNull ;', 'import static org . junit . Assert . assertEquals ;']","['rev = rev ;', 'return artifactInfos . toArray ( new ArtifactInfo [ artifactInfos . size ( ) ] ) ;', 'for ( int i = 0 ; i < artifactInfos . length ; i + + ) {', 'return rev ;', 'artifactInfos [ i ] = new MockArtifactInfo ( revs [ i ] , 0 ) ;', 'artifactInfos . add ( new MockArtifactInfo ( rev , 0 ) ) ;', 'return artifactInfos ;', 'for ( String rev : revs ) {', 'ArtifactInfo [ ] artifactInfos = new ArtifactInfo [ revs . length ] ;', 'List < ArtifactInfo > artifactInfos = new ArrayList < > ( ) ;']","['public static final String DEFAULT M2 ROOT = ""https : / / repo1 . maven . org / maven2 / "" ;', 'public static final String DEFAULT M2 ROOT = ""https : / / repo . maven . apache . org / maven2 / "" ;', 'String jarUrl = ""https : / / repo1 . maven . org / maven2 / org / apache / felix / ""', 'String jarUrl = ""https : / / repo . maven . apache . org / maven2 / org / apache / felix / ""', 'settings . setVariable ( ""ivy . ibiblio . default . artifact . root"" , ""https : / / repo1 . maven . org / maven2 / "" ) ;', 'settings . setVariable ( ""ivy . ibiblio . default . artifact . root"" , ""https : / / repo . maven . apache . org / maven2 / "" ) ;', '""https : / / repo1 . maven . org / maven2 / [ organisation ] / [ module ] / [ revision ] / [ artifact ] - [ revision ] ( - [ classifier ] ) . [ ext ] "" ,', '""https : / / repo . maven . apache . org / maven2 / [ organisation ] / [ module ] / [ revision ] / [ artifact ] - [ revision ] ( - [ classifier ] ) . [ ext ] "" ,', '""https : / / repo1 . maven . org / maven2 / commons - lang / commons - lang / [ 1 . 0 , 3 . 0 [ / commons - lang - [ 1 . 0 , 3 . 0 [ . pom"" ) , defaultTimeoutConstraint ) ;', '""https : / / repo . maven . apache . org / maven2 / commons - lang / commons - lang / [ 1 . 0 , 3 . 0 [ / commons - lang - [ 1 . 0 , 3 . 0 [ . pom"" ) , defaultTimeoutConstraint ) ;']","['public static final String DEFAULT M2 ROOT = ""https : / / repo . maven . apache . org / maven2 / "" ;', 'public static final String DEFAULT M2 ROOT = ""https : / / repo1 . maven . org / maven2 / "" ;', 'String jarUrl = ""https : / / repo . maven . apache . org / maven2 / org / apache / felix / ""', 'String jarUrl = ""https : / / repo1 . maven . org / maven2 / org / apache / felix / ""', 'settings . setVariable ( ""ivy . ibiblio . default . artifact . root"" , ""https : / / repo . maven . apache . org / maven2 / "" ) ;', 'settings . setVariable ( ""ivy . ibiblio . default . artifact . root"" , ""https : / / repo1 . maven . org / maven2 / "" ) ;', '""https : / / repo . maven . apache . org / maven2 / [ organisation ] / [ module ] / [ revision ] / [ artifact ] - [ revision ] ( - [ classifier ] ) . [ ext ] "" ,', '""https : / / repo1 . maven . org / maven2 / [ organisation ] / [ module ] / [ revision ] / [ artifact ] - [ revision ] ( - [ classifier ] ) . [ ext ] "" ,', '""https : / / repo . maven . apache . org / maven2 / commons - lang / commons - lang / [ 1 . 0 , 3 . 0 [ / commons - lang - [ 1 . 0 , 3 . 0 [ . pom"" ) , defaultTimeoutConstraint ) ;', '""https : / / repo1 . maven . org / maven2 / commons - lang / commons - lang / [ 1 . 0 , 3 . 0 [ / commons - lang - [ 1 . 0 , 3 . 0 [ . pom"" ) , defaultTimeoutConstraint ) ;']","['} catch ( BuildException ex ) {', 'fileset . setSetid ( ""haltfailure - setid"" ) ;', 'try {', 'fileset . execute ( ) ;', '}', 'project . setProperty ( ""ivy . dep . file"" , ""test / java / org / apache / ivy / ant / ivy - failure . xml"" ) ;', 'import static org . junit . Assert . fail ;', 'fileset . setHaltonfailure ( false ) ;', 'fileset . execute ( ) ;', 'fileset . setSetid ( ""haltfailure - setid"" ) ;']","['org . xml . sax . Attributes attributes ) throws SAXException {', 'import org . xml . sax . Attributes ;', 'Attributes attributes ) throws SAXException {', 'public void testCachePathFolder ( ) throws Exception {', 'public void testCachePathFolder ( ) {', 'public void testNoProject ( ) throws Exception {', 'public void testCachePath ( ) {', 'public void testCachePath ( ) throws Exception {', 'public void testNoProject ( ) {', 'public void test ( ) throws Exception {']","['protected void addBuildListeners ( Project project , int level ) {', 'private void addBuildListeners ( Project project , int level ) {', 'import java . text . ParseException ;', 'private static DefaultArtifact createArtifact ( String org , String module , String rev ,', 'protected static DefaultArtifact createArtifact ( String org , String module , String rev , String name ,', 'File dest ) throws IOException {', 'public void write ( ResolvedResource originalMdResource , ModuleDescriptor md , File src , File dest ) throws IOException , ParseException {', 'String name , String type , String ext ) {', 'String type , String ext ) {', 'public void write ( ResolvedResource originalMdResource , ModuleDescriptor md , File src ,']","['} catch ( BuildException ex ) {', 'public ExpectedException expExc = ExpectedException . none ( ) ;', '@ Test', 'import org . junit . Rule ;', 'assertTrue ( ex . getMessage ( ) . contains ( ""resolve - simple . jar"" ) ) ;', 'expExc . expect ( BuildException . class ) ;', 'public void testReadonly ( ) throws Exception {', '@ Rule', 'import static org . junit . Assert . fail ;', 'expExc . expectMessage ( ""missing artifact apache#multi ; 1 . 2!multi2 . jar"" ) ;']","['assertNotNull ( ""module not found : mod1 . 1"" , mod ) ;', 'assertNotNull ( ""module not found : mod1 . 2"" , mod ) ;', 'assertNotNull ( ""organisation not found : org1"" , org ) ;', 'fail ( ""module not found : "" + name ) ;', 'fail ( ""organisation not found : "" + name ) ;', 'import static org . junit . Assert . fail ;']","['ManifestHeaderValue headerVersion = new ManifestHeaderValue ( ) ;', '{ ""value1 ; version = 1 . 2 . 3 ; color : = red"" , ""value1 ; color : = red ; version = 1 . 2 . 3"" } } ) ;', 'fail ( ""Syntax error not detected"" ) ;', 'import java . util . Arrays ;', 'genericTestEquals ( ""value1 ; att = value2 ; att2 = other"" , ""value1 ; att = \\ ""value2 \\ "" ; att2 = other"" ) ;', 'simpleValue . addValue ( ""value"" ) ;', '@ Test', 'doubleValue . addValue ( ""value1"" ) ;', 'assertEquals ( new ManifestHeaderValue ( v1 ) , new ManifestHeaderValue ( v2 ) ) ;', '{ ""value1 ; version : "" , 14 } , { ""value1 ; version : = "" , 15 } ,']","['+ ""org . apache . felix . bundlerepository / 1 . 0 . 3 / org . apache . felix . bundlerepository - 1 . 0 . 3 . jar"" ;', 'String srcUrl = ""http : / / oscar - osgi . sf . net / obr2 / org . apache . felix . ""', 'String jarUrl = ""https : / / repo1 . maven . org / maven2 / org / apache / felix / ""', '+ ""bundlerepository / org . apache . felix . bundlerepository - 1 . 0 . 3 - src . jar"" ;', 'String srcUrl = ""http : / / oscar - osgi . sf . net / obr2 / org . apache . felix . bundlerepository / ""', 'import static org . junit . Assert . assertTrue ;', '+ ""org . apache . felix . bundlerepository - 1 . 0 . 3 - src . jar"" ;', '+ ""bundlerepository / 1 . 0 . 3 / org . apache . felix . bundlerepository - 1 . 0 . 3 . jar"" ;', 'String jarUrl = DEFAULT M2 ROOT + ""org / apache / felix / org . apache . felix . ""', 'assertTrue ( ""Default Maven URL must end with \' / \'"" , DEFAULT M2 ROOT . endsWith ( "" / "" ) ) ;']","['allDepConfs', 'Set < String > allDepConfs = new LinkedHashSet < > ( Arrays . asList ( getDependencyConfigurations ( conf ,', 'Set < String > allDepConfs = new LinkedHashSet < > ( ) ;', 'requestedConfiguration ) ) ) ;', '. addAll ( Arrays . asList ( getDependencyConfigurations ( conf , requestedConfiguration ) ) ) ;', 'tokenValues . addAll ( listTokenValues ( remainingTokens , newCriteria ) ) ;', 'newCriteria ) ) ;', 'Set < Map < String , String > > tokenValues = new HashSet < > ( ) ;', 'Set < Map < String , String > > tokenValues = new HashSet < > ( listTokenValues ( remainingTokens ,', 'names . addAll ( findIvyNames ( tokenValues , token ) ) ;']","['return true ;', 'return revId = = null ? other . revId = = null : revId . equals ( other . revId ) ;', 'if ( revId = = null ) {', 'if ( other . revId ! = null ) {', '}', 'return false ;', '} else if ( !revId . equals ( other . revId ) ) {', 'return true ;', 'return artifact = = null ? other . artifact = = null : artifact . equals ( other . artifact ) ;', 'if ( other . artifact ! = null ) {']","['if ( OnMissingDescriptor . SKIP . equals ( onMissingDescriptor ) ) {', 'break ;', 'if ( OnMissingDescriptor . WARN . equals ( onMissingDescriptor ) ) {', 'switch ( onMissingDescriptor ) {', 'Message . verbose ( String . format ( ""no descriptor for % s : descriptor = % s : adding it at the % s of the path"" ,', 'case OnMissingDescriptor . WARN :', 'noDescriptor . add ( buildFile ) ;', 'Message . debug ( ""skipping "" + buildFile + "" : descriptor "" + ivyFile', '}', 'Message . verbose ( String . format ( ""no descriptor for % s : descriptor = % s : adding it at the % s of the path"" ,']","['final File [ ] filesytemRoots = File . listRoots ( ) ;', 'final File root1 = filesystemRoots [ 0 ] ;', 'final File root1 = filesytemRoots [ 0 ] ;', 'final File [ ] filesystemRoots = File . listRoots ( ) ;', 'public void testAllRevs ( ) throws Exception {', 'public void testAllRevs ( ) {', 'public void testMergeParentWithoutPublishingParentForceDeliver ( )', 'public void testMergeParentWithoutPublishingParentForceDeliver ( ) throws IOException {', 'throws IOException {']",['@ Test'],"['import org . junit . Assert ;', 'assertNotNull ( ""Maven timestamped snapshot revision version matcher is absent"" ,', 'Assert . assertNotNull ( ""Maven timestamped snapshot revision version matcher is absent"" ,', 'Assert . assertNull ( ""Revision wasn\'t expected to be a snapshot"" ,', 'assertNotNull ( regularSnapshot + "" was expected to be a snapshot"" , snapshotRevision ) ;', 'import org . junit . Assert ;', 'assertNull ( ""Revision wasn\'t expected to be a snapshot"" ,', 'Assert . assertFalse ( exactRevision + "" wasn\'t expected to be a dynamic revision"" , versionMatcher . isDynamic ( exactRevision ) ) ;', 'import static org . junit . Assert . assertNull ;', 'Assert . assertNotNull ( regularSnapshot + "" was expected to be a snapshot"" , snapshotRevision ) ;']","['if ( ( currentTask . getTaskName ( ) ! = null )', 'if ( currentTask . getTaskName ( ) ! = null', 'if ( ( otherRef ! = null ) & & OVERRIDE NOT ALLOWED . equals ( override ) ) {', 'if ( otherRef ! = null & & OVERRIDE NOT ALLOWED . equals ( override ) ) {', 'if ( ( backup ! = null ) & & backup . exists ( ) ) {', 'if ( backup ! = null & & backup . exists ( ) ) {', 'if ( ( md ! = null ) & & !"" * "" . equals ( masterConf ) & & !"" % "" . equals ( masterConf ) ) {', 'if ( md ! = null & & !"" * "" . equals ( masterConf ) & & !"" % "" . equals ( masterConf ) ) {', 'String branch = this . branch = = null ? mrid . getBranch ( ) : this . branch ;', 'String branch = ( this . branch = = null ) ? mrid . getBranch ( ) : this . branch ;']","['ModuleDescriptor md = caller . getModuleDescriptor ( ) ;', 'public ModuleRevisionId getAskedDependencyId ( ) {', 'Boolean doesExclude = node . doesExclude ( md , rootModuleConf ,', '@ Deprecated', 'Boolean doesExclude = node . doesExclude ( caller . getModuleDescriptor ( ) , rootModuleConf ,', '}', 'return getAskedDependencyId ( ) ;', 'if ( versionMatcher . isDynamic ( caller . getAskedDependencyId ( node . getData ( ) ) ) ) {', 'if ( versionMatcher . isDynamic ( caller . getAskedDependencyId ( ) ) ) {', 'XMLHelper . escape ( caller . getAskedDependencyId ( dep . getData ( ) ) . getRevision ( ) ) ,']","['""additional properties"" ) ) ;', '}', '. description ( ""use given file for properties not specified in settings"" ) . create ( ) )', 'settings . addAllVariables ( new PropertiesFile ( new File ( line . getOptionValue ( ""properties"" ) ) ,', 'import org . apache . ivy . util . PropertiesFile ;', 'new OptionBuilder ( ""properties"" ) . arg ( ""propertiesfile"" )', '. addOption (', 'if ( line . hasOption ( ""properties"" ) ) {']","['continue ;', 'URI uri = new URI ( href ) ;', 'try {', 'continue ;', 'if ( href . startsWith ( ""http : "" ) | | href . startsWith ( ""https : "" ) ) {', 'try {', '} catch ( Exception ignore ) {', 'href = uri . getPath ( ) ;', 'href = new URL ( href ) . getPath ( ) ;', '} catch ( URISyntaxException e ) {']","['String [ ] conf = confs . split ( "" ; "" ) ;', 'String [ ] conf = confs . trim ( ) . split ( "" \\ \\ s * ; \\ \\ s * "" ) ;', 'for ( String groups : mapping . split ( "" ; "" ) ) {', 'for ( String groups : mapping . trim ( ) . split ( "" \\ \\ s * ; \\ \\ s * "" ) ) {', 'return parts ;', 'return list . trim ( ) . split ( "" \\ \\ s * , \\ \\ s * "" ) ;', 'parts [ i ] = parts [ i ] . trim ( ) ;', '}', 'for ( int i = 0 ; i < parts . length ; i + + ) {', 'String [ ] parts = list . split ( "" , "" ) ;']","['} catch ( SecurityException e ) {', 'try {', 'try {', 'return major = = 1 ? Integer . parseInt ( version [ 1 ] ) : major ;', '} catch ( Throwable t ) {', 'return ( Authenticator ) m . invoke ( null ) ;', 'if ( !securityWarningLogged ) {', '}', 'Authenticator . setDefault ( new IvyAuthenticator ( original ) ) ;', 'private static Authenticator getTheAuthenticator ( ) {']","['final String [ ] version = System . getProperty ( ""java . version"" ) . split ( "" \\ \\ . "" ) ;', 'final String [ ] version = System . getProperty ( ""java . specification . version"" ) . split ( "" \\ \\ . "" ) ;']","['URLHandler httpHandler = URLHandlerRegistry . getHttp ( ) ;', 'import org . apache . ivy . util . url . TimeoutConstrainedURLHandler ;', 'TimeoutConstrainedURLHandler httpHandler = URLHandlerRegistry . getHttp ( ) ;', 'URLHandler httpHandler = URLHandlerRegistry . getHttp ( ) ;', 'import org . apache . ivy . util . url . TimeoutConstrainedURLHandler ;', 'TimeoutConstrainedURLHandler httpHandler = URLHandlerRegistry . getHttp ( ) ;', 'props . load ( URLHandlerRegistry . getDefault ( ) . openStream ( url , null ) ) ;', 'props . load ( URLHandlerRegistry . getDefault ( ) . openStream ( url ) ) ;', 'stream = URLHandlerRegistry . getDefault ( ) . openStream ( settingsUrl , null ) ;', 'stream = URLHandlerRegistry . getDefault ( ) . openStream ( settingsUrl ) ;']","['return this . isReachable ( url , createTimeoutConstraints ( timeout ) ) ;', 'return getURLInfo ( url , timeout ) . getLastModified ( ) ;', 'public long getLastModified ( final URL url , final TimeoutConstraint timeoutConstraint ) {', 'public abstract class AbstractURLHandler implements URLHandler {', 'return this . getContentLength ( url , null ) ;', 'return getURLInfo ( url ) . getContentLength ( ) ;', 'return this . getContentLength ( url , createTimeoutConstraints ( timeout ) ) ;', 'return getURLInfo ( url , timeout ) . getContentLength ( ) ;', 'public abstract class AbstractURLHandler implements TimeoutConstrainedURLHandler {', 'return getURLInfo ( url ) . getLastModified ( ) ;']","['+ + iteration ;', 'if ( getIterations ( ) > 0 ) {', 'if ( iteration > 0 ) {', 'incrementIterationCount ( ) ;']","['inbits = Double . doubleToLongBits ( x ) ;', 'long bits = Double . doubleToRawLongBits ( x ) ;', 'final long m = Double . doubleToLongBits ( magnitude ) ;', 'final long s = Double . doubleToRawLongBits ( sign ) ;', 'final long bits = Double . doubleToLongBits ( d ) ;', 'inbits = Double . doubleToRawLongBits ( x ) ;', 'final int m = Float . floatToIntBits ( magnitude ) ;', 'long inbits = Double . doubleToRawLongBits ( x ) ;', 'long xl = Double . doubleToLongBits ( d ) ;', 'final long m = Double . doubleToRawLongBits ( magnitude ) ;']","['state . stepAccepted ( eventT , eventY ) ;', 'needReset = needReset | | state . reset ( eventT , eventYComplete ) ;', 'final double [ ] eventY = interpolator . getInterpolatedState ( ) . clone ( ) ;', '}', 'System . arraycopy ( eventY , 0 , y , 0 , y . length ) ;', 'secondary . insertEquationData ( interpolator . getInterpolatedSecondaryState ( index + + ) ,', 'needReset = needReset | | state . reset ( eventT , eventY ) ;', 'System . arraycopy ( eventYComplete , 0 , y , 0 , y . length ) ;', 'final double [ ] eventYPrimary = interpolator . getInterpolatedState ( ) . clone ( ) ;', 'protected ExpandableStatefulODE getExpandable ( ) {']","['double maxMembership = 0 . 0 ;', 'membershipMatrix [ i ] [ j ] = 1 . 0 / sum ;', 'for ( final CentroidCluster < T > c : clusters ) {', 'final double distB = FastMath . abs ( distance ( point , c . getCenter ( ) ) ) ;', 'private List < CentroidCluster < T > > clusters ;', 'return maxIterations ;', 'final int maxIterations , final DistanceMeasure measure ,', 'import org . apache . commons . math3 . ml . distance . DistanceMeasure ;', '} while ( difference > epsilon & & + + iteration < max ) ;', 'private void initializeMembershipMatrix ( ) {']","['final double u = FastMath . pow ( membershipMatrix [ i ] [ j ] , fuzzyness ) ;', 'sum + = FastMath . pow ( distA / distB , 2 . 0 / ( fuzziness - 1 . 0 ) ) ;', 'public double getFuzzyness ( ) {', 'throw new NumberIsTooSmallException ( fuzziness , 1 . 0 , false ) ;', 'double dist = distance ( point , cluster . getCenter ( ) ) ;', 'throw new MathIllegalStateException ( ) ;', 'sum + = FastMath . pow ( distA / distB , 2 . 0 / ( fuzzyness - 1 . 0 ) ) ;', 'if ( fuzziness < = 1 . 0d ) {', 'private final double fuzzyness ;', 'this . fuzziness = fuzziness ;']","['for ( int j = 0 ; j < 16 ; j + + ) {', 'for ( int i = 0 ; i < NUM COEFF ; i + + ) {', 'for ( int i = 0 ; i < 16 ; i + + ) {', 'for ( int j = 0 ; j < NUM COEFF ; j + + ) {', 'final double [ ] a = new double [ 16 ] ;', 'private static final int NUM COEFF = 16 ;', 'final double [ ] a = new double [ NUM COEFF ] ;']","['}', 'return r ;', 'if ( c < val [ 0 ] ) {', 'if ( r = = - 1 | |', 'for ( int i = 1 ; i < max ; i + + ) {', 'if ( r = = last ) {', 'return - 1 ;', 'final int last = val . length - 1 ;', 'throw new OutOfRangeException ( x , xval [ 0 ] , xval [ xval . length - 1 ] ) ;', 'final int r = Arrays . binarySearch ( val , c ) ;']","['this . a [ i ] [ j ] = a [ i + N * j ] ;', 'this . a [ i ] [ j ] = a [ i * N + j ] ;']","['r = = - val . length ) {', 'r = = - val . length - 1 ) {']","['y < yval [ 0 ] | |', 'if ( x < xval [ 0 ] | |', 'x > xval [ xval . length - 1 ] | |', '}', '} else {', 'return true ;', 'y > yval [ yval . length - 1 ] ) {', 'public boolean isValidPoint ( double x , double y ) {', 'return false ;']","['}', 'for ( int i = 0 ; i < nC ; + + i ) {', 'if ( previous ! = null ) {', 'import org . apache . commons . math3 . linear . LUDecomposition ;', 'if ( checker = = null ) {', 'import org . apache . commons . math3 . optim . ConvergenceChecker ;', 'import org . apache . commons . math3 . linear . QRDecomposition ;', 'getStart ( ) ,', 'private final boolean useLU ;', 'throw new DimensionMismatchException ( weightMatrix . getRowDimension ( ) , nR ) ;']","['if ( realEigenvalues [ i ] = = 0 & &', 'double largestEigenvalueNorm = eigenvalueNorm ( 0 ) ;', 'imagEigenvalues [ i ] = = 0 ) {', '}', 'if ( largestEigenvalueNorm = = 0 . 0 ) {', 'final double re = realEigenvalues [ i ] ;', 'final double im = imagEigenvalues [ i ] ;', 'private double eigenvalueNorm ( int i ) {', 'return FastMath . sqrt ( re * re + im * im ) ;', 'return false ;']","['final int numPairs = n * ( n - 1 ) / 2 ;', 'int tiedYPairs = 0 ;', 'tiedXPairs + = consecutiveXTies * ( consecutiveXTies - 1 ) / 2 ;', 'int concordantMinusDiscordant = numPairs - tiedXPairs - tiedYPairs + tiedXYPairs - 2 * swaps ;', 'int consecutiveXTies = 1 ;', 'tiedXYPairs + = consecutiveXYTies * ( consecutiveXYTies - 1 ) / 2 ;', 'int swaps = 0 ;', 'return concordantMinusDiscordant / FastMath . sqrt ( ( numPairs - tiedXPairs ) * ( numPairs - tiedYPairs ) ) ;', 'int tiedXPairs = 0 ;', 'int tiedXYPairs = 0 ;']","['bits = bits | ( ( ( long ) next ( 32 ) ) & 0xffffffffL ) ;', 'random > > = 8 ;', 'random = random > > 8 ;', 'bits | = ( ( long ) next ( 32 ) ) & 0xffffffffL ;', 'b = b + costB * cosEpsA + costA * cosEpsB + costB * cosEpsB ;', 'e > > = 1 ;', 'mantissa = mantissa | ( 1L < < 52 ) ;', 'z * = lnb ;', 'prodA = prodA + ( bc > > > 32 ) ;', 'za * = ya ;']","['final int numPairs = n * ( n - 1 ) / 2 ;', 'final long numPairs = n * ( n - 1l ) / 2l ;', 'int concordantMinusDiscordant = numPairs - tiedXPairs - tiedYPairs + tiedXYPairs - 2 * swaps ;', 'final double nonTiedPairsMultiplied = ( numPairs - tiedXPairs ) * ( double ) ( numPairs - tiedYPairs ) ;', 'return concordantMinusDiscordant / FastMath . sqrt ( ( numPairs - tiedXPairs ) * ( numPairs - tiedYPairs ) ) ;', 'final long concordantMinusDiscordant = numPairs - tiedXPairs - tiedYPairs + tiedXYPairs - 2 * swaps ;', 'return concordantMinusDiscordant / FastMath . sqrt ( nonTiedPairsMultiplied ) ;']","['final int varEnd = tableau . getWidth ( ) - 1 ;', 'if ( Precision . compareTo ( entry , 0d , maxUlps ) > 0 ) {', 'final Integer basicRow = tableau . getBasicRow ( i ) ;', 'int minIndex = tableau . getWidth ( ) ;', '}', 'private PivotSelectionRule pivotSelection ;', 'int minIndex = tableau . getWidth ( ) ;', 'Integer minRow = null ;', 'for ( int i = varStart ; i < varEnd & & !row . equals ( minRow ) ; i + + ) {', 'minRow = row ;']","['static final double DEFAULT CUT OFF = 1e - 12 ;', 'tableau . setEntry ( i , col , 0 ) ;', 'cutOff ) ;', 'if ( FastMath . abs ( entry ) < cutOff ) {', 'maxUlps ,', '} else if ( Precision . compareTo ( entry , 0d , maxUlps ) > 0 ) {', 'if ( Precision . compareTo ( entry , 0d , maxUlps ) > 0 ) {', 'static final double DEFAULT CUT OFF = 1e - 10 ;', 'import org . apache . commons . math3 . util . FastMath ;', 'maxUlps ) ;']","['import org . apache . commons . math3 . geometry . partitioning . Side ;', 'public Side side ( final Hyperplane < Sphere2D > hyperplane ) {', '}', '@ Override', 'import org . apache . commons . math3 . geometry . spherical . oned . S1Point ;', 'final S2Point [ ] crossings = thisCircle . intersection ( otherCircle ) ;', 'import org . apache . commons . math3 . geometry . partitioning . AbstractSubHyperplane ;', 'return new SplitSubHyperplane < Sphere2D > ( new SubCircle ( thisCircle . copySelf ( ) , new ArcsSet ( plusTree ) ) ,', 'final boolean direct = FastMath . sin ( thisCircle . getAngle ( ) - otherCircle . getAngle ( ) ) < 0 ;', 'import org . apache . commons . math3 . geometry . partitioning . BSPTree ;']","['Vector2D q = thisPlane . toSubSpace ( inter . toSpace ( Vector1D . ONE ) ) ;', 'Vector2D q = thisPlane . toSubSpace ( ( Point < Euclidean3D > ) inter . toSpace ( ( Point < Euclidean1D > ) Vector1D . ONE ) ) ;', 'Vector2D p = thisPlane . toSubSpace ( inter . toSpace ( Vector1D . ZERO ) ) ;', 'Vector2D p = thisPlane . toSubSpace ( ( Point < Euclidean3D > ) inter . toSpace ( ( Point < Euclidean1D > ) Vector1D . ZERO ) ) ;', 'import org . apache . commons . math3 . geometry . euclidean . oned . Euclidean1D ;', 'import org . apache . commons . math3 . geometry . Point ;', 'Location loc1 = getRemainingRegion ( ) . checkPoint ( line1 . toSubSpace ( v2D ) ) ;', 'final Vector1D x = thisLine . toSubSpace ( ( Point < Euclidean2D > ) crossing ) ;', 'line . toSubSpace ( end ) . getX ( ) ) ;', 'Location loc2 = subLine . getRemainingRegion ( ) . checkPoint ( line2 . toSubSpace ( ( Point < Euclidean2D > ) v2D ) ) ;']","['import org . apache . commons . math3 . geometry . partitioning . Side ;', 'return ( global < - 1 . 0e - 10 ) ? Side . MINUS : ( ( global > 1 . 0e - 10 ) ? Side . PLUS : Side . HYPER ) ;', 'public Side side ( final Hyperplane < Sphere1D > hyperplane ) {', '}', '@ Override', 'final double global = hyperplane . getOffset ( ( ( LimitAngle ) getHyperplane ( ) ) . getLocation ( ) ) ;', 'public boolean isEmpty ( ) {', 'import org . apache . commons . math3 . geometry . partitioning . AbstractSubHyperplane ;', 'public class SubLimitAngle extends AbstractSubHyperplane < Sphere1D , Sphere1D > {', 'return false ;']","['final BSPTree < Sphere1D > firstStart = getFirstArcStart ( ) ;', 'final double arcOffset = a [ 0 ] - syncedStart ;', 'end = previousNode ( end ) ;', 'final double syncedStart = MathUtils . normalizeAngle ( a [ 0 ] , reference ) - arc . getInf ( ) ;', 'public class ArcsSet extends AbstractRegion < Sphere1D , Sphere1D > {', 'for ( final double [ ] a : this ) {', 'node = childAfter ( node ) ;', '}', 'node = childBefore ( node ) ;', 'return Side . MINUS ;']","['return ( ( ArcsSet ) getRemainingRegion ( ) ) . side ( arc ) ;', 'return Side . HYPER ;', 'final Arc arc = thisCircle . getInsideArc ( otherCircle ) ;', '}', 'final ArcsSet . Split split = ( ( ArcsSet ) getRemainingRegion ( ) ) . split ( arc ) ;', '} else {', 'new SubCircle ( thisCircle . copySelf ( ) , split . getMinus ( ) ) ) ;', '} else if ( angle > FastMath . PI - thisCircle . getTolerance ( ) ) {', 'return new SplitSubHyperplane < Sphere2D > ( new SubCircle ( thisCircle . copySelf ( ) , split . getPlus ( ) ) ,', 'return new SplitSubHyperplane < Sphere2D > ( this , null ) ;']","['new org . apache . commons . math3 . geometry . euclidean . twod . Line ( q , p ) . wholeHyperplane ( ) ;', 'final double tolerance = thisPlane . getTolerance ( ) ;', 'new SubPlane ( thisPlane . copySelf ( ) , new PolygonsSet ( minusTree ) ) ) ;', 'new org . apache . commons . math3 . geometry . euclidean . twod . Line ( p , q , tolerance ) ;', 'new org . apache . commons . math3 . geometry . euclidean . twod . Line ( p , q ) ;', 'new SubPlane ( thisPlane . copySelf ( ) , new PolygonsSet ( minusTree , tolerance ) ) ) ;', 'return new SplitSubHyperplane < Euclidean3D > ( new SubPlane ( thisPlane . copySelf ( ) , new PolygonsSet ( plusTree ) ) ,', 'new org . apache . commons . math3 . geometry . euclidean . twod . Line ( q , p , tolerance ) . wholeHyperplane ( ) ;', 'new org . apache . commons . math3 . geometry . euclidean . twod . Line ( p , q ) . wholeHyperplane ( ) ;', 'return new SplitSubHyperplane < Euclidean3D > ( new SubPlane ( thisPlane . copySelf ( ) , new PolygonsSet ( plusTree , tolerance ) ) ,']","['plus . add ( arcEnd ( a [ 1 ] ) ) ;', 'plus . setAttribute ( Boolean . FALSE ) ;', 'return new Split ( plus . isEmpty ( ) ? null : new ArcsSet ( plus , getTolerance ( ) ) ,', 'minus . setAttribute ( Boolean . FALSE ) ;', 'while ( previous ! = null ) {', 'final BSPTree < Sphere1D > minus = new BSPTree < Sphere1D > ( ) ;', 'public ArcsSet ( final BSPTree < Sphere1D > tree , final double tolerance ) {', '} else {', 'previous = previousInternalNode ( node ) ;', 'final BSPTree < Sphere1D > plus = new BSPTree < Sphere1D > ( ) ;']","['1d / currentNeighbourhood ) ;', 'final long numCalls = numberOfCalls . incrementAndGet ( ) ;', 'private final AtomicLong numberOfCalls = new AtomicLong ( - 1 ) ;', 'this . neighbourhoodSize = neighbourhoodSize ;', 'final ArrayRealVector s = new ArrayRealVector ( sample , false ) ;', 'learningRate ) ;', 'import org . apache . commons . math3 . ml . distance . DistanceMeasure ;', 'Collection < Neuron > neighbours = new HashSet < Neuron > ( ) ;', 'exclude . add ( best ) ;', 'import org . apache . commons . math3 . ml . neuralnet . Network ;']","['last . insertCut ( new LimitAngle ( new S1Point ( alpha ) , false , getTolerance ( ) ) ) ;', 'addArcLimit ( plus , a [ 0 ] , true ) ;', 'if ( firstState ^ lastState ) {', 'private ArcsSet createSplitPart ( final BSPTree < Sphere1D > tree ) {', 'private ArcsSet createSplitPart ( final BSPTree < Sphere1D > tree , final boolean ignored ) {', 'node . getMinus ( ) . setAttribute ( Boolean . TRUE ) ;', 'minusIgnored = addArcEnd ( minus , a [ 1 ] , minusIgnored ) ;', 'leafBefore ( node ) . setAttribute ( Boolean . valueOf ( !isStart ) ) ;', 'if ( alpha < = getTolerance ( ) ) {', 'addArcLimit ( minus , minusToPlus , false ) ;']","['( Double . toString ( x ) )', 'return rounded = = 0 . 0 ? rounded * FastMath . copySign ( 1d , x ) : rounded ;', 'return ( new BigDecimal', 'final double rounded = ( new BigDecimal ( Double . toString ( x ) )']","['final double zSquared = FastMath . pow ( z , 2 ) ;', '( 1 . 0 / ( 4 * FastMath . pow ( numberOfTrials , 2 ) ) * zSquared ) ) ;', 'final double modifiedSuccessRatio = mean + ( 1 . 0 / ( 2 * numberOfTrials ) ) * zSquared ;', 'final double factor = 1 . 0 / ( 1 + ( 1 . 0 / numberOfTrials ) * zSquared ) ;', 'final double difference = z *', 'final double alpha = ( 1 . 0 - confidenceLevel ) / 2 ;', 'final double upperBound = factor * ( modifiedSuccessRatio + difference ) ;', 'import org . apache . commons . math3 . distribution . NormalDistribution ;', 'final NormalDistribution normalDistribution = new NormalDistribution ( ) ;', 'final double mean = ( double ) numberOfSuccesses / ( double ) numberOfTrials ;']","['final BSPTree < Sphere1D > plus = new BSPTree < Sphere1D > ( ) ;', 'if ( syncedStart < = arcLength - getTolerance ( ) | | syncedEnd > = MathUtils . TWO PI + getTolerance ( ) ) {', 'final BSPTree < Sphere1D > minus = new BSPTree < Sphere1D > ( ) ;', 'if ( syncedEnd > = arcLength + getTolerance ( ) ) {', 'addArcLimit ( plus , a [ 0 ] , true ) ;', 'final int j = ( i + 1 ) % limits . size ( ) ;', 'private ArcsSet createSplitPart ( final BSPTree < Sphere1D > tree ) {', 'i = i - 1 ;', 'node . getMinus ( ) . setAttribute ( Boolean . TRUE ) ;', 'for ( int i = 0 ; i < limits . size ( ) ; + + i ) {']","['EnclosingBall < S , P > enclose ( List < P > points ) ;', 'import java . util . List ;', '}', 'import org . apache . commons . math3 . geometry . Space ;', 'public interface Encloser < S extends Space , P extends Point < S > > {', 'package org . apache . commons . math3 . geometry . enclosing ;', 'import org . apache . commons . math3 . geometry . Point ;', 'private EnclosingBall < S , P > moveToFrontBall ( final List < P > extreme , final List < P > support ) {', 'public EnclosingBall < S , P > enclose ( final List < P > points ) {', 'ball = moveToFrontBall ( extreme , support ) ;']","['} ) ;', 'c1 [ 2 ] , c1 [ 1 ] , c1 [ 3 ] , - c1 [ 1 ] , - c1 [ 3 ] , - c1 [ 2 ] ,', 'vA . getNormSq ( ) , vB . getNormSq ( ) , vC . getNormSq ( ) , vD . getNormSq ( )', 'return MathArrays . linearCombination ( new double [ ] {', 'c1 [ 0 ] , c1 [ 2 ] , c1 [ 1 ] , - c1 [ 2 ] , - c1 [ 0 ] , - c1 [ 1 ]', 'final double m31 = c2 [ 3 ] * c3 [ 1 ] ;', 'final double m20 = c2 [ 2 ] * c3 [ 0 ] ;', 'final double m13 = minor ( c1 , c2 , c4 ) ;', 'final double [ ] c4 = new double [ ] {', 'final double m12 = c2 [ 1 ] * c3 [ 2 ] ;']","['return ( int ) FastMath . signum ( o1 . getY ( ) - o2 . getY ( ) ) ;', 'final int diff = ( int ) FastMath . signum ( o1 . getX ( ) - o2 . getX ( ) ) ;', 'hullVertices . add ( lowerHull . get ( idx ) ) ;', '} ) ;', 'final int size = upperHull . size ( ) ;', 'for ( Vector2D p : pointsSortedByXAxis ) {', 'import java . util . Comparator ;', 'final Vector2D p2 = upperHull . get ( size - 1 ) ;', 'return ( linePoint2 . getX ( ) - linePoint1 . getX ( ) ) * ( point . getY ( ) - linePoint1 . getY ( ) ) -', 'this . tolerance = tolerance ;']","['final int size = upperHull . size ( ) ;', 'hull . add ( point ) ;', 'final Vector2D p2 = upperHull . get ( size - 1 ) ;', 'while ( hull . size ( ) > = 2 ) {', 'this . tolerance = tolerance ;', 'super ( includeCollinearPoints , tolerance ) ;', 'if ( p . crossProduct ( p1 , p2 ) < = 0 ) {', 'updateHull ( p , upperHull ) ;', 'private final double tolerance ;', 'super ( includeCollinearPoints ) ;']","['import java . util . Iterator ;', 'this . tolerance = tolerance ;', 'this . lineSegments = new Segment [ 0 ] ;', 'this . lineSegments = new Segment [ 0 ] ;', 'final Iterator < Vector2D > it = vertices . iterator ( ) ;', 'Vector2D firstPoint = null ;', 'Vector2D firstPoint = null ;', 'this . lineSegments = new Segment [ 1 ] ;', 'this . lineSegments = new Segment [ 1 ] ;', 'new Segment ( lastPoint , point , new Line ( lastPoint , point , tolerance ) ) ;']","['ConvexHull2D ( final Collection < Vector2D > vertices , final double tolerance ) {', 'double sign = 0 . 0 ;', 'this . vertices = vertices . toArray ( new Vector2D [ vertices . size ( ) ] ) ;', 'import org . apache . commons . math3 . util . FastMath ;', 'import java . util . Collection ;', 'final double cross = FastMath . signum ( MathArrays . linearCombination ( d1 . getX ( ) , d2 . getY ( ) ,', '- d1 . getY ( ) , d2 . getX ( ) ) ) ;', 'final Vector2D p2 = hullVertices [ i ] ;', 'sign = cross ;', 'import org . apache . commons . math3 . exception . MathIllegalArgumentException ;']","['}', 'final int nC = lsp . getParameterSize ( ) ;', 'final int nR = weightMatrix . getRowDimension ( ) ;', 'ak [ l ] + = grad [ k ] * grad [ l ] ;', 'b [ j ] + = wr * grad [ j ] ;', 'final RealMatrix weightedJacobian = value . computeJacobian ( ) ;', 'final double wr = weight * residual ;', 'final int nR = lsp . getObservationSize ( ) ;', 'ak [ l ] + = wgk * grad [ l ] ;', 'b [ j ] + = residual * grad [ j ] ;']","['PointVectorValuePair current = new PointVectorValuePair ( currentPoint , currentObjective ) ;', 'return new OptimumImpl ( current , iterationCounter . getCount ( ) , evaluationCounter . getCount ( ) ) ;', 'currentObjective = oldObj ;', 'current = problem . evaluate ( currentPoint ) ;', 'double [ ] currentObjective = value . computeValue ( ) ;', 'double [ ] currentResiduals = current . computeResiduals ( ) ;', 'currentCost = value . computeCost ( ) ;', 'double currentCost = current . computeCost ( ) ;', 'final ConvergenceChecker < PointVectorValuePair > checker', 'currentCost = current . computeCost ( ) ;']","['final double [ ] dX = solver . solve ( new ArrayRealVector ( b , false ) ) . toArray ( ) ;', 'currentPoint . setEntry ( i , currentPoint . getEntry ( i ) + dX . getEntry ( i ) ) ;', 'final double [ ] currentResiduals = current . computeResiduals ( ) ;', 'final RealVector currentPoint = lsp . getStart ( ) ;', 'currentPoint [ i ] + = dX [ i ] ;', 'import org . apache . commons . math3 . linear . RealVector ;', 'final double [ ] currentPoint = lsp . getStart ( ) ;', 'final RealVector dX = solver . solve ( new ArrayRealVector ( b , false ) ) ;', 'final double residual = currentResiduals [ i ] ;', 'final RealVector currentResiduals = current . computeResiduals ( ) ;']","['return new LeastSquaresProblemImpl (', 'point ) ;', 'private static class LocalLeastSquaresProblem', 'this . model = model ;', 'this . target ,', 'public RealVector getValue ( ) {', 'return target . subtract ( this . getValue ( ) ) ;', 'this . values = values ;', 'private final RealVector values ;', 'final int maxIterations ) {']","['if ( curD > d ) {', '}', 'final int xIndex = Arrays . binarySearch ( sx , sy [ i ] ) ;', 'final double cdf x = xIndex > = 0 ? ( xIndex + 1d ) / n : ( - xIndex - 1d ) / n ;', '} else if ( curD = = d & & !strict ) {', 'final double cdf y = ( i + 1d ) / m ;', 'final double cdf y = yIndex > = 0 ? ( yIndex + 1d ) / m : ( - yIndex - 1d ) / m ;', 'return ( double ) tail / ( double ) CombinatoricsUtils . binomialCoefficient ( n + m , n ) ;', 'final double cdf x = ( i + 1d ) / n ;', 'tail + + ;']","['double absoluteTolerance ) {', 'bracket . search ( f , goal , 0 , 1 ) ;', 'private final UnivariateOptimizer lineOptimizer ;', 'return obj ;', 'final double [ ] direction ) {', 'public double value ( double alpha ) {', 'public class LineSearch {', 'final UnivariateFunction f = new UnivariateFunction ( ) {', 'double relativeTolerance ,', '} ;']","['numIterations , maximumIterations , initial ,', '( numIterations < maximumIterations ) & & ( a > lowerBound | | b > upperBound ) ;', 'fa = function . value ( a ) ;', 'throws NoBracketingException {', 'fb = function . value ( b ) ;', 'return bracket ( function , initial , lowerBound , upperBound , 1 . 0 , 1 . 0 , maximumIterations ) ;', 'double b = initial ;', 'a = FastMath . max ( initial - delta , lowerBound ) ;', '} while ( ( fa * fb > 0 . 0 ) & & ( numIterations < maximumIterations ) & &', '+ + numIterations ) {']","['return getKernel ( stats ) . sample ( ) ;', 'if ( bStats . getN ( ) = = 1 ) {', '}', '}', '} else {', '} else {', 'if ( stats . getN ( ) > 0 ) {', 'return new NormalDistribution ( randomData . getRandomGenerator ( ) ,', 'return getNextValue ( ) ;', 'return sample ( ) ;']","['for ( int j = 0 ; j < N ; j + + ) {', 'for ( int j = 0 ; j < N ; j + + ) {', 'private BivariateFunction [ ] [ ] [ ] partialDerivatives = null ;', 'public BivariateFunction partialDerivativeXX ( ) {', 'class BicubicSplineFunction', 'return partialDerivativeXX ;', 'implements BivariateFunction {', 'if ( y < 0 | | y > 1 ) {', 'public BivariateFunction partialDerivativeXX ( ) {', 'public BivariateFunction partialDerivativeX ( ) {']","['for ( int j = 0 ; j < N ; j + + ) {', 'double [ ] [ ] dFdX ,', 'aX [ i ] [ j ] = i * c ;', 'boolean initializeDerivatives )', 'partialDerivativeX = new BivariateFunction ( ) {', 'partialDerivativeY = null ;', 'final double c = a [ i ] [ j ] ;', 'double [ ] [ ] f ,', 'return apply ( pX , pY , aXY ) ;', 'throws DimensionMismatchException ,']","['if ( data ! = null ) {', 'if ( data ! = null & & data . length > 1 ) {']","['return 0 . 0 ;', 'public double getNumericalVariance ( ) {', 'if ( beta < = 0 . 0 ) {', 'import org . apache . commons . math3 . exception . OutOfRangeException ;', 'public double getLocation ( ) {', 'double x = ( p > 0 . 5 ) ? - Math . log ( 2 . 0 - 2 . 0 * p ) : Math . log ( 2 . 0 * p ) ;', 'private final double beta ;', 'throw new OutOfRangeException ( p , 0 . 0 , 1 . 0 ) ;', '} else if ( p = = 1 ) {', 'public double getSupportUpperBound ( ) {']","['final int jp1 = j + 1 ;', 'spline = interpolator . interpolate ( xArray , zArray ) ;', 'if ( r = = last ) {', 'final int i = searchIndex ( x , xval , offset , count ) ;', 'throws OutOfRangeException {', 'return r ;', 'double [ ] [ ] f ,', 'xArray [ index ] = xval [ i + index ] ;', 'partialDerivativeX = new BivariateFunction ( ) {', 'public BicubicSplineInterpolatingFunction ( double [ ] x , double [ ] y ,']","['import java . lang . reflect . Array ;', 'finder . recurseSides ( tree , hyperplane . wholeHyperplane ( ) ) ;', 'if ( ( Boolean ) node . getAttribute ( ) ) {', 'final InsideFinder < S > finder = new InsideFinder < S > ( this ) ;', 'characterization [ 1 ] = sub ;', '( finder . minusFound ( ) ? Side . MINUS : Side . HYPER ) ;', 'recurseSides ( node . getPlus ( ) , split . getPlus ( ) , sides ) ;', '( finder . minusFound ( ) ? Side . BOTH : Side . PLUS ) :', 'if ( minusChar [ 0 ] ! = null & & !minusChar [ 0 ] . isEmpty ( ) ) {', 'return finder . plusFound ( ) ?']","['final RealDistribution kernel = k ( x ) ;', 'return pBminus + pB ;', '}', 'final RealDistribution kernel = k ( x ) ;', 'if ( kernel instanceof ConstantRealDistribution ) {']","['final RealDistribution kernel = k ( x ) ;', 'return pBminus + pB ;', '}', 'final RealDistribution kernel = k ( x ) ;', 'if ( kernel instanceof ConstantRealDistribution ) {']","['@ Override', '@ Override']","['final double d1Low = d - d1High ;', 'return ( d < 0 & & ( e & 0x1 ) = = 1 ) ? Double . NEGATIVE INFINITY : Double . POSITIVE INFINITY ;', 'final double d1High = cd - ( cd - d ) ;', '} else {', 'final double cTmpH = splitFactor * tmpHigh ;', 'if ( Double . isNaN ( d ) ) {', 'final int splitFactor = 0x8000001 ;', 'return result ;', 'final double cRH = splitFactor * resultHigh ;', 'final double d1High = Double . longBitsToDouble ( Double . doubleToRawLongBits ( d ) & ( ( - 1L ) < < 27 ) ) ;']","['}', '} else if ( x = = Double . NEGATIVE INFINITY ) {', 'if ( x = = Double . NEGATIVE INFINITY ) {', '} else if ( y = = Double . NEGATIVE INFINITY ) {', 'if ( y = = Double . NEGATIVE INFINITY ) {', '} else if ( y = = Double . POSITIVE INFINITY ) {', 'if ( x < 0 ) {', '} else if ( x = = 0 ) {', 'if ( y = = Double . POSITIVE INFINITY ) {', '} else if ( x = = Double . POSITIVE INFINITY ) {']","['if ( ( bits & 0x8000000000000000L ) ! = 0 ) {', 'for ( long p = e ; p ! = 0 ; p > > = 1 ) {', 'if ( y > 0 ) {', 'final long l = yFullMantissa < < ( yRawExp - 1075 ) ;', 'if ( y = = 0 . 0 ) {', 'final double lores = log ( x , lns ) ;', 'double d2pLow = d1Low ;', 'return Double . POSITIVE INFINITY ;', 'double resultHigh = 1 ;', 'private static class Split {']","['if ( !values . add ( x [ i ] ) ) {', 'int k = 0 ;', 'final double [ ] mSet = new double [ m ] ;', 'for ( int i = 0 ; i < n + m ; i + + ) {', 'if ( j < n & & nSetI [ j ] = = i ) {', 'final double [ ] universe = new double [ n + m ] ;', 'while ( combinationsIterator . hasNext ( ) ) {', 'final int m = y . length ;', 'return false ;', 'for ( int i = 0 ; i < x . length ; i + + ) {']","['return exactP ( kolmogorovSmirnovStatistic ( x , y ) , x . length , y . length , strict ) ;', 'if ( curD > d | | ( curD = = d & & !strict ) ) {', 'final double cdf m = rankM / ( double ) mm ;', 'final long d = integralKolmogorovSmirnovStatistic ( x , y ) ;', 'final double cdf y = rankY / ( double ) m ;', 'final long curD = integralKolmogorovSmirnovStatistic ( nSet , mSet ) ;', 'final double d = kolmogorovSmirnovStatistic ( x , y ) ;', 'if ( strict & & lowerBound = = upperBound ) {', 'double supD = 0d ;', 'curD - = nn ;']","['return exactP ( kolmogorovSmirnovStatistic ( x , y ) , x . length , y . length , strict ) ;', 'int k = 0 ;', 'final double cdf m = rankM / ( double ) mm ;', 'final double [ ] mSet = new double [ m ] ;', 'final double cdf y = rankY / ( double ) m ;', 'for ( int i = 0 ; i < n + m ; i + + ) {', 'double supD = 0d ;', 'if ( j < n & & nSetI [ j ] = = i ) {', 'final double tol = 1e - 12 ;', 'if ( curD > d | | ( curD = = d & & !strict ) ) {']","['return integralMonteCarloP ( integralKolmogorovSmirnovStatistic ( x , y ) + ( ( strict ) ? 1l : 0l ) , x . length , y . length , MONTE CARLO ITERATIONS ) ;', 'return integralMonteCarloP ( integralKolmogorovSmirnovStatistic ( x , y ) + ( strict ? 1l : 0l ) , x . length , y . length , MONTE CARLO ITERATIONS ) ;', 'return integralExactP ( integralKolmogorovSmirnovStatistic ( x , y ) + ( ( strict ) ? 1l : 0l ) , x . length , y . length ) ;', 'return integralExactP ( integralKolmogorovSmirnovStatistic ( x , y ) + ( strict ? 1l : 0l ) , x . length , y . length ) ;']","['return integralMonteCarloP ( integralKolmogorovSmirnovStatistic ( x , y ) + ( ( strict ) ? 1l : 0l ) , x . length , y . length , MONTE CARLO ITERATIONS ) ;', 'return integralMonteCarloP ( integralKolmogorovSmirnovStatistic ( x , y ) + ( strict ? 1l : 0l ) , x . length , y . length , MONTE CARLO ITERATIONS ) ;', 'return integralExactP ( integralKolmogorovSmirnovStatistic ( x , y ) + ( ( strict ) ? 1l : 0l ) , x . length , y . length ) ;', 'return integralExactP ( integralKolmogorovSmirnovStatistic ( x , y ) + ( strict ? 1l : 0l ) , x . length , y . length ) ;']","['public TranslationTransform ( final Vector3D translation ) {', 'FacetsContributionVisitor ( ) {', 'public RotationTransform ( final Vector3D center , final Rotation rotation ) {', 'TranslationTransform ( final Vector3D translation ) {', 'public FacetsContributionVisitor ( ) {', 'RotationTransform ( final Vector3D center , final Rotation rotation ) {']","['return integralMonteCarloP ( integralKolmogorovSmirnovStatistic ( x , y ) + ( strict ? 1l : 0l ) , x . length , y . length , MONTE CARLO ITERATIONS ) ;', '} while ( ties & & ct < 1000 ) ;', 'return integralExactP ( integralKolmogorovSmirnovStatistic ( x , y ) + ( strict ? 1l : 0l ) , x . length , y . length ) ;', 'final double [ ] values = MathArrays . unique ( MathArrays . concatenate ( x , y ) ) ;', 'HashSet < Double > values = new HashSet < Double > ( ) ;', 'double prev = values [ 0 ] ;', 'private boolean hasTies ( double [ ] x , double [ ] y ) {', 'delta = prev - values [ i ] ;', 'if ( values . length = = x . length + y . length ) {', 'double minDelta = 1 ;']","['import org . apache . commons . math4 . random . JDKRandomGenerator ;', 'final RealDistribution . Sampler sampler =', 'data [ i ] + = dist . sample ( ) ;', 'jitter ( x , sampler ) ;', 'public KolmogorovSmirnovTest ( RandomGenerator rng ) {', 'new UniformRealDistribution ( - minDelta , minDelta ) . createSampler ( RandomSource . create ( RandomSource . JDK , 100 ) ) ;', 'final EnumeratedRealDistribution dist = new EnumeratedRealDistribution ( rng , combined ) ;', 'data [ i ] + = d ;', 'new UniformRealDistribution ( new JDKRandomGenerator ( 100 ) , - minDelta , minDelta ) ;', 'final double d = sampler . sample ( ) ;']","['final RealDistribution . Sampler sampler =', 'jitter ( x , rng , minDelta ) ;', 'import org . apache . commons . math4 . distribution . UniformRealDistribution ;', 'private static void jitter ( final double [ ] data , final UniformRandomProvider rng , final double delta ) {', 'new UniformRealDistribution ( - minDelta , minDelta ) . createSampler ( RandomSource . create ( RandomSource . JDK , 100 ) ) ;', 'final double d = delta * ( 2 * rng . nextDouble ( ) - 1 ) ;', 'jitter ( x , sampler ) ;', 'jitter ( y , rng , minDelta ) ;', 'final double d = sampler . sample ( ) ;', 'minDelta * = 2 ;']","['throw new MathInternalError ( ) ;', 'minDelta * = 2 ;', 'minDelta * = 2 ;', 'throw new MathInternalError ( ) ;']","['UniformRandomProvider rng = RandomSource . create ( RandomSource . JDK , 100 ) ;', 'final UniformRandomProvider rng = RandomSource . create ( RandomSource . TWO CMRES , 654321 ) ;']","['import org . apache . commons . math4 . geometry . euclidean . oned . Coordinates1D ;', 'setBarycenter ( ( Point < Euclidean2D > ) new Cartesian2D ( 0 , 0 ) ) ;', 'double x = segment . getLine ( ) . toSubSpace ( ( Point < Euclidean2D > ) segment . getEnd ( ) ) . getX ( ) ;', 'setBarycenter ( ( Point < Euclidean2D > ) new Cartesian2D ( sumX / ( 3 * sum ) , sumY / ( 3 * sum ) ) ) ;', 'private Coordinates2D [ ] [ ] vertices ;', 'private BSPTree < Euclidean2D > selectClosest ( final Cartesian2D point , final Iterable < BSPTree < Euclidean2D > > candidates ) {', 'array [ j + + ] = segment . getLine ( ) . toSpace ( ( Point < Euclidean1D > ) new Coordinates1D ( x ) ) ;', 'final Cartesian2D maxMin = new Cartesian2D ( xMax , yMin ) ;', 'private BSPTree < Euclidean2D > selectClosest ( final Coordinates2D point , final Iterable < BSPTree < Euclidean2D > > candidates ) {', 'null : line . toSpace ( new Cartesian1D ( i . getInf ( ) ) ) ;']","['ret + = c [ i ] * ArithmeticUtils . pow ( n , ( long ) i ) ;', 'ret + = c [ i ] * ArithmeticUtils . pow ( n , i ) ;']","['import org . apache . commons . math3 . exception . util . Localizable ;', 'extends MathIllegalArgumentException {', 'super ( pattern , arguments ) ;', '}', 'public class InsufficientDataException', 'package org . apache . commons . math3 . exception ;', 'this ( LocalizedFormats . INSUFFICIENT DATA ) ;', 'public InsufficientDataException ( Localizable pattern , Object . . . arguments ) {', 'private static final long serialVersionUID = - 2629324471511903359L ;', 'import org . apache . commons . math3 . exception . util . LocalizedFormats ;']","['import org . apache . commons . math3 . exception . NumberIsTooSmallException ;', 'throw new InsufficientDataException ( LocalizedFormats . INSUFFICIENT OBSERVED POINTS IN SAMPLE , nobs , nvars + 1 ) ;', 'throw new NumberIsTooSmallException ( nobs , nvars , false ) ;', 'import org . apache . commons . math3 . exception . InsufficientDataException ;']","['ArithmeticUtils . pow ( 21 , - 7l ) ;', 'Assert . assertEquals ( 1801088541 , ArithmeticUtils . pow ( 21 , 7 ) ) ;', 'Assert . assertEquals ( 1 , ArithmeticUtils . pow ( 21 , 0l ) ) ;', 'ArithmeticUtils . pow ( 21 , - 7 ) ;', 'Assert . assertEquals ( 1801088541 , ArithmeticUtils . pow ( 21 , 7l ) ) ;', 'Assert . assertEquals ( 1 , ArithmeticUtils . pow ( 21 , 0 ) ) ;']","['checkArray ( ""compare vectors"" , result mapMultiply , v mapMultiply . getData ( ) ) ;', 'checkArray ( ""compare vectors"" , result mapMultiplyToSelf , v mapMultiplyToSelf . toArray ( ) ) ;', 'checkArray ( ""compare vectors"" , result mapMultiplyToSelf , v mapMultiplyToSelf . getData ( ) ) ;', 'checkArray ( ""compare vect"" , v ebeDivide 2 . toArray ( ) , result ebeDivide 2 ) ;', 'checkArray ( ""compare vectors"" , result mapDivide , v mapDivide . getData ( ) ) ;', 'checkArray ( ""compare vect"" , v projection 2 . toArray ( ) , result projection 2 ) ;', 'checkArray ( ""compare vectors"" , result mapInvToSelf , v mapInvToSelf . getData ( ) ) ;', 'checkArray ( ""compare vectors"" , result mapMultiply , v mapMultiply . toArray ( ) ) ;', 'throw unsupported ( ) ;', 'checkArray ( ""compare vectors"" , result mapSubtractToSelf , v mapSubtractToSelf . toArray ( ) ) ;']","['varianceSum + = stat . getResult ( ) ;', 'final ClusterEvaluator < T > evaluator ) {', 'stat . increment ( distance ( point , center ) ) ;', 'public MultiKMeansPlusPlusClusterer ( final KMeansPlusPlusClusterer < T > clusterer ,', 'final Variance stat = new Variance ( ) ;', 'this . evaluator = evaluator ;', 'for ( final T point : cluster . getPoints ( ) ) {', 'final double varianceSum = evaluator . score ( clusters ) ;', 'double varianceSum = 0 . 0 ;', 'import org . apache . commons . math3 . ml . clustering . evaluation . SumOfClusterVariances ;']","['for ( OptimizationData data : optData ) {', 'continue ;', 'solutionCallback = null ;', 'private SolutionCallback solutionCallback ;', 'import org . apache . commons . math3 . optim . OptimizationData ;', 'protected void parseOptimizationData ( OptimizationData . . . optData ) {', '}', 'public PointValuePair optimize ( OptimizationData . . . optData )', 'solutionCallback = ( SolutionCallback ) data ;', 'return super . optimize ( optData ) ;']","['private static final PolynomialFunction . Parametric FUNCTION = new PolynomialFunction . Parametric ( ) ;', 'private final int maxIter ;', 'target [ i ] = obs . getY ( ) ;', 'final double [ ] weights = new double [ len ] ;', 'weights [ i ] = obs . getWeight ( ) ;', 'final AbstractCurveFitter . TheoreticalValuesFunction model', 'this . initialGuess = initialGuess ;', '. withTarget ( target )', 'import org . apache . commons . math3 . linear . DiagonalMatrix ;', 'return new PolynomialCurveFitter ( new double [ degree + 1 ] , Integer . MAX VALUE ) ;']","['} else if ( x > ( a + 1 . 0 ) / ( a + b + 2 . 0 ) ) {', 'b < = 0 ) {', 'a < = 0 . 0 | |', '1 - x < = ( b + 1 ) / ( 2 + b + a ) ) {', 'ret = 1 . 0 - regularizedBeta ( 1 . 0 - x , b , a , epsilon , maxIterations ) ;', 'a < = 0 | |', 'b < = 0 . 0 ) {', '} else if ( x > ( a + 1 ) / ( 2 + b + a ) & &', 'ret = 1 - regularizedBeta ( 1 - x , b , a , epsilon , maxIterations ) ;', 'try {']","['final double gn = factor1 * Math . log ( qExp1 ) * oneOverN ;', 'final double gn = factor1 * FastMath . log ( qExp1 ) * oneOverN ;', 'lower = ( ( int ) Math . ceil ( tmp ) ) - 1 ;', 'upper = ( ( int ) FastMath . ceil ( tmp ) ) - 1 ;', 'upper = ( ( int ) Math . ceil ( tmp ) ) - 1 ;', 'lower = ( ( int ) FastMath . ceil ( tmp ) ) - 1 ;', 'return 1 - 2 * Math . pow ( 1 - d , n ) ;', 'int k = ( int ) FastMath . ceil ( n * d ) ;', 'final int k = ( int ) Math . ceil ( n * d ) ;', 'final int k = ( int ) FastMath . ceil ( n * d ) ;']","['. floor ( unscaled ) / 2 . 0 ) ) {', 'unscaled = FastMath . ceil ( FastMath . nextAfter ( unscaled , Double . POSITIVE INFINITY ) ) ;', 'unscaled = FastMath . ceil ( FastMath . nextAfter ( unscaled , Double . POSITIVE INFINITY ) ) ;', 'if ( unscaled ! = FastMath . floor ( unscaled ) ) {', 'if ( FastMath . floor ( unscaled ) / 2 . 0 = = FastMath . floor ( Math', 'if ( FastMath . floor ( unscaled ) / 2 . 0 = = FastMath . floor ( FastMath . floor ( unscaled ) / 2 . 0 ) ) {', '}', 'Assert . assertEquals ( 0 . 06f , Precision . round ( 0 . 0505f , 2 , BigDecimal . ROUND UP ) , 0 . 0f ) ;', 'Assert . assertEquals ( 0 . 06f , Precision . round ( 0 . 059f , 2 , BigDecimal . ROUND UP ) , 0 . 0f ) ;', 'Assert . assertEquals ( 0 . 06f , Precision . round ( 0 . 051f , 2 , BigDecimal . ROUND UP ) , 0 . 0f ) ;']","['int consecutiveXTies = 1 ;', 'long consecutiveYTies = 1 ;', 'tiedXPairs + = consecutiveXTies * ( consecutiveXTies - 1 ) / 2 ;', 'tiedYPairs + = sum ( consecutiveYTies - 1 ) ;', 'tiedYPairs + = consecutiveYTies * ( consecutiveYTies - 1 ) / 2 ;', 'tiedXPairs + = sum ( consecutiveXTies - 1 ) ;', 'int consecutiveYTies = 1 ;', 'tiedXYPairs + = sum ( consecutiveXYTies - 1 ) ;', 'int tiedXPairs = 0 ;', 'long tiedXPairs = 0 ;']","['return true ;', 'public static final double CROSSOVER RATE = 0 . 9 ;', 'public String toString ( ) {', 'public StringChromosome newFixedLengthChromosome ( List < Character > repr ) {', 'int generation = 0 ;', 'public StringChromosome ( String str ) {', 'import org . apache . commons . math3 . genetics . StoppingCondition ;', 'super ( repr ) ;', '@ Override', 'import java . util . Arrays ;']","['return ( ( Double ) this . getFitness ( ) ) . compareTo ( another . getFitness ( ) ) ;', 'return Double . compare ( getFitness ( ) , another . getFitness ( ) ) ;']","['bar . add ( painter ) ;', 'import java . awt . event . ActionListener ;', 'painter = new ImagePainter ( ref ) ;', 'bestFit = currentPopulation . getFittestChromosome ( ) ;', '@ Override', 'import org . apache . commons . math3 . genetics . TournamentSelection ;', 'for ( int i = 0 ; i < POPULATION SIZE ; i + + ) {', 'currentPopulation = getInitialPopulation ( ) ;', 'chromosome . draw ( ( Graphics2D ) g , ref . getWidth ( ) , ref . getHeight ( ) ) ;', 'internalThread = null ;']","['bar . add ( painter ) ;', 'bar . add ( painter ) ;', 'painter = new ImagePainter ( ref ) ;', 'setTitle ( ""Commons - Math : Image Evolution Example"" ) ;', 'bestFit = currentPopulation . getFittestChromosome ( ) ;', 'setSize ( 600 , 400 ) ;', '@ Override', 'return new Dimension ( width , height ) ;', 'for ( int i = 0 ; i < POPULATION SIZE ; i + + ) {', 'bestFit = currentPopulation . getFittestChromosome ( ) ;']","['public static final int TOURNAMENT ARITY = 2 ;', 'public static final int POPULATION SIZE = 40 ;', 'public static final int POPULATION SIZE = 50 ;', 'public static final int TOURNAMENT ARITY = 5 ;', '/ /', 'if ( idx + + % 4 ! = 0 ) {', 'if ( idx + + % 4 ! = 0 ) {']","['x . printStackTrace ( ) ;', 'int evolution = 0 ;', 'double lastBestFit = Double . MIN VALUE ;', 'painter . repaint ( ) ;', 'try {', 'System . out . println ( ""generation : "" + evolution + + + "" : "" + bestFit . toString ( ) ) ;', 'int evolution = 0 ;', 'while ( noStopRequested ) {', '}', 'bestFit = currentPopulation . getFittestChromosome ( ) ;']","['this . representation = Collections . unmodifiableList ( new ArrayList < T > ( representation ) ) ;', 'this . representation = Collections . unmodifiableList ( new ArrayList < T > ( representation ) ) ;', 'ArrayList < T > tmp = c1 ;', 'List < T > tmp = c1 ;', 'ArrayList < T > c1 = child1Rep ;', 'List < T > c1 = child1Rep ;', 'final ArrayList < T > child1Rep = new ArrayList < T > ( first . getLength ( ) ) ;', 'final List < T > child1Rep = new ArrayList < T > ( first . getLength ( ) ) ;', 'final ArrayList < T > child2Rep = new ArrayList < T > ( second . getLength ( ) ) ;', 'final List < T > child2Rep = new ArrayList < T > ( second . getLength ( ) ) ;']","['final List < T > child1Rep = new ArrayList < T > ( first . getLength ( ) ) ;', 'final List < T > child1Rep = new ArrayList < T > ( length ) ;', 'final List < T > child2Rep = new ArrayList < T > ( second . getLength ( ) ) ;', 'final List < T > child2Rep = new ArrayList < T > ( length ) ;', 'final List < T > child1Rep = new ArrayList < T > ( first . getLength ( ) ) ;', 'final List < T > child1Rep = new ArrayList < T > ( length ) ;', 'final List < T > child2Rep = new ArrayList < T > ( second . getLength ( ) ) ;', 'final List < T > child2Rep = new ArrayList < T > ( length ) ;', 'final List < T > child1Rep = new ArrayList < T > ( first . getLength ( ) ) ;', 'final List < T > child1Rep = new ArrayList < T > ( length ) ;']","['Dantzig ,', 'BLAND', 'Bland', 'DANTZIG ,', 'this . pivotSelection = PivotSelectionRule . Dantzig ;', 'if ( pivotSelection = = PivotSelectionRule . BLAND & & isValidPivotColumn ( tableau , i ) ) {', 'if ( pivotSelection = = PivotSelectionRule . Bland & & isValidPivotColumn ( tableau , i ) ) {', 'this . pivotSelection = PivotSelectionRule . DANTZIG ;', 'PointValuePair solution = new SimplexSolver ( ) . optimize ( DEFAULT MAX ITER , f , new LinearConstraintSet ( constraints ) ,', 'PivotSelectionRule . BLAND ) ;']","['private final Set < LinearConstraint > linearConstraints', 'import java . util . LinkedHashSet ;', '= new HashSet < LinearConstraint > ( ) ;', 'private final Set < LinearConstraint > linearConstraints = new LinkedHashSet < LinearConstraint > ( ) ;', 'import java . util . HashSet ;', 'public Collection < LinearConstraint > getConstraints ( ) {', 'solver . optimize ( new MaxIter ( 112 ) , f , new LinearConstraintSet ( constraints ) ,', 'public class DeterministicLinearConstraintSet extends LinearConstraintSet {', 'Assert . fail ( ""expected TooManyIterationsException"" ) ;', 'public DeterministicLinearConstraintSet ( LinearConstraint . . . constraints ) {']","['minIndex = i ;', 'tableau . performRowOperations ( pivotCol , pivotRow ) ;', 'tableau . subtractRow ( i , pivotRow , multiplier ) ;', 'minIndex = basicVar ;', 'final double multiplier = tableau . getEntry ( i , pivotCol ) ;', 'if ( basicVar < minIndex ) {', 'if ( i ! = pivotRow ) {', 'minRatioPositions . clear ( ) ;', 'for ( int i = varStart ; i < varEnd & & !row . equals ( minRow ) ; i + + ) {', 'minRow = row ;']","['} else if ( Precision . compareTo ( entry , 0d , maxUlps ) > 0 ) {', 'final double ratio = FastMath . abs ( rhs / entry ) ;', 'if ( FastMath . abs ( entry ) < cutOff ) {', 'final PointValuePair solution = tableau . getSolution ( ) ;', 'tableau . setEntry ( i , col , 0 ) ;', '}', 'final double ratio = rhs / entry ;', 'if ( Precision . compareTo ( coeff [ i ] , 0 , epsilon ) < 0 ) {', 'return tableau . getSolution ( ) ;', 'if ( Precision . compareTo ( entry , 0d , cutOff ) > 0 ) {']","['basicRows . add ( basicRow ) ;', '} else if ( usedBasicRows . contains ( basicRow ) ) {', 'final Set < Integer > basicRows = new HashSet < Integer > ( ) ;', 'usedBasicRows . add ( basicRow ) ;', '} else if ( basicRows . contains ( basicRow ) ) {', 'final Set < Integer > usedBasicRows = new HashSet < Integer > ( ) ;']","['Space getSpace ( ) ;', '}', 'boolean isNaN ( ) ;', 'import java . io . Serializable ;', 'public interface Point < S extends Space > extends Serializable {', 'package org . apache . commons . math3 . geometry ;', 'boolean isNaN ( ) ;', 'public interface Vector < S extends Space > extends Point < S > {', 'public interface Vector < S extends Space > extends Serializable {', 'Space getSpace ( ) ;']","['private void recurseCloseCuts ( final Point < S > point , final double maxOffset ,', '} else if ( offset > maxOffset ) {', 'import java . util . ArrayList ;', 'if ( cut ! = null ) {', 'return close ;', 'final List < BSPTree < S > > close = new ArrayList < BSPTree < S > > ( ) ;', 'public List < BSPTree < S > > getCloseCuts ( final Point < S > point , final double maxOffset ) {', 'recurseCloseCuts ( point , maxOffset , close ) ;', '}', 'plus . recurseCloseCuts ( point , maxOffset , close ) ;']","['return Location . BOUNDARY ;', 'this . upper = MathUtils . TWO PI + lower ;', 'this . upper = 2 * FastMath . PI + lower ;', 'return ( getSize ( ) > = MathUtils . TWO PI - tolerance ) ? Location . INSIDE : Location . BOUNDARY ;', 'recurseList ( node . getMinus ( ) , list , lower , cutStart ) ;', 'for ( int i = 0 ; i < limits . size ( ) ; i + = 2 ) {', 'if ( highList . get ( 0 ) . checkPoint ( cutEnd , tolerance ) = = Location . INSIDE ) {', 'if ( checkPoint ( new S1Point ( chord . getStart ( ) ) ) = = Location . BOUNDARY ) {', 'recurseList ( getTree ( false ) , list , 0 , 2 * FastMath . PI ) ;', 'list . add ( new Arc ( 0 . 0 , 0 . 0 ) ) ;']","['public boolean isEmpty ( ) {', 'return false ;', '}', 'node . setAttribute ( ( node = = node . getParent ( ) . getPlus ( ) ) ?', '}', 'Boolean . FALSE : Boolean . TRUE ) ;', '} else {', 'if ( node . getParent ( ) = = null | | node = = node . getParent ( ) . getMinus ( ) ) {', 'node . setAttribute ( Boolean . TRUE ) ;', 'node . setAttribute ( Boolean . FALSE ) ;']","['internal = node ;', 'return true ;', 'return findLargest ( nextDeeper ) ;', 'return node ;', '}', 'if ( childBefore ( node ) . getCut ( ) ! = null ) {', 'return ( LimitAngle ) node . getCut ( ) . getHyperplane ( ) ;', 'return leafAfter ( node ) . getParent ( ) ;', 'if ( ( ( LimitAngle ) parent . getCut ( ) . getHyperplane ( ) ) . isDirect ( ) ) {', '}']","['list . add ( new Arc ( 0 . 0 , 0 . 0 , tolerance ) ) ;', 'list . add ( new Arc ( 0 . 0 , 0 . 0 , tolerance ) ) ;', 'for ( int i = 0 ; i < limits . size ( ) ; i + = 2 ) {', 'list . add ( new Arc ( getAngle ( start ) , getAngle ( end ) + MathUtils . TWO PI , tolerance ) ) ;', '}', 'private double getAngle ( final BSPTree < Sphere1D > node ) {', 'Collections . sort ( limits ) ;', 'BSPTree < Sphere1D > start = firstStart ;', 'this . limits = new ArrayList < Double > ( ) ;', 'throw new MathInternalError ( ) ;']",['@ Deprecated'],"['return FastMath . abs ( getOffset ( p ) ) < 1 . 0e - 10 ;', '}', 'public boolean contains ( final Point < Sphere2D > p ) {']","['for ( double alpha = 0 ; alpha < MathUtils . TWO PI ; alpha + = 0 . 1 ) {', 'SubLimitAngle sub = new LimitAngle ( new S1Point ( MathUtils . TWO PI * random . nextDouble ( ) ) ,', 'SubLimitAngle tsub = ( SubLimitAngle ) t . apply ( sub , c , tc ) ;', 'Assert . assertEquals ( - 0 . 5 * FastMath . PI , circle . getOffset ( new S2Point ( Vector3D . PLUS K ) ) , 1 . 0e - 10 ) ;', 'public void testReverse ( ) {', 'import org . apache . commons . math3 . random . RandomGenerator ;', 'import org . apache . commons . math3 . random . Well1024a ;', 'Assert . assertFalse ( circle . sameOrientationAs ( reversed ) ) ;', 'for ( int i = 0 ; i < 100 ; + + i ) {', 'Assert . assertEquals ( Vector3D . PLUS K , circle . getPole ( ) ) ;']","['return buildNew ( hyperplane , remainingRegion ) ;', 'return buildNew ( hyperplane . copySelf ( ) , remainingRegion ) ;']","['@ Deprecated', '@ Deprecated', '@ Deprecated', '@ Deprecated', '@ Deprecated', '@ Deprecated', '@ Deprecated', 'Assert . assertEquals ( Region . Location . OUTSIDE , set . checkPoint ( ( Point < Euclidean1D > ) new Vector1D ( 0 . 0 ) ) ) ;', 'Assert . assertEquals ( Region . Location . OUTSIDE , set . checkPoint ( new Vector1D ( 0 . 0 ) ) ) ;', 'Assert . assertEquals ( Region . Location . BOUNDARY , set . checkPoint ( ( Point < Euclidean1D > ) new Vector1D ( 5 . 7 ) ) ) ;']","['/ /', 'this ( boundary , DEFAULT TOLERANCE ) ;', '>', 'public IntervalsSet ( final double lower , final double upper ) {', '* /', '@ Deprecated', 'public IntervalsSet ( ) {', '}', 'this ( DEFAULT TOLERANCE ) ;', 'this ( lower , upper , DEFAULT TOLERANCE ) ;']","['final Edge eStartOut = new Edge ( start , vEnter , arcRelativeStart , circle ) ;', 'list . add ( edge ) ;', 'final Edge eStartIn = new Edge ( start , vExit , arcRelativeEnd , circle ) ;', 'edge . setNode ( node ) ;', 'if ( arcRelativeStart < length ) {', 'subEnd . bindWith ( splitCircle ) ;', '}', 'alreadyManagedLength = unwrappedEnd ;', 'insideList . add ( eStartIn ) ;', '}']","['edge . getEnd ( ) ! = startVertex ;', 'n = = 0 | | edge . getStart ( ) ! = startVertex ;', 'boolean zFound = false ;', 'int count = 1 ;', 'boolean yFound = false ;', '}', 'Assert . assertTrue ( xFound ) ;', 'xFound = first . getLocation ( ) . getVector ( ) . distance ( Vector3D . PLUS I ) < 1 . 0e - 10 ;', 'xFound = xFound | | v . getLocation ( ) . getVector ( ) . distance ( Vector3D . PLUS I ) < 1 . 0e - 10 ;', 'Assert . assertEquals ( 0 . 5 * FastMath . PI , octant . getSize ( ) , 1 . 0e - 10 ) ;']","['edge . getEnd ( ) . getOutgoing ( ) . getCircle ( ) . getPole ( ) ) ;', 'final Vector3D point = edge . getEnd ( ) . getLocation ( ) . getVector ( ) ;', 'sum + = Vector3D . angle ( edge . getCircle ( ) . getPole ( ) ,', 'final Vector3D nextPole = edge . getEnd ( ) . getOutgoing ( ) . getCircle ( ) . getPole ( ) ;', 'sum + = alpha ;', '}', 'alpha + = MathUtils . TWO PI ;', 'double alpha = FastMath . atan2 ( Vector3D . dotProduct ( nextPole , Vector3D . crossProduct ( point , previousPole ) ) ,', '- Vector3D . dotProduct ( nextPole , previousPole ) ) ;', 'if ( alpha < 0 ) {']","['this . tolerance = tolerance ;', 'import java . util . IdentityHashMap ;', 'return node ;', 'this . tolerance = tolerance ;', 'selected = node ;', '}', 'edge . setNode ( node ) ;', 'this . edgeToNode = new IdentityHashMap < Edge , BSPTree < Sphere2D > > ( ) ;', 'return edge ;', 'edge = edge . getEnd ( ) . getOutgoing ( ) ;']","['package org . apache . commons . math3 . geometry . spherical . oned ;', 'Assert . assertEquals ( MathUtils . TWO PI , l . getReverse ( ) . wholeSpace ( ) . getSize ( ) , 1 . 0e - 10 ) ;', 'Assert . assertFalse ( l . sameOrientationAs ( l . getReverse ( ) ) ) ;', 'public void testReversedLimit ( ) {', 'import org . junit . Assert ;', '@ Test', 'for ( int k = - 2 ; k < 3 ; + + k ) {', 'Assert . assertEquals ( l . getTolerance ( ) , l . getReverse ( ) . getTolerance ( ) , 1 . 0e - 10 ) ;', 'public class LimitAngleTest {', 'import org . apache . commons . math3 . util . MathUtils ;']","['this . x = newPole . orthogonal ( ) ;', 'this . y = Vector3D . crossProduct ( newPole , x ) . normalize ( ) ;', 'this . y = Vector3D . crossProduct ( newPole , x ) . normalize ( ) ;', 'this . pole = newPole . normalize ( ) ;', 'this . pole = newPole . normalize ( ) ;', 'this . x = newPole . orthogonal ( ) ;', 'final double arcRelativeStart = MathUtils . normalizeAngle ( circle . getInsideArc ( splitCircle ) . getInf ( ) ,', 'final double arcRelativeStart = MathUtils . normalizeAngle ( arc . getInf ( ) , edgeStart + FastMath . PI ) - edgeStart ;', 'final double unwrappedEnd = arcRelativeStart - FastMath . PI ;', 'final double arcRelativeEnd = arcRelativeStart + arc . getSize ( ) ;']","['final Object otherLeafsAttributes ,', 'if ( current = = current . parent . plus ) {', 'public BSPTree < S > pruneAroundConvexCell ( final Object cellAttribute ,', 'BSPTree < S > tree = new BSPTree < S > ( cellAttribute ) ;', 'final Object internalAttributes ) {', '} else {', 'tree = new BSPTree < S > ( parentCut , sibling , tree , internalAttributes ) ;', 'tree = new BSPTree < S > ( parentCut , tree , sibling , internalAttributes ) ;', '}', 'for ( BSPTree < S > current = this ; current . parent ! = null ; current = current . parent ) {']","['ga = f . value ( ta ) ;', 'ga = f . value ( ta ) ;', 'ta = forward ? ta + convergence : ta - convergence ;', 'do {', 'ta = forward ? ta + convergence : ta - convergence ;', '} while ( ( g0Positive ^ ( ga > = 0 ) ) & & ( forward ^ ( ta > = tb ) ) ) ;']","['return true ;', 'if ( !hasNext ( ) ) {', '}', 'throw new NoSuchElementException ( ) ;', 'return false ;', '}', 'if ( counter [ i ] ! = size [ i ] - 1 ) {', 'return count < maxCount ;', 'for ( int i = 0 ; i < dimension ; i + + ) {', 'import java . util . NoSuchElementException ;']","['return rounded = = 0 . 0 ? rounded * FastMath . copySign ( 1d , x ) : rounded ;', 'return rounded = = POSITIVE ZERO ? POSITIVE ZERO * x : rounded ;', 'private static final double POSITIVE ZERO = 0d ;']","['list . add ( new Interval ( lower , upper ) ) ;', 'return true ;', '}', 'return node ;', 'op . isDirect ( ) ? node . getMinus ( ) : node . getPlus ( ) ;', 'BSPTree < Euclidean1D > smallest = null ;', 'recurseList ( low , list , lower , x ) ;', 'if ( ( Boolean ) getFirstLeaf ( getTree ( false ) ) . getAttribute ( ) ) {', 'if ( ( checkPoint ( low , ( Point < Euclidean1D > ) loc ) = = Location . INSIDE ) & &', 'return leafBefore ( node ) . getParent ( ) ;']","['public BoundaryProjection < Euclidean1D > projectToBoundary ( final Point < Euclidean1D > point ) {', 'final double x = ( ( Vector1D ) point ) . getX ( ) ;', '}', 'import org . apache . commons . math3 . geometry . partitioning . BoundaryProjection ;', 'previous = a [ 1 ] ;', '} else {', 'return new BoundaryProjection < Euclidean1D > ( point , finiteOrNullPoint ( previous ) , x - previous ) ;', 'return new BoundaryProjection < Euclidean1D > ( point , finiteOrNullPoint ( a [ 0 ] ) , offset0 ) ;', 'if ( previousOffset < currentOffset ) {', '} else if ( x < = a [ 1 ] ) {']","['public Point < S > get0riginal ( ) {', 'public Point < S > getOriginal ( ) {', 'Assert . assertTrue ( projection . get0riginal ( ) = = v ) ;', 'Assert . assertTrue ( projection . getOriginal ( ) = = v ) ;']","['return tableau ! = null ? tableau . isOptimal ( ) : false ;', 'public boolean isSolutionOptimal ( ) {', '}', 'Assert . assertFalse ( callback . isSolutionOptimal ( ) ) ;', 'Assert . assertNull ( callback . getSolution ( ) ) ;']","['final double min ,', '}', 'public static FeatureInitializer uniform ( final RandomGenerator rng ,', 'import org . apache . commons . math3 . random . RandomGenerator ;', 'return randomize ( new UniformRealDistribution ( rng , min , max ) ,', 'final double max ) {', 'function ( new Constant ( 0 ) , 0 , 0 ) ) ;', 'final TravellingSalesmanSolver solver = new TravellingSalesmanSolver ( squareOfCities , 2 ) ;', 'final TravellingSalesmanSolver solver = new TravellingSalesmanSolver ( squareOfCities , 2 , seed ) ;', 'final long seed = 1245632379L ;']","['list . add ( edge ) ;', 'if ( unwrappedEnd > = 0 ) {', 'final double arcRelativeStart = MathUtils . normalizeAngle ( arc . getInf ( ) , edgeStart + FastMath . PI ) - edgeStart ;', 'subEnd . bindWith ( splitCircle ) ;', 'this . length = length ;', '}', 'alreadyManagedLength = unwrappedEnd ;', 'import org . apache . commons . math3 . geometry . spherical . oned . Arc ;', 'if ( unwrappedEnd > = length - tolerance ) {', 'public Vertex getStart ( ) {']","['this . representation = Collections . unmodifiableList ( new ArrayList < T > ( representation ) ) ;', 'Collections . unmodifiableList ( copyList ? new ArrayList < T > ( representation ) : representation ) ;', 'checkValidity ( representation ) ;', 'this ( representation , true ) ;', '}', 'this . representation =', 'public AbstractListChromosome ( final List < T > representation , final boolean copyList ) {', 'checkValidity ( representation ) ;']","['import org . apache . commons . math3 . exception . MathInternalError ;', 'throw new MathInternalError ( ) ;', '}', 'if ( ball . getRadius ( ) < savedBall . getRadius ( ) ) {', 'EnclosingBall < S , P > savedBall = ball ;', 'Assert . assertEquals ( refSupport . size ( ) , ball . getSupportSize ( ) ) ;', 'Assert . assertEquals ( expected . getRadius ( ) , disk . getRadius ( ) , 1 . 0e - 10 ) ;', 'checkBall ( list , Arrays . asList ( list . get ( 2 ) , list . get ( 3 ) ) ) ;', 'EnclosingBall < Euclidean2D , Vector2D > reducedDisk = generator . ballOnSupport ( reducedSupport ) ;', 'private void checkBall ( List < Vector2D > points , List < Vector2D > refSupport ) {']","['final RegionFactory < Euclidean2D > factory = new RegionFactory < Euclidean2D > ( ) ;', 'Vector2D lastPoint = null ;', 'private final Vector2D [ ] vertices ;', '}', 'this . lineSegments = new Line [ size ] ;', 'import org . apache . commons . math3 . geometry . euclidean . twod . Vector2D ;', 'this . lineSegments = new Line [ 0 ] ;', 'public Region < Euclidean2D > createRegion ( ) throws InsufficientDataException {', 'import java . io . Serializable ;', 'package org . apache . commons . math3 . geometry . euclidean . twod . hull ;']","['MaxCountExceededException , NonPositiveDefiniteOperatorException {', 'MaxCountExceededException {']","['EnclosingBall < S , P > enclose ( List < P > points ) ;', 'EnclosingBall < S , P > enclose ( Iterable < P > points ) ;', 'import java . util . List ;', 'for ( int i = 0 ; i < extreme . size ( ) ; + + i ) {', 'public P selectFarthest ( final Iterable < P > points , final EnclosingBall < S , P > ball ) {', 'public EnclosingBall < S , P > enclose ( final List < P > points ) {', 'if ( points = = null | | !points . iterator ( ) . hasNext ( ) ) {', 'if ( points = = null | | points . isEmpty ( ) ) {', 'ball = moveToFrontBall ( extreme , extreme . size ( ) , support ) ;', 'EnclosingBall < S , P > ball = moveToFrontBall ( extreme , support ) ;']","['support . add ( new Vector3D ( 1 . 0 , refCenter , refRadius , new Vector3D ( sr . nextVector ( ) ) ) ) ;', 'new Vector3D ( - 7 . 140453077221105 , - 16 . 570212820780647 , 11 . 708624578004980 ) ,', '}', '@ Test', '@ Ignore', 'WelzlEncloser < Euclidean3D , Vector3D > encloser =', 'boolean found = false ;', 'import java . io . PrintStream ;', 'points . add ( random . nextInt ( nbPoints ) , support . get ( 1 ) ) ;', '}']","['currentPoint = null ;', 'currentPoint = null ;', 'final int size = hull . size ( ) ;', 'hullVertices . add ( currentPoint ) ;', 'final Vector2D p2 = hull . get ( size - 1 ) ;', 'hullVertices . remove ( size - 1 ) ;', 'import org . apache . commons . math3 . util . Precision ;', 'final int size = hullVertices . size ( ) ;', 'final List < Vector2D > hull = new ArrayList < Vector2D > ( points . size ( ) ) ;', 'return new ConvexHull2D ( hullVertices , tolerance ) ;']","['if ( maxY = = null | | p . getY ( ) > maxY . getY ( ) ) {', 'return true ;', 'Vector2D p2 = quadrilateralPoints . get ( 1 ) ;', 'return reducedPoints ;', 'return quadrilateral ;', '}', 'if ( minY = = null | | p . getY ( ) < minY . getY ( ) ) {', 'if ( !insideQuadrilateral ( p , quadrilateral ) ) {', 'import org . apache . commons . math3 . geometry . euclidean . twod . Vector2D ;', 'Vector2D p1 = quadrilateralPoints . get ( 0 ) ;']","['double [ ] arr = point . toArray ( ) ;', 'Vector2D lastPoint = null ;', 'import java . awt . geom . Line2D ;', 'import org . apache . commons . math3 . random . RandomGenerator ;', 'public static List < Vector2D > createRandomPoints ( int size ) {', 'add ( new Plot ( cloud , hull ) ) ;', 'for ( int i = 0 ; i < size ; i + + ) {', '@ Override', 'import org . apache . commons . math3 . userguide . ExampleUtils ;', 'Vector2D p1 = transform ( point1 , width , height ) ;']","['List < P > extreme = new ArrayList < P > ( max ) ;', 'final List < P > support = new ArrayList < P > ( first . getSpace ( ) . getDimension ( ) + 1 ) ;', 'this . max = dimension + 1 ;', 'extreme . add ( first ) ;', 'final SupportBallGenerator < S , P > generator ) {', 'public WelzlEncloser ( final double tolerance , final SupportBallGenerator < S , P > generator ) {', 'private final int max ;', 'final List < P > extreme = new ArrayList < P > ( first . getSpace ( ) . getDimension ( ) + 1 ) ;', 'protected WelzlEncloser ( final double tolerance , final int dimension ,', 'final P first = points . iterator ( ) . next ( ) ;']","['public GrahamScan2D ( ) {', 'public GrahamScan ( ) {', 'public GrahamScan2D ( final double tolerance ) {', 'public class GrahamScan implements ConvexHullGenerator2D {', 'public class GrahamScan2D implements ConvexHullGenerator2D {', 'public GrahamScan ( final double tolerance ) {', 'return new GrahamScan2D ( ) ;', 'return new GrahamScan ( ) ;', 'import org . apache . commons . math3 . geometry . euclidean . twod . hull . GrahamScan2D ;', 'return new GrahamScan ( ) ;']","['points . add ( new Vector2D ( 2 , 4 ) ) ;', '@ Test', 'points . add ( new Vector2D ( 10 , 1 ) ) ;', '}', 'checkConvexHull ( points , hull ) ;', 'points . add ( new Vector2D ( 1 , 1 ) ) ;', 'final ConvexHull2D hull = generator . generate ( points ) ;', 'final Collection < Vector2D > points = new ArrayList < Vector2D > ( ) ;', 'public void testColinearPoints ( ) {', 'points . add ( new Vector2D ( 4 , 1 ) ) ;']","['public ConvexHull2D ( final Collection < Vector2D > vertices , final double tolerance ) {', 'ConvexHull2D ( final Collection < Vector2D > vertices , final double tolerance ) {']","['@ Override', '@ Override', '@ Override', '@ Override', '@ Override']","['GrahamScan generator = new GrahamScan ( ) ;', 'import org . apache . commons . math3 . geometry . euclidean . twod . hull . MonotoneChain ;', 'setTitle ( ""Commons - Math : Convex Hull examples"" ) ;', 'ConvexHullGenerator2D generator = new MonotoneChain ( ) ;', 'RandomGenerator random = new MersenneTwister ( 10 ) ;', 'RandomGenerator random = new MersenneTwister ( ) ;', 'import org . apache . commons . math3 . geometry . euclidean . twod . hull . GrahamScan ;', 'import org . apache . commons . math3 . geometry . euclidean . twod . hull . ConvexHullGenerator2D ;', 'setTitle ( ""Commons - Math : Convex Hull example"" ) ;', 'double [ ] arr = point . toArray ( ) ;']","['return MathArrays . linearCombination ( x1 , y1 , - x2 , y2 ) ;', 'final double y1 = getY ( ) - p1 . getY ( ) ;', 'final double y2 = p2 . getY ( ) - p1 . getY ( ) ;', 'final double x1 = p2 . getX ( ) - p1 . getX ( ) ;', '}', 'final double x2 = getX ( ) - p1 . getX ( ) ;', 'public double crossProduct ( final Vector2D p1 , final Vector2D p2 ) {', 'Vector2D p4 = new Vector2D ( 1 , 2 ) ;', 'package org . apache . commons . math3 . geometry . euclidean . twod ;', 'public class Vector2DTest {']","['final Vector2D linePoint1 ,', 'if ( last * point . crossProduct ( p1 , p2 ) < 0 ) {', 'return ( linePoint2 . getX ( ) - linePoint1 . getX ( ) ) * ( point . getY ( ) - linePoint1 . getY ( ) ) -', 'final double last = point . crossProduct ( p1 , p2 ) ;', 'final Vector2D linePoint2 ) {', 'private static double getLocation ( final Vector2D point ,', '}', '( point . getX ( ) - linePoint1 . getX ( ) ) * ( linePoint2 . getY ( ) - linePoint1 . getY ( ) ) ;', 'if ( last * getLocation ( point , p1 , p2 ) < 0 ) {', 'final double last = getLocation ( point , p1 , p2 ) ;']","['m12 , m01 , m20 , m10 , m21 , m02', 'final BigFraction dx = c2 [ 0 ] . subtract ( centerX ) ;', '} ) ;', 'final BigFraction m14 = minor ( c1 , c2 , c3 ) ;', 'vA . getX ( ) , vB . getX ( ) , vC . getX ( ) , vD . getX ( )', 'final BigFraction centerX = m12 . divide ( twoM11 ) ;', 'c1 [ 2 ] , c1 [ 1 ] , c1 [ 3 ] , - c1 [ 1 ] , - c1 [ 3 ] , - c1 [ 2 ] ,', 'c2 [ 1 ] . multiply ( c2 [ 1 ] ) . add ( c3 [ 1 ] . multiply ( c3 [ 1 ] ) ) . add ( c4 [ 1 ] . multiply ( c4 [ 1 ] ) ) ,', 'final double m12 = minor ( c1 , c3 , c4 ) ;', 'return new EnclosingBall < Euclidean3D , Vector3D > ( new Vector3D ( centerX . doubleValue ( ) ,']","['@ Override', '@ Override', '@ Override', '@ Override']","['return new EnclosingBall < Euclidean3D , Vector3D > ( Vector3D . ZERO , - 1 . 0 ) ;', 'return new EnclosingBall < Euclidean3D , Vector3D > ( Vector3D . ZERO , Double . NEGATIVE INFINITY ) ;', 'return new EnclosingBall < Euclidean2D , Vector2D > ( Vector2D . ZERO , - 1 . 0 ) ;', 'return new EnclosingBall < Euclidean2D , Vector2D > ( Vector2D . ZERO , Double . NEGATIVE INFINITY ) ;', 'u [ 0 ] . add ( v [ 0 ] ) ,', '}', 'public SphericalCapGenerator ( final Vector3D outside ) {', 'private BigFraction [ ] convert ( final Vector3D v ) {', 'private BigFraction [ ] add ( final BigFraction [ ] u , final BigFraction [ ] v ) {', 'return new EnclosingBall < Sphere2D , S2Point > ( new S2Point ( pole . negate ( ) ) ,']","['final double distanceToNext = pointOnHull . distance ( nextPoint ) ;', 'leftMost = p ;', '}', 'super ( includeCollinearPoints ) ;', '} else if ( location < 0 . 0 ) {', 'final Vector2D p = it . next ( ) ;', 'import org . apache . commons . math3 . geometry . euclidean . twod . Vector2D ;', 'if ( leftMost = = null | | p . getX ( ) < leftMost . getX ( ) ) {', 'if ( distanceToCurrent > distanceToNext ) {', 'if ( isIncludeCollinearPoints ( ) ) {']","['} while ( nextPoint ! = hullVertices . get ( 0 ) ) ;', '} while ( nextPoint ! = hullVertices . get ( 0 ) & & nextPoint ! = null ) ;', 'return true ;', '@ Test', 'if ( points . length < 3 ) {', '}', 'checkConvexHull ( points , hull ) ;', 'points . add ( new Vector2D ( 1 , 1 ) ) ;', 'final ConvexHull2D hull = generator . generate ( points ) ;', 'final Collection < Vector2D > points = new ArrayList < Vector2D > ( ) ;']","['import java . util . Iterator ;', 'protected abstract Collection < Vector2D > findHullVertices ( Collection < Vector2D > points ) ;', 'final Vector2D secondPoint = it . next ( ) ;', 'final Collection < Vector2D > hullVertices = findHullVertices ( points ) ;', '}', 'if ( points . size ( ) < 2 ) {', 'final int size = points . size ( ) ;', 'if ( size = = 2 ) {', 'protected AbstractConvexHullGenerator2D ( ) {', 'return new ConvexHull2D ( points , tolerance ) ;']","['ConvexHullGenerator2D generator = new MonotoneChain ( ) ;', 'ConvexHullGenerator2D generator = new MonotoneChain ( true ) ;']","['RealMatrix getInverse ( ) ;', 'RealMatrix getInverse ( ) throws SingularMatrixException ;', 'RealVector solve ( final RealVector b ) ;', 'RealMatrix solve ( final RealMatrix b ) throws SingularMatrixException ;', 'RealMatrix solve ( final RealMatrix b ) ;', 'RealVector solve ( final RealVector b ) throws SingularMatrixException ;', '@ Test', '{ 2 . 0 , 5 . 0 , 3 . 0 , 4 . 0 } ,', '{ - 0 . 0355022687 , 0 . 0512742236 , - 0 . 0001045523 , 0 . 0157719549 } ,', '} ) ;']","['private static final long serialVersionUID = 20140208L ;', 'private static final long serialVersionUID = 20140208L ;']","['x = sample . getKey ( ) ;', 'continue ;', 'if ( probability > = p ) {', 'break ;', 'public double inverseCumulativeProbability ( final double p ) throws OutOfRangeException {', 'if ( p < 0 . 0 | | p > 1 . 0 ) {', 'throw new OutOfRangeException ( p , 0 , 1 ) ;', 'if ( sample . getValue ( ) = = 0 . 0 ) {', '}', 'for ( final Pair < Double , Double > sample : innerDistribution . getPmf ( ) ) {']","['if ( node . getCut ( ) = = null ) {', 'return isFull ( node . getMinus ( ) ) & & isFull ( node . getPlus ( ) ) ;', 'public boolean isFull ( final BSPTree < S > node ) {', 'return ( Boolean ) node . getAttribute ( ) ;', '}', 'public boolean isFull ( ) {', 'return isFull ( tree ) ;', 'boolean isFull ( ) ;', 'boolean isFull ( final BSPTree < S > node ) ;', 'final Vector3D middle = e . getPointAt ( 0 . 5 * e . getLength ( ) ) ;']","['double [ ] arr = point . toArray ( ) ;', 'Vector2D lastPoint = null ;', 'import java . awt . geom . Line2D ;', 'import org . apache . commons . math3 . random . RandomGenerator ;', 'public static List < Vector2D > createRandomPoints ( int size ) {', 'add ( new Plot ( cloud , hull ) ) ;', 'for ( int i = 0 ; i < size ; i + + ) {', '@ Override', 'import org . apache . commons . math3 . userguide . ExampleUtils ;', 'Vector2D p1 = transform ( point1 , width , height ) ;']","['ConvexHull2D hull = generator . generate ( points ) ;', 'node . setPaint ( Color . gray ) ;', 'pointSet . addChild ( n1 ) ;', 'import org . piccolo2d . event . PMouseWheelZoomEventHandler ;', 'n1 . setPaint ( Color . gray ) ;', 'List < Vector2D > points = createRandomPoints ( 1000 ) ;', 'n1 . addAttribute ( ""tooltip"" , point ) ;', 'ConvexHull2D hull = generator . generate ( AklToussaintHeuristic . reducePoints ( points ) ) ;', 'final PNode n1 = PPath . createEllipse ( point . getX ( ) - 1 , point . getY ( ) - 1 , 2 , 2 ) ;', 'pointSet . addChild ( node ) ;']","['for ( Vector2D point : points ) {', 'node . setPickable ( false ) ;', 'ConvexHull2D hull = generator . generate ( AklToussaintHeuristic . reducePoints ( points ) ) ;', 'import java . awt . event . ActionListener ;', 'node . setPickable ( false ) ;', 'PNode hullNode = new PNode ( ) ;', 'super ( ""Geometry example"" , false , aCanvas ) ;', 'random . addActionListener ( new ActionListener ( ) {', 'PNode hullNode = new PNode ( ) ;', 'final PCanvas canvas = new PCanvas ( ) ;']","['this . summedBarycenter = Vector3D . ZERO ;', 'this . summedBarycenter = Vector3D . ZERO ;', 'this . summedArea = 0 ;', 'import java . util . ArrayList ;', 'this . tolerance = tolerance ;', 'this . tolerance = tolerance ;', 'convexCellsInsidePoints . add ( barycenter ) ;', 'this . summedArea = 0 ;', 'this . convexCellsInsidePoints = new ArrayList < Vector3D > ( ) ;', '}']","['Assert . assertEquals ( 317 , LocalizedFormats . values ( ) . length ) ;', 'Assert . assertEquals ( 318 , LocalizedFormats . values ( ) . length ) ;']","['protected abstract OPTIM getOptimizer ( Collection < WeightedObservedPoint > points ) ;', 'return getOptimizer ( ) . optimize ( getProblem ( points ) ) . getPoint ( ) ;', 'import org . apache . commons . math3 . optim . PointVectorValuePair ;', 'protected abstract LeastSquaresProblem getProblem ( Collection < WeightedObservedPoint > points ) ;', 'return getOptimizer ( points ) . optimize ( ) . getPoint ( ) ;', 'protected LeastSquaresOptimizer getOptimizer ( ) {', 'import org . apache . commons . math3 . optim . AbstractOptimizer ;', 'import org . apache . commons . math3 . fitting . leastsquares . LeastSquaresOptimizer ;', 'public abstract class AbstractCurveFitter < OPTIM extends AbstractOptimizer < PointVectorValuePair , OPTIM > > {', '}']","['return LevenbergMarquardtOptimizer . create ( ) ;', 'return new LevenbergMarquardtOptimizer ( ) ;', 'public GaussNewtonOptimizer ( boolean useLU ) {', 'public GaussNewtonOptimizer withLU ( final boolean useLU ) {', 'public static GaussNewtonOptimizer create ( ) {', 'public GaussNewtonOptimizer ( final boolean useLU ) {', 'private boolean useLU = true ;', 'return new GaussNewtonOptimizer ( useLU ) ;', 'return new GaussNewtonOptimizer ( ) ;', 'private final boolean useLU ;']","['observed ,', 'observed ,', 'maxEvaluations ,', 'maxEvaluations ,', 'maxIterations ,', 'maxIterations', 'checker ,', 'checker ,', 'start', 'start ,']","['model ,', 'final double [ ] observed ,', 'jacobian ,', '}', 'return new LeastSquaresProblemImpl (', 'final MultivariateVectorFunction value ,', 'import org . apache . commons . math3 . linear . Array2DRowRealMatrix ;', 'new ArrayRealVector ( value . value ( point ) , false ) ,', 'return new MultivariateJacobianFunction ( ) {', 'final double [ ] start ,']","['public LeastSquaresProblem build ( ) {', 'public LeastSquaresProblem build ( ) {']","['lmPar = 0 ;', 'private double determineLMParameter ( double [ ] qy , double delta , double [ ] diag ,', 'private void determineLMParameter ( double [ ] qy , double delta , double [ ] diag ,', 'lmPar = determineLMParameter ( qtf , delta , diag ,', 'return ;', 'determineLMDirection ( qy , work1 , work2 , internalData , solvedCols , work3 , lmDir ) ;', 'double [ ] work1 , double [ ] work2 , double [ ] work3 ) {', 'double [ ] lmDir ) {', 'work1 , work2 , work3 ) ;', 'double [ ] work1 , double [ ] work2 , double [ ] work3 ,']","['return new OptimumImpl (', 'return new OptimumImpl (', 'value ,', 'while ( true ) {', 'import org . apache . commons . math3 . exception . MathInternalError ;', 'value ,', 'iterationCounter . getCount ( ) ) ;', 'iterationCounter . getCount ( ) ) ;', 'for ( boolean converged = false ; !converged ; ) {', 'if ( checker . converged ( iterationCounter . getCount ( ) , previous , current ) ) {']","['new LUDecomposition ( mA , SINGULARITY THRESHOLD ) . getSolver ( ) :', '}', 'this . useLU = useLU ;', 'this ( Decomposition . LU ) ;', 'return useLU ;', 'public static enum Decomposition {', 'this ( true ) ;', '@ Override', 'DecompositionSolver solver = useLU ?', 'DecompositionSolver solver = this . decomposition . getSolver ( mA ) ;']","['final ConvergenceChecker < Evaluation > checker ,', 'observed ,', 'create (', 'new ArrayRealVector ( start , false ) ,', 'final double [ ] observed ,', 'maxEvaluations ,', '}', ') ,', 'model ,', 'maxIterations']","['private MultivariateVectorFunction model ;', 'import org . apache . commons . math3 . linear . ArrayRealVector ;', 'this . target = target ;', 'private RealVector start ;', 'public LeastSquaresBuilder model ( final MultivariateVectorFunction model ) {', 'private MultivariateJacobianFunction model ;', 'private double [ ] start ;', 'this . target = target ;', 'private double [ ] target ;', 'return target ( new ArrayRealVector ( target , false ) ) ;']","['private static final MaxIterCallback MAX ITER CALLBACK = new MaxIterCallback ( ) ;', 'private static final MaxIterCallback MAX ITER CALLBACK = new MaxIterCallback ( ) ;', 'this . maxIterations = maxIterations ;', 'this . maxIterations = maxIterations ;', 'final int maxIterations ,', 'final int maxIterations ,', 'protected AbstractOptimizationProblem ( final int maxEvaluations ,', 'protected AbstractOptimizationProblem ( final int maxEvaluations ,', '}', '}']","['return getOptimizer ( ) . optimize ( getProblem ( points ) ) . getPoint ( ) ;', 'return getOptimizer ( ) . optimize ( getProblem ( points ) ) . getPoint ( ) . toArray ( ) ;', 'model ( model . getModelFunction ( ) ) .', 'model ( model . getModelFunction ( ) , model . getModelFunctionJacobian ( ) ) .', 'jacobian ( model . getModelFunctionJacobian ( ) ) .', 'model ( model . getModelFunction ( ) ) .', 'model ( model . getModelFunction ( ) , model . getModelFunctionJacobian ( ) ) .', 'jacobian ( model . getModelFunctionJacobian ( ) ) .', 'model ( model . getModelFunction ( ) ) .', 'model ( model . getModelFunction ( ) , model . getModelFunctionJacobian ( ) ) .']","['public void testTwoSets ( LeastSquaresOptimizer optimizer ) {', '@ Test', 'public void testGetIterations ( LeastSquaresOptimizer optimizer ) {', 'public void testCircleFitting ( ) {', 'public void testMoreEstimatedParametersUnsorted ( LeastSquaresOptimizer optimizer ) {', 'public void testHahn1 ( ) throws IOException {', 'testMoreEstimatedParametersUnsorted ( optimizer ) ;', 'public void testRedundantEquations ( ) {', '}', 'public final LeastSquaresOptimizer optimizer = this . getOptimizer ( ) ;']","['import org . apache . commons . math3 . fitting . leastsquares . LeastSquaresProblem . Evaluation ;', 'interface Optimum extends LeastSquaresProblem . Evaluation {', 'interface Optimum extends Evaluation {', 'import org . apache . commons . math3 . fitting . leastsquares . LeastSquaresProblem . Evaluation ;', 'public interface LeastSquaresProblem extends OptimizationProblem < LeastSquaresProblem . Evaluation > {', 'public interface LeastSquaresProblem extends OptimizationProblem < Evaluation > {']","['return unweighted . computeValue ( ) ;', 'public RealVector computeValue ( ) {', 'public RealVector computeValue ( ) {', '}', '}', 'return this . weightSqrt . operate ( unweighted . computeValue ( ) ) ;', 'Precision . EPSILON ) ;', 'public void testComputeCovariance ( ) throws IOException {', 'MatrixUtils . createRealDiagonalMatrix ( new double [ ] { 1 , 1e - 2 } )', 'try {']","['return new GaussNewtonOptimizer ( decomposition ) ;', 'public GaussNewtonOptimizer withDecomposition ( final Decomposition newDecomposition ) {', 'public GaussNewtonOptimizer withDecomposition ( final Decomposition decomposition ) {', 'return new GaussNewtonOptimizer ( newDecomposition ) ;', 'this . weight = weight ;', 'public LeastSquaresBuilder maxEvaluations ( final int newMaxEvaluations ) {', 'this . start = start ;', 'public LeastSquaresBuilder target ( final double [ ] newTarget ) {', 'public LeastSquaresBuilder start ( final RealVector start ) {', 'public LeastSquaresBuilder checkerPair ( final ConvergenceChecker < PointVectorValuePair > newChecker ) {']","['WithMaxIterations < GaussianCurveFitter > {', 'public class GaussianCurveFitter extends AbstractCurveFitter {', 'import org . apache . commons . math3 . fitting . leastsquares . WithMaxIterations ;', 'import org . apache . commons . math3 . fitting . leastsquares . WithStartPoint ;', 'public class GaussianCurveFitter extends AbstractCurveFitter', 'implements WithStartPoint < GaussianCurveFitter > ,', 'import org . apache . commons . math3 . fitting . leastsquares . WithMaxIterations ;', 'public class HarmonicCurveFitter extends AbstractCurveFitter {', 'implements WithStartPoint < HarmonicCurveFitter > ,', 'import org . apache . commons . math3 . fitting . leastsquares . WithStartPoint ;']","['@ Deprecated', '@ Deprecated', '@ Deprecated', '@ Deprecated', '@ Deprecated', '@ Deprecated', 'new ArrayFieldVector < Fraction > ( testVector ) ) . getData ( ) , entryTolerance ) ;', 'new ArrayFieldVector < Fraction > ( testVector ) ) . toArray ( ) , entryTolerance ) ;', 'Assert . assertArrayEquals ( ""compare vect"" , v add . getData ( ) , result add ) ;', 'assertClose ( ""compare vect"" , v ebeDivide . toArray ( ) , result ebeDivide , normTolerance ) ;']","['final double [ ] b = new double [ nC ] ;', 'for ( int k = 0 ; k < nC ; + + k ) {', 'final int nR = lsp . getObservationSize ( ) ;', 'try {', 'for ( int k = 0 ; k < nC ; + + k ) {', 'currentPoint . setEntry ( i , currentPoint . getEntry ( i ) + dX . getEntry ( i ) ) ;', 'try {', 'final int nR = jacobian . getRowDimension ( ) ;', 'currentPoint . setEntry ( i , currentPoint . getEntry ( i ) + dX . getEntry ( i ) ) ;', 'jacobian . getEntry ( i , k ) * jacobian . getEntry ( i , l ) ) ;']","['try {', '}', 'protected RealVector solve ( final RealMatrix jacobian ,', '@ Override', 'final RealVector residuals ) {', 'computeNormalMatrix ( jacobian , residuals ) ;', 'CHOLESKY {', 'final RealVector jTr = normalEquation . getSecond ( ) ;', 'return new CholeskyDecomposition (', '. solve ( jTr ) ;']","['throw new ConvergenceException ( LocalizedFormats . UNABLE TO SOLVE SINGULAR PROBLEM ) ;', 'this ( Decomposition . QR ) ;', 'this ( Decomposition . LU ) ;', 'throw new ConvergenceException ( LocalizedFormats . UNABLE TO SOLVE SINGULAR PROBLEM , e ) ;']","['final RealMatrix j = this . computeJacobian ( ) ;', 'final ArrayRealVector r = new ArrayRealVector ( this . getResiduals ( ) ) ;', 'final double cost = this . computeCost ( ) ;', 'final RealMatrix cov = this . getCovariances ( covarianceSingularityThreshold ) ;', 'public double computeRMS ( ) {', 'public double getRMS ( ) {', 'final ArrayRealVector r = new ArrayRealVector ( this . computeResiduals ( ) ) ;', 'public RealVector getSigma ( double covarianceSingularityThreshold ) {', 'public double computeCost ( ) {', 'final double cost = this . getCost ( ) ;']","['}', 'for ( int i = 0 ; i < b . getRowDimension ( ) ; + + i ) {', 'OpenMapRealMatrix b = a . multiply ( x ) ;', '@ Test', 'import org . junit . Assert ;', 'x . setEntry ( 0 , 0 , Double . NaN ) ;', 'public void testMath870 ( ) {', 'OpenMapRealMatrix a = new OpenMapRealMatrix ( 3 , 3 ) ;', 'for ( int j = 0 ; j < b . getColumnDimension ( ) ; + + j ) {', '}']","['} else if ( Double . isInfinite ( y ) ) {', 'if ( Double . isNaN ( y ) ) {', '}', 'for ( int i = 0 ; i < n ; i + + ) {', 'final double x = this . getEntry ( i ) ;', 'if ( v . isNaN ( ) | | v . isInfinite ( ) ) {', 'final double y = v . getEntry ( i ) ;', 'final int n = getDimension ( ) ;', 'res . setEntry ( i , Double . NaN ) ;', 'res . setEntry ( i , x * y ) ;']","['private UnivariateFunction [ ] createFunctions ( ) {', 'protected UnivariateFunction [ ] createFunctions ( ) {', 'public void testMap ( ) { }', 'import org . apache . commons . math3 . analysis . function . Floor ;', 'import org . junit . Ignore ;', 'import org . apache . commons . math3 . analysis . function . Cosh ;', '@ Test', 'new Floor ( ) , new Rint ( ) , new Signum ( )', '@ Ignore ( ""This test is skipped until MATH - 821 is fixed"" )', 'import org . apache . commons . math3 . analysis . function . Asin ;']",['@ Deprecated'],"['final int dim = getDimension ( ) ;', 'final int start , final int end )', 'end , start , false ) ;', '}', 'visitor . visit ( i , getEntry ( i ) ) ;', 'return visitor . end ( ) ;', 'public T walkInOptimizedOrder ( final FieldVectorChangingVisitor < T > visitor ) {', 'throw new OutOfRangeException ( LocalizedFormats . INDEX , start , 0 ,', 'throw new NumberIsTooSmallException ( LocalizedFormats . INITIAL ROW AFTER FINAL ROW ,', 'public T walkInDefaultOrder ( final FieldVectorChangingVisitor < T > visitor ,']","['return solve ( MatrixUtils . createRealIdentityMatrix ( rDiag . length ) ) ;', 'return solve ( MatrixUtils . createRealIdentityMatrix ( qrt [ 0 ] . length ) ) ;', 'RealMatrix a = MatrixUtils . createRealMatrix ( testData3x4 ) ;', 'public void testInvertShortWide ( ) {', '@ Test', '}', 'RealMatrix a = MatrixUtils . createRealMatrix ( testData4x3 ) ;', 'Assert . assertEquals ( 0 , pinv . multiply ( a ) . subtract ( MatrixUtils . createRealIdentityMatrix ( 3 ) ) . getNorm ( ) , 1 . 0e - 6 ) ;', 'Assert . assertEquals ( 0 , a . multiply ( pinv ) . subtract ( MatrixUtils . createRealIdentityMatrix ( 3 ) ) . getNorm ( ) , 1 . 0e - 6 ) ;', 'public void testInvertTallSkinny ( ) {']","['{ 1 , 6 , 4 } , { 2 , 4 , - 1 } , { - 1 , 2 , 5 }', '} ) ;', 'final RealVector b = new ArrayRealVector ( new double [ ] { 5 , 6 , 1 } ) ;', '}', 'final RealMatrix a = MatrixUtils . createRealMatrix ( new double [ ] [ ] {', 'new QRDecomposition ( a , 1 . 0e - 15 ) . getSolver ( ) . solve ( b ) ;', 'public void testQRSingular ( ) {', '@ Test ( expected = SingularMatrixException . class )']","['import org . apache . commons . math3 . optim . OptimizationProblem ;', 'import org . apache . commons . math3 . fitting . leastsquares . OptimizationProblem ;', 'package org . apache . commons . math3 . fitting . leastsquares ;', 'package org . apache . commons . math3 . optim ;', 'import org . apache . commons . math3 . optim . ConvergenceChecker ;']","['return this . weightSqrt . operate ( unweighted . getValue ( ) ) ;', 'public RealVector getValue ( ) {', '}', 'previous . getValue ( ) . toArray ( ) ,', 'previous . getResiduals ( ) . toArray ( ) ,', 'this . values = values ;', 'private final RealVector residuals ;', 'private final RealVector values ;', 'return this . residuals ;', 'public RealVector getValue ( ) {']","['abstract class AbstractEvaluation implements Evaluation {', 'public abstract class AbstractEvaluation implements Evaluation {']","['import java . util . Comparator ;', 'newMaxIter ) ;', 'public GaussianCurveFitter withMaxIterations ( int max ) {', 'import java . util . Comparator ;', 'public GaussianCurveFitter withStartPoint ( double [ ] start ) {', 'public GaussianCurveFitter withStartPoint ( double [ ] newStart ) {', 'import org . apache . commons . math3 . exception . NotStrictlyPositiveException ;', 'import org . apache . commons . math3 . exception . NotStrictlyPositiveException ;', 'import org . apache . commons . math3 . linear . DiagonalMatrix ;', 'import org . apache . commons . math3 . linear . DiagonalMatrix ;']","['Assert . assertTrue ( dist . compute ( bestBefore . getFeatures ( ) , features ) > = 0 . 2 * 0 . 2 ) ;', 'Assert . assertTrue ( dist . compute ( bestBefore . getFeatures ( ) , features ) > = 0 . 2 ) ;']","['throw new MathUnsupportedOperationException ( LocalizedFormats . NOT SUPPORTED IN DIMENSION N , 1 ) ;', 'throw new NoSubSpaceException ( ) ;', 'public Space getSubSpace ( ) throws MathUnsupportedOperationException {', 'private static final long serialVersionUID = 20140225L ;', 'public static class NoSubSpaceException extends MathUnsupportedOperationException {', '}', 'public Space getSubSpace ( ) throws NoSubSpaceException {', 'public NoSubSpaceException ( ) {', 'super ( LocalizedFormats . NOT SUPPORTED IN DIMENSION N , 1 ) ;', 'throw new MathUnsupportedOperationException ( LocalizedFormats . NOT SUPPORTED IN DIMENSION N , 1 ) ;']","['final RealVector currentPoint = lsp . getStart ( ) ;', 'RealVector currentPoint = lsp . getStart ( ) ;', 'currentPoint . setEntry ( i , currentPoint . getEntry ( i ) + dX . getEntry ( i ) ) ;', 'currentPoint = currentPoint . add ( dX ) ;', '}', 'for ( int i = 0 ; i < nC ; + + i ) {', 'final int nC = lsp . getParameterSize ( ) ;', 'point ) ;', 'point . copy ( ) ) ;', 'Evaluation current = problem . evaluate ( new ArrayRealVector ( currentPoint , false ) ) ;']","['return new OptimumImpl ( current , iterationCounter . getCount ( ) , evaluationCounter . getCount ( ) ) ;', 'return new OptimumImpl ( current , evaluationCounter . getCount ( ) , iterationCounter . getCount ( ) ) ;', 'LeastSquaresProblem lsp = new LinearProblem ( new double [ ] [ ] { { 1 } } , new double [ ] { 1 } )', 'public boolean converged ( int iteration , Evaluation previous , Evaluation current ) {', 'return true ;', '. checker ( new ConvergenceChecker < Evaluation > ( ) {', '@ Test', 'Assert . assertThat ( optimum . getEvaluations ( ) , is ( 2 ) ) ;', '} )', 'public void testEvaluationCount ( ) {']","['bracket . search ( f , goal , 0 , 1 ) ;', 'double initialBracketingRange ) {', 'double absoluteTolerance ) {', 'private final double initialBracketingRange ;', 'this . initialBracketingRange = initialBracketingRange ;', 'bracket . search ( f , goal , 0 , initialBracketingRange ) ;', 'double absoluteTolerance ,', 'absoluteTolerance ) ;', 'initialBracketingRange ,', 'double absoluteTolerance ) {']","['import org . apache . commons . math3 . linear . SingularValueDecomposition ;', '} ,', '}', 'return new SingularValueDecomposition ( jacobian )', 'SVD {', 'protected RealVector solve ( final RealMatrix jacobian ,', '@ Override', '. solve ( residuals ) ;', 'final RealVector residuals ) {', '. getSolver ( )']","['public double value ( final double [ ] point ) {', 'public ValuePenaltyPair value ( final double [ ] point ) {', 'private double valueRange ;', 'for ( ValuePenaltyPair vpPair : vpPairs ) {', 'double bestValue = fitfun . value ( guess ) ;', 'double max = Double . NEGATIVE INFINITY ;', '}', 'for ( int iValue = 0 ; iValue < valuePenaltyPairs . length ; iValue + + ) {', 'this . valueRange = valueRange ;', 'penalty = penalty ( point , repaired ) ;']","['Assert . assertEquals ( 96 . 075 , center . getX ( ) , 1e - 3 ) ;', '= optimizer . optimize ( new MaxEval ( 1000 ) ,', 'Assert . assertTrue ( optimizer . getEvaluations ( ) > 590 ) ;', 'Assert . assertTrue ( optimum . getValue ( ) < 5e - 5 ) ;', '= new MultiStartMultivariateOptimizer ( underlying , 10 , generator ) ;', 'Assert . assertEquals ( nbStarts , optima . length ) ;', 'Assert . assertTrue ( optimizer . getEvaluations ( ) < 610 ) ;', 'Assert . assertEquals ( 1000 , optimizer . getMaxEvaluations ( ) ) ;', 'Assert . assertEquals ( 48 . 13516 , center . getY ( ) , 1e - 5 ) ;', 'Assert . assertTrue ( 48 . 1344 < center . getY ( ) ) ;']","['int idx ;', 'final int idx ;']","['double temp2 = xa * TANGENT TABLE A [ idx ] ;', 'zb + = xb * ttB ;', 'zb + = xb * TANGENT TABLE B [ idx ] ;', 'double temp2 = xa * ttA ;', 'epsB + = xb - TANGENT TABLE B [ idx ] ;', 'double epsA = xa - ttA ;', 'final double denom = 1d / ( 1d + ( xa + xb ) * ( TANGENT TABLE A [ idx ] + TANGENT TABLE B [ idx ] ) ) ;', 'final double ttA = TANGENT TABLE A [ idx ] ;', 'temp2 = xb * TANGENT TABLE A [ idx ] + xa * TANGENT TABLE B [ idx ] ;', 'final double ttB = TANGENT TABLE B [ idx ] ;']","['boolean negate = false ;', '} else {', 'negate = false ;', 'final boolean negate ;']","['double zb = - ( za - EIGHTHS [ idx ] - ya ) ;', 'double za = eighths + ya ;', 'double za = EIGHTHS [ idx ] + ya ;', 'final double eighths = EIGHTHS [ idx ] ;', 'double zb = - ( za - eighths - ya ) ;']","['yb = yb * epsA2 + - 0 . 09088450866185192 ;', 'yb = yb * epsA2 - 0 . 1428571423679182 ;', 'yb = yb * epsA2 + - 0 . 1428571423679182 ;', 'yb = yb * epsA2 - 0 . 09088450866185192 ;', 'yb = yb * epsA2 + - 0 . 33333333333333287 ;', 'yb = yb * epsA2 - 0 . 33333333333333287 ;']","['public static boolean equals ( double x , double y ) {', 'return new Double ( x ) . equals ( new Double ( y ) ) ;', '}', 'final double mZero = - 0d ;', '@ Test', 'Assert . assertFalse ( MathUtils . equals ( mZero , zero ) ) ;', 'final double x = 1234 . 5678 ;', 'final double zero = 0d ;', '}', 'Assert . assertTrue ( MathUtils . equals ( Double . NaN , Double . NaN ) ) ;']","['Complex c = ( Complex ) other ;', 'public static boolean equals ( Complex x , Complex y , int maxUlps ) {', 'return ( real = = c . real ) & & ( imaginary = = c . imaginary ) ;', 'Complex c = ( Complex ) other ;', 'Precision . equals ( x . imaginary , y . imaginary , maxUlps ) ;', 'public static boolean equals ( Complex x , Complex y ) {', 'public static boolean equals ( Complex x , Complex y , double eps ) {', 'MathUtils . equals ( imaginary , c . imaginary ) ;', 'return Precision . equals ( x . real , y . real , eps ) & &', 'return Precision . equals ( x . real , y . real , maxUlps ) & &']","['private static final double [ ] STATIC C = {', '}', 'public LutherIntegrator ( final double step ) {', '{ 8 . 0 / 27 . 0 , 2 . 0 / 27 . 0 , 8 . 0 / 27 . 0 } ,', 'private static final double [ ] [ ] STATIC A = {', 'import org . apache . commons . math3 . util . FastMath ;', 'public class LutherIntegrator extends RungeKuttaIntegrator {', 'package org . apache . commons . math3 . ode . nonstiff ;', '{ ( 330 . 0 + 105 . 0 * Q ) / 180 . 0 , ( 120 . 0 + 0 . 0 * Q ) / 180 . 0 , ( - 200 . 0 + 280 . 0 * Q ) / 180 . 0 , ( 126 . 0 - 189 . 0 * Q ) / 180 . 0 , ( - 686 . 0 - 126 . 0 * Q ) / 180 . 0 , ( 490 . 0 - 70 . 0 * Q ) / 180 . 0 }', '1 . 0 / 20 . 0 , 0 , 16 . 0 / 45 . 0 , 0 , 49 . 0 / 180 . 0 , 49 . 0 / 180 . 0 , 1 . 0 / 20 . 0']","['re = Math . nextUp ( re ) ;', 'im = FastMath . nextUp ( im ) ;', 'im = Math . nextUp ( im ) ;', 're = FastMath . nextUp ( re ) ;']","['yDotK [ i ] = new double [ y0 . length ] ;', 'public double [ ] singleStep ( final FirstOrderDifferentialEquations equations ,', '}', 'for ( int k = 1 ; k < stages ; + + k ) {', 'final double t0 , final double [ ] y0 , final double t ) {', 'y [ j ] + = h * sum ;', 'for ( int i = 0 ; i < stages ; + + i ) {', 'import org . apache . commons . math3 . ode . FirstOrderDifferentialEquations ;', 'for ( int j = 0 ; j < y0 . length ; + + j ) {', 'equations . computeDerivatives ( t0 + c [ k - 1 ] * h , yTmp , yDotK [ k ] ) ;']","['if ( ( xMin > = xMax - tolerance ) | | ( yMin > = yMax - tolerance ) ) {', '}', 'return null ;', 'public void testTooThinBox ( ) {', 'PolygonsSet ps = new PolygonsSet ( new BSPTree < Euclidean2D > ( ) , 1 . 0e - 10 ) ;', '1 . 0e - 10 ) ;', 'try {', '@ Test', 'Assert . assertEquals ( 0 . 0 ,', 'Assert . fail ( ""an exception should have been thrown"" ) ;']","['if ( ( xMin > = xMax - tolerance ) | | ( yMin > = yMax - tolerance ) | | ( zMin > = zMax - tolerance ) ) {', 'return new BSPTree < Euclidean3D > ( Boolean . FALSE ) ;', '}', 'public void testTooThinBox ( ) {', '1 . 0e - 10 ) ;', 'try {', '@ Test', 'Assert . assertEquals ( 0 . 0 ,', 'ps . checkPoint ( Vector3D . ZERO ) ;', 'new PolyhedronsSet ( 0 . 0 , 0 . 0 , 0 . 0 , 1 . 0 , 0 . 0 , 1 . 0 , 1 . 0e - 10 ) . getSize ( ) ,']","['qr = new QRDecomposition ( getX ( ) ) ;', 'public OLSMultipleLinearRegression ( final double threshold ) {', 'this ( 0d ) ;', 'qr = new QRDecomposition ( getX ( ) , threshold ) ;', '}', 'this . threshold = threshold ;', 'public OLSMultipleLinearRegression ( ) {', 'private final double threshold ;', 'import org . apache . commons . math3 . linear . Array2DRowRealMatrix ;', 'import org . apache . commons . math3 . linear . Array2DRowRealMatrix ;']","['import org . apache . commons . math3 . exception . NumberIsTooSmallException ;', 'import java . io . ObjectOutputStream ;', 'import java . util . ArrayList ;', 'import java . io . ObjectInputStream ;', 'import java . io . ObjectOutputStream ;', 'import org . apache . commons . math3 . ml . neuralnet . twod . NeuronSquareMesh2D ;', 'import org . apache . commons . math3 . random . Well44497b ;', 'import org . junit . Test ;', 'import java . io . ObjectInputStream ;', '@ Ignore']","['import org . apache . commons . math3 . RealFieldElement ;', 'import org . apache . commons . math3 . RealFieldElement ;', 'import org . apache . commons . math3 . optimization . DifferentiableMultivariateVectorOptimizer ;', 'import org . apache . commons . math3 . exception . NumberIsTooSmallException ;', 'import org . apache . commons . math3 . exception . NumberIsTooSmallException ;', 'import org . apache . commons . math3 . optimization . DifferentiableMultivariateVectorOptimizer ;', 'import org . apache . commons . math3 . exception . ZeroException ;', 'import org . apache . commons . math3 . exception . ZeroException ;', 'import org . apache . commons . math3 . optimization . InitialGuess ;', 'import org . apache . commons . math3 . analysis . MultivariateVectorFunction ;']","['break ;', 'final long currentId = n . getIdentifier ( ) ;', 'previousId = Long . MIN VALUE ;', 'for ( Neuron n : net ) {', '}', 'isUnspecifiedOrder = false ;', 'if ( currentId < previousId ) {', 'isUnspecifiedOrder = true ;', 'Assert . assertTrue ( isUnspecifiedOrder ) ;', 'previousId = currentId ;']",['import org . apache . commons . math3 . analysis . MultivariateVectorFunction ;'],"['import org . apache . commons . math3 . Field ;', 'import org . apache . commons . math3 . Field ;', 'import org . apache . commons . math3 . exception . NumberIsTooSmallException ;', 'import org . apache . commons . math3 . optimization . DifferentiableMultivariateVectorOptimizer ;', 'import org . apache . commons . math3 . optimization . DifferentiableMultivariateVectorOptimizer ;', 'import org . apache . commons . math3 . exception . NumberIsTooSmallException ;', 'import org . apache . commons . math3 . exception . MathIllegalStateException ;', 'import org . apache . commons . math3 . exception . MathIllegalStateException ;', 'import org . apache . commons . math3 . optimization . InitialGuess ;', 'import org . apache . commons . math3 . optimization . InitialGuess ;']","['public static double kolmogorovSmirnovTest ( RealDistribution dist , double [ ] data , boolean strict )', 'public static double kolmogorovSmirnovTest ( double [ ] x , double [ ] y , boolean strict )', 'throws InsufficientDataException , NullArgumentException {', 'return KS TEST . kolmogorovSmirnovTest ( x , y ) ;', 'return KS TEST . kolmogorovSmirnovTest ( dist , data , strict ) ;', '}', 'return KS TEST . kolmogorovSmirnovStatistic ( x , y ) ;', 'public static boolean kolmogorovSmirnovTest ( RealDistribution dist , double [ ] data , double alpha )', 'public static double approximateP ( double d , int n , int m ) {', 'return KS TEST . approximateP ( d , n , m ) ;']","['+ + iter ;', 'if ( checker ! = null & & checker . converged ( getIterations ( ) , previous , current ) ) {', 'int iter = 0 ;', 'incrementIterationCount ( ) ;', 'if ( checker ! = null & & checker . converged ( iter , previous , current ) ) {', 'Assert . assertTrue ( optimizer . getIterations ( ) > 0 ) ;']","['for ( BSPTree < S > tree = this ; tree . parent ! = null ; tree = tree . parent ) {', 'for ( BSPTree < S > tree = this ; tree . parent ! = null & & s ! = null ; tree = tree . parent ) {', '{ - 2 , 5 } , { - 2 , 6 } , { - 2 , 7 } , { - 2 , 8 } , { - 1 , - 8 } ,', '{ 11 , - 1 } , { 11 , 0 } , { 11 , 1 } } ;', '{ - 10 , - 3 } , { - 10 , - 2 } , { - 10 , - 1 } , { - 10 , 0 } , { - 10 , 1 } ,', '{ - 2 , - 5 } , { - 2 , - 4 } , { - 2 , - 3 } , { - 2 , - 2 } , { - 2 , 4 } ,', '{ - 8 , 4 } , { - 8 , 5 } , { - 7 , - 6 } , { - 7 , - 5 } , { - 7 , - 4 } ,', '{ - 6 , - 2 } , { - 6 , - 1 } , { - 6 , 0 } , { - 6 , 1 } , { - 6 , 2 } ,', '{ - 4 , - 2 } , { - 4 , 4 } , { - 4 , 5 } , { - 4 , 6 } , { - 4 , 7 } ,', '{ - 3 , - 3 } , { - 3 , - 2 } , { - 3 , 4 } , { - 3 , 5 } , { - 3 , 6 } ,']","['nPlus1Over2 * FastMath . log ( 1 + x * x / n ) ;', 'Gamma . logGamma ( n / 2 ) ;', 'import org . apache . commons . math3 . random . Well19937c ;', 'factor = Gamma . logGamma ( nPlus1Over2 ) -', '0 . 5 * ( FastMath . log ( FastMath . PI ) +', 'import org . apache . commons . math3 . random . Well19937c ;', 'Gamma . logGamma ( n / 2 ) -', '0 . 5 * ( FastMath . log ( FastMath . PI ) + FastMath . log ( n ) ) -', 'import org . apache . commons . math3 . random . RandomGenerator ;', 'final double n = degreesOfFreedom ;']","['package org . apache . commons . math3 . fitting . leastsquares ;', 'this ( tol , tol ) ;', '}', 'final Evaluation previous ,', 'Precision . equalsWithRelativeTolerance ( prevRms , currRms , this . relTol ) ;', 'private final double relTol ;', 'import org . apache . commons . math3 . fitting . leastsquares . LeastSquaresProblem . Evaluation ;', 'final double currRms = current . getRMS ( ) ;', 'final Evaluation current ) {', 'public EvaluationRmsChecker ( final double relTol , final double absTol ) {']","['public static boolean equals ( double x , double y , int maxUlps ) {', 'private static final long NEGATIVE ZERO DOUBLE BITS = Double . doubleToRawLongBits ( - 0 . 0 ) ;', 'public static boolean equals ( float x , float y , int maxUlps ) {', 'deltaMinus = yInt - NEGATIVE ZERO FLOAT BITS ;', 'xInt = SGN MASK - xInt ;', '}', 'yInt = SGN MASK - yInt ;', 'private static final long POSITIVE ZERO DOUBLE BITS = Double . doubleToRawLongBits ( + 0 . 0 ) ;', 'long yInt = Double . doubleToLongBits ( y ) ;', 'isEqual = deltaMinus < = ( maxUlps - deltaPlus ) ;']","['work [ i + 1 ] = work [ i ] ;', 'break ;', 'i - - ;', 'final double wi = work [ i ] ;', 'while ( ( i > = begin ) & & ( saved < work [ i ] ) ) {', 'work [ i + 1 ] = wi ;', 'while ( i > = begin ) {', 'i - - ;', '}', 'if ( saved < wi | | Double . isNaN ( wi ) ) {']","['final ConvergenceChecker < Evaluation > checker ,', 'public static ConvergenceChecker < Evaluation > evaluationChecker ( final ConvergenceChecker < PointVectorValuePair > checker ) {', 'public static MultivariateJacobianFunction model (', 'implements MultivariateJacobianFunction {', 'new ArrayRealVector ( value . value ( pointArray ) , false ) ,', 'final double [ ] p = point . toArray ( ) ;', 'create (', 'private final boolean lazyEvaluation ;', 'return this . residuals ;', 'public RealMatrix getJacobian ( ) {']","['return output ;', '}', 'final double [ ] output = new double [ len ] ;', 'System . arraycopy ( source , from , output , 0 , FastMath . min ( len , source . length - from ) ) ;', 'public static double [ ] copyOfRange ( double [ ] source , int from , int to ) {', 'final int len = to - from ;', '@ Test', 'for ( int i = source . length ; i < dest . length ; i + + ) {', 'public void testCopyOfRange ( ) {', '}']","['public void clear ( ) {', 'import java . text . DecimalFormat ;', 'private static final long serialVersionUID = 2283952083075725479L ;', 'private long countOfObservations ;', 'private final UnivariateInterpolator nonLinear =', 'MathUtils . checkNotNull ( nextMarker ) ;', 'return copy ;', '} else if ( o ! = null & & o instanceof Markers ) {', 'this . desiredMarkerPosition = makerPositionDesired ;', 'if ( countObserved < PSQUARE CONSTANT ) {']","['super ( 50 . 0 ) ;', 'import org . apache . commons . math3 . exception . MathIllegalArgumentException ;', 'import org . apache . commons . math3 . stat . descriptive . rank . Percentile . EstimationType ;', 'private static final double FIXED QUANTILE 50 = 50 . 0 ;', 'throws MathIllegalArgumentException {', 'return new Median ( getEstimationType ( ) , newNaNStrategy , getPivotingStrategy ( ) ) ;', 'private Median ( final EstimationType estimationType , final NaNStrategy nanStrategy ,', '}', 'public Median withEstimationtype ( final EstimationType newEstimationType ) {', 'public Median withPivotingStrategy ( final PivotingStrategy newPivotingStrategy ) {']","['testAssertMappedValues ( testArray , new Object [ ] [ ] { { t , min } }', 'testAssertMappedValues ( testArray , new Object [ ] [ ] { { t , max } } , pMax * 100 , tolerance ) ;', 'testAssertMappedValues ( testArray , new Object [ ] [ ] { { t , max } }', 'Assert . assertEquals ( ""Legacy Apache Commons Math"" , Percentile . EstimationType . LEGACY . getName ( ) ) ;', ', pMin , 0 . 01 ) ;', 'testAssertMappedValues ( testArray , new Object [ ] [ ] { { t , min } } , pMin , 0 . 01 ) ;', ', pMax * 100 , tolerance ) ;', 'Assert . assertEquals ( ""Commons Math"" , Percentile . EstimationType . LEGACY . getName ( ) ) ;']","['return copy ;', 'return MathArrays . copyOfRange ( values , begin , begin + length ) ;', 'System . arraycopy ( values , begin , copy , 0 ,', 'FastMath . min ( length , values . length ) ) ;', 'final double [ ] copy = new double [ length ] ;']","['case FAILED : {', 'case FAILED : / / just throw exception as NaN is un - acceptable', '}']","['import org . apache . commons . math3 . exception . NotANumberException ;', 'public static void checkNotNaN ( final double [ ] in )', '}', 'if ( Double . isNaN ( in [ i ] ) ) {', 'for ( int i = 0 ; i < in . length ; i + + ) {', 'throws NotStrictlyPositiveException {', 'throw new NotANumberException ( ) ;', 'final double [ ] withNaN = { Double . NEGATIVE INFINITY ,', 'try {', '@ Test']","['for ( int i = begin ; i < begin + length ; i + + ) {', 'MathArrays . checkNotNaN ( work ) ;', 'private static void checkNotANumber ( final double [ ] values , final int begin , final int length ) {', '}', 'if ( Double . isNaN ( values [ i ] ) ) {', 'checkNotANumber ( values , begin , length ) ;', 'throw new NotANumberException ( ) ;', 'MathArrays . verifyValues ( values , begin , length ) ;']","['throws NotStrictlyPositiveException {', 'throws NotANumberException {']","['public Median withEstimationtype ( final EstimationType newEstimationType ) {', 'public Median withEstimationType ( final EstimationType newEstimationType ) {', 'public Percentile withEstimationtype ( final EstimationType newEstimationType ) {', 'public Percentile withEstimationType ( final EstimationType newEstimationType ) {', 'return new Median ( ) . withEstimationtype ( type ) . withNaNStrategy ( strategy ) ;', 'return new Median ( ) . withEstimationType ( type ) . withNaNStrategy ( strategy ) ;', 'Assert . assertEquals ( 50d , new Percentile ( 50d ) . withEstimationtype ( Percentile . EstimationType . R 7 ) . withNaNStrategy ( NaNStrategy . MINIMAL ) . evaluate ( new double [ ] { 50d , 50d , 50d } , 1 , 2 ) , 0d ) ;', 'Assert . assertEquals ( 2d , new Percentile ( 50d ) . withEstimationType ( Percentile . EstimationType . R 1 ) . withNaNStrategy ( NaNStrategy . REMOVED ) . evaluate ( specialValues ) , 0d ) ;', 'withEstimationtype ( type ) .', 'withEstimationType ( Percentile . EstimationType . R 9 ) .']","['return ( Double . isNaN ( x ) & & Double . isNaN ( y ) ) | | equals ( x , y , 1 ) ;', 'return ( x ! = x | | y ! = y ) ? ! ( x ! = x ^ y ! = y ) : equals ( x , y , 1 ) ;', 'return ( Double . isNaN ( x ) & & Double . isNaN ( y ) ) | | equals ( x , y , maxUlps ) ;', 'return ( x ! = x | | y ! = y ) ? ! ( x ! = x ^ y ! = y ) : equals ( x , y , maxUlps ) ;', 'return ( Float . isNaN ( x ) & & Float . isNaN ( y ) ) | | equals ( x , y , maxUlps ) ;', 'return ( Float . isNaN ( x ) & & Float . isNaN ( y ) ) | | equals ( x , y , 1 ) ;']","['doDistributionTest ( new NormalDistribution ( 4000 , 50 ) ) ;', 'doDistributionTest ( new NormalDistribution ( randomGenerator , 4000 , 50 ) ) ;', 'doDistributionTest ( new LogNormalDistribution ( 4000 , 50 ) ) ;', 'doDistributionTest ( new LogNormalDistribution ( randomGenerator , 4000 , 50 ) ) ;']","['throws MathArithmeticException {', 'hPowers [ i ] = h * hPowers [ i - 1 ] ;', 'H . setEntry ( i , j , HBigFraction . getEntry ( i , j ) . doubleValue ( ) ) ;', 'Hdata [ m - 1 ] [ i ] - = hPowers [ m - i - 1 ] ;', 'final FieldMatrix < BigFraction > H = this . createH ( d , n ) ;', '}', '}', 'hPowers [ 0 ] = h ;', 'private double roundedK ( double d , int n )', 'for ( int j = 0 ; j < m ; + + j ) {']","['hull . add ( point ) ;', 'hull . add ( point ) ;', 'public void testCollinearPointOnExistingBoundary ( ) {', 'points . add ( new Vector2D ( 4 . 876799999999999 , 34 . 7472 ) ) ;', 'points . add ( new Vector2D ( 4 . 876799999999999 , 30 . 48 ) ) ;', '@ Test', 'points . add ( new Vector2D ( 6 . 400799999999997 , 34 . 747199999999985 ) ) ;', 'points . add ( new Vector2D ( 6 . 0959999999999965 , 30 . 48 ) ) ;', 'points . add ( new Vector2D ( 7 . 3152 , 30 . 48 ) ) ;', '}']","['if ( numberOfTrials = = 0 ) {', 'return ( x = = 0 ) ? 0 . : Double . NEGATIVE INFINITY ;', '}', 'BinomialDistribution dist = new BinomialDistribution ( 0 , 0 . 01d ) ;', 'setDistribution ( dist ) ;', 'setCumulativeTestValues ( new double [ ] { 0d , 1d , 1d , 1d , 1d , 1d } ) ;', 'setInverseCumulativeTestPoints ( new double [ ] { 0 . 1d , 0 . 5d } ) ;', 'setCumulativeTestPoints ( new int [ ] { - 1 , 0 , 1 , 2 , 5 , 10 } ) ;', '@ Test', 'Assert . assertEquals ( dist . getSupportLowerBound ( ) , 0 ) ;']","['import org . apache . commons . math3 . stat . descriptive . rank . Percentile . EstimationType ;', 'return new Median ( getEstimationType ( ) , newNaNStrategy , getKthSelector ( ) ) ;', 'return new Median ( getEstimationType ( ) , newNaNStrategy , getPivotingStrategy ( ) ) ;', 'public Median withKthSelector ( final KthSelector newKthSelector ) {', 'public Median withPivotingStrategy ( final PivotingStrategy newPivotingStrategy ) {', 'return new Median ( getEstimationType ( ) , getNaNStrategy ( ) , newKthSelector ) ;', 'return new Median ( getEstimationType ( ) , getNaNStrategy ( ) , newPivotingStrategy ) ;', 'final KthSelector kthSelector )', 'return new Median ( newEstimationType , getNaNStrategy ( ) , getPivotingStrategy ( ) ) ;', 'super ( FIXED QUANTILE 50 , estimationType , nanStrategy , kthSelector ) ;']","['for ( int i = begin ; i < begin + length ; i + + ) {', 'replacement : temp [ i ] ;', 'if ( areBothNaNs | | Double . compare ( values [ i ] , removedValue ) = = 0 ) {', 'final BitSet bits = new BitSet ( length ) ;', 'final double original , final double replacement ) {', '} else {', 'if ( occurencesToRemove . isEmpty ( ) ) {', 'System . arraycopy ( values , start , temp , dest , begin + length - start ) ;', 'Double . isNaN ( values [ i ] ) ;', '} else if ( bits . cardinality ( ) = = length ) {']","['return exact ? exactK ( d , n ) : roundedK ( d , n ) ;', 'double increment = 0 ;', 'if ( increment < = PG SUM RELATIVE ERROR * sum ) {', 'double kTerm6 = 0 ;', 'for ( k = 1 ; k < MAXIMUM PARTIAL SUM COUNT ; k + + ) {', 'final double sqrtN = FastMath . sqrt ( n ) ;', 'PI SQUARED * kTerm2 * ( 135 * z4 - 96 * z6 ) - 30 * z6 - 90 * z8 ) *', 'double ret = 0 ;', '}', 'final double z2 = d * d * n ;']","['if ( lower > = upper ) {', 'lower , upper , true ) ;', 'lower , upper , false ) ;', 'if ( lower > upper ) {', 'public void testPreconditionUpperBoundInclusive ( ) {', 'try {', '@ Test', 'new UniformIntegerDistribution ( 1 , 0 ) ;', 'import org . apache . commons . math3 . exception . NumberIsTooLargeException ;', '}']","['currentDerivative = interpolator . currentDerivative . clone ( ) ;', 'if ( interpolator . currentDerivative ! = null ) {', 'currentDerivative = interpolator . currentDerivative . clone ( ) ;', '}']","['final double Umin = x . length * y . length - Umax ;', 'final double U2 = ( long ) x . length * y . length - U1 ;', 'final double U1 = sumRankX - ( x . length * ( x . length + 1 ) ) / 2 ;', 'final double U1 = sumRankX - ( ( long ) x . length * ( x . length + 1 ) ) / 2 ;', 'final double U2 = x . length * y . length - U1 ;', 'final double Umin = ( long ) x . length * y . length - Umax ;', '@ Test', 'public void testBigDataSetOverflow ( ) {', 'for ( int i = 0 ; i < 110000 ; i + + ) {', 'd1 [ i ] = i ;']","['mean . clear ( ) ;', 'mean . increment ( Double . POSITIVE INFINITY ) ;', '@ Test', 'import org . junit . Assert ;', 'public void testSpecialValues ( ) {', 'final FirstMoment mean = new FirstMoment ( ) ;', 'mean . increment ( 0d ) ;', '}', 'mean . increment ( Double . NEGATIVE INFINITY ) ;', 'mean . increment ( Double . NaN ) ;']","['INVALID IMPLEMENTATION ( ""required functionality is missing in { 0 } "" ) ,', 'private static class LocalMultivariateJacobianFunction', 'model . getClass ( ) . getName ( ) ) ;', 'LocalMultivariateJacobianFunction ( final MultivariateVectorFunction value ,', 'LocalValueAndJacobianFunction ( final MultivariateVectorFunction value ,', 'private LazyUnweightedEvaluation ( final MultivariateJacobianFunction model ,', 'private final ValueAndJacobianFunction model ;', 'return new LocalMultivariateJacobianFunction ( value , jacobian ) ;', 'private static class LocalValueAndJacobianFunction', 'public static MultivariateJacobianFunction model ( final MultivariateVectorFunction value ,']","['final City city = solver . getClosestCity ( c [ 0 ] , c [ 1 ] ) ;', 'try {', '}', 'out . println ( ""# Travel distance : "" + computeTravelDistance ( result ) ) ;', 'PrintWriter out = null ;', 'final StringBuilder s = new StringBuilder ( ) ;', '} finally {', 'for ( double [ ] c : solver . getCoordinatesList ( ) ) {', 'import java . io . PrintWriter ;', 'return s . toString ( ) ;']","['this . tolerance = tolerance ;', 'this . tolerance = tolerance ;', 'sign = cross ;', 'if ( cmp ! = 0 . 0 ) {', 'final double cross = FastMath . signum ( MathArrays . linearCombination ( d1 . getX ( ) , d2 . getY ( ) ,', 'final double crossProduct = MathArrays . linearCombination ( d1 . getX ( ) , d2 . getY ( ) , - d1 . getY ( ) , d2 . getX ( ) ) ;', 'if ( sign ! = 0 . 0 & & cross ! = sign ) {', 'if ( sign ! = 0 . 0 & & cmp ! = sign ) {', '- d1 . getY ( ) , d2 . getX ( ) ) ) ;', 'sign = cmp ;']","['if ( randomValue < sum ) {', 'int index = Arrays . binarySearch ( cumulativeProbabilities , randomValue ) ;', 'for ( int i = 0 ; i < probabilities . length ; i + + ) {', 'index = - index - 1 ;', 'sum + = probabilities [ i ] ;', 'cumulativeProbabilities [ i ] = sum ;', 'double sum = 0 ;', 'private final double [ ] cumulativeProbabilities ;', 'return singletons . get ( i ) ;', '}']","['outBuffer . append ( ""second moment : "" ) . append ( getSecondMoment ( ) ) . append ( endl ) ;', 'outBuffer . append ( ""population variance : "" ) . append ( getPopulationVariance ( ) ) . append ( endl ) ;', 'outBuffer . append ( ""sum : "" ) . append ( getSum ( ) ) . append ( endl ) ;', 'final String [ ] labels = { ""min"" , ""max"" , ""sum"" , ""geometric mean"" , ""variance"" ,', 'for ( int i = 0 ; i < 5 ; i + + ) {', '""sum of logs"" } ;', 'u . getVariance ( ) , u . getPopulationVariance ( ) , u . getSecondMoment ( ) , u . getSumsq ( ) ,', '@ Test', 'public void testToString ( ) {', '""population variance"" , ""second moment"" , ""sum of squares"" , ""standard deviation"" ,']","['return ( FastMath . PI * FastMath . PI ) / 6 . 0 * ( beta * beta ) ;', 'return ( MathUtils . PI SQUARED ) / 6 . 0 * ( beta * beta ) ;', 'import org . apache . commons . math3 . util . MathUtils ;', 'return ( FastMath . PI * FastMath . PI / 3 . 0 ) * ( 1 . 0 / ( s * s ) ) ;', 'import org . apache . commons . math3 . util . MathUtils ;', 'return ( MathUtils . PI SQUARED / 3 . 0 ) * ( 1 . 0 / ( s * s ) ) ;']","['OVERFLOW IN MULTIPLICATION ( ""overflow in multiplication : { 0 } * { 1 } "" ) ,', 'public static long floorDiv ( final long a , final long b ) throws MathArithmeticException {', 'final long m = a % b ;', 'public static int addExact ( final int a , final int b ) throws MathArithmeticException {', 'public static long subtractExact ( final long a , final long b ) {', 'final int m = a % b ;', '}', 'final int sum = a + b ;', 'public static long addExact ( final long a , final long b ) throws MathArithmeticException {', 'throw new MathArithmeticException ( LocalizedFormats . OVERFLOW IN MULTIPLICATION , a , b ) ;']","['if ( !expected . equals ( actual ) ) {', 'actual = fastMethod . invoke ( mathMethod , params ) ;', 'Object actual = fastMethod . invoke ( mathMethod , params ) ;', 'if ( expected instanceof ArithmeticException ) {', 'Object [ ] params , int [ ] entries ) throws IllegalAccessException ,', 'try {', 'Object expected = mathMethod . invoke ( mathMethod , params ) ;', 'actual = ite . getCause ( ) ;', 'InvocationTargetException {', 'Assert . assertEquals ( MathArithmeticException . class , actual . getClass ( ) ) ;']","['stepSize = forward ? step : - step ;', 'if ( forward ) {', 'stepSize = t - stepStart ;', 'if ( stepStart + step > = t ) {', '}', '} else {', 'if ( stepStart - step < = t ) {', 'stepSize = - step ;', 'stepSize = step ;', 'Assert . assertTrue ( t < = FastMath . nextAfter ( end , Double . POSITIVE INFINITY ) ) ;']","['return 12 . 5 - 3 . 5 * 3 . 5 ;', '@ Test', 'Assert . assertEquals ( 3 , diceDistribution . inverseCumulativeProbability ( ( 3d - Double . MIN VALUE ) / 6d ) ) ;', '}', 'Assert . assertEquals ( 5 , diceDistribution . inverseCumulativeProbability ( ( 5d - precision ) / 6d ) ) ;', 'Assert . assertEquals ( 4 , diceDistribution . inverseCumulativeProbability ( ( 4d - Double . MIN VALUE ) / 6d ) ) ;', 'Assert . assertEquals ( 6 , diceDistribution . inverseCumulativeProbability ( ( 6d - precision ) / 6d ) ) ;', 'double precision = 0 . 000000000000001 ;', 'Assert . assertEquals ( 6 , diceDistribution . inverseCumulativeProbability ( ( 5d + precision ) / 6d ) ) ;', '{']","['final BinomialDistribution distribution = new BinomialDistribution ( numberOfTrials , probability ) ;', 'final BinomialDistribution distribution = new BinomialDistribution ( null , numberOfTrials , probability ) ;', 'ChiSquaredDistribution distribution =', 'final ChiSquaredDistribution distribution =', 'new ChiSquaredDistribution ( expected . length - 1 . 0 ) ;', 'new ChiSquaredDistribution ( null , ( double ) observed1 . length - 1 ) ;', 'distribution = new ChiSquaredDistribution ( df ) ;', 'new ChiSquaredDistribution ( null , expected . length - 1 . 0 ) ;', 'ChiSquaredDistribution distribution ;', 'final ChiSquaredDistribution distribution = new ChiSquaredDistribution ( df ) ;']","['package org . apache . commons . math3 . fitting . leastsquares ;', 'import org . apache . commons . math3 . linear . RealVector ;', '}', 'RealVector validate ( RealVector params ) ;', 'public interface ParameterValidator {']","['return LeastSquaresFactory . create ( model , target , start , weight , checker , maxEvaluations , maxIterations ) ;', 'lazyEvaluation = newValue ;', 'private boolean lazyEvaluation ;', 'maxEvaluations ,', 'maxIterations ,', 'paramValidator = newValidator ;', 'lazyEvaluation ,', 'paramValidator ) ;', 'public LeastSquaresBuilder parameterValidator ( final ParameterValidator newValidator ) {', 'checker ,']","['currentPoint = current . getPoint ( ) ;', 'final double [ ] currentPoint = problem . getStart ( ) . toArray ( ) ;', 'double [ ] currentPoint = current . getPoint ( ) . toArray ( ) ;', '= problem . getConvergenceChecker ( ) ;', 'currentPoint = current . getPoint ( ) . toArray ( ) ;', 'Evaluation current = problem . evaluate ( new ArrayRealVector ( currentPoint ) ) ;', 'Evaluation current = problem . evaluate ( problem . getStart ( ) ) ;', 'final ConvergenceChecker < Evaluation > checker', 'final ConvergenceChecker < Evaluation > checker = problem . getConvergenceChecker ( ) ;', 'System . out . println ( ""n = "" + numEval + "" nc = "" + cheatNumEval ) ;']","['System . out . println ( ""n = "" + numEval + "" nc = "" + cheatNumEval ) ;']","['double x2 = yvals [ indexOfThirdSample ] ;', 'double x2 = yvals [ indexOfThirdSample ] ;', 'private PolynomialSplineFunction interpolateHermiteSorted ( double [ ] xvals ,', 'private PolynomialSplineFunction interpolateHermiteSorted ( double [ ] xvals ,', 'for ( int i = 0 ; i < differences . length ; i + + ) {', 'for ( int i = 0 ; i < differences . length ; i + + ) {', 'double t1 = xvals [ indexOfSecondsample ] - xvals [ indexOfFirstSample ] ;', 'double t1 = xvals [ indexOfSecondsample ] - xvals [ indexOfFirstSample ] ;', '( xvals [ i + 1 ] - xvals [ i ] ) ;', '( xvals [ i + 1 ] - xvals [ i ] ) ;']","['NoDataException , NonMonotonicSequenceException {', 'if ( x < 0 | | x > 1 ) {', 'import org . apache . commons . math3 . analysis . polynomials . PolynomialSplineFunction ;', 'return partialDerivativeY ;', 'return r ;', 'public double partialDerivativeXX ( double x , double y )', 'interpArray [ zIndex ] = spline . value ( x ) ;', 'final double [ ] [ ] aX = new double [ N ] [ N ] ;', '}', 'aY [ i ] [ j ] = j * c ;']","['@ Deprecated', '@ Deprecated']","['public double [ ] getInterpolatedDerivatives ( ) throws MaxCountExceededException {', 'return steps . get ( index ) . getInterpolatedDerivatives ( ) ;', '}', 'double [ ] interpolatedY = cm . getInterpolatedState ( ) ;', 'maxErrorDot = FastMath . max ( maxErrorDot , errorDot ) ;', 'if ( error > maxError ) {', 'double maxError = 0 . 0 ;', '}', 'double [ ] interpolatedYDot = cm . getInterpolatedDerivatives ( ) ;', 'Assert . assertTrue ( maxError < 1 . 0e - 9 ) ;']","['throws MaxCountExceededException {', 'return steps . get ( index ) . getInterpolatedSecondaryDerivatives ( secondaryStateIndex ) ;', 'public double [ ] getInterpolatedSecondaryDerivatives ( final int secondaryStateIndex )', '}']","['maxEvaluations ,', 'maxEvaluations ,']","['final double distB = FastMath . abs ( distance ( point , c . getCenter ( ) ) ) ;', 'double maxMembership = Double . MIN VALUE ;', 'double maxMembership = 0 . 0 ;', 'sum = Double . POSITIVE INFINITY ;', 'sum + = FastMath . pow ( distA / distB , 2 . 0 / ( fuzziness - 1 . 0 ) ) ;', 'break ;', 'membershipMatrix [ i ] [ j ] = 1 . 0 / sum ;', '} else if ( sum = = Double . POSITIVE INFINITY ) {', 'for ( final CentroidCluster < T > c : clusters ) {', 'final double distB = FastMath . abs ( distance ( point , c . getCenter ( ) ) ) ;']","['double w2 = w * w ;', 'throw new NumberIsTooSmallException ( LocalizedFormats . NUMBER OF POINTS ,', 'double x2 = yvals [ indexOfThirdSample ] ;', 'differences [ i ] = ( yvals [ i + 1 ] - yvals [ i ] ) / ( xvals [ i + 1 ] - xvals [ i ] ) ;', 'public PolynomialSplineFunction interpolate ( double [ ] xvals , double [ ] yvals )', 'firstDerivatives [ xvals . length - 1 ] = differentiateThreePoint ( xvals , yvals , xvals . length - 1 ,', 'public AkimaSplineInterpolator ( ) {', 'final double yv = yvals [ i ] ;', 'throw new NumberIsTooSmallException (', 'xvals . length - 3 , xvals . length - 2 ,']","['qr = new QRDecomposition ( getX ( ) ) ;', 'qr = new QRDecomposition ( getX ( ) , threshold ) ;']","['private void testInterpolation ( double minimumX , double maximumX , double minimumY , double maximumY ,', 'zValues ) ;', '} catch ( NullArgumentException iae ) {', 'double maximumY ,', 'Assert . fail ( ""Failed to detect data set array with different sizes . "" ) ;', 'numberOfSamples ,', 'final double deltaY = ( maximumY - minimumY ) / ( ( double ) numberOfElements ) ;', 'PiecewiseBicubicSplineInterpolatingFunction bcf = new PiecewiseBicubicSplineInterpolatingFunction ( xval , yval , zval ) ;', 'for ( int i = 0 ; i < numberOfElements ; i + + ) {', 'Assert . fail ( ""Failed to detect insufficient y data"" ) ;']","['final MultivariateMatrixFunction jacobian ) {', 'final MultivariateMatrixFunction jacobian ) {', 'public static ValueAndJacobianFunction model ( final MultivariateVectorFunction value ,', 'public static MultivariateJacobianFunction model ( final MultivariateVectorFunction value ,']","['if ( loop . size ( ) < 2 ) {', 'if ( loop . size ( ) < 2 | |', '( loop . size ( ) = = 2 & & loop . get ( 0 ) . getStart ( ) = = null & & loop . get ( 1 ) . getEnd ( ) = = null ) ) {', 'minus . chopOffPlus ( hyperplane ) ;', 'plus . chopOffPlus ( hyperplane , vanishingHandler ) ;', 'private void chopOffPlus ( final Hyperplane < S > hyperplane ) {', '}', 'new BSPTree < S > ( attribute ) , null ) ;', 'minus . chopOffPlus ( hyperplane , vanishingHandler ) ;', 'private void chopOffMinus ( final Hyperplane < S > hyperplane ) {']","['* /', '} ) ;', '>', '@ Deprecated', 'import org . apache . commons . math3 . exception . MathIllegalStateException ;', 'throw new MathIllegalStateException ( LocalizedFormats . NULL NOT ALLOWED ) ;', '}', 'public BSPTree < S > fixNode ( BSPTree < S > node ) {', 'insertInTree ( parentTree , isPlusChild , new VanishingCutHandler < S > ( ) {', 'import org . apache . commons . math3 . exception . util . LocalizedFormats ;']","['if ( x < 0 | | x > 1 ) {', 'return true ;', 'throw new NoDataException ( ) ;', 'return r ;', 'final double y3 = y2 * y ;', '{ - 3 , 0 , 3 , 0 , 0 , 0 , 0 , 0 , - 2 , 0 , - 1 , 0 , 0 , 0 , 0 , 0 } ,', 'private final BicubicFunction [ ] [ ] splines ;', 'if ( xLen ! = dFdX . length ) {', 'if ( dFdY [ i ] . length ! = yLen ) {', 'x > xval [ xval . length - 1 ] | |']","['new Line ( pA , pB , 1 . 0 / 256 ) ,', 'Vector2D pC = new Vector2D ( 1 . 0 / 64 . 0 , 0 . 0 ) ;', '@ Test', 'import org . apache . commons . math3 . geometry . partitioning . Hyperplane ;', '}', 'new Line ( pB , pC , 1 . 0 / 16 ) ,', 'new Line ( pB , pC , 1 . 0 / 256 ) ,', 'Vector2D pA = new Vector2D ( 0 . 0 , 1 . 0 ) ;', 'new Line ( pA , pB , 1 . 0 / 16 ) ,', 'new Line ( pD , pA , 1 . 0 / 16 )']","['final double rCos = cXX * line . cos + cXY * line . sin ;', 'return new Vector2D ( MathArrays . linearCombination ( cos , other . originOffset , - other . cos , originOffset ) / d ,', 'return new Vector2D ( ( cos * other . originOffset - other . cos * originOffset ) / d ,', 'originOffset = MathArrays . linearCombination ( cos , p . getY ( ) , - sin , p . getX ( ) ) ;', 'cYX * x + cYY * y + cY1 ) ;', 'c1X = MathArrays . linearCombination ( cXX , cY1 , - cYX , cX1 ) ;', 'abscissa * sin + originOffset * cos ) ;', 'final double rCos = MathArrays . linearCombination ( cXX , line . cos , cXY , line . sin ) ;', 'final double rOffset = c1X * line . cos + c1Y * line . sin + c11 * line . originOffset ;', 'return new Vector2D ( MathArrays . linearCombination ( abscissa , cos , - originOffset , sin ) ,']","['final SubHyperplane < S > tPO = ( attribute . getPlusOutside ( ) = = null ) ?', 'null : ( ( AbstractSubHyperplane < S , T > ) attribute . getPlusOutside ( ) ) . applyTransform ( transform ) ;', 'attribute ) ;', '}', 'final SubHyperplane < S > tSub = ( ( AbstractSubHyperplane < S , T > ) sub ) . applyTransform ( transform ) ;', 'BoundaryAttribute < S > attribute = ( BoundaryAttribute < S > ) node . getAttribute ( ) ;', 'return buildNew ( recurseTransform ( getTree ( false ) , transform ) ) ;', 'if ( entry . getKey ( ) . getCut ( ) ! = null ) {', 'null : ( ( AbstractSubHyperplane < S , T > ) attribute . getPlusOutside ( ) ) . applyTransform ( transform ) ;', 'for ( final BSPTree < S > splitter : original . getSplitters ( ) ) {']","['extends PiecewiseBicubicSplineInterpolator {', 'extends BicubicSplineInterpolator {', 'public PiecewiseBicubicSplineInterpolatingFunction interpolate ( final double [ ] xval ,', 'public BicubicSplineInterpolatingFunction interpolate ( final double [ ] xval ,']","['@ Deprecated', '@ Deprecated', '@ Deprecated']","['- cos , - sin , - originOffset , tolerance ) ;', 'private void unlinkReverse ( ) {', 'return new Line ( ( angle < FastMath . PI ) ? ( angle + FastMath . PI ) : ( angle - FastMath . PI ) ,', 'return reverse ;', 'reverse = null ;', 'reverse = null ;', 'unlinkReverse ( ) ;', 'if ( reverse ! = null ) {', '}', 'this . reverse = null ;']","['return true ;', 'this . processed = false ;', 'final ComparableSegment lowerLeft = new ComparableSegment ( end , - 1 . 0e - 10 , - 1 . 0e - 10 ) ;', '+ + connected ;', 'loop . add ( selectedSegment ) ;', 'return node ;', '@ Override', 'final ArrayList < List < ConnectableSegment > > loops = new ArrayList < List < ConnectableSegment > > ( ) ;', 'final AVLTree < ComparableSegment > . Node node = sorted . getSmallest ( ) ;', 'return segment ;']","['@ Deprecated', '@ Deprecated', '@ Deprecated']","['break ;', 'if ( segment . getNext ( ) = = null & & segment . getEnd ( ) ! = null ) {', 'if ( segment . getNext ( ) = = null ) {', 'ConnectableSegment selectedNext = null ;', '+ + connected ;', 'if ( min < = getTolerance ( ) ) {', 'Vector2D . distance ( end , candidateNext . getStart ( ) ) < = getTolerance ( ) ) {', '+ + connected ;', 'candidateNext . setPrevious ( segment ) ;', 'final double distance = Vector2D . distance ( end , candidateNext . getStart ( ) ) ;']","['return 0 . 0 ;', 'return Double . NEGATIVE INFINITY ;']","['private List < ConnectableSegment > followLoop ( final ConnectableSegment defining ) {', '}', 'final List < ConnectableSegment > loop = followLoop ( s ) ;', 'if ( next ! = null & &', 'return null ;', 'final List < Segment > loop = followLoop ( s ) ;', 'final List < ConnectableSegment > loop = new ArrayList < ConnectableSegment > ( ) ;', 'Precision . equals ( previous . getLine ( ) . getAngle ( ) , next . getLine ( ) . getAngle ( ) , Precision . EPSILON ) ) {', 'return loop ;', 'final List < Segment > loop = new ArrayList < Segment > ( ) ;']","['if ( x < 0 | | x > 1 ) {', 'd2FdXdZ [ i ] [ j ] [ k ] * xRzR , d2FdXdZ [ ip1 ] [ j ] [ k ] * xRzR ,', 'return true ;', '{ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 2 , 0 , 0 , 0 , - 2 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 } ,', 'double [ ] [ ] [ ] dFdZ ,', 'throw new NoDataException ( ) ;', 'final double y3 = y2 * y ;', 'throw new DimensionMismatchException ( d2FdXdZ [ i ] . length , yLen ) ;', 'if ( c < val [ 0 ] ) {', 'if ( d2FdYdZ [ i ] . length ! = yLen ) {']","['return true ;', 'final double nY = yval [ nJ ] ;', 'throw new NoDataException ( ) ;', 'final double deltaYZ = deltaY * deltaZ ;', '@ Override', 'final double [ ] [ ] [ ] dFdZ = new double [ xLen ] [ yLen ] [ zLen ] ;', 'final double [ ] [ ] [ ] d3FdXdYdZ = new double [ xLen ] [ yLen ] [ zLen ] ;', 'd2FdXdY [ i ] [ j ] [ k ] = ( fval [ nI ] [ nJ ] [ k ] - fval [ nI ] [ pJ ] [ k ] - fval [ pI ] [ nJ ] [ k ] + fval [ pI ] [ pJ ] [ k ] ) / deltaXY ;', 'final double pZ = zval [ pK ] ;', 'dFdZ [ i ] [ j ] [ k ] = ( fval [ i ] [ j ] [ nK ] - fval [ i ] [ j ] [ pK ] ) / deltaZ ;']","['private final int maxIter ;', 'final AbstractCurveFitter . TheoreticalValuesFunction model', 'final double [ ] weights = new double [ len ] ;', 'this . initialGuess = initialGuess ;', 'import org . apache . commons . math3 . linear . DiagonalMatrix ;', '}', 'protected LeastSquaresProblem getProblem ( Collection < WeightedObservedPoint > observations ) {', 'this . function = function ;', 'maxIter ) ;', 'public class SimpleCurveFitter extends AbstractCurveFitter {']","['a [ i ] = i ;', 'int stride ) {', 'final int [ ] a = new int [ n ] ;', '}', 'for ( int i = 0 ; i < n ; i + + ) {', 'final int [ ] a = new int [ size ] ;', 'int start ,', 'return sequence ( n , 0 , 1 ) ;', 'for ( int i = 0 ; i < size ; i + + ) {', 'a [ i ] = start + i * stride ;']","['if ( x . length * y . length < SMALL SAMPLE PRODUCT ) {', 'if ( lengthProduct < LARGE SAMPLE PRODUCT ) {', 'if ( x . length * y . length < LARGE SAMPLE PRODUCT ) {', 'if ( lengthProduct < SMALL SAMPLE PRODUCT ) {', 'final long lengthProduct = ( long ) x . length * y . length ;', 'double [ ] y = new double [ n ] ;', '@ Test ( timeout = 5000 )', 'Assert . assertTrue ( n * n < 0 ) ;', 'Assert . assertFalse ( Double . isNaN ( test . kolmogorovSmirnovTest ( x , y ) ) ) ;', 'final KolmogorovSmirnovTest test = new KolmogorovSmirnovTest ( ) ;']","['RealMatrix kalmanGain = errorCovariance . multiply ( measurementMatrixT ) . multiply ( invertedS ) ;', 'RealMatrix kalmanGain = new CholeskyDecomposition ( s ) . getSolver ( )', 'RealMatrix invertedS = MatrixUtils . inverse ( s ) ;', '. transpose ( ) ;', '. solve ( measurementMatrix . multiply ( errorCovariance . transpose ( ) ) )', 'import org . apache . commons . math3 . linear . CholeskyDecomposition ;']","['import org . apache . commons . math3 . util . FastMath ;', 'import org . apache . commons . math3 . util . FastMath ;', 'import org . apache . commons . math3 . special . Beta ;', 'import org . apache . commons . math3 . special . Beta ;', 'import org . apache . commons . math3 . special . Gamma ;', 'import org . apache . commons . math3 . special . Gamma ;', 'import org . apache . commons . math3 . util . FastMath ;', 'import org . apache . commons . math3 . util . FastMath ;', 'import org . apache . commons . math3 . special . Beta ;', 'import org . apache . commons . math3 . special . Beta ;']","['double test = 2 * ENSIG ;', 'sum + = b [ 0 ] * alp2em ;', 'if ( alp2em = = 0 ) {', 'for ( n = 0 ; n < nb ; n + + ) {', 'en - = 2 . 0 ;', 'sum = tempa * alpem * alp2em / em ;', 'if ( alpem = = 0 ) {', 'if ( nb < = 1 ) {', 'ncalc = nb ;', 'if ( ( b [ n ] = = 0 ) & & ( ncalc > n ) ) {']","['BESSEL FUNCTION FAILED CONVERGENCE ( ""Bessel function of order { 0 } failed to converge for x = { 1 } "" ) ,', 'BESSEL FUNCTION BAD ARGUMENT ( ""Bessel function of order { 0 } cannot be computed for x = { 1 } "" ) ,', 'import org . apache . commons . math3 . exception . ConvergenceException ;']","['Assert . assertEquals ( 320 , LocalizedFormats . values ( ) . length ) ;', 'Assert . assertEquals ( 322 , LocalizedFormats . values ( ) . length ) ;']","['private CombinatoricsUtils ( ) {', 'private CombinatoricsUtils ( ) { }', 'super ( ) ;', '}']",['@ Deprecated'],"['@ Override', '@ Override']","['return Arrays . copyOf ( vals , vals . length ) ;', 'import org . apache . commons . math3 . util . MathArrays ;', 'return new BesselJResult ( Arrays . copyOf ( b , b . length ) ,', 'return new BesselJResult ( MathArrays . copyOf ( b , b . length ) , ncalc ) ;', 'return new BesselJResult ( Arrays . copyOf ( b , b . length ) , ncalc ) ;', 'return new BesselJResult ( MathArrays . copyOf ( b , b . length ) ,', 'import java . util . Arrays ;', 'vals = MathArrays . copyOf ( b , b . length ) ;', 'vals = Arrays . copyOf ( b , b . length ) ;', 'return MathArrays . copyOf ( vals , vals . length ) ;']","['public double calculateTotalSumOfSquares ( ) throws MathIllegalArgumentException {', 'public double calculateTotalSumOfSquares ( ) {', 'public double calculateRSquared ( ) throws MathIllegalArgumentException {', 'public double calculateAdjustedRSquared ( ) {', 'public double calculateAdjustedRSquared ( ) throws MathIllegalArgumentException {', 'public double calculateRSquared ( ) {', 'public void testNoDataNPESSTO ( ) {', '@ Test ( expected = org . apache . commons . math3 . linear . SingularMatrixException . class )', 'OLSMultipleLinearRegression model = new OLSMultipleLinearRegression ( ) ;', 'model . newSampleData ( new double [ ] { 1 , 2 , 3 , 1 , 2 , 3 , 1 , 2 , 3 } , 3 , 2 ) ;']","['dist = new TDistribution ( i * 5 ) ;', '@ Test', 'dist . cumulativeProbability ( Double . POSITIVE INFINITY ) , Double . MIN VALUE ) ;', 'Assert . assertEquals ( 1 ,', 'dist . cumulativeProbability ( Double . NEGATIVE INFINITY ) , Double . MIN VALUE ) ;', '}', 'for ( int i = 1 ; i < 11 ; i + + ) {', 'TDistribution dist ;', 'public void testCumulativeProbablilityExtremes ( ) {', 'Assert . assertEquals ( 0 ,']","['Assert . assertEquals ( 0 . 0 , regression . getSignificance ( ) , Double . MIN VALUE ) ;', '@ Test', 'Assert . assertEquals ( 0 . 0 , regression . getSlopeStdErr ( ) , 0 . 0 ) ;', 'Assert . assertEquals ( 1 , regression . getRSquare ( ) , Double . MIN VALUE ) ;', 'public void testPerfect2 ( ) {', '}', 'SimpleRegression regression = new SimpleRegression ( ) ;', 'regression . addData ( 0 , 0 ) ;', 'regression . addData ( 2 , 2 ) ;', 'regression . addData ( 1 , 1 ) ;']","['System . out . println ( ""getXSumSquares ( ) = "" + regression . getXSumSquares ( ) ) ;']","['System . out . println ( ""getMeanSquareError ( ) = "" + regression . getMeanSquareError ( ) ) ;']","['Assert . assertEquals ( 1 , diceDistribution . inverseCumulativeProbability ( ( 1d - Double . MIN VALUE ) / 6d ) ) ;', 'Assert . assertEquals ( 1 , diceDistribution . inverseCumulativeProbability ( ( 1d - Double . MIN VALUE ) / 6d ) ) ;', 'Assert . assertEquals ( 6 , diceDistribution . inverseCumulativeProbability ( ( 6d - precision ) / 6d ) ) ;', 'Assert . assertEquals ( 6 , diceDistribution . inverseCumulativeProbability ( ( 6d - precision ) / 6d ) ) ;', 'Assert . assertEquals ( 5 , diceDistribution . inverseCumulativeProbability ( ( 4d + precision ) / 6d ) ) ;', 'Assert . assertEquals ( 5 , diceDistribution . inverseCumulativeProbability ( ( 4d + precision ) / 6d ) ) ;', 'double precision = 0 . 000000000000001 ;', 'double precision = 0 . 000000000000001 ;', 'Assert . assertEquals ( 3 , diceDistribution . inverseCumulativeProbability ( ( 3d - Double . MIN VALUE ) / 6d ) ) ;', 'Assert . assertEquals ( 3 , diceDistribution . inverseCumulativeProbability ( ( 3d - Double . MIN VALUE ) / 6d ) ) ;']","['if ( n < 2 ) {', 'if ( n < 2 ) {', 'if ( !Double . isNaN ( sumXX ) ) {', 'throw new NoDataException ( LocalizedFormats . NOT ENOUGH DATA REGRESSION ) ;', 'throw new NoDataException ( LocalizedFormats . NOT ENOUGH DATA REGRESSION ) ;', '}', '}', 'if ( !Double . isNaN ( sumXX ) ) {', 'sumY , syy , getSumSquaredErrors ( ) , true , false ) ;', 'final double [ ] vcv = new double [ ] { getMeanSquareError ( ) / sumXX } ;']","['public void testExpInf ( ) {', 'public void testExpInf7 ( ) {', 'public void testExpInf4 ( ) {', 'public void testExpInf1 ( ) {', '@ Test', 'public void testExpInf6 ( ) {', '}', 'public void testExpInf8 ( ) {', 'public void testExpInf5 ( ) {', 'public void testExpInf3 ( ) {']","['TestUtils . assertSame ( Complex . ZERO , negInfOne . exp ( ) ) ;', 'TestUtils . assertSame ( Complex . ZERO , exp ) ;', 'System . out . println ( ""expReal = "" + FastMath . exp ( negInfOne . getReal ( ) ) ) ;', 'System . out . println ( ""result = "" + exp ) ;', 'System . out . println ( ""cosImag = "" + FastMath . cos ( negInfOne . getImaginary ( ) ) ) ;', 'System . out . println ( ""sinImag = "" + FastMath . sin ( negInfOne . getImaginary ( ) ) ) ;', 'final Complex exp = negInfOne . exp ( ) ;']","['double inf = negInfOne . getReal ( ) ;', 'System . out . println ( intVal ) ;', 'int intVal = ( int ) - inf ;', 'System . out . println ( inf ) ;']","['System . out . println ( t + "" = "" + System . getProperty ( t ) ) ;', '@ Test', '""java . version"" ,', '}', '""java . specification . vendor"" ,', '""java . specification . version"" ,', '""java . vm . vendor"" ,', 'public void testJava ( ) {', '""java . vm . specification . version"" ,', '""java . vendor"" ,']","['System . out . println ( intVal ) ;', 'System . out . println ( ""intval = "" + intVal ) ;', 'System . out . println ( inf ) ;', 'System . out . println ( "" > > testJava ( ) "" ) ;', 'System . out . println ( "" < < testExpInf4 ( ) "" ) ;', 'System . out . println ( ""inf = "" + inf ) ;', 'System . out . println ( "" < < testJava ( ) "" ) ;', 'System . out . println ( "" > > testExpInf4 ( ) "" ) ;']","['import java . util . List ;', 'import java . util . List ;', 'System . out . println ( ""neginf < 0 = "" + ( inf < 0 . 0 ) ) ;']","['System . out . println ( ""intval = "" + intVal ) ;', 'System . out . println ( ""Computing FastMath . exp ( x = "" + x + "" ) "" ) ;', '@ Ignore']","['System . out . println ( ""intval = "" + intVal ) ;', 'System . out . println ( ""Computing FastMath . exp ( x = "" + x + "" ) "" ) ;', '@ Ignore']","['System . out . println ( ""Computing exp ( "" + x + "" ) "" ) ;']","['if ( intVal > 746 ) {', 'if ( intVal > 746 | | x < Integer . MIN VALUE ) {']","['return n > 0 ? FastMath . sqrt ( getSumsq ( ) / n ) : Double . NaN ;', 'public double getQuadraticMean ( ) {', '}', 'final long n = getN ( ) ;', 'return n > 0 ? FastMath . sqrt ( getSumsq ( ) / n ) : Double . NaN ;', 'public double getQuadraticMean ( ) {', '}', 'final long n = getN ( ) ;', '@ Test', 'final int len = values . length ;']","['return super . getQuadraticMean ( ) ;', '@ Override', '}', 'public synchronized double getQuadraticMean ( ) {', 'return super . getQuadraticMean ( ) ;', '@ Override', '}', 'public synchronized double getQuadraticMean ( ) {']","['intPartB = ExpIntTable . EXP INT TABLE B [ EXP INT TABLE MAX INDEX + intVal ] ;', 'intPartB = ExpIntTable . EXP INT TABLE B [ EXP INT TABLE MAX INDEX + intVal ] ;', 'if ( intVal = = 709 ) {', 'if ( intVal < - 709 ) {', 'intVal + + ;', 'intPartA = ExpIntTable . EXP INT TABLE A [ EXP INT TABLE MAX INDEX + intVal ] ;', 'intVal = ( int ) x ;', 'int intVal = ( int ) x ;', 'intPartA = ExpIntTable . EXP INT TABLE A [ EXP INT TABLE MAX INDEX + intVal ] ;', 'intVal - - ;']","['if ( x < - 746d ) {', 'if ( x < - 746d ) {']","['return n > 0 ? FastMath . sqrt ( getSumsq ( ) / n ) : Double . NaN ;', 'return size > 0 ? FastMath . sqrt ( getSumsq ( ) / size ) : Double . NaN ;', 'final long n = getN ( ) ;', 'final long size = getN ( ) ;']","['final double absoluteAccuracy ,', 'final double absoluteAccuracy ,', 'final double functionValueAccuracy ) {', 'final double functionValueAccuracy ) {', 'final double absoluteAccuracy ) {', 'final double absoluteAccuracy ) {']","['protected int windowSize = INFINITE WINDOW ;', 'private int windowSize = INFINITE WINDOW ;']","['double fLo , double fHi ) {', 'private double laguerre ( double lo , double hi ,', '@ Deprecated', 'double fLo , double fHi ) {', 'public double laguerre ( double lo , double hi ,']","['int k2p = k ;', 'e > > = 1 ;', 'throw new NotPositiveException ( LocalizedFormats . EXPONENT , e ) ;', 'k2p * = k2p ;', 'public static long pow ( final long k , long e ) throws NotPositiveException {', 'long result = 1l ;', 'result * = k2p ;', 'return result ;', '@ Deprecated', '}']","['return center ;', '}', 'package org . apache . commons . math4 . stat . clustering ;', 'import java . io . Serializable ;', 'private final List < T > points ;', 'public void addPoint ( final T point ) {', 'private static final long serialVersionUID = - 3442297081515880464L ;', 'this . center = center ;', 'public List < T > getPoints ( ) {', 'import java . util . List ;']","['import org . apache . commons . math4 . exception . util . LocalizedFormats ;', 'Assert . assertEquals ( 321 , LocalizedFormats . values ( ) . length ) ;', 'Assert . assertEquals ( 322 , LocalizedFormats . values ( ) . length ) ;']","['( numIterations < maximumIterations ) & & ( a > lowerBound | | b > upperBound ) ;', '( numIterations < maximumIterations ) & & ( a > lowerBound | | b < upperBound ) ;', 'Assert . assertTrue ( result [ 0 ] < = 0 ) ;', 'public void testBracketLoopConditionForB ( ) {', '@ Test', '}', 'double [ ] result = UnivariateSolverUtils . bracket ( sin , - 0 . 9 , - 1 , 1 , 0 . 1 , 1 , 100 ) ;', 'Assert . assertTrue ( result [ 1 ] > = 0 ) ;']","['randomData . reSeed ( seed ) ;', 'protected AbstractIntegerDistribution ( ) {', 'random = null ;', '@ Deprecated', 'protected final RandomDataImpl randomData = new RandomDataImpl ( ) ;', '}', 'import org . apache . commons . math4 . random . RandomDataImpl ;', 'randomData . reSeed ( seed ) ;', 'random = null ;', '@ Deprecated']","['i3 = new int [ r ] ;', 'final int r = calculateBlockCount ( k ) ;', 'iRm2 = new int [ r ] ;', 'i3 = new int [ r ] ;', '}', 'iRm2 = new int [ r ] ;', 'this ( k , m1 , m2 , m3 , null ) ;', '}', 'i2 [ j ] = ( j + m2 ) % r ;', 'public int getIndexPred ( final int index ) {']","['private static final double [ ] WEIGHTS 5 = {', 'private static final double [ ] ABSCISSAS 4 = {', 'DEFAULT MIN ITERATIONS COUNT , DEFAULT MAX ITERATIONS COUNT ) ;', 'import org . apache . commons . math4 . util . FastMath ;', 'private final double [ ] abscissas ;', '1 . 0 ,', '@ Override', 'break ;', 'weights = WEIGHTS 4 ;', 'throws MathIllegalArgumentException {']","['public double getUpper ( ) {', 'return getSize ( ) ;', 'return getInf ( ) ;', 'return getSup ( ) ;', 'return getBarycenter ( ) ;', '@ Deprecated', '}', 'public double getLength ( ) {', 'public double getLower ( ) {', 'public double getMidPoint ( ) {']","['checkArray ( ""compare vect"" , v ebeMultiply . getData ( ) , result ebeMultiply ) ;', 'checkArray ( ""compare vect"" , v projection . toArray ( ) , result projection ) ;', 'checkArray ( ""compare vect"" , v projection . getData ( ) , result projection ) ;', 'checkArray ( ""compare vect"" , v subtract . toArray ( ) , result subtract ) ;', 'checkArray ( ""compare vect"" , v ebeDivide . getData ( ) , result ebeDivide ) ;', 'checkArray ( ""compare vect"" , v ebeDivide . toArray ( ) , result ebeDivide ) ;', 'checkArray ( ""compare vect"" , v subtract . getData ( ) , result subtract ) ;', 'checkArray ( ""compare vect"" , v ebeMultiply . toArray ( ) , result ebeMultiply ) ;', 'checkArray ( ""compare vect"" , v add . getData ( ) , result add ) ;', 'checkArray ( ""compare vect"" , v add . toArray ( ) , result add ) ;']","['double logProbability ( int x ) ;', 'double logDensity ( double x ) ;']","['throws NumberIsTooLargeException {', 'this ( new Well19937c ( ) , lower , upper ) ;', 'this ( rng , lower , upper ) ;', '@ Deprecated', '}', 'double upper ,', 'public UniformRealDistribution ( double lower , double upper , double inverseCumAccuracy )', 'double lower ,', 'public UniformRealDistribution ( RandomGenerator rng ,', 'public static final double DEFAULT INVERSE ABSOLUTE ACCURACY = 1e - 9 ;']","['public static double pow ( double x , double y ) {', 'public static double pow ( final double x , final double y ) {']","['if ( x * x < 1 . 0 ) {', 'return y ;', 'if ( x * x > 1 . 0 ) {', 'if ( y ! = y ) {', 'if ( abs ( x ) > 1 . 0 ) {', '}', 'if ( abs ( x ) < 1 . 0 ) {']","['return y ;', 'if ( x * x < 1 . 0 ) {', 'if ( y ! = y ) {', 'if ( x * x > 1 . 0 ) {', 'if ( abs ( x ) > 1 . 0 ) {', '}', 'if ( abs ( x ) < 1 . 0 ) {']","['public double cumulativeProbability ( int x0 , int x1 ) throws NumberIsTooLargeException {', 'public double probability ( int x0 , int x1 ) throws NumberIsTooLargeException {', 'return probability ( x0 , x1 ) ;', '@ Deprecated', 'public double cumulativeProbability ( double x0 , double x1 ) throws NumberIsTooLargeException {', '}', 'double cumulativeProbability ( int x0 , int x1 ) throws NumberIsTooLargeException ;', 'double probability ( int x0 , int x1 ) throws NumberIsTooLargeException ;', 'double cumulativeProbability ( int x ) ;', 'double cumulativeProbability ( int x ) ;']","['super ( pattern , arguments ) ;', 'return context ;', 'private static final long serialVersionUID = - 6024911025449780478L ;', 'public ExceptionContext getContext ( ) {', 'public class NullArgumentException extends MathIllegalArgumentException {', 'return context . getLocalizedMessage ( ) ;', 'public class NullArgumentException extends NullPointerException', 'private static final long serialVersionUID = 20150225L ;', 'import org . apache . commons . math4 . exception . util . ExceptionContext ;', '}']","['NOT SUPPORTED NAN STRATEGY ( ""NaN strategy { 0 } not supported"" ) ,', 'return input ;', 'public SpearmansCorrelation ( final RankingAlgorithm rankingAlgorithm )', 'public SpearmansCorrelation ( final RealMatrix dataMatrix , final RankingAlgorithm rankingAlgorithm ) {', 'throws MathIllegalArgumentException {', 'NaNStrategy . REMOVED = = ( ( NaturalRanking ) rankingAlgorithm ) . getNanStrategy ( ) ) {', 'NaNStrategy . REMOVED = = ( ( NaturalRanking ) rankingAlgorithm ) . getNanStrategy ( ) ) {', 'y = removeValues ( yArray , nanPositions ) ;', 'return new PearsonsCorrelation ( ) . correlation ( rankingAlgorithm . rank ( xArray ) ,', 'result [ j + + ] = input [ i ] ;']","['private RealMatrix measurementMatrix ;', 'private final RealMatrix measurementMatrix ;', 'private RealMatrix measurementNoise ;', '@ Override', 'private final RealMatrix measurementNoise ;', 'private RealMatrix controlMatrix ;', 'private final RealMatrix controlMatrix ;', 'private RealVector initialStateEstimateVector ;', 'private final RealMatrix stateTransitionMatrix ;', 'private RealMatrix processNoiseCovMatrix ;']","['if ( bStats . getN ( ) = = 1 ) {', 'if ( bStats . getN ( ) = = 1 | | bStats . getVariance ( ) = = 0 ) {', 'for ( int i = 0 ; i < 1000 ; i + + ) {', 'dist . reseedRandomGenerator ( 1000 ) ;', '@ Test', 'public void testNoBinVariance ( ) {', '}', 'Assert . assertTrue ( dev = = 0 | | dev = = 1 ) ;', 'final double [ ] data = { 0 , 0 , 1 , 1 } ;', 'final double dev = dist . sample ( ) ;']","['Assert . assertEquals ( 0 , dist . compute ( bestAfter . getFeatures ( ) , features ) , 0d ) ;', 'Assert . assertEquals ( 0 , dist . compute ( bestAfter . getFeatures ( ) , features ) , 1e - 16 ) ;']","['return pBminus + pB ;', 'if ( x < kernel . getNumericalMean ( ) ) {', '}', '} else {', 'return pBminus + pB ;', 'return pBminus ;', 'Assert . assertEquals ( 1 . 0 , dist . cumulativeProbability ( 13 ) , tol ) ;', 'Assert . assertEquals ( 0 . 0 , dist . cumulativeProbability ( 1 ) , tol ) ;', 'Assert . assertEquals ( 0 . 8 , dist . cumulativeProbability ( 10 ) , tol ) ;', 'Assert . assertEquals ( 0 . 8 , dist . cumulativeProbability ( 13 ) , tol ) ;']","['@ Override', 'final long low = ( ( long ) next ( 32 ) ) & 0xffffffffL ;', '@ Override', 'final long low = ( next ( 32 ) ) & 0xffffffffL ;', '@ Override', 'private double [ ] inputArray ;', '@ Override', '@ SuppressWarnings ( ""deprecation"" )', 'private final double [ ] inputArray ;', 'delta = ( max - min ) / ( ( double ) binCount ) ;']","['* /', 'T log10 ( ) ;', '@ Override', 'return intLog10 ( ) ;', 'public Dfp log10 ( ) {', '@ Deprecated', '@ Override', 'public int log10 ( ) {', 'return DfpMath . log ( this ) . divide ( DfpMath . log ( newInstance ( 10 ) ) ) ;', '* /']","['@ Override', 'public class ComplexField implements Field < Complex > , Serializable {', '@ Override', 'public class ComplexField implements Field < Complex > , Serializable {', '@ Override', 'import org . apache . commons . math4 . special . Gamma ;', '@ Override', '@ Override', '@ Override', '@ Override']","['double distance ( Vector < S > v ) ;', 'public double distance ( Vector < Euclidean1D > p ) {', '@ Override', '@ Deprecated', '}', 'return distance ( ( Point < Euclidean1D > ) p ) ;', 'public double distance ( Vector < Euclidean3D > v ) {', '@ Override', 'return distance ( ( Point < Euclidean3D > ) v ) ;', '}']","['private ExpansionMode expansionMode = ExpansionMode . MULTIPLICATIVE ;', 'public void clear ( ) {', 'LocalizedFormats . INDEX NOT POSITIVE ,', 'final ResizableDoubleArray other = ( ResizableDoubleArray ) object ;', 'System . arraycopy ( source . internalArray , 0 , dest . internalArray ,', 'return Arrays . equals ( internalArray , other . internalArray ) ;', 'case ADDITIVE :', 'public ResizableDoubleArray ( final ResizableDoubleArray original )', 'public synchronized void addElement ( double value ) {', 'public void setElement ( int index , double value ) {']",['@ Override'],"['@ Override', '@ Override', 'private double solverAbsoluteAccuracy = SOLVER DEFAULT ABSOLUTE ACCURACY ;', 'private final double solverAbsoluteAccuracy = SOLVER DEFAULT ABSOLUTE ACCURACY ;', '@ Override', '@ Override', '@ Override', '@ Override', '@ Override', '@ Override']","['@ Override', '@ Override', '@ Override', '@ Override', '@ Override', '@ Override', '@ Override', '@ Override']","['return true ;', 'delta = ( max - min ) / binCount ;', 'public boolean isSupportUpperBoundInclusive ( ) {', '}', 'delta = ( max - min ) / ( binCount ) ;', 'public boolean isSupportLowerBoundInclusive ( ) {']","['for ( double diag : rDiag ) {', 'return true ;', 'if ( FastMath . abs ( diag ) < = threshold ) {', 'e . getContext ( ) . addMessage ( LocalizedFormats . INDEX , i ) ;', 'return true ;', '}', 'if ( !isNonSingular ( ) ) {', 'for ( int i = 0 ; i < len ; i + + ) {', '}', 'import org . apache . commons . math4 . exception . util . LocalizedFormats ;']","['private final double solverAbsoluteAccuracy = SOLVER DEFAULT ABSOLUTE ACCURACY ;', 'return SOLVER DEFAULT ABSOLUTE ACCURACY ;', 'return solverAbsoluteAccuracy ;']",['@ Override'],"['break ;', 'if ( cut = = null ) {', '}']","['return FastMath . sqrt ( r . dotProduct ( r ) ) ;', 'final ArrayRealVector r = new ArrayRealVector ( getResiduals ( ) ) ;', 'final double cost = this . getCost ( ) ;', 'return getChiSquare ( ) / ( observationSize - numberOfFittedParameters + 1 ) ;', 'final ArrayRealVector r = new ArrayRealVector ( this . getResiduals ( ) ) ;', 'return FastMath . sqrt ( getChiSquare ( ) ) ;', 'return FastMath . sqrt ( cost * cost / this . observationSize ) ;', '}', 'return FastMath . sqrt ( getReducedChiSquare ( 1 ) ) ;', 'public double getReducedChiSquare ( int numberOfFittedParameters ) {']","['/ /', 'PolygonsSet lset = new PolygonsSet ( tol , p0 , p1 , p2 ) ;', '@ Test', 'Plane p = new Plane ( verts [ vidx [ 0 ] ] , verts [ vidx [ 1 ] ] , verts [ vidx [ 2 ] ] , tol ) ;', 'Set < SubHyperplane < Euclidean3D > > pset = new HashSet < SubHyperplane < Euclidean3D > > ( ) ;', 'verts [ 2 ] = new Vector3D ( xmax , ymax , zmin ) ;', '}', 'verts [ 0 ] = new Vector3D ( xmin , ymin , zmin ) ;', 'import org . apache . commons . math4 . geometry . partitioning . RegionParser ;', 'public void testDumpParse ( ) throws IOException , ParseException {']","['final boolean in = FastMath . abs ( offset ) < 1 . 0e - 10 ;', 'final boolean in = FastMath . abs ( offset ) < getTolerance ( ) ;', 'if ( hit3D ! = null ) {', 'if ( hit3D ! = null & & line . getAbscissa ( hit3D ) > line . getAbscissa ( point ) ) {', 'final Plane plane = ( Plane ) cut . getHyperplane ( ) ;', 'final Plane plane = ( Plane ) cut . getHyperplane ( ) ;', 'import java . io . Reader ;', 'SubHyperplane < Euclidean3D > plane = polyset . firstIntersection ( origin , line ) ;', 'double dotProduct = direction . dotProduct ( intersectionPoint . subtract ( origin ) ) ;', '@ Test']","['throws NumberIsTooLargeException , NotFiniteNumberException , NotANumberException {', 'throws NumberIsTooLargeException , NotFiniteNumberException , NotANumberException {']","['for ( int minor = 0 ; minor < FastMath . min ( qrt . length , qrt [ 0 ] . length ) ; minor + + ) {', 'performHouseholderReflection ( minor , matrix ) ;', 'final double [ ] qrtMinor = qrt [ minor ] ;', 'final double [ ] qrtCol = matrix [ col ] ;', 'performHouseholderReflection ( minor , qrt ) ;', 'for ( int minor = 0 ; minor < FastMath . min ( matrix . length , matrix [ 0 ] . length ) ; minor + + ) {', 'for ( int col = minor + 1 ; col < qrt . length ; col + + ) {', 'for ( int col = minor + 1 ; col < matrix . length ; col + + ) {', 'final double [ ] qrtCol = qrt [ col ] ;', 'final double [ ] qrtMinor = matrix [ minor ] ;']","['@ Override', '@ Override', '@ Override', 'import java . util . Iterator ;', '@ Override', 'import java . util . Iterator ;', 'import java . util . Comparator ;', '@ Override', 'import java . util . Arrays ;', 'import java . util . Comparator ;']","['private double [ ] [ ] lTData ;', '@ Override', 'private final double [ ] [ ] lTData ;', 'private double [ ] realEigenvalues ;', '@ Override', 'private byte maxIter = 30 ;', 'private final double [ ] realEigenvalues ;', 'private double [ ] imagEigenvalues ;', 'private final double [ ] imagEigenvalues ;', 'private final byte maxIter = 30 ;']","['MultivariateVectorFunction gradient ( ) ;', 'package org . apache . commons . math4 . analysis ;', '@ Deprecated', 'public interface DifferentiableMultivariateFunction extends MultivariateFunction {', '}', 'MultivariateFunction partialDerivative ( int k ) ;', 'public interface DifferentiableMultivariateVectorFunction', 'MultivariateMatrixFunction jacobian ( ) ;', 'package org . apache . commons . math4 . analysis ;', '@ Deprecated']","['@ Override', '} ;', '} ;', 'public double value ( double alpha ) {', 'public double value ( double alpha ) {', '}', '}', 'for ( int i = 0 ; i < n ; i + + ) {', 'for ( int i = 0 ; i < n ; i + + ) {', 'x [ i ] = startPoint [ i ] + alpha * direction [ i ] ;']",['@ Override'],"['private static final long serialVersionUID = 1L ;', 'private static final long serialVersionUID = 1L ;']","['FACET ORIENTATION MISMATCH ( ""facets orientation mismatch around edge joining points ( { 0 } , { 1 } , { 2 } ) and ( { 3 } , { 4 } , { 5 } ) "" ) ,', 'EDGE CONNECTED TO ONE FACET ( ""edge joining points ( { 0 } , { 1 } , { 2 } ) and ( { 3 } , { 4 } , { 5 } ) is connected to one facet only"" ) ,', 'CLOSE VERTICES ( ""too close vertices near point ( { 0 } , { 1 } , { 2 } ) "" ) ,', 'OUT OF PLANE ( ""point ( { 0 } , { 1 } , { 2 } ) is out of plane"" ) ,', 'return ( ( angle < 1 . 0e - 10 ) & & ( FastMath . abs ( originOffset - plane . originOffset ) < 1 . 0e - 10 ) ) | |', 'return ( ( angle < 1 . 0e - 10 ) & & ( FastMath . abs ( originOffset - plane . originOffset ) < tolerance ) ) | |', 'return FastMath . abs ( getOffset ( p ) ) < 1 . 0e - 10 ;', 'return FastMath . abs ( getOffset ( p ) ) < tolerance ;', '( ( angle > ( FastMath . PI - 1 . 0e - 10 ) ) & & ( FastMath . abs ( originOffset + plane . originOffset ) < 1 . 0e - 10 ) ) ;', 'if ( direction . getNorm ( ) < tolerance ) {']","['public void testCbrt ( ) {', 'testSinh ( ) ;', '@ Test', 'testLog ( ) ;', 'public void testLog10 ( ) {', 'private static void testPow ( ) {', 'public void testTanh ( ) {', 'private static void testCbrt ( ) {', 'public void testAtan ( ) {', '}']","['if ( object instanceof AbstractStorelessUnivariateStatistic = = false ) {', 'throws MathIllegalArgumentException {', 'final int length ) throws MathIllegalArgumentException {', 'StorelessUnivariateStatistic stat = ( StorelessUnivariateStatistic ) object ;', 'return getResult ( ) ;', 'public double evaluate ( final double [ ] values , final int begin , final int length )', 'return 31 * ( 31 + MathUtils . hash ( getResult ( ) ) ) + MathUtils . hash ( getN ( ) ) ;', 'return stat . getResult ( ) ;', 'if ( test ( values , begin , length ) ) {', 'stat . incrementAll ( values , begin , length ) ;']","['final int length ) throws MathIllegalArgumentException {', 'public static double sum ( final double [ ] values ) throws MathIllegalArgumentException {', 'public static double percentile ( final double [ ] values , final int begin ,', 'public static double max ( final double [ ] values , final int begin , final int length )', 'public static double varianceDifference ( final double [ ] sample1 ,', 'throws DimensionMismatchException , NoDataException {', 'throws DimensionMismatchException , NoDataException {', 'public static double variance ( final double [ ] values , final int begin , final int length )', 'public static double populationVariance ( final double [ ] values )', 'return PERCENTILE . evaluate ( values , p ) ;']","['final TravellingSalesmanSolver solver = new TravellingSalesmanSolver ( squareOfCities , 2 ) ;', 'final TravellingSalesmanSolver solver = new TravellingSalesmanSolver ( squareOfCities , 2 , seed ) ;', 'final long seed = 534712311L ;']","['final double cdf y = yIndex > = 0 ? ( yIndex + 1d ) / m : ( - yIndex - 1d ) / m ;', 'private double edf ( final double x , final double [ ] samples ) {', 'final int yIndex = Arrays . binarySearch ( sy , sx [ i ] ) ;', '+ + index ;', 'return 1 - ksSum ( d * FastMath . sqrt ( ( dm * dn ) / ( dm + dn ) ) , KS SUM CAUCHY CRITERION , MAXIMUM PARTIAL SUM COUNT ) ;', 'if ( i > 0 & & y i = = sy [ i - 1 ] ) {', 'final double cdf y = ( i + 1d ) / m ;', '}', 'return exactK ( d , n ) ;', 'continue ;']","['@ Test', '@ Test ( timeout = 5000 )']","['Object . . . args ) {', 'public ConvergenceException ( Localizable pattern , Object . . . args ) {', 'public ConvergenceException ( Localizable pattern ,', 'return context ;', 'this ( LocalizedFormats . ARITHMETIC EXCEPTION ) ;', 'context . addMessage ( pattern , args ) ;', 'public class MathArithmeticException extends MathRuntimeException {', 'public ExceptionContext getContext ( ) {', 'public MathArithmeticException ( Localizable pattern , Object . . . args ) {', 'return context . getLocalizedMessage ( ) ;']","['public void addSamplePoint ( final T x , final T [ ] . . . value )', 'public final void addSamplePoint ( final T x , final T [ ] . . . value )', '@ SafeVarargs', '@ SafeVarargs', '@ SuppressWarnings ( ""unchecked"" )', 'public Region < S > buildConvex ( final Hyperplane < S > . . . hyperplanes ) {', 'public final Region < S > buildConvex ( final Hyperplane < S > . . . hyperplanes ) {', '@ SafeVarargs', '@ SafeVarargs', '@ SuppressWarnings ( ""unused"" )']","['throw new NumberIsTooSmallException ( LocalizedFormats . CANNOT COMPUTE BETA DENSITY AT 0 FOR SOME ALPHA , alpha , 1 , false ) ;', 'alpha , 1 , false ) ;', 'throw new NumberIsTooSmallException ( LocalizedFormats . CANNOT COMPUTE BETA DENSITY AT 1 FOR SOME BETA , beta , 1 , false ) ;', 'throw new NumberIsTooSmallException ( LocalizedFormats . CANNOT COMPUTE BETA DENSITY AT 1 FOR SOME BETA ,', 'if ( z > = k2 ) {', 'return algorithmBC ( random , alpha , b , a ) ;', 'public double sample ( ) {', '}', 'return algorithmBB ( random , alpha , a , b ) ;', 'w = a * FastMath . exp ( v ) ;']","['}', 'instrumentalDistributionTailWeight = integratePowerFunction ( - exponent , 1 . 5 , numberOfElements + 0 . 5 ) ;', 'if ( random . nextDouble ( ) < acceptanceRateForTailSample ( sample ) ) {', 'return 1 . + x * ( 1 . / 2 . ) * ( 1 . + x * ( 1 . / 3 . ) * ( 1 . + x * ( 1 . / 4 . ) ) ) ;', 'return result ;', '}', 'if ( sampler = = null ) {', 'final double logBdivA = FastMath . log ( b / a ) ;', 'int sample ( final RandomGenerator random ) {', 'final double b = FastMath . log1p ( 2 . / ( 2 . * k - 1 . ) ) ;']","['final double Hs = generalizedHarmonic ( N , s ) ;', 'return ( 1 . 0 / FastMath . pow ( x , exponent ) ) / nthHarmonic ;', 'private static final long serialVersionUID = - 140627372283420404L ;', 'private final double nthHarmonic ;', 'return generalizedHarmonic ( x , exponent ) / generalizedHarmonic ( numberOfElements , exponent ) ;', 'this . nthHarmonic = generalizedHarmonic ( numberOfElements , exponent ) ;', 'return ( 1 . 0 / FastMath . pow ( x , exponent ) ) / generalizedHarmonic ( numberOfElements , exponent ) ;', 'final double Hs = nthHarmonic ;', 'return - FastMath . log ( x ) * exponent - FastMath . log ( generalizedHarmonic ( numberOfElements , exponent ) ) ;', 'private static final long serialVersionUID = 20150501L ;']","['import org . apache . commons . math4 . analysis . differentiation . MultivariateDifferentiableFunction ;', 'for ( final int order : orders ) {', '}', 'throw new NumberIsTooLargeException ( x . getOrder ( ) , derivatives . length , true ) ;', 'final double [ ] packed = new double [ parameters + 1 ] ;', 'return f . value ( dsX ) . getPartialDerivative ( order ) ;', 'final double v = f . value ( dPoint ) ;', '@ Override', 'final MultivariateVectorFunction gradient ) {', 'public static MultivariateFunction derivative ( final MultivariateDifferentiableFunction f , final int [ ] orders ) {']","['GridBagConstraints c = new GridBagConstraints ( ) ;', 'comp = createComponent ( ""Geometric"" , 0 , 10 ,', 'chart . getStyleManager ( ) . setLegendFont ( new Font ( ""Arial"" , Font . PLAIN , 10 ) ) ;', 'import java . awt . Insets ;', '@ Override', 'chart . getStyleManager ( ) . setLegendPosition ( position ) ;', 'import org . apache . commons . math4 . userguide . ExampleUtils . ExampleFrame ;', 'container = new JPanel ( ) ;', 'int lowerBound , int upperBound ) {', 'import com . xeiam . xchart . StyleManager . LegendPosition ;']","['double r , w , t ;', 'double w ;', 'double r ;', 'double t ;']","['return y ;', 'return y ;', 'if ( y > 0 ) {', '} else if ( bitsAbsX < PLUS ONE BITS ) {', 'if ( x * x = = 1 . 0 ) {', 'if ( y ! = y ) {', 'if ( y ! = y ) {', 'private static final long PLUS ONE BITS = 0x3ff0000000000000L ;', '}', '}']","['return y ;', 'return y ;', '} else if ( bitsAbsX < PLUS ONE BITS ) {', 'if ( y > 0 ) {', 'if ( y ! = y ) {', 'if ( x * x = = 1 . 0 ) {', 'private static final long PLUS ONE BITS = 0x3ff0000000000000L ;', 'if ( y ! = y ) {', 'return 0 . 0 ;', 'return 0 . 0 ;']","['final double cTmpH = splitFactor * tmpHigh ;', 'final double d1High = Double . longBitsToDouble ( Double . doubleToRawLongBits ( d ) & ( ( - 1L ) < < 27 ) ) ;', 'final double d1High = cd - ( cd - d ) ;', 'final double cD2pH = Double . longBitsToDouble ( Double . doubleToRawLongBits ( d2pHigh ) & ( ( - 1L ) < < 27 ) ) ;', 'final double d1Low = d - d1High ;', 'final double result = resultHigh + resultLow ;', 'final double cRH = splitFactor * resultHigh ;', 'return result ;', 'return resultHigh + resultLow ;', 'if ( Double . isNaN ( result ) ) {']","['return 17 + ( sign < < 8 ) + ( nans < < 16 ) + exp + Arrays . hashCode ( mant ) ;', 'return 17 + ( isZero ( ) ? 0 : ( sign < < 8 ) ) + ( nans < < 16 ) + exp + Arrays . hashCode ( mant ) ;', 'public void testEqualsHashcodeContract ( ) {', '@ Test', 'Assert . assertTrue ( var5 . equals ( var6 ) ? var5 . hashCode ( ) = = var6 . hashCode ( ) : true ) ;', 'Dfp var6 = var1 . newDfp ( - 0 . 0d ) ;', '}', 'Dfp var5 = var1 . newDfp ( 0L ) ;', 'DfpField var1 = new DfpField ( 1 ) ;']","['return y ;', 'return y ;', 'if ( y = = Double . NEGATIVE INFINITY ) {', '} else if ( x = = Double . NEGATIVE INFINITY ) {', 'if ( y ! = y ) {', '} else if ( y ! = y ) {', 'if ( x = = 0 ) {', '} else if ( x = = 0 ) {', 'if ( y = = Double . POSITIVE INFINITY ) {', '} else if ( x ! = x ) {']","['if ( x ! = x | | y ! = y ) {', '} else if ( Double . isNaN ( x ) ) {', '} else if ( y ! = y ) {', 'if ( Double . isNaN ( x ) | | Double . isNaN ( y ) ) {', 'if ( x ! = x | | x = = 0 . 0 ) {', '} else if ( Double . isNaN ( y ) ) {', 'if ( x ! = x ) {', 'if ( ( ( bits & 0x8000000000000000L ) ! = 0 | | Double . isNaN ( x ) ) & & x ! = 0 . 0 ) {', 'if ( ( ( bits & 0x8000000000000000L ) ! = 0 | | x ! = x ) & & x ! = 0 . 0 ) {', 'if ( Double . isNaN ( x ) | | x = = 0 . 0 ) {']","['public static double IEEEremainder ( double dividend , double divisor ) {', 'if ( Double . isInfinite ( divisor ) & & !Double . isInfinite ( dividend ) ) {', 'return StrictMath . IEEEremainder ( dividend , divisor ) ;', 'return dividend ;', 'return ( remainder = = 0 ) ? FastMath . copySign ( remainder , dividend ) : remainder ;', 'final double n = FastMath . rint ( dividend / divisor ) ;', '}', '} else {', 'public static double IEEEremainder ( final double dividend , final double divisor ) {', 'return Double . NaN ;']","['- - i ;', 'return true ;', 'pendingEventTime = root ;', '}', 'if ( forward ^ ( ta > = tb ) ) {', '} else {', '- - i ;', 'pendingEvent = true ;', 'EventState es = new EventState ( closeEventsGenerator , 1 . 5 * gap ,', 'Assert . assertEquals ( 9 . 0 + 1 . 0 / 128 , tEnd , 1 . 0 / 32 . 0 ) ;']","['throws MaxCountExceededException , DimensionMismatchException {', 'throws MaxCountExceededException , DimensionMismatchException , NullPointerException {']","['this ( DEFAULT INITIAL CAPACITY ,', 'this ( ( initialArray = = null | | initialArray . length = = 0 ?', 'DEFAULT INITIAL CAPACITY :', 'initialArray . length ) ,']","['this ( ( initialArray = = null | | initialArray . length = = 0 ?', 'this ( initialArray = = null | | initialArray . length = = 0 ?', 'initialArray . length ) ,', 'initialArray . length ,']","['import org . apache . commons . math4 . exception . DimensionMismatchException ;', 'final int maxUlps ) {', 'final int constraintDimension = constraint . getCoefficients ( ) . getDimension ( ) ;', 'throw new DimensionMismatchException ( constraintDimension , dimension ) ;', 'private void checkDimensions ( final LinearObjectiveFunction f ,', 'for ( final LinearConstraint constraint : constraints ) {', 'final int dimension = f . getCoefficients ( ) . getDimension ( ) ;', 'import org . apache . commons . math4 . exception . DimensionMismatchException ;', '}', 'if ( constraintDimension ! = dimension ) {']","['super ( LocalizedFormats . UNKNOWN PARAMETER ) ;', 'super ( LocalizedFormats . UNKNOWN PARAMETER , name ) ;', 'ParamBrusselator brusselator = new ParamBrusselator ( b ) ;', 'final String name = ""an - unknown - parameter"" ;', 'UnknownParameterException , MismatchedEquations {', 'try {', 'MaxCountExceededException , NoBracketingException ,', '@ Test', 'throws NumberIsTooSmallException , DimensionMismatchException ,', 'UnknownParameterException , MismatchedEquations {']","['int brightnessExponent ,', 'double brightnessExponent ,', 'final int exponent )', 'public static final double DEFAULT BRIGHTNESS EXPONENT = 2d ;', 'public static final int DEFAULT BRIGHTNESS EXPONENT = 2 ;', 'final double exponent )', 'private final int brightnessExponent ;', 'private final double brightnessExponent ;', 'MultivariateInterpolator interpolator = new MicrosphereInterpolator ( ) ;', 'MultivariateInterpolator interpolator = new MicrosphereInterpolator ( 567 , 0 . 89 ) ;']","['private double edf ( final double x , final double [ ] samples ) {', 'rankX + = 1 ;', '+ + index ;', 'int rankY = 0 ;', 'if ( i > 0 & & y i = = sy [ i - 1 ] ) {', 'final double cdf y = rankY / ( double ) m ;', '}', '} while ( rankX < n & & rankY < m ) ;', 'for ( int i = 0 ; i < m ; i + + ) {', 'while ( rankX < n & & Double . compare ( sx [ rankX ] , z ) = = 0 ) {']","['return x ;', 'if ( Double . isNaN ( x ) | | Double . isInfinite ( x ) ) {', '}', 'import org . apache . commons . math4 . special . Gamma ;', 'public void testTrigammaNonRealArgs ( ) {', 'Assert . assertTrue ( Double . isNaN ( Gamma . digamma ( Double . NaN ) ) ) ;', '@ Test', 'Assert . assertTrue ( Double . isInfinite ( Gamma . trigamma ( Double . POSITIVE INFINITY ) ) ) ;', 'Assert . assertTrue ( Double . isInfinite ( Gamma . digamma ( Double . NEGATIVE INFINITY ) ) ) ;', '}']","['final double [ ] nSet = new double [ n ] ;', '}', 'int k = 0 ;', 'final int nn = FastMath . max ( n , m ) ;', 'if ( curD > d ) {', 'final boolean b [ ] = new boolean [ sum ] ;', '}', 'boolean previous = b [ 0 ] ;', 'final int [ ] nPlusMSet = MathArrays . natural ( m + n ) ;', 'for ( int j = 1 ; j < b . length ; + + j ) {']","['return 1 . 0 ;', 'return 0 . 0 ;', 'Assert . assertEquals ( 0 . , test . kolmogorovSmirnovStatistic ( ascendingValues , ascendingValues ) , 0 . ) ;', 'if ( i < 10 ) {', '}', 'Assert . assertEquals ( 1 . 0 , test . exactP ( 0 , values . length , values . length , true ) , 0 . ) ;', 'int iterations = 10 000 ;', 'double [ ] ascendingValues = new double [ i ] ;', 'ascendingValues [ j ] = j ;', 'Assert . assertEquals ( 1 . 0 , test . monteCarloP ( 0 , values . length , values . length , false , iterations ) , 0 . ) ;']","['return linearCombination ( v1 , v2 ) / ( safeNorm ( v1 ) * safeNorm ( v2 ) ) ;', '}', 'public static double cosAngle ( double [ ] v1 , double [ ] v2 ) {', 'public void testCosAngle3D ( ) {', '@ Test', 'expected = Math . sqrt ( 2 ) / 2 ;', '}', 'final double [ ] v3 = { big , - big } ;', 'Assert . assertEquals ( expected , MathArrays . cosAngle ( v1 , v1 ) , 0d ) ;', 'Assert . assertEquals ( expected , MathArrays . cosAngle ( v1 , v4 ) , 0 ) ;']","['final double [ ] a , final double [ ] b ) {', 'result [ i ] = f . value ( a [ i ] , b ) ;', 'import org . apache . commons . math4 . analysis . UnivariateFunction ;', 'return result ;', 'public static double [ ] map ( final UnivariateFunction f , final double [ ] a ) {', 'result [ i ] = f . value ( a [ i ] ) ;', '}', 'final double [ ] a , final double b ) {', 'import org . apache . commons . math4 . analysis . BivariateFunction ;', 'final double [ ] result = new double [ a . length ] ;']","['return yval [ 0 ] ;', 'public double getYmax ( ) {', 'return xval [ 0 ] ;', '}', 'public double getXmax ( ) {', 'public double getXmin ( ) {', 'return xval [ xval . length - 1 ] ;', 'public double getYmin ( ) {', 'return yval [ yval . length - 1 ] ;', '} catch ( OutOfRangeException expected ) { }']","['public FacetData ( double illumination ,', 'if ( size < = 0 ) {', 'import org . apache . commons . math4 . util . FastMath ;', 'private final double maxDarkFraction ;', 'throw new MaxCountExceededException ( size ) ;', 'double value = 0 ;', 'for ( int i = 0 ; i < size ; i + + ) {', 'this ( dimension , size , maxDarkFraction , darkThreshold , background ) ;', 'double darkThreshold ,', 'private final int size ;']","['final double [ ] a , final double [ ] b ) {', 'result [ i ] = f . value ( a [ i ] , b ) ;', 'import org . apache . commons . math4 . analysis . UnivariateFunction ;', 'return result ;', 'public static double [ ] map ( final UnivariateFunction f , final double [ ] a ) {', 'result [ i ] = f . value ( a [ i ] ) ;', '}', 'final double [ ] a , final double b ) {', 'import org . apache . commons . math4 . analysis . BivariateFunction ;', 'final double [ ] result = new double [ a . length ] ;']","['return yval [ 0 ] ;', 'public double getYmax ( ) {', 'return xval [ 0 ] ;', '}', 'public double getXmax ( ) {', 'public double getXmin ( ) {', 'return xval [ xval . length - 1 ] ;', 'public double getYmin ( ) {', 'return yval [ yval . length - 1 ] ;', 'Assert . assertEquals ( yMin , bcf . getYmin ( ) , 1 . 0e - 15 ) ;']","['tP00 . getX ( ) , tP00 . getY ( ) ) ;', 'tP01 . getY ( ) - tP00 . getY ( ) ,', 'AffineTransform . getTranslateInstance ( shift . getX ( ) , shift . getY ( ) ) ;', 'tP00 . getX ( ) ,', 'final AffineTransform at =', 'tP01 . getX ( ) - tP00 . getX ( ) ,', 'tP01 . getX ( ) - tP00 . getX ( ) , tP01 . getY ( ) - tP00 . getY ( ) ,', 'tP00 . getY ( ) ) ;', 'import java . awt . geom . AffineTransform ;', 'org . apache . commons . math4 . geometry . euclidean . twod . Line . getTransform ( tP10 . getX ( ) - tP00 . getX ( ) ,']","['if ( curD > d | | ( curD = = d & & !strict ) ) {', 'final int order = Precision . compareTo ( curD , d , tol ) ;', 'tail + + ;', 'final double tol = 1e - 12 ;', '} else if ( curD = = d & & !strict ) {', 'import org . apache . commons . math4 . util . Precision ;', 'if ( curD > d ) {', 'if ( order > 0 | | ( order = = 0 & & !strict ) ) {', 'Assert . assertEquals ( 0 . 015151515151515027 , test . monteCarloP ( d , x2 . length , y2 . length , false , iterations ) , tol ) ;', 'Assert . assertEquals ( 0 . 015151515151515027 , test . kolmogorovSmirnovTest ( x2 , y2 , false ) , tol ) ;']","['if ( BigInteger . ZERO . compareTo ( den ) > 0 ) {', 'return ONE ;', 'if ( ZERO . equals ( fraction ) ) {', 'return new BigFraction ( numerator . divide ( gcd ) , denominator . divide ( gcd ) ) ;', 'if ( BigInteger . ZERO . equals ( num ) ) {', '}', 'return ( BigInteger . ZERO . compareTo ( numerator ) < = 0 ) ? this : negate ( ) ;', 'if ( numerator . signum ( ) = = 0 | |', 'if ( BigInteger . ZERO . equals ( bg ) ) {', 'return this ;']","['if ( fraction = = null ) {', 'MathUtils . checkNotNull ( bg ) ;', '}', 'MathUtils . checkNotNull ( fraction , LocalizedFormats . FRACTION ) ;', 'throw new NullArgumentException ( LocalizedFormats . FRACTION ) ;', 'throw new NullArgumentException ( ) ;', 'if ( bg = = null ) {']","['}', 'static void fillBooleanArrayRandomlyWithFixedNumberTrueValues ( final boolean [ ] b , final int numberOfTrueValues , final RandomGenerator rng ) {', 'b [ ( b [ r ] ) ? r : k ] = false ;', '}', 'for ( int k = nn ; k < sum ; k + + ) {', 'final int r = rng . nextInt ( k + 1 ) ;', 'int r = rng . nextInt ( k ) ;', 'b [ ( b [ r ] ) ? r : k ] = false ;', 'Arrays . fill ( b , true ) ;', 'Arrays . fill ( b , true ) ;']","['private final AtomicLong numberOfAttemptedUpdates = new AtomicLong ( 0 ) ;', 'numberOfSuccessfulUpdates . incrementAndGet ( ) ;', '}', 'public long getNumberOfSuccessfulUpdates ( ) {', 'public long getNumberOfAttemptedUpdates ( ) {', 'import java . util . concurrent . atomic . AtomicLong ;', 'return numberOfAttemptedUpdates . get ( ) ;', 'private final AtomicLong numberOfSuccessfulUpdates = new AtomicLong ( 0 ) ;', 'numberOfAttemptedUpdates . incrementAndGet ( ) ;', 'return numberOfSuccessfulUpdates . get ( ) ;']","['final double [ ] expect = best . getFeatures ( ) ;', 'private boolean attemptNeuronUpdate ( Neuron n ,', 'if ( n . compareAndSetFeatures ( expect , update ) ) {', 'final double [ ] expect = n . getFeatures ( ) ;', 'final double [ ] expect = n . getFeatures ( ) ;', 'final double [ ] update = computeFeatures ( expect ,', 'final double [ ] update = computeFeatures ( expect ,', '}', 'features ,', 'if ( attemptNeuronUpdate ( n , features , learningRate ) ) {']","['final long numCalls = numberOfCalls . incrementAndGet ( ) ;', 'final long numCalls = numberOfCalls . incrementAndGet ( ) - 1 ;', 'private final AtomicLong numberOfCalls = new AtomicLong ( - 1 ) ;', 'private final AtomicLong numberOfCalls = new AtomicLong ( 0 ) ;']","['if ( data ! = null & & data . length > 1 ) {', 'if ( data ! = null & & data . length > 0 ) {', 'Assert . assertEquals ( 1 , testDa . getNumElements ( ) ) ;', 'final double [ ] values = { 1 } ;', 'testDa = new ResizableDoubleArray ( values ) ;', 'Assert . assertArrayEquals ( values , testDa . getElements ( ) , 0 ) ;', 'Assert . assertEquals ( 1 , testDa . getElement ( 0 ) , 0 ) ;']","['1d / currentNeighbourhood ) ;', 'currentNeighbourhood ) ;']","['}', 'import org . apache . commons . math4 . exception . NumberIsTooSmallException ;', 'upper , lower , true ) ;', 'throw new NumberIsTooSmallException ( LocalizedFormats . ENDPOINTS NOT AN INTERVAL ,', 'if ( upper < lower ) {', 'import org . apache . commons . math4 . exception . util . LocalizedFormats ;', 'public void testStrictOrdering ( ) {', '@ Test ( expected = NumberIsTooSmallException . class )', '}', 'import org . apache . commons . math4 . exception . NumberIsTooSmallException ;']","['return 0 . 5 * ( 1 + Erf . erf ( dev / ( standardDeviation * SQRT2 ) ) ) ;', 'return 0 . 5 * Erf . erfc ( - dev / ( standardDeviation * SQRT2 ) ) ;', '@ Test', 'double tol = 1e - 5 ;', 'double v = dist . cumulativeProbability ( x ) ;', 'Assert . assertEquals ( 1 , v / expected , 1e - 5 ) ;', '}', 'public void testCumulativeProbability ( ) {', 'final RealDistribution dist = new NormalDistribution ( 0 , 1 ) ;', 'double expected = 7 . 61985e - 24 ;']","['if ( a . length ! = b . length ) {', 'public static boolean checkEqualLength ( double [ ] a ,', '}', 'boolean abort ) {', 'throw new DimensionMismatchException ( a . length , b . length ) ;', 'return true ;', 'checkEqualLength ( weights , values ) ;', 'double [ ] b ,', 'throw new DimensionMismatchException ( a . length , b . length ) ;', 'public static void checkEqualLength ( double [ ] a ,']","['public double compute ( double [ ] a , double [ ] b ) {', 'import org . apache . commons . math4 . exception . DimensionMismatchException ;', 'throws DimensionMismatchException {', 'import org . apache . commons . math4 . util . MathArrays ;', 'MathArrays . checkEqualLength ( a , b ) ;', 'public double compute ( double [ ] a , double [ ] b )', 'public double compute ( double [ ] a , double [ ] b ) {', 'public double compute ( double [ ] a , double [ ] b )', 'throws DimensionMismatchException {', 'import org . apache . commons . math4 . exception . DimensionMismatchException ;']","['return new Fraction ( numerator * i , denominator ) ;', 'return divide ( new Fraction ( i ) ) ;', 'return new Fraction ( numerator , denominator * i ) ;', 'return multiply ( new Fraction ( i ) ) ;', 'public void testMath1261 ( ) {', 'final Fraction a = new Fraction ( Integer . MAX VALUE , 2 ) ;', 'final Fraction c = new Fraction ( 2 , Integer . MAX VALUE ) ;', 'Assert . assertTrue ( d . equals ( new Fraction ( 1 , Integer . MAX VALUE ) ) ) ;', '@ Test', '}']","['= new ArrayList < Pair < Double , Integer > > ( len ) ;', '} : new Comparator < PairDoubleInteger > ( ) {', 'new Comparator < Pair < Double , Integer > > ( ) {', 'private final double key ;', 'final List < Pair < Double , Integer > > list', '}', 'return o1 . getKey ( ) . compareTo ( o2 . getKey ( ) ) ;', 'final Comparator < PairDoubleInteger > comp', 'list . add ( new Pair < Double , Integer > ( x [ i ] , i ) ) ;', 'public PairDoubleInteger ( double key , int value ) {']","['instrumentalDistributionTailWeight = integratePowerFunction ( - exponent , 1 . 5 , numberOfElements + 0 . 5 ) ;', '/ /', 'if ( random . nextDouble ( ) < acceptanceRateForTailSample ( sample ) ) {', '}', 'return result ;', 'ZipfRejectionInversionSampler ( final int numberOfElements , final double exponent ) {', '}', 'private double hIntegral ( final double x ) {', 'final double logBdivA = FastMath . log ( b / a ) ;', 'double t = x * ( 1d - exponent ) ;']","['out . writeObject ( key ) ;', 'out . writeObject ( entry . getKey ( ) ) ;', 'final Object value = context . get ( key ) ;', 'for ( Map . Entry < String , Object > entry : context . entrySet ( ) ) {', 'for ( String key : context . keySet ( ) ) {', 'final Object value = entry . getValue ( ) ;', 'final int len = context . keySet ( ) . size ( ) ;', 'final int len = context . size ( ) ;']","['if ( p1 . getWeight ( ) > p2 . getWeight ( ) ) {', 'return comp ;', 'if ( p1 . getX ( ) < p2 . getX ( ) ) {', 'if ( comp ! = 0 ) {', 'if ( p1 . getY ( ) > p2 . getY ( ) ) {', 'int comp = Double . compare ( p1 . getX ( ) , p2 . getX ( ) ) ;', '}', 'comp = Double . compare ( p1 . getWeight ( ) , p2 . getWeight ( ) ) ;', 'return 1 ;', 'comp = Double . compare ( p1 . getY ( ) , p2 . getY ( ) ) ;']","['maxIter ) ;', 'private static final byte MAX ITER = 30 ;', 'if ( its = = maxIter ) {', 'if ( its = = MAX ITER ) {', 'private final byte maxIter = 30 ;', 'MAX ITER ) ;']","['@ Deprecated', 'private final int increment ;', 'int end ) {', 'this . increment = step ;', '@ Override', 'count + = nTimes * increment ;', 'return new Incrementor ( 0 , 0 , 1 , CALLBACK ) ;', 'if ( step = = 0 ) {', 'throw new MaxCountExceededException ( max ) ;', 'private Incrementor ( int start ,']","['evaluations . setMaximalCount ( maxEvaluations ) ;', 'private final int maxEvaluations ;', 'private final Incrementor evaluations = new Incrementor ( ) ;', 'this . func = func ;', 'double fB = eval ( func , xB ) ;', 'try {', 'try {', 'private class FunctionEvaluator {', 'import org . apache . commons . math4 . util . Incrementor ;', '}']","['UP ,', 'colIndex + = numberOfColumns ;', 'DOWN ,', 'VerticalDirection alongColDir ) {', 'public enum HorizontalDirection {', 'throw new MathInternalError ( ) ;', '}', 'public enum VerticalDirection {', 'colOffset = - 1 ;', 'colIndex % = numberOfColumns ;']","['int rowOffset = 0 ;', 'final int rowOffset ;']","['DistanceMeasure distance ) {', 'Collections . sort ( list ) ;', 'private final Neuron neuron ;', '}', 'final Neuron [ ] sorted = new Neuron [ len ] ;', 'for ( int i = 0 ; i < len ; i + + ) {', 'return value ;', 'list . add ( new PairNeuronDouble ( n , d ) ) ;', 'Iterable < Neuron > neurons ,', 'double value ) {']","['public class NeuronSquareMesh2D implements Serializable {', 'return network . iterator ( ) ;', '}', 'public class NeuronSquareMesh2D', 'Serializable {', 'implements Iterable < Neuron > ,', 'public Iterator < Neuron > iterator ( ) {', 'for ( Neuron n : fromNet ) {', '@ Test', 'final NeuronSquareMesh2D map = new NeuronSquareMesh2D ( 3 , true ,']",['import java . util . Iterator ;'],['import java . util . Set ;'],"['@ Override', '@ Override']","['NOT CONVEX HYPERPLANES ( ""hyperplanes do not define a convex region"" ) ,', 'return ( global < - 1 . 0e - 10 ) ?', '} else if ( global > 1 . 0e - 10 ) {', 'new SplitSubHyperplane < Euclidean1D > ( null , this ) :', 'return new SplitSubHyperplane < Euclidean1D > ( this , null ) ;', '}', '}', 'final double global = hyperplane . getOffset ( ( ( OrientedPoint ) getHyperplane ( ) ) . getLocation ( ) ) ;', '} else {', 'import org . apache . commons . math4 . geometry . partitioning . Side ;']","['}', '}', '. assertEquals ( 0 . 105577085453247 , TestUtils . exactP ( d , smallSample1 . length , smallSample2 . length , false ) , tol ) ;', '. assertEquals ( 0 . 105577085453247 , TestUtils . exactP ( d , smallSample1 . length , smallSample2 . length , false ) , tol ) ;', 'x1 [ i ] = x2 [ i ] = y1 [ i ] = y2 [ i ] = i ;', 'x1 [ i ] = x2 [ i ] = y1 [ i ] = y2 [ i ] = i ;', 'Assert . assertEquals ( 0 . 03906 , testStatistic . wilcoxonSignedRankTest ( x , y , true ) , 1e - 5 ) ;', 'Assert . assertEquals ( 0 . 03906 , testStatistic . wilcoxonSignedRankTest ( x , y , true ) , 1e - 5 ) ;']","['for ( long p = e ; p ! = 0 ; p > > = 1 ) {', 'for ( long p = e ; p ! = 0 ; p > > > = 1 ) {', '@ Test ( timeout = 5000L )', 'public void testIntPowLongMinValue ( ) {', '}', 'Assert . assertEquals ( 1 . 0 , FastMath . pow ( 1 . 0 , Long . MIN VALUE ) , - 1 . 0 ) ;']","['return q ;', 'if ( dividend > = 0 ) {', 'public static int divideUnsigned ( int dividend , int divisor ) {', '}', 'return dividend > = 0 | | dividend < divisor ? dividend : dividend - divisor ;', 'if ( divisor > = 0L ) {', 'return dividend > = 0L | | dividend < divisor ? dividend : dividend - divisor ;', 'long q = ( ( dividend > > > 1 ) / divisor ) < < 1 ;', 'public static long remainderUnsigned ( long dividend , long divisor ) {', 'return dividend > = 0L | | dividend < divisor ? 0L : 1L ;']","['this ( high + low , high , low ) ;', 'this ( high = = 0 . 0 ? ( low = = 0 . 0 & & Double . doubleToRawLongBits ( high ) = = Long . MIN VALUE / * negative zero * / ? - 0 . 0 : low ) : high + low , high , low ) ;', 'Assert . assertEquals ( ""pow ( - Inf , - 1 . 0 ) should be 0 . 0"" , 0 . 0 , FastMath . pow ( Double . NEGATIVE INFINITY , - 1 . 0 ) , Precision . EPSILON ) ;', 'Assert . assertEquals ( ""pow ( - Inf , - 2 . 0 ) should be 0 . 0"" , 0 . 0 , FastMath . pow ( Double . NEGATIVE INFINITY , - 2 . 0 ) , EXACT ) ;', 'Assert . assertEquals ( ""pow ( NaN , 0 . 0 ) should be 1 . 0"" , 1 . 0 , FastMath . pow ( Double . NaN , 0 . 0 ) , Precision . EPSILON ) ;', 'Assert . assertEquals ( Double . NEGATIVE INFINITY , FastMath . pow ( Double . NEGATIVE INFINITY , i ) , EXACT ) ;', 'Assert . assertEquals ( ""pow ( - Inf , - 3 . 0 ) should be - Inf"" , Double . NEGATIVE INFINITY , FastMath . pow ( Double . NEGATIVE INFINITY , 3 . 0 ) , 1 . 0 ) ;', 'if ( dNegative & & bi . testBit ( 0 ) ) {', 'Assert . assertEquals ( ""pow ( - Inf , - 2 . 0 ) should be 0 . 0"" , 0 . 0 , FastMath . pow ( Double . NEGATIVE INFINITY , - 2 . 0 ) , Precision . EPSILON ) ;', 'Assert . assertEquals ( ""pow ( - 0 . 0 , - odd ) should be - Inf"" , Double . NEGATIVE INFINITY , FastMath . pow ( - 0 . 0 , - 13 . 0 ) , EXACT ) ;']","['private final int column ;', 'public int getRow ( ) {', 'import org . apache . commons . math4 . ml . neuralnet . Neuron ;', 'private final int row ;', 'this . row = row ;', 'public int getColumn ( ) {', 'public Location ( int row ,', '}', 'return column ;', 'final int nR = map . getNumberOfRows ( ) ;']","['double [ ] [ ] computeImage ( NeuronSquareMesh2D map ,', 'import org . apache . commons . math4 . ml . neuralnet . twod . NeuronSquareMesh2D ;', 'public interface MapDataVisualization {', '}', 'Iterable < double [ ] > data ) ;', 'package org . apache . commons . math4 . ml . neuralnet . twod . util ;', 'import org . apache . commons . math4 . ml . neuralnet . twod . NeuronSquareMesh2D ;', '}', 'package org . apache . commons . math4 . ml . neuralnet . twod . util ;', 'double [ ] [ ] computeImage ( NeuronSquareMesh2D map ) ;']","['final int col = loc . getColumn ( ) ;', 'import org . apache . commons . math4 . ml . neuralnet . Neuron ;', 'DistanceMeasure distance ) {', '}', 'public class HitHistogram implements MapDataVisualization {', '@ Override', 'public HitHistogram ( boolean normalizeCount ,', 'this . normalizeCount = normalizeCount ;', 'final int nR = map . getNumberOfRows ( ) ;', 'import org . apache . commons . math4 . ml . neuralnet . MapUtils ;']","['final int col = loc . getColumn ( ) ;', 'import org . apache . commons . math4 . ml . neuralnet . Neuron ;', '}', 'final int [ ] [ ] hit = new int [ nR ] [ nC ] ;', '@ Override', 'public QuantizationError ( DistanceMeasure distance ) {', 'final int nR = map . getNumberOfRows ( ) ;', 'error [ r ] [ c ] / = count ;', 'import org . apache . commons . math4 . ml . neuralnet . MapUtils ;', 'error [ row ] [ col ] + = distance . compute ( sample , best . getFeatures ( ) ) ;']","['uMatrix [ iR - 1 ] [ jR ] = distance . compute ( current ,', 'bottom = = null ) ?', 'if ( neighbour ! = null ) {', '}', 'neighbour = map . getNeuron ( i , j ,', 'final double current2BottomRight = bottomRight = = null ?', '}', 'uMatrix [ 0 ] = uMatrix [ lastRow ] ;', 'uMatrix [ iR + 1 ] [ jR - 1 ] = distance . compute ( current ,', 'final Neuron right = map . getNeuron ( i , j ,']",['@ Override'],"['int swaps = 0 ;', 'long swaps = 0 ;', 'for ( int i = 0 ; i < xArray . length ; + + i ) {', '@ Test', 'RandomGenerator rng = new Well1024a ( 0 ) ;', 'yArray [ i ] = rng . nextDouble ( ) ;', '}', 'import org . apache . commons . math4 . random . Well1024a ;', 'import org . apache . commons . math4 . random . RandomGenerator ;', 'double [ ] yArray = new double [ 120000 ] ;']","['double ret ;', 'return Double . NEGATIVE INFINITY ;', 'ret = x * FastMath . log1p ( - p ) + FastMath . log ( p ) ;', 'return ( 1 - probabilityOfSuccess ) / probabilityOfSuccess ;', 'final double p = probabilityOfSuccess ;', 'return 0 . 0 ;', 'ret = Double . NEGATIVE INFINITY ;', 'return 1 . 0 - FastMath . pow ( 1 - probabilityOfSuccess , x + 1 ) ;', 'ret = 0 . 0 ;', 'return x * FastMath . log1p ( - probabilityOfSuccess ) + FastMath . log ( probabilityOfSuccess ) ;']","['return 1 . 0 - FastMath . pow ( 1 - probabilityOfSuccess , x + 1 ) ;', 'private final double log1mProbabilityOfSuccess ;', 'return FastMath . pow ( 1 - probabilityOfSuccess , x ) * probabilityOfSuccess ;', 'return FastMath . exp ( log1mProbabilityOfSuccess * x ) * probabilityOfSuccess ;', 'return x * FastMath . log1p ( - probabilityOfSuccess ) + FastMath . log ( probabilityOfSuccess ) ;', 'logProbabilityOfSuccess = FastMath . log ( p ) ;', 'return x * log1mProbabilityOfSuccess + logProbabilityOfSuccess ;', 'log1mProbabilityOfSuccess = FastMath . log1p ( - p ) ;', 'return - FastMath . expm1 ( log1mProbabilityOfSuccess * ( x + 1 ) ) ;', 'private final double logProbabilityOfSuccess ;']","['0 . 990 , 0 . 995', '0 . 990 , 0 . 995 , 1 . 000', '5 , 5 , 6 , 6 , 6 , 6 , 7 , 7 , 8 , 9 , 10', '5 , 5 , 6 , 6 , 6 , 6 , 7 , 7 , 8 , 9 , 10 , Integer . MAX VALUE']","['if ( p = = 1 ) {', 'if ( p = = 0 ) {', 'return Math . max ( 0 , ( int ) Math . ceil ( ( FastMath . log1p ( - p ) / log1mProbabilityOfSuccess - 1 ) ) ) ;', 'return 0 ;', 'throw new OutOfRangeException ( p , 0 , 1 ) ;', 'public int inverseCumulativeProbability ( double p ) throws OutOfRangeException {', '}', 'return Integer . MAX VALUE ;', 'if ( p < 0 | | p > 1 ) {', '@ Override']","['copy . linkMap . put ( e . getKey ( ) , new HashSet < Long > ( e . getValue ( ) ) ) ;', 'for ( Map . Entry < Long , Set < Long > > e : linkMap . entrySet ( ) ) {', 'return copy ;', 'final Network copy = new Network ( nextId . get ( ) ,', '}', 'import java . util . Map ;', 'copy . neuronMap . put ( e . getKey ( ) , e . getValue ( ) . copy ( ) ) ;', 'for ( Map . Entry < Long , Neuron > e : neuronMap . entrySet ( ) ) {', 'featureSize ) ;', 'public synchronized Network copy ( ) {']","['if ( binCount < = 0 ) {', 'throw new NotStrictlyPositiveException ( binCount ) ;', 'import org . apache . commons . math4 . exception . NotStrictlyPositiveException ;', '}', '}', '@ Test ( expected = NotStrictlyPositiveException . class )', 'import org . apache . commons . math4 . exception . NotStrictlyPositiveException ;', 'new EmpiricalDistribution ( 0 ) ;', 'public void testPrecondition1 ( ) {']","['final double tb = t0 + ( i + 1 ) * h ;', 'final double tb = ( i = = n - 1 ) ? t1 : t0 + ( i + 1 ) * h ;']","['double m2 = current . getSecondMoment ( ) ;', 'final double curM2 = current . getVariance ( ) * ( curN - 1d ) ;', 'm2 = m2 + current . getSecondMoment ( ) + meanDiff * meanDiff * oldN * curN / n ;', 'StatisticalSummary current = iterator . next ( ) ;', 'Iterator < SummaryStatistics > iterator = statistics . iterator ( ) ;', 'public static StatisticalSummaryValues aggregate ( Collection < ? extends StatisticalSummary > statistics ) {', 'public static StatisticalSummaryValues aggregate ( Collection < SummaryStatistics > statistics ) {', 'double m2 = var * ( n - 1d ) ;', 'SummaryStatistics current = iterator . next ( ) ;', 'm2 = m2 + curM2 + meanDiff * meanDiff * oldN * curN / n ;']","['final double gammaAbs = SQRT TWO PI / x *', 'final double gammaAbs = SQRT TWO PI / absX *', 'public void testGammaNegativeDouble ( ) {', '@ Test', '}', 'for ( double x = - 19 . 5 ; x > - 25 ; x - = 1 . 0 ) {', 'double gamma = Gamma . gamma ( x ) ;', 'Assert . assertEquals ( ( int ) FastMath . signum ( previousGamma ) ,', '- ( int ) FastMath . signum ( gamma ) ) ;', 'previousGamma = gamma ;']","['. withStart ( start )', 'final int s = ( max - start ) / step + 1 ;', 'return Incrementor . create ( )', 'public static Range range ( final int start ,', '} ;', 'this . max = max ;', 'final int max ,', '}', 'public static Iterable < Integer > range ( int start ,', 'int end ) {']","['new GaussianRandomGenerator ( new JDKRandomGenerator ( ) ) ) ;', 'new GaussianRandomGenerator ( new Well1024a ( 0x366a26b94e520f41l ) ) ) ;']","['public double evaluate ( final double [ ] work , final double p , final KthSelector kthSelector ) {', 'final double upper = selector . select ( work , pivotsHeap , intPos ) ;', 'return this . evaluate ( work , null , p , kthSelector ) ;', 'final int length , final KthSelector selector ) {', 'return super . estimate ( values , pivotsHeap , FastMath . ceil ( pos - 0 . 5 ) , length , kthSelector ) ;', 'return selector . select ( work , pivotsHeap , length - 1 ) ;', 'final KthSelector kthSelector ) {', 'super . estimate ( values , pivotsHeap , FastMath . floor ( pos + 0 . 5 ) , length , selector ) ;', 'return estimate ( work , pivotsHeap , index ( p / 100d , work . length ) , work . length , kthSelector ) ;', 'public double evaluate ( final double [ ] work , final double p , final KthSelector selector ) {']","['ClassicalRungeKuttaStepInterpolator ( ) {', 'public ClassicalRungeKuttaStepInterpolator ( ) {', 'DormandPrince54StepInterpolator ( ) {', 'public DormandPrince54StepInterpolator ( ) {', 'DormandPrince853StepInterpolator ( ) {', 'public DormandPrince853StepInterpolator ( ) {', 'EulerStepInterpolator ( ) {', 'public EulerStepInterpolator ( ) {', 'GillStepInterpolator ( ) {', 'public GillStepInterpolator ( ) {']","['import java . util . ArrayList ;', 'import java . util . ArrayList ;', 'import java . util . HashMap ;', 'public boolean equals ( Object other ) {', 'if ( ! ( other instanceof PairNeuronDouble ) ) {', 'return Double . doubleToRawLongBits ( value ) = =', '}', 'import java . util . HashMap ;', 'return Double . valueOf ( value ) . hashCode ( ) ;', 'return false ;']","['return singletons . get ( index ) ;', 'return singletons . get ( index ) ;', '}', 'index < probabilities . length & &', 'if ( index > = 0 & & index < probabilities . length ) {', 'if ( index > = 0 & &', 'if ( randomValue < cumulativeProbabilities [ index ] ) {', 'randomValue < cumulativeProbabilities [ index ] ) {', 'return new OptimumImpl (', 'iterationCounter . getCount ( ) ) ;']","['private ArrayList < NestedLoops > surrounded ;', 'import java . util . List ;', 'private List < NestedLoops > surrounded ;', 'private final TreeMap < Comparable < ? > , Long > freqTable ;', 'import java . util . SortedMap ;', 'private final SortedMap < Comparable < ? > , Long > freqTable ;']","['} ;', '}']","['increment = ( PI SQUARED * kTerm2 - z2 ) * FastMath . exp ( - PI SQUARED * kTerm2 / twoZ2 ) ;', 'final double pi6 = pi4 * MathUtils . PI SQUARED ;', 'increment = ( - pi4 * kTerm4 + 3 * PI SQUARED * kTerm2 * z2 ) *', 'FastMath . exp ( - MathUtils . PI SQUARED * kTerm2 / twoZ2 ) ;', 'pi4 * ( 1 - twoZ2 ) * kTerm2 * kTerm2 ) * FastMath . exp ( - PI SQUARED * kTerm2 / twoZ2 ) ;', 'final double pi4 = MathUtils . PI SQUARED * MathUtils . PI SQUARED ;', 'PI SQUARED * kTerm2 * ( 135 * z4 - 96 * z6 ) - 30 * z6 - 90 * z8 ) *', 'double z2Term = MathUtils . PI SQUARED / ( 8 * z2 ) ;', 'increment = PI SQUARED * kTerm2 * FastMath . exp ( - PI SQUARED * kTerm2 / twoZ2 ) ;', 'pi4 * ( 1 - twoZ2 ) * kTerm2 * kTerm2 ) * FastMath . exp ( - MathUtils . PI SQUARED * kTerm2 / twoZ2 ) ;']",['@ Override'],"['if ( !isMinimize )', 'for ( ; ; ) {', '} }', '}', 'for ( ; ; ) switch ( state ) {', 'switch ( state ) {', 'if ( !isMinimize ) {', '} } }']","['package org . apache . commons . math4 . analysis ;', 'T value ( T x ) ;', '}', 'import org . apache . commons . math4 . RealFieldElement ;', 'public interface FieldUnivariateFunction < T extends RealFieldElement < T > > {', 'Dfp yA = y [ signChangeIndex - 1 ] ;', 'public class FieldBracketingNthOrderBrentSolver < T extends RealFieldElement < T > > {', '} while ( nextX . isNaN ( ) & & ( end - start > 1 ) ) ;', 'T absXA = xA . abs ( ) ;', 'Dfp targetY ;']","['if ( ! ( other instanceof PairNeuronDouble ) ) {', 'import java . util . Comparator ;', 'public boolean equals ( Object other ) {', '} ) ;', 'return Double . doubleToRawLongBits ( value ) = =', 'public int compare ( final PairNeuronDouble pn1 , final PairNeuronDouble pn2 ) {', 'Collections . sort ( list ) ;', 'private static class PairNeuronDouble {', '}', '}']","['import java . util . Comparator ;', 'PairNeuronDouble o2 ) {', '} ) ;', 'import java . util . Comparator ;', 'public int compare ( final PairNeuronDouble pn1 , final PairNeuronDouble pn2 ) {', '= new Comparator < PairNeuronDouble > ( ) {', '}', '} ;', 'return Double . compare ( pn1 . getValue ( ) , pn2 . getValue ( ) ) ;', '}']","['return Double . POSITIVE INFINITY ;', '}', 'if ( tempC = = Double . POSITIVE INFINITY ) {', '@ Test', 'final double vM = Math . exp ( arg ) ;', 'final double vFM = FastMath . exp ( arg ) ;', 'Assert . assertTrue ( ""exp ( "" + arg + "" ) is "" + vFM + "" instead of "" + vM ,', '}', 'public void testMath1269 ( ) {', 'final double arg = 709 . 8125 ;']","['innerDistribution = new EnumeratedDistribution < Integer > ( rng , samples ) ;', 'public EnumeratedIntegerDistribution ( final RandomGenerator rng , final int [ ] data ) {', '}', 'count = new Integer ( 1 ) ;', 'int index = 0 ;', 'return samples ;', 'super ( rng ) ;', 'count = new Integer ( count . intValue ( ) + 1 ) ;', 'import java . util . Map ;', '} else {']","['} else {', 'dataMap . put ( value , + + count ) ;', 'dataMap . put ( value , count ) ;', 'count = 0 ;', 'count = new Integer ( 1 ) ;', 'count = new Integer ( count . intValue ( ) + 1 ) ;']","['private List < Pair < Integer , Double > > createDistribution ( int [ ] singletons , double [ ] probabilities ) {', 'private static List < Pair < Integer , Double > > createDistribution ( int [ ] singletons , double [ ] probabilities ) {']","['count = new Integer ( count . intValue ( ) + 1 ) ;', 'dataMap . put ( value , + + count ) ;', 'dataMap . put ( value , count ) ;', 'private static List < Pair < Double , Double > > createDistribution ( double [ ] singletons , double [ ] probabilities ) {', '} else {', 'count = 0 ;', 'private List < Pair < Double , Double > > createDistribution ( double [ ] singletons , double [ ] probabilities ) {', 'count = new Integer ( 1 ) ;']","['public interface FieldUnivariateFunction < T extends RealFieldElement < T > > {', 'public interface RealFieldUnivariateFunction < T extends RealFieldElement < T > > {', 'import org . apache . commons . math4 . analysis . FieldUnivariateFunction ;', 'import org . apache . commons . math4 . analysis . RealFieldUnivariateFunction ;', 'public T solve ( final int maxEval , final FieldUnivariateFunction < T > f ,', 'public T solve ( final int maxEval , final RealFieldUnivariateFunction < T > f ,', 'import org . apache . commons . math4 . analysis . FieldUnivariateFunction ;', 'import org . apache . commons . math4 . analysis . RealFieldUnivariateFunction ;', 'check ( new FieldUnivariateFunction < Dfp > ( ) {', 'private void check ( RealFieldUnivariateFunction < Dfp > f , int maxEval , double min , double max ,']","['curY = dist . sample ( yLength ) ;', 'if ( curD > d ) {', 'curD = integralKolmogorovSmirnovStatistic ( curX , curY ) ;', '}', 'final int xLength = x . length ;', 'int greaterCount = 0 ;', 'greaterCount + + ;', 'for ( int i = 0 ; i < iterations ; i + + ) {', '} else if ( curD = = d ) {', 'System . arraycopy ( y , 0 , combined , xLength , yLength ) ;']","['synchronized ( PolynomialsUtils . class ) {', 'final int maxDegree = ( int ) FastMath . floor ( FastMath . sqrt ( 2 * coefficients . size ( ) ) ) - 1 ;', 'final int maxDegree = ( int ) FastMath . floor ( FastMath . sqrt ( 2 * coefficients . size ( ) ) ) - 1 ;', 'synchronized ( coefficients ) {']","['final EnumeratedRealDistribution dist = new EnumeratedRealDistribution ( combined ) ;', 'final EnumeratedRealDistribution dist = new EnumeratedRealDistribution ( rng , combined ) ;']","['data [ i ] = data [ i ] + dist . sample ( ) ;', 'data [ i ] + = dist . sample ( ) ;']","['this ( 100 , 50 ) ;', 'this ( 100 , 500 ) ;']","['@ Override', '@ Override']","['OutOfRangeException ;', 'OutOfRangeException , IllegalArgumentException ;']","['logSum + = FastMath . log ( i ) ;', 'import org . apache . commons . math4 . special . Gamma ;', '}', 'return FACTORIAL LOG NO CACHE . value ( n ) ;', 'throw new NotPositiveException ( LocalizedFormats . FACTORIAL NEGATIVE PARAMETER ,', 'return Gamma . logGamma ( n + 1 ) ;', 'return FastMath . log ( FACTORIALS [ n ] ) ;', '}', 'return logSum ;', 'LOG FACTORIALS [ i ] = cache [ i ] ;']","['int randInt = nextInt ( ) ;', 'if ( i > 0 ) {', 'bytes [ bytesOut + + ] = ( byte ) randInt ;', 'int randInt = nextInt ( ) ;', 'return ;', 'if ( bytesOut < bytes . length ) {', '}', 'bytes [ bytesOut + + ] = ( byte ) randInt ;', 'for ( int i = 0 ; i < 3 ; i + + ) {', 'return ;']","['public void testNexBoolean2 ( ) {', 'public void testNextBytes ( ) {', 'public void testNexBytes ( ) {', 'public void testNextBoolean2 ( ) {']","['try {', 'generator . nextInt ( 0 ) ;', '@ Test', '}', 'generator . nextInt ( 0 ) ;', 'generator . nextInt ( - 1 ) ;', '} catch ( MathIllegalArgumentException ex ) {', 'public void testNextIntIAE3 ( ) {', '}', '@ Test ( expected = MathIllegalArgumentException . class )']","['public void testNextIntNeg ( ) {', 'generator . nextInt ( 0 ) ;', 'public void testNextIntIAE2 ( ) {', 'public void testNextIntPrecondition2 ( ) {', 'generator . nextInt ( 0 ) ;', '}', '}', '@ Test ( expected = MathIllegalArgumentException . class )', 'generator . nextInt ( - 1 ) ;', 'public void testNextIntPrecondition1 ( ) {']","['if ( i > 0 ) {', 'while ( i < iEnd ) {', 'int randInt = nextInt ( ) ;', 'random > > = 8 ;', 'if ( bytesOut < bytes . length ) {', 'final int random = nextInt ( ) ;', 'bytes [ bytesOut + + ] = ( byte ) randInt ;', 'while ( i < bytes . length ) {', 'int bytesOut = 0 ;', '}']","['while ( i < iEnd ) {', 'break ;', 'random > > = 8 ;', 'while ( true ) {', 'bytes [ i + + ] = ( byte ) ( random & 0xff ) ;', 'bytes [ index + + ] = ( byte ) random ;', 'while ( i < bytes . length ) {', 'random > > > = 8 ;', 'if ( i < bytes . length ) {', 'while ( index < max ) {']","['public JDKRandomGenerator ( int seed ) {', 'public JDKRandomGenerator ( long seed ) {']","['package org . apache . commons . math4 . random ;', 'return new JDKRandomGenerator ( seed ) ;', '}', 'protected RandomGenerator makeGenerator ( ) {', 'final long seed = 111 ;', '@ Override', 'public class JDKRandomGeneratorTest extends RandomGeneratorAbstractTest {']","['throw new NotStrictlyPositiveException ( n ) ;', 'try {', '}', 'import org . apache . commons . math4 . exception . NotStrictlyPositiveException ;', 'public int nextInt ( int n ) {', '} catch ( IllegalArgumentException e ) {', '@ Override', 'return super . nextInt ( n ) ;']","['this . t = new double [ nSteps ] ;', 'this . t = new double [ nbStartPoints ] ;', 'starter . addStepHandler ( new NordsieckInitializer ( nSteps , y0 . length ) ) ;', 'public int getNSteps ( ) {', 'NordsieckInitializer ( final int nSteps , final int n ) {', 'NordsieckInitializer ( final int nbStartPoints , final int n ) {', 'this . y = new double [ nSteps ] [ n ] ;', 'this . y = new double [ nbStartPoints ] [ n ] ;', 'this . yDot = new double [ nSteps ] [ n ] ;', '@ Deprecated']","['protected Incrementor getEvaluationsCounter ( ) {', 'private IntegerSequence . Incrementor evaluations ;', 'private Incrementor evaluations ;', 'evaluations = evaluations . withStart ( 0 ) ;', 'import org . apache . commons . math4 . util . Incrementor ;', 'evaluations = IntegerSequence . Incrementor . create ( ) . withMaximalCount ( Integer . MAX VALUE ) ;', 'setMaxEvaluations ( - 1 ) ;', 'evaluations = evaluations . withMaximalCount ( ( maxEvaluations < 0 ) ? Integer . MAX VALUE : maxEvaluations ) ;', 'evaluations . resetCount ( ) ;', 'import org . apache . commons . math4 . util . IntegerSequence ;']","['private static final FactorialLog FACTORIAL LOG NO CACHE = FactorialLog . create ( ) ;', 'private static final FactorialLog FACTORIAL LOG NO CACHE = FactorialLog . create ( ) ;']","['OutOfRangeException , IllegalArgumentException ;', 'OutOfRangeException ;']","['return buildArray ( v1 . getY ( ) . atan2 ( v1 . getZ ( ) . negate ( ) ) ,', 'if ( convention = = RotationConvention . VECTOR OPERATOR ) {', '} else if ( order = = RotationOrder . ZXZ ) {', 'v2 . getX ( ) . asin ( ) . negate ( ) ,', 'v2 . getX ( ) . negate ( ) . atan2 ( v2 . getZ ( ) ) ) ;', '} else if ( order = = RotationOrder . XZX ) {', 'v2 . getZ ( ) . acos ( ) ,', 'final', 'v2 . getX ( ) . asin ( ) . negate ( ) ,', 'if ( ( v2 . getX ( ) . getReal ( ) < - 0 . 9999999999 ) | | ( v2 . getX ( ) . getReal ( ) > 0 . 9999999999 ) ) {']","['import java . util . Random ;', 'private static RandomGenerator rng = new Well19937c ( ) ;', 'for ( int j = 0 ; j < numMethods ; j + + ) {', 'for ( int n = 0 ; n < numMethods ; n + + ) {', 'private static Random rng = new Random ( ) ;', 'MathArrays . shuffle ( methodSequence , rng ) ;', 'import org . apache . commons . math4 . random . RandomGenerator ;', 'import org . apache . commons . math4 . util . MathArrays ;', 'final int j = methodSequence [ n ] ;', 'import org . apache . commons . math4 . random . Well19937c ;']","['false ) ;', 'q0 . multiply ( r . getQ1 ( ) ) . add ( q1 . multiply ( r . getQ0 ( ) ) ) . add ( q3 . multiply ( r . getQ2 ( ) ) . subtract ( q2 . multiply ( r . getQ3 ( ) ) ) ) ,', 'r3 . applyTo ( r2 . applyTo ( r1 ) ) :', '}', 'q0 . multiply ( r . getQ1 ( ) ) . add ( q1 . multiply ( r . getQ0 ( ) ) ) . add ( q3 . multiply ( r . getQ2 ( ) ) . subtract ( q2 . multiply ( r . getQ3 ( ) ) ) ) ,', 'return compose ( r , RotationConvention . VECTOR OPERATOR ) ;', 'return r1 . applyInverseTo ( r2 ) . getAngle ( ) ;', 'private FieldRotation < T > composeInternal ( final Rotation r ) {', 'final FieldRotation < T > composed = convention = = RotationConvention . FRAME TRANSFORM ?', 'composeInternal ( r ) : r . composeInternal ( this ) ;']","['MULTISTEP STARTER STOPPED EARLY ( ""multistep integrator starter stopped early , maybe too large step size"" ) ,', 'import org . apache . commons . math4 . exception . MathIllegalStateException ;', 'throw new MathIllegalStateException ( LocalizedFormats . MULTISTEP STARTER STOPPED EARLY ) ;', 'Assert . assertEquals ( 327 , LocalizedFormats . values ( ) . length ) ;', 'Assert . assertEquals ( 328 , LocalizedFormats . values ( ) . length ) ;', 'double minStep = 0 . 0001 * ( pb . getFinalTime ( ) - pb . getInitialTime ( ) ) ;', 'double scalRelativeTolerance = 1 . 0e - 7 ;', 'scalAbsoluteTolerance ,', 'pb . getFinalTime ( ) , new double [ pb . getDimension ( ) ] ) ;', '}']","['public class JDKRandomGenerator extends Random implements RandomGenerator {', 'delegate . setSeed ( RandomGeneratorFactory . convertToLong ( seed ) ) ;', 'private static final long serialVersionUID = - 7745277476784028798L ;', 'return delegate . nextInt ( ) ;', 'setSeed ( RandomGeneratorFactory . convertToLong ( seed ) ) ;', 'delegate = new Random ( ) ;', 'setSeed ( seed ) ;', 'return delegate . nextBoolean ( ) ;', 'setSeed ( ( long ) seed ) ;', 'public float nextFloat ( ) {']","['public void clear ( ) {', 'public float nextFloat ( ) {', 'import org . apache . commons . math4 . util . FastMath ;', 'if ( len < = 0 | |', 'int start ,', 'val = bits % n ;', 'import java . io . Serializable ;', '@ Override', 'break ;', 'return ( high | low ) * 0x1 . 0p - 52d ;']","['protected int next ( int bits ) {', 'return y ;', 'private static final long serialVersionUID = 8661194735290153518L ;', 'extends BaseRandomGenerator', 'return y > > > ( 32 - bits ) ;', 'private static final long serialVersionUID = 20151228L ;', 'public class MersenneTwister extends BitsStreamGenerator implements Serializable {', 'public int nextInt ( ) {', 'public class MersenneTwister', 'implements Serializable {']","['protected int next ( int bits ) {', 'public class ISAACRandom', 'public class ISAACRandom extends BitsStreamGenerator implements Serializable {', 'extends BaseRandomGenerator', 'private static final long serialVersionUID = 7288197941165002400L ;', 'private static final long serialVersionUID = 20151227L ;', 'return rsl [ count - - ] > > > 32 - bits ;', 'public int nextInt ( ) {', 'implements Serializable {', 'return rsl [ count - - ] ;']","['public abstract class AbstractWell extends BitsStreamGenerator implements Serializable {', 'implements Serializable {', '@ Override', 'public abstract class AbstractWell', 'protected abstract int next ( final int bits ) ;', 'private static final long serialVersionUID = 20150228L ;', 'private static final long serialVersionUID = 20150223L ;', 'extends BaseRandomGenerator', 'protected int next ( final int bits ) {', 'return z4 ;']","['this . v = new int [ r ] ;', 'v = new int [ r ] ;', 'this . index = 0 ;', 'index = 0 ;', 'if ( mti > = N ) {', 'if ( mti > = N ) {']","['private static final long serialVersionUID = 20150228L ;', 'private static final long serialVersionUID = 20151228L ;']","['public void setSeed ( final int [ ] seed ) {', 'public void setSeed ( int seed ) {', 'public void setSeed ( final int seed ) {', 'private void setSeedInternal ( final long seed ) {', 'setSeed ( seed ) ;', 'private void setSeedInternal ( final int [ ] seed ) {', 'public void setSeed ( final long seed ) {', 'setSeedInternal ( seed ) ;', 'setSeed ( new int [ ] { seed } ) ;', '}']","['setSeed ( System . currentTimeMillis ( ) + System . identityHashCode ( this ) ) ;', 'private void setSeedInternal ( long seed ) {', 'setSeed ( new int [ ] { ( int ) ( seed > > > 32 ) , ( int ) ( seed & 0xffffffffL ) } ) ;', 'private void setSeedInternal ( int seed ) {', 'setSeed ( seed ) ;', 'setSeedInternal ( seed ) ;', 'public void setSeed ( long seed ) {', 'setSeed ( new int [ ] { ( int ) ( seed > > > 32 ) , ( int ) ( seed & 0xffffffffL ) } ) ;', 'public void setSeed ( int [ ] seed ) {', '}']","['setSeed ( System . currentTimeMillis ( ) + System . identityHashCode ( this ) ) ;', 'private void setSeedInternal ( long seed ) {', 'public void setSeed ( int seed ) {', 'public void setSeed ( int seed ) {', 'setSeed ( seed ) ;', 'setSeedInternal ( 19650218 ) ;', 'setSeed ( 19650218 ) ;', 'private void setSeedInternal ( int seed ) {', 'public void setSeed ( long seed ) {', 'setSeedInternal ( seed ) ;']","['import org . apache . commons . math4 . random . AbstractRandomGenerator ;', 'import org . apache . commons . math4 . random . BaseRandomGenerator ;', 'public double nextDouble ( ) {', 'public void setSeed ( int s ) {', '} ;', '} ;', 'return r . nextDouble ( ) ;', 'RandomGenerator randomGenerator = new BaseRandomGenerator ( ) {', '}', 'public void setSeed ( long s ) {']","['bits = ( nextInt ( ) > > > 1 ) ;', 'bits = nextInt ( ) > > > 1 ;']","['import java . io . IOException ;', 'BufferedImage resizedImage = new BufferedImage ( width , height , type ) ;', 'g . drawImage ( originalImage , 0 , 0 , width , height , null ) ;', '}', 'import java . awt . Graphics2D ;', 'return resizedImage ;', 'Graphics2D g = resizedImage . createGraphics ( ) ;', 'public static BufferedImage resizeImage ( BufferedImage originalImage , int width , int height , int type ) throws IOException {', 'g . dispose ( ) ;', 'bar . add ( painter ) ;']","['int position ,', 'int len ) {', 'final int indexLimit = position + length ;', 'final int indexLimit = start + len ;', 'int index = position ;', 'final int indexLoopLimit = index + ( len & 0x7ffffffc ) ;', 'final int indexLoopLimit = index + ( length & 0x7ffffffc ) ;', 'int start ,', 'int length ) {', 'int index = start ;']","['final double [ ] init = getStartPoint ( ) ;', 'final double [ ] init = getStartPoint ( ) ;', 'final double [ ] uB = getUpperBound ( ) ;', 'final double [ ] uB = getUpperBound ( ) ;', 'final double [ ] lB = getLowerBound ( ) ;', 'final double [ ] lB = getLowerBound ( ) ;', 'final double fValueUpperBound = distributionUpperBound . inverseCumulativeProbability ( 1 - alpha ) ;', 'final double fValueUpperBound = distributionUpperBound . inverseCumulativeProbability ( 1 - alpha ) ;', 'final double fValueLowerBound = distributionLowerBound . inverseCumulativeProbability ( 1 - alpha ) ;', 'final double fValueLowerBound = distributionLowerBound . inverseCumulativeProbability ( 1 - alpha ) ;']","['} else if ( o ! = null & & o instanceof Markers ) {', '} else if ( o instanceof Markers ) {', '} else if ( o ! = null & & o instanceof PSquarePercentile ) {', '} else if ( o instanceof PSquarePercentile ) {', '} else if ( o ! = null & & o instanceof Marker ) {', '} else if ( o instanceof Marker ) {']","['if ( ! ( ( a ^ b ) < 0 | ( a ^ result ) > = 0 ) ) {', 'if ( ! ( ( a ^ b ) < 0 | | ( a ^ result ) > = 0 ) ) {']","['private double laguerre ( double lo , double hi ,', 'return laguerre ( min , initial ) ;', 'double fLo , double fHi ) {', 'return laguerre ( initial , max ) ;', 'return laguerre ( initial , max , yInitial , yMax ) ;', 'private double laguerre ( double lo , double hi ) {', 'return laguerre ( min , initial , yMin , yInitial ) ;']","['setSeed ( System . currentTimeMillis ( ) + System . identityHashCode ( this ) ) ;', 'setSeedInternal ( System . currentTimeMillis ( ) + System . identityHashCode ( this ) ) ;', 'setSeed ( new int [ ] { ( int ) ( seed > > > 32 ) , ( int ) ( seed & 0xffffffffL ) } ) ;', 'setSeedInternal ( new int [ ] { ( int ) ( seed > > > 32 ) , ( int ) ( seed & 0xffffffffL ) } ) ;', 'setSeed ( new int [ ] { seed } ) ;', 'setSeedInternal ( System . currentTimeMillis ( ) + System . identityHashCode ( this ) ) ;', 'setSeed ( System . currentTimeMillis ( ) + System . identityHashCode ( this ) ) ;', 'setSeedInternal ( new int [ ] { seed } ) ;']","['final double [ ] nSet = new double [ n ] ;', 'lag [ l - 1 ] = c ( k , l , m , n , cnm , strict ) * ( last + lag [ l - 1 ] ) ;', 'int k = 0 ;', '}', '}', 'last = lag [ l - 1 ] ;', 'mSet [ k + + ] = i ;', 'for ( int l = 1 ; l < = j ; l + + ) {', 'for ( int i = 0 ; i < n + m ; i + + ) {', 'double last = 0 ;']","['final int max = bytes . length - start ;', 'len > bytes . length - start ) {', 'throw new OutOfRangeException ( len , 0 , max ) ;', 'if ( len < 0 | |', 'len > max ) {', 'throw new OutOfRangeException ( len , 0 , bytes . length - start ) ;', 'if ( len < = 0 | |', 'baseRandomGenerator . nextBytes ( b , 0 , 0 ) ;', 'final int len = 3 ;', '}']","['public void testFloatingPointEqualsWithRelativeToleranceNaN ( ) {', 'final Complex y = new Complex ( Double . NaN , 0 ) ;', '@ Test', 'Assert . assertFalse ( Complex . equalsWithRelativeTolerance ( x , x , 0 . 1 ) ) ;', 'Assert . assertFalse ( Complex . equalsWithRelativeTolerance ( x , y , 0 . 1 ) ) ;', '}', 'Assert . assertFalse ( Complex . equals ( x , y , 0 . 1 ) ) ;', 'final Complex x = new Complex ( 0 , Double . NaN ) ;', 'Assert . assertFalse ( Complex . equalsWithRelativeTolerance ( x , Complex . ZERO , 0 . 1 ) ) ;', 'Assert . assertFalse ( Complex . equals ( x , Complex . ZERO , 0 . 1 ) ) ;']","['Assert . assertTrue ( Arrays . equals ( values [ 0 ] , values [ 1 ] ) ) ;', 'TestUtils . assertEquals ( values [ 0 ] , values [ 1 ] , 0d ) ;']","['}', 'import org . apache . commons . math4 . RealFieldElement ;', 'int getDimension ( ) ;', 'T [ ] computeDerivatives ( T t , T [ ] y ) ;', 'package org . apache . commons . math4 . ode ;', 'public interface FieldFirstOrderDifferentialEquations < T extends RealFieldElement < T > > {', 'public T [ ] getState ( ) {', '}', 'import org . apache . commons . math4 . RealFieldElement ;', 'public FieldODEState ( T time , T [ ] state , T [ ] [ ] secondaryState ) {']","['import org . apache . commons . math4 . ode . FieldODEStateAndDerivative ;', '}', 'import org . apache . commons . math4 . RealFieldElement ;', 'void handleStep ( FieldODEStateAndDerivative < T > state , boolean isLast ) ;', 'package org . apache . commons . math4 . ode . sampling ;', 'public interface FieldFixedStepHandler < T extends RealFieldElement < T > > {', 'void init ( FieldODEStateAndDerivative < T > initialState , T finalTime ) ;', 'import org . apache . commons . math4 . exception . MaxCountExceededException ;', 'void handleStep ( FieldStepInterpolator < T > interpolator , boolean isLast )', 'import org . apache . commons . math4 . ode . FieldODEStateAndDerivative ;']","['CONTINUE ;', 'RESET STATE ,', '}', 'public enum Action {', 'RESET DERIVATIVES ,', 'STOP ,', 'package org . apache . commons . math4 . ode . events ;', 'Action eventOccurred ( FieldODEStateAndDerivative < T > state , boolean increasing ) ;', 'import org . apache . commons . math4 . ode . FieldODEState ;', 'T g ( FieldODEStateAndDerivative < T > state ) ;']","['this . dimension = dimension ;', '}', 'import org . apache . commons . math4 . RealFieldElement ;', 'public void insertEquationData ( T [ ] equationData , T [ ] complete ) {', 'import java . io . Serializable ;', 'System . arraycopy ( complete , firstIndex , equationData , 0 , dimension ) ;', 'public int getDimension ( ) {', 'public int getFirstIndex ( ) {', 'package org . apache . commons . math4 . ode ;', 'return equationData ;']","['void addEventHandler ( FieldEventHandler < T > handler , double maxCheckInterval ,', 'void addStepHandler ( FieldStepHandler < T > handler ) ;', 'import org . apache . commons . math4 . exception . NumberIsTooSmallException ;', '}', 'import org . apache . commons . math4 . RealFieldElement ;', 'package org . apache . commons . math4 . ode ;', 'FieldODEState < T > initialState , T finalTime )', 'MaxCountExceededException , NoBracketingException ;', 'void clearStepHandlers ( ) ;', 'import org . apache . commons . math4 . exception . DimensionMismatchException ;']","['this . equations = eqn ;', 'final double convergence ,', 'handler . init ( state0 , t ) ;', 'public Collection < FieldEventHandler < T > > getEventHandlers ( ) {', 'import org . apache . commons . math4 . util . FastMath ;', 'return Collections . unmodifiableCollection ( list ) ;', 'import org . apache . commons . math4 . RealFieldElement ;', 'private Collection < FieldEventState < T > > eventsStates ;', 'interpolator . setSoftPreviousState ( eventState ) ;', 'return currentState ;']","['final T [ ] y = equations . mapState ( eventState ) ;', 'final T [ ] y = equations . getMapper ( ) . mapState ( eventState ) ;', 'return equations . mapStateAndDerivative ( eventState . getTime ( ) , y , yDot ) ;', 'return equations . getMapper ( ) . mapStateAndDerivative ( eventState . getTime ( ) , y , yDot ) ;', 'return dimension ;', 'public int getTotalDimension ( ) {', 'private final int dimension ;', 'if ( n < 2 ) {', 'System . arraycopy ( complete , firstIndex , equationData , 0 , dimension ) ;', 'return new FieldODEState < T > ( t , state ) ;']","['void init ( T t0 , T [ ] y0 , T finalTime ) ;', 'void init ( T t0 , T [ ] primary0 , T [ ] secondary0 , T finalTime ) ;']","['@ SuppressWarnings ( ""unchecked"" )', 'final T [ ] [ ] secondaryState = MathArrays . buildArray ( t . getField ( ) , n - 1 , - 1 ) ;', 'class FieldEquationsMapper < T extends RealFieldElement < T > > implements Serializable {', 'public class FieldEquationsMapper < T extends RealFieldElement < T > > implements Serializable {', 'final T [ ] [ ] secondaryDerivative = ( T [ ] [ ] ) Array . newInstance ( t . getField ( ) . getRuntimeClass ( ) , n - 1 ) ;', 'final T [ ] [ ] secondaryDerivative = MathArrays . buildArray ( t . getField ( ) , n - 1 , - 1 ) ;', 'import java . lang . reflect . Array ;', 'final T [ ] [ ] secondaryState = MathArrays . buildArray ( t . getField ( ) , n - 1 , - 1 ) ;', 'final T [ ] [ ] secondaryState = ( T [ ] [ ] ) Array . newInstance ( t . getField ( ) . getRuntimeClass ( ) , n - 1 ) ;', 'final T [ ] [ ] secondaryState = ( T [ ] [ ] ) Array . newInstance ( t . getField ( ) . getRuntimeClass ( ) , n - 1 ) ;']","['FieldEquationsMapper < T > getMapper ( ) {', 'final T [ ] secondary0 = mapper . extractEquationData ( index , y0 ) ;', 'final T [ ] primary0 = mapper . extractEquationData ( index , y0 ) ;', '}', 'components . get ( index - 1 ) . init ( t0 , primary0 , secondary0 , finalTime ) ;', 'while ( + + index < mapper . getNumberOfEquations ( ) ) {', 'public void init ( final T t0 , final T [ ] y0 , final T finalTime ) {', 'primary . init ( t0 , primary0 , finalTime ) ;', 'int index = 0 ;', 'public FieldEquationsMapper < T > getMapper ( ) {']","['equations = null ;', 'final FieldEquationsMapper < T > mapper ) {', 'this . equations = equations ;', 'protected void reinitialize ( final T [ ] y , final boolean isForward , final FieldEquationsMapper < T > equationsMapper ) {', 'final FieldExpandableODE < T > equations ) {', 'return computeInterpolatedStateAndDerivatives ( mapper , time , theta , oneMinusThetaH ) ;', 'equations = null ;', 'T time , T theta , T oneMinusThetaH )', 'equations = interpolator . equations ;', 'this . mapper = equationsMapper ;']","['return y0Dot ;', 'protected FieldODEStateAndDerivative < T > initIntegration ( final FieldExpandableODE < T > eqn ,', 'this . equations = eqn ;', 'public Field < T > getField ( ) {', 'final T t0 , final T [ ] y0 , final T t ) {', 'eqn . init ( t0 , y0 , t ) ;', 'evaluations = evaluations . withStart ( 0 ) ;', 'final T t0 , final T [ ] y0 , final T t ) {', 'protected T stepStart ;', '}']","['if ( stepStart . getTime ( ) . subtract ( step ) . subtract ( finalTime ) . getReal ( ) < = 0 ) {', 'if ( nextIsLast ) {', 'public abstract class RungeKuttaFieldIntegrator < T extends RealFieldElement < T > >', 'import org . apache . commons . math4 . RealFieldElement ;', 'private final double [ ] c ;', 'private final RungeKuttaFieldStepInterpolator < T > prototype ;', '@ Override', 'final T [ ] y = y0 . clone ( ) ;', 'T sum = yDotK [ 0 ] [ j ] . multiply ( b [ 0 ] ) ;', 'stepStart = null ;']","['private static final double [ ] STATIC C = {', 'private static final double [ ] STATIC B = {', '1 . 0', 'public EulerFieldIntegrator ( final Field < T > field , final T step ) {', '} ;', 'public class EulerFieldIntegrator < T extends RealFieldElement < T > > extends RungeKuttaFieldIntegrator < T > {', 'package org . apache . commons . math4 . ode . nonstiff ;', 'private static final double [ ] [ ] STATIC A = {', '}', 'super ( field , ""Euler"" , STATIC C , STATIC A , STATIC B , new EulerFieldStepInterpolator < T > ( ) , step ) ;']","['1 . 0', '1 . 0', 'private static final double [ ] STATIC C = {', 'private static final double [ ] STATIC C = {', 'private static final double [ ] STATIC B = {', 'private static final double [ ] STATIC B = {', 'public EulerFieldIntegrator ( final Field < T > field , final T step ) {', 'public EulerFieldIntegrator ( final Field < T > field , final T step ) {', '} ;', '} ;']","['super ( field , ""midpoint"" , STATIC C , STATIC A , STATIC B , new MidpointFieldStepInterpolator < T > ( ) , step ) ;', 'private static final double [ ] STATIC C = {', 'private static final double [ ] STATIC B = {', '{ 1 . 0 / 2 . 0 }', 'public class MidpointFieldIntegrator < T extends RealFieldElement < T > > extends RungeKuttaFieldIntegrator < T > {', '} ;', 'public MidpointFieldIntegrator ( final Field < T > field , final T step ) {', 'private static final double [ ] [ ] STATIC A = {', 'package org . apache . commons . math4 . ode . nonstiff ;', '}']","['private static final double [ ] STATIC C = {', 'private static final double [ ] STATIC B = {', '{ 0 . 0 , 1 . 0 / 2 . 0 } ,', '1 . 0 / 2 . 0 , 1 . 0 / 2 . 0 , 1 . 0', '} ;', 'new ClassicalRungeKuttaFieldStepInterpolator < T > ( ) , step ) ;', 'private static final double [ ] [ ] STATIC A = {', 'package org . apache . commons . math4 . ode . nonstiff ;', '1 . 0 / 6 . 0 , 1 . 0 / 3 . 0 , 1 . 0 / 3 . 0 , 1 . 0 / 6 . 0', 'extends RungeKuttaFieldIntegrator < T > {']","['public class GillFieldIntegrator < T extends RealFieldElement < T > >', 'private static final double [ ] STATIC C = {', '{ ( FastMath . sqrt ( 2 . 0 ) - 1 . 0 ) / 2 . 0 , ( 2 . 0 - FastMath . sqrt ( 2 . 0 ) ) / 2 . 0 } ,', 'private static final double [ ] STATIC B = {', '1 . 0 / 6 . 0 , ( 2 . 0 - FastMath . sqrt ( 2 . 0 ) ) / 6 . 0 , ( 2 . 0 + FastMath . sqrt ( 2 . 0 ) ) / 6 . 0 , 1 . 0 / 6 . 0', '1 . 0 / 2 . 0 , 1 . 0 / 2 . 0 , 1 . 0', '} ;', 'super ( field , ""Gill"" , STATIC C , STATIC A , STATIC B , new GillFieldStepInterpolator < T > ( ) , step ) ;', 'private static final double [ ] [ ] STATIC A = {', 'package org . apache . commons . math4 . ode . nonstiff ;']","['private static final double [ ] STATIC C = {', 'private static final double [ ] STATIC B = {', '} ;', '1 . 0 / 8 . 0 , 3 . 0 / 8 . 0 , 3 . 0 / 8 . 0 , 1 . 0 / 8 . 0', 'private static final double [ ] [ ] STATIC A = {', 'package org . apache . commons . math4 . ode . nonstiff ;', '{ - 1 . 0 / 3 . 0 , 1 . 0 } ,', 'extends RungeKuttaFieldIntegrator < T > {', '{ 1 . 0 , - 1 . 0 , 1 . 0 }', 'public ThreeEighthesFieldIntegrator ( final Field < T > field , final T step ) {']","['private static final double [ ] STATIC C = {', 'package org . apache . commons . math4 . ode . nonstiff ;', '}', 'import org . apache . commons . math4 . util . FastMath ;', 'import org . apache . commons . math4 . RealFieldElement ;', 'import org . apache . commons . math4 . Field ;', '{ 8 . 0 / 27 . 0 , 2 . 0 / 27 . 0 , 8 . 0 / 27 . 0 } ,', 'private static final double [ ] [ ] STATIC A = {', 'public class LutherFieldIntegrator < T extends RealFieldElement < T > >', '{ ( 330 . 0 + 105 . 0 * Q ) / 180 . 0 , ( 120 . 0 + 0 . 0 * Q ) / 180 . 0 , ( - 200 . 0 + 280 . 0 * Q ) / 180 . 0 , ( 126 . 0 - 189 . 0 * Q ) / 180 . 0 , ( - 686 . 0 - 126 . 0 * Q ) / 180 . 0 , ( 490 . 0 - 70 . 0 * Q ) / 180 . 0 }']","['public static < T extends RealFieldElement < T > > T min ( final T e1 , final T e2 ) {', '}', 'return e1 . subtract ( e2 ) . getReal ( ) > = 0 ? e1 : e2 ;', 'import org . apache . commons . math4 . RealFieldElement ;', 'return e1 . subtract ( e2 ) . getReal ( ) > = 0 ? e2 : e1 ;', 'public static < T extends RealFieldElement < T > > T max ( final T e1 , final T e2 ) {']","['yDotK [ 0 ] = stepStart . getDerivative ( ) ;', 'yDotK [ 0 ] = equations . getMapper ( ) . mapDerivative ( stepStart ) ;']","['filteredH = maxStep ;', 'import org . apache . commons . math4 . util . FastMath ;', 'yDotOnScale2 = yDotOnScale2 . add ( ratioDot . multiply ( ratioDot ) ) ;', 'import org . apache . commons . math4 . RealFieldElement ;', 'protected double [ ] vecRelativeTolerance ;', '@ Override', 'initialStepSize . subtract ( maxStep ) . getReal ( ) > 0 ) {', 'if ( h . abs ( ) . subtract ( minStep ) . getReal ( ) < 0 ) {', 'final double [ ] relativeTolerance ) {', 'stepSize = minStep . multiply ( maxStep ) . sqrt ( ) ;']","['FieldStepInterpolator < T > copy ( ) throws MaxCountExceededException ;', 'import org . apache . commons . math4 . exception . MaxCountExceededException ;']","['forward = true ;', '+ + index ;', 'add ( dt1 . multiply ( dt2 ) . multiply ( d12 ) . multiply ( iMin ) ) .', 'import org . apache . commons . math4 . util . FastMath ;', 'throw new MathIllegalArgumentException ( LocalizedFormats . PROPAGATION DIRECTION MISMATCH ) ;', 'import org . apache . commons . math4 . RealFieldElement ;', 'private List < FieldStepInterpolator < T > > steps ;', 'throws MathIllegalArgumentException , MaxCountExceededException {', 'final FieldStepInterpolator < T > sMed = steps . get ( iMed ) ;', 'if ( tMed . subtract ( tMin ) . abs ( ) . subtract ( 1 . 0e - 6 ) . getReal ( ) < 0 | |']","['final T errSum2 = yDotK [ 0 ] [ j ] . multiply ( E2 01 ) .', '{ ( 462 . 0 + 107 . 0 * FastMath . sqrt ( 6 . 0 ) ) / 3000 . 0 , 0 . 0 ,', '- 844554132 . 0 / 47026969 . 0 , 8444996352 . 0 / 302158619 . 0 ,', 'private static final double E1 10 = 464500805 . 0 / 1389975552 . 0 ;', 'return 8 ;', 'add ( yDotK [ 10 ] [ j ] . multiply ( E2 11 ) ) .', 'import org . apache . commons . math4 . util . FastMath ;', 'import org . apache . commons . math4 . RealFieldElement ;', 'add ( yDotK [ 6 ] [ j ] . multiply ( E2 07 ) ) .', '66578432 . 0 / 35198415 . 0 ,']","['private static final double [ ] STATIC C = {', 'final double minStep , final double maxStep ,', 'package org . apache . commons . math4 . ode . nonstiff ;', 'private static final double [ ] STATIC E = {', '}', 'import org . apache . commons . math4 . RealFieldElement ;', '{ 1 . 0 / 8 . 0 , 0 . 0 , 3 . 0 / 8 . 0 } ,', '@ Override', 'import org . apache . commons . math4 . Field ;', 'final T ratio = h . multiply ( errSum ) . divide ( tol ) ;']","['private static final double E6 = 22 . 0 / 525 . 0 ;', 'private static final double [ ] STATIC C = {', 'final double minStep , final double maxStep ,', 'package org . apache . commons . math4 . ode . nonstiff ;', '}', '{ 44 . 0 / 45 . 0 , - 56 . 0 / 15 . 0 , 32 . 0 / 9 . 0 } ,', 'import org . apache . commons . math4 . RealFieldElement ;', 'private static final double E3 = - 71 . 0 / 16695 . 0 ;', 'private static final double E5 = - 17253 . 0 / 339200 . 0 ;', '@ Override']","['T getRelativeAccuracy ( ) ;', 'AllowedSolution allowedSolution ) ;', 'int getMaxEvaluations ( ) ;', 'package org . apache . commons . math4 . analysis . solvers ;', 'T solve ( int maxEval , RealFieldUnivariateFunction < T > f , T min , T max , T startValue ,', 'T solve ( int maxEval , RealFieldUnivariateFunction < T > f , T min , T max ,', 'T getFunctionValueAccuracy ( ) ;', '}', 'import org . apache . commons . math4 . RealFieldElement ;', 'int getEvaluations ( ) ;']","['y = problem . y . clone ( ) ;', '}', 'super ( problem ) ;', 'public TestProblem1 ( TestProblem1 problem ) {', 'public TestProblem1 copy ( ) {', 'return new TestProblem1 ( this ) ;', '@ Override', 'public TestProblem2 copy ( ) {', 'y = problem . y . clone ( ) ;', 'return new TestProblem2 ( this ) ;']","['for ( int i = 0 ; i < n ; + + i )', 'double c = FastMath . exp ( getInitialTime ( ) - t ) ;', 'for ( int i = 0 ; i < n ; + + i ) {', 'for ( int i = 0 ; i < getDimension ( ) ; + + i )', 'double c = FastMath . exp ( t0 - t ) ;', 'y [ i ] = c * getInitialState ( ) [ i ] ;', 'y [ i ] = c * y0 [ i ] ;', 'for ( int i = 0 ; i < getDimension ( ) ; + + i ) {', 'for ( int i = 0 ; i < n ; + + i )', 'for ( int i = 0 ; i < getDimension ( ) ; + + i ) {']","['extends TestFieldProblemAbstract < T > {', '}', 'import org . apache . commons . math4 . RealFieldElement ;', 'setFinalConditions ( convert ( 4 . 0 ) ) ;', '@ Override', 'public T [ ] doComputeDerivatives ( T t , T [ ] y ) {', 'package org . apache . commons . math4 . ode ;', 'public TestFieldProblem1 ( Field < T > field ) {', 'import org . apache . commons . math4 . Field ;', 'return yDot ;']","['private final double [ ] b ;', 'createInterpolator ( this , y0 , yDotK , forward , equations . getMapper ( ) ) ;', 'final RungeKuttaFieldStepInterpolator < T > interpolator = ( RungeKuttaFieldStepInterpolator < T > ) prototype . copy ( ) ;', 'protected abstract RungeKuttaFieldStepInterpolator < T > createInterpolator ( AbstractFieldIntegrator < T > rkIntegrator ,', 'private final double exp ;', '}', 'final double [ ] c , final double [ ] [ ] a , final double [ ] b ,', 'return getField ( ) . getOne ( ) . multiply ( p ) . divide ( q ) ;', 'exp = - 1 . 0 / getOrder ( ) ;', 'private final T [ ] [ ] a ;']","['softPreviousState = null ;', 'this . mapper = equationsMapper ;', 'currentState = y ;', 'final FieldEquationsMapper < T > equationsMapper ) {', '}', 'this . forward = isForward ;', 'globalCurrentState = null ;', 'protected AbstractFieldStepInterpolator ( final T [ ] y , final boolean isForward ,', 'this . forward = forward ;', 'currentState = y . clone ( ) ;']","['private static final double [ ] STATIC C = {', 'protected T [ ] getC ( ) {', 'private static final double [ ] STATIC B = {', 'return a ;', '{ 0 . 0 , 1 . 0 / 2 . 0 } ,', 'c [ 2 ] = getField ( ) . getOne ( ) ;', '1 . 0 / 2 . 0 , 1 . 0 / 2 . 0 , 1 . 0', '}', '} ;', 'a [ 0 ] [ 0 ] = fraction ( 1 , 2 ) ;']","['private static final double E6 = 22 . 0 / 525 . 0 ;', 'e6 = fraction ( 22 , 525 ) ;', 'private static final double [ ] STATIC C = {', 'protected T [ ] getC ( ) {', '{ 44 . 0 / 45 . 0 , - 56 . 0 / 15 . 0 , 32 . 0 / 9 . 0 } ,', 'return a ;', 'private static final double E3 = - 71 . 0 / 16695 . 0 ;', 'a [ 3 ] [ 2 ] = fraction ( 64448 , 6561 ) ;', 'private static final double E5 = - 17253 . 0 / 339200 . 0 ;', 'b [ 4 ] = fraction ( - 2187 , 6784 ) ;']","['ClassicalRungeKuttaFieldStepInterpolator ( ) {', 'final FieldEquationsMapper < T > mapper ) {', 'final T [ ] y , final T [ ] [ ] yDotArray , final boolean forward ,', 'super ( rkIntegrator , y , yDotArray , forward , mapper ) ;', 'ClassicalRungeKuttaFieldStepInterpolator ( final AbstractFieldIntegrator < T > rkIntegrator ,', 'import org . apache . commons . math4 . ode . AbstractFieldIntegrator ;', 'protected void reinitialize ( final T [ ] y , final boolean isForward , final FieldEquationsMapper < T > equationsMapper ) {', 'final FieldEquationsMapper < T > mapper ) {', 'super . reinitialize ( y , isForward , equationsMapper ) ;', 'final T [ ] y , final T [ ] [ ] yDotArray , final boolean forward ,']","['h = globalCurrentState . getTime ( ) . subtract ( globalPreviousState . getTime ( ) ) ;', 'if ( globalPreviousState ! = null ) {', 'h = globalCurrentState . getTime ( ) . subtract ( globalPreviousState . getTime ( ) ) ;', '}']","['currentState = y . clone ( ) ;', 'currentState = y ;']","['public FieldODEState < T > mapState ( final T t , final T [ ] y ) {', 'if ( complete . length < end ) {', 'throws MathIllegalArgumentException {', 'throw new DimensionMismatchException ( yDot . length , getTotalDimension ( ) ) ;', 'public void insertEquationData ( final int index , T [ ] equationData , T [ ] complete ) {', 'public FieldODEState < T > mapState ( final T t , final T [ ] y )', 'final int dimension = start [ index + 1 ] - begin ;', 'import org . apache . commons . math4 . exception . DimensionMismatchException ;', 'public FieldODEStateAndDerivative < T > mapStateAndDerivative ( final T t , final T [ ] y , final T [ ] yDot ) {', '}']","['final T [ ] y = equations . getMapper ( ) . mapState ( eventState ) ;', 'if ( newState ! = null ) {', 'resetOccurred = true ;', 'final T [ ] yDot = computeDerivatives ( newState . getTime ( ) , y ) ;', 'return equations . getMapper ( ) . mapStateAndDerivative ( eventState . getTime ( ) , y , yDot ) ;', 'resetOccurred = true ;', '}', 'FieldODEState < T > newState = null ;', 'if ( needReset ) {', '}']","['final FieldEquationsMapper < T > mapper ) {', 'return new ClassicalRungeKuttaFieldStepInterpolator < T > ( this , forward , mapper ) ;', 'createInterpolator ( final AbstractFieldIntegrator < T > rkIntegrator , final T [ ] y ,', 'createInterpolator ( final boolean forward , final FieldEquationsMapper < T > mapper ) {', 'final T [ ] [ ] yDotArray , final boolean forward ,', 'import org . apache . commons . math4 . ode . AbstractFieldIntegrator ;', 'return new ClassicalRungeKuttaFieldStepInterpolator < T > ( rkIntegrator , y , yDotArray , forward , mapper ) ;', 'final T [ ] interpolatedState = MathArrays . buildArray ( theta . getField ( ) , previousState . length ) ;', 'final T coeff4 = s . multiply ( fourTheta2 . subtract ( theta . multiply ( 3 ) ) ) ;', 'final T coeff1 = s . multiply ( fourTheta2 . subtract ( theta . multiply ( 9 ) ) . add ( 6 ) ) ;']","['T previousValueError = null ;', 'import org . apache . commons . math4 . util . FastMath ;', 'public void testBackward ( )', 'import org . apache . commons . math4 . RealFieldElement ;', 'T step = pb . getFinalTime ( ) . subtract ( pb . getInitialState ( ) . getTime ( ) ) . multiply ( 0 . 001 ) . abs ( ) ;', 'private < T extends RealFieldElement < T > > void doTestBackward ( Field < T > field )', 'allProblems [ 1 ] = new TestFieldProblem2 < T > ( field ) ;', 'integ . integrate ( new FieldExpandableODE < T > ( new FieldFirstOrderDifferentialEquations < T > ( ) {', 'if ( functions . length = = 0 ) {', 'allProblems [ 2 ] = new TestFieldProblem3 < T > ( field ) ;']","['return new ClassicalRungeKuttaFieldStepInterpolator < T > ( this , forward , mapper ) ;', 'return new ClassicalRungeKuttaFieldStepInterpolator < T > ( getField ( ) , forward , mapper ) ;', 'final T one = time . getField ( ) . getOne ( ) ;', 'final T one = getField ( ) . getOne ( ) ;', 'ClassicalRungeKuttaFieldStepInterpolator ( final AbstractFieldIntegrator < T > rkIntegrator ,', 'ClassicalRungeKuttaFieldStepInterpolator ( final Field < T > field , final boolean forward ,', 'super ( rkIntegrator , forward , mapper ) ;', 'super ( field , forward , mapper ) ;', 'final boolean forward ,', 'import org . apache . commons . math4 . Field ;']","['doTestDecreasingSteps ( Decimal64Field . getInstance ( ) ) ;', 'T [ ] yDot = MathArrays . buildArray ( field , 1 ) ;', 'T previousValueError = null ;', 'new FieldODEState < T > ( t0 , y0 ) ,', 'import org . apache . commons . math4 . util . FastMath ;', 'public void testBackward ( )', 'import org . apache . commons . math4 . RealFieldElement ;', 'import org . apache . commons . math4 . ode . events . Action ;', 'T step = pb . getFinalTime ( ) . subtract ( pb . getInitialState ( ) . getTime ( ) ) . multiply ( 0 . 001 ) . abs ( ) ;', 'k [ 2 ] = field . getZero ( ) . add ( 1 . 0e - 6 ) ;']","['System . exit ( 1 ) ;', 'new TestProblem1 ( ) , new TestProblem2 ( ) , new TestProblem3 ( ) ,', 'new TestProblem4 ( )', 'new TestProblem4 ( ) , new TestProblem5 ( ) , new TestProblem6 ( )']","['b [ 1 ] = two . subtract ( sqrtTwo ) . divide ( 6 ) ;', 'b [ 1 ] = sqrtTwo . subtract ( 2 ) . divide ( - 6 ) ;', 'b [ 2 ] = two . add ( sqrtTwo ) . divide ( 6 ) ;', 'b [ 2 ] = sqrtTwo . add ( 2 ) . divide ( 6 ) ;', 'final T two = getField ( ) . getOne ( ) . multiply ( 2 ) ;', 'final T two = getField ( ) . getZero ( ) . add ( 2 ) ;', 'interpolatedState = previousStateLinearCombination ( coeff1 , coeff2 , coeff3 , coeff4 ) ;', 'final T coeff3 = c23 . multiply ( one plus inv sqrt 2 ) ;', 'final T coeff3 = c23 . multiply ( ONE PLUS INV SQRT 2 ) ;', 'final T sqrt = field . getZero ( ) . add ( 0 . 5 ) . sqrt ( ) ;']","['T dy = y [ 1 ] . subtract ( yth [ 1 ] ) ;', 'public abstract class AbstractRungeKuttaFieldIntegratorTest {', 'final double safetyTimeFactor ,', 'final double epsilonT )', 'T [ ] yDot = MathArrays . buildArray ( field , 1 ) ;', 'T previousValueError = null ;', 'Assert . assertEquals ( expectedMaxError , maxError . getReal ( ) , epsilon ) ;', 'new FieldODEState < T > ( t0 , y0 ) ,', 'public KeplerHandler ( TestFieldProblem3 < T > pb , double expectedMaxError , double epsilon ) {', 'import org . apache . commons . math4 . util . FastMath ;']","['a [ 3 ] [ 2 ] = q . multiply ( 48 ) . subtract ( 336 ) . divide ( - 392 ) ;', 'a [ 5 ] [ 5 ] = q . multiply ( - 70 ) . add ( 490 ) . divide ( 180 ) ;', 'a [ 5 ] [ 0 ] = q . multiply ( 105 ) . add ( 330 ) . divide ( 180 ) ;', 'a [ 5 ] [ 2 ] = q . multiply ( 280 ) . add ( - 200 ) . divide ( 180 ) ;', 'a [ 3 ] [ 1 ] = q . multiply ( 8 ) . subtract ( 56 ) . divide ( 392 ) ;', 'a [ 4 ] [ 2 ] = q . multiply ( - 320 ) . divide ( 1960 ) ;', 'a [ 2 ] [ 2 ] = fraction ( 8 , 27 ) ;', 'a [ 2 ] [ 2 ] = a [ 2 ] [ 0 ] ;', 'a [ 4 ] [ 4 ] = q . multiply ( 392 ) . add ( 2352 ) . divide ( 1960 ) ;', 'a [ 4 ] [ 3 ] = q . multiply ( 363 ) . add ( 63 ) . divide ( 1960 ) ;']","['fieldY ,', 'import org . apache . commons . math4 . util . FastMath ;', 'import org . apache . commons . math4 . RealFieldElement ;', 'add ( interpolator . getCurrentState ( ) . getTime ( ) . multiply ( i ) ) .', 'String interpolatorName = interpolator . getClass ( ) . getName ( ) ;', 'interpolator . getInterpolatedState ( interpolator . getPreviousState ( ) . getTime ( ) ) . getState ( ) [ i ] . getReal ( ) ,', 'Assert . fail ( cnfe . getLocalizedMessage ( ) ) ;', 'protected < T extends RealFieldElement < T > > void doInterpolationAtBounds ( final Field < T > field , double epsilon ) {', '} catch ( InstantiationException ie ) {', 'fieldIntegrator = clz . getConstructor ( Field . class , RealFieldElement . class ) . newInstance ( field ,']","['protected < T extends RealFieldElement < T > > void doTestDerivativesConsistency ( final Field < T > field , double epsilon ) {', 'T step = pb . getFinalTime ( ) . subtract ( pb . getInitialState ( ) . getTime ( ) ) . multiply ( 0 . 001 ) ;', '@ Test', 'import org . apache . commons . math4 . ode . sampling . StepInterpolatorTestUtils ;', 'RungeKuttaFieldIntegrator < T > integ = createIntegrator ( field , step ) ;', 'StepInterpolatorTestUtils . checkDerivativesConsistency ( integ , pb , 1 . 0e - 10 ) ;', 'public abstract void testDerivativesConsistency ( ) ;', '}', 'TestFieldProblem3 < T > pb = new TestFieldProblem3 < T > ( field ) ;', 'doTestDerivativesConsistency ( Decimal64Field . getInstance ( ) , 1 . 0e - 10 ) ;']","['public void testUnstableDerivative ( ) {', '@ Test', 'package org . apache . commons . math4 . ode . nonstiff ;', 'protected < T extends RealFieldElement < T > > RungeKuttaFieldIntegrator < T >', '}', 'public void testDecreasingSteps ( ) {', 'import org . apache . commons . math4 . RealFieldElement ;', 'public void testStepSize ( ) {', 'import org . apache . commons . math4 . Field ;', 'public void testMissedEndEvent ( ) {']","['public void testUnstableDerivative ( ) {', '@ Test', 'package org . apache . commons . math4 . ode . nonstiff ;', 'public class ThreeEighthesFieldIntegratorTest extends AbstractRungeKuttaFieldIntegratorTest {', 'protected < T extends RealFieldElement < T > > RungeKuttaFieldIntegrator < T >', '}', 'public void testDecreasingSteps ( ) {', 'import org . apache . commons . math4 . RealFieldElement ;', 'public void testStepSize ( ) {', 'import org . apache . commons . math4 . Field ;']","['public void testUnstableDerivative ( ) {', '@ Test', 'doTestSingleStep ( Decimal64Field . getInstance ( ) , 1 . 0e - 11 ) ;', 'package org . apache . commons . math4 . ode . nonstiff ;', 'protected < T extends RealFieldElement < T > > RungeKuttaFieldIntegrator < T >', '}', 'import org . apache . commons . math4 . exception . NumberIsTooSmallException ;', 'public void testBackward ( )', 'import org . apache . commons . math4 . RealFieldElement ;', 'public void testMissedEndEvent ( )']","['Assert . fail ( e . getLocalizedMessage ( ) ) ;', 'Assert . fail ( e . getLocalizedMessage ( ) ) ;', 'try {', 'try {', '} catch ( NoSuchMethodException nsme ) {', '} catch ( NoSuchMethodException nsme ) {', 'fieldIntegrator = clz . getConstructor ( Field . class , RealFieldElement . class ,', '}', 'field . getOne ( ) ,', 'String interpolatorName = interpolator . getClass ( ) . getName ( ) ;']","['return new EulerFieldStepInterpolator < > ( field , forward , mapper ) ;', 'return new EulerFieldStepInterpolator < T > ( field , forward , mapper ) ;']","['doInterpolationAtBounds ( Decimal64Field . getInstance ( ) , 1 . 0e - 15 ) ;', '@ Test', 'return new ClassicalRungeKuttaFieldStepInterpolator < T > ( field , forward , mapper ) ;', 'doInterpolationInside ( Decimal64Field . getInstance ( ) , 2 . 6e - 7 , 3 . 6e - 6 ) ;', 'package org . apache . commons . math4 . ode . nonstiff ;', '}', 'protected < T extends RealFieldElement < T > > RungeKuttaFieldStepInterpolator < T >', 'createInterpolator ( Field < T > field , boolean forward , FieldEquationsMapper < T > mapper ) {', 'import org . apache . commons . math4 . RealFieldElement ;', 'import org . junit . Test ;']","['doInterpolationAtBounds ( Decimal64Field . getInstance ( ) , 1 . 0e - 15 ) ;', '@ Test', 'doInterpolationInside ( Decimal64Field . getInstance ( ) , 2 . 6e - 7 , 3 . 6e - 6 ) ;', 'package org . apache . commons . math4 . ode . nonstiff ;', 'public class ThreeEighthesFieldStepInterpolatorTest extends AbstractRungeKuttaFieldStepInterpolatorTest {', '}', 'protected < T extends RealFieldElement < T > > RungeKuttaFieldStepInterpolator < T >', 'createInterpolator ( Field < T > field , boolean forward , FieldEquationsMapper < T > mapper ) {', 'import org . apache . commons . math4 . RealFieldElement ;', 'import org . junit . Test ;']","['doInterpolationAtBounds ( Decimal64Field . getInstance ( ) , 1 . 0e - 15 ) ;', '@ Test', 'doInterpolationInside ( Decimal64Field . getInstance ( ) , 2 . 6e - 7 , 3 . 6e - 6 ) ;', 'package org . apache . commons . math4 . ode . nonstiff ;', '}', 'public class GillFieldStepInterpolatorTest extends AbstractRungeKuttaFieldStepInterpolatorTest {', 'protected < T extends RealFieldElement < T > > RungeKuttaFieldStepInterpolator < T >', 'createInterpolator ( Field < T > field , boolean forward , FieldEquationsMapper < T > mapper ) {', 'import org . apache . commons . math4 . RealFieldElement ;', 'import org . junit . Test ;']","['doInterpolationAtBounds ( Decimal64Field . getInstance ( ) , 1 . 0e - 15 ) ;', 'return new MidpointFieldStepInterpolator < T > ( field , forward , mapper ) ;', '@ Test', 'package org . apache . commons . math4 . ode . nonstiff ;', '}', 'protected < T extends RealFieldElement < T > > RungeKuttaFieldStepInterpolator < T >', 'createInterpolator ( Field < T > field , boolean forward , FieldEquationsMapper < T > mapper ) {', 'import org . apache . commons . math4 . RealFieldElement ;', 'import org . junit . Test ;', 'public void interpolationAtBounds ( ) {']","['doInterpolationAtBounds ( Decimal64Field . getInstance ( ) , 1 . 0e - 15 ) ;', '@ Test', 'package org . apache . commons . math4 . ode . nonstiff ;', 'public class LutherFieldStepInterpolatorTest extends AbstractRungeKuttaFieldStepInterpolatorTest {', 'return new LutherFieldStepInterpolator < T > ( field , forward , mapper ) ;', '}', 'protected < T extends RealFieldElement < T > > RungeKuttaFieldStepInterpolator < T >', 'createInterpolator ( Field < T > field , boolean forward , FieldEquationsMapper < T > mapper ) {', 'import org . apache . commons . math4 . RealFieldElement ;', 'import org . junit . Test ;']","['final T q = field . getOne ( ) . multiply ( 21 ) . sqrt ( ) ;', 'final T s = oneMinusThetaH ;', 'final T s = theta . multiply ( theta . multiply ( h ) ) ;', 'final T q = field . getZero ( ) . add ( 21 ) . sqrt ( ) ;', 'final T coeff1 = s . multiply ( theta . multiply ( theta . multiply ( theta . multiply ( 21 / 5 . 0 ) . add ( - 47 / 4 . 0 ) ) . add ( 12 ) ) . add ( - 27 / 5 . 0 ) ) . add ( 1 ) ;', 'final T coeffDot7 = theta . multiply ( theta . multiply ( theta . multiply ( 3 . 0 ) . add ( - 3 ) ) . add ( 3 / 5 . 0 ) ) ;', 'final T coeff5 = s . multiply ( theta . multiply ( theta . multiply ( theta . multiply ( d5a . divide ( 25 ) ) . add ( d5b . divide ( 300 ) ) ) . add ( d5c . divide ( 900 ) ) ) . add ( - 49 / 180 . 0 ) ) . add ( - 49 / 180 . 0 ) ;', 'final T coeff7 = s . multiply ( theta . multiply ( theta . multiply ( theta . multiply ( 3 / 4 . 0 ) . add ( - 1 ) ) . add ( 3 / 10 . 0 ) ) ) ;', 'final T coeff6 = s . multiply ( theta . multiply ( theta . multiply ( theta . multiply ( d6a . divide ( 25 ) ) . add ( d6b . divide ( 300 ) ) ) . add ( d6c . divide ( 900 ) ) ) . add ( - 49 / 180 . 0 ) ) . add ( - 49 / 180 . 0 ) ;', 'final T coeff5 = s . multiply ( theta . multiply ( theta . multiply ( theta . multiply ( theta . multiply ( d5a . divide ( 25 ) ) . add ( d5b . divide ( 300 ) ) ) . add ( d5c . divide ( 900 ) ) ) . add ( - 49 / 180 . 0 ) ) . add ( - 49 / 180 . 0 ) ) ;']","['field . getOne ( ) ) ;', 'secondaryMappers [ i ] = new EquationsMapper ( start [ i + 1 ] , start [ i + 2 ] ) ;', 'integrator = clz . getConstructor ( Field . class , RealFieldElement . class ) . newInstance ( field ,', 'primaryMapper = new EquationsMapper ( start [ 0 ] , start [ 1 ] ) ;', 'RungeKuttaStepInterpolator regularInterpolator = null ;', 'fieldInterpolator . isForward ( ) ,', '} catch ( IllegalArgumentException iae ) {', 'Assert . fail ( cnfe . getLocalizedMessage ( ) ) ;', 'import org . apache . commons . math4 . ode . sampling . AbstractFieldStepInterpolator ;', 'Assert . assertEquals ( 0 . 0 , maxErrorSinDot , epsilonSinDot ) ;']","['final T b5 = hTheta . multiply ( theta . multiply ( theta . multiply ( 5 . 0 / 12 . 0 ) ) . add ( - 5 . 0 / 16 . 0 ) ) ;', 'final T b5 = hTheta . multiply ( theta . multiply ( theta . multiply ( 5 . 0 / 12 . 0 ) . add ( - 5 . 0 / 16 . 0 ) ) ) ;']","['pendingEventTime = null ;', 'pendingEventTime = null ;', 'final T tb = ( i = = n - 1 ) ? t1 : t0 . add ( h . multiply ( i + 1 ) ) ;', 'final T tb = ( i = = n - 1 ) ? t1 : t0 . add ( h . multiply ( i + 1 ) ) ;', 'return true ;', 'return true ;', 'try {', 'root . subtract ( ta ) . abs ( ) . subtract ( convergence ) . getReal ( ) < = 0 & &', 'root . subtract ( ta ) . abs ( ) . subtract ( convergence ) . getReal ( ) < = 0 & &', 'ga = f . value ( ta ) ;']","['System . arraycopy ( y , 0 , yTmp , 0 , y . length ) ;', 'yDotK [ 0 ] = equations . getMapper ( ) . mapDerivative ( stepStart ) ;', 'yDotK [ 0 ] = stepStart . getDerivative ( ) ;', 'y = equations . getMapper ( ) . mapState ( stepStart ) ;']","['scalAbsoluteTolerance ,', 'public abstract void testForwardBackwardExceptions ( ) ;', 'public abstract void testEventsErrors ( ) ;', 'Assert . assertEquals ( 0 . 0 , maxError . getReal ( ) , epsilon ) ;', 'import org . apache . commons . math4 . util . FastMath ;', 'import org . apache . commons . math4 . RealFieldElement ;', 'import org . apache . commons . math4 . ode . events . Action ;', '} catch ( IllegalArgumentException iae ) {', 'protected < T extends RealFieldElement < T > > void doTestEvents ( final Field < T > field ,', 'Assert . assertTrue ( calls < = previousCalls ) ;']","['protected T [ ] getC ( ) {', 'public T [ ] getC ( ) {', 'protected T [ ] [ ] getA ( ) {', 'public T [ ] [ ] getA ( ) {', 'protected T [ ] getB ( ) {', 'public T [ ] getB ( ) {', 'protected T [ ] getC ( ) {', 'public T [ ] getC ( ) {', 'protected T [ ] [ ] getA ( ) {', 'public T [ ] [ ] getA ( ) {']","['RungeKuttaStepInterpolator regularInterpolator = convertInterpolator ( fieldInterpolator ) ;', 'regularInterpolator . reinitialize ( dummyIntegrator , y , yDotArray ,', 'regularInterpolator . reinitialize ( null , y , yDotArray ,', 'yDot [ i ] = fieldYDot [ i ] . getReal ( ) ;', 'setUpInterpolator ( field , new SinCos < > ( field ) , 0 . 0 , new double [ ] { 0 . 0 , 1 . 0 } , 0 . 125 ) ;', 'import org . apache . commons . math4 . ode . ExpandableStatefulODE ;', '0 . 0 , new double [ ] { 0 . 0 , 1 . 0 } , 0 . 125 ) ;', '}', 'RungeKuttaStepInterpolator convertInterpolator ( final RungeKuttaFieldStepInterpolator < T > fieldInterpolator ) {', '@ Override']","['@ Test', 'package org . apache . commons . math4 . ode . nonstiff ;', '}', 'import org . apache . commons . math4 . RealFieldElement ;', 'final double scalAbsoluteTolerance , final double scalRelativeTolerance ) {', 'doTestForwardBackwardExceptions ( Decimal64Field . getInstance ( ) ) ;', '@ Override', 'import org . apache . commons . math4 . Field ;', 'public class HighamHall54FieldIntegratorTest extends AbstractEmbeddedRungeKuttaFieldIntegratorTest {', 'doTestKepler ( Decimal64Field . getInstance ( ) , 1 . 5e - 4 ) ;']","['@ Test', 'package org . apache . commons . math4 . ode . nonstiff ;', '}', 'import org . apache . commons . math4 . RealFieldElement ;', 'public class DormandPrince54FieldIntegratorTest extends AbstractEmbeddedRungeKuttaFieldIntegratorTest {', 'final double scalAbsoluteTolerance , final double scalRelativeTolerance ) {', 'doTestForwardBackwardExceptions ( Decimal64Field . getInstance ( ) ) ;', '@ Override', 'import org . apache . commons . math4 . Field ;', 'doTestEventsNoConvergence ( Decimal64Field . getInstance ( ) ) ;']","['@ Test', 'package org . apache . commons . math4 . ode . nonstiff ;', '}', 'import org . apache . commons . math4 . RealFieldElement ;', 'final double scalAbsoluteTolerance , final double scalRelativeTolerance ) {', 'doTestForwardBackwardExceptions ( Decimal64Field . getInstance ( ) ) ;', '@ Override', 'import org . apache . commons . math4 . Field ;', 'doTestEventsNoConvergence ( Decimal64Field . getInstance ( ) ) ;', 'public void testSanityChecks ( ) {']","['a [ 1 ] [ 0 ] = fraction ( 3 , 4 ) ;', 'a [ 1 ] [ 0 ] = fraction ( 3 , 40 ) ;', 'c [ 2 ] = fraction ( 5 , 5 ) ;', 'c [ 2 ] = fraction ( 4 , 5 ) ;', 'doTestKepler ( Decimal64Field . getInstance ( ) , 7 . 0e - 10 ) ;', 'doTestIncreasingTolerance ( Decimal64Field . getInstance ( ) , 0 . 5 , 1 . 0e - 12 ) ;', 'doTestEvents ( Decimal64Field . getInstance ( ) , 5 . 0e - 6 , ""Dormand - Prince 5 ( 4 ) "" ) ;', 'doTestKepler ( Decimal64Field . getInstance ( ) , 3 . 1e - 10 ) ;', 'doTestIncreasingTolerance ( Decimal64Field . getInstance ( ) , 0 . 7 , 1 . 0e - 12 ) ;', 'doTestEvents ( Decimal64Field . getInstance ( ) , 3 . 10e - 8 , ""Dormand - Prince 5 ( 4 ) "" ) ;']","['a [ 14 ] [ 8 ] = fraction ( 22719829234375 . 0 , 63689648654052 . 0 ) . subtract ( a [ 11 ] [ 8 ] ) ;', 'a [ 12 ] [ 8 ] = fraction ( - 1769651421925959 . 0 , 14249385146080000 . 0 ) ;', 'a [ 12 ] [ 7 ] = fraction ( - 11108320068443 . 0 , 45111937500000 . 0 ) . subtract ( a [ 11 ] [ 7 ] ) ;', 'a [ 14 ] [ 9 ] = getField ( ) . getZero ( ) ;', 'a [ 13 ] [ 11 ] = fraction ( 8824659001 . 0 , 23066716781250 . 0 ) . subtract ( a [ 11 ] [ 11 ] ) ;', 'a [ 13 ] [ 9 ] = getField ( ) . getZero ( ) ;', 'a [ 1 ] [ 1 ] = sqrt6 . add ( - 6 ) . divide ( - 40 ) ;', 'a [ 1 ] [ 1 ] = sqrt6 . add ( - 6 ) . divide ( - 60 ) ;', 'a [ 13 ] [ 8 ] = getField ( ) . getZero ( ) . subtract ( a [ 11 ] [ 8 ] ) ;', 'a [ 13 ] [ 10 ] = fraction ( - 2538710946863 . 0 , 23431227861250000 . 0 ) ;']","['doTestIncreasingTolerance ( Decimal64Field . getInstance ( ) , 0 . 5 , 1 . 0e - 12 ) ;', 'doTestEvents ( Decimal64Field . getInstance ( ) , 1 . 7e - 7 , ""Dormand - Prince 5 ( 4 ) "" ) ;', 'doTestEvents ( Decimal64Field . getInstance ( ) , 3 . 10e - 8 , ""Dormand - Prince 5 ( 4 ) "" ) ;', 'doTestIncreasingTolerance ( Decimal64Field . getInstance ( ) , 0 . 7 , 1 . 0e - 12 ) ;']","['d [ 2 ] [ 15 ] = d [ 0 ] [ 15 ] . multiply ( 2 ) ;', 'add ( dot3 . multiply ( d [ 3 ] [ i ] ) ) .', 'final T f0 = oneMinusThetaH ;', 'q [ i ] = d [ 0 ] [ i ] .', 'd [ 0 ] [ 0 ] = fraction ( 104257 , 1929240 ) ;', 'add ( f2 . multiply ( d [ 2 ] [ i ] ) ) .', 'd [ 2 ] [ 13 ] = d [ 0 ] [ 13 ] . multiply ( 2 ) ;', '}', 'd [ 2 ] [ 12 ] = d [ 0 ] [ 12 ] . multiply ( 2 ) ;', 'p [ i ] = f0 . multiply ( d [ 0 ] [ i ] ) .']","['mapper = new FieldEquationsMapper < > ( mapper , secondary . getDimension ( ) ) ;', 'mapper = new FieldEquationsMapper < T > ( mapper , secondary . getDimension ( ) ) ;', 'integrator . integrate ( new FieldExpandableODE < > ( equations ) ,', 'integ . integrate ( new FieldExpandableODE < T > ( pb ) , pb . getInitialState ( ) , pb . getFinalTime ( ) ) ;', 'integ . integrate ( new FieldExpandableODE < > ( pb ) , pb . getInitialState ( ) , pb . getFinalTime ( ) ) ;', 'integrator . integrate ( new FieldExpandableODE < T > ( pb ) , pb . getInitialState ( ) , pb . getInitialState ( ) . getTime ( ) ) ;', 'integrator . integrate ( new FieldExpandableODE < > ( pb ) ,', 'integrator . integrate ( new FieldExpandableODE < T > ( equations ) ,', 'integrator . integrate ( new FieldExpandableODE < > ( pb ) , pb . getInitialState ( ) , pb . getFinalTime ( ) ) ;', 'integrator . integrate ( new FieldExpandableODE < T > ( pb ) ,']","['return secondaryState . length ;', 'return secondaryState = = null ? 0 : secondaryState . length ;']","['handler . handleStep ( interpolator , isLastStep ) ;', 'AbstractFieldStepInterpolator < T > restricted = interpolator ;', 'interpolator . setSoftCurrentState ( currentState ) ;', 'final FieldODEStateAndDerivative < T > eventState = restricted . getInterpolatedState ( currentEvent . getEventTime ( ) ) ;', 'final FieldODEStateAndDerivative < T > eventState = interpolator . getInterpolatedState ( currentEvent . getEventTime ( ) ) ;', 'if ( currentEvent . evaluateStep ( restricted ) ) {', 'interpolator . setSoftPreviousState ( eventState ) ;', 'restricted = restricted . restrictStep ( previousState , eventState ) ;', 'interpolator . setSoftCurrentState ( eventState ) ;', 'restricted = restricted . restrictStep ( eventState , currentState ) ;']","['if ( n < 2 ) {', 'System . arraycopy ( mapper . start , 0 , start , 0 , index + 1 ) ;', 'return new FieldODEState < T > ( t , state ) ;', 'insertEquationData ( index , state . getSecondaryDerivative ( index ) , yDot ) ;', 'insertEquationData ( index , state . getSecondaryState ( index - 1 ) , y ) ;', 'insertEquationData ( index , state . getSecondaryState ( index ) , y ) ;', 'public FieldODEState < T > mapState ( final T t , final T [ ] y )', 'return new FieldODEState < T > ( t , state , secondaryState ) ;', 'final T [ ] [ ] secondaryState = MathArrays . buildArray ( t . getField ( ) , n - 1 , - 1 ) ;', 'final int n = getNumberOfEquations ( ) ;']","['package org . apache . commons . math4 . ode . nonstiff ;', 'package org . apache . commons . math4 . ode ;', 'FieldExpandableODE < T > equation = new FieldExpandableODE < > ( main ) ;', 'FieldExpandableODE < T > equation = new FieldExpandableODE < T > ( main ) ;', 'FieldFirstOrderDifferentialEquations < T > main = new Linear < > ( field , 3 , 0 ) ;', 'FieldFirstOrderDifferentialEquations < T > main = new Linear < T > ( field , 3 , 0 ) ;']","['omega . multiply ( y [ 0 ] ) . negate ( )', 'final double theta = omega . getReal ( ) * t + alpha . getReal ( ) ;', 'final double dY0dT0 = y1 * dAlphadT0 ;', 't ) ;', 'public DerivativeStructure [ ] computeDerivatives ( final DerivativeStructure t , final DerivativeStructure [ ] y ) {', 'this . dRdY00 = y0 [ 0 ] . divide ( r ) . getReal ( ) ;', 'new DerivativeStructure ( parameters , order , parY00 , 3 . 0 ) ,', 'final int parTO = 1 ;', 'private static class SinCos implements FieldFirstOrderDifferentialEquations < DerivativeStructure > {', 'final double cos = FastMath . cos ( theta ) ;']","['} catch ( IllegalArgumentException iae ) {', 'return true ;', 'import org . apache . commons . math4 . exception . MathIllegalArgumentException ;', '} catch ( MathIllegalArgumentException miae ) {', 'import org . apache . commons . math4 . exception . DimensionMismatchException ;', '} catch ( DimensionMismatchException dme ) {']","['@ Override', '@ Override', '@ Override', '@ Override', '@ Override', '@ Override', '@ Override', '@ Override', '@ Override', '@ Override']","['public abstract class AbstractFieldIntegrator < T extends RealFieldElement < T > > implements FieldFirstOrderIntegrator < T > {', 'public abstract class AbstractFieldIntegrator < T extends RealFieldElement < T > > implements FirstOrderFieldIntegrator < T > {', 'private final FieldFirstOrderDifferentialEquations < T > primary ;', 'private final FirstOrderFieldDifferentialEquations < T > primary ;', 'public FieldExpandableODE ( final FieldFirstOrderDifferentialEquations < T > primary ) {', 'public FieldExpandableODE ( final FirstOrderFieldDifferentialEquations < T > primary ) {', 'public interface FieldFirstOrderDifferentialEquations < T extends RealFieldElement < T > > {', 'public interface FirstOrderFieldDifferentialEquations < T extends RealFieldElement < T > > {', 'public interface FieldFirstOrderIntegrator < T extends RealFieldElement < T > > {', 'public interface FirstOrderFieldIntegrator < T extends RealFieldElement < T > > {']","['protected T stepSize ;', 'protected T getStepSize ( ) {', 'protected boolean isLastStep ;', 'protected void setStepStart ( final FieldODEStateAndDerivative < T > stepStart ) {', 'protected FieldODEStateAndDerivative < T > stepStart ;', '}', 'protected Collection < FieldStepHandler < T > > stepHandlers ;', 'protected void setStepSize ( final T stepSize ) {', 'private boolean isLastStep ;', 'return resetOccurred ;']","['final double espilonLast ,', 'final double scalAbsoluteTolerance , final double scalRelativeTolerance ) ;', 'final double scalAbsoluteTolerance , final double scalRelativeTolerance ) ;', 'final double epsilonLast ,', 'Assert . assertEquals ( 0 , handler . getLastError ( ) . getReal ( ) , espilonLast ) ;', 'Assert . assertEquals ( 0 , handler . getLastError ( ) . getReal ( ) , epsilonLast ) ;', 'final double espilonLast ,', 'final double epsilonLast ,', 'Assert . assertEquals ( 0 , handler . getLastError ( ) . getReal ( ) , espilonLast ) ;', 'Assert . assertEquals ( 0 , handler . getLastError ( ) . getReal ( ) , epsilonLast ) ;']","['scaled [ j ] = yDot [ 0 ] [ j ] . multiply ( getStepSize ( ) ) ;', 'y [ count ] = mapper . mapState ( prev ) ;', 'scalAbsoluteTolerance ,', 'protected Array2DRowFieldMatrix < T > nordsieck ;', 'vecAbsoluteTolerance ,', 'for ( int j = 0 ; j < scaled . length ; + + j ) {', 'super ( ( Throwable ) null ) ;', 'import org . apache . commons . math4 . util . FastMath ;', 'protected T computeStepGrowShrinkFactor ( final T error ) {', 'import org . apache . commons . math4 . RealFieldElement ;']","['filteredNextT . subtract ( finalTime ) . getReal ( ) < = 0 ;', 'variation = variation . subtract ( predictedScaled [ i ] ) ;', '} while ( !isLastStep ( ) ) ;', 'Array2DRowFieldMatrix < T > predictedNordsieck = null ;', 'yScale . multiply ( vecRelativeTolerance [ i ] ) . add ( vecAbsoluteTolerance [ i ] ) ;', 'import org . apache . commons . math4 . RealFieldElement ;', 'private T errorEstimation ( final T [ ] previousState ,', 'scaled = predictedScaled ;', 'for ( int j = 0 ; j < nDataI . length ; + + j ) {', 'for ( int i = 0 ; i < nData . length ; + + i ) {']","['for ( int i = 0 ; i < scaled . length ; + + i ) {', 'setStepSize ( newStepSize ) ;', 'nDataI [ j ] = nDataI [ j ] . multiply ( power ) ;', '}', 'final T ratio = newStepSize . divide ( getStepSize ( ) ) ;', 'final T [ ] [ ] nData = nordsieck . getDataRef ( ) ;', 'T power = ratio ;', 'for ( int j = 0 ; j < nDataI . length ; + + j ) {', 'final T [ ] nDataI = nData [ i ] ;', 'for ( int i = 0 ; i < nData . length ; + + i ) {']","['public class AdamsBashforthFieldIntegratorTest extends AbstractAdamsFieldIntegratorTest {', 'public class AdamsBashforthFieldIntegratorTest extends AdamsFieldIntegratorAbstractTest {', 'public abstract class AbstractAdamsFieldIntegratorTest {', 'public abstract class AdamsFieldIntegratorAbstractTest {', 'public class AdamsMoultonFieldIntegratorTest extends AbstractAdamsFieldIntegratorTest {', 'public class AdamsMoultonFieldIntegratorTest extends AdamsFieldIntegratorAbstractTest {', 'public class ClassicalRungKuttaFieldStepInterpolatorTest extends AbstractRungeKuttaFieldStepInterpolatorTest {', 'public class ClassicalRungKuttaFieldStepInterpolatorTest extends RungeKuttaFieldStepInterpolatorAbstractTest {', 'public class ClassicalRungeKuttaFieldIntegratorTest extends AbstractRungeKuttaFieldIntegratorTest {', 'public class ClassicalRungeKuttaFieldIntegratorTest extends RungeKuttaFieldIntegratorAbstractTest {']","['@ Override', '@ Override']","['if ( x > = C LIMIT ) {', 'digamma - = 1 . 0 / x ;', 'return - GAMMA - 1 / x ;', '}', 'return digamma ( x + 1 ) - 1 / x ;', 'double inv = 1 / ( x * x ) ;', 'double inv = 1 / ( x * x ) ;', 'x = 1 - x ;', 'return FastMath . log ( x ) - 0 . 5 / x - inv * ( ( 1 . 0 / 12 ) + inv * ( 1 . 0 / 120 - inv / 252 ) ) ;', 'return digamma ;']","['0 . 5 , sample . getMean ( ) , FastMath . sqrt ( N / 12 . 0 ) * 2 . 576 ) ;', 'Assert . assertEquals ( 0 . 5 , sample . getMean ( ) , 0 . 01 ) ;', 'final int N = 1000 ;', 'final int N = 10000 ;', 'Assert . assertEquals ( ""Note : This test will fail randomly about 1 in 100 times . "" ,']","['SummaryStatistics sample = new SummaryStatistics ( ) ;', 'Assert . assertFalse ( ks . kolmogorovSmirnovTest ( uniformDistribution , sample , . 01 ) ) ;', 'Assert . assertEquals ( 1 . 0 / ( 2 . 0 * FastMath . sqrt ( 3 . 0 ) ) ,', 'final KolmogorovSmirnovTest ks = new KolmogorovSmirnovTest ( ) ;', 'sample . addValue ( generator . nextDouble ( ) ) ;', 'import org . apache . commons . math4 . distribution . RealDistribution ;', 'import org . apache . commons . math4 . random . RandomDataGenerator ;', 'final double [ ] sample = new double [ 1000 ] ;', '@ Test', 'sample [ i ] = generator . nextDouble ( ) ;']","['TestUtils . assertEquals ( values [ 0 ] , values [ 1 ] , 0d ) ;', 'Assert . assertTrue ( Arrays . equals ( values [ 0 ] , values [ 1 ] ) ) ;']","['int len ) {', 'int position ,', 'final int indexLimit = start + len ;', 'final int indexLimit = position + length ;', 'final int indexLoopLimit = index + ( len & 0x7ffffffc ) ;', 'int index = position ;', 'int start ,', 'final int indexLoopLimit = index + ( length & 0x7ffffffc ) ;', 'int index = start ;', 'int length ) {']","['len > bytes . length - start ) {', 'final int max = bytes . length - start ;', 'if ( len < 0 | |', 'throw new OutOfRangeException ( len , 0 , max ) ;', 'throw new OutOfRangeException ( len , 0 , bytes . length - start ) ;', 'len > max ) {', 'if ( len < = 0 | |', 'baseRandomGenerator . nextBytes ( b , 0 , 0 ) ;', 'final int len = 3 ;', '}']","['setSeedInternal ( System . currentTimeMillis ( ) + System . identityHashCode ( this ) ) ;', 'setSeed ( System . currentTimeMillis ( ) + System . identityHashCode ( this ) ) ;', 'setSeedInternal ( new int [ ] { ( int ) ( seed > > > 32 ) , ( int ) ( seed & 0xffffffffL ) } ) ;', 'setSeed ( new int [ ] { ( int ) ( seed > > > 32 ) , ( int ) ( seed & 0xffffffffL ) } ) ;', 'setSeedInternal ( System . currentTimeMillis ( ) + System . identityHashCode ( this ) ) ;', 'setSeed ( new int [ ] { seed } ) ;', 'setSeedInternal ( new int [ ] { seed } ) ;', 'setSeed ( System . currentTimeMillis ( ) + System . identityHashCode ( this ) ) ;']","['import org . apache . commons . math4 . random . BaseRandomGenerator ;', 'import org . apache . commons . math4 . random . AbstractRandomGenerator ;', 'public void setSeed ( int s ) {', 'public double nextDouble ( ) {', '} ;', '} ;', 'RandomGenerator randomGenerator = new BaseRandomGenerator ( ) {', 'return r . nextDouble ( ) ;', 'public void setSeed ( long s ) {', '}']","['public void clear ( ) {', 'int result = ( int ) ( nextDouble ( ) * n ) ;', 'double s = 1 ;', 'setSeed ( combined ) ;', 'bytes [ index + + ] = ( byte ) random ;', 'public float nextFloat ( ) {', '}', 'import org . apache . commons . math4 . util . FastMath ;', 'return ( int ) ( ( 2d * nextDouble ( ) - 1d ) * Integer . MAX VALUE ) ;', 'final int max = bytes . length & 0x7ffffffc ;']","['bits = nextInt ( ) > > > 1 ;', 'bits = ( nextInt ( ) > > > 1 ) ;']","['private static final long serialVersionUID = 20151228L ;', 'private static final long serialVersionUID = 20150228L ;']","['public void setSeed ( int seed ) {', 'public void setSeed ( final int [ ] seed ) {', 'private void setSeedInternal ( final long seed ) {', 'public void setSeed ( final int seed ) {', 'private void setSeedInternal ( final int [ ] seed ) {', 'setSeed ( seed ) ;', 'setSeedInternal ( seed ) ;', 'public void setSeed ( final long seed ) {', '}', 'setSeed ( new int [ ] { seed } ) ;']","['v = new int [ r ] ;', 'this . v = new int [ r ] ;', 'index = 0 ;', 'this . index = 0 ;', 'if ( mti > = N ) {', 'if ( mti > = N ) {']","['private void setSeedInternal ( long seed ) {', 'setSeed ( System . currentTimeMillis ( ) + System . identityHashCode ( this ) ) ;', 'public void setSeed ( int seed ) {', 'public void setSeed ( int seed ) {', 'setSeedInternal ( 19650218 ) ;', 'setSeed ( seed ) ;', 'private void setSeedInternal ( int seed ) {', 'setSeed ( 19650218 ) ;', 'setSeedInternal ( seed ) ;', 'public void setSeed ( long seed ) {']","['implements Serializable {', 'public abstract class AbstractWell extends BitsStreamGenerator implements Serializable {', 'public abstract class AbstractWell', '@ Override', 'private static final long serialVersionUID = 20150228L ;', 'protected abstract int next ( final int bits ) ;', 'extends BaseRandomGenerator', 'private static final long serialVersionUID = 20150223L ;', 'return z4 ;', 'protected int next ( final int bits ) {']","['public class ISAACRandom', 'protected int next ( int bits ) {', 'extends BaseRandomGenerator', 'public class ISAACRandom extends BitsStreamGenerator implements Serializable {', 'private static final long serialVersionUID = 20151227L ;', 'private static final long serialVersionUID = 7288197941165002400L ;', 'public int nextInt ( ) {', 'return rsl [ count - - ] > > > 32 - bits ;', 'implements Serializable {', 'return rsl [ count - - ] ;']","['return y ;', 'protected int next ( int bits ) {', 'extends BaseRandomGenerator', 'private static final long serialVersionUID = 8661194735290153518L ;', 'private static final long serialVersionUID = 20151228L ;', 'return y > > > ( 32 - bits ) ;', 'public int nextInt ( ) {', 'public class MersenneTwister extends BitsStreamGenerator implements Serializable {', 'public class MersenneTwister', 'implements Serializable {']","['public void clear ( ) {', 'if ( ( n & - n ) = = n ) {', 'public int nextInt ( int n ) throws IllegalArgumentException {', 'bytes [ index + + ] = ( byte ) random ;', 'public float nextFloat ( ) {', 'return random ;', '}', 'import org . apache . commons . math4 . util . FastMath ;', 'final int max = bytes . length & 0x7ffffffc ;', 'val = bits % n ;']","['private void setSeedInternal ( long seed ) {', 'setSeed ( System . currentTimeMillis ( ) + System . identityHashCode ( this ) ) ;', 'private void setSeedInternal ( int seed ) {', 'setSeed ( new int [ ] { seed } ) ;', 'setSeedInternal ( seed ) ;', 'setSeed ( seed ) ;', '}', 'public void setSeed ( int [ ] seed ) {', 'setSeed ( new int [ ] { seed } ) ;', '@ Override']","['final String cFormat = nameLengthFormat + "" % 14s % 14s % 10s % 10s % 15s"" ;', 'actualNameLength ,', 'int len = m . getName ( ) . length ( ) ;', 'boolean remove ) {', 'methods [ i ] . getName ( ) ,', 'if ( ellSize > maxLength - 2 ) {', '""std error"" ,', 'final int last = comp . length - 1 ;', 's . getMean ( ) ,', 'final String nameLengthFormat = "" % "" + actualNameLength + ""s"" ;']","['final int maxWidth = 15 ;', 'maxWidth ,']","['implements RealDistribution , Serializable {', 'public RealDistribution . Sampler createSampler ( final UniformRandomProvider rng ) {', '}', 'return new RealDistribution . Sampler ( ) {', '} ;', '@ Deprecated', 'import org . apache . commons . math4 . rng . UniformRandomProvider ;', 'implements RealDistribution , Serializable {', 'public double sample ( ) {', '}']","['RealDistribution . Sampler sampler ) {', 'public static double [ ] sample ( int n ,', 'samples [ i ] = sampler . sample ( ) ;', '}', 'for ( int i = 0 ; i < n ; i + + ) {', 'final double [ ] samples = new double [ n ] ;', 'return samples ;']","['final double [ ] observed = new BetaDistribution ( alpha , beta ) . sample ( numSamples ) ;', 'final double [ ] observed = AbstractRealDistribution . sample ( numSamples ,', '}', 'final BetaDistribution betaDistribution = new BetaDistribution ( alpha , beta ) ;', 'observed [ i ] = sampler . sample ( ) ;', 'final UniformRandomProvider rng = RandomSource . create ( RandomSource . WELL 1024 A ,', 'final double [ ] observed = new double [ numSamples ] ;', '123456789L ) ;', 'for ( int i = 0 ; i < numSamples ; i + + ) {', 'betaDistribution . createSampler ( rng ) ) ;']","['return out ;', 'index < probabilities . length & &', 'return singletons . get ( singletons . size ( ) - 1 ) ;', '}', 'public Sampler createSampler ( final UniformRandomProvider rng ) {', 'public T sample ( ) {', 'out = unchecked ;', 'throw new NotStrictlyPositiveException ( LocalizedFormats . NUMBER OF SAMPLES , sampleSize ) ;', 'public class Sampler {', 'return new Sampler ( rng ) ;']","['return randomize ( new UniformRealDistribution ( min , max ) ,', 'public static FeatureInitializer uniform ( final UniformRandomProvider rng ,', 'public static FeatureInitializer uniform ( final RandomGenerator rng ,', 'return randomize ( new UniformRealDistribution ( min , max ) . createSampler ( rng ) ,', 'import org . apache . commons . math4 . random . RandomGenerator ;', 'public static FeatureInitializer randomize ( final RealDistribution . Sampler random ,', 'public static FeatureInitializer randomize ( final RealDistribution random ,', 'import org . apache . commons . math4 . rng . UniformRandomProvider ;', 'return randomize ( new UniformRealDistribution ( rng , min , max ) ,', 'return uniform ( RandomSource . create ( RandomSource . WELL 19937 C ) , min , max ) ;']","['public RealDistribution . Sampler createSampler ( final UniformRandomProvider rng ) {', 'return new RealDistribution . Sampler ( ) {', 'final double u = random . nextDouble ( ) ;', '} ;', '@ Deprecated', 'import org . apache . commons . math4 . rng . UniformRandomProvider ;', 'public double sample ( ) {', 'return u * upper + ( 1 - u ) * lower ;', '}', '@ Override']","['public RealDistribution . Sampler createSampler ( final UniformRandomProvider rng ) {', 'return new RealDistribution . Sampler ( ) {', '} ;', '@ Deprecated', 'import org . apache . commons . math4 . rng . UniformRandomProvider ;', 'public double sample ( ) {', '}', 'return value ;', '@ Override', 'Assert . assertEquals ( 0 , dist . sample ( ) , 0 ) ;']","['public RealDistribution . Sampler createSampler ( final UniformRandomProvider rng ) {', 'final double n = rng . nextDouble ( ) ;', 'return new RealDistribution . Sampler ( ) {', '} ;', '@ Deprecated', 'import org . apache . commons . math4 . rng . UniformRandomProvider ;', 'public double sample ( ) {', 'return scale / FastMath . pow ( n , 1 / shape ) ;', '}', '@ Override']","['return new RealDistribution . Sampler ( ) {', 'public double sample ( ) {', '}', 'u * = 2 ;', 'a + = EXPONENTIAL SA QI [ 0 ] ;', '@ Override', 'umin = u2 ;', 'return mean * ( a + u ) ;', 'return mean * ( a + umin * EXPONENTIAL SA QI [ 0 ] ) ;', 'if ( u2 < umin ) {']","['return new RealDistribution . Sampler ( ) {', 'final double d = shape - 0 . 333333333333333333 ;', 'final double u2 = rng . nextDouble ( ) ;', 'public double sample ( ) {', '}', '@ Override', 'final double x = gaussian . sample ( ) ;', 'continue ;', 'while ( true ) {', 'final double v = ( 1 + c * x ) * ( 1 + c * x ) * ( 1 + c * x ) ;']","['public RealDistribution . Sampler createSampler ( final UniformRandomProvider rng ) {', 'return new RealDistribution . Sampler ( ) {', '} ;', 'return FastMath . exp ( scale + shape * n ) ;', '@ Deprecated', 'import org . apache . commons . math4 . rng . UniformRandomProvider ;', 'final RealDistribution . Sampler gaussian = new NormalDistribution ( ) . createSampler ( rng ) ;', 'public double sample ( ) {', '}', '@ Override']","['MathArrays . shuffle ( orig ) ;', 'final int [ ] count = new int [ n ] ;', '@ Test', 'Assert . assertEquals ( 1 , count [ i ] ) ;', '}', 'for ( int i = 0 ; i < n ; i + + ) {', 'final int [ ] orig = MathArrays . natural ( n ) ;', 'count [ orig [ i ] ] + = 1 ;', 'final int n = 100 ;', 'public void testShuffleNoDuplicates ( ) {']","['target = new UniformIntegerDistribution ( rng , start , i ) . sample ( ) ;', 'target = rng . nextInt ( start - i + 1 ) + i ;', 'target = new UniformIntegerDistribution ( rng , i , start ) . sample ( ) ;', 'target = rng . nextInt ( i - start + 1 ) + start ;']","['for ( final EventState state : eventsStates ) {', 'final boolean needReset = currentEvent . reset ( eventT , eventYComplete ) ;', 'boolean needReset = false ;', '}', 'needReset = needReset | | state . reset ( eventT , eventYComplete ) ;', 'private static class TimeDetector implements EventHandler {', 'public TimeDetector ( double eventT ) {', 'this . actualT = t ;', '@ Test', '}']","['return out ;', 'if ( sampleSize < = 0 ) {', 'protected final RandomGenerator random = new org . apache . commons . math4 . random . Well19937c ( ) ;', 'return inverseCumulativeProbability ( random . nextDouble ( ) ) ;', 'public void reseedRandomGenerator ( long seed ) {', 'sampleSize ) ;', 'for ( int i = 0 ; i < sampleSize ; i + + ) {', '@ Deprecated', '}', 'public double sample ( ) {']","['return out ;', 'final int [ ] samples = new int [ n ] ;', 'protected AbstractIntegerDistribution ( RandomGenerator rng ) {', 'public int sample ( ) {', 'protected final RandomGenerator random ;', 'IntegerDistribution . Sampler sampler ) {', '}', '} ;', 'import org . apache . commons . math4 . exception . NotStrictlyPositiveException ;', 'return new IntegerDistribution . Sampler ( ) {']","['return delegate . nextInt ( ) ;', 'private void clear ( ) {', 'final RandomSource . State state = ( RandomSource . State ) in . readObject ( ) ;', 'this ( source , null ) ;', 'import java . io . ObjectOutputStream ;', 'return delegate . nextBoolean ( ) ;', 'public float nextFloat ( ) {', 'out . defaultWriteObject ( ) ;', 'return random ;', 'out . writeObject ( RandomSource . saveState ( delegate ) ) ;']","['} catch ( IOException ioe ) {', '} catch ( Exception e ) {', '} catch ( ClassNotFoundException cnfe ) {', 'throw new RuntimeException ( e ) ;', 'return null ;']","['z = Gamma . logGamma ( alpha ) + Gamma . logGamma ( beta ) - Gamma . logGamma ( alpha + beta ) ;', 'z = Gamma . logGamma ( alpha ) + Gamma . logGamma ( beta ) - Gamma . logGamma ( alpha + beta ) ;', 'private double z ;', 'private final double z ;', 'if ( Double . isNaN ( z ) ) {', '}', 'private void recomputeZ ( ) {', 'recomputeZ ( ) ;', 'z = Double . NaN ;']","['double range = max - min ;', 'RealDistribution . Sampler uniform = new UniformRealDistribution ( min , max ) . createSampler ( rng ) ;', 'Vector2D point = new Vector2D ( dist . sample ( ) , dist . sample ( ) ) ;', 'centerPoints [ i ] = new Vector2D ( uniform . sample ( ) , uniform . sample ( ) ) ;', 'public static Vector2D generateNoiseVector ( NormalDistribution distribution ) {', 'double minX ,', 'public static List < Vector2D > makeBlobs ( int samples , int centers , double clusterStd ,', 'double clusterStd ,', 'public static List < Vector2D > makeMoons ( int samples , boolean shuffle , double noise , RandomGenerator random ) {', 'algorithms . add ( new Pair < String , Clusterer < DoublePoint > > ( ""KMeans \\ n ( k = 2 ) "" ,']","['return complexSolver . solveAll ( ComplexUtils . convertToComplex ( coefficients ) ,', 'return complexSolver . solveAll ( ComplexUtils . real2Complex ( coefficients ) ,', 'final Complex c [ ] = ComplexUtils . convertToComplex ( getCoefficients ( ) ) ;', 'final Complex c [ ] = ComplexUtils . real2Complex ( getCoefficients ( ) ) ;', 'return complexSolver . solve ( ComplexUtils . convertToComplex ( coefficients ) ,', 'return complexSolver . solve ( ComplexUtils . real2Complex ( coefficients ) ,', 'c [ i ] = new Complex ( real [ i ] , 0 ) ;', 'return new Complex ( d [ index * 2 ] , d [ index * 2 + 1 ] ) ;', 'public static Complex [ ] convertToComplex ( double [ ] real ) {', 'if ( interleavedDim > 1 | | interleavedDim < 0 ) {']","['import org . apache . commons . math4 . exception . MathUnsupportedOperationException ;', 'import java . io . ObjectOutputStream ;', 'public float nextFloat ( ) {', 'import java . util . Random ;', 'return rng . nextFloat ( ) ;', 'throw new MathInternalError ( ) ;', 'throws IOException {', '}', 'return rng . nextInt ( ) ;', 'private final transient UniformRandomProvider rng ;']","['import org . apache . commons . math4 . random . RandomAdaptor ;', 'UniformRandomProvider rng = RandomSource . create ( RandomSource . WELL 19937 C , seed ) ;', 'UniformRandomProvider rng = RandomSource . create ( RandomSource . WELL 19937 C , 0 ) ;', 'import org . apache . commons . math4 . random . JDKRandomAdaptor ;', 'Collections . shuffle ( points ) ;', 'final long seed = RandomSource . createLong ( ) ;', 'Collections . shuffle ( points , new JDKRandomAdaptor ( rng ) ) ;']","['return out ;', 'n ) ;', 'if ( sampleSize < = 0 ) {', 'public static double [ ] [ ] sample ( int n ,', 'sampleSize ) ;', 'import org . apache . commons . math4 . rng . UniformRandomProvider ;', 'final double [ ] [ ] out = new double [ sampleSize ] [ dimension ] ;', 'samples [ i ] = sampler . sample ( ) ;', 'public void reseedRandomGenerator ( long seed ) {', 'for ( int i = 0 ; i < n ; i + + ) {']","['package org . apache . commons . math4 . analysis . function ;', 'Assert . assertEquals ( FastMath . PI / 4 , atan2 . value ( 1 , 1 ) , EPS ) ;', 'Assert . assertEquals ( - 5 , subtract . value ( 5 , 10 ) , EPS ) ;', 'Assert . assertEquals ( 5 , subtract . value ( 10 , 5 ) , EPS ) ;', 'import org . junit . Assert ;', '@ Test', 'public void testSubtract ( ) {', 'private static final double EPS = Math . ulp ( 1d ) ;', 'public void testAtan2 ( ) {', '}']","['public void testStringConstructor ( ) {', 'try {', '@ Test', 'ComplexFormat cf = new ComplexFormat ( format , nullFormat ) ;', 'public void testGetInstance ( ) {', 'Assert . assertEquals ( source , formatted ) ;', '}', 'Assert . assertTrue ( e instanceof NoDataException ) ;', 'Assert . assertNotNull ( cf ) ;', 'NumberFormat defaultFormat = NumberFormat . getInstance ( ) ;']","['m . setEntry ( i , i , diagonal [ i ] ) ;', 'public static DiagonalMatrix createRealDiagonalMatrix ( final double [ ] diagonal ) {', '}', 'return new DiagonalMatrix ( diagonal , true ) ;', 'final RealMatrix m = createRealMatrix ( diagonal . length , diagonal . length ) ;', 'public static RealMatrix createRealDiagonalMatrix ( final double [ ] diagonal ) {', 'for ( int i = 0 ; i < diagonal . length ; + + i ) {', 'return m ;']","['return mu ;', 'return 0 ;', 'if ( x = = 0 ) {', '}', 'if ( n = = 0 ) {', 'for ( int s = 0 ; s < = n ; s + + ) {', 'final int m = 4 ;', 'final double p = dist . probability ( s ) ;', 'Assert . assertEquals ( ""p = "" + p , 1 , p , 0d ) ;', 'final double p = dist . probability ( i ) ;']","['@ Test ( expected = MathUnsupportedOperationException . class )', '} catch ( Exception e ) {', 'TestUtils . serializeAndRecover ( new JDKRandomAdaptor ( RandomSource . create ( RandomSource . WELL 512 A ) ) ) ;', 'TestUtils . serializeAndRecover ( new JDKRandomAdaptor ( RandomSource . create ( RandomSource . WELL 512 A ) ) ) ;', 'try {', '@ Test', '}', 'Throwable cause = e . getCause ( ) ;', 'Assert . assertTrue ( cause instanceof MathUnsupportedOperationException ) ;']","['cachedD = MatrixUtils . createRealDiagonalMatrix ( realEigenvalues ) ;', 'cachedD = MatrixUtils . createRealMatrixWithDiagonal ( realEigenvalues ) ;', 'm . setEntry ( i , i , diagonal [ i ] ) ;', 'public static RealMatrix createRealMatrixWithDiagonal ( final double [ ] diagonal ) {', '}', 'final RealMatrix m = createRealMatrix ( size , size ) ;', 'for ( int i = 0 ; i < size ; i + + ) {', 'final int size = diagonal . length ;', 'return m ;']","['d [ x ] [ y ] [ z ] = c [ x ] [ y ] [ z ] . getReal ( ) ;', 'for ( int z = 0 ; z < depth / 2 ; z + + ) {', 'd [ x ] [ y * 2 ] [ z ] = c [ x ] [ y ] [ z ] . getImaginary ( ) ;', 'int depth = c [ 0 ] [ 0 ] . length ;', 'for ( int y = 0 ; y < height ; y + + ) {', 'for ( int x = 0 ; x < width / 2 ; x + + ) {', 'for ( int z = 0 ; z < depth ; z + = 2 ) {', 'for ( int y = 0 ; y < height / 2 ; y + + ) {', 'for ( int y = 0 ; y < height ; y + = 2 ) {', 'd [ x ] [ y * 2 + 1 ] [ z ] = c [ x ] [ y ] [ z ] . getImaginary ( ) ;']","['TestUtils . assertEquals ( msg , sfi , ComplexUtils . complex2ImaginaryFloat ( c ) , Math . ulp ( 1 ) ) ;', 'TestUtils . assertEquals ( msg , ansArrayd1i , ComplexUtils . complex2Imaginary ( c , range1 ) , Math . ulp ( 1 . 0 ) ) ;', 'TestUtils . assertEquals ( msg , ansArrayf1i , ComplexUtils . complex2ImaginaryFloat ( c , range1 ) , Math . ulp ( 1 ) ) ;', 'TestUtils . assertEquals ( msg , ansArraydi1 , ComplexUtils . complex2Interleaved ( c , 3 , 7 ) , Math . ulp ( 1 . 0 ) ) ;', 'TestUtils . assertEquals ( msg , si , ComplexUtils . complex2Imaginary ( c ) , Math . ulp ( 1 ) ) ;', 'TestUtils . assertEquals ( msg , ansArrayc4 , ComplexUtils . interleaved2Complex ( fi , 3 , 7 , 2 ) , Math . ulp ( 1 . 0 ) ) ;', 'TestUtils . assertEquals ( msg , sfi3d [ i ] [ j ] , ComplexUtils . complex2ImaginaryFloat ( c3d [ i ] [ j ] ) , Math . ulp ( 1 ) ) ;', 'TestUtils . assertEquals ( msg , ansArrayd1i , ComplexUtils . complex2Imaginary ( c , 3 , 7 ) , Math . ulp ( 1 . 0f ) ) ;', 'TestUtils . assertEquals ( msg , ansArrayc2i , ComplexUtils . imaginary2Complex ( f , 3 , 7 , 2 ) , Math . ulp ( 1 ) ) ;', 'TestUtils . assertEquals ( msg , ansArrayd2i , ComplexUtils . complex2Imaginary ( c , 3 , 7 , 2 ) , Math . ulp ( 1 . 0 ) ) ;']","['ComplexFormat cf = ComplexFormat . getInstance ( ) ;', 'ComplexFormat cf = ComplexFormat . getInstance ( getLocale ( ) ) ;']","['return new GaussIntegrator ( getRule ( laguerre , numberOfPoints ) ) ;', 'private final BaseRuleFactory < Double > laguerre = new LaguerreRuleFactory ( ) ;', '}', 'public GaussIntegrator laguerre ( int numberOfPoints ) {', 'import org . apache . commons . math4 . analysis . polynomials . PolynomialsUtils ;', 'final long n1Squared = n1 * ( long ) n1 ;', 'import org . apache . commons . math4 . linear . MatrixUtils ;', '}', 'import org . apache . commons . math4 . linear . RealMatrix ;', 'import org . apache . commons . math4 . util . Pair ;']","['return new GaussIntegrator ( getRule ( laguerre , numberOfPoints ) ) ;', 'private final BaseRuleFactory < Double > laguerre = new LaguerreRuleFactory ( ) ;', '}', 'public GaussIntegrator laguerre ( int numberOfPoints ) {', 'import org . apache . commons . math4 . analysis . polynomials . PolynomialsUtils ;', 'final long n1Squared = n1 * ( long ) n1 ;', 'import org . apache . commons . math4 . linear . MatrixUtils ;', '}', 'import org . apache . commons . math4 . linear . RealMatrix ;', 'import org . apache . commons . math4 . util . Pair ;']","['private final RandomGenerator random ;', 'this ( k , fuzziness , maxIterations , measure , DEFAULT EPSILON , RandomSource . create ( RandomSource . MT 64 ) ) ;', 'import org . apache . commons . math4 . random . JDKRandomGenerator ;', 'private final UniformRandomProvider random ;', 'public RandomGenerator getRandomGenerator ( ) {', 'public UniformRandomProvider getRandomGenerator ( ) {', 'import org . apache . commons . math4 . random . RandomGenerator ;', 'import org . apache . commons . math4 . rng . UniformRandomProvider ;', 'final double epsilon , final RandomGenerator random )', 'final double epsilon , final UniformRandomProvider random )']","['private final RandomGenerator random ;', 'import org . apache . commons . math4 . rng . UniformRandomProvider ;', 'import org . apache . commons . math4 . random . RandomGenerator ;', 'public RandomPivotingStrategy ( final UniformRandomProvider random ) {', 'public RandomPivotingStrategy ( final RandomGenerator random ) {', 'private final UniformRandomProvider random ;', 'kthSelector = new KthSelector ( new RandomPivotingStrategy ( new Well1024a ( 0x268a7fb4194240f6l ) ) ) ;', 'new RandomPivotingStrategy ( RandomSource . create ( RandomSource . WELL 1024 A , 0xf097c734e4740053l ) )', 'import org . apache . commons . math4 . random . Well1024a ;', 'kthSelector = new KthSelector ( new RandomPivotingStrategy ( RandomSource . create ( RandomSource . WELL 1024 A , 0x268a7fb4194240f6l ) ) ) ;']","['public static synchronized void setRandomGenerator ( final RandomGenerator random ) {', 'public static synchronized UniformRandomProvider getRandomGenerator ( ) {', 'import org . apache . commons . math4 . random . JDKRandomGenerator ;', 'import org . apache . commons . math4 . rng . UniformRandomProvider ;', 'RandomGenerator randGen = getRandomGenerator ( ) ;', 'public static synchronized void setRandomGenerator ( final UniformRandomProvider random ) {', 'public static synchronized RandomGenerator getRandomGenerator ( ) {', 'private static UniformRandomProvider randomGenerator = RandomSource . create ( RandomSource . WELL 19937 C ) ;', 'import org . apache . commons . math4 . random . RandomGenerator ;', 'import org . apache . commons . math4 . rng . RandomSource ;']","['private final RandomGenerator random ;', 'import org . apache . commons . math4 . distribution . RealDistribution ;', 'randn [ i ] = random . nextGaussian ( ) ;', 'import org . apache . commons . math4 . rng . UniformRandomProvider ;', 'd [ r ] [ c ] = random . nextGaussian ( ) ;', 'UniformRandomProvider rng ,', 'RandomGenerator random ,', 'd [ r ] [ c ] = random . sample ( ) ;', 'import org . apache . commons . math4 . random . RandomGenerator ;', 'this . random = new NormalDistribution ( ) . createSampler ( rng ) ;']","['import org . apache . commons . math4 . random . RandomGenerator ;', 'final UniformRandomProvider generator ) {', 'final RandomGenerator generator ) {', 'private final UniformRandomProvider generator ;', 'private final RandomGenerator generator ;', 'import org . apache . commons . math4 . rng . UniformRandomProvider ;', 'import org . apache . commons . math4 . random . JDKRandomGenerator ;', 'UniformRandomProvider g = RandomSource . create ( RandomSource . TWO CMRES , 4312000053L ) ;', 'Assert . assertEquals ( - 0 . 27195613 , optimum . getPoint ( ) , 1e - 9 ) ;', 'import org . apache . commons . math4 . rng . UniformRandomProvider ;']","['this ( dimension , new MersenneTwister ( ) ) ;', 'this . rand = new NormalDistribution ( ) . createSampler ( rng ) ;', 'this . rand = rand ;', 'import org . apache . commons . math4 . distribution . RealDistribution ;', 'final double comp = rand . nextGaussian ( ) ;', 'final UniformRandomProvider rng ) {', 'private final RandomGenerator rand ;', 'import org . apache . commons . math4 . rng . UniformRandomProvider ;', 'final RandomGenerator rand ) {', 'final double comp = rand . sample ( ) ;']","['RandomGenerator random = new Well1024a ( 0x49914cdd9f0b8db5l ) ;', 'dsX . getPartialDerivative ( maxOrder ) ,', 'RandomGenerator random = new Well1024a ( 0x96885e9c1f81cea5l ) ;', 'import org . apache . commons . math4 . rng . UniformRandomProvider ;', 'import org . apache . commons . math4 . random . Well1024a ;', 'import org . apache . commons . math4 . rng . RandomSource ;', 'import org . apache . commons . math4 . random . RandomGenerator ;', '0x49914cdd9f0b8db5l ) ;', 'Assert . assertEquals ( dsX . getPartialDerivative ( maxOrder ) ,', 'Assert . assertEquals ( ""maxOrder = "" + maxOrder ,']","['import org . apache . commons . math4 . random . Well1024a ;', 'UniformRandomProvider random = RandomSource . create ( RandomSource . WELL 1024 A , 0xc6af886975069f11l ) ;', 'Well1024a random = new Well1024a ( 0xc6af886975069f11l ) ;', 'import org . apache . commons . math4 . rng . UniformRandomProvider ;', 'import org . apache . commons . math4 . rng . RandomSource ;', 'import org . apache . commons . math4 . random . Well1024a ;', '0xc6af886975069f11l ) ;', 'Well1024a random = new Well1024a ( 0xc6af886975069f11l ) ;', 'import org . apache . commons . math4 . rng . UniformRandomProvider ;', 'import org . apache . commons . math4 . rng . RandomSource ;']","['RandomGenerator generator = new Well1024a ( 0xb87b9bc14c96ccd5l ) ;', 'generator = RandomSource . create ( RandomSource . MT , 6176597458463500194l ) ;', 'generator = new MersenneTwister ( 6176597458463500194l ) ;', 'UniformRandomProvider generator = RandomSource . create ( RandomSource . WELL 1024 A ,', 'import org . apache . commons . math4 . random . MersenneTwister ;', 'import org . apache . commons . math4 . rng . UniformRandomProvider ;', 'RandomGenerator generator = new Well1024a ( 0x7ccab45edeaab90al ) ;', 'private UniformRandomProvider generator ;', 'import org . apache . commons . math4 . random . Well1024a ;', '0x7ccab45edeaab90al ) ;']","['ArrayList < Integer > primes = new ArrayList < Integer > ( ) ;', 'int p4 = primeList [ 3 ] ;', 'primes . add ( Integer . valueOf ( primeList [ i ] ) ) ;', 'int p1 = primeList [ 0 ] ;', 'import org . apache . commons . math4 . util . ArithmeticUtils ;', 'int p2 = primeList [ 1 ] ;', 'import org . apache . commons . math4 . random . RandomDataGenerator ;', 'int p3 = primeList [ 2 ] ;', 'int p3 = ( ( Integer ) sample [ 2 ] ) . intValue ( ) ;', 'MathArrays . shuffle ( primeList ) ;']","['import org . apache . commons . math4 . random . JDKRandomGenerator ;', 'pNoise . setEntry ( 0 , processNoise * rand . sample ( ) ) ;', 'pNoise . setEntry ( 0 , processNoise * rand . nextGaussian ( ) ) ;', 'RealVector pNoise = tmpPNoise . mapMultiply ( accelNoise * rand . sample ( ) ) ;', 'final UniformRandomProvider rng = RandomSource . create ( RandomSource . WELL 19937 C , 1000 ) ;', 'final RealDistribution . Sampler rand = new NormalDistribution ( ) . createSampler ( RandomSource . create ( RandomSource . WELL 19937 C ) ) ;', 'import org . apache . commons . math4 . rng . UniformRandomProvider ;', 'final RealDistribution . Sampler dist = new NormalDistribution ( 0 , measurementNoise ) . createSampler ( RandomSource . create ( RandomSource . WELL 19937 C , 1000 ) ) ;', 'mNoise . setEntry ( 0 , measurementNoise * rand . nextGaussian ( ) ) ;', 'mNoise . setEntry ( 0 , measurementNoise * rand . sample ( ) ) ;']","['RandomGenerator rng = new Well19937a ( 0xb0e7401265af8cd3l ) ;', 'UniformRandomProvider rng = RandomSource . create ( RandomSource . TWO CMRES , 0xb0e7401265af8cd3l ) ;', 'import org . apache . commons . math4 . random . RandomGenerator ;', 'import org . apache . commons . math4 . rng . UniformRandomProvider ;', 'import org . apache . commons . math4 . random . Well19937a ;', 'import org . apache . commons . math4 . rng . RandomSource ;']","['RandomGenerator r = new Well1024a ( 0xff4l ) ;', 'private double [ ] generateDouble ( final UniformRandomProvider r , int n ) {', 'RandomGenerator r = new Well1024a ( 0xdf3l ) ;', 'UniformRandomProvider r = RandomSource . create ( RandomSource . WELL 1024 A , 0xff2l ) ;', 'RandomGenerator r = new Well1024a ( 0xfafal ) ;', 'UniformRandomProvider r = RandomSource . create ( RandomSource . WELL 1024 A , 0xdf4l ) ;', 'RandomGenerator r = new Well1024a ( 0xdafal ) ;', 'UniformRandomProvider r = RandomSource . create ( RandomSource . WELL 1024 A , 0xff3l ) ;', 'RandomGenerator r = new Well1024a ( 0xff3l ) ;', 'UniformRandomProvider r = RandomSource . create ( RandomSource . WELL 1024 A , 0xfafal ) ;']","['import org . apache . commons . math4 . random . Well1024a ;', 'UniformRandomProvider random = RandomSource . create ( RandomSource . WELL 1024 A , 0xa2a63cad12c01fb2l ) ;', 'import org . apache . commons . math4 . random . RandomGenerator ;', 'import org . apache . commons . math4 . rng . UniformRandomProvider ;', 'RandomGenerator random = new Well1024a ( 0xa2a63cad12c01fb2l ) ;', 'import org . apache . commons . math4 . rng . RandomSource ;', 'import org . apache . commons . math4 . random . Well1024a ;', 'UniformRandomProvider random = RandomSource . create ( RandomSource . WELL 1024 A , 885362227452043214l ) ;', 'Well1024a random = new Well1024a ( 553267312521321234l ) ;', 'import org . apache . commons . math4 . rng . UniformRandomProvider ;']","['return generator . nextGaussian ( ) ;', 'sampler = new NormalDistribution ( ) . createSampler ( generator ) ;', 'private final RandomGenerator generator ;', 'import org . apache . commons . math4 . distribution . RealDistribution ;', 'public GaussianRandomGenerator ( final RandomGenerator generator ) {', 'private final RealDistribution . Sampler sampler ;', 'this . generator = generator ;', 'import org . apache . commons . math4 . rng . UniformRandomProvider ;', 'return sampler . sample ( ) ;', 'import org . apache . commons . math4 . distribution . NormalDistribution ;']","['final ISAACRandom rand = new ISAACRandom ( 10L ) ;', 'import org . apache . commons . math4 . rng . UniformRandomProvider ;', 'import org . apache . commons . math4 . random . ISAACRandom ;', 'import org . apache . commons . math4 . rng . RandomSource ;', 'final UniformRandomProvider rand = RandomSource . create ( RandomSource . ISAAC , 10L ) ;']","['import org . apache . commons . math4 . random . Well1024a ;', 'UniformRandomProvider rng = RandomSource . create ( RandomSource . WELL 1024 A , 0 ) ;', 'import org . apache . commons . math4 . random . RandomGenerator ;', 'import org . apache . commons . math4 . rng . UniformRandomProvider ;', 'RandomGenerator rng = new Well1024a ( 0 ) ;', 'import org . apache . commons . math4 . rng . RandomSource ;']","['ISAACRandom rand = new ISAACRandom ( 10L ) ;', 'import org . apache . commons . math4 . rng . UniformRandomProvider ;', 'import org . apache . commons . math4 . random . ISAACRandom ;', 'import org . apache . commons . math4 . rng . RandomSource ;', 'final UniformRandomProvider rand = RandomSource . create ( RandomSource . ISAAC , 10L ) ;']","['import org . apache . commons . math4 . random . RandomGenerator ;', 'import org . apache . commons . math4 . rng . UniformRandomProvider ;', 'private final RandomGenerator randomGenerator = new Well19937c ( 1000 ) ;', 'private final UniformRandomProvider randomGenerator = RandomSource . create ( RandomSource . WELL 19937 C , 1000 ) ;', 'import org . apache . commons . math4 . random . Well19937c ;']","['private final RandomGenerator generator ;', 'return SQRT3 * ( 2 * generator . nextDouble ( ) - 1 ) ;', 'public UniformRandomGenerator ( RandomGenerator generator ) {', 'import org . apache . commons . math4 . rng . UniformRandomProvider ;', 'private static final double SQRT3 = FastMath . sqrt ( 3 . 0 ) ;', 'private static final double SQRT3 = FastMath . sqrt ( 3 ) ;', 'return SQRT3 * ( 2 * generator . nextDouble ( ) - 1 . 0 ) ;', 'public UniformRandomGenerator ( UniformRandomProvider generator ) {', 'private final UniformRandomProvider generator ;', 'import org . apache . commons . math4 . random . UniformRandomGenerator ;']","['public StableRandomGenerator ( final RandomGenerator generator ,', 'public StableRandomGenerator ( final UniformRandomProvider generator ,', 'private final RandomGenerator generator ;', 'private final UniformRandomProvider generator ;', 'import org . apache . commons . math4 . rng . UniformRandomProvider ;', 'import org . apache . commons . math4 . random . Well19937c ;', 'private final UniformRandomProvider rg = RandomSource . create ( RandomSource . WELL 19937 C , 100 ) ;', 'private RandomGenerator rg = new Well19937c ( 100 ) ;', 'import org . apache . commons . math4 . rng . UniformRandomProvider ;', 'import org . apache . commons . math4 . random . RandomGenerator ;']","['if ( k < = 0 ) {', 'for ( int i = 0 ; i < k ; i + + ) {', 'public float nextFloat ( ) {', 'if ( max < = 0 ) {', 'boolean lowerInclusive ) {', 'public < T > List < T > nextSample ( Collection < T > collection ,', 'final T [ ] objects = ( T [ ] ) collection . toArray ( new Object [ len ] ) ;', 'int start ,', 'final byte [ ] hash = alg . digest ( ) ;', 'bits = rng . nextLong ( ) > > > 1 ;']","['TestUtils . assertChiSquareAccept ( expected , observed , 0 . 01 ) ;', 'List < Object > cSamp = randomData . nextSample ( cPop , 2 ) ;', 'import java . text . DecimalFormat ;', 'public void testNextUniformUniformNegativeToPositiveBounds ( ) {', 'f . addValue ( hexString . substring ( j , j + 1 ) ) ;', 'observed [ i ] = f . getCount ( hex [ i ] ) ;', 'double [ ] expected = { 100 , 100 , 100 , 100 , 100 , 100 } ;', 'String [ ] labels = { "" { 0 , 1 , 2 } "" , "" { 0 , 2 , 1 } "" , "" { 1 , 0 , 2 } "" ,', 'checkNextUniformUniform ( - 7 , - 3 ) ;', 'checkNextLongUniform ( Long . MIN VALUE + 1 , Long . MIN VALUE + 12 ) ;']","['randomData = new RandomDataGenerator ( randomGenerator ) ;', 'this ( DEFAULT NAN STRATEGY , DEFAULT TIES STRATEGY , null ) ;', 'super ( ) ;', 'this ( nanStrategy , tiesStrategy , new Well19937c ( ) ) ;', 'RandomGenerator randomGenerator ) {', 'RandomGenerator randomGenerator ) {', 'this . tiesStrategy = tiesStrategy ;', 'this . tiesStrategy = tiesStrategy ;', 'this . tiesStrategy = TiesStrategy . RANDOM ;', '}']","['super ( RandomUtils . asUniformRandomProvider ( new SecureRandom ( new byte [ ] { - 12 , 34 , - 56 , 78 } ) ) ) ;', 'super ( RandomUtils . asUniformRandomProvider ( new SecureRandom ( new byte [ ] { 1 , 2 , 3 , 4 } ) ) ) ;']","['public NaturalRanking ( NaNStrategy nanStrategy , TiesStrategy tiesStrategy ) {', 'public NaturalRanking ( UniformRandomProvider randomGenerator ) {', 'randomData = new RandomDataGenerator ( randomGenerator ) ;', 'private final RandomUtils . DataGenerator randomData ;', 'import org . apache . commons . math4 . random . RandomDataGenerator ;', 'public NaturalRanking ( NaNStrategy nanStrategy ,', 'this ( nanStrategy , tiesStrategy , new Well19937c ( ) ) ;', 'RandomSource . create ( RandomSource . WELL 19937 C ) ) ;', 'RandomGenerator randomGenerator ) {', 'import org . apache . commons . math4 . rng . UniformRandomProvider ;']","['result . add ( objects [ index [ i ] ] ) ;', 'final ArrayList < T > objects = new ArrayList < T > ( collection ) ;', 'final T [ ] objects = ( T [ ] ) collection . toArray ( new Object [ len ] ) ;', 'result . add ( objects . get ( index [ i ] ) ) ;']","['this . random = random ;', 'final RandomSource . State state = ( RandomSource . State ) in . readObject ( ) ;', 'private final UniformRandomProvider random ;', 'import java . io . ObjectOutputStream ;', 'public RandomPivotingStrategy ( final UniformRandomProvider random ) {', 'out . defaultWriteObject ( ) ;', 'private static final long serialVersionUID = 20140713L ;', 'throws IOException {', '}', 'private static final long serialVersionUID = 20160517L ;']","['new RandomPivotingStrategy ( RandomSource . create ( RandomSource . WELL 1024 A , 0xf097c734e4740053l ) )', 'kthSelector = new KthSelector ( new RandomPivotingStrategy ( RandomSource . WELL 1024 A , 0x268a7fb4194240f6l ) ) ;', 'kthSelector = new KthSelector ( new RandomPivotingStrategy ( RandomSource . create ( RandomSource . WELL 1024 A , 0x268a7fb4194240f6l ) ) ) ;', 'new RandomPivotingStrategy ( RandomSource . WELL 1024 A , 0xf097c734e4740053l )']","['private int mti ;', 'mt [ 0 ] = mt [ N - 1 ] ;', '}', 'import org . apache . commons . math4 . util . FastMath ;', 'public MersenneTwister ( ) {', 'import java . io . Serializable ;', 'mt [ 0 ] = ( int ) longMT ;', 'setSeed ( new int [ ] { ( int ) ( seed > > > 32 ) , ( int ) ( seed & 0xffffffffl ) } ) ;', 'mtNext = mt [ k + 1 ] ;', 'y ^ = y > > > 11 ;']","['TestUtils . assertEquals ( msg , ansArrayf1i , ComplexUtils . complex2ImaginaryFloat ( c , 3 , 7 ) , Math . ulp ( 1 . 0f ) ) ;', 'TestUtils . assertEquals ( msg , ansArrayf2r , ComplexUtils . complex2RealFloat ( c , 3 , 7 , 2 ) , 0 ) ;', 'TestUtils . assertEquals ( msg , ansArrayd1i , ComplexUtils . complex2Imaginary ( c , range1 ) , Math . ulp ( 1 . 0 ) ) ;', 'TestUtils . assertEquals ( msg , cr , ComplexUtils . real2Complex ( d ) , 0 ) ;', 'TestUtils . assertEquals ( msg , ansArraydi2 , ComplexUtils . complex2Interleaved ( c , 3 , 7 , 2 ) , Math . ulp ( 1 . 0 ) ) ;', 'TestUtils . assertEquals ( msg , cr3d [ i ] [ j ] , ComplexUtils . real2Complex ( f3d [ i ] [ j ] ) , 0 ) ;', 'TestUtils . assertEquals ( msg , ansArrayc2r , ComplexUtils . real2Complex ( f , 3 , 7 , 2 ) , Math . ulp ( 1 . 0 ) ) ;', 'TestUtils . assertEquals ( msg , ansArrayc1i , ComplexUtils . imaginary2Complex ( d , 3 , 7 ) , 0 ) ;', 'TestUtils . assertEquals ( msg , ansArrayf2r , ComplexUtils . complex2RealFloat ( c , 3 , 7 , 2 ) , Math . ulp ( 1 . 0f ) ) ;', 'TestUtils . assertEquals ( msg , ansArrayf1i , ComplexUtils . complex2ImaginaryFloat ( c , range1 ) , 0 ) ;']",['@ Deprecated'],"['import org . apache . commons . math4 . distribution . AbstractRealDistribution ;', 'package org . apache . commons . math4 . distribution ;', 'package org . apache . commons . math4 . random ;', 'import org . apache . commons . math4 . distribution . RealDistribution ;', 'import org . apache . commons . math4 . distribution . ConstantRealDistribution ;', 'import org . apache . commons . math4 . distribution . NormalDistribution ;', 'import org . apache . commons . math4 . distribution . RealDistributionAbstractTest ;', 'package org . apache . commons . math4 . distribution ;', 'package org . apache . commons . math4 . random ;', 'import org . apache . commons . math4 . distribution . RealDistribution ;']",['@ Deprecated'],"['result = cumulativeProbability ( argument ) ;', 'final double result = cumulativeProbability ( argument ) ;', 'double result = Double . NaN ;']","['outBuffer . append ( ""n : "" + getN ( ) + suffix ) ;', 'outBuffer . append ( ""MultivariateSummaryStatistics : "" ) . append ( suffix ) ;', 'outBuffer . append ( ""covariance : "" + getCovariance ( ) . toString ( ) + suffix ) ;', 'outBuffer . append ( ""covariance : "" ) . append ( getCovariance ( ) ) . append ( suffix ) ;', 'outBuffer . append ( ""MultivariateSummaryStatistics : "" + suffix ) ;', 'outBuffer . append ( ""n : "" ) . append ( getN ( ) ) . append ( suffix ) ;']","['final FDistribution distributionLowerBound = new FDistribution ( 2 * ( numberOfTrials - numberOfSuccesses + 1 ) ,', 'final double alpha = 0 . 5 * ( 1 - confidenceLevel ) ;', 'final FDistribution distributionUpperBound = new FDistribution ( 2 * ( numberOfSuccesses + 1 ) ,', 'final FDistribution distributionLowerBound = new FDistribution ( 2 * ( numberOfTrials - numberOfSuccesses + 1 ) ,', '}', '2 * numberOfSuccesses ) ;', 'if ( numberOfSuccesses > 0 ) {', 'final FDistribution distributionUpperBound = new FDistribution ( 2 * ( numberOfSuccesses + 1 ) ,', '2 * numberOfSuccesses ) ;', '2 * ( numberOfTrials - numberOfSuccesses ) ) ;']","['if ( getIterations ( ) > 0 ) {', 'iteration = getIterations ( ) ;', 'if ( iteration > 0 ) {']","['break ;', 'if ( !converged ) {', '}']","['final double alpha = 0 . 5 * ( 1 - confidenceLevel ) ;', 'final double alpha = 0 . 5 * ( 1 - confidenceLevel ) ;', 'final FDistribution distributionLowerBound = new FDistribution ( 2 * ( numberOfTrials - numberOfSuccesses + 1 ) ,', 'final FDistribution distributionLowerBound = new FDistribution ( 2 * ( numberOfTrials - numberOfSuccesses + 1 ) ,', '( numberOfTrials - numberOfSuccesses + ( numberOfSuccesses + 1 ) * fValueUpperBound ) ;', 'int numberOfSuccesses ,', 'public ConfidenceInterval createInterval ( int numberOfTrials , int numberOfSuccesses ,', '( numberOfTrials - numberOfSuccesses + ( numberOfSuccesses + 1 ) * fValueUpperBound ) ;', '2 * numberOfSuccesses ) ;', '2 * numberOfSuccesses ) ;']","['public class TestUtils {', 'private InferenceTestUtils ( ) {', 'private TestUtils ( ) {', 'public class InferenceTestUtils {', 'return TestUtils . gTest ( expected , observed ) ;', 'import org . apache . commons . math4 . stat . inference . InferenceTestUtils ;', 'import org . apache . commons . math4 . stat . inference . TestUtils ;', 'return InferenceTestUtils . gTest ( expected , observed ) ;', 'import org . apache . commons . math4 . distribution . BetaDistribution ;', 'betaDistribution . createSampler ( rng ) ) ;']","['if ( p = = 0 ) {', 'Arrays . fill ( result , resultOffset + 1 , resultOffset + getSize ( ) , 0 ) ;', '}', 'result [ resultOffset ] = 1 . 0 ;', 'return ;', 'first = false ;', 'import org . apache . commons . math4 . util . Precision ;', 'Assert . assertEquals ( 0 . 0 , d , Precision . SAFE MIN ) ;', 'for ( final double d : zeroDsZeroDouble . getAllDerivatives ( ) ) {', 'boolean first = true ;']","['if ( operand [ operandOffset ] = = 0 ) {', '}', 'Arrays . fill ( result , resultOffset , resultOffset + getSize ( ) , 0 ) ;', 'return ;', 'Assert . assertEquals ( 0 . 0 , u . getPartialDerivative ( i0 , i1 , i2 ) , 1 . 0e - 10 ) ;', 'for ( int i2 = 0 ; i2 < = maxOrder ; + + i2 ) {', 'for ( int i1 = 0 ; i1 < = maxOrder ; + + i1 ) {', '}', 'if ( i0 + i1 + i2 < = maxOrder ) {', 'for ( int i0 = 0 ; i0 < = maxOrder ; + + i0 ) {']","['return ( int ) floor ( x + 0 . 5f ) ;', 'final int bits = Float . floatToRawIntBits ( x ) ;', 'return ( long ) floor ( x + 0 . 5 ) ;', 'return ( ( extendedMantissa > > shift ) + 1L ) > > 1 ;', 'final int biasedExp = ( bits > > 23 ) & 0xff ;', 'if ( bits < 0 ) {', 'int extendedMantissa = 0x00800000 | ( bits & 0x007fffff ) ;', 'final int shift = ( 52 - 1 + Double . MAX EXPONENT ) - biasedExp ;', 'return ( int ) x ;', '}']","['while ( i < j & & work [ i ] < value ) {', 'if ( i > = end | | Double . compare ( work [ i ] , value ) > 0 ) {', 'if ( i > = end | | work [ i ] > value ) {', 'while ( i < j & & Double . compare ( work [ i ] , value ) < 0 ) {', 'while ( i < j & & work [ j ] > value ) {', 'while ( i < j & & Double . compare ( work [ j ] , value ) > 0 ) {', '@ Test', 'data [ j ] = possibleValues [ rnd . nextInt ( possibleValues . length ) ] ;', 'import java . util . Random ;', 'public class KthSelectorTest {']","['double x = 0x1 . fffffffffffffp - 2 ;', 'double x = 0x1 . fffffffffffffp - 2 ;', 'assertTrue ( x = = Math . round ( x ) ) ;']","['final RandomSource . State state = ( RandomSource . State ) in . readObject ( ) ;', 'out . writeObject ( RandomSource . saveState ( delegate ) . getState ( ) ) ;', 'out . writeObject ( RandomSource . saveState ( delegate ) ) ;', 'final RandomSource . State state = new RandomSource . State ( ( byte [ ] ) in . readObject ( ) ) ;', 'final RandomSource . State state = ( RandomSource . State ) in . readObject ( ) ;', 'out . writeObject ( RandomSource . saveState ( random ) . getState ( ) ) ;', 'out . writeObject ( RandomSource . saveState ( random ) ) ;', 'final RandomSource . State state = new RandomSource . State ( ( byte [ ] ) in . readObject ( ) ) ;']","['import org . apache . commons . math4 . rng . UniformRandomProvider ;', 'import org . apache . commons . rng . RandomSource ;', 'import org . apache . commons . math4 . rng . RandomSource ;', 'import org . apache . commons . rng . UniformRandomProvider ;', 'import org . apache . commons . math4 . random . JDKRandomGenerator ;', 'import org . apache . commons . rng . UniformRandomProvider ;', 'new UncorrelatedRandomVectorGenerator ( 2 , new UniformRandomGenerator ( new JDKRandomGenerator ( ) ) ) ) ) ;', 'new UncorrelatedRandomVectorGenerator ( 2 , new UniformRandomGenerator ( RandomSource . create ( RandomSource . JDK ) ) ) ) ) ;', 'RandomGenerator [ ] rngs = new RandomGenerator [ ] {', 'RandomSource . create ( RandomSource . MT , 123456789 ) ,']","['PerfTestUtils . timeAndReport ( ""nextDouble ( ) "" ,', 'final String sep = "" "" ;', 'MAX NAME WIDTH ,', 'import java . util . Random ;', '}', 'sep + System . getProperty ( ""java . vm . version"" ) ) ;', 'System . out . println ( ""Runtime"" + sep + System . getProperty ( ""java . runtime . version"" , "" ? "" ) ) ;', '@ Override', 'printEnv ( ) ;', 'return rng . nextDouble ( ) ;']","['if ( counts [ i ] = = - 1 ) continue ;', 'if ( counts [ i ] = = - 1 ) {', 'continue ;', '}', 'if ( !b )', 'if ( !b ) {', '}', 'if ( !b )', 'if ( !b ) {', '}']","['import org . junit . runner . RunWith ;', 'import org . apache . commons . math4 . RetryRunner ;', '@ RunWith ( RetryRunner . class )']","['import org . junit . runner . RunWith ;', 'import org . apache . commons . math4 . RetryRunner ;', '@ RunWith ( RetryRunner . class )']","['Array2DRowRealMatrix subMatrix = new Array2DRowRealMatrix ( ) ;', 'public RealMatrix getSubMatrix ( final int startRow , final int endRow ,', 'final int rowCount = endRow - startRow + 1 ;', 'for ( int i = 0 ; i < rowCount ; + + i ) {', 'final double [ ] [ ] outData = new double [ rowCount ] [ columnCount ] ;', 'final int columnCount = endColumn - startColumn + 1 ;', '}', 'throws OutOfRangeException , NumberIsTooSmallException {', 'subMatrix . data = outData ;', 'final int startColumn , final int endColumn )']","['private transient UniformRandomProvider delegate ;', 'delegate . restoreState ( state ) ;', 'out . writeObject ( RandomSource . saveState ( delegate ) . getState ( ) ) ;', 'out . writeObject ( ( ( RandomSource . State ) delegate . saveState ( ) ) . getState ( ) ) ;', 'RandomSource . restoreState ( delegate , state ) ;', 'private transient RestorableUniformRandomProvider delegate ;', 'import org . apache . commons . rng . UniformRandomProvider ;', 'import org . apache . commons . rng . RestorableUniformRandomProvider ;', 'private transient UniformRandomProvider random ;', 'random . restoreState ( state ) ;']","['return 0 . 5 * ( lower + upper ) ;', 'double n = upperMinusLower + 1 ;', 'return 1 . 0 / ( upper - lower + 1 ) ;', 'private final double upperMinusLower ;', 'double n = upper - lower + 1 ;', 'return 1 . 0 / ( upperMinusLower + 1 ) ;', 'return ( x - lower + 1 . 0 ) / ( upper - lower + 1 . 0 ) ;', 'private final double upperPlusLower ;', 'upperPlusLower = ( double ) upper + ( double ) lower ;', 'return ( x - lower + 1 . 0 ) / ( upperMinusLower + 1 . 0 ) ;']","['return inverseCumulativeProbability ( rng . nextDouble ( ) ) ;', 'import org . apache . commons . rng . sampling . distribution . DiscreteInverseCumulativeProbabilityFunction ;', 'return AbstractIntegerDistribution . this . inverseCumulativeProbability ( p ) ;', '} ;', 'return new DiscreteInverseCumulativeProbabilityFunction ( ) {', 'import org . apache . commons . rng . sampling . distribution . DiscreteSampler ;', 'private DiscreteInverseCumulativeProbabilityFunction createICPF ( ) {', 'public int inverseCumulativeProbability ( double p ) {', 'return sampler . sample ( ) ;', '}']","['double [ ] ranks = ranking . rank ( exampleData ) ;', 'UniformRandomProvider randomGenerator = RandomSource . create ( RandomSource . MT , i ) ;', '@ Test', 'final int num = 10000000 ;', '}', '@ Ignore', 'correctRanks = new double [ ] { 1 , 2 , Double . NaN , Double . NaN } ;', 'System . out . println ( ""success rate = "" + count + "" / "" + num ) ;', 'randomGenerator ) ;', '+ + count ;']","['public void testNextUniformUniformMaximalInterval ( ) {', 'public void testNextUniformMaximalInterval ( ) {', 'public void testNextUniformUniformNegativeToPositiveBounds ( ) {', 'public void testNextUniformPositiveBounds ( ) {', 'private void checkNextUniformUniform ( double min , double max ) {', 'public void testNextUniformNegativeToPositiveBounds ( ) {', 'public void testNextUniformUniformNegaiveBounds ( ) {', 'private void checkNextUniform ( double min , double max ) {', 'checkNextUniformUniform ( - 3 , 5 ) ;', 'checkNextUniform ( - Double . MAX VALUE , Double . MAX VALUE ) ;']","['import org . apache . commons . math4 . random . JDKRandomAdaptor ;', 'import org . apache . commons . rng . sampling . ListSampler ;', 'import org . apache . commons . rng . RandomSource ;', 'ListSampler . shuffle ( rng , points ) ;', 'Collections . shuffle ( points , new JDKRandomAdaptor ( rng ) ) ;', 'import org . apache . commons . rng . simple . RandomSource ;', 'import org . apache . commons . rng . RandomSource ;', 'import org . apache . commons . rng . simple . RandomSource ;', 'import org . apache . commons . rng . RandomSource ;', 'import org . apache . commons . rng . simple . RandomSource ;']","['Position pos ) {', 'target = start ;', '}', 'throw new MathInternalError ( ) ;', 'public static void shuffle ( int [ ] list ,', 'shuffle ( list , 0 , Position . TAIL , rng ) ;', 'int start ,', 'HEAD ,', 'UniformRandomProvider rng ) {', 'target = rng . nextInt ( i - start + 1 ) + start ;']",['testSimpleBenchmark ( ) ;'],"['Assert . assertEquals ( 2 , qr . getRank ( 1 . 0e - 16 ) ) ;', 'Assert . assertEquals ( 2 , qr . getRank ( 0 ) ) ;']","['double [ ] [ ] d = { { 1 , 1 , 1 } , { 2 , 3 , 4 } , { 1 , 2 , 3 } } ;', '@ Test', 'RealMatrix m = new Array2DRowRealMatrix ( d ) ;', 'Assert . assertEquals ( 2 , qr . getRank ( 1e - 14 ) ) ;', '}', 'RRQRDecomposition qr = new RRQRDecomposition ( m ) ;', 'public void testRank2 ( ) {']","['0 . 000000 , 0 . 000000 , 10 . 000000 ,', '0 . 000000 , 0 . 000000 , 10 . 000000 ,', '10 . 000000 , 11 . 000000 , 11 . 000000 ,', '10 . 000000 , 11 . 000000 , 11 . 000000 ,', '0 . 000000 , 0 . 000000 , 1 . 000000 ,', '} ;', '1 . 000000 , 1 . 500000 , 1 . 600000 ,', '17 . 000000 , 18 . 000000 , 19 . 000000 , 20 . 000000 , 20 . 000000000000001', '11 . 000000 , 15 . 000000 , 16 . 000000 ,', '0 . 000000 , 0 . 000000 , 1 . 000000 ,']","['return true ;', 'return true ;', 'throw new MathInternalError ( ) ;', 'final double [ ] values = MathArrays . unique ( MathArrays . concatenate ( x , y ) ) ;', 'double minDelta = 1 ;', 'int ulp ) {', '}', 'throw new MathInternalError ( ) ;', 'final UniformRandomProvider rng = RandomSource . create ( RandomSource . TWO CMRES , 654321 ) ;', '}']","['Long count = freqTable . get ( v ) ;', 'if ( ! ( obj instanceof Frequency < ? > ) ) {', 'public long getCount ( int v ) {', 'final Map . Entry < T , Long > entry = iter . next ( ) ;', 'public long getCumFreq ( Comparable < ? > v ) {', 'Long count = freqTable . get ( v ) ;', 'public double getCumPct ( int v ) {', 'result = value . longValue ( ) ;', 'public void addValue ( Comparable < ? > v ) throws MathIllegalArgumentException {', 'for ( final Frequency < T > freq : others ) {']","['public interface Vector < S extends Space > extends Point < S > {', 'boolean isNaN ( ) ;', 'public interface Vector < S extends Space > {', 'Space getSpace ( ) ;', 'double distance ( Vector < S > v ) ;', 'new Vector1D ( Double . POSITIVE INFINITY ) ;', 'double a3 , Coordinates1D u3 ) {', 'public Vector1D ( double a , Vector1D u ) {', '}', 'public Vector1D subtract ( Vector < Euclidean1D > p ) {']","['centered [ i ] = values [ i ] - getMeans ( ) [ i ] ;', 'centered [ i ] = values [ i ] - means [ i ] ;']","['new BoxMullerLogNormalSampler ( rng , scale , shape ) ;', 'new MarsagliaLogNormalSampler ( rng , scale , shape ) ;', 'import org . apache . commons . rng . sampling . distribution . BoxMullerLogNormalSampler ;', 'import org . apache . commons . rng . sampling . distribution . MarsagliaLogNormalSampler ;', 'import org . apache . commons . rng . sampling . distribution . BoxMullerGaussianSampler ;', 'import org . apache . commons . rng . sampling . distribution . GaussianSampler ;', 'new BoxMullerGaussianSampler ( rng , mean , standardDeviation ) ;', 'new GaussianSampler ( new MarsagliaNormalizedGaussianSampler ( rng ) ,', 'import org . apache . commons . rng . sampling . distribution . MarsagliaNormalizedGaussianSampler ;', 'mean , standardDeviation ) ;']","['import org . apache . commons . math4 . util . Precision ;', 'import org . apache . commons . numbers . core . Precision ;', 'import org . apache . commons . math4 . util . Precision ;', 'import org . apache . commons . numbers . core . Precision ;', 'import org . apache . commons . math4 . util . Precision ;', 'import org . apache . commons . numbers . core . Precision ;', 'import org . apache . commons . math4 . util . Precision ;', 'import org . apache . commons . numbers . core . Precision ;', 'import org . apache . commons . math4 . util . Precision ;', 'import org . apache . commons . numbers . core . Precision ;']","['import org . apache . commons . math4 . util . ArithmeticUtils ;', 'import org . apache . commons . numbers . core . ArithmeticUtils ;', 'import org . apache . commons . math4 . util . ArithmeticUtils ;', 'import org . apache . commons . numbers . core . ArithmeticUtils ;', 'import org . apache . commons . math4 . util . ArithmeticUtils ;', 'import org . apache . commons . numbers . core . ArithmeticUtils ;', 'import org . apache . commons . math4 . util . ArithmeticUtils ;', 'import org . apache . commons . numbers . core . ArithmeticUtils ;', 'import org . apache . commons . math4 . util . ArithmeticUtils ;', 'import org . apache . commons . numbers . core . ArithmeticUtils ;']","['Assert . fail ( ""expecting ArithmeticException but got : "" + f . toString ( ) ) ;', 'Assert . fail ( ""expecting MathArithmeticException"" ) ;', '} catch ( ArithmeticException ex ) {', 'Assert . fail ( ""expecting MathArithmeticException but got : "" + f . toString ( ) ) ;', 'Assert . fail ( ""expecting ArithmeticException"" ) ;', '} catch ( MathArithmeticException ex ) { }', '} catch ( ArithmeticException ex ) { }', '} catch ( MathArithmeticException ex ) {', '} catch ( ArithmeticException ex ) {', 'Assert . fail ( ""expecting MathArithmeticException"" ) ;']","['public class Vector2DTest {', 'public class Cartesian2DTest {', 'public static List < Vector2D > makeBlobs ( int samples ,', 'Cartesian2D [ ] centerPoints = new Cartesian2D [ centers ] ;', 'Vector2D outerCircle = new Vector2D ( FastMath . cos ( angle ) , FastMath . sin ( angle ) ) ;', 'Cartesian2D outerCircle = new Cartesian2D ( FastMath . cos ( angle ) , FastMath . sin ( angle ) ) ;', 'Vector2D innerCircle = outerCircle . scalarMultiply ( factor ) ;', 'public static List < DoublePoint > normalize ( final List < Cartesian2D > input ,', 'Vector2D point = new Vector2D ( vector ) ;', 'return new Cartesian2D ( distribution . sample ( ) , distribution . sample ( ) ) ;']","['public Vector3D [ ] getPoints ( ) {', 'final Cartesian3D [ ] firstRing = new Cartesian3D [ numPointsRing1 ] ;', 'private final Vector3D [ ] points ;', 'points = new Cartesian3D [ numPointsRing1 + numPointsRing2 ] ;', 'firstRing [ i ] = new Vector3D ( v [ 0 ] * r ,', 'public Cartesian3D [ ] getPoints ( ) {', 'public ChineseRings ( Vector3D orientationRing1 ,', 'final Rotation rot = new Rotation ( Cartesian3D . PLUS K ,', 'final Rotation rot = new Rotation ( Vector3D . PLUS K ,', 'import org . apache . commons . math4 . geometry . euclidean . threed . Cartesian3D ;']","['public class Vector1DTest {', 'public class Cartesian1DTest {']","['public class Cartesian1D implements Point < Euclidean1D > , Vector < Euclidean1D > {', 'public class Cartesian1D extends Vector1D implements Point < Euclidean1D > {', '@ Override', 'package org . apache . commons . math4 . geometry . euclidean . oned ;', 'public abstract double getX ( ) ;', 'public abstract class Vector1D implements Vector < Euclidean1D > {', '}', 'import org . apache . commons . math4 . geometry . Vector ;', 'Cartesian1D result = parse ( source , parsePosition ) ;', 'public Vector1D parse ( final String source ) throws MathParseException {']","['public class Cartesian2D implements Point < Euclidean2D > , Vector < Euclidean2D > {', 'public class Cartesian2D extends Vector2D implements Point < Euclidean2D > {', 'public abstract double getY ( ) ;', 'public abstract double getX ( ) ;', 'package org . apache . commons . math4 . geometry . euclidean . twod ;', '}', 'public abstract class Vector2D implements Vector < Euclidean2D > {', 'import org . apache . commons . math4 . geometry . Vector ;', 'public Cartesian2D parse ( final String source , final ParsePosition pos ) {', 'public Vector2D parse ( final String source , final ParsePosition pos ) {']","['public class Cartesian3D implements Serializable , Point < Euclidean3D > , Vector < Euclidean3D > {', 'public class Cartesian3D extends Vector3D implements Serializable , Point < Euclidean3D > {', 'public abstract double getY ( ) ;', 'public abstract double getX ( ) ;', 'public abstract double getZ ( ) ;', '}', 'public abstract class Vector3D implements Vector < Euclidean3D > {', 'package org . apache . commons . math4 . geometry . euclidean . threed ;', 'import org . apache . commons . math4 . geometry . Vector ;', 'public Cartesian3D parse ( final String source ) throws MathParseException {']","['pTotal + = 2 * pLow ;', 'if ( criticalValueLow = = criticalValueHigh ) {', '}', '} else {', 'pTotal + = pLow ;', 'pTotal + = 2 * pLow ;', 'Assert . assertEquals ( 0 . 027 , testStatistic . binomialTest (', '3 , 3 , 0 . 3 , AlternativeHypothesis . TWO SIDED ) , 1E - 4 ) ;', '3 , 0 , 0 . 1 , AlternativeHypothesis . TWO SIDED ) , 1E - 4 ) ;', '3 , 3 , 0 . 4 , AlternativeHypothesis . TWO SIDED ) , 1E - 4 ) ;']","['for ( int j = 0 ; j < qrt [ i ] . length ; j + + ) {', 'for ( int j = minor ; j < qrt [ i ] . length ; j + + ) {', '{ 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 0 } ,', 'Assert . assertEquals ( 4 , qr . getRank ( 1e - 14 ) ) ;', '@ Test', 'public void testRank3 ( ) {', '{ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 }', '} ;', 'RealMatrix m = new Array2DRowRealMatrix ( d ) ;', '{ 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 , 0 } ,']","['public RealMatrix getSubMatrix ( final int startRow , final int endRow ,', 'public RealMatrix getSubMatrix ( final int startRow , final int endRow ,']","['return KS TEST . monteCarloP ( d , n , m , strict , iterations ) ;', 'public static double monteCarloP ( double d , int n , int m , boolean strict , int iterations , UniformRandomProvider rng ) {', 'public static double monteCarloP ( double d , int n , int m , boolean strict , int iterations ) {', 'return KS TEST . monteCarloP ( d , n , m , strict , iterations , rng ) ;', 'import org . apache . commons . rng . UniformRandomProvider ;', 'return integralMonteCarloP ( calculateIntegralD ( d , n , m , strict ) , n , m , iterations ) ;', 'final int m ,', 'final int iterations ) {', 'public double monteCarloP ( final double d ,', 'import org . apache . commons . rng . UniformRandomProvider ;']","['protected static final int LARGE SAMPLE PRODUCT = 10000 ;', 'private static final double PG SUM RELATIVE ERROR = 1e - 10 ;', 'protected static final double PG SUM RELATIVE ERROR = 1 . 0e - 10 ;', 'private static final int LARGE SAMPLE PRODUCT = 10000 ;', 'protected static final int MAXIMUM PARTIAL SUM COUNT = 100000 ;', 'private static final double KS SUM CAUCHY CRITERION = 1e - 20 ;', 'protected static final double KS SUM CAUCHY CRITERION = 1E - 20 ;', 'private static final int MAXIMUM PARTIAL SUM COUNT = 100000 ;', 'KolmogorovSmirnovTest . MONTE CARLO ITERATIONS , rng ) ,', 'private static final int LARGE SAMPLE PRODUCT = 10000 ;']","['protected static final double TOLERANCE = 10e - 10 ;', 'private static final double TOLERANCE = 10e - 10 ;']","['final double tol = KolmogorovSmirnovTestTest . TOLERANCE ;', 'Assert . assertEquals ( 0 . 105577085453247 , InferenceTestUtils . exactP ( d , smallSample1 . length , smallSample2 . length , false ) , tol ) ;', 'Assert', 'Assert . assertEquals ( 0 . 105577085453247 , InferenceTestUtils . kolmogorovSmirnovTest ( smallSample1 , smallSample2 , false ) , tol ) ;', '. assertEquals ( 0 . 105577085453247 , InferenceTestUtils . exactP ( d , smallSample1 . length , smallSample2 . length , false ) , tol ) ;', 'final double tol = 1e - 10 ;', '. assertEquals ( 0 . 105577085453247 , InferenceTestUtils . kolmogorovSmirnovTest ( smallSample1 , smallSample2 , false ) , tol ) ;']","['private static final double TOLERANCE = 10e - 10 ;', 'private static final double TOLERANCE = 1e - 10 ;']","['import org . apache . commons . math4 . special . Gamma ;', 'import org . apache . commons . numbers . gamma . LogGamma ;', 'z = Gamma . logGamma ( alpha ) + Gamma . logGamma ( beta ) - Gamma . logGamma ( alpha + beta ) ;', 'z = LogGamma . value ( alpha ) + LogGamma . value ( beta ) - LogGamma . value ( alpha + beta ) ;', 'import org . apache . commons . math4 . special . Gamma ;', 'FastMath . log ( LanczosApproximation . value ( shape ) ) ;', 'FastMath . log ( Gamma . lanczos ( shape ) ) ;', 'final double aux3 = - y * ( LANCZOS G + 0 . 5 ) / shiftedShape + LANCZOS G + aux2 ;', 'FastMath . exp ( shape + Gamma . LANCZOS G ) ;', 'this . densityPrefactor2 = shape * FastMath . sqrt ( aux ) / LanczosApproximation . value ( shape ) ;']","['import org . apache . commons . math4 . special . Beta ;', 'return RegularizedBeta . value ( x , alpha , beta ) ;', 'return Beta . regularizedBeta ( x , alpha , beta ) ;', 'import org . apache . commons . numbers . gamma . RegularizedBeta ;', 'x + 1 . 0 , numberOfTrials - x ) ;', 'x + 1 . 0 , numberOfTrials - x ) ;', 'import org . apache . commons . math4 . special . Beta ;', 'ret = 1 . 0 - RegularizedBeta . value ( probabilityOfSuccess ,', 'ret = 1 . 0 - Beta . regularizedBeta ( probabilityOfSuccess ,', 'import org . apache . commons . numbers . gamma . RegularizedBeta ;']","['final double t = Erf . erfcInv ( p ) ;', 'import org . apache . commons . numbers . gamma . InverseErfc ;', 'import org . apache . commons . math4 . special . Erf ;', 'final double t = InverseErfc . value ( p ) ;', 'return Erf . erfc ( FastMath . sqrt ( halfC / ( x - mu ) ) ) ;', 'return Erfc . value ( FastMath . sqrt ( halfC / ( x - mu ) ) ) ;', 'import org . apache . commons . numbers . gamma . Erfc ;', 'return 0 . 5 * Erf . erf ( v0 , v1 ) ;', 'return 0 . 5 * ErfDifference . value ( v0 , v1 ) ;', 'import org . apache . commons . math4 . special . Erf ;']","['import org . apache . commons . math4 . util . CombinatoricsUtils ;', 'import org . apache . commons . numbers . combinatorics . FactorialDouble ;', 'term * = FastMath . pow ( delta [ k ] , orders [ k ] ) /', 'private static FactorialDouble FACTORIAL = FactorialDouble . create ( ) . withCache ( 30 ) ;', 'CombinatoricsUtils . factorial ( orders [ k ] ) ;', 'term * = FastMath . pow ( delta [ k ] , orders [ k ] ) / FACTORIAL . value ( orders [ k ] ) ;', 'import org . apache . commons . math4 . util . CombinatoricsUtils ;', 'throw new MathArithmeticException ( LocalizedFormats . NUMBER TOO LARGE , value . length , 20 ) ;', 'double inv = 1 . 0 / CombinatoricsUtils . factorial ( i ) ;', 'double inv = 1 . 0 / Factorial . value ( i ) ;']","['if ( c [ 1 ] + 1 < c [ 2 ] ) {', 'private final int n ;', 'import java . io . Serializable ;', 'public int compare ( int [ ] c1 ,', '@ Override', 'import java . util . Arrays ;', 'SingletonIterator ( final int [ ] singleton ) {', 'import org . apache . commons . math4 . exception . OutOfRangeException ;', 'this . k = k ;', 'int x = 0 ;']","['private static final double LANCZOS G = LanczosApproximation . g ( ) ;', 'private static final double LANCZOS G = LanczosApproximation . g ( ) ;']","['import org . apache . commons . math4 . util . MathArrays ;', 'import org . apache . commons . numbers . arrays . LinearCombination ;', 'packed [ i + 1 ] = MathArrays . linearCombination ( dv , partials ) ;', 'packed [ i + 1 ] = LinearCombination . value ( dv , partials ) ;', 'MathArrays . linearCombination ( a1 , c1 [ offset1 + i ] , a2 , c2 [ offset2 + i ] ) ;', 'import org . apache . commons . numbers . arrays . LinearCombination ;', 'import org . apache . commons . math4 . util . MathArrays ;', 'LinearCombination . value ( a1 , c1 [ offset1 + i ] , a2 , c2 [ offset2 + i ] ) ;', 'MathArrays . linearCombination ( a1 , c1 [ offset1 + i ] ,', 'LinearCombination . value ( a1 , c1 [ offset1 + i ] ,']","['sLowSum + = ( prodHighNext - ( sHighCur - sPrime ) ) + ( sHighPrev - sPrime ) ;', 'final double s12High = prod1High + prod2High ;', 'public static double cosAngle ( double [ ] v1 , double [ ] v2 ) {', 's3 + = r * r ;', 's1 = 1 + s1 * r * r ;', 'final double s123Low = ( prod3High - ( s123High - s123Prime ) ) + ( s12High - s123Prime ) ;', 'if ( xabs < rdwarf | | xabs > agiant ) {', 'double r = x1max / xabs ;', 'double sPrime = sHighPrev - prodHighNext ;', 'public static double linearCombination ( final double a1 , final double b1 ,']","['public static final double DEFAULT EPSILON = 1e - 12 ;', 'private static final int DEFAULT MAX ITERATIONS = 10000000 ;', 'public static final int DEFAULT MAX ITERATIONS = 10000000 ;', 'private static final double DEFAULT EPSILON = 1e - 12 ;']","['return MathUtils . normalizeAngle ( angle , FastMath . PI ) ;', 'return PlaneAngleRadians . normalizeBetweenZeroAndTwoPi ( angle ) ;', 'this . angle = MathUtils . normalizeAngle ( angle , FastMath . PI ) ;', 'angle = PlaneAngleRadians . normalizeBetweenZeroAndTwoPi ( line . angle ) ;', 'angle = MathUtils . normalizeAngle ( line . angle , FastMath . PI ) ;', 'import org . apache . commons . numbers . angle . PlaneAngleRadians ;', 'this . angle = MathUtils . normalizeAngle ( alpha , FastMath . PI ) ;', 'this . angle = PlaneAngleRadians . normalizeBetweenZeroAndTwoPi ( alpha ) ;', 'this . angle = PlaneAngleRadians . normalizeBetweenZeroAndTwoPi ( angle ) ;', 'final double normalizedPoint = MathUtils . normalizeAngle ( point , middle ) ;']","['return a - TWO PI * FastMath . floor ( ( a + FastMath . PI - center ) / TWO PI ) ;', '}', 'public static double normalizeAngle ( double a , double center ) {', 'Assert . assertTrue ( c < = ( b + FastMath . PI ) ) ;', 'final double r = MathUtils . reduce ( a , period , offset ) + offset ;', 'final double r = MathUtils . reduce ( a , period , offset ) ;', 'final double nA = PlaneAngleRadians . normalize ( a , center ) ;', 'final double tol = Math . ulp ( 1d ) ;', 'nA , r , 52 * Math . ulp ( nA ) ) ;', '@ Test']","['2 , knots . length , false ) ;', 'knots . length , 2 , true ) ;', 'NOT ENOUGH POINTS IN SPLINE PARTITION ( ""spline partition must have at least { 0 } points , got { 1 } "" ) ,', 'NOT ENOUGH POINTS IN SPLINE PARTITION ( ""spline partition must have at least { 1 } points , got { 0 } "" ) ,']","['2 , knots . length , false ) ;', 'knots . length , 2 , true ) ;']","['( 1 . 0 / ( 4 * FastMath . pow ( numberOfTrials , 2 ) ) * zSquared ) ) ;', 'final double factor = 1 . 0 / ( 1 + zSquaredOverNumTrials ) ;', 'final double factor = 1 . 0 / ( 1 + ( 1 . 0 / numberOfTrials ) * zSquared ) ;', '( zSquaredOverNumTrials / ( 4 * numberOfTrials ) ) ) ;', 'final double zSquared = FastMath . pow ( z , 2 ) ;', 'final double modifiedSuccessRatio = mean + zSquaredOverNumTrials / 2 ;', 'final double modifiedSuccessRatio = mean + ( 1 . 0 / ( 2 * numberOfTrials ) ) * zSquared ;', 'final double zSquaredOverNumTrials = zSquared / numberOfTrials ;', 'final double zSquared = z * z ;', '@ Test']","['final double factor = 1 . 0 / ( 1 + zSquaredOverNumTrials ) ;', 'final double factor = 1 / ( 1 + zSquaredOverNumTrials ) ;', 'FastMath . sqrt ( 1 . 0 / numberOfTrials * mean * ( 1 - mean ) +', 'final double oneOverNumTrials = 1d / numberOfTrials ;', '( zSquaredOverNumTrials / ( 4 * numberOfTrials ) ) ) ;', 'final double difference = z * FastMath . sqrt ( oneOverNumTrials * mean * ( 1 - mean ) +', 'final double difference = z *', '( oneOverNumTrials * zSquaredOverNumTrials / 4 ) ) ;', 'final double zSquaredOverNumTrials = zSquared / numberOfTrials ;', 'final double alpha = ( 1 - confidenceLevel ) / 2 ;']","['final double [ ] out = new double [ nCols ] ;', 'return out ;', 'if ( array . length ! = nCols ) {', 'public void setRow ( final int row ,', 'public double [ ] getRow ( final int row )', 'System . arraycopy ( data [ row ] , 0 , out , 0 , nCols ) ;', '}', 'MatrixUtils . checkRowIndex ( this , row ) ;', 'final int nCols = getColumnDimension ( ) ;', 'final double [ ] array )']","['if ( initialDoubleArray ! = null ) {', 'for ( double initialValue : initialDoubleArray ) {', '}', 'eDA . addElement ( initialValue ) ;', 'public DescriptiveStatistics ( Double [ ] initialDoubleArray ) {', 'eDA = new ResizableDoubleArray ( initialDoubleArray . length ) ;', 'double value = random . nextDouble ( ) ;', 'Assert . assertEquals ( original . getWindowSize ( ) ,', 'instance . getGeometricMean ( ) ,', '@ Test']","['UnitSphereRandomVectorGenerator rand ) {', 'UnitSphereSampler rand ) {', 'import org . apache . commons . math4 . random . UnitSphereRandomVectorGenerator ;', 'import org . apache . commons . rng . sampling . UnitSphereSampler ;', 'new UnitSphereRandomVectorGenerator ( dimension ) ) ,', 'import org . apache . commons . rng . sampling . UnitSphereSampler ;', 'import org . apache . commons . math4 . random . UnitSphereRandomVectorGenerator ;', 'RandomSource . create ( RandomSource . MT 64 ) ) ) ,', 'new UnitSphereSampler ( dimension ,', 'import org . apache . commons . rng . simple . RandomSource ;']","['sampler = new NormalDistribution ( ) . createSampler ( generator ) ;', 'sampler = new MarsagliaNormalizedGaussianSampler ( generator ) ;', 'import org . apache . commons . math4 . distribution . RealDistribution ;', 'private final NormalizedGaussianSampler sampler ;', 'private final RealDistribution . Sampler sampler ;', 'import org . apache . commons . rng . sampling . distribution . MarsagliaNormalizedGaussianSampler ;', 'import org . apache . commons . math4 . distribution . NormalDistribution ;', 'import org . apache . commons . rng . sampling . distribution . NormalizedGaussianSampler ;']","['return new SplitSubHyperplane < > ( null , this ) ;', 'return new SplitSubHyperplane < Euclidean1D > ( this , null ) ;', '} else if ( global > 1 . 0e - 10 ) {', 'final OrientedPoint thisHyperplane = ( OrientedPoint ) getHyperplane ( ) ;', 'return new SplitSubHyperplane < > ( null , null ) ;', '} else if ( global > tolerance ) {', 'final double global = hyperplane . getOffset ( ( ( OrientedPoint ) getHyperplane ( ) ) . getLocation ( ) ) ;', 'final double tolerance = thisHyperplane . getTolerance ( ) ;', 'if ( global < - 1 . 0e - 10 ) {', 'final double global = hyperplane . getOffset ( thisHyperplane . getLocation ( ) ) ;']","['Precision . equals ( previous . getLine ( ) . getAngle ( ) , next . getLine ( ) . getAngle ( ) , Precision . EPSILON ) ) {', 'selected = node ;', 'loop . remove ( i - - ) ;', 'return selected ;', 'BSPTree < Euclidean2D > selected = null ;', '}', 'selected = node ;', 'for ( final BSPTree < Euclidean2D > node : candidates ) {', 'for ( int i = 0 ; i < loop . size ( ) ; + + i ) {', 'if ( distance < min ) {']","['final double global = hyperplane . getOffset ( thisHyperplane . getLocation ( ) ) ;', 'final double global = hyperplane . getOffset ( thisHyperplane . getLocation ( ) ) ;', 'final OrientedPoint thisHyperplane = ( OrientedPoint ) getHyperplane ( ) ;', 'final OrientedPoint thisHyperplane = ( OrientedPoint ) getHyperplane ( ) ;']","['selected = node ;', 'selected = node ;', 'return selected ;', 'return selected ;', '}', '}', 'for ( final BSPTree < Euclidean2D > node : candidates ) {', 'for ( final BSPTree < Euclidean2D > node : candidates ) {', 'if ( distance < min ) {', 'if ( distance < min ) {']","['throw new MathInternalError ( ) ;', 'break ;', 'characterize ( node . getMinus ( ) , sub , splitters ) ;', 'Assert . assertEquals ( 0 . 0 , set . getBoundarySize ( ) , Precision . SAFE MIN ) ;', 'Assert . assertSame ( tree , insideSplitterIter . next ( ) ) ;', 'it . next ( ) ;', 'Assert . assertEquals ( 1 , outside . getSegments ( ) . size ( ) ) ;', 'assertVectorEquals ( new Cartesian2D ( 0 , 1 ) , outside . getSegments ( ) . get ( 0 ) . getEnd ( ) ) ;', 'import org . apache . commons . math4 . geometry . euclidean . oned . IntervalsSet ;', 'double lower = ( line . toSubSpace ( start ) ) . getX ( ) ;']","['new MarsagliaLogNormalSampler ( rng , scale , shape ) ;', 'new LogNormalSampler ( new ZigguratNormalizedGaussianSampler ( rng ) , scale , shape ) ;', 'import org . apache . commons . rng . sampling . distribution . MarsagliaLogNormalSampler ;', 'import org . apache . commons . rng . sampling . distribution . ZigguratNormalizedGaussianSampler ;', 'import org . apache . commons . rng . sampling . distribution . LogNormalSampler ;']","['setSize ( 0 ) ;', 'private Cartesian3D barycenterSum = Cartesian3D . ZERO ;', 'setBarycenter ( ( Point < Euclidean3D > ) new Cartesian3D ( 1 . 0 / ( 4 * getSize ( ) ) , ( Cartesian3D ) getBarycenter ( ) ) ) ;', 'final double area = polygon . getSize ( ) ;', 'scaled = - scaled ;', '}', 'getTree ( true ) . visit ( new FacetsContributionVisitor ( ) ) ;', 'else if ( isFull ( ) ) {', 'setBarycenter ( ( Point < Euclidean3D > ) new Cartesian3D ( 1 . 0 , ( Cartesian3D ) getBarycenter ( ) , scaled , facetB ) ) ;', 'barycenterSum = new Cartesian3D ( 1 . 0 , barycenterSum , scaledVolume , facetBarycenter ) ;']","['import org . apache . commons . math4 . distribution . RealDistribution ;', 'import org . apache . commons . statistics . distribution . UniformContinuousDistribution ;', 'return randomize ( new UniformRealDistribution ( min , max ) . createSampler ( rng ) ,', 'public static FeatureInitializer randomize ( final ContinuousDistribution . Sampler random ,', 'public static FeatureInitializer randomize ( final RealDistribution . Sampler random ,', 'return randomize ( new UniformContinuousDistribution ( min , max ) . createSampler ( rng ) ,', 'import org . apache . commons . math4 . distribution . UniformRealDistribution ;', 'import org . apache . commons . statistics . distribution . ContinuousDistribution ;', 'import org . apache . commons . math4 . distribution . RealDistribution ;', 'import org . apache . commons . statistics . distribution . UniformContinuousDistribution ;']","['import org . apache . commons . math4 . distribution . TDistribution ;', 'import org . apache . commons . statistics . distribution . TDistribution ;']","['import org . apache . commons . math4 . distribution . TDistribution ;', 'import org . apache . commons . statistics . distribution . TDistribution ;']","['private final RealDistribution . Sampler random ;', 'import org . apache . commons . statistics . distribution . NormalDistribution ;', 'import org . apache . commons . math4 . distribution . RealDistribution ;', 'private final ContinuousDistribution . Sampler random ;', 'import org . apache . commons . math4 . distribution . NormalDistribution ;', 'import org . apache . commons . statistics . distribution . ContinuousDistribution ;']","['import org . apache . commons . math4 . distribution . BinomialDistribution ;', 'import org . apache . commons . statistics . distribution . BinomialDistribution ;', 'import org . apache . commons . math4 . distribution . ChiSquaredDistribution ;', 'import org . apache . commons . statistics . distribution . ChiSquaredDistribution ;', 'import org . apache . commons . math4 . distribution . ChiSquaredDistribution ;', 'import org . apache . commons . statistics . distribution . ChiSquaredDistribution ;', 'import org . apache . commons . math4 . distribution . NormalDistribution ;', 'import org . apache . commons . statistics . distribution . NormalDistribution ;', 'import org . apache . commons . math4 . distribution . FDistribution ;', 'import org . apache . commons . statistics . distribution . FDistribution ;']","['import org . apache . commons . math4 . distribution . NormalDistribution ;', 'import org . apache . commons . statistics . distribution . NormalDistribution ;', 'import org . apache . commons . math4 . distribution . FDistribution ;', 'import org . apache . commons . statistics . distribution . FDistribution ;', 'import org . apache . commons . math4 . distribution . NormalDistribution ;', 'import org . apache . commons . statistics . distribution . NormalDistribution ;', 'import org . apache . commons . math4 . distribution . NormalDistribution ;', 'import org . apache . commons . statistics . distribution . NormalDistribution ;']","['IntegerDistribution . Sampler sampler ) {', 'import org . apache . commons . statistics . distribution . DiscreteDistribution ;', 'public IntegerDistribution . Sampler createSampler ( final UniformRandomProvider rng ) {', 'DiscreteDistribution . Sampler sampler ) {', 'public Sampler createSampler ( final UniformRandomProvider rng ) {', 'public RealDistribution . Sampler createSampler ( final UniformRandomProvider rng ) {', 'public Sampler createSampler ( final UniformRandomProvider rng ) {', 'RealDistribution . Sampler sampler ) {', 'ContinuousDistribution . Sampler sampler ) {', 'import org . apache . commons . statistics . distribution . ContinuousDistribution ;']","['int index = Arrays . binarySearch ( cumulativeProbabilities , randomValue ) ;', 'sampler = new DiscreteProbabilityCollectionSampler < T > ( rng , singletons , probabilities ) ;', 'index < probabilities . length & &', 'private final DiscreteProbabilityCollectionSampler < T > sampler ;', 'private final UniformRandomProvider random ;', 'return sampler . sample ( ) ;', 'if ( index > = 0 & &', 'import org . apache . commons . rng . sampling . DiscreteProbabilityCollectionSampler ;', 'return singletons . get ( singletons . size ( ) - 1 ) ;', 'final double randomValue = random . nextDouble ( ) ;']","['private RealDistribution k ( double x ) {', 'return new ConstantContinuousDistribution ( bStats . getMean ( ) ) ;', 'protected RealDistribution getKernel ( SummaryStatistics bStats ) {', 'protected ContinuousDistribution getKernel ( SummaryStatistics bStats ) {', 'if ( kernel instanceof ConstantRealDistribution ) {', 'if ( x < kernel . getMean ( ) ) {', 'final RealDistribution kernel = k ( x ) ;', 'import org . apache . commons . statistics . distribution . ContinuousDistribution ;', 'if ( x < kernel . getNumericalMean ( ) ) {', 'import org . apache . commons . statistics . distribution . NormalDistribution ;']","['new UniformRealDistribution ( xValues [ 0 ] , xValues [ xValues . length - 1 ] ) . createSampler ( rng ) ;', 'import org . apache . commons . statistics . distribution . UniformContinuousDistribution ;', 'import org . apache . commons . math4 . distribution . RealDistribution ;', 'final ContinuousDistribution . Sampler distX =', 'import org . apache . commons . math4 . distribution . UniformRealDistribution ;', 'new UniformContinuousDistribution ( xValues [ 0 ] , xValues [ xValues . length - 1 ] ) . createSampler ( rng ) ;', 'final RealDistribution . Sampler distX =', 'import org . apache . commons . statistics . distribution . ContinuousDistribution ;', 'import org . apache . commons . math4 . distribution . RealDistribution ;', 'import org . apache . commons . statistics . distribution . UniformContinuousDistribution ;']","['import org . apache . commons . math4 . distribution . NormalDistribution ;', 'import org . apache . commons . statistics . distribution . NormalDistribution ;']","['return new RealDistribution . Sampler ( ) {', 'return new ContinuousDistribution . Sampler ( ) {', 'final double sig = FastMath . sqrt ( getNumericalVariance ( ) ) ;', 'final double mu = getMean ( ) ;', 'implements RealDistribution , Serializable {', 'final double sig = FastMath . sqrt ( getVariance ( ) ) ;', 'final double mu = getNumericalMean ( ) ;', 'public ContinuousDistribution . Sampler createSampler ( final UniformRandomProvider rng ) {', 'public Sampler createSampler ( final UniformRandomProvider rng ) {', 'Serializable {']","['return new IntegerDistribution . Sampler ( ) {', 'final double mu = getMean ( ) ;', 'final double sigma = FastMath . sqrt ( getNumericalVariance ( ) ) ;', 'public DiscreteDistribution . Sampler createSampler ( final UniformRandomProvider rng ) {', 'final double mu = getNumericalMean ( ) ;', 'final double sigma = FastMath . sqrt ( getVariance ( ) ) ;', 'public Sampler createSampler ( final UniformRandomProvider rng ) {', 'return new DiscreteDistribution . Sampler ( ) {', 'public double getNumericalVariance ( ) {', 'import org . apache . commons . statistics . distribution . DiscreteDistribution ;']","['final double offset = plane . getOffset ( ( Point < Euclidean3D > ) point ) ;', 'final double offset = plane . getOffset ( point ) ;', 'public static class TreePrinter1D extends TreePrinter < Euclidean1D > {', 'write ( Arrays . toString ( interval ) ) ;', 'import org . apache . commons . math4 . geometry . euclidean . oned . OrientedPoint ;', 'TreePrinter3D printer = new TreePrinter3D ( ) ;', 'protected static final String INDENT = "" "" ;', 'OrientedPoint hyper = ( OrientedPoint ) cut . getHyperplane ( ) ;', 'write ( "" ] "" ) ;', 'write ( "" } "" ) ;']","['IntervalsSet interval = new IntervalsSet ( TEST TOLERANCE ) ;', 'IntervalsSet interval = new IntervalsSet ( TEST TOLERANCE ) ;', 'Assert . assertNotNull ( minusSub ) ;', 'Assert . assertNotNull ( minusSub ) ;', '}', '}', 'SubOrientedPoint minusSub = ( ( SubOrientedPoint ) split . getMinus ( ) ) ;', 'SubOrientedPoint minusSub = ( ( SubOrientedPoint ) split . getMinus ( ) ) ;', 'Assert . assertEquals ( Side . PLUS , split . getSide ( ) ) ;', 'Assert . assertEquals ( Side . PLUS , split . getSide ( ) ) ;']","['TDistribution distribution = new TDistribution ( n - 2 ) ;', 'return distribution ;', 'return 2d * ( 1 . 0 - distribution . cumulativeProbability (', 'final double numDeg = n - 2 ;', 'FastMath . abs ( getSlope ( ) ) / getSlopeStdErr ( ) ) ) ;', 'distribution = new TDistribution ( numDeg ) ;', 'distribution . inverseCumulativeProbability ( 1d - alpha / 2d ) ;', 'if ( distribution = = null | |', 'return 2d * ( 1 . 0 - getDistribution ( )', '}']","['return distribution ;', 'TDistribution distribution = new TDistribution ( n - 2 ) ;', 'final double numDeg = n - 2 ;', 'return 2d * ( 1 . 0 - distribution . cumulativeProbability (', 'distribution = new TDistribution ( numDeg ) ;', 'FastMath . abs ( getSlope ( ) ) / getSlopeStdErr ( ) ) ) ;', 'if ( distribution = = null | |', 'distribution . inverseCumulativeProbability ( 1d - alpha / 2d ) ;', 'return 2d * ( 1 . 0 - getDistribution ( )', '}']","['previous . getStart ( ) ! = null & & next . getEnd ( ) ! = null & &', 'new Cartesian2D ( - 1 , 0 ) ,', '@ Test', '} ) ;', 'Assert . assertEquals ( 3 , loop . length ) ;', '}', 'List < SubHyperplane < Euclidean2D > > boundaries = new ArrayList < SubHyperplane < Euclidean2D > > ( ) ;', 'Assert . assertEquals ( Double . POSITIVE INFINITY , poly . getSize ( ) , 1e - 10 ) ;', 'boundaries . add ( line1 . wholeHyperplane ( ) ) ;', 'GeometryTestUtils . assertVectorEquals ( line2 . toSpace ( new Cartesian1D ( Float . MAX VALUE ) ) , loop [ 2 ] , 1e - 10 ) ;']","['setBarycenter ( ( Point < Euclidean2D > ) new Cartesian2D ( 0 , 0 ) ) ;', 'setBarycenter ( ( Point < Euclidean2D > ) Cartesian2D . NaN ) ;', 'Assert . assertTrue ( empty . isEmpty ( ) ) ;', 'Assert . assertEquals ( true , poly . isFull ( ) ) ;', 'Assert . assertFalse ( empty . isEmpty ( ) ) ;', 'Assert . assertEquals ( Double . POSITIVE INFINITY , poly . getSize ( ) , 1e - 10 ) ;', '1 . 0e - 10 ) ;', 'PolygonsSet poly = new PolygonsSet ( 1e - 10 ) ;', 'Assert . assertEquals ( 0 . 0 , empty . getBoundarySize ( ) , 1 . 0e - 10 ) ;', 'Assert . assertEquals ( 0 . 0 , poly . getBoundarySize ( ) , 1e - 10 ) ;']","['1 . 0e - 10 ) ;', 'Assert . assertFalse ( poly . isEmpty ( ) ) ;', 'Assert . assertEquals ( true , poly . isFull ( ) ) ;', 'double offset ;', 'poly . projectToBoundary ( new Cartesian2D ( x , y ) ) . getOffset ( ) ,', 'offset = poly . projectToBoundary ( new Cartesian2D ( x , y ) ) . getOffset ( ) ;', 'Assert . assertEquals ( false , poly . isEmpty ( ) ) ;', 'Assert . assertFalse ( poly . isFull ( ) ) ;', 'Assert . assertEquals ( false , poly . isFull ( ) ) ;', 'Assert . assertTrue ( poly . getSize ( ) > 0 ) ;']","['if ( j = = ( array . length - 1 ) ) {', '} else if ( j = = ( array . length - 1 ) ) {', '}', 'checkPointsEqual ( new Cartesian2D ( 1 , 0 ) , loop [ 4 ] , tolerance ) ;', 'checkPointsEqual ( new Cartesian2D ( 1 , 1 ) , loop [ 4 ] , tolerance ) ;']","['write ( node . getClass ( ) . getSimpleName ( ) + "" @ "" + System . identityHashCode ( node ) + "" | "" ) ;', 'String msg = ""Expected value to be negative infinity but was "" + value ;', 'write ( nodeIdString ( node ) + "" | "" ) ;', 'public static void assertPositiveInfinity ( double value ) {', 'String msg = ""Expected value to be positive infinity but was "" + value ;', 'return str . substring ( idx + 1 , str . length ( ) ) ;', 'String str = Objects . toString ( node ) ;', 'import java . util . Objects ;', '}', 'protected String nodeIdString ( BSPTree < S > node ) {']","['Assert . assertEquals ( Double . POSITIVE INFINITY , interval . getBarycenter ( ) , Precision . EPSILON ) ;', 'Assert . assertTrue ( Double . isNaN ( interval . getSize ( ) ) ) ;', 'Assert . assertEquals ( Double . POSITIVE INFINITY , interval . getSize ( ) , TEST TOLERANCE ) ;', 'GeometryTestUtils . assertNegativeInfinity ( interval . getInf ( ) ) ;', 'Assert . assertEquals ( Double . NaN , interval . getSize ( ) , Precision . SAFE MIN ) ;', 'GeometryTestUtils . assertNegativeInfinity ( interval . getBarycenter ( ) ) ;', 'Assert . assertEquals ( Double . NEGATIVE INFINITY , interval . getBarycenter ( ) , Precision . EPSILON ) ;', 'GeometryTestUtils . assertPositiveInfinity ( interval . getSup ( ) ) ;', 'Assert . assertEquals ( Double . POSITIVE INFINITY , interval . getSup ( ) , TEST TOLERANCE ) ;', 'GeometryTestUtils . assertPositiveInfinity ( interval . getBarycenter ( ) ) ;']","['eventIt . next ( ) ;', 'return eventIt . next ( ) ;']","['}', ""typeToClassMap . put ( line . substring ( 0 , line . indexOf ( ' ' ) ) , AnnotationConfiguration . ATTRIBUTE TYPE ) ;"", 'else if ( ""relations"" . equals ( sectionType ) ) {', 'case ""attributes"" :', 'if ( ""entities"" . equals ( sectionType ) ) {', 'case ""entities"" :', 'public static final String ATTRIBUTE TYPE = ""Attribute"" ;', 'break ;', 'default :', 'switch ( sectionType ) {']","['}', 'mNameFinder . clearAdaptiveData ( ) ;', '}']","['double [ ] predParams = PARAMS [ pid ] . getParameters ( ) ;', 'for ( int pid = 0 ; pid < PARAMS . length ; pid + + ) {', 'for ( int pi = 0 ; pi < numParams ; pi + + ) {', 'ComparablePredicate [ ] sortPreds ;', 'tmpOutcomes [ numParams ] = outcomePattern [ pi ] ;', 'double [ ] activeParams = new double [ numParams ] ;', 'activeOutcomes [ pi ] = tmpOutcomes [ pi ] ;', '}', 'ComparablePredicate [ ] tmpPreds = new ComparablePredicate [ PARAMS . length ] ;', 'double [ ] tmpParams = new double [ numOutcomes ] ;']","['String text = sb . substring ( 0 , sb . length ( ) - 1 ) ;', 'for ( String tok : tokens ) {', 'Parse [ ] parses = parseLine ( line , parser , numParses ) ;', 'String text = sb . substring ( 0 , sb . length ( ) ) ;', 'import java . util . ArrayList ;', 'tokenizer = new TokenizerME ( tokenizerModel ) ;', 'StringTokenizer str = new StringTokenizer ( line ) ;', 'return ""Usage : "" + CLI . CMD + "" "" + getName ( ) + "" [ - bs n - ap n - k n - tk tok model ] model < sentences \\ n""', 'String tok = str . nextToken ( ) ;', '+ "" - tk tok model : Use the specified tokenizer model to tokenize the sentences . Defaults to a WhitespaceTokenizer . "" ;']","['if ( Version . currentVersion ( ) . getMajor ( ) = = version . getMajor ( ) & & ( Version . currentVersion ( ) . getMinor ( ) - 1 ) ! = version . getMinor ( ) ) {', 'if ( Version . currentVersion ( ) . getMajor ( ) = = version . getMajor ( ) & & ( Version . currentVersion ( ) . getMinor ( ) - 2 )', '! = version . getMinor ( ) ) {']","['return FastTokenClassFeatureGenerator . tokenFeature ( token ) ;', 'if ( pattern . isAllLowerCaseLetter ( ) ) {', 'else if ( pattern . containsPeriod ( ) ) {', 'feat = ""ac"" ;', 'feat = ""an"" ;', 'feat = ""ic"" ;', 'feat = ""sc"" ;', 'else if ( pattern . containsHyphen ( ) ) {', 'else if ( pattern . isInitialCapitalLetter ( ) ) {', 'feat = ""lc"" ;']","['else', 'if ( Objects . isNull ( n . getType ( ) ) ) {', 'type1 = type ;', '}', 'List < Event > events = new ArrayList < Event > ( outcomes . length ) ;', 'List < Event > events = new ArrayList < > ( outcomes . length ) ;', 'if ( type ! = null )', 'Span n = names [ i ] ;', 'String type1 ;', 'if ( !Objects . isNull ( this . defaultType ) ) {']","['public abstract class AbstractEventTrainer extends AbstractTrainer implements', 'import java . util . Map ;', 'addToReport ( ""Training - Eventhash"" , hses . calculateHashSum ( ) . toString ( 16 ) ) ;', 'import java . util . HashMap ;', 'MaxentModel model = doTrain ( indexer ) ;', 'throw new IllegalArgumentException ( ""trainParams are not valid!"" ) ;', 'int cutoff = getCutoff ( ) ;', 'indexer = new TwoPassDataIndexer ( ) ;', 'String dataIndexerName = getStringParam ( DATA INDEXER PARAM ,', 'import opennlp . tools . ml . model . AbstractDataIndexer ;']","['indexer = new TwoPassDataIndexer ( ) ;', 'protected Map < String , String > reportMap = new HashMap < > ( ) ;', '. equals ( dataIndexer ) ) ) {', 'public static final String DATA INDEXER ONE PASS REAL VALUE = ""OnePassRealValue"" ;', '+ dataIndexerName ) ;', 'import opennlp . tools . ml . model . DataIndexerFactory ;', 'return false ;', 'if ( trainingParameters . getIntParameter ( CUTOFF PARAM , - 1 ) = = - 1 ) {', 'String dataIndexer = parameters . getStringParam ( DATA INDEXER PARAM ,', 'addToReport ( AbstractTrainer . TRAINER TYPE PARAM , EventTrainer . EVENT VALUE ) ;']","['return new SpanAnnotation ( id , type ,', 'return new SpanAnnotation ( id , type , new Span ( parseInt ( values [ BEGIN OFFSET ]', 'new Span ( parseInt ( values [ BEGIN OFFSET ]', '. getCoveredText ( line ) . toString ( ) ) , endOffset , type ) , coveredText ) ;', '. getCoveredText ( line ) . toString ( ) ) , endOffset , type ) , coveredText ) ;']","['GISTrainer ( ) {', 'this . setSmoothing ( smoothing ) ;', 'public class GISTrainer {', 'boolean smoothing = trainingParameters . getBooleanParameter ( SMOOTHING PARAM , SMOOTHING DEFAULT ) ;', 'indexingParameters . put ( GIS . CUTOFF PARAM , Integer . toString ( cutoff ) ) ;', 'model = trainModel ( iterations , indexer , threads ) ;', 'private void display ( String s ) {', 'protected void display ( String s ) {', 'indexingParameters . put ( GIS . ITERATIONS PARAM , Integer . toString ( iterations ) ) ;', 'private static final String SMOOTHING PARAM = ""smoothing"" ;']","['}', 'this . dictMap . put ( Arrays . asList ( elems [ 0 ] , elems [ 1 ] ) , Arrays . asList ( elems [ 2 ] ) ) ;', 'e . printStackTrace ( ) ;', 'if ( !keyValues . isEmpty ( ) ) {', 'public Map < List < String > , String > getDictMap ( ) {', 'final List < String > keys = this . getDictKeys ( word , postag ) ;', 'this . dictMap . put ( Arrays . asList ( elems [ 0 ] , elems [ 1 ] ) , elems [ 2 ] ) ;', 'allLemmas . add ( this . getAllLemmas ( tokens . get ( i ) , posTags . get ( i ) ) ) ;', 'lemma = keyValue ;', 'public Map < List < String > , List < String > > getDictMap ( ) {']","['e . printStackTrace ( ) ;', 'if ( Version . currentVersion ( ) . getMinor ( ) < 8 ) {', 'return new DefaultPOSContextGenerator ( 0 , getDictionary ( ) ) ;', 'if ( Version . currentVersion ( ) . getMinor ( ) > = 8 ) {', 'POSDictionarySerializer . register ( serializers ) ;', '}', 'System . err . println ( msg ) ;', 'return new ConfigurablePOSContextGenerator ( cacheSize , createFeatureGenerators ( ) ) ;', 'static class POSDictionarySerializer implements ArtifactSerializer < POSDictionary > {', '} ) ;']","['throw new TerminateToolException ( - 1 , ""IO error while loading resources"" , e ) ;', 'Assert . assertEquals ( 0 . 8044097625338349d , cv . getFMeasure ( ) . getFMeasure ( ) , 0 . 001d ) ;', 'public void evalAllTypesWithPOSNameFinder ( ) throws IOException {', 'catch ( IOException | URISyntaxException e ) {', '}', 'catch ( IOException e ) {', 'throw new IllegalStateException ( ""Failed reading from ner - default - features . xml file on classpath!"" ) ;', 'cv . evaluate ( filteredSamples , 5 ) ;', '@ Test', 'import java . nio . file . Path ;']","['searchIndex + = token . length ( ) ;', 'searchIndex + = TokenSample . DEFAULT SEPARATOR CHARS . length ( ) ;', 'if ( tokenIndex = = - 1 ) {', 'import java . io . IOException ;', 'package opennlp . tools . formats . conllu ;', 'int tokenIndex = text . indexOf ( token , searchIndex ) ;', 'ConlluSentence sentence = samples . read ( ) ;', 'throw new IOException ( String . format ( ""Failed to match token [ % s ] in sentence [ % s ] with text [ % s ] "" ,', 'if ( charAfterTokenIndex < text . length ( ) ) {', 'StringBuilder text = new StringBuilder ( sentence . getTextComment ( ) ) ;']","['Span span = ( ( SpanAnnotation ) ann ) . getSpan ( ) ;', 'names . add ( new Span ( nameBeginIndex , nameEndIndex , entity . getType ( ) ) ) ;', 'Span entitySpan = entity . getSpan ( ) ;', 'for ( Span sentence : sentDetector . sentPosDetect ( sample . getText ( ) ) ) {', 'public List < NameSample > parse ( BratDocument sample ) {', 'private SentenceDetector sentDetector ;', 'Span lastSentence = sentences . remove ( sentences . size ( ) - 1 ) ;', 'entityIdSet . remove ( ann . getId ( ) ) ;', 'import opennlp . tools . namefind . NameSample ;', 'for ( Span sentence : sentences ) {']","['sampleString . append ( line . substring ( textStart ) + "" "" ) ;', 'Set < Integer > selectedLines = new HashSet < > (', 'private int sampleCount ;', 'indexes . subList ( 0 , sentencesPerSample * numberOfSamples ) ) ;', 'private ObjectStream < String > lineStream ;', 'lineIterator = sentences . iterator ( ) ;', 'new LeipzigLanguageSampleStream ( new File ( "" / home / blue / opennlp - data - dir / leipzig - lang"" ) ,', 'try ( ObjectStream < String > lineStream = new PlainTextByLineStream (', 'public static void main ( String [ ] args ) throws Exception {', 'sampleString . append ( line . substring ( textStart ) + "" "" ) ;']","['private static final double LLThreshold = 0 . 0001 ;', 'public static final String LOG LIKELIHOOD THRESHOLD PARAM = ""llthreshold"" ;', 'if ( currLL - prevLL < LLThreshold ) {', 'public static final double LOG LIKELIHOOD THRESHOLD DEFAULT = 0 . 0001 ;', 'private double llThreshold = 0 . 0001 ;', 'LOG LIKELIHOOD THRESHOLD DEFAULT ) ;', 'if ( currLL - prevLL < llThreshold ) {', 'llThreshold = trainingParameters . getDoubleParameter ( LOG LIKELIHOOD THRESHOLD PARAM ,']","['import junit . framework . Assert ;', 'text . append ( String . join ( "" "" , lineBatch . getText ( ) ) ) . append ( "" "" ) ;', 'String [ ] tokens = tokenizer . tokenize ( text . toString ( ) ) ;', 'String [ ] tokens = tokenizer . tokenize ( String . join ( "" "" , line . getText ( ) ) ) ;', 'for ( String token : lineBatch . getText ( ) ) {', 'import org . junit . Assert ;', 'for ( String token : line . getText ( ) ) {', 'Parse [ ] parse = ParserTool . parseLine ( String . join ( "" "" , line . getText ( ) ) , parser , 1 ) ;', '}', 'Parse [ ] parse = ParserTool . parseLine ( textLine . toString ( ) , parser , 1 ) ;']","['jerseyServlet . setInitParameter ( ""com . sun . jersey . api . json . POJOMappingFeature"" , ""true"" ) ;', 'ResourceConfig config = new ResourceConfig ( NameFinderResource . class ) ;', 'try {', '"" [ - sentenceDetectorModel file ] namefinderFile | nameFinderURI"" ) ;', 'Server jettyServer = new Server ( serverPort ) ;', 'import java . net . URI ;', '}', 'System . out . println ( ""Usage : "" ) ;', 'ServletHolder jerseyServlet = context', 'import com . sun . net . httpserver . HttpServer ;']","['for ( int aoi = 0 ; aoi < numActiveOutcomes ; aoi + + ) {', 'System . arraycopy ( activeOutcomes , 0 , outcomePattern , 0 , numActiveOutcomes ) ;', 'outcomePattern [ aoi ] = activeOutcomes [ aoi ] ;', '}', 'for ( int k = 1 ; k < outcomePatterns [ i ] . length ; k + + ) {', 'System . arraycopy ( outcomePatterns [ i ] , 1 , outcomePattern , 0 , outcomePatterns [ i ] . length - 1 ) ;', 'outcomePattern [ k - 1 ] = outcomePatterns [ i ] [ k ] ;', '}', 'for ( int swi = 0 ; swi < wi ; swi + + ) {', 'System . arraycopy ( window , 0 , subWindow , 0 , wi ) ;']","['new CrossValidationPartitioner < TokenSample > ( samples , nFolds ) ;', 'CrossValidationPartitioner < TokenSample > partitioner = new CrossValidationPartitioner < > ( samples , nFolds ) ;', 'CrossValidationPartitioner < TokenSample > partitioner =', 'boolean useAlphaNumericOptimization ) throws IOException , ObjectStreamException {', 'Map < String , String > manifestInfoEntries = new HashMap < > ( ) ;', 'Map < String , String > manifestInfoEntries = new HashMap < String , String > ( ) ;', 'newTokens = new ArrayList < > ( ) ;', 'return Collections . < String > emptySet ( ) ;', 'tokProbs = new ArrayList < > ( 50 ) ;', 'tokProbs = new ArrayList < Double > ( 50 ) ;']","['model = TokenizerME . train ( trainingSampleStream , this . factory , params ) ;', 'TokenizerModel model = TokenizerME . train ( trainingSampleStream , this . factory , params ) ;', 'TokenizerModel model ;', 'private Boolean useAlphaNumericOptimization = null ;', 'private Boolean useAlphaNumericOptimization ;', 'factory ) ;', 'return new TokenizerModel ( maxentModel , manifestInfoEntries , factory ) ;', 'return new TokenizerModel ( maxentModel , manifestInfoEntries ,', 'return train ( samples , TokenizerFactory . create ( null , languageCode , null , useAlphaNumericOptimization , null ) ,', 'return train ( languageCode , samples , useAlphaNumericOptimization , ModelUtil . createDefaultTrainingParameters ( ) ) ;']","['this . dictMap . put ( Arrays . asList ( elems [ 0 ] , elems [ 2 ] ) , elems [ 1 ] ) ;', 'this . dictMap . put ( Arrays . asList ( elems [ 0 ] , elems [ 1 ] ) , elems [ 2 ] ) ;']","['void clearAdaptiveData ( ) ;', 'default void clearAdaptiveData ( ) { } ;', 'void updateAdaptiveData ( String [ ] tokens , String [ ] outcomes ) ;', 'default void updateAdaptiveData ( String [ ] tokens , String [ ] outcomes ) { } ;', 'public class AdditionalContextFeatureGenerator extends FeatureGeneratorAdapter {', 'public class AdditionalContextFeatureGenerator implements AdaptiveFeatureGenerator {', 'public class BigramNameFeatureGenerator extends FeatureGeneratorAdapter {', 'public class BigramNameFeatureGenerator implements AdaptiveFeatureGenerator {', 'public class BrownBigramFeatureGenerator extends FeatureGeneratorAdapter {', 'public class BrownBigramFeatureGenerator implements AdaptiveFeatureGenerator {']","['System . out . println ( new ChunkSample ( posSample . getSentence ( ) ,', 'String [ ] chunks = chunker . chunk ( posSample . getSentence ( ) , posSample . getTags ( ) ) ;', 'posSample . getTags ( ) , chunks ) . nicePrint ( ) ) ;', 'System . out . println ( new ChunkSample ( posSample . getSentence ( ) , posSample . getTags ( ) , chunks ) . nicePrint ( ) ) ;', 'String [ ] chunks = chunker . chunk ( posSample . getSentence ( ) ,', 'posSample . getTags ( ) ) ;', 'put ( entry . getTokens ( ) ) ;', 'isCaseSensitive = DictionarySerializer . create ( in , entry - > put ( entry . getTokens ( ) ) ) ;', '} ) ;', 'isCaseSensitive = DictionarySerializer . create ( in , new EntryInserter ( ) {']","['public class BasicContextGenerator implements ContextGenerator {', 'public class BasicContextGenerator implements ContextGenerator < String > {', 'public String [ ] getContext ( Object o ) {', 'public String [ ] getContext ( String o ) {', 'public String [ ] getContext ( Object o ) ;', 'public String [ ] getContext ( T o ) ;', 'public interface ContextGenerator {', 'public interface ContextGenerator < T > {', 'ContextGenerator cg = new BasicContextGenerator ( ) ;', 'ContextGenerator < String > cg = new BasicContextGenerator ( ) ;']","['import java . io . InputStream ;', 'import java . io . FileInputStream ;', 'List < Parse > producedParses = new ArrayList < Parse > ( ) ;', 'private List < Parse > parses = new ArrayList < > ( ) ;', 'private List < Parse > parses = new ArrayList < Parse > ( ) ;', 'throw new IOException ( e . getMessage ( ) , e ) ;', 'throw ( IOException ) new IOException ( e . getMessage ( ) ) . initCause ( e ) ;', 'List < Parse > producedParses = new ArrayList < > ( ) ;', 'private List < String > docs = new ArrayList < String > ( ) ;', 'private List < String > docs = new ArrayList < > ( ) ;']","['List < CmdLineTool > tools = new LinkedList < CmdLineTool > ( ) ;', 'toolLookupMap = new LinkedHashMap < > ( ) ;', 'toolLookupMap = new LinkedHashMap < String , CmdLineTool > ( ) ;', 'List < CmdLineTool > tools = new LinkedList < > ( ) ;', 'List < EvaluationMonitor < NameSample > > listeners = new LinkedList < EvaluationMonitor < NameSample > > ( ) ;', 'List < EvaluationMonitor < NameSample > > listeners = new LinkedList < > ( ) ;', 'TokenNameFinderFactory nameFinderFactory = null ;', 'TokenNameFinderFactory nameFinderFactory ;', '} catch ( InvalidFormatException e ) {', 'Map < String , Object > resources = new HashMap < > ( ) ;']","['return this . categorize ( text , Collections . < String , Object > emptyMap ( ) ) ;', 'return this . categorize ( text , Collections . emptyMap ( ) ) ;', 'public static interface Evaluator {', 'public interface Evaluator {', 'listener . correctlyClassified ( predicted , predicted ) ;', 'List < EvaluationMonitor < T > > listenersList = new ArrayList < > (', 'List < EvaluationMonitor < T > > listenersList = new ArrayList < EvaluationMonitor < T > > (', 'listener . correctlyClassified ( sample , predicted ) ;', '@ SafeVarargs']","['return ""reads an OpenNLP XML tag dictionary and outputs it in a tab separated file"" ;', 'return ""reads an OpenNLP XML tag dictionary and outputs it in a tabular file"" ;', 'return keys ;', '}', 'Map < List < String > , String > dictMap = new HashMap < > ( ) ;', 'if ( tag = = null )', 'lemma = keyValue ;', 'List < WordData > dictMap = dictLookup . lookup ( word . toLowerCase ( ) ) ;', 'if ( constantTags . contains ( postag ) ) {', 'String [ ] lemmas = new String [ toks . length ] ;']","['Version . currentVersion ( ) . getMinor ( ) ! = version . getMinor ( ) ) {', 'Version . currentVersion ( ) . getMinor ( ) - 2 > version . getMinor ( ) ) {', '! = version . getMinor ( ) ) {', '}', 'if ( Version . currentVersion ( ) . getMajor ( ) = = version . getMajor ( ) & & ( Version . currentVersion ( ) . getMinor ( ) - 2 )']","['public class POSDictionayBuilderTest extends TestCase {', 'import org . junit . Assert ;', 'import org . junit . Test ;', 'import opennlp . morfologik . lemmatizer . MorfologikLemmatizer ;', 'import opennlp . morfologik . lemmatizer . MorfologikLemmatizer ;', 'import org . junit . Test ;', 'import junit . framework . TestCase ;', 'public class POSDictionayBuilderTest {', 'assertNotNull ( ml ) ;', 'Assert . assertNotNull ( ml ) ;']","['import java . net . URI ;', 'import java . net . URI ;', 'import com . sun . net . httpserver . HttpServer ;', 'import java . util . List ;', 'import java . util . List ;', 'import java . io . File ;', 'import java . io . File ;', 'import java . util . Arrays ;', 'import java . util . Arrays ;', '. tokenizePos ( sentenceText ) ;']","['protected HashMap < T , Double > map = new HashMap < > ( ) ;', 'import java . util . Set ;', 'ArrayList < T > labelsToRemove = new ArrayList < > ( ) ;', 'import java . util . ArrayList ;', 'import java . util . * ;', 'import java . util . Map ;', 'protected Map < T , Double > map = new HashMap < > ( ) ;', 'import java . util . List ;', 'import java . util . HashMap ;', 'List < T > labelsToRemove = new ArrayList < > ( ) ;']","['public static SentenceDetector sentenceDetector = new NewlineSentenceDetector ( ) ; ;', 'public static SentenceDetector sentenceDetector = new NewlineSentenceDetector ( ) ;', 'return """" + SEPARATOR +', 'if ( valid ( word , tag ) ) {', 'if ( valid ( word , tag ) ) {', 'return """" + SEPARATOR +', 'import static org . junit . Assert . * ;', 'import static org . junit . Assert . assertTrue ;', 'import static org . junit . Assert . assertNull ;', 'import static org . junit . Assert . assertEquals ;']","['return pmap . equals ( model . pmap ) & & Objects . deepEquals ( outcomeNames , model . outcomeNames )', 'return true ;', 'return Objects . hash ( pmap , Arrays . hashCode ( outcomeNames ) , evalParams , prior ) ;', 'AbstractModel model = ( AbstractModel ) obj ;', 'import java . util . Objects ;', '}', 'public boolean equals ( Object obj ) {', '& & evalParams . equals ( model . evalParams ) & & Objects . equals ( prior , model . prior ) ;', 'return false ;', 'public int hashCode ( ) {']","['} else {', 'return Objects . hash ( Arrays . hashCode ( getSentence ( ) ) ,', '} else if ( obj instanceof ChunkSample ) {', 'import java . util . Objects ;', 'return false ;', 'if ( obj instanceof ChunkSample ) {', '}', '}', 'Arrays . hashCode ( getTags ( ) ) , Arrays . hashCode ( getPreds ( ) ) ) ;', 'return false ;']","['StreamFactoryRegistry . getFactory ( type , StreamFactoryRegistry . DEFAULT FORMAT )', 'StreamFactoryRegistry . getFactory ( type , StreamFactoryRegistry . DEFAULT FORMAT ) . getParameters ( ) ) ;', 'ArgumentParser . createUsage ( paramsClass , factory . < P > getParameters ( ) ) ;', 'ArgumentParser . createUsage ( paramsClass , factory . getParameters ( ) ) ;', '. < P > getParameters ( ) ) ;', 'SequenceClassificationModel model = doTrain ( events ) ;', 'SequenceClassificationModel < String > model = doTrain ( events ) ;', 'public abstract SequenceClassificationModel doTrain ( SequenceStream events )', 'public final SequenceClassificationModel < String > train ( SequenceStream events ) throws IOException {', 'public final SequenceClassificationModel train ( SequenceStream events ) throws IOException {']","['indexer . index ( eventStream ) ;', 'Assert . assertNotNull ( GIS . trainModel ( eventStream , 10 , 1 , false , false ) ) ;', '@ Test', 'List < Event > events = new ArrayList < > ( ) ;', '}', 'for ( int i = 0 ; i < cntx . length ; i + + ) {', 'public void testGISTrainSignature2 ( ) throws Exception {', 'public void testGISTrainSignature1 ( ) throws Exception {', 'import opennlp . tools . util . ObjectStream ;', 'Assert . assertNotNull ( GIS . trainModel ( eventStream , 10 , 1 ) ) ;']","['final long endTime = System . currentTimeMillis ( ) ;', 'final long startTime = System . currentTimeMillis ( ) ;', 'System . out . format ( ""Execution time : % . 3f seconds"" , ( endTime - startTime ) / 1000 . 0 ) ;']","['System . err . println ( ""Usage : GISModel modelname < contexts"" ) ;', 'import java . text . DecimalFormat ;', '}', 'import java . io . BufferedReader ;', 'DecimalFormat df = new java . text . DecimalFormat ( "" . ###"" ) ;', 'System . out . print ( "" [ "" + m . getOutcome ( oi ) + "" "" + df . format ( dist [ oi ] )', 'String [ ] context = line . split ( "" "" ) ;', 'import java . io . File ;', 'System . out . println ( ) ;', 'new File ( args [ 0 ] ) ) . getModel ( ) ;']","['protected AbstractCrossValidatorTool ( Class < T > sampleType , Class < P > params ) {', 'protected AbstractCrossValidatorTool ( Class < T > sampleType , Class < P > params ) {', '}', '}', 'package opennlp . tools . cmdline ;', 'package opennlp . tools . cmdline ;', 'super ( sampleType , params ) ;', 'super ( sampleType , params ) ;', 'public abstract class AbstractCrossValidatorTool < T , P > extends AbstractTrainerTool < T , P > {', 'public abstract class AbstractCrossValidatorTool < T , P > extends AbstractTrainerTool < T , P > {']","['overrideDefaultType ( names ) ;', 'n . getProb ( ) ) ;', 'n . getProb ( ) ) ;', 'private void overrideType ( Span [ ] names ) {', '}', 'overrideType ( names ) ;', 'if ( Objects . isNull ( n . getType ( ) ) ) {', 'names [ i ] = new Span ( n . getStart ( ) , n . getEnd ( ) , this . defaultType ,', 'private void overrideDefaultType ( Span [ ] names ) {', 'names [ i ] = new Span ( n . getStart ( ) , n . getEnd ( ) , this . defaultType ,']","['Path textLemmaDictionary = Paths . get ( "" / Users / wcolen / git / opennlp / opennlp - morfologik - addon / src / test / resources / dictionaryWithLemma . txt"" ) ;', 'Path textLemmaDictionary = Paths . get (', '"" / Users / wcolen / git / opennlp / opennlp - morfologik - addon / src / test / resources / dictionaryWithLemma . txt"" ) ;', 'assertEquals ( "" [ NP Forecasts NNS ] [ PP for IN ] [ NP the DT trade NN figures NNS ] "" +', 'assertEquals ( "" [ NP Forecasts NNS ] [ PP for IN ] [ NP the DT trade NN figures NNS ] ""', '"" [ VP range VBP ] [ ADVP widely RB ] . . "" , sample . nicePrint ( ) ) ;', '+ "" [ VP range VBP ] [ ADVP widely RB ] . . "" , sample . nicePrint ( ) ) ;', '"" [ VP range VBP ] [ ADVP widely RB ] , , [ NP Forecasts NNS ] [ PP for IN ] [ NP the DT trade NN figures NNS ] "" +', '+ "" [ NP the DT trade NN figures NNS ] ""', '+ "" [ VP range VBP ] [ ADVP widely RB ] , , [ NP Forecasts NNS ] [ PP for IN ] ""']","['try {', 'System . out . println ( ""done . "" ) ;', '}', 'try ( FileEventStream fes = new FileEventStream ( tmp ) ) {', 'System . out . print ( ""Indexing . . . "" ) ;', 'System . out . print ( ""Sorting and merging events . . . "" ) ;', 'eventsToCompare = index ( numEvents , fes , predicateIndex ) ;', 'tmp . deleteOnExit ( ) ;', 'sortAndMerge ( eventsToCompare , sort ) ;', 'tmp . delete ( ) ;']","['System . out . format ( ""Execution time : % . 3f seconds"" , ( endTime - startTime ) / 1000 . 0 ) ;', 'System . out . format ( ""Execution time : % . 3f seconds \\ n"" , ( endTime - startTime ) / 1000 . 0 ) ;']","['}', 'LetsmtSentenceStreamFactory . registerFactory ( ) ;', 'import opennlp . tools . formats . letsmt . LetsmtSentenceStreamFactory ;', '}', 'import opennlp . tools . sentdetect . SentenceSample ;', 'this . detokenizer = Objects . requireNonNull ( detokenizer ) ;', 'sentenceTexts . add ( sample . getDocument ( ) . substring ( sentenceSpan . getStart ( ) , sentenceSpan . getEnd ( ) ) ) ;', 'documentText . append ( detokenizer . detokenize ( tokens , null ) ) ;', '}', 'import opennlp . tools . tokenize . Detokenizer ;']","['@ Deprecated', '@ Deprecated', '@ Deprecated', '@ Deprecated', '@ Deprecated', '@ Deprecated', '}', '@ Deprecated', '}', '@ Deprecated']","['StringBuffer sentenceString = new StringBuffer ( tokens . length * 10 ) ;', 'StringBuilder sentenceString = new StringBuilder ( tokens . length * 10 ) ;', 'List < Span > tokens = new ArrayList < Span > ( ) ;', 'List < Span > tokens = new ArrayList < > ( ) ;', 'public void setUp ( ) {', 'Assert . assertTrue ( spanList . contains ( mgrsSpan1 ) ) ;', '@ Test', 'public void testMgrs ( ) throws Exception {', '}', 'regexNameFinder = RegexNameFinderFactory . getDefaultRegexNameFinders (']","['public void testFrench ( ) {', 'assertEquals ( stemmer . stem ( ""andedrägt"" ) , ""andedräg"" ) ;', '@ Test', 'assertEquals ( stemmer . stem ( ""esiintyviätaiteilijaystäviään"" ) ,', 'SnowballStemmer stemmer = new SnowballStemmer ( ALGORITHM . DUTCH ) ;', 'assertEquals ( stemmer . stem ( ""vliegtuigtransport"" ) , ""vliegtuigtransport"" ) ;', 'assertEquals ( stemmer . stem ( ""aché"" ) , ""aché"" ) ;', '}', 'SnowballStemmer stemmer = new SnowballStemmer ( ALGORITHM . FINNISH ) ;', 'public class SnowballStemmerTest {']","['crossEval ( ModelUtil . createDefaultTrainingParameters ( ) , headRules , 0 . 937987617163142d ) ;', 'params . put ( ""chunker . Threads"" , ""4"" ) ;', 'params . put ( ""tagger . Threads"" , ""4"" ) ;', 'crossEval ( params , headRules , 0 . 937987617163142d ) ;', 'params . put ( ""build . Threads"" , ""4"" ) ;', 'TrainingParameters params = ModelUtil . createDefaultTrainingParameters ( ) ;', 'params . put ( ""check . Threads"" , ""4"" ) ;']","['factory = getStreamFactory ( format ) ;', 'return new TerminateToolException ( - 1 , "" \\ n \\ nERROR : Not enough training data \\ n"" +', 'import opennlp . tools . util . ObjectStream ;', 'import java . io . IOException ;', 'params = ArgumentParser . parse (', '""The provided training data is not sufficient to create enough events to train a model . \\ n"" +', 'String [ ] fargs = ArgumentParser . filter ( args , factory . getParameters ( ) ) ;', '""be some fundamental problem with the training data itself . "" ) ;', 'protected P params ;', 'return new TerminateToolException ( - 1 , ""IO error while reading training data or indexing data : "" +']","['import opennlp . tools . formats . moses . MosesSentenceSampleStreamFactory ;', 'MosesSentenceSampleStreamFactory . registerFactory ( ) ;', 'sentenceSpans . add ( new Span ( begin , end ) ) ;', 'import opennlp . tools . sentdetect . SentenceSample ;', 'import opennlp . tools . sentdetect . EmptyLinePreprocessorStream ;', '}', 'StringBuilder sentencesString = new StringBuilder ( ) ;', 'return new SentenceSample ( sentencesString . toString ( ) ,', 'import opennlp . tools . util . ObjectStream ;', 'sentence = sentence . trim ( ) ;']","['@ Deprecated', '@ Deprecated', '@ Deprecated', '@ Deprecated', '@ Deprecated', '@ Deprecated', '@ Deprecated', '@ Deprecated', '@ Deprecated', '@ Deprecated']","['@ Deprecated', 'import opennlp . tools . ml . maxent . IntegerPool ;', 'l . add ( i ) ;', 'l . add ( INT POOL . get ( i ) ) ;', 'protected static final IntegerPool INT POOL = new IntegerPool ( 500 ) ;']","['return trainModel ( iterations , indexer , true , smoothing , null , 0 ) ;', 'if ( sigma > 0 ) {', 'boolean printMessagesWhileTraining , boolean smoothing , Prior modelPrior ,', 'Prior modelPrior ) {', 'public static double SMOOTHING OBSERVATION = 0 . 1 ;', 'boolean printMessagesWhileTraining , boolean smoothing ,', 'public static final String SMOOTHING PARAM = ""smoothing"" ;', 'private static final double SMOOTHING OBSERVATION = 0 . 1 ;', 'model = trainModel ( iterations , indexer , printMessages , smoothing , null , cutoff , threads ) ;', 'private static final boolean SMOOTHING DEFAULT = false ;']","['for ( Class < T > proxyInterface : proxyInterfaces ) {', 'private static void checkProxyInterfaces ( Class < ? > . . . proxyInterfaces ) {', 'public static < T > String validateArgumentsLoudly ( String args [ ] , Class < T > . . . argProxyInterfaces ) {', 'for ( Class < ? > proxyInterface : proxyInterfaces ) {', 'public static < T > boolean validateArguments ( String args [ ] , Class < T > . . . argProxyInterfaces ) {', 'public static String validateArgumentsLoudly ( String args [ ] , Class < ? > argProxyInterface ) {', '@ SuppressWarnings ( { ""unchecked"" } )', 'public static String validateArgumentsLoudly ( String args [ ] , Class < ? > . . . argProxyInterfaces ) {', 'private static < T > void checkProxyInterfaces ( Class < T > . . . proxyInterfaces ) {', 'public static String createUsage ( Class < ? > . . . argProxyInterfaces ) {']","['protected void display ( String s ) {', 'System . out . print ( s ) ;', '}', 'protected boolean printMessages ;', 'if ( printMessages ) {', 'printMessages = trainingParameters . getBooleanParameter ( VERBOSE PARAM , VERBOSE DEFAULT ) ;', 'this . verbose = verbose ;', 'this . printMessages = printMessages ;', 'this ( M DEFAULT , verbose ) ;', 'public QNTrainer ( boolean printMessages ) {']","['+ ( ( 1 . 0 - ( numfeats [ oid ] / model', 'public GISModel ( Context [ ] params , String [ ] predLabels , String [ ] outcomeNames ) {', '}', 'public GISModel ( Context [ ] params , String [ ] predLabels , String [ ] outcomeNames , Prior prior ) {', '. exp ( prior [ oid ]', 'this ( params , predLabels , outcomeNames , 1 , 0 ,', '} else {', '@ Deprecated', '* model . getConstantInverse ( )', '}']","['@ OptionalParameter ( defaultValue = ""default"" )', '@ OptionalParameter']","['extends AbstractEvaluatorTool < LemmaSample , EvalToolParams > {', 'extends AbstractEvaluatorTool < LemmaSample , LemmatizerEvaluatorTool . EvalToolParams > {', 'import opennlp . tools . cmdline . lemmatizer . LemmatizerEvaluatorTool . EvalToolParams ;', 'List < File > inputDirectoryList = new ArrayList < File > ( dirs . length ) ;', 'private Stack < File > textFiles = new Stack < > ( ) ;', 'private Stack < File > textFiles = new Stack < File > ( ) ;', 'private Stack < File > directories = new Stack < > ( ) ;', 'private Stack < File > directories = new Stack < File > ( ) ;', 'List < File > inputDirectoryList = new ArrayList < > ( dirs . length ) ;', 'List < String > sentence = new ArrayList < String > ( ) ;']","['if ( modelName = = null )', 'import java . util . Objects ;', 'throw new IllegalArgumentException ( ""modelName must not be null!"" ) ;', 'this . modelName = Objects . requireNonNull ( modelName , ""modelName must not be null!"" ) ;', 'this . modelName = modelName ;', 'throw new IllegalArgumentException ( ""key must not be null"" ) ;', 'import java . util . Objects ;', 'if ( value = = null ) {', 'Objects . requireNonNull ( key , ""key must not be null"" ) ;', '}']","['tokenizerCrossEval ( getPerceptronZeroCutoff ( ) , 0 . 9994887308380267d ) ;', 'public void evalPortugueseChunkerGisMultipleThreads ( ) throws IOException {', 'public void evalPortugueseTokenizer ( ) throws IOException {', '@ Test', 'PerceptronTrainer . PERCEPTRON VALUE ) ;', 'public void evalPortugueseSentenceDetectorNaiveBayes ( ) throws IOException {', 'params . put ( TrainingParameters . CUTOFF PARAM , ""0"" ) ;', 'public void evalPortugueseTokenizerMaxentQn ( ) throws IOException {', 'public void evalPortugueseChunker ( ) throws IOException {', '}']","['List < String > toks = new ArrayList < String > ( ) ;', 'return null ;', 'return null ;', 'List < String > preds = new ArrayList < > ( ) ;', 'List < String > preds = new ArrayList < String > ( ) ;', 'List < String > tags = new ArrayList < > ( ) ;', '}', 'List < String > toks = new ArrayList < > ( ) ;', 'else {', 'List < String > tags = new ArrayList < String > ( ) ;']","['this . featureGenerators = featureGenerators ;', 'try {', 'public DoccatFactory ( final FeatureGenerator [ ] featureGenerators ) {', 'DoccatFactory . class , subclassName ) ;', '}', '+ "" . The initialization throw an exception . "" ;', 'public static DoccatFactory create ( String subclassName , FeatureGenerator [ ] featureGenerators )', 'if ( subclassName = = null ) {', 'e . printStackTrace ( ) ;', '} catch ( Exception e ) {']","['super ( new ObjectDataReader ( ois ) ) ;', 'package opennlp . tools . ml . maxent . io ;', 'public class ObjectGISModelReader extends GISModelReader {', 'import java . io . ObjectInputStream ;', '@ Deprecated', '}', 'public ObjectGISModelReader ( ObjectInputStream ois ) {', 'protected ObjectInputStream input ;', 'import opennlp . tools . ml . model . ObjectDataReader ;', 'package opennlp . tools . ml . maxent . io ;']","['public void evalDanishhMaxentGis ( ) throws IOException {', '""conllx / data / dutch / alpino / test / dutch alpino test . conll"" ) , 0 . 9025962399283796d ) ;', 'public void evalPortuguesehMaxentQn ( ) throws IOException {', 'public void evalPortugueseMaxentGis ( ) throws IOException {', '""conllx / data / dutch / alpino / test / dutch alpino test . conll"" ) , 0 . 9174574753804834d ) ;', 'public void evalDanishMaxentQn ( ) throws IOException {', '""conllx / data / swedish / talbanken05 / test / swedish talbanken05 test . conll"" ) , 0 . 9275106082036775d ) ;', 'public void evalPortugueseMaxentQn ( ) throws IOException {', 'public void evalPortuguesehMaxentGis ( ) throws IOException {', '""conllx / data / danish / ddt / test / danish ddt test . conll"" ) , 0 . 9456596035543404d ) ;']","['factoryMap . put ( ""docbegin"" , new DocumentBeginFeatureGenerator ( ) ) ;', 'return new DocumentBeginFeatureGenerator ( ) ;', 'return new PreviousMapFeatureGenerator ( ) ;', 'DocumentBeginFeatureGeneratorFactory . register ( factories ) ;', 'DocumentBeginFeatureGenerator . register ( factories ) ;', 'static class DocumentBeginFeatureGeneratorFactory implements XmlFeatureGeneratorFactory {', 'static class DocumentBeginFeatureGenerator implements XmlFeatureGeneratorFactory {', 'factoryMap . put ( ""docbegin"" , new DocumentBeginFeatureGeneratorFactory ( ) ) ;']","['/ /', 'List < Span > sentences = new ArrayList < > ( ) ;', 'Span sentences [ ] = sentDetector . sentPosDetect ( sample . getText ( ) ) ;', 'conflictingName . getStart ( ) < sentence . getStart ( ) ) {', 'List < NameSample > samples = new ArrayList < > ( sentences . length ) ;', 'for ( int i = span . getStart ( ) ; i < span . getEnd ( ) ; i + + ) {', 'if ( sentences . size ( ) > 0 & & conflictingName ! = null & &', 'Span span = ( ( SpanAnnotation ) ann ) . getSpan ( ) ;', 'sentences . add ( sentence ) ;', '}']","['public static final String EVENT TYPE = ""Event"" ;', 'typeToClassMap . put ( typeName , AnnotationConfiguration . EVENT TYPE ) ;', 'break ;', 'case ""events"" :', 'this . type = type ;', 'this . type = Objects . requireNonNull ( type ) ;', 'this . id = id ;', 'import java . util . Objects ;', 'this . id = Objects . requireNonNull ( id ) ;', 'private final Map < String , BratAnnotationParser > parsers = new HashMap < > ( ) ;']","['import java . nio . charset . Charset ;', 'this . lineStream = new PlainTextByLineStream ( in , StandardCharsets . UTF 8 ) ;', 'this . lineStream = new PlainTextByLineStream ( in , Charset . forName ( ""UTF - 8"" ) ) ;', 'import java . nio . charset . StandardCharsets ;', 'this . lineStream = new PlainTextByLineStream ( in , ""UTF - 8"" ) ;', 'this . lineStream = new PlainTextByLineStream ( in , StandardCharsets . UTF 8 ) ;', 'import java . nio . charset . StandardCharsets ;', 'this . lineStream = new PlainTextByLineStream ( in , ""UTF - 8"" ) ;', 'this . lineStream = new PlainTextByLineStream ( in , StandardCharsets . UTF 8 ) ;', 'import java . nio . charset . StandardCharsets ;']","['import opennlp . tools . cmdline . languagemodel . LanguageModelTool ;', 'tools . add ( new LanguageModelTool ( ) ) ;', 'System . err . println ( ""Error : "" + e . getLocalizedMessage ( ) ) ;', 'import opennlp . tools . util . StringList ;', 'try {', 'new SystemInputStreamFactory ( ) ,', 'probability = nGramLanguageModel', '}', 'perfMon = new PerformanceMonitor ( System . err , ""lm"" ) ;', '+ ""\' has a probability of "" + probability ) ;']","['public AbstractEventTrainer ( TrainingParameters parameters ) {', 'import opennlp . tools . util . TrainingParameters ;', 'super ( parameters ) ;', '}', 'public AbstractTrainer ( TrainingParameters parameters ) {', 'init ( parameters , new HashMap < > ( ) ) ;', '@ Deprecated', '}', 'super ( parameters ) ;', 'public GIS ( TrainingParameters parameters ) {']","['}', 'public class Dictionary implements Iterable < StringList > , SerializableArtifact {', 'this ( in ) ;', 'isCaseSensitive = DictionaryEntryPersistor . create ( in , entry - > put ( entry . getTokens ( ) ) ) ;', 'Iterator < Entry > entryIterator = new Iterator < Entry > ( )', 'DictionaryEntryPersistor . serialize ( out , entryIterator , isCaseSensitive ) ;', 'public Dictionary ( InputStream in , boolean caseSensitive ) throws IOException {', 'public Class < ? > getArtifactSerializerClass ( ) {', 'DictionarySerializer . serialize ( out , entryIterator , isCaseSensitive ) ;', 'import opennlp . tools . util . model . DictionarySerializer ;']","['System . err . println ( ""Error : "" + e . getLocalizedMessage ( ) ) ;', 'System . err . println ( ""Error : "" + e . getLocalizedMessage ( ) ) ;', 'try {', 'try {', 'new SystemInputStreamFactory ( ) ,', 'new SystemInputStreamFactory ( ) ,', 'probability = nGramLanguageModel', 'probability = nGramLanguageModel', '}', '}']","['import opennlp . tools . cmdline . languagemodel . LanguageModelTool ;', 'import opennlp . tools . cmdline . languagemodel . NGramLanguageModelTool ;', 'tools . add ( new LanguageModelTool ( ) ) ;', 'tools . add ( new NGramLanguageModelTool ( ) ) ;', 'NGramLanguageModel nGramLanguageModel = new NGramLanguageModel (', 'StringList sample = new StringList ( tokens ) ;', 'return ""gives the probability of a sequence of tokens in a language model"" ;', 'System . out . println ( sample + "" - > prob : "" + probability + "" , next : "" + predicted ) ;', '. calculateProbability ( new StringList ( tokens ) ) ;', 'return ""gives the probability and most probable next token ( s ) of a sequence of tokens in a "" +']","['@ OptionalParameter ( defaultValue = ""en"" )', '@ OptionalParameter ( defaultValue = ""eng"" )', 'if ( ""en"" . equals ( params . getLang ( ) ) ) {', 'if ( ""en"" . equals ( params . getLang ( ) ) | | ""eng"" . equals ( params . getLang ( ) ) ) {', 'else if ( ""es"" . equals ( params . getLang ( ) ) ) {', 'else if ( ""es"" . equals ( params . getLang ( ) ) | | ""spa"" . equals ( params . getLang ( ) ) ) {', 'return ""en"" ;', 'return ""eng"" ;', 'if ( ""en"" . equals ( params . getLang ( ) ) ) {', 'else if ( ""deu"" . equals ( params . getLang ( ) ) ) {']","['throw new InsufficientTrainingDataException ( ""Training data must contain more than one outcome"" ) ;', 'import opennlp . tools . util . InsufficientTrainingDataException ;', 'if ( indexer . getOutcomeLabels ( ) . length < = 1 ) {', '}']","['description = ""if true will print detailed FMeasure results . "" )', '@ Deprecated', '@ OptionalParameter ( defaultValue = ""false"" )', 'description = ""if true ( default ) will print detailed FMeasure results . "" )', '@ OptionalParameter ( defaultValue = ""true"" )']","['readDouble ( ) ;', 'readInt ( ) ;', 'writeInt ( 1 ) ;', 'writeDouble ( 1 ) ;']","['minimalSentenceLength = length ;', 'private double getTokenAccuracy ( String token ) {', 'this . categoryAccuracy = new HashMap < > ( ) ;', 'String category ;', 'for ( int i = 0 ; i < size ; i + + ) {', 'private double getAverageSentenceSize ( ) {', 'MessageFormat . format ( "" { 0 , number , # . ## % } "" , acc ) ) )', 'if ( maximumSentenceLength < length ) {', 'private SortedSet < String > getConfusionMatrixTagset (', 'SortedSet < String > labels = getConfusionMatrixTagset ( t ) ;']","['if ( sort ) System . out . println ( ""done . Reduced "" + numEvents + "" events to "" + numUniqueEvents + "" . "" ) ;', 'if ( sort ) display ( ""done . Reduced "" + numEvents + "" events to "" + numUniqueEvents + "" . \\ n"" ) ;', 'System . out . println ( ""done . "" ) ;', '+ Arrays . asList ( ev . getContext ( ) ) + "" \\ n"" ) ;', 'System . out . print ( ""Sorting and merging events . . . "" ) ;', 'display ( ""done . \\ n"" ) ;', 'System . out . println ( ""Indexing events using cutoff of "" + cutoff + "" \\ n"" ) ;', 'display ( ""done . "" + events . size ( ) + "" events \\ n"" ) ;', 'System . out . println ( ""Done indexing . "" ) ;', 'display ( ""Done indexing . \\ n"" ) ;']","['@ Deprecated', '@ Deprecated', '@ Deprecated', '@ Deprecated', '@ Deprecated']","['static class ByteArraySerializer implements ArtifactSerializer < byte [ ] > {', 'import opennlp . tools . util . model . ByteArraySerializer ;', 'public void serialize ( byte [ ] artifact , OutputStream out ) throws IOException {', 'out . write ( artifact ) ;', '}', 'return ModelUtil . read ( in ) ;', 'public byte [ ] create ( InputStream in ) throws IOException {', 'import java . io . OutputStream ;', 'import opennlp . tools . util . model . ModelUtil ;', 'public void serialize ( byte [ ] artifact , OutputStream out ) throws IOException {']","['EventTrainer trainer = TrainerFactory . getEventTrainer ( mlParams . getSettings ( ) ,', 'TrainerType trainerType = TrainerFactory . getTrainerType ( mlParams ) ;', 'TrainerType trainerType = TrainerFactory . getTrainerType ( mlParams . getSettings ( ) ) ;', 'mlParams , manifestInfoEntries ) ;', 'mlParams . getSettings ( ) , manifestInfoEntries ) ;', 'EventTrainer trainer = TrainerFactory . getEventTrainer ( mlParams ,', 'if ( !TrainerFactory . isValid ( params . getSettings ( ) ) ) {', 'if ( !TrainerFactory . isValid ( params ) ) {', 'TrainerFactory . TrainerType trainerType = TrainerFactory . getTrainerType ( params . getSettings ( ) ) ;', 'TrainerFactory . TrainerType trainerType = TrainerFactory . getTrainerType ( params ) ;']","['import opennlp . tools . formats . conllu . ConlluLemmaSampleStreamFactory ;', 'ConlluPOSSampleStreamFactory . registerFactory ( ) ;', 'ConlluLemmaSampleStreamFactory . registerFactory ( ) ;', 'import opennlp . tools . formats . conllu . ConlluPOSSampleStreamFactory ;', 'package opennlp . tools . formats . conllu ;', 'ConlluLemmaSampleStream ( ObjectStream < ConlluSentence > samples , ConlluTagset tagset ) {', 'public LemmaSample read ( ) throws IOException {', '}', 'List < String > tokens = new ArrayList < > ( ) ;', '@ Override']","['mlParams = ModelUtil . createDefaultTrainingParameters ( ) ;', 'import opennlp . tools . util . TrainingParameters ;', 'import opennlp . tools . util . model . ModelUtil ;', 'mlParams = new TrainingParameters ( ) ;', 'mlParams = ModelUtil . createDefaultTrainingParameters ( ) ;', 'import opennlp . tools . util . TrainingParameters ;', 'mlParams = new TrainingParameters ( ) ;', 'trainParams . putIfAbsent ( TrainingParameters . CUTOFF PARAM , ""0"" ) ;', 'import opennlp . tools . ml . perceptron . PerceptronTrainer ;', 'trainParams . putIfAbsent ( TrainingParameters . ITERATIONS PARAM , ""300"" ) ;']","['addToReport ( ""Training - Eventhash"" , hses . calculateHashSum ( ) . toString ( 16 ) ) ;', '@ Test', 'EventTrainer trainer = TrainerFactory . getEventTrainer ( trainParams , reportMap ) ;', 'trainParams . put ( ""UseSkippedAveraging"" , Boolean . toString ( true ) ) ;', 'reportMap . containsKey ( ""Training - Eventhash"" ) ) ;', 'Map < String , String > reportMap = new HashMap < > ( ) ;', 'import java . util . Map ;', 'TrainingParameters trainParams = new TrainingParameters ( ) ;', '}', 'public void verifyReportMap ( ) throws IOException {']","['return new PrefixFeatureGenerator ( ) ;', 'return new SuffixFeatureGenerator ( suffixLength ) ;', 'return new SuffixFeatureGenerator ( ) ;', 'if ( !Objects . equals ( attribute , """" ) ) {', '}', 'prefixLength = Integer . parseInt ( attribute ) ;', 'return new PrefixFeatureGenerator ( prefixLength ) ;', 'int suffixLength = SuffixFeatureGenerator . DEFAULT MAX LENGTH ;', 'int prefixLength = PrefixFeatureGenerator . DEFAULT MAX LENGTH ;', 'String attribute = generatorElement . getAttribute ( ""length"" ) ;']","['}', '}', '}', '}', '}', '}', '}', '}', '}', '}']","['return ( ( double ) count ) / ( ( double ) getCount (', 'double countM1 = getCount ( nMinusOneToken ) ;', 'this ( in , DEFAULT N , DEFAULT K ) ;', 'StringList nMinusOneToken = NGramUtils . getNMinusOneTokenFirst ( ngram ) ;', 'private double getStupidBackoffProbability ( StringList ngram ,', 'if ( countM1 = = 0d ) {', 'getLaplaceSmoothingProbability ( ngram , nMinusOneToken ) ) ;', 'return 0 . 4 * stupidBackoff ( NGramUtils . getNMinusOneTokenLast ( ngram ) ) ;', 'StringList nMinusOneToken ) {', '}']","['public void testContinueAfterOther ( ) {', 'inputSequence = new String [ ] { ""PersonA"" , ""PersonB"" , ""something"" } ;', 'inputSequence = new String [ ] { ""Mike"" , ""is"" , ""here"" } ;', '@ Test', '}', 'outcomesSequence = new String [ ] { OTHER , START B } ;', 'String [ ] inputSequence = new String [ ] { ""FirstName"" , ""MidleName"" , ""LastName"" , ""is"" , ""a"" , ""long"" , ""name"" } ;', 'private static String CONTINUE A = ""TypeA - "" + NameFinderME . CONTINUE ;', '@ Ignore', 'inputSequence = new String [ ] { ""something"" , ""PersonA"" , ""OrganizationA"" } ;']","['Version . currentVersion ( ) . getMinor ( ) - 2 > version . getMinor ( ) ) {', 'Version . currentVersion ( ) . getMinor ( ) - 3 > version . getMinor ( ) ) {']","['} else if ( outcomesSequence [ li ] . endsWith ( NameFinderME . CONTINUE ) ) {', 'outcomesSequence [ li ] . endsWith ( NameFinderME . START ) ) {', '} else if ( outcomesSequence [ li ] . endsWith ( NameFinderME . CONTINUE ) | |', 'eval ( maxentModel , dutchTestAFile , LANGUAGE . NL , combinedType , 0 . 6728164867517175d ) ;', 'eval ( maxentModel , dutchTestBFile , LANGUAGE . NL , combinedType , 0 . 6984085910208306d ) ;', 'eval ( maxentModel , spanishTestBFile , LANGUAGE . ES , combinedType , 0 . 7583580194667795d ) ;', 'eval ( maxentModel , dutchTestAFile , LANGUAGE . NL , combinedType , 0 . 6673209028459275d ) ;', 'eval ( maxentModel , spanishTestAFile , LANGUAGE . ES , combinedType , 0 . 706765154179857d ) ;', 'eval ( maxentModel , spanishTestBFile , LANGUAGE . ES , combinedType , 0 . 7576868829337094d ) ;', 'eval ( maxentModel , dutchTestBFile , LANGUAGE . NL , combinedType , 0 . 6985893619774816d ) ;']","['public interface ChunkerContextGenerator extends BeamSearchContextGenerator < String > {', 'import opennlp . tools . util . TokenTag ;', 'public interface ChunkerContextGenerator extends BeamSearchContextGenerator < TokenTag > {', 'public SequenceValidator < String > getSequenceValidator ( ) {', 'import opennlp . tools . util . TokenTag ;', 'public SequenceValidator < TokenTag > getSequenceValidator ( ) {', 'protected SequenceClassificationModel < String > model ;', 'protected SequenceClassificationModel < TokenTag > model ;', 'return model . bestSequences ( DEFAULT BEAM SIZE , sentence , new Object [ ] { tags } , minSequenceScore ,', 'new Object [ ] { } , contextGenerator , sequenceValidator ) ;']","['tokenizer , featureGenerators ) ;', 'DoccatFactory factory = DoccatFactory . create ( params . getFactory ( ) , featureGenerators ) ;', 'Tokenizer tokenizer = DoccatTrainerTool . createTokenizer ( params', 'DoccatFactory factory = DoccatFactory . create ( params . getFactory ( ) ,', '. getTokenizer ( ) ) ;', 'import opennlp . tools . tokenize . Tokenizer ;', 'String category = doccat . getBestCategory ( prob ) ;', 'String [ ] tokens = WhitespaceTokenizer . INSTANCE . tokenize ( document ) ;', 'return ""learnable document categorizer"" ;', 'String category = documentCategorizerME . getBestCategory ( prob ) ;']","['public GIS ( ) {', 'public static GISModel trainModel ( ObjectStream < Event > eventStream , boolean smoothing )', 'trainer . setGaussianSigma ( sigma ) ;', 'return true ;', 'return trainModel ( eventStream , 100 , 0 , false , PRINT MESSAGES ) ;', 'public static final String MAXENT VALUE = ""MAXENT"" ;', 'public static GISModel trainModel ( ObjectStream < Event > eventStream ) throws IOException {', 'throws IOException {', '}', 'return ! ( algorithmName ! = null & & ! ( MAXENT VALUE . equals ( algorithmName ) ) ) ;']","['GIS trainer = new GIS ( ) ;', 'ModelUtil . createDefaultTrainingParameters ( ) , null ) ;', 'import opennlp . tools . ml . maxent . GIS ;', 'import opennlp . tools . ml . EventTrainer ;', 'import opennlp . tools . ml . TrainerFactory ;', 'EventTrainer trainer = TrainerFactory . getEventTrainer (', 'import opennlp . tools . util . model . ModelUtil ;', 'GIS trainer = new GIS ( ) ;', 'ModelUtil . createDefaultTrainingParameters ( ) , null ) ;', 'import opennlp . tools . ml . maxent . GIS ;']","['| | outcomesSequence [ outcomesSequence . length - 1 ] . endsWith ( NameFinderME . CONTINUE ) ) {', '| | outcome . endsWith ( BilouCodec . UNIT ) ) {', '} else if ( outcomesSequence [ li ] . endsWith ( NameFinderME . OTHER ) | |', '| | outcome . endsWith ( BilouCodec . OTHER )', 'if ( outcome . endsWith ( NameFinderME . OTHER ) ) {', '| | outcomesSequence [ outcomesSequence . length - 1 ] . endsWith ( BilouCodec . CONTINUE ) ) {', '} else if ( outcomesSequence [ li ] . endsWith ( NameFinderME . CONTINUE ) | |', '} else if ( outcomesSequence [ li ] . endsWith ( BilouCodec . LAST ) & &', 'outcomesSequence [ li ] . endsWith ( NameFinderME . START ) ) {', 'if ( outcome . endsWith ( BilouCodec . START )']","['public void testDecodeTripletFirst ( ) {', 'public void testEncodeNoNames ( ) {', 'new String [ ] { A START , A CONTINUE , B START , OTHER } ) ) ;', 'import java . util . Arrays ;', 'String [ ] expected = new String [ ] { OTHER , OTHER , OTHER , OTHER } ;', 'Assert . assertTrue ( codec . areOutcomesCompatible ( new String [ ] { A START , OTHER } ) ) ;', 'public void testDecodeOtherFirst ( ) {', 'public void testEncodeSingleTokenSpan ( ) {', 'public void testCompatibilityStartOther ( ) {', 'Assert . assertTrue ( codec . areOutcomesCompatible (']","['""\'Rasmussen\' is \'last\' and the rest should be \'other\' . "" , expected , acutal ) ;', 'public void testDecodeTripletFirst ( ) {', 'public void testEncodeNoNames ( ) {', 'import java . util . Arrays ;', 'private static final String A CONTINUE = A TYPE + "" - "" + BilouCodec . CONTINUE ;', 'String [ ] acutal = codec . encode ( nameSample . getNames ( ) , nameSample . getSentence ( ) . length ) ;', 'Assert . assertTrue ( codec . createSequenceValidator ( ) instanceof BilouNameFinderSequenceValidator ) ;', 'Span [ ] expected = new Span [ ] { new Span ( 0 , 1 , A TYPE ) , new Span ( 1 , 2 , A TYPE ) } ;', 'public void testDecodeOtherFirst ( ) {', 'Assert . assertArrayEquals ( ""\'Anders\' should be \'start\' only , \'Fogh\' is \'inside\' , "" +']","['} else if ( outcome . endsWith ( BilouCodec . CONTINUE ) ) {', '} else if ( outcome . endsWith ( BilouCodec . UNIT ) ) {', 'Set < String > last = new HashSet < > ( ) ;', '- BilouCodec . START . length ( ) ) ) ;', '}', 'if ( !last . contains ( startPrefix ) ) {', 'for ( int i = 0 ; i < outcomes . length ; i + + ) {', '} else {', 'Set < String > cont = new HashSet < > ( ) ;', 'for ( String startPrefix : start ) {']","['return new DefaultPOSContextGenerator ( cacheSize , getDictionary ( ) ) ;', 'return new DefaultPOSContextGenerator ( cacheSize , getDictionary ( ) ) ;', 'if ( Version . currentVersion ( ) . getMinor ( ) < 8 ) {', 'import java . util . Properties ;', '}', 'String version = manifest . getProperty ( ""OpenNLP - Version"" ) ;', 'return new ConfigurablePOSContextGenerator ( cacheSize , createFeatureGenerators ( ) ) ;', '}', 'POSDictionarySerializer . register ( serializers ) ;', 'return new ConfigurablePOSContextGenerator ( cacheSize , createFeatureGenerators ( ) ) ;']","['- NameFinderME . START . length ( ) ) ) ;', '- BioCodec . START . length ( ) ) ) ;', '} else if ( !outcome . equals ( NameFinderME . OTHER ) ) {', '} else if ( !outcome . equals ( BioCodec . OTHER ) ) {', 'if ( outcome . endsWith ( NameFinderME . START ) ) {', '} else if ( outcome . endsWith ( BioCodec . CONTINUE ) ) {', '- NameFinderME . CONTINUE . length ( ) ) ) ;', 'if ( outcome . endsWith ( BioCodec . START ) ) {', '} else if ( outcome . endsWith ( NameFinderME . CONTINUE ) ) {', '- BioCodec . CONTINUE . length ( ) ) ) ;']","['Assert . assertEquals ( organization , ns . getNames ( ) [ 0 ] . getType ( ) ) ;', '@ Test', 'filter = new NameSampleTypeFilter ( types , sampleStream ( text ) ) ;', '}', 'new PlainTextByLineStream ( in , StandardCharsets . UTF 8 ) ) ;', 'import java . util . stream . Collectors ;', 'Assert . assertEquals ( 0 , ns . getNames ( ) . length ) ;', 'import java . util . Arrays ;', '. collect ( Collectors . groupingBy ( Span : : getType ) ) ;', 'import java . io . ByteArrayInputStream ;']","['else if ( pattern . isAllCapitalLetter ( ) & & token . length ( ) = = 1 ) {', 'feat = ""ac"" ;', 'feat = ""sc"" ;', '}', 'feat = ""ac"" ;', 'if ( token . length ( ) = = 1 ) {', '}', 'else {', 'feat = ""sc"" ;', '@ Test']","['@ Test', 'Assert . assertNull ( indexer . getValues ( ) ) ;', '}', 'ObjectStream < Event > eventStream = new SimpleEventStreamBuilder ( )', '. add ( ""other / w = belongs p1w = he n1w = to n2w = apache po = other pow = other , belongs powf = other , lc ppo = other"" )', 'import opennlp . tools . util . ObjectStream ;', 'public class OnePassDataIndexerTest {', '"" pow = org - start , Software powf = org - start , ic ppo = other"" )', 'Assert . assertArrayEquals ( new int [ ] { 5 } , indexer . getPredCounts ( ) ) ;', 'indexer . index ( eventStream ) ;']","['new StringList ( ""a"" , ""b"" ) . toString ( ) ;', '@ Test', 'Assert . assertEquals ( "" [ a ] "" , new StringList ( ""a"" ) . toString ( ) ) ;', 'StringList l2 = new StringList ( ""a"" , ""b"" ) ;', '}', 'new StringList ( ""a"" , ""c"" ) . hashCode ( ) ) ;', 'StringList l1 = new StringList ( ""a"" ) ;', 'Assert . assertEquals ( "" [ a , b ] "" , new StringList ( ""a"" , ""b"" ) . toString ( ) ) ;', 'Assert . assertTrue ( l1 . getToken ( 0 ) = = l2 . getToken ( 0 ) ) ;', 'public void testIntern ( ) {']","['numPreds + + ;', 'for ( int i = 0 ; i < sorted . length ; i + + ) {', 'for ( int pid = 0 ; pid < PARAMS . length ; pid + + ) {', 'if ( cp . compareTo ( sorted [ i ] ) = = 0 ) {', 'double [ ] predParams = PARAMS [ pid ] . getParameters ( ) ;', 'newGroup = new ArrayList < > ( ) ;', 'tmpParams [ numParams ] = predParams [ pi ] ;', 'return outcomePatterns ;', '}', 'for ( int pid = 0 ; pid < PARAMS . length ; pid + + ) {']","['Assert . assertEquals ( 0 . 8d , cv . getFMeasure ( ) . getFMeasure ( ) , expectedScore ) ;', 'Assert . assertEquals ( expectedScore , cv . getFMeasure ( ) . getFMeasure ( ) , 0 . 001d ) ;']","['@ Override', 'read = stream . read ( ) ;', 'import org . junit . Rule ;', '@ Test', 'File tempFile1 = directory . newFile ( ) ;', 'final String sentence1 = ""This is a sentence . "" ;', 'File tempFile2 = directory . newFile ( ) ;', 'import opennlp . tools . formats . convert . FileToStringSampleStream ;', 'import opennlp . tools . formats . DirectorySampleStream ;', '}']","['else if ( isRecursiveScan & & file . isDirectory ( ) ) {', 'else if ( recursive & & file . isDirectory ( ) ) {', 'isRecursiveScan = recursive ;', 'private final boolean recursive ;', 'private final boolean isRecursiveScan ;', '@ Override', 'this . recursive = recursive ;', 'package opennlp . tools . formats ;', 'import org . junit . Rule ;', 'return file . isDirectory ( ) | | file . getName ( ) . endsWith ( "" . tmp"" ) ;']","['import java . io . InputStream ;', 'String inExpected = ""opennlp / tools / lemmatizer / output . txt"" ;', 'new PlainTextByLineStream ( new MockInputStreamFactory ( inPredicted ) , encoding ) , true ) ;', 'new MockInputStreamFactory ( new File ( inExpected ) ) , encoding ) , false ) ;', 'InputStream inPredicted = getClass ( ) . getClassLoader ( )', 'import java . io . File ;', 'new PlainTextByLineStream ( new MockInputStreamFactory ( inExpected ) , encoding ) , false ) ;', 'String inPredicted = ""opennlp / tools / lemmatizer / output . txt"" ;', '. getResourceAsStream ( ""opennlp / tools / lemmatizer / output . txt"" ) ;', 'new PlainTextByLineStream (']","['if ( ns . getScore ( ) > minSequenceScore ) {', 'if ( ns . getScore ( ) > minSequenceScore ) {', 'continue ;', 'Sequence ns = new Sequence ( top , out , scores [ p ] ) ;', 'Sequence ns = new Sequence ( top , out , scores [ p ] ) ;', '}', 'scores = model . eval ( contexts , probs ) ;', '} else {', 'if ( scores = = null ) {', 'if ( validator . validSequence ( i , sequence , outcomes , out ) ) {']","['}', 'import java . io . Reader ;', 'reader = new BufferedReader ( new FileReader ( fileName ) ) ;', '}', 'else {', 'protected final BufferedReader reader ;', 'if ( encoding = = null ) {', 'new FileReader ( fileName ) : new InputStreamReader ( new FileInputStream ( fileName ) , encoding ) ) ;', 'reader = new BufferedReader ( new InputStreamReader ( new FileInputStream ( fileName ) , encoding ) ) ;', 'public FileEventStream ( Reader reader ) throws IOException {']","['private String [ ] context ;', 'this . context = Objects . requireNonNull ( context , ""context must not be null"" ) ;', 'this . context = context ;', 'import java . util . Objects ;', 'private float [ ] values ;', 'private final float [ ] values ;', 'this . outcome = outcome ;', 'private final String [ ] context ;', 'private String outcome ;', 'this . outcome = Objects . requireNonNull ( outcome , ""outcome must not be null"" ) ;']","['try {', '@ Test', 'Assert . assertArrayEquals ( new float [ ] { 0 . 2F , 0 . 4F , 0 . 4F } , event . getValues ( ) , 0 . 001F ) ;', '}', 'public void testNullOutcome ( ) {', 'new Event ( null , new String [ ] { ""aa"" , ""bb"" , ""cc"" } ) ;', 'new String [ ] { ""aa"" , ""bb"" , ""cc"" } ) ;', 'package opennlp . tools . ml . model ;', 'Assert . assertNull ( event . getValues ( ) ) ;', 'Assert . assertEquals ( ""o1"" , event . getOutcome ( ) ) ;']","['@ Override', 'params . put ( TrainingParameters . CUTOFF PARAM , Integer . toString ( 1 ) ) ;', 'import opennlp . tools . namefind . NameSampleDataStream ;', '@ Test', 'TokenNameFinderModel model ;', 'try {', '}', 'ObjectStream < String > lineStream =', '} finally {', 'params . put ( TrainingParameters . ITERATIONS PARAM , Integer . toString ( 70 ) ) ;']","['private boolean useOnlyAllLetterTokens = false ;', 'import java . util . Objects ;', 'this ( false ) ;', 'private final boolean useOnlyAllLetterTokens ;', 'Objects . requireNonNull ( text , ""text must not be null"" ) ;', 'private int minGram = 2 ;', 'import java . util . Objects ;', 'private int maxGram = 2 ;', 'private final int minGram ;', 'public NGramFeatureGenerator ( ) {']","['int beamSize = ChunkerME . DEFAULT BEAM SIZE ;', 'int beamSize = mlParams . getIntParameter ( BeamSearch . BEAM SIZE PARAMETER , ChunkerME . DEFAULT BEAM SIZE ) ;', 'beamSize = Integer . parseInt ( beamSizeString ) ;', 'if ( beamSizeString ! = null ) {', '}', 'String beamSizeString = mlParams . getSettings ( ) . get ( BeamSearch . BEAM SIZE PARAMETER ) ;', 'beamSize = Integer . parseInt ( beamSizeString ) ;', 'LemmatizerME . DEFAULT BEAM SIZE ) ;', 'if ( beamSizeString ! = null ) {', 'int beamSize = trainParams . getIntParameter ( BeamSearch . BEAM SIZE PARAMETER ,']","['Map < String , Object > resources =', 'try {', 'TokenNameFinderTrainerTool . loadResources ( params . getResources ( ) , params . getFeaturegen ( ) ) ;', 'throw new TerminateToolException ( - 1 , ""IO error while loading resources"" , e ) ;', 'catch ( IOException e ) {', '}', 'Map < String , Object > resources ;', 'resources = TokenNameFinderTrainerTool . loadResources ( params . getResources ( ) , params . getFeaturegen ( ) ) ;', 'Map < String , Object > resources = loadResources ( params . getResources ( ) , params . getFeaturegen ( ) ) ;', 'for ( Map . Entry < String , ArtifactSerializer > serializerMapping : artifactSerializers . entrySet ( ) ) {']","['ObjectStream < ChunkSample > sampleStream = new ChunkSampleStream (', 'ResourceAsStreamFactory in = new ResourceAsStreamFactory ( getClass ( ) ,', 'TrainingParameters params = new TrainingParameters ( ) ;', 'params . put ( TrainingParameters . ITERATIONS PARAM , ""70"" ) ;', '"" / opennlp / tools / chunker / test - insufficient . txt"" ) ;', 'import opennlp . tools . util . InsufficientTrainingDataException ;', '}', 'public void testInsufficientData ( ) throws IOException {', 'new PlainTextByLineStream ( in , StandardCharsets . UTF 8 ) ) ;', 'ChunkerME . train ( ""en"" , sampleStream , params , new ChunkerFactory ( ) ) ;']","['@ Override', 'final List < String > input = Arrays . asList ( ""One"" , ""two"" ) ;', 'final int window = 2 ;', '@ Test', 'final int window = 3 ;', 'Assert . assertTrue ( ngrams . contains ( ""s - t - - a"" ) ) ;', '}', 'Assert . assertTrue ( ngrams . contains ( ""a - sentence"" ) ) ;', 'Assert . assertTrue ( ngrams . contains ( ""e - s - t - "" ) ) ;', 'import java . util . Arrays ;']","['tp . put ( ""k11"" , ""234"" ) ;', '200 ) ) ;', 'public void testGetSettings ( ) {', 'assertEquals ( build ( ""k3 = v3"" ) , tp . getParameters ( ""n2"" ) ) ;', 'TrainingParameters tp1 =', 'TrainingParameters tp = build ( ""k1 = v1 , n1 . k2 = v2 , n2 . k3 = v3 , n1 . k4 = v4"" ) ;', 'Map < String , String > map = new HashMap < > ( pairs . length ) ;', 'for ( String pair : pairs ) {', 'TrainingParameters tp2 = new TrainingParameters (', 'Assert . assertEquals ( 4 , tr . getSettings ( ) . size ( ) ) ;']","['Assert . assertEquals ( organization , ns . getNames ( ) [ 0 ] . getType ( ) ) ;', 'Assert . assertEquals ( organization , ns . getNames ( ) [ 0 ] . getType ( ) ) ;', '@ Test', '@ Test', 'filter = new NameSampleTypeFilter ( types , sampleStream ( text ) ) ;', 'filter = new NameSampleTypeFilter ( types , sampleStream ( text ) ) ;', '}', '}', 'new PlainTextByLineStream ( in , StandardCharsets . UTF 8 ) ) ;', 'new PlainTextByLineStream ( in , StandardCharsets . UTF 8 ) ) ;']","['documentStream , Charset . forName ( ""UTF - 8"" ) ) ) ;', 'return new OntoNotesNameSampleStream ( new FileToStringSampleStream (', 'ObjectStream < NameSample > samples = new OntoNotesNameSampleStream ( new FileToStringSampleStream (', 'try {', 'throws IOException {', 'import java . security . MessageDigest ;', 'params , new TokenNameFinderFactory ( ) ) ;', 'throws IOException {', 'if ( type ! = null ) {', '}']","['public void ensureTestDataIsCorrect ( ) throws IOException {', '@ BeforeClass', '@ Test', 'import org . junit . BeforeClass ;', 'public static void ensureTestDataIsCorrect ( ) throws IOException {']","['Parse p = nodes . remove ( 0 ) ;', 'while ( nodes . size ( ) ! = 0 ) {', 'nodes . addAll ( this . parts ) ;', '}', 'nodes . addAll ( 0 , p . parts ) ;', 'tokens . add ( p ) ;', 'List < Parse > nodes = new LinkedList < > ( ) ;', 'if ( p . getType ( ) . equals ( AbstractBottomUpParser . TOK NODE ) ) {', 'else {', 'List < Parse > tokens = new LinkedList < > ( ) ;']","['Arrays . sort ( files ) ;', 'import java . util . Arrays ;', 'crossEval ( params , ""person"" , 0 . 8299903903167106d ) ;', 'crossEval ( params , ""person"" , 0 . 8286204642039883d ) ;', 'crossEval ( ModelUtil . createDefaultTrainingParameters ( ) , 0 . 9699561275750962d ) ;', 'crossEval ( ModelUtil . createDefaultTrainingParameters ( ) , 0 . 9698145168879707d ) ;']","['trainingParameters . put ( CUTOFF PARAM , ""5"" ) ;', 'trainingParameters . put ( CUTOFF PARAM , 5 ) ;', 'trainingParameters . put ( AbstractDataIndexer . SORT PARAM , Boolean . toString ( isSortAndMerge ( ) ) ) ;', 'trainingParameters . put ( AbstractDataIndexer . SORT PARAM , isSortAndMerge ( ) ) ;', 'indexingParameters . put ( GISTrainer . ITERATIONS PARAM , Integer . toString ( iterations ) ) ;', 'indexingParameters . put ( GISTrainer . ITERATIONS PARAM , iterations ) ;', 'indexingParameters . put ( GISTrainer . CUTOFF PARAM , Integer . toString ( cutoff ) ) ;', 'indexingParameters . put ( GISTrainer . CUTOFF PARAM , cutoff ) ;', 'trainingParameters . put ( AbstractDataIndexer . CUTOFF PARAM , Integer . toString ( cutoff ) ) ;', 'trainingParameters . put ( AbstractDataIndexer . SORT PARAM , false ) ;']","['return ! ( algorithmName ! = null & & ! ( PERCEPTRON VALUE . equals ( algorithmName ) ) ) ;', 'return PERCEPTRON VALUE . equals ( algorithmName ) ;', 'return true ;', 'if ( algorithmName ! = null ) {', '}', 'return false ;', 'else {', 'if ( !super . isValid ( ) ) {']","['crossEval ( params , ""person"" , 0 . 8286204642039883d ) ;', 'crossEval ( params , ""person"" , 0 . 822014580552418d ) ;', 'crossEval ( params , ""date"" , 0 . 8065329969459567 ) ;', 'crossEval ( params , null , 0 . 8014054850253551d ) ;', 'cv . evaluate ( filteredSamples , 10 ) ;', 'params . put ( ""Threads"" , ""4"" ) ;', 'crossEval ( params , null , 0 . 8061722553169423d ) ;', 'cv . evaluate ( filteredSamples , 5 ) ;', 'crossEval ( params , ""date"" , 0 . 8043873255040994d ) ;', 'crossEval ( params , headRules , 0 . 937987617163142d ) ;']","['this . brownLexicon = dict ;', 'List < String > nextWordClasses = BrownTokenClasses . getWordClasses ( tokens [ index + 1 ] , brownCluster ) ;', 'public BrownBigramFeatureGenerator ( BrownCluster dict ) {', 'public BrownBigramFeatureGenerator ( BrownCluster brownCluster ) {', 'List < String > wordClasses = BrownTokenClasses . getWordClasses ( tokens [ index ] , brownLexicon ) ;', 'this . brownCluster = brownCluster ;', 'private BrownCluster brownLexicon ;', 'List < String > wordClasses = BrownTokenClasses . getWordClasses ( tokens [ index ] , brownCluster ) ;', 'List < String > prevWordClasses = BrownTokenClasses . getWordClasses ( tokens [ index - 1 ] , brownLexicon ) ;', 'private BrownCluster brownCluster ;']","['StringBuilder sb = new StringBuilder ( ) ;', 'String text = String . join ( "" "" , tokens ) ;', '}', 'for ( String tok : tokens ) {', 'sb . append ( tok ) . append ( "" "" ) ;', 'String text = sb . substring ( 0 , sb . length ( ) ) ;']","['new File ( ""opennlp / tools / namefind / AnnotatedSentencesWithTypes . txt"" ) ) , encoding ) ;', 'StandardCharsets . ISO 8859 1 ) ;', 'sampleStream . close ( ) ;', 'new BufferedOutputStream ( new FileOutputStream ( modelFile ) ) ) {', 'modelOut . close ( ) ;', 'try ( ObjectStream < NameSample > sampleStream = new NameSampleDataStream ( lineStream ) ) {', 'try {', 'try ( BufferedOutputStream modelOut =', 'BufferedOutputStream modelOut = null ;', 'new File ( ""opennlp / tools / namefind / AnnotatedSentencesWithTypes . txt"" ) ) ,']","['else if ( ALGORITHM . IRISH . equals ( algorithm ) ) {', 'IRISH ,', '}', 'stemmer = new irishStemmer ( ) ;', 'cursor = limit - v 5 ;', 'return true ;', 'case 21 :', 'slice from ( ""b"" ) ;', 'new Among ( ""aire"" , 2 , 2 , """" , methodObject ) ,', 'lab1 : do {']","['IrishSentenceBankTokenSampleStreamFactory . registerFactory ( ) ;', 'IrishSentenceBankSentenceStreamFactory . registerFactory ( ) ;', 'import opennlp . tools . formats . irishsentencebank . IrishSentenceBankSentenceStreamFactory ;', 'import opennlp . tools . formats . irishsentencebank . IrishSentenceBankTokenSampleStreamFactory ;', 'throw new IOException ( ""Failed to parse IrishSentenceBank document"" , e ) ;', 'trans = sentnl . item ( j ) . getFirstChild ( ) . getTextContent ( ) ;', 'import java . lang . StringBuilder ;', 'right = flx . get ( flexidx ) . toArray ( right ) ;', 'String tkn = sentnl . item ( j ) . getAttributes ( ) . getNamedItem ( ""lemma"" ) . getNodeValue ( ) ;', 'private String source ;']","['import opennlp . tools . util . Heap ;', 'import java . util . SortedSet ;', 'protected Heap < Parse > completeParses ;', 'private SortedSet < Parse > odh ;', 'import opennlp . tools . util . ListHeap ;', 'completeParses . remove ( tp ) ;', 'ndh = new ListHeap < > ( K ) ;', 'private SortedSet < Parse > ndh ;', 'completeParses = new ListHeap < > ( K ) ;', 'completeParses = new TreeSet < > ( ) ;']","['throw new IllegalArgumentException ( ""trainParams are not valid!"" ) ;', 'validate ( ) ;', '}', 'if ( !isValid ( ) ) {', 'throw new IllegalArgumentException ( ""trainParams are not valid!"" ) ;', 'validate ( ) ;', '}', 'super . validate ( ) ;', 'if ( !isValid ( ) ) {', '@ Deprecated']","['if ( !keyValues . isEmpty ( ) ) {', 'if ( keyValues ! = null & & !keyValues . isEmpty ( ) ) {', 'String [ ] actualLemma = dictionaryLemmatizer . lemmatize ( sentence , sentencePOS ) ;', '@ Test', 'for ( int i = 0 ; i < sentence . length ; i + + ) {', 'if ( !actualLemma [ i ] . equals ( ""O"" ) ) Assert . assertEquals ( expectedLemma [ i ] , actualLemma [ i ] ) ;', '}', 'public static void loadDictionary ( ) throws Exception {', 'DictionaryLemmatizerTest . class . getResourceAsStream ( "" / opennlp / tools / lemmatizer / smalldictionary . dict"" )', ') ;']","['ConlluLemmaSampleStream ( ObjectStream < ConlluSentence > samples , ConlluTagset tagset ) {', 'public ConlluLemmaSampleStream ( ObjectStream < ConlluSentence > samples , ConlluTagset tagset ) {', 'enum ConlluTagset {', 'public enum ConlluTagset {', 'new PlainTextByLineStream ( new MarkableFileInputStreamFactory ( testData ) , ""UTF - 8"" ) ) ;', 'new PlainTextByLineStream ( new MarkableFileInputStreamFactory ( testData ) , StandardCharsets . UTF 8 ) ) ;', 'new MarkableFileInputStreamFactory ( trainFile ) , ""UTF - 8"" ) ) ;', 'import java . nio . charset . StandardCharsets ;', 'new MarkableFileInputStreamFactory ( trainFile ) , StandardCharsets . UTF 8 ) ) ;', 'import java . nio . charset . Charset ;']","['null , posModel . getFactory ( ) ) ;', 'Map < String , String > manifestInfoEntries = new HashMap < > ( ) ;', 'manifestInfoEntries , posModel . getFactory ( ) ) ;', 'import java . util . Map ;', 'import java . util . HashMap ;', 'manifestInfoEntries . put ( ""OpenNLP - Version"" , ""1 . 5 . 0"" ) ;']","['Assert . assertEquals ( new BigInteger ( ""13162568910062822351942983467905626940"" ) ,', 'StringBuffer sb = new StringBuffer ( ) ;', 'digest . update ( parse [ 0 ] . toString ( ) . getBytes ( ""UTF - 8"" ) ) ;', 'digest . update ( ""empty"" . getBytes ( StandardCharsets . UTF 8 ) ) ;', 'digest . update ( ""empty"" . getBytes ( ""UTF - 8"" ) ) ;', 'parse [ 0 ] . show ( sb ) ;', 'Assert . assertEquals ( new BigInteger ( ""312218841713337505306598301082074515847"" ) ,', 'digest . update ( sb . toString ( ) . getBytes ( StandardCharsets . UTF 8 ) ) ;', 'import java . nio . charset . StandardCharsets ;']","['if ( !keyValues . isEmpty ( ) ) {', 'final String [ ] lemmas = elems [ 2 ] . split ( ""#"" ) ;', 'this . dictMap . put ( Arrays . asList ( elems [ 0 ] , elems [ 1 ] ) , Arrays . asList ( elems [ 2 ] ) ) ;', 'if ( keyValues ! = null & & !keyValues . isEmpty ( ) ) {', 'this . dictMap . put ( Arrays . asList ( elems [ 0 ] , elems [ 1 ] ) , Arrays . asList ( lemmas ) ) ;', '@ Test', '}', 'expectedLemmas . add ( Arrays . asList ( ""dog"" ) ) ;', 'public class DictionaryLemmatizerMultiTest {', 'public static void loadDictionary ( ) throws Exception {']","['import org . junit . Ignore ;', '@ Ignore']","['if ( LANGUAGE . NL . equals ( lang ) & & line . startsWith ( DOCSTART ) ) {', 'NLD ,', 'NL ,', 'if ( LANGUAGE . NLD . equals ( lang ) & & line . startsWith ( DOCSTART ) ) {', 'if ( LANGUAGE . ES . equals ( lang ) )', 'if ( LANGUAGE . SPA . equals ( lang ) )', 'ES', 'SPA', 'lang = LANGUAGE . NL ;', '@ ParameterDescription ( valueName = ""spa | nld"" )']","['try {', 'public void evalAllTypesWithPOSNameFinder ( ) throws IOException , URISyntaxException {', 'throw new TerminateToolException ( - 1 , ""IO error while loading resources"" , e ) ;', 'Assert . assertEquals ( 0 . 8070226153653437d , cv . getFMeasure ( ) . getFMeasure ( ) , 0 . 001d ) ;', 'import opennlp . tools . cmdline . TerminateToolException ;', 'Map < String , Object > resources = TokenNameFinderTrainerTool . loadResources ( resourcesPath . toFile ( ) ,', 'catch ( IOException e ) {', 'throw new IllegalStateException ( ""Failed reading from ner - default - features . xml file on classpath!"" ) ;', '}', 'catch ( IOException | URISyntaxException e ) {']","['dictLookup = new DictionaryLookup ( Dictionary . read ( dictionaryPath ) ) ;', 'dictLookup = new DictionaryLookup ( dictionary ) ;', 'this ( Dictionary . read ( dictionaryPath ) ) ;', 'public MorfologikLemmatizer ( Dictionary dictionary ) throws IllegalArgumentException ,', '}', 'IOException {']","['import opennlp . tools . cmdline . langdetect . LanguageDetectorEvaluatorTool ;', 'import opennlp . tools . cmdline . langdetect . LanguageDetectorTool ;', 'import opennlp . tools . cmdline . langdetect . LanguageDetectorCrossValidatorTool ;', 'import opennlp . tools . cmdline . langdetect . LanguageDetectorConverterTool ;', 'tools . add ( new LanguageDetectorTrainerTool ( ) ) ;', 'tools . add ( new LanguageDetectorCrossValidatorTool ( ) ) ;', 'tools . add ( new LanguageDetectorConverterTool ( ) ) ;', 'tools . add ( new LanguageDetectorTool ( ) ) ;', 'tools . add ( new LanguageDetectorEvaluatorTool ( ) ) ;', 'import opennlp . tools . cmdline . langdetect . LanguageDetectorTrainerTool ;']","['public static double [ ] eval ( int [ ] context , float [ ] values , double [ ] prior ,', 'static double [ ] eval ( int [ ] context , float [ ] values , double [ ] prior ,', '@ Deprecated', 'public static double [ ] eval ( int [ ] context , float [ ] values , double [ ] probs ,', 'static double [ ] eval ( int [ ] context , float [ ] values , double [ ] probs ,', '@ Deprecated', 'public static double [ ] eval ( int [ ] context , float [ ] values , double [ ] prior ,', 'static double [ ] eval ( int [ ] context , float [ ] values , double [ ] prior ,', '@ Deprecated', '@ Deprecated']","['for ( Span sentence : sentences ) {', '}', 'throw new IllegalArgumentException (', 'if ( sentence . getEnd ( ) > document . length ( ) ) {', 'document . length ( ) , sentence ) ) ;', 'String . format ( ""Sentence span is outside of document text [ len % d ] and span % s"" ,', 'SentenceSample sample = new SentenceSample ( ""1 . 2 . "" ,', '@ Test ( expected = IllegalArgumentException . class )', 'new Span ( 0 , 2 ) , new Span ( 5 , 7 ) ) ;', '}']","['protected BratNameSampleStream ( SentenceDetector sentDetector ,', 'public BratNameSampleStream ( SentenceModel sentModel , TokenizerModel tokenModel ,', 'protected BratNameSampleStream ( SentenceModel sentModel , TokenizerModel tokenModel ,', 'public BratNameSampleStream ( SentenceDetector sentDetector ,']","['break ;', 'flexa = null ;', 'if ( flx . get ( flexidx ) = = null ) {', '}']","['break ;', 'case ""dictionary"" :', 'import opennlp . tools . util . model . DictionarySerializer ;', 'mapping . put ( dictName , new DictionarySerializer ( ) ) ;', '@ Test', 'public void testDictionaryArtifactToSerializerMappingExtraction ( ) throws IOException {', 'Map < String , ArtifactSerializer < ? > > mapping =', 'import opennlp . tools . util . model . DictionarySerializer ;', 'InputStream descIn = getClass ( ) . getResourceAsStream (', '}']","['protected static String [ ] toIndexedStringArray ( Map < String , Integer > labelToIndexMap ) {', 'import java . util . Comparator ;', 'counter . put ( s , 1 ) ;', '+ Arrays . asList ( ev . getContext ( ) ) + "" \\ n"" ) ;', 'Integer i = counter . get ( s ) ;', 'protected List < ComparableEvent > index ( ObjectStream < Event > events ,', 'for ( String label : labelToIndexMap . keySet ( ) ) {', 'Map < String , Integer > predicateIndex ) throws IOException {', '}', '}']","['. map ( p - > p . getLemma ( ) )', 'String deprel = contraction . getDeprel ( ) ;', 'String xPosTag = expandedParts . stream ( )', 'private List < ConlluWordLine > postProcessContractions ( List < ConlluWordLine > lines ) {', '}', 'ConlluWordLine line = lines . get ( i ) ;', 'import java . util . stream . Collectors ;', 'private ConlluWordLine mergeAnnotation ( ConlluWordLine contraction ,', 'String misc = contraction . getMisc ( ) ;', 'if ( line . getId ( ) . contains ( "" - "" ) ) {']","['public final void serialize ( File model ) throws IOException {', 'try ( OutputStream out = new BufferedOutputStream ( new FileOutputStream ( model ) ) ) {', 'serialize ( model . toFile ( ) ) ;', '}', 'import java . io . FileOutputStream ;', 'import java . nio . file . Path ;', 'serialize ( out ) ;', 'import java . io . BufferedOutputStream ;', 'public final void serialize ( Path model ) throws IOException {']","['import java . nio . file . Path ;', 'public ChunkerModel ( Path modelPath ) throws IOException , InvalidFormatException {', '}', 'this ( modelPath . toFile ( ) ) ;', 'import java . nio . file . Path ;', 'this ( modelPath . toFile ( ) ) ;', '}', 'public DoccatModel ( Path modelPath ) throws IOException {', 'this . dictMap = new HashMap < > ( ) ;', 'public DictionaryLemmatizer ( File dictionaryFile ) throws IOException {']","['@ SuppressWarnings ( { ""unchecked"" } )', 'return new Character ( chars [ 0 ] ) ;', 'return Character . valueOf ( chars [ 0 ] ) ;', '@ SuppressWarnings ( { ""unchecked"" } )', 'System . out . println ( ( ( TypedCmdLineTool ) tool ) . getHelp ( formatName ) ) ;', '( ( TypedCmdLineTool < ? > ) tool ) . run ( formatName , toolArguments ) ;', '( ( TypedCmdLineTool ) tool ) . run ( formatName , toolArguments ) ;', 'System . out . println ( ( ( TypedCmdLineTool < ? > ) tool ) . getHelp ( formatName ) ) ;', 'if ( t1 = = t2 ) {', 'categoryAccuracy . put ( category , currentAccuracy + confusionMatrixLine . getAccuracy ( ) ) ;']","['Integer ci = pmap . get ( context [ i ] ) ;', 'scontexts [ i ] = model . getParams ( ) [ context [ i ] ] ;', 'Context [ ] params = model . getParams ( ) ;', 'EvalParameters model ) {', 'Context predParams = params [ context [ ci ] ] ;', 'Context [ ] scontexts = new Context [ context . length ] ;', 'if ( context [ ci ] > = 0 ) {', '}', 'scontexts [ i ] = ci = = null ? - 1 : ci ;', 'static double [ ] eval ( Context [ ] context , float [ ] values , double [ ] prior ,']","['import opennlp . tools . cmdline . params . DetailedFMeasureEvaluatorParams ;', 'try {', 'import opennlp . tools . sentiment . SentimentFactory ;', 'import opennlp . tools . sentiment . SentimentSample ;', 'import opennlp . tools . sentiment . SentimentEvaluationMonitor ;', 'validator . evaluate ( sampleStream , params . getFolds ( ) ) ;', '}', 'listeners . add ( new SentimentEvaluationErrorListener ( ) ) ;', 'throw new TerminateToolException ( - 1 ,', 'import opennlp . tools . util . eval . EvaluationMonitor ;']","['if ( argValue ! = null ) {', '""Character should have size 1 . "" ) ;', 'public Object parseArgument ( Method method , String argName , String argValue ) {', 'return null ;', 'if ( chars . length ! = 1 ) {', '}', 'char [ ] chars = argValue . toCharArray ( ) ;', 'factories . put ( Character . class , new CharacterArgumentFactory ( ) ) ;', 'private static class CharacterArgumentFactory implements ArgumentFactory {', 'return new Character ( chars [ 0 ] ) ;']","['for ( int lengthIndex = minLength ; lengthIndex < maxLength + 1 ; lengthIndex + + ) {', 'for ( int lengthIndex = minLength ; textIndex + lengthIndex - 1 < ngram . size ( )', 'for ( int textIndex = 0 ;', 'for ( int lengthIndex = minLength ; textIndex + lengthIndex - 1 < chars . length ( )', 'textIndex + lengthIndex - 1 < ngram . size ( ) ; textIndex + + ) {', 'for ( int textIndex = 0 ; textIndex < ngram . size ( ) ; textIndex + + ) {', 'textIndex + lengthIndex - 1 < chars . length ( ) ; textIndex + + ) {', '& & lengthIndex < maxLength + 1 ; lengthIndex + + ) {', 'for ( int textIndex = 0 ; textIndex < chars . length ( ) ; textIndex + + ) {']","['model . add ( document , minLength , maxLength ) ;', 'model . add ( normalizer . normalize ( document ) , minLength , maxLength ) ;', 'public void add ( String chars , int minLength , int maxLength ) {', 'chars . subSequence ( textIndex , textIndex + lengthIndex ) ) ;', 'chars . substring ( textIndex , textIndex + lengthIndex ) ) ;', 'public void add ( CharSequence chars , int minLength , int maxLength ) {']","['public final class POSModel extends BaseModel {', 'import opennlp . tools . util . model . POSModelSerializer ;', '}', 'public final class POSModel extends BaseModel implements SerializableArtifact {', 'public Class < POSModelSerializer > getArtifactSerializerClass ( ) {', 'return POSModelSerializer . class ;', '@ Override', 'import opennlp . tools . util . model . SerializableArtifact ;', 'try {', '@ Test']","['import opennlp . tools . cmdline . params . DetailedFMeasureEvaluatorParams ;', 'try {', 'import opennlp . tools . sentiment . SentimentFactory ;', 'import opennlp . tools . sentiment . SentimentSample ;', 'import opennlp . tools . sentiment . SentimentEvaluationMonitor ;', 'validator . evaluate ( sampleStream , params . getFolds ( ) ) ;', '}', 'listeners . add ( new SentimentEvaluationErrorListener ( ) ) ;', 'throw new TerminateToolException ( - 1 ,', 'import opennlp . tools . util . eval . EvaluationMonitor ;']","['Assert . assertEquals ( 0 . 9046675934566091d , wordAccuracy , EvalUtil . ACCURACY DELTA ) ;', 'Assert . assertEquals ( 0 . 9057341692068787d , wordAccuracy , EvalUtil . ACCURACY DELTA ) ;']","['package opennlp . tools ;', '}', 'public class HighMemoryUsage {', '@ Category ( HighMemoryUsage . class )', 'import opennlp . tools . HighMemoryUsage ;', 'import org . junit . experimental . categories . Category ;', 'import org . junit . Ignore ;', '@ Category ( HighMemoryUsage . class )', '@ Ignore', 'import opennlp . tools . HighMemoryUsage ;']","['if ( argValue ! = null ) {', '@ SuppressWarnings ( { ""unchecked"" } )', '""Character should have size 1 . "" ) ;', 'return Character . valueOf ( chars [ 0 ] ) ;', 'public Object parseArgument ( Method method , String argName , String argValue ) {', 'return null ;', 'if ( chars . length ! = 1 ) {', '}', 'char [ ] chars = argValue . toCharArray ( ) ;', 'factories . put ( Character . class , new CharacterArgumentFactory ( ) ) ;']","['import opennlp . tools . util . StringList ;', 'protected final int maxLength ;', 'NGramModel model = new NGramModel ( ) ;', 'this . minLength = minLength ;', '}', 'protected final CharSequenceNormalizer normalizer ;', 'public String [ ] getContext ( CharSequence document ) {', 'CharSequenceNormalizer . . . normalizers ) {', '@ Override', 'Collection < String > context = new ArrayList < > ( ) ;']","['return ObjectStreamUtils . createObjectStream ( sampleStreams ) ;', 'return ObjectStreamUtils . concatenateObjectStream ( sampleStreams ) ;', 'public static < T > ObjectStream < T > createObjectStream ( final ObjectStream < T > . . . streams ) {', 'return new ObjectStream < T > ( ) {', 'return object ;', '}', 'if ( stream = = null ) {', 'private ObjectStream < T > currentStream = iterator . next ( ) ;', 'public static < T > ObjectStream < T > concatenateObjectStream ( final Collection < ObjectStream < T > > streams ) {', '@ Override']","['System . out . format ( ""Execution time : % . 3f seconds \\ n"" , ( endTime - startTime ) / 1000 . 0 ) ;', 'System . err . format ( ""Execution time : % . 3f seconds \\ n"" , ( endTime - startTime ) / 1000 . 0 ) ;']","['public static void verifyFileChecksum ( Path file , BigInteger checksum ) throws Exception {', 'try ( InputStream in = Files . newInputStream ( file ) ) {', 'import java . security . MessageDigest ;', 'PerceptronTrainer . PERCEPTRON VALUE ) ;', 'if ( !file . exists ( ) ) {', '}', 'Object sample ;', 'public static File getOpennlpDataDir ( ) throws FileNotFoundException {', 'throw new FileNotFoundException ( ""The OPENNLP DATA DIR path of "" + dataDirectory + "" was not found . "" ) ;', 'public TrainingParameters createMaxentQnParams ( ) {']","['private PrintStream printStream ;', 'protected PrintStream printStream ;']","['this . names = Collections . unmodifiableList ( new ArrayList < > ( Arrays . asList ( names ) ) ) ;', 'List < Span > namesList = Arrays . asList ( names ) ;', 'Collections . sort ( namesList ) ;', 'this . names = Collections . unmodifiableList ( namesList ) ;', 'Assert . assertEquals (', 'String [ ] sentence = { ""A"" , ""Place"" , ""a"" , ""time"" , ""A"" , ""Person"" , "" . "" } ;', 'NameSample nameSample ;', '@ Test', 'new Span ( 4 , 6 , ""Person"" ) } ;', 'nameSample . toString ( ) ) ;']","['Integer . parseInt ( params . getSamplesPerLanguage ( ) ) ) ) ;', 'Integer . parseInt ( params . getSamplesToSkip ( ) ) ) ;', 'return new SampleShuffleStream ( new LeipzigLanguageSampleStream ( sentencesFileDir ,', '@ ParameterDescription ( valueName = ""samplesToSkip"" ,', 'String getSamplesToSkip ( ) ;', 'new LeipzigLanguageSampleStream ( sentencesFileDir ,', 'import opennlp . tools . cmdline . ArgumentParser . OptionalParameter ;', 'description = ""number of samples to skip before returning"" )', 'return new SampleSkipStream ( new SampleShuffleStream (', 'Integer . parseInt ( params . getSamplesPerLanguage ( ) ) + Integer . parseInt ( params . getSamplesToSkip ( ) ) ) ) ,']","['printStream . println ( ""ExpectedPredictedContext"" ) ;', 'predictedSample . getLanguage ( ) . getLang ( ) ,', '}', 'printStream . println ( String . join ( """" , referenceSample . getLanguage ( ) . getLang ( ) ,', 'referenceSample . getContext ( ) ) ) ;', '@ Override', 'protected void printError ( LanguageSample referenceSample , LanguageSample predictedSample ) {', '} ) ;', 'Assert . assertEquals ( ""ExpectedPredictedContext \\ n"" +', '} , new LanguageDetectorEvaluationErrorListener ( outputStream ) ) ;']","['SAXParserFactory factory = SAXParserFactory . newInstance ( ) ;', 'saxParser = XmlUtil . createSaxParser ( ) ;', 'try {', 'import opennlp . tools . util . XmlUtil ;', 'saxParser = factory . newSAXParser ( ) ;', '}', '} catch ( ParserConfigurationException | SAXException e ) {', 'import javax . xml . parsers . SAXParserFactory ;', 'throw new IllegalStateException ( e ) ;', 'import javax . xml . parsers . ParserConfigurationException ;']","['new BigInteger ( ""248567841356936801447294643695012852392"" ) ) ;', 'new BigInteger ( ""172812413483919324675263268750583851712"" ) ) ;']","['NKJPSentenceSampleStreamFactory . registerFactory ( ) ;', 'import opennlp . tools . formats . nkjp . NKJPSentenceSampleStreamFactory ;', 'length = Integer . parseInt ( pieces [ 3 ] ) ;', 'return true ;', 'NodeList nl = ( NodeList ) SENT NODES . evaluate ( doc , XPathConstants . NODESET ) ;', 'ptr = n . getAttributes ( ) . getNamedItem ( ""corresp"" ) . getTextContent ( ) ;', 'if ( !checkRejected ( choices . item ( k ) ) ) {', 'public String toString ( ) {', 'this . length = length ;', 'throw new IOException ( ""String "" + ptr + "" does not appear to be a valid NKJP corresp attribute"" ) ;']","['sentencesFiles = leipzigFolder . listFiles ( ) ;', '& & pathname . getName ( ) . length ( ) > = 3', '& & pathname . getName ( ) . substring ( 0 , 3 ) . matches ( "" [ a - z ] + "" ) ;', '} ) ;', '}', 'return !pathname . isHidden ( ) & & pathname . isFile ( )', 'sentencesFiles = leipzigFolder . listFiles ( new FileFilter ( ) {', 'import java . io . FileFilter ;', 'public boolean accept ( File pathname ) {', '@ Override']","['Set < Integer > selectedLines = new HashSet < > (', 'throw new InvalidFormatException (', 'indexes . subList ( 0 , sentencesPerSample * numberOfSamples ) ) ;', 'int requiredLines = sentencesPerSample * numberOfSamples ;', 'String . format ( "" % s does not contain enough lines ( % d lines < % d required lines ) . "" ,', 'Set < Integer > selectedLines = new HashSet < > ( indexes . subList ( 0 , requiredLines ) ) ;', 'import opennlp . tools . util . InvalidFormatException ;', 'sentencesFile . getPath ( ) , totalLineCount , requiredLines ) ) ;', 'if ( totalLineCount < requiredLines )', 'System . out . println ( sample . getContext ( ) ) ;']","['private static Logger logger = Logger . getLogger ( WordTagSampleStream . class . getName ( ) ) ;', 'System . out . println ( ""Error during parsing , ignoring sentence : "" + sentence ) ;', 'if ( logger . isLoggable ( Level . WARNING ) ) {', 'logger . warning ( ""Error during parsing , ignoring sentence : "" + sentence ) ;', '}', 'import java . util . logging . Level ;', 'import java . util . logging . Logger ;', 'logger . warning ( ""Bad training token : "" + tokens [ ti ] + "" cand : "" + cSpan +', '"" token = "" + text . substring ( tokens [ ti ] . getStart ( ) , tokens [ ti ] . getEnd ( ) ) ) ;', '"" token = "" + text . substring ( tokens [ ti ] . getStart ( ) , tokens [ ti ] . getEnd ( ) ) ) ;']","['if ( this . names . size ( ) > 1 ) {', '}', 'for ( int i = 1 ; i < this . names . size ( ) ; i + + ) {', 'this . names . get ( i - 1 ) , this . names . get ( i ) ) ) ;', 'throw new RuntimeException ( String . format ( ""name spans % s and % s are overlapped"" ,', 'if ( this . names . get ( i ) . getStart ( ) < this . names . get ( i - 1 ) . getEnd ( ) ) {', 'String [ ] sentence = { ""A"" , ""Place"" , ""a"" , ""time"" , ""A"" , ""Person"" , "" . "" } ;', 'public void testOverlappingNameSpans ( ) throws Exception {', '@ Test ( expected = IOException . class )', '@ Test ( expected = RuntimeException . class )']","['if ( s > e ) {', 'this ( s , e , type , 0d ) ;', 'this . type = type ;', 'throw new IllegalArgumentException ( ""end index must be zero or greater : "" + e ) ;', 'if ( s < 0 ) {', 'throw new IllegalArgumentException ( ""start index must be zero or greater : "" + s ) ;', '}', 'throw new IllegalArgumentException ( ""start index must not be larger than end index : ""', 'start = s ;', '+ ""start = "" + s + "" , end = "" + e ) ;']","['outcomes [ i ] = ""default"" + "" - "" + BioCodec . CONTINUE ;', 'outcomes [ i ] = ""default"" + "" - "" + BilouCodec . CONTINUE ;', 'outcomes [ name . getStart ( ) ] = name . getType ( ) + "" - "" + BioCodec . START ;', 'outcomes [ name . getStart ( ) ] = name . getType ( ) + "" - "" + BilouCodec . START ;', 'outcomes [ i ] = name . getType ( ) + "" - "" + BioCodec . CONTINUE ;', 'Arrays . fill ( outcomes , BilouCodec . OTHER ) ;', 'else if ( chunkTag . endsWith ( BioCodec . CONTINUE ) ) {', 'outcomes [ name . getStart ( ) ] = ""default"" + "" - "" + BilouCodec . START ;', 'outcomes [ name . getStart ( ) ] = ""default"" + "" - "" + BioCodec . START ;', 'if ( chunkTag . endsWith ( BilouCodec . START ) ) {']","['this . setSmoothing ( smoothing ) ;', 'LOG LIKELIHOOD THRESHOLD DEFAULT + "" instead"" ) ;', 'private static final double SMOOTHING OBSERVATION = 0 . 1 ;', 'private static final boolean GAUSSIAN SMOOTHING DEFAULT = false ;', 'public MaxentModel doTrain ( DataIndexer indexer ) throws IOException {', 'trainingParameters . put ( LOG LIKELIHOOD THRESHOLD PARAM ,', 'int iterations = getIterations ( ) ;', '}', 'model = trainModel ( iterations , indexer , threads ) ;', 'int threads = trainingParameters . getIntParameter ( TrainingParameters . THREADS PARAM , 1 ) ;']","['import java . lang . annotation . Documented ;', 'public @ interface Experimental {', '}', '@ Documented', 'package opennlp . tools . util . java ;']","['return vector [ index ] ;', 'public FloatBuffer toFloatBuffer ( ) {', 'for ( int i = 0 ; i < floatVector . length ; i + + ) {', 'return toDoubleBuffer ( ) . array ( ) ;', 'public double getAsDouble ( int index ) {', 'floatVector [ i ] = ( float ) vector [ i ] ;', '}', 'package opennlp . tools . util . wordvector ;', 'public WordVectorType getDataType ( ) {', 'float [ ] floatVector = new float [ vector . length ] ;']","['private static final long serialVersionUID = 1L ;', '@ SuppressWarnings ( ""serial"" )', 'private static final long serialVersionUID = 1L ;', 'private static final long serialVersionUID = 1L ;', 'private static final long serialVersionUID = 1L ;', 'private static final long serialVersionUID = 1L ;', 'private static final long serialVersionUID = 1L ;', 'private static final long serialVersionUID = 1L ;', 'private static final long serialVersionUID = 1L ;', 'private static final long serialVersionUID = 1L ;']","['this . channel = null ;', 'if ( in ! = null ) {', 'import java . nio . channels . Channels ;', 'in = new BufferedReader ( new InputStreamReader ( inputStreamFactory . createInputStream ( ) ,', 'in . reset ( ) ;', 'Objects . requireNonNull ( inputStreamFactory , ""inputStreamFactory must not be null!"" ) ;', 'in = new BufferedReader ( new InputStreamReader ( inputStreamFactory . createInputStream ( ) ,', 'this . encoding = charset ;', '} else if ( channel ! = null ) {', 'import java . util . Objects ;']","['if ( spans [ nameIndex ] . getStart ( ) = = tokenIndex ) {', 'public class ChunkSample implements Serializable {', 'for ( int nameIndex = 0 ; nameIndex < spans . length ; nameIndex + + ) {', 'for ( Span span : spans ) {', 'result . append ( "" [ "" ) . append ( spans [ nameIndex ] . getType ( ) ) . append ( "" "" ) ;', 'if ( span . getStart ( ) = = tokenIndex ) {', 'if ( spans [ nameIndex ] . getEnd ( ) = = tokenIndex ) {', 'import java . io . Serializable ;', 'public class ChunkSample {', 'if ( span . getEnd ( ) = = sentence . size ( ) ) {']","['String modified = EMOJI REGEX . matcher ( text ) . replaceAll ( "" "" ) ;', 'return EMOJI REGEX . matcher ( text ) . replaceAll ( "" "" ) ;', 'return modified ;']","['TwentyNewsgroupSampleStreamFactory . registerFactory ( ) ;', 'import opennlp . tools . formats . TwentyNewsgroupSampleStreamFactory ;', 'catFileTupleIterator = catFileMap . entrySet ( ) . iterator ( ) ;', 'package opennlp . tools . formats ;', '}', 'for ( Path file : Files . newDirectoryStream ( dir ) ) {', 'if ( catFileTupleIterator . hasNext ( ) ) {', 'this . tokenizer = tokenizer ;', 'import java . nio . file . Files ;', '@ Override']","['import opennlp . tools . formats . LeipzigDocumentSampleStreamFactory ;', 'LeipzigDocumentSampleStreamFactory . registerFactory ( ) ;', 'List < String > tokensList = new ArrayList < > ( ) ;', 'this ( language , sentencesPerDocument , SimpleTokenizer . INSTANCE , in ) ;', 'package opennlp . tools . formats ;', 'import opennlp . tools . tokenize . SimpleTokenizer ;', 'tokensList . addAll ( Arrays . asList ( tokens ) . subList ( 1 , tokens . length ) ) ;', 'super ( new PlainTextByLineStream ( in , StandardCharsets . UTF 8 ) ) ;', '}', 'this . tokenizer = tokenizer ;']","['int [ ] [ ] offsets ;', 'public String [ ] texts ;', 'String [ ] texts ;', 'public String type ;', 'String type ;', 'public int [ ] [ ] offsets ;']","['throw new RuntimeException ( String . format ( ""name spans % s and % s are overlapped"" ,', 'this . names . get ( i - 1 ) , this . names . get ( i ) , id ) ) ;', 'this . names . get ( i - 1 ) , this . names . get ( i ) ) ) ;', 'throw new RuntimeException ( String . format ( ""name spans % s and % s are overlapped in file : % s"" ,']","['try ( FileEventStream fes = new FileEventStream ( tmp ) ) {', 'import java . io . DataInputStream ;', 'private int computeEventCounts ( ObjectStream < Event > eventStream , Writer eventStore ,', '}', 'import java . io . OutputStreamWriter ;', 'public EventStream ( File file ) throws IOException {', 'import java . io . Writer ;', 'try ( HashSumEventStream readStream = new HashSumEventStream ( new EventStream ( tmp ) ) ) {', 'import java . io . BufferedWriter ;', 'eventStore . writeFloat ( value ) ;']","['dictGram [ 0 ] = lex ;', 'if ( dict = = null | | !dict . contains ( new StringList ( lex ) ) ) {', 'if ( dict = = null | | !dict . contains ( new StringList ( dictGram ) ) ) {', 'private String [ ] dictGram ;', 'dictGram = new String [ 1 ] ;', 'import java . util . concurrent . Callable ;', 'Callable < Void > matching = ( ) - > {', 'public class DefaultPOSContextGeneratorTest {', 'public static final int NUMBER OF THREADS = 10 ;', '""p = tokenA"" ,']","['return FloatBuffer . wrap ( toFloatArray ( ) ) . asReadOnlyBuffer ( ) ;', 'return FloatBuffer . wrap ( floatVector ) . asReadOnlyBuffer ( ) ;', 'public FloatBuffer toFloatBuffer ( ) {', 'return DoubleBuffer . wrap ( vector ) . asReadOnlyBuffer ( ) ;', 'public double [ ] toDoubleArray ( ) {', 'public FloatBuffer toFloatBuffer ( ) {', 'return toDoubleBuffer ( ) . array ( ) ;', 'return floatVector ;', '}', 'public float [ ] toFloatArray ( ) {']","['private double [ ] vector ;', 'private final double [ ] vector ;', 'private float [ ] vector ;', 'private final float [ ] vector ;', 'public WordVector get ( CharSequence token ) {', 'return vectors . get ( token ) ;', 'return vectors . get ( token . toString ( ) ) ;', 'public WordVector get ( String token ) {', 'WordVector get ( CharSequence token ) ;', 'WordVector get ( String token ) ;']","['package opennlp . tools . formats . brat ;', 'public class AnnotatorNoteAnnotation extends BratAnnotation {', 'this . setNote ( note ) ;', 'private final String attachedId ;', '}', 'this . attachedId = attachedId ;', 'public String getAttachedId ( ) {', 'protected AnnotatorNoteAnnotation ( String id , String attachedId , String note ) {', 'return attachedId ;', 'super ( id , ""#AnnotationNote"" ) ;']","['tabFilePath . toFile ( ) . deleteOnExit ( ) ;', 'output . toFile ( ) . deleteOnExit ( ) ;', 'infoFilePath . toFile ( ) . deleteOnExit ( ) ;', 'output . toFile ( ) . deleteOnExit ( ) ;', 'Dictionary dic = Dictionary . read ( POSDictionayBuilderTest . createMorfologikDictionary ( ) ) ;', 'import java . nio . file . Path ;', 'Path output = POSDictionayBuilderTest . createMorfologikDictionary ( ) ;', 'output . toFile ( ) . deleteOnExit ( ) ;', 'Dictionary dic = Dictionary . read ( output ) ;', 'dictionary . toFile ( ) . deleteOnExit ( ) ;']","['}', 'NodeList childNodes = generatorElement . getChildNodes ( ) ;', 'import opennlp . tools . util . InvalidFormatException ;', 'extends GeneratorFactory . AbstractXmlFeatureGeneratorFactory', 'public AggregatedFeatureGeneratorFactory ( ) {', '@ Override', 'static void register ( Map < String , GeneratorFactory . XmlFeatureGeneratorFactory > factoryMap ) {', 'Node childNode = childNodes . item ( i ) ;', 'public AdaptiveFeatureGenerator create ( Element generatorElement ,', 'public AdaptiveFeatureGenerator create ( ) throws InvalidFormatException {']","['public CachedFeatureGenerator ( AdaptiveFeatureGenerator generator ) {', 'this . generator = generator ;', '@ Deprecated', '}', 'public AdaptiveFeatureGenerator getCachedFeatureGenerator ( ) {', 'contextsCache = new Cache < > ( 100 ) ;', 'return generator ;', 'int generators = 0 ;', 'new AggregatedFeatureGenerator ( generators . toArray (', 'throw new InvalidFormatException ( ""Unexpected element : "" + elementName ) ;']","['import opennlp . tools . util . StringList ;', '""next : "" + Arrays . toString ( predicted ) ) ;', 'System . out . println ( sample + "" - > prob : "" + probability + "" , next : "" + predicted ) ;', 'probability = nGramLanguageModel . calculateProbability ( tokens ) ;', 'predicted = nGramLanguageModel . predictNextTokens ( sample ) ;', 'predicted = nGramLanguageModel . predictNextTokens ( tokens ) ;', 'StringList sample = new StringList ( tokens ) ;', 'String [ ] predicted ;', 'StringList predicted ;', 'import java . util . Arrays ;']","['return generators . get ( 0 ) ;', 'throw new InvalidFormatException ( ""CachedFeatureGeneratorFactory cannot be specified manually . "" +', 'return new AggregatedFeatureGenerator ( generators . toArray (', '""Use cache = \\ ""true \\ "" attribute in featureGenerators element instead . "" ) ;', 'if ( featureGenerator instanceof CachedFeatureGenerator )', 'featureGenerator = generators . get ( 0 ) ;', 'if ( Boolean . parseBoolean ( generatorElement . getAttribute ( ""cache"" ) ) )', 'return new CachedFeatureGenerator ( featureGenerator ) ;', 'else', 'AdaptiveFeatureGenerator featureGenerator = null ;']","['package opennlp . tools . cmdline . tokenizer ;', 'public void missclassified ( TokenSample reference , TokenSample prediction ) {', 'import opennlp . tools . tokenize . TokenSample ;', 'public DetokenEvaluationErrorListener ( OutputStream outputStream ) {', 'printError ( reference , prediction ) ;', 'public DetokenEvaluationErrorListener ( ) {', '}', 'import opennlp . tools . util . eval . EvaluationMonitor ;', 'public class DetokenEvaluationErrorListener extends', 'import opennlp . tools . tokenize . TokenizerEvaluationMonitor ;']","['if ( ann instanceof SpanAnnotation ) {', 'public BratDocumentParser ( SentenceDetector sentenceDetector , Tokenizer tokenizer ,', 'if ( nameTypes ! = null & & nameTypes . size ( ) = = 0 ) {', 'return true ;', 'Set < String > nameTypes ) {', 'private final Set < String > nameTypes ;', '}', 'private boolean isSpanAnnotation ( BratAnnotation ann ) {', 'if ( ann instanceof SpanAnnotation & & ( nameTypes = = null | | nameTypes . contains ( ann . getType ( ) ) ) ) {', 'this ( sentenceDetector , tokenizer , null ) ;']","['if ( x [ maxIdx ] < x [ i ] )', 'public static double [ ] toDoubleArray ( List < Double > list ) {', 'double sum = 0 . 0 ;', '}', 'public static double l2norm ( double [ ] v ) {', 'double norm = 0 ;', 'return Double . NaN ;', 'for ( int i = 0 ; i < x . length ; i + + ) {', 'return arr ;', 'for ( int i = 0 ; i < vecA . length ; i + + ) {']","['if ( modelDistribution [ oi ] > modelDistribution [ max ] ) {', 'int max = ArrayMath . argmax ( modelDistribution ) ;', 'int max = 0 ;', 'import opennlp . tools . ml . ArrayMath ;', '}', 'max = oi ;', 'for ( int oi = 1 ; oi < numOutcomes ; oi + + ) {', 'return outcomeNames [ best ] ;', 'return outcomeNames [ ArrayMath . argmax ( ocs ) ] ;', 'if ( ocs [ i ] > ocs [ best ] ) best = i ;']","['if ( pattern . isAllLowerCaseLetter ( ) ) {', 'if ( pattern . isAllHiragana ( ) ) {', '}', 'else if ( pattern . isAllLowerCaseLetter ( ) ) {', 'else if ( pattern . isAllKatakana ( ) ) {', 'feat = ""jah"" ;', 'feat = ""jak"" ;', 'private static final int CONTAINS UPPERCASE = 0x1 < < 11 ;', 'private static final int CONTAINS LETTERS = 0x1 < < 12 ;', 'private static final int CONTAINS PERIOD = 0x1 < < 5 ;']","['if ( !values [ i ] . getCoveredText ( line ) . toString ( ) . contains ( "" ; "" ) ) {', 'return new SpanAnnotation ( id , type , fragments . toArray ( new Span [ fragments . size ( ) ] ) , coveredText ) ;', 'return new SpanAnnotation ( id , type , new Span ( parseInt ( values [ BEGIN OFFSET ]', 'import java . util . ArrayList ;', 'int endOffset = - 1 ;', 'String [ ] parts = values [ i ] . getCoveredText ( line ) . toString ( ) . split ( "" ; "" ) ;', '. getCoveredText ( line ) . toString ( ) ) , endOffset , type ) , coveredText ) ;', 'fragments . add ( new Span ( beginIndex , endOffset , type ) ) ;', 'beginIndex = parseInt ( parts [ 1 ] ) ;', '}']","['Assert . assertTrue ( ngrams . contains ( ""g - a - i - n"" ) ) ;', 'final int window = 2 ;', 'Assert . assertTrue ( ngrams . contains ( ""t - - a - g"" ) ) ;', '@ Test', 'public void generateListTest ( ) {', 'final int window = 3 ;', 'Assert . assertTrue ( ngrams . contains ( ""s - t - - a"" ) ) ;', 'Assert . assertEquals ( ( ""T - e - s - t"" ) , ngrams . get ( 0 ) ) ;', 'Assert . assertTrue ( ngrams . contains ( ""T - e - s - t"" ) ) ;', 'Assert . assertEquals ( ( ""a - g - a - i"" ) , ngrams . get ( 5 ) ) ;']","['gram = gram . substring ( 0 , gram . lastIndexOf ( separator ) ) ;', 'gram = gram . substring ( 0 , gram . lastIndexOf ( separator ) ) ;', 'if ( ( i + n ) < = input . size ( ) ) {', 'for ( int i = 0 ; i < input . length - ( n - 1 ) ; i + + ) {', 'for ( int i = 0 ; i < input . length - ( n - 2 ) ; i + + ) {', 'sb . append ( input [ x ] ) ;', 'if ( ( i + n ) < = input . length ) {', 'for ( int x = i ; x < ( n + i ) ; x + + ) {', 'sb . append ( input [ x ] ) ;', 'String gram = sb . toString ( ) ;']","['double value = 1 ;', 'value = values [ ci ] ;', 'if ( values ! = null ) {', '}', 'int oid = activeOutcomes [ ai ] ;', 'prior [ oid ] + = activeParameters [ ai ] * value ;', 'Context predParams = context [ ci ] ;', 'public static void sumFeatures ( Context [ ] context , float [ ] values , double [ ] prior ) {', 'if ( context [ ci ] ! = null ) {', 'int [ ] activeOutcomes = predParams . getOutcomes ( ) ;']","['return getClass ( ) = = o . getClass ( ) & & s . equals ( ( ( Atom ) o ) . s ) ;', 'return getClass ( ) = = o . getClass ( ) & & children . equals ( ( ( OneOf ) o ) . children ) ;', 'return ""GlobNodeSequence"" + children ;', 'public Atom ( String s ) {', 'package org . apache . parquet . glob ;', 'return children . hashCode ( ) ;', 'return ""Atom ( "" + s + "" ) "" ;', 'return ""OneOf"" + children ;', 'public int hashCode ( ) {', 'T visit ( Atom atom ) ;']","['MessageType convertedMessageType = visitor . getConvertedMessageType ( ) ;', 'MessageType convertedMessageType = visitor . getConvertedMessageType ( ) ;']","['repeatedType . asGroupType ( ) . getFieldCount ( ) > 1 ) {', 'elementSchema . getType ( ) = = Schema . Type . RECORD & &', 'elementSchema . getFields ( ) . get ( 0 ) . name ( ) . equals (', 'return true ;', 'repeatedType . asGroupType ( ) . getFieldName ( 0 ) ) ) {', 'elementSchema . getFields ( ) . size ( ) = = 1 & &', 'private static boolean isElementType ( Type repeatedType , Schema elementSchema ) {', 'Schema nonNullValueSchema = AvroSchemaConverter . getNonNull ( mapSchema . getValueType ( ) ) ;', 'parent . add ( ( ( ByteArrayList ) container ) . toByteArray ( ) ) ;', 'key = value . toStringUsingUTF8 ( ) ;']","['static MemoryManager getMemoryManager ( ) {', 'public static MemoryManager getMemoryManager ( ) {']","['currentName = currentName + "" tuple"" ;', '. accept ( new ThriftSchemaConvertVisitor ( FieldProjectionFilter . ALL COLUMNS , false ) , keyState ) ;', 'currentFieldPath . push ( mapValueField ) ;', '. accept ( new ThriftSchemaConvertVisitor ( FieldProjectionFilter . ALL COLUMNS , false ) , childState ) ;', 'currentType = mapType ( currentRepetition , currentName ,', 'return visitPrimitiveType ( BINARY , UTF8 , state ) ;', 'mapKeyField . getType ( ) . accept ( this ) ;', 'new ThriftSchemaConvertVisitor ( new KeepOnlyFirstPrimitiveFilter ( ) , true ) , childState ) ;', 'currentName = oldName ;', 'if ( isUnion & & !converted . isKeep ( ) ) {']","['public PrimitiveBuilder < P > length ( int length ) {', 'return buildGroup ( repetition ) . as ( OriginalType . LIST )', 'public GroupBuilder < P > addField ( Type type ) {', '""Only one key type can be built with a ValueBuilder"" ) ;', 'public GroupBuilder < GroupBuilder < P > > group ( Type . Repetition repetition ) {', 'return mapElement ( Type . Repetition . OPTIONAL ) ;', 'public T id ( int id ) {', 'public MapBuilder < THIS > optionalMap ( ) {', 'public abstract static class Builder < T extends Builder , P > {', 'public PrimitiveBuilder < THIS > repeated (']","['throw new IllegalArgumentException ( ""Cannot write "" +', 'for ( Object elt : array ) {', 'for ( Object elt : array ) {', 'for ( Object element : array ) {', '""Cannot write as long array : "" + arrayClass . getName ( ) ) ;', 'writeValue ( type . getType ( 0 ) , schema . getElementType ( ) , element ) ;', 'for ( char element : array ) {', 'writeValue ( schema . getType ( 0 ) , avroSchema . getElementType ( ) , elt ) ;', 'case FLOAT :', 'throw new IllegalArgumentException ( ""Cannot write "" +']","['props . load ( in ) ;', 'import java . io . IOException ;', 'public class VersionGenerator {', 'if ( !parent . mkdirs ( ) ) {', '"" \\ n"" +', 'if ( in = = null ) {', 'File srcFile = new File ( args [ 0 ] + "" / org / apache / parquet / Version . java"" ) ;', 'writer . close ( ) ;', 'writer . write ( s ) ;', 'public void run ( ) throws IOException {']","['CodecFactory . BytesCompressor compressor = codecFactory . getCompressor ( compressionCodecName , 0 ) ;', 'CodecFactory codecFactory = new CodecFactory ( conf ) ;', 'blockSize ,', 'public SELF enableValidation ( ) {', 'writeSupport ,', 'boolean enableDictionary ,', 'MessageType schema = writeContext . getSchema ( ) ;', 'int maxPaddingSize ) throws IOException {', 'pageSize ,', 'pageSize ,']","['SemanticVersion semver = SemanticVersion . parse ( version . semver ) ;', 'LOG . warn ( ""Ignoring statistics because created by could not be parsed ( see PARQUET - 251 ) : "" + createdBy , e ) ;', 'public static boolean shouldIgnoreStatistics ( String createdBy , PrimitiveTypeName columnType ) {', 'LOG . info ( ""Ignoring statistics because this file was created prior to ""', 'LOG . warn ( ""Ignoring statistics because created by did not contain a semver ( see PARQUET - 251 ) : "" + createdBy ) ;', 'return false ;', 'if ( columnType ! = PrimitiveTypeName . BINARY & & columnType ! = PrimitiveTypeName . FIXED LEN BYTE ARRAY ) {', 'import org . apache . parquet . VersionParser . VersionParseException ;', '+ "" , see PARQUET - 251"" ) ;', '} catch ( SemanticVersionParseException e ) {']","['return ParquetReader . builder ( new AvroReadSupport < T > ( ) , file ) ;', 'public static class Builder < T > extends ParquetReader . Builder {', 'this . enableCompatibility = enableCompatibility ;', 'conf . setBoolean ( AvroReadSupport . AVRO COMPATIBILITY , false ) ;', 'model . getClass ( ) ! = SpecificData . class ) {', 'public Builder < T > withDataModel ( GenericData model ) {', 'this . model = model ;', 'this . enableCompatibility = false ;', 'private boolean enableCompatibility = true ;', 'private GenericData model = null ;']","['import java . util . Map ;', 'checkDeltaByteArrayProblem ( footer . getFileMetaData ( ) , configuration , filteredBlocks . get ( 0 ) ) ;', '}', 'for ( ColumnChunkMetaData column : block . getColumns ( ) ) {', '""PARQUET - 246 : to read safely , set "" + SPLIT FILES + "" to false"" ) ;', 'import org . apache . parquet . io . ParquetDecodingException ;', 'for ( Encoding encoding : encodings ) {', 'if ( CorruptDeltaByteArrays . requiresSequentialReads ( meta . getCreatedBy ( ) , encoding ) ) {', 'if ( conf . getBoolean ( ParquetInputFormat . SPLIT FILES , true ) ) {', 'encodings . addAll ( column . getEncodings ( ) ) ;']","['cmp = Integer . compare ( patch , o . patch ) ;', 'return compareBooleans ( o . prerelease , prerelease ) ;', 'cmp = Integer . compare ( minor , o . minor ) ;', 'int compareBooleans ( boolean x , boolean y ) {', 'cmp = Integer . compare ( major , o . major ) ;', 'int compareIntegers ( int x , int y ) {', 'return Boolean . compare ( o . prerelease , prerelease ) ;', '}', 'cmp = compareIntegers ( minor , o . minor ) ;', 'return ( x < y ) ? - 1 : ( ( x = = y ) ? 0 : 1 ) ;']","['ParquetMetadata metaData = ParquetFileReader . readFooter ( conf , inpath ) ;', 'import org . apache . parquet . format . converter . ParquetMetadataConverter ;', 'ParquetMetadata metaData = ParquetFileReader . readFooter ( conf , inpath , NO FILTER ) ;', 'import static org . apache . parquet . format . converter . ParquetMetadataConverter . NO FILTER ;']","['if ( modelName ! = null ) {', 'finalMetadata . put ( ParquetWriter . OBJECT MODEL NAME PROP , modelName ) ;', 'String modelName = writeSupport . getName ( ) ;', '}']","['if ( modelName ! = null ) {', 'finalMetadata . put ( ParquetWriter . OBJECT MODEL NAME PROP , modelName ) ;', 'String modelName = writeSupport . getName ( ) ;', '}']","['WriterVersion writerVersion = getWriterVersion ( conf ) ;', 'ParquetProperties . DEFAULT MINIMUM RECORD COUNT FOR CHECK ) ;', 'boolean enableDictionary = getEnableDictionary ( conf ) ;', 'import org . apache . commons . math3 . analysis . function . Add ;', 'return configuration . getInt ( PAGE SIZE , DEFAULT PAGE SIZE ) ;', 'if ( INFO ) LOG . info ( ""Min row count for page size check is : "" + props . getMaxRowCountForPageSizeCheck ( ) ) ;', 'String writerVersion = configuration . get ( WRITER VERSION , WriterVersion . PARQUET 1 0 . toString ( ) ) ;', 'CodecFactory codecFactory = new CodecFactory ( conf ) ;', 'blockSize , pageSize ,', 'codecFactory . getCompressor ( codec , props . getPageSizeThreshold ( ) ) ,']","['WriterVersion writerVersion = getWriterVersion ( conf ) ;', 'ParquetProperties . DEFAULT MINIMUM RECORD COUNT FOR CHECK ) ;', 'boolean enableDictionary = getEnableDictionary ( conf ) ;', 'if ( INFO ) LOG . info ( ""Min row count for page size check is : "" + props . getMaxRowCountForPageSizeCheck ( ) ) ;', 'return configuration . getInt ( PAGE SIZE , DEFAULT PAGE SIZE ) ;', 'CodecFactory codecFactory = new CodecFactory ( conf , props . getPageSizeThreshold ( ) ) ;', 'String writerVersion = configuration . get ( WRITER VERSION , WriterVersion . PARQUET 1 0 . toString ( ) ) ;', 'DICTIONARY PAGE SIZE , ParquetProperties . DEFAULT DICTIONARY PAGE SIZE ) ;', 'blockSize , pageSize ,', 'public static final String ESTIMATE PAGE SIZE CHECK = ""parquet . page . size . check . estimate"" ;']","['private PrimitiveTypeName currentChunkType ;', 'private static void copy ( FSDataInputStream from , FSDataOutputStream to ,', 'private long currentChunkFirstDataPage ;', 'long start , long length ) throws IOException {', 'private CompressionCodecName currentChunkCodec ;', 'private long currentRecordCount ;', 'private long currentRecordCount ;', 'long blockCompressedSize = 0 ;', 'private BlockMetaData currentBlock ;', 'endBlock ( ) ;']","['private PrimitiveTypeName currentChunkType ;', 'private static void copy ( FSDataInputStream from , FSDataOutputStream to ,', 'private long currentChunkFirstDataPage ;', 'long start , long length ) throws IOException {', 'private CompressionCodecName currentChunkCodec ;', 'private long currentRecordCount ;', 'private long currentRecordCount ;', 'long blockCompressedSize = 0 ;', 'private BlockMetaData currentBlock ;', 'endBlock ( ) ;']","['repeatedType . asGroupType ( ) . getFieldName ( 0 ) ) ) {', 'Set < String > fieldNames = new HashSet < String > ( ) ;', 'elementSchema . getFields ( ) . size ( ) = = 1 & &', 'fieldNames . add ( field . name ( ) ) ;', 'elementSchema . getType ( ) = = Schema . Type . RECORD & &', 'return fieldNames . contains ( repeatedType . asGroupType ( ) . getFieldName ( 0 ) ) ;', 'elementSchema . getFields ( ) . get ( 0 ) . name ( ) . equals (', 'for ( Schema . Field field : elementSchema . getFields ( ) ) {', 'return true ;', '}']","['footer . getBlocks ( ) , footer . getFileMetaData ( ) . getSchema ( ) . getColumns ( ) ) ;', '}', 'static ParquetFileReader open ( Configuration conf , Path file ) throws IOException {', 'codecFactory . release ( ) ;', 'throw new RuntimeException ( file . getPath ( ) + "" is not a Parquet file . expected magic number at tail "" + Arrays . toString ( MAGIC ) + "" but found "" + Arrays . toString ( magic ) ) ;', 'if ( codecFactory ! = null ) {', 'return new ParquetFileReader ( conf , footer . getFileMetaData ( ) , file ,', 'this . f = fs . open ( file ) ;', 'byte [ ] magic = new byte [ MAGIC . length ] ;', 'FSDataInputStream in = fileSystem . open ( file . getPath ( ) ) ;']","['cache . put ( dotPath , dict ) ;', 'for ( ColumnChunkMetaData column : block . getColumns ( ) ) {', 'ColumnChunkMetaData column = columns . get ( dotPath ) ;', 'DictionaryPage dict = hasDictionaryPage ( column ) ? reader . readDictionary ( column ) : null ;', 'import java . io . IOException ;', 'this . rowGroup = rowGroup ;', 'import org . apache . parquet . column . ColumnDescriptor ;', 'import static org . apache . parquet . column . Encoding . RLE DICTIONARY ;', 'String dotPath = Strings . join ( descriptor . getPath ( ) , "" . "" ) ;', 'import org . apache . parquet . Strings ;']","['return c ;', 'if ( hasNulls ( meta ) ) {', 'ColumnChunkMetaData columnChunk = getColumnChunk ( filterColumn . getColumnPath ( ) ) ;', 'return !hasNulls ( meta ) ;', 'T value = gtEq . getValue ( ) ;', 'if ( isAllNulls ( meta ) ) {', 'checkArgument ( c ! = null , ""Column "" + columnPath . toDotString ( ) + "" not found in schema!"" ) ;', 'if ( value = = null ) {', 'return !hasNulls ( columnChunk ) ;', 'T value = gtEq . getValue ( ) ;']","['return c ;', 'if ( hasNulls ( meta ) ) {', 'ColumnChunkMetaData columnChunk = getColumnChunk ( filterColumn . getColumnPath ( ) ) ;', 'return !hasNulls ( meta ) ;', 'T value = gtEq . getValue ( ) ;', 'if ( isAllNulls ( meta ) ) {', 'checkArgument ( c ! = null , ""Column "" + columnPath . toDotString ( ) + "" not found in schema!"" ) ;', 'if ( value = = null ) {', 'return !hasNulls ( columnChunk ) ;', 'T value = gtEq . getValue ( ) ;']","['this . footer = readFooter ( fileStatus , f , filter ) ;', 'public static final ParquetMetadata readFooter ( long fileLen , String filePath , FSDataInputStream f , MetadataFilter filter ) throws IOException {', 'if ( l < MAGIC . length + FOOTER LENGTH SIZE + MAGIC . length ) {', 'return readFooter ( file . getLen ( ) , file . getPath ( ) . toString ( ) , in , filter ) ;', 'long l = file . getLen ( ) ;', 'throw new RuntimeException ( filePath + "" is not a Parquet file . expected magic number at tail "" + Arrays . toString ( MAGIC ) + "" but found "" + Arrays . toString ( magic ) ) ;', 'throw new RuntimeException ( file . getPath ( ) + "" is not a Parquet file . expected magic number at tail "" + Arrays . toString ( MAGIC ) + "" but found "" + Arrays . toString ( magic ) ) ;', 'this . footer = readFooter ( fileStatus . getLen ( ) , fileStatus . getPath ( ) . toString ( ) , f , SKIP ROW GROUPS ) ;', 'throw new RuntimeException ( file . getPath ( ) + "" is not a Parquet file ( too small ) "" ) ;', 'LOG . debug ( ""File length "" + fileLen ) ;']","['this . footer = readFooter ( fileStatus , f , filter ) ;', 'public static final ParquetMetadata readFooter ( long fileLen , String filePath , FSDataInputStream f , MetadataFilter filter ) throws IOException {', 'if ( l < MAGIC . length + FOOTER LENGTH SIZE + MAGIC . length ) {', 'return readFooter ( file . getLen ( ) , file . getPath ( ) . toString ( ) , in , filter ) ;', 'long l = file . getLen ( ) ;', 'throw new RuntimeException ( filePath + "" is not a Parquet file . expected magic number at tail "" + Arrays . toString ( MAGIC ) + "" but found "" + Arrays . toString ( magic ) ) ;', 'throw new RuntimeException ( file . getPath ( ) + "" is not a Parquet file . expected magic number at tail "" + Arrays . toString ( MAGIC ) + "" but found "" + Arrays . toString ( magic ) ) ;', 'this . footer = readFooter ( fileStatus . getLen ( ) , fileStatus . getPath ( ) . toString ( ) , f , SKIP ROW GROUPS ) ;', 'throw new RuntimeException ( file . getPath ( ) + "" is not a Parquet file ( too small ) "" ) ;', 'LOG . debug ( ""File length "" + fileLen ) ;']","['stats = = null ? """" : String . valueOf ( stats . getNumNulls ( ) ) ,', 'humanReadable ( perValue ) , stats = = null ? """" : String . valueOf ( stats . getNumNulls ( ) ) ,', 'console . info ( String . format ( "" % - "" + size + ""s % - 9s % - 9s % - 9s % - 10s % - 7s % s"" ,', 'private int maxSize ( Iterable < String > strings ) {', 'long uncompressedSize = rowGroup . getTotalByteSize ( ) ;', 'import org . apache . parquet . cli . BaseCommand ;', 'import org . apache . parquet . column . statistics . Statistics ;', 'humanReadable ( ( ( float ) compressedSize ) / rowCount ) ,', 'int size = 0 ;', '@ Parameter ( description = "" < parquet path > "" )']","['useStatsFilter ( conf . getBoolean ( DICTIONARY FILTERING ENABLED , true ) ) ;', 'useDictionaryFilter ( conf . getBoolean ( STATS FILTERING ENABLED , true ) ) ;', 'import static org . apache . parquet . hadoop . UnmaterializableRecordCounter . BAD RECORD THRESHOLD CONF KEY ;', 'boolean useStatsFilter ,', 'ByteBufferAllocator allocator ,', 'Configuration conf ) {', 'return conf ;', 'CompressionCodecFactory codecFactory ,', 'import static org . apache . parquet . hadoop . ParquetInputFormat . DICTIONARY FILTERING ENABLED ;', 'public class HadoopReadOptions extends ParquetReadOptions {']","['case INT32 :', 'else if ( !this . isEmpty ( ) )', 'if ( this . getClass ( ) = = stats . getClass ( ) ) {', 'if ( this . hasNonNullValue ( ) )', 'case INT96 :', 'return String . format ( ""min : % s , max : % s , num nulls : % d"" , minAsString ( ) , maxAsString ( ) , this . getNumNulls ( ) ) ;', 'public Statistics ( ) {', 'public String maxAsString ( ) {', 'case FLOAT :', 'return new FloatStatistics ( primitive ) ;']","['stats . setMinMaxFromBytes ( formatStats . min . array ( ) , formatStats . max . array ( ) ) ;', 'if ( formatStats . isSetNull count ( ) ) {', 'return stats ;', 'statsBuilder . withNumNulls ( formatStats . null count ) ;', 'org . apache . parquet . column . statistics . Statistics stats = org . apache . parquet . column . statistics . Statistics . createStats ( type ) ;', 'org . apache . parquet . column . statistics . Statistics . getBuilder ( type ) ;', 'stats . setMinMaxFromBytes ( min , max ) ;', '}', 'stats . setNumNulls ( formatStats . null count ) ;', 'statsBuilder . withMin ( formatStats . min . array ( ) ) ;']","['switch ( type ) {', 'LogicalTypeAnnotation newLogicalType = getOriginalType ( schemaElement . logicalType ) ;', 'ConvertedType getConvertedType ( OriginalType type ) {', 'childBuilder . as ( getOriginalType ( schemaElement . converted type , schemaElement ) ) ;', 'return OriginalType . UINT 32 ;', 'return LogicalTypeAnnotation . MapKeyValueTypeAnnotation . getInstance ( ) ;', 'return OriginalType . DECIMAL ;', 'if ( !originalType . equals ( newLogicalType ) ) {', 'return OriginalType . INT 8 ;', 'case TIME MILLIS :']","['} ) ) ;', 'public void flush ( ) throws IOException { }', '@ Override public void write ( byte [ ] b ) throws IOException { }', '} ) ;', '@ Override public void close ( ) throws IOException { }', 'public void write ( byte [ ] b , int off , int len ) throws IOException { }', '@ Override public void flush ( ) throws IOException { }', 'public void close ( ) throws IOException { }', '@ Override public void write ( byte [ ] b , int off , int len ) throws IOException { }', 'PrintStream VoidStream = new PrintStream ( new OutputStream ( ) {']","['long [ ] getRowGroupOffsets ( ) {', 'public long getEnd ( ) {', 'String getRequestedSchema ( ) {', 'public String getRequestedSchema ( ) {', 'final public void write ( DataOutput hout ) throws IOException {', 'public void readFields ( DataInput hin ) throws IOException {', 'final public void readFields ( DataInput hin ) throws IOException {', 'public void write ( DataOutput hout ) throws IOException {', 'Map < String , String > getReadSupportMetadata ( ) {', 'public long [ ] getRowGroupOffsets ( ) {']","['public FieldStringConverter ( ParentValueContainer parent ) {', 'private String [ ] dict ;', 'return new FieldStringConverter ( parent ) ;', 'import parquet . column . Dictionary ;', 'public boolean hasDictionarySupport ( ) {', 'dict [ i ] = dictionary . decodeToBinary ( i ) . toStringUsingUTF8 ( ) ;', 'dict = new String [ dictionary . getMaxId ( ) + 1 ] ;', 'parent . add ( dict [ dictionaryId ] ) ;', 'this . dictionarySupport = dictionarySupport ;', '}']","['parent . add ( new HashMap < String , Object > ( buffer ) ) ;', 'import java . util . LinkedHashMap ;', 'parent . add ( new LinkedHashMap < String , Object > ( buffer ) ) ;', 'String fb = ( String ) tuple . get ( 1 ) ;', 'int bi ;', 'String fa = ( String ) tuple . get ( 0 ) ;', 'assertEquals ( ""b"" , schema . getField ( 0 ) . alias ) ;', 'assertEquals ( ""a"" , schema . getField ( 0 ) . alias ) ;', 'bi = 0 ;', 'assertEquals ( ""b"" , schema . getField ( 1 ) . alias ) ;']","['import parquet . hadoop . metadata . FileMetaData ;', 'return configuration . getBoolean ( TASK SIDE METADATA , TRUE ) ;', 'return configuration . getBoolean ( TASK SIDE METADATA , Boolean . FALSE ) ;', 'import static java . lang . Boolean . TRUE ;']","['throw new AssertionError ( ""fail verifyAllFilters ( metadata ( "" + Arrays . toString ( rgs ) + "" ) , "" + splitSize + "" ) "" , e ) ;', 'throw new AssertionError ( ""fail verifyAllFilters ( metadata ( "" + Arrays . toString ( rgs ) + "" ) , "" + splitSize + "" ) "" , e ) ;', 'setInput ( location , job ) ;']","['public class AvroParquetInputFormat extends ParquetInputFormat < IndexedRecord > {', 'public class AvroParquetInputFormat < T > extends ParquetInputFormat < T > {']","['buf . putInt ( julianDay ) ;', 'return new NanoTime ( julianDay , timeOfDayNanos ) ;', 'return new NanoTime ( buf . getInt ( ) , buf . getLong ( ) ) ;', 'buf . putInt ( julianDay ) ;', 'long timeOfDayNanos = buf . getLong ( ) ;', 'import java . nio . ByteOrder ;', 'int julianDay = buf . getInt ( ) ;', 'buf . order ( ByteOrder . LITTLE ENDIAN ) ;']","['case DOUBLE :', 'return true ;', '}', 'case DOUBLE :', 'return new PlainFloatDictionary ( dictionaryPage ) ;', 'return RLE DICTIONARY . getDictionaryBasedValuesReader ( descriptor , valuesType , dictionary ) ;', 'case FLOAT :', '}', 'return new PlainBinaryDictionary ( dictionaryPage , descriptor . getTypeLength ( ) ) ;', 'return new PlainFloatDictionary ( dictionaryPage ) ;']","['reader . close ( ) ;', 'if ( reader ! = null ) {', '}', 'reader . close ( ) ;']","['public ScroogeSchemaConversionException ( String message , Throwable cause ) {', 'class ScroogeSchemaConversionException extends ParquetRuntimeException {', '}', 'super ( message ) ;', 'public ScroogeSchemaConversionException ( String message ) {', 'super ( message , cause ) ;', 'package parquet . scrooge ;', 'import parquet . ParquetRuntimeException ;', 'return f . method ( ) . getReturnType ( ) = = scala . Option . class ;', 'Class < ? extends ThriftStructCodec > klass = c . getClass ( ) ;']","['. withDescription ( ""Disable color output even if supported"" )', '. withDescription ( ""Enable debug output"" )']","['throw new AssertionError ( ""fail verifyAllFilters ( metadata ( "" + Arrays . toString ( rgs ) + "" ) , "" + splitSize + "" ) "" , e ) ;', 'throw ( AssertionError ) new AssertionError ( ""fail verifyAllFilters ( metadata ( "" + Arrays . toString ( rgs ) + "" ) , "" + splitSize + "" ) "" ) . initCause ( e ) ;']","['throw new ParquetEncodingException ( path + "" invalid : all the files must be contained in the root "" + root ) ;', 'String footerPath = footer . getFile ( ) . toUri ( ) . getPath ( ) ;', 'while ( path . startsWith ( "" / "" ) ) {', 'block . setPath ( footerPath ) ;', 'block . setPath ( path ) ;', 'footerPath = footerPath . substring ( rootPath . length ( ) ) ;', 'String rootPath = root . toString ( ) ;', 'if ( !footerPath . startsWith ( rootPath ) ) {', 'if ( !path . startsWith ( rootPath ) ) {', 'static ParquetMetadata mergeFooters ( Path root , List < Footer > footers ) {']","['List < FileStatus > statuses = Arrays . asList ( fs . listStatus ( file ) ) ;', 'return !p . getName ( ) . startsWith ( "" "" ) & & !p . getName ( ) . startsWith ( "" . "" ) ;', '} ) ) ;', '}', 'public boolean accept ( Path p ) {', 'import org . apache . hadoop . fs . PathFilter ;', '@ Override', 'List < FileStatus > statuses = Arrays . asList ( fs . listStatus ( file , new PathFilter ( ) {']","['LOG . info ( ""time spent so far "" + percentReading + "" % reading ( "" + totalTimeSpentReadingBytes + "" ms ) and "" + percentProcessing + "" % processing ( "" + totalTimeSpentProcessingRecords + "" ms ) "" ) ;', 'if ( Log . INFO ) {', 'LOG . info ( ""block read in memory in "" + timeSpentReading + "" ms . row count = "" + pages . getRowCount ( ) ) ;', 'if ( Log . INFO ) LOG . info ( ""block read in memory in "" + timeSpentReading + "" ms . row count = "" + pages . getRowCount ( ) ) ;', 'long totalTime = totalTimeSpentProcessingRecords + totalTimeSpentReadingBytes ;', 'final long percentProcessing = 100 * totalTimeSpentProcessingRecords / totalTime ;', 'long percentProcessing = 100 * totalTimeSpentProcessingRecords / totalTime ;', 'if ( totalTime ! = 0 ) {', '}', '}']","['return and . getLeft ( ) . accept ( this ) & & and . getRight ( ) . accept ( this ) ;', 'return and . getLeft ( ) . accept ( this ) | | and . getRight ( ) . accept ( this ) ;', 'assertFalse ( canDrop ( and ( yes , no ) , columnMetas ) ) ;', 'assertTrue ( canDrop ( and ( no , yes ) , columnMetas ) ) ;', 'assertFalse ( canDrop ( and ( no , yes ) , columnMetas ) ) ;', 'assertTrue ( canDrop ( and ( yes , no ) , columnMetas ) ) ;']","['return new UserDefined < T , U > ( column , clazz ) ;', 'public static < T extends Comparable < T > , U extends UserDefinedPredicate < T > & Serializable >', 'UserDefined < T , U > userDefined ( Column < T > column , U udp ) {', 'return new UserDefinedByInstance < T , U > ( column , udp ) ;', 'return new UserDefinedByClass < T , U > ( column , clazz ) ;', 'import parquet . filter2 . predicate . Operators . UserDefinedByInstance ;', '}', 'import java . io . Serializable ;', 'import parquet . filter2 . predicate . Operators . UserDefinedByClass ;', 'private final Column < T > column ;']","['""Total allocation exceeds % . 2f % % ( % , d bytes ) of heap memory \\ n"" +', '""Scaling row group sizes to % . 2f % % for % d writers"" ,', 'LOG . warn ( String . format (', '100 * memoryPoolRatio , totalMemoryPool , 100 * scale , writerList . size ( ) ) ) ;']","['valueConverter = newConverter ( valueSchema , valueType , model , new ParentValueContainer ( ) {', 'valueConverter = newConverter ( nonNullValueSchema , valueType , model , new ParentValueContainer ( ) {', 'Schema valueSchema = avroSchema . getValueType ( ) ;', 'Schema nonNullValueSchema = AvroSchemaConverter . getNonNull ( avroSchema . getValueType ( ) ) ;', 'fields . add ( new Schema . Field ( parquetType . getName ( ) , optionalFieldSchema , null ,', 'return Schema . createMap ( convertField ( valueType ) ) ;', 'return Schema . createMap ( convertField ( valueType ) ) ;', 'if ( valueType . isRepetition ( Type . Repetition . OPTIONAL ) ) {', 'types . add ( fieldSchema ) ;', 'Schema . create ( Schema . Type . NULL ) ,']","['recordConsumer . startField ( ""key"" , 0 ) ;', 'recordConsumer . startField ( ""key"" , 0 ) ;', 'writeValue ( keyType , keySchema , key ) ;', 'recordConsumer . endField ( ""value"" , 1 ) ;', 'recordConsumer . endField ( ""value"" , 1 ) ;', 'throw new RuntimeException ( ""Null map value for "" + avroSchema . getName ( ) ) ;', 'recordConsumer . startField ( ""value"" , 1 ) ;', 'recordConsumer . startField ( ""value"" , 1 ) ;', 'recordConsumer . endGroup ( ) ;', 'for ( Map . Entry < CharSequence , V > entry : map . entrySet ( ) ) {']","['for ( ColumnChunkPageWriter pageWriter : writers . values ( ) ) {', 'private final MessageType schema ;', 'import parquet . format . ColumnChunk ;', 'this . schema = schema ;', 'ColumnChunkPageWriter pageWriter = writers . get ( path ) ;', 'for ( ColumnDescriptor path : schema . getColumns ( ) ) {', 'Encoding dataEncoding = Encoding . PLAIN ;', 'import parquet . schema . PrimitiveType ;', 'ColumnChunkPageWriteStore store = new ColumnChunkPageWriteStore ( f . getCompressor ( codec , pageSize ) , schema , initialSize ) ;', '. required ( INT32 ) . named ( ""an int"" )']","['return JavaConversions . asJavaList ( ( Seq ) result ) ;', 'return JavaConversions . seqAsJavaList ( ( Seq ) result ) ;']","['return new RunLengthBitPackingHybridValuesWriter ( 1 , initialSizePerCol ) ;', 'return new DeltaByteArrayWriter ( initialSizePerCol , pageSize ) ;', 'int initialPageBufferSize ) {', 'public ValuesWriter getValuesWriter ( ColumnDescriptor path , int initialSizePerCol , int pageSize ) {', 'getWidthFromMaxInt ( maxLevel ) , initialSizePerCol ) ;', 'private ValuesWriter plainWriter ( ColumnDescriptor path , int initialSizePerCol , int pageSize ) {', 'return new DeltaByteArrayWriter ( initialSizePerCol ) ;', 'return new FixedLenByteArrayPlainValuesWriter ( 12 , initialSizePerCol , pageSize ) ;', 'public ValuesWriter getValuesWriter ( ColumnDescriptor path , int initialSizePerCol ) {', 'return new DeltaBinaryPackingValuesWriter ( initialSizePerCol , pageSize ) ;']","['public static void checkArgument ( boolean valid , String message ) throws IllegalArgumentException {', 'private static String [ ] strings ( Object [ ] objects ) {', 'if ( !valid ) {', 'throw new IllegalStateException (', 'public static void checkState ( boolean valid , String message ) throws IllegalStateException {', 'throws IllegalStateException {', 'String [ ] strings = new String [ objects . length ] ;', 'if ( !isValid ) {', '}', 'public static void checkState ( boolean isValid , String message ) throws IllegalStateException {']","['this . out = fs . create ( file , false ) ;', 'public static enum Mode {', 'public ParquetFileWriter ( Configuration configuration , MessageType schema , Path file ) throws IOException {', 'public ParquetFileWriter ( Configuration configuration , MessageType schema ,', 'OVERWRITE', '}', 'Path file ) throws IOException {', 'CREATE ,', 'this ( configuration , schema , file , Mode . CREATE ) ;', 'this . out = fs . create ( file , overwriteFlag ) ;']","['return fieldProjectionFilter ;', '}', 'public FieldProjectionFilter getFieldProjectionFilter ( ) {', 'import parquet . schema . * ;', 'import parquet . thrift . projection . ThriftProjectionException ;', 'throw new ThriftProjectionException ( ""unmatched projection filters : "" + unmatched . toString ( ) ) ;', 'List < PathGlobPattern > unmatched = filter . getUnMatchedPatterns ( ) ;', 'private void checkUnmatchedProjectionFilter ( FieldProjectionFilter filter ) {', 'import parquet . schema . MessageType ;', 'import parquet . thrift . projection . PathGlobPattern ;']","['DeprecatedParquetOutputFormat . setAsOutputFormat ( jobConf ) ;', 'jobConf . setOutputFormat ( DeprecatedParquetOutputFormat . class ) ;', 'DeprecatedParquetOutputFormat . setAsOutputFormat ( jobConf ) ;', 'jobConf . setOutputFormat ( DeprecatedParquetOutputFormat . class ) ;', 'assertTrue ( fs . exists ( new Path ( parquetOutputPath ) ) ) ;', 'assertTrue ( fs . exists ( new Path ( parquetOutputPath + "" / common metadata"" ) ) ) ;', 'assertTrue ( fs . exists ( new Path ( parquetOutputPath + "" / metadata"" ) ) ) ;', 'writeMetaDataFile ( configuration , outputPath ) ;', 'public static void writeMetaDataFile ( Configuration configuration , Path outputPath ) {', '}']","['public Builder < T > builder ( Path file ) {', 'public static < T > Builder < T > builder ( Path file ) {']","['writer . close ( ) ;', 'import org . junit . Rule ;', 'Assert . assertEquals ( ""ByteBuffer should match after serialization round trip"" ,', '. withConf ( conf )', 'ParquetReader < parquet . thrift . test . binary . StringAndBinary > reader = ThriftParquetReader . < parquet . thrift . test . binary . StringAndBinary >', '@ Test', 'ByteBuffer . wrap ( new byte [ ] { - 123 , 20 , 33 } ) , record . b ( ) ) ;', 'import java . util . UUID ;', 'ParquetWriter < StringAndBinary > writer = new ParquetWriter < StringAndBinary > (', 'StringAndBinary record = reader . read ( ) ;']","['if ( protocol instanceof TBinaryProtocol ) {', 'if ( IS READ LENGTH SETABLE & & protocol instanceof TBinaryProtocol ) {', 'private static boolean IS READ LENGTH SETABLE = false ;', 'try {', '} catch ( NoSuchMethodException e ) {', 'IS READ LENGTH SETABLE = false ;', 'IS READ LENGTH SETABLE = true ;', '}', 'TBinaryProtocol . class . getMethod ( ""setReadLength"" , int . class ) ;', 'static {']","['return new ThriftType . StructType ( children ) ;', 'return new ThriftType . StructType ( children , structOrUnionType ) ;', 'isUnion ( companionObject . getClass ( ) ) ? StructOrUnionType . UNION : StructOrUnionType . STRUCT ;', 'import parquet . thrift . struct . ThriftType . StructType . StructOrUnionType ;', 'StructOrUnionType structOrUnionType =', 'continue ;', 'continue ;', 'hasFieldsIgnored | = true ;', 'throw new DecodingSchemaMismatchException ( ""Unrecognized union member with id : ""', 'new ProtocolReadToWrite ( ) . readOneValue ( in , new NullProtocol ( ) , field . type ) ;']","['static final long DEFAULT MIN MEMORY ALLOCATION = ParquetWriter . DEFAULT PAGE SIZE ;', 'throw new ParquetRuntimeException ( String . format ( ""New Memory allocation % d bytes"" +', 'throw new ParquetRuntimeException ( String . format ( ""New Memory allocation % d"" +', 'static final long DEFAULT MIN MEMORY ALLOCATION = 1 * 1024 * 1024 ;', '"" exceeds minimum allocation size % d with largest schema having % d columns"" ,', 'if ( scale < 1 . 0 & & minMemoryAllocation > 0 & & newSize < minMemoryAllocation ) {', 'newSize , minMemoryAllocation , maxColCount ) ) { } ;', 'newSize , minMemoryAllocation ) ) { } ;', 'if ( minMemoryAllocation > 0 & & newSize / maxColCount < minMemoryAllocation ) {', '"" is smaller than the minimum allocation size of % d bytes . "" ,']","['jobConf . setOutputFormat ( DeprecatedParquetOutputFormat . class ) ;', 'DeprecatedParquetOutputFormat . setAsOutputFormat ( jobConf ) ;', 'jobConf . setOutputFormat ( DeprecatedParquetOutputFormat . class ) ;', 'DeprecatedParquetOutputFormat . setAsOutputFormat ( jobConf ) ;', 'final FileSystem fs = path . getFileSystem ( new Configuration ( ) ) ;', 'HadoopFlowConnector hadoopFlowConnector = new HadoopFlowConnector ( ) ;', 'Flow flow = new HadoopFlowConnector ( ) . connect ( ""namecp"" , source , sink , assembly ) ;', 'import org . apache . hadoop . mapred . JobConf ;', 'assertTrue ( fs . exists ( new Path ( parquetOutputPath + "" / common metadata"" ) ) ) ;', 'Flow flow = hadoopFlowConnector . connect ( ""namecp"" , source , sink , assembly ) ;']","['return new ReadContext ( getSchemaForRead ( fileSchema , projection ) , metadata ) ;', 'return new ReadContext ( projection , metadata ) ;', 'avroSchema = new Schema . Parser ( ) . parse ( keyValueMetaData . get ( OLD AVRO SCHEMA METADATA KEY ) ) ;', '} else if ( keyValueMetaData . get ( OLD AVRO SCHEMA METADATA KEY ) ! = null ) {', 'static final String OLD AVRO SCHEMA METADATA KEY = ""avro . schema"" ;', '. withConf ( conf )', '@ Test', '}', '. builder ( new AvroReadSupport < GenericRecord > ( ) , testFile )', 'r . get ( ""text"" ) instanceof String ) ;']","['+ context . getClass ( ) . getCanonicalName ( ) ) ;', 'BenchmarkCounter . initCounterFromContext ( context ) ;', 'LOG . error ( ""Can not initialize counter due to context is not a instance of TaskInputOutputContext , but is ""', 'BenchmarkCounter . initCounterFromContext ( ( TaskInputOutputContext < ? , ? , ? , ? > ) context ) ;', 'import org . apache . hadoop . mapreduce . TaskInputOutputContext ;', '}', '} else {', 'if ( context instanceof TaskInputOutputContext < ? , ? , ? , ? > ) {', 'import parquet . Log ;', 'private static final Log LOG = Log . getLog ( ParquetRecordReader . class ) ;']","['BenchmarkCounter . initCounterFromContext ( context ) ;', '+ context . getClass ( ) . getCanonicalName ( ) ) ;', 'LOG . error ( ""Can not initialize counter due to context is not a instance of TaskInputOutputContext , but is ""', 'BenchmarkCounter . initCounterFromContext ( ( TaskInputOutputContext < ? , ? , ? , ? > ) context ) ;', 'import org . apache . hadoop . mapreduce . TaskInputOutputContext ;', '}', '} else {', 'if ( context instanceof TaskInputOutputContext < ? , ? , ? , ? > ) {', 'import parquet . Log ;', 'private static final Log LOG = Log . getLog ( ParquetRecordReader . class ) ;']","['configuration . set ( AVRO DATA SUPPLIER , clazz . toString ( ) ) ;', 'configuration . set ( AVRO DATA SUPPLIER , clazz . getName ( ) ) ;', 'return GenericData . get ( ) ;', 'conf . get ( AvroReadSupport . AVRO DATA SUPPLIER ) ) ;', '""parquet . avro . TestAvroDataSupplier$GenericDataSupplier"" ,', 'public class TestAvroDataSupplier {', 'import org . junit . Assert ;', '@ Test', 'public void testSetSupplierMethod ( ) {', 'Configuration conf = new Configuration ( false ) ;']","['import parquet . common . schema . ColumnPath ;', 'import parquet . hadoop . metadata . ColumnPath ;', 'import parquet . common . schema . ColumnPath ;', 'import parquet . hadoop . metadata . ColumnPath ;', 'import parquet . common . schema . ColumnPath ;', 'import parquet . hadoop . metadata . ColumnPath ;', 'import parquet . common . schema . ColumnPath ;', 'import parquet . hadoop . metadata . ColumnPath ;', 'import parquet . common . schema . ColumnPath ;', 'import parquet . hadoop . metadata . ColumnPath ;']","['public Builder < T > builder ( Path file ) {', 'public static < T extends IndexedRecord > Builder < T > builder ( Path file ) {']","['return true ;', 'return true ;', 'case I16 :', 'ThriftType keyType = convertClassToThriftType ( keyName , requirement , keyManifest ) ;', 'ThriftType elementType = convertClassToThriftType ( f . valueManifest ( ) . get ( ) . runtimeClass ( ) ) ;', 'case I16 :', 'thriftType = convertSetTypeField ( scroogeField , requirement ) ;', 'ThriftStructCodec < ? > companionObject ;', 'case I32 :', 'String keyName = mapKeyName ( fieldName ) ;']","['return true ;', 'return true ;', 'ThriftType keyType = convertClassToThriftType ( keyName , requirement , keyManifest ) ;', 'case I16 :', 'case I16 :', 'ThriftType elementType = convertClassToThriftType ( f . valueManifest ( ) . get ( ) . runtimeClass ( ) ) ;', 'ThriftStructCodec < ? > companionObject ;', 'thriftType = convertSetTypeField ( scroogeField , requirement ) ;', 'String keyName = mapKeyName ( fieldName ) ;', 'case I32 :']","['import org . junit . Ignore ;', '@ Ignore']","['public RecordMaterializationException ( ) {', 'super ( cause ) ;', '}', 'public RecordMaterializationException ( String message , Throwable cause ) {', 'super ( message ) ;', 'public RecordMaterializationException ( String message ) {', 'super ( message , cause ) ;', 'import org . apache . parquet . io . ParquetDecodingException ;', 'public static class RecordMaterializationException extends ParquetDecodingException {', 'public RecordMaterializationException ( Throwable cause ) {']","['String strProtoClass = keyValueMetaData . get ( PB CLASS ) ;', 'Class < ? extends Message > protobufClass = Protobufs . getProtobufClass ( headerProtoClass ) ;', 'Class < ? extends Message > protobufClass = Protobufs . getProtobufClass ( strProtoClass ) ;', 'public static void setProtobufClass ( Configuration configuration , String protobufClass ) {', 'LOG . debug ( ""Reading data with Protocol Buffer class"" + strProtoClass ) ;', 'LOG . debug ( ""Replacing class "" + headerProtoClass + "" by "" + configuredProtoClass ) ;', 'if ( strProtoClass = = null ) {', 'headerProtoClass = configuredProtoClass ;', 'String headerProtoClass = keyValueMetaData . get ( PB CLASS ) ;', '}']","['import org . junit . Ignore ;', '@ Ignore']","['return true ;', 'return true ;', 'import org . apache . parquet . thrift . struct . ThriftType . StructType . StructOrUnionType ;', 'ThriftType keyType = convertClassToThriftType ( keyName , requirement , keyManifest ) ;', 'case I16 :', 'import org . apache . parquet . thrift . struct . ThriftType . StructType . StructOrUnionType ;', 'ThriftType elementType = convertClassToThriftType ( f . valueManifest ( ) . get ( ) . runtimeClass ( ) ) ;', 'case I16 :', 'thriftType = convertSetTypeField ( scroogeField , requirement ) ;', 'ThriftStructCodec < ? > companionObject ;']","['} catch ( ReflectiveOperationException e ) {', '} catch ( NoSuchMethodException e ) {', 'throw new ScroogeSchemaConversionException ( ""can not find fiedInfo for "" + unionClass , e ) ;', '} catch ( InvocationTargetException e ) {', 'throw new ScroogeSchemaConversionException ( ""Can not convert enum field "" + fieldName , e ) ;', 'throw new ScroogeSchemaConversionException ( ""Can not get ThriftStructCodec from companion object of "" + companionClass . getName ( ) , e ) ;', 'throw new ScroogeSchemaConversionException ( ""Can not convert enum field "" + fieldName , e ) ;', '} catch ( ClassNotFoundException e ) {', '} catch ( IllegalAccessException e ) {', 'throw new ScroogeSchemaConversionException ( ""can not find fieldInfo for "" + unionClass , e ) ;']","['throw new IllegalArgumentException ( ""INT64 not yet implemented . "" ) ;', 'throw new IllegalArgumentException ( ""INT96 not yet implemented . "" ) ;']","['private PrimitiveType primitive ( String name ,', 'private PrimitiveType primitive ( String name ,', 'PrimitiveType . PrimitiveTypeName primitive , Type . Repetition repetition ,', 'PrimitiveType . PrimitiveTypeName primitive , Type . Repetition repetition ,']","['public static final String AVRO DATA SUPPLIER = ""parquet . avro . data . supplier"" ;', 'public static String AVRO DATA SUPPLIER = ""parquet . avro . data . supplier"" ;', 'return fieldProjectionFilter ;', '@ Deprecated', '}', 'public FieldProjectionFilter getFieldProjectionFilter ( ) {']","['if ( footers . isEmpty ( ) ) {', '}', 'return ;']","['return true ;', 'stringableName = stringableClass . getName ( ) ;', 'static final class FieldStringConverter extends AvroPrimitiveConverter {', 'return true ;', 'for ( int i = 0 ; i < = dictionary . getMaxId ( ) ; i + + ) {', 'try {', 'public void setDictionary ( Dictionary dictionary ) {', 'static final class FieldStringableConverter extends BinaryConverter < Object > {', 'static final class FieldEnumConverter extends AvroPrimitiveConverter {', 'public abstract T convert ( Binary binary ) ;']","['throw new SchemaConversionException ( ""Invalid list type "" + parquetGroupType ) ;', 'Schema primitiveSchema = new Schema ( getSimpleFieldSchema ( parquetGroupType . getFieldName ( 0 ) , type ) ) ;', 'if ( parquetGroupType . getFieldCount ( ) ! = 1 | | parquetGroupType . getType ( 0 ) . isPrimitive ( ) ) {', 'return new FieldSchema ( fieldName , tupleSchema , DataType . BAG ) ;', 'Type type = parquetGroupType . getType ( 0 ) ;', 'static final String ARRAY VALUE NAME = ""value"" ;', 'Schema tupleSchema = new Schema ( new FieldSchema ( ARRAY VALUE NAME , primitiveSchema , DataType . TUPLE ) ) ;', 'if ( parquetGroupType . getFieldCount ( ) ! = 1 | | type . isPrimitive ( ) ) {', 'import org . apache . parquet . schema . GroupType ;', '@ Test']","['previous = new byte [ 0 ] ;', 'for ( int i = 0 ; i < bin . length ; i + + ) {', '@ Test', 'Binary [ ] bin = Utils . readData ( reader , writer . getBytes ( ) . toByteArray ( ) , values . length ) ;', 'private void assertReadWrite ( DeltaByteArrayWriter writer , DeltaByteArrayReader reader , String [ ] vals ) throws Exception {', '}', 'Utils . writeData ( writer , vals ) ;', 'Assert . assertEquals ( Binary . fromString ( randvalues [ i ] ) , bin [ i ] ) ;', 'assertReadWrite ( writer , reader , values ) ;', 'public void testRandomStrings ( ) throws IOException {']","['try {', '@ Test', 'throw new RuntimeException ( v + "" is not a valid semver!"" , e ) ;', '}', 'String regex = ""parquet - mr version ( . * ) \\ \\ ( build ( . * ) \\ \\ ) "" ;', 'assertVersionValid ( m . group ( 1 ) ) ;', 'assertTrue ( Version . FULL VERSION + "" did not match "" + pattern , m . matches ( ) ) ;', 'public void testFullVersion ( ) {', 'assertFalse ( m . group ( 2 ) . isEmpty ( ) ) ;', 'org . semver . Version . parse ( v ) ;']","['public boolean equals ( Object obj ) {', 'return true ;', 'return Arrays . equals ( path , ( ( ColumnDescriptor ) obj ) . path ) ;', 'public boolean equals ( Object other ) {', 'return Arrays . equals ( path , descriptor . path ) ;', 'if ( other = = this )', 'return false ;', 'if ( ! ( other instanceof ColumnDescriptor ) )', 'ColumnDescriptor descriptor = ( ColumnDescriptor ) other ;', 'Arrays . equals ( stats . getMinBytes ( ) , this . getMinBytes ( ) ) & &']","['return min . getBytes ( ) ;', 'return max = = null ? null : max . getBytes ( ) ;', 'return max . getBytes ( ) ;', 'return min = = null ? null : min . getBytes ( ) ;', 'ParquetMetadata metadata = new ParquetMetadata ( fileMetaData , blockMetaDataList ) ;', 'BinaryStatistics s = new BinaryStatistics ( ) ;', '@ Test', 'import org . apache . parquet . hadoop . metadata . ColumnPath ;', '}', 'import static org . apache . parquet . schema . MessageTypeParser . parseMessageType ;']","['LOG . info ( format ( ""mem size % , d > % , d : flushing % , d records to disk . "" , memSize , rowGroupSizeThreshold , recordCount ) ) ;', 'parquetFileWriter . getNextRowGroupSize ( ) ,', 'max ( MINIMUM RECORD COUNT FOR CHECK , ( recordCount + ( long ) ( rowGroupSizeThreshold / recordSize ) ) / 2 ) ,', 'this . nextRowGroupSize = rowGroupSizeThreshold ;', 'float recordSize = ( float ) memSize / recordCount ;', 'LOG . info ( format ( ""mem size % , d > % , d : flushing % , d records to disk . "" , memSize , nextRowGroupSize , recordCount ) ) ;', 'import org . apache . parquet . column . impl . ColumnWriteStoreV2 ;', 'rowGroupSizeThreshold ) ;', 'import org . apache . parquet . column . impl . ColumnWriteStoreV1 ;', 'if ( memSize > ( nextRowGroupSize - 2 * recordSize ) ) {']","['private static final Map < Class < ? > , Class < ? > > primitiveToBoxed = new HashMap < Class < ? > , Class < ? > > ( ) ;', 'private PrimitiveToBoxedClass ( ) { }', '}', 'primitiveToBoxed . put ( long . class , Long . class ) ;', 'primitiveToBoxed . put ( double . class , Double . class ) ;', 'primitiveToBoxed . put ( byte . class , Byte . class ) ;', 'return primitiveToBoxed . get ( c ) ;', 'primitiveToBoxed . put ( int . class , Integer . class ) ;', 'import java . util . Map ;', 'public class PrimitiveToBoxedClass {']","['private void addRowGroup ( ParquetMetadata parquetMetadata , List < RowGroup > rowGroups , BlockMetaData block ) {', 'private static void addRowGroup ( ParquetMetadata parquetMetadata , List < RowGroup > rowGroups , BlockMetaData block ) {', 'return other . size ( ) = = encodings . size ( ) & & encodings . containsAll ( other ) ;', 'public static void writeDataPageV2Header (', 'public ParquetMetadata fromParquetMetadata ( FileMetaData parquetMetadata ) throws IOException {', 'Set < org . apache . parquet . column . Encoding > cached = cachedEncodingSets . putIfAbsent ( converted , converted ) ;', 'public ParquetMetadata readParquetMetadata ( InputStream from ) throws IOException {', 'public static ParquetMetadata fromParquetMetadata ( FileMetaData parquetMetadata ) throws IOException {', 'return result ;', 'private ParquetMetadataConverter ( ) { }']","['ParquetMetadata metadataFooter = mergeFooters ( outputPath , footers ) ;', 'ParquetMetadata metadataFooter = mergeFooters ( outputPath , footers ) ;', 'Mockito . when ( mock . getFileMetaData ( ) ) . thenReturn ( fileMetaData ) ;', 'ParquetFileWriter . writeMetadataFile ( conf , relativeRoot , footers ) ;', 'new PrimitiveType ( REPEATED , BINARY , ""a"" ) ) ,', 'public void testWriteMetadataFileWithRelativeOutputPath ( ) throws IOException {', '@ Test', 'Path qualifiedRoot = fs . makeQualified ( relativeRoot ) ;', 'new MessageType ( ""root1"" ,', 'FileSystem fs = FileSystem . get ( conf ) ;']","['private static void addRowGroup ( ParquetMetadata parquetMetadata , List < RowGroup > rowGroups , BlockMetaData block ) {', 'private void addRowGroup ( ParquetMetadata parquetMetadata , List < RowGroup > rowGroups , BlockMetaData block ) {', 'public static void writeDataPageV2Header (', 'public ParquetMetadata fromParquetMetadata ( FileMetaData parquetMetadata ) throws IOException {', 'public static ParquetMetadata fromParquetMetadata ( FileMetaData parquetMetadata ) throws IOException {', 'public ParquetMetadata readParquetMetadata ( InputStream from ) throws IOException {', 'private ParquetMetadataConverter ( ) { }', 'FieldRepetitionType toParquetRepetition ( Repetition repetition ) {', 'static MessageType fromParquetSchema ( List < SchemaElement > schema ) {', 'Type getType ( PrimitiveTypeName type ) {']","['return rowGroupSize ;', 'if ( maxPaddingSize < = 0 ) {', '}']","['public long getDataSize ( ) {', 'this . lastRowGroupEndPos = parquetFileWriter . getPos ( ) ;', 'return lastRowGroupEndPos + columnStore . getBufferedSize ( ) ;', '}', 'private long lastRowGroupEndPos = 0 ;', 'public long getDataSize ( ) {', 'return writer . getDataSize ( ) ;', '}']","['return new ParquetReader < T > ( conf , file , readSupport , filter ) ;', 'protected ReadSupport < T > getReadSupport ( ) {', 'private Configuration conf ;', '"" [ BUG ] Classes that extend Builder should override getReadSupport ( ) "" ) ;', 'protected Configuration conf ;', 'import org . apache . parquet . Preconditions ;', 'this . filter = FilterCompat . NOOP ;', '}', 'return new ParquetReader < T > ( conf , file , getReadSupport ( ) , filter ) ;', 'protected Builder ( Path path ) {']","['throw new ParquetDecodingException ( ""Encoding DELTA BYTE ARRAY is only supported for type BINARY"" ) ;', 'if ( descriptor . getType ( ) ! = BINARY & & descriptor . getType ( ) ! = FIXED LEN BYTE ARRAY ) {', 'if ( descriptor . getType ( ) ! = BINARY ) {', 'import static org . apache . parquet . schema . PrimitiveType . PrimitiveTypeName . FIXED LEN BYTE ARRAY ;', 'throw new ParquetDecodingException ( ""Encoding DELTA BYTE ARRAY is only supported for type BINARY and FIXED LEN BYTE ARRAY"" ) ;']","['int numRows = 0 ;', 'long numRows = 0 ;']","['}', '} else {', 'import org . apache . parquet . column . statistics . Statistics ;', 'Statistics < ? > statistics = pageV2 . getStatistics ( ) ;', 'if ( statistics ! = null ) {', 'out . format ( "" ST : [ none ] "" ) ;', 'out . format ( "" ST : [ % s ] "" , statistics ) ;', 'Statistics < ? > statistics = pageV1 . getStatistics ( ) ;']","['PARQUET READ SCHEMA , STRICT THRIFT COLUMN FILTER KEY , DEPRECATED THRIFT COLUMN FILTER KEY ) ) ;', 'jobConf . set ( THRIFT COLUMN FILTER KEY , projectionString ) ;', '+ DEPRECATED THRIFT COLUMN FILTER KEY', 'THRIFT COLUMN FILTER KEY , STRICT THRIFT COLUMN FILTER KEY ) ) ;', 'String deprecated = conf . get ( DEPRECATED THRIFT COLUMN FILTER KEY ) ;', 'String deprecated = conf . get ( THRIFT COLUMN FILTER KEY ) ;', 'jobConf . set ( DEPRECATED THRIFT COLUMN FILTER KEY , projectionString ) ;', 'PARQUET READ SCHEMA , STRICT THRIFT COLUMN FILTER KEY , THRIFT COLUMN FILTER KEY ) ) ;', 'public static final String DEPRECATED THRIFT COLUMN FILTER KEY = ""parquet . thrift . column . filter"" ;', 'public static final String THRIFT COLUMN FILTER KEY = ""parquet . thrift . column . filter"" ;']","['Iterator < String > iter = s . iterator ( ) ;', 'return join ( s . iterator ( ) , on ) ;', '}', 'public static String join ( Iterator < String > iter , String on ) {', 'type = new ThriftType . ListType ( toThriftField ( name , listElemField , requirement ) ) ;', 'type = new ThriftType . SetType ( toThriftField ( setElemField . getName ( ) , setElemField , requirement ) ) ;', 'type = new ThriftType . SetType ( toThriftField ( name , setElemField , requirement ) ) ;', 'type = new ThriftType . ListType ( toThriftField ( listElemField . getName ( ) , listElemField , requirement ) ) ;', 'ThriftField oldKeyField = currentOldType . getKey ( ) ;', 'incompatible ( ""can not find index in new Struct : "" + fieldId + "" in "" + newStruct , state . path ) ;']","['import java . nio . ByteBuffer ;', '} else if ( typeClass = = ByteBuffer . class ) {', 'return new ThriftType . StringType ( ) ;', '@ Test', '}', 'public void testMapBinary ( ) throws Exception {', 'import org . apache . parquet . scrooge . test . TestMapBinary ;', 'shouldConvertConsistentlyWithThriftStructConverter ( TestMapBinary . class ) ;']","['checkDeltaByteArrayProblem ( footer . getFileMetaData ( ) , configuration , filteredBlocks . get ( 0 ) ) ;', '}', 'checkDeltaByteArrayProblem ( footer . getFileMetaData ( ) , configuration , filteredBlocks . get ( 0 ) ) ;', 'if ( !filteredBlocks . isEmpty ( ) ) {', ';', 'put ( ParquetInputFormat . FILTER PREDICATE , fpString ) ;', 'if ( size < 500 ) {', '@ Test', 'put ( ""parquet . task . side . metadata"" , ""true"" ) ;', 'iter . remove ( ) ;']","['totalMemoryPool = Math . round ( ManagementFactory . getMemoryMXBean ( ) . getHeapMemoryUsage ( ) . getMax', 'totalMemoryPool = Math . round ( ( double ) ManagementFactory . getMemoryMXBean ( ) . getHeapMemoryUsage ( ) . getMax', 'expectPoolSize = Math . round ( ManagementFactory . getMemoryMXBean ( ) . getHeapMemoryUsage ( ) . getMax', 'expectPoolSize = Math . round ( ( double ) ManagementFactory . getMemoryMXBean ( ) . getHeapMemoryUsage ( ) . getMax']","['private static void warnParseError ( String createdBy , Throwable e ) {', '+ "" , see PARQUET - 251"" ) ;', 'LOG . warn ( ""Ignoring statistics because created by could not be parsed ( see PARQUET - 251 ) : "" + createdBy , e ) ;', 'warnOnce ( ""Ignoring statistics because created by is null or empty! See PARQUET - 251 and PARQUET - 297"" ) ;', '+ "" , see PARQUET - 251"" ) ;', 'LOG . warn ( message ) ;', 'LOG . warn ( ""Ignoring statistics because created by did not contain a semver ( see PARQUET - 251 ) : "" + createdBy ) ;', 'warnOnce ( ""Ignoring statistics because this file was created prior to ""', 'warnParseError ( createdBy , e ) ;', 'private static void warnParseErrorOnce ( String createdBy , Throwable e ) {']","['for ( int i = 0 ; i < childrenCount ; i + + ) {', 'parent = parent . getParent ( ) ;', 'int childrenCount = groupColumnIO . getChildrenCount ( ) ;', 'writers = new ArrayList < ColumnWriter > ( ) ;', '}', '} while ( parent ! = null ) ;', 'columnWriter [ primitiveColumnIO . getId ( ) ] = columns . getColumnWriter ( primitiveColumnIO . getColumnDescriptor ( ) ) ;', '}', 'writeNull ( groupColumnIO . getChild ( i ) , r , d ) ;', 'for ( ColumnWriter leafWriter : groupToLeafWriter . get ( group ) ) {']","['if ( !wasIgnored ) {', 'childFieldsPresent + + ;', '}', 'hasFieldsIgnored | = readOneValue ( in , field . type , buffer , expectedField . getType ( ) ) ;', 'boolean wasIgnored = readOneValue ( in , field . type , buffer , expectedField . getType ( ) ) ;', 'hasFieldsIgnored | = wasIgnored ;', 'childFieldsPresent + + ;', 'in = new ByteArrayOutputStream ( ) ;', '@ Test', 'assertEquals ( 1 , countingHandler . fieldIgnoredCount ) ;']","['+ + currentLevel ;', 'writeNullToLeaves ( group ) ;', 'int numberOfFieldsToVisit = ( ( GroupColumnIO ) currentColumnIO ) . getChildrenCount ( ) ;', 'GroupColumnIO parent = primitive . getParent ( ) ;', 'for ( ColumnWriter leafWriter : groupToLeafWriter . get ( group ) ) {', '}', 'for ( int i = 0 ; i < currentLevel ; + + i ) {', 'int parentDefinitionLevel = group . getParent ( ) . getDefinitionLevel ( ) ;', 'ColumnIO undefinedField = ( ( GroupColumnIO ) currentColumnIO ) . getChild ( i ) ;', 'nulls = new IntArrayList ( ) ;']","['if ( semver . compareTo ( PARQUET 251 FIXED VERSION ) < 0 ) {', 'if ( semver . compareTo ( PARQUET 251 FIXED VERSION ) < 0 & &', 'private static final SemanticVersion CDH 5 PARQUET 251 FIXED END = new SemanticVersion ( 1 , 5 , 0 ) ;', 'private static final SemanticVersion CDH 5 PARQUET 251 FIXED START = new SemanticVersion ( 1 , 5 , 0 , null , ""cdh5 . 5 . 0"" , null ) ;', '! ( semver . compareTo ( CDH 5 PARQUET 251 FIXED START ) > = 0 & &', 'semver . compareTo ( CDH 5 PARQUET 251 FIXED END ) < 0 ) ) {', 'assertTrue ( CorruptStatistics . shouldIgnoreStatistics ( ""parquet - mr version 1 . 5 . 0 ( build abcd ) "" , PrimitiveTypeName . BINARY ) ) ;', 'assertTrue ( CorruptStatistics . shouldIgnoreStatistics ( ""parquet - mr version 1 . 7 . 0 ( build abcd ) "" , PrimitiveTypeName . BINARY ) ) ;', 'assertFalse ( CorruptStatistics . shouldIgnoreStatistics ( ""parquet - mr version 1 . 5 . 0 - cdh5 . 5 . 0 - SNAPSHOT ( build 956ed6c14c611b4c4eaaa1d6e5b9a9c6d4dfa336 ) "" , PrimitiveTypeName . BINARY ) ) ;', '@ Test']","['!mapKeyValType . getOriginalType ( ) . equals ( OriginalType . MAP KEY VALUE ) | |', 'schema . setFields ( Collections . singletonList ( new Schema . Field ( ""mymap"" , map , null , null ) ) ) ;', '"" repeated group map { \\ n"" +', '"" } \\ n"" +', '@ Test', '""message myrecord { \\ n"" +', 'import java . util . Collections ;', '"" required group mymap ( MAP ) { \\ n"" +', 'String parquetSchema =', '"" required binary key ( UTF8 ) ; \\ n"" +']","['throw new InvalidSchemaException ( ""A group type can not be empty . Parquet does not support empty group without leaves . Empty group : "" + name ) ;', '}', 'if ( fields . isEmpty ( ) ) {', 'public static void checkValidWriteSchema ( GroupType schema ) {', 'if ( groupType . getFieldCount ( ) < = 0 ) {', '} ) ;', 'public class TypeUtil {', 'for ( Type type : groupType . getFields ( ) ) {', '}', 'type . accept ( this ) ;']","['private int readValues ;', 'private int pageValueCount = 0 ;', 'private int pageValueCount ;', 'public class ColumnReaderImpl implements ColumnReader {', 'class ColumnReaderImpl implements ColumnReader {', 'private int readValues = 0 ;', 'private static final String ALPHABET = ""ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890"" ;', 'protected String nextValue ( ) {', 'int length = Math . min ( data . length , bufferLength ) ;', 'public static class BinaryGenerator extends RandomBinaryBase < Binary > {']","['List < FileStatus > statuses = listFiles ( configuration , fileStatus ) ;', 'return readAllFootersInParallel ( configuration , statuses , skipRowGroups ) ;', 'return readAllFootersInParallel ( configuration , statuses , false ) ;', 'public static List < Footer > readAllFootersInParallel ( Configuration configuration , FileStatus fileStatus , boolean skipRowGroups ) throws IOException {', '}', 'return readAllFootersInParallel ( configuration , fileStatus , false ) ;', 'List < FileStatus > statuses = listFiles ( configuration , fileStatus ) ;', 'BytesUtils . writeIntLittleEndian ( out , ( int ) ( out . getPos ( ) - footerIndex ) ) ;', 'public static void writeMergedMetadataFile ( List < Path > files , Path outputPath , Configuration conf ) throws IOException {', 'writeMetadataFile ( outputPath , metadataFooter , fs , PARQUET METADATA FILE ) ;']","['long expectPoolSize ;', 'File file = temp . newFile ( String . valueOf ( index ) + "" . parquet"" ) ;', 'public void setUp ( ) {', 'import org . junit . Rule ;', '} ) ;', 'Runnable callback = new Runnable ( ) {', 'int rowGroupSize ;', 'RecordWriter writer2 = createWriter ( 2 ) ;', '}', '@ Test']","['List < Footer > newFooters = getFooters ( config , missingStatuses ) ;', 'for ( Entry < FileStatusWrapper , Footer > footerEntry : footersMap . entrySet ( ) ) {', 'footers . add ( cacheEntry . getFooter ( ) ) ;', 'footersCache . put ( fileStatus , new FootersCacheValue ( fileStatus , newFooter ) ) ;', 'if ( missingStatuses . isEmpty ( ) ) {', '}', 'for ( Footer newFooter : newFooters ) {', 'if ( !missingStatuses . isEmpty ( ) ) {', 'List < Footer > footers = new ArrayList < Footer > ( statuses . size ( ) ) ;', 'for ( Footer newFooter : newFooters ) {']","['if ( isElementType ( repeatedType , elementSchema ) ) {', '""Parquet / Avro schema mismatch . Avro field \' % s\' not found . "" ,', 'if ( repeatedType . isPrimitive ( ) | |', 'throw new InvalidRecordException ( String . format (', 'return true ;', 'if ( AvroRecordConverter . isElementType ( repeatedType , elementSchema ) ) {', '} else if ( elementSchema ! = null & &', 'repeatedType . asGroupType ( ) . getFieldName ( 0 ) ) ) {', 'repeatedType . asGroupType ( ) . getFieldCount ( ) > 1 ) {', 'elementSchema . getFields ( ) . size ( ) = = 1 & &']","['private static PrimitiveConverter getConverter ( final int rowGroupID , final int pageID , PrimitiveTypeName type , final List < ? > expectedValues ) {', 'public void validateNextValue ( Object value ) {', 'import org . apache . parquet . format . converter . ParquetMetadataConverter ;', 'fixedBinaryGenerator = new RandomValues . FixedGenerator ( random . nextLong ( ) , FIXED LENGTH ) ;', 'PageReader pageReader = pageReadStore . getPageReader ( columnDescriptor ) ;', 'private static class PageValuesValidator {', 'import org . apache . parquet . column . ParquetProperties . WriterVersion ;', 'import org . apache . parquet . hadoop . example . GroupWriteSupport ;', 'public PrimitiveConverter convertBOOLEAN ( PrimitiveTypeName primitiveTypeName ) throws RuntimeException {', 'private static RandomValues . FixedGenerator fixedBinaryGenerator ;']","['public static class Builder < T > extends ParquetReader . Builder {', 'public static class Builder < T > extends ParquetReader . Builder < T > {']","['for ( Object elt : array ) {', 'for ( Object elt : array ) {', 'for ( Object element : array ) {', 'throw e ;', 'writeValue ( schema . getType ( 0 ) , avroSchema . getElementType ( ) , elt ) ;', 'if ( array [ i ] = = null ) {', 'writeValue ( type . getType ( 0 ) , schema . getElementType ( ) , element ) ;', 'try {', 'writeValue ( schema . getType ( 0 ) , avroSchema . getElementType ( ) , elt ) ;', 'for ( int i = 0 ; i < array . length ; i + = 1 ) {']","['String appBuildHash = matcher . group ( 4 ) ;', 'String semver = matcher . group ( 2 ) ;', 'public static final String FORMAT = "" ( . + ) version ( ( . * ) ) ? \\ \\ ( build ? ( . * ) \\ \\ ) "" ;', 'String appBuildHash = matcher . group ( 3 ) ;', 'String semver = matcher . group ( 3 ) ;', 'public static final String FORMAT = "" ( . * ? ) \\ \\ s + version \\ \\ s * ( ? : ( [ ^ ( ] * ? ) \\ \\ s * ( ? : \\ \\ ( \\ \\ s * build \\ \\ s * ( [ ^ ) ] * ? ) \\ \\ s * \\ \\ ) ) ? ) ? "" ;', 'assertEquals ( new ParsedVersion ( ""parquet - mr"" , null , null ) , VersionParser . parse ( ""parquet - mr version ( build ) "" ) ) ;', 'assertEquals ( new ParsedVersion ( ""parquet - mr"" , null , null ) , VersionParser . parse ( ""parquet - mr version"" ) ) ;', 'assertEquals ( new ParsedVersion ( ""parquet - mr"" , ""1 . 6 . 0"" , null ) , VersionParser . parse ( ""parquet - mr version 1 . 6 . 0"" ) ) ;', 'assertEquals ( new ParsedVersion ( ""parquet - mr"" , null , null ) , VersionParser . parse ( ""parquet - mr version"" ) ) ;']","['import java . io . StringWriter ;', 'logger . debug ( String . valueOf ( m ) , t ) ;', 'logger . log ( Level . FINE , """" , ( Throwable ) m ) ;', 'logger . info ( String . valueOf ( m ) , t ) ;', 'private Object args [ ] = new Object [ 1 ] ;', 'logger . error ( String . valueOf ( m ) ) ;', 'import java . util . logging . LogRecord ;', 'logger . warn ( String . valueOf ( m ) , t ) ;', 'try {', 'import org . slf4j . Logger ;']","['memoryManager ) ;', 'conf ) ;', 'CodecFactory codecFactory = new CodecFactory ( conf , props . getPageSizeThreshold ( ) ) ;', 'memoryManager ,', 'codecFactory . getCompressor ( codec ) ,', 'codec ,', '. withDictionaryEncoding ( enableDictionary )', 'this . codecFactory = new CodecFactory ( conf , props . getPageSizeThreshold ( ) ) ;', '. withWriterVersion ( writerVersion )', '. withDictionaryPageSize ( dictionaryPageSize )']","['private void saveSchemaToUDFContext ( ) {', 'return new JSONTuple ( sumUp ( getInputSchema ( ) , t ) ) ;', 'return Utils . getSchemaFromString ( getProperties ( signature ) . getProperty ( ""inputSchema"" ) ) ;', 'return SummaryData . toPrettyJSON ( sumUp ( getInputSchema ( ) , t ) ) ;', 'try {', '}', 'this . inputSchema = input . getField ( 0 ) . schema . getField ( 0 ) . schema ;', 'public void setUDFContextSignature ( String signature ) {', 'throw new RuntimeException ( ""Usage : B = FOREACH ( GROUP A ALL ) GENERATE Summary ( A ) ; Can not get schema from "" + input , e ) ;', '@ Override']","['private static ObjectMapper objectMapper = new ObjectMapper ( ) ;', 'private static final ObjectMapper objectMapper = new ObjectMapper ( ) ;', 'mapper . writeValue ( stringWriter , parquetMetaData ) ;', 'return toJSON ( parquetMetaData , false ) ;', '}', 'if ( isPrettyPrint ) {', 'return toJSON ( parquetMetaData , prettyObjectMapper ) ;', 'import org . codehaus . jackson . map . ObjectWriter ;', 'return toJSON ( parquetMetaData , objectMapper ) ;', 'objectMapper . writerWithDefaultPrettyPrinter ( ) . writeValue ( stringWriter , parquetMetaData ) ;']","['values = new HashSet < String > ( ) ;', 'values = new LinkedHashSet < String > ( ) ;', 'import java . util . LinkedHashSet ;']","['public DataPageV1 ( BytesInput bytes , int valueCount , int uncompressedSize , Statistics < ? > stats , Encoding rlEncoding , Encoding dlEncoding , Encoding valuesEncoding ) {', 'this . statistics = statistics ;', 'this . statistics = stats ;', 'public DataPageV1 ( BytesInput bytes , int valueCount , int uncompressedSize , Statistics < ? > statistics , Encoding rlEncoding , Encoding dlEncoding , Encoding valuesEncoding ) {']","['addGroupType ( t , st , repetition , builder ) ;', 'addGroupType ( st , repetition , builder ) ;', 'addPrimitiveType ( t , st , asPrimitive ( type , st ) , repetition , builder ) ;', 'addPrimitiveType ( st , asPrimitive ( type , st ) , repetition , builder ) ;', 'private static void addPrimitiveType ( String t , Tokenizer st , PrimitiveTypeName type , Repetition r , Types . GroupBuilder < ? > builder ) {', 'private static void addPrimitiveType ( Tokenizer st , PrimitiveTypeName type , Repetition r , Types . GroupBuilder < ? > builder ) {', 'private static void addGroupType ( String t , Tokenizer st , Repetition r , GroupBuilder < ? > builder ) {', 'String t ;', 'private static void addGroupType ( Tokenizer st , Repetition r , GroupBuilder < ? > builder ) {']","['TIMESTAMP MICROS ,', 'TIME MICROS ,', 'case TIME MICROS :', 'case TIMESTAMP MICROS :', 'TIMESTAMP MILLIS , UINT 64 , INT 64 } ;', 'TIME MICROS , TIMESTAMP MILLIS , TIMESTAMP MICROS , UINT 64 , INT 64 } ;', 'import org . apache . hadoop . fs . FSDataInputStream ;', 'return OriginalType . TIME MICROS ;', 'case TIME MICROS :', 'return ConvertedType . TIME MICROS ;']","['return 0 ;', 'for ( int i = 0 ; i < length ; i + + ) {', 'for ( int i = 0 ; i < path . length ; i + + ) {', 'int length = path . length < o . path . length ? path . length : o . path . length ;', 'return path . length - o . path . length ;', 'assertEquals ( column ( ""b"" ) . compareTo ( column ( ""a"" ) ) , 1 ) ;', '@ Test', 'package org . apache . parquet . column ;', 'assertEquals ( column ( ""a"" ) . compareTo ( column ( ""a"" ) ) , 0 ) ;', '}']","['@ Deprecated', '@ Deprecated', '@ Deprecated', 'final String txtInputPath = ""src / test / resources / names . txt"" ;', '@ Deprecated', 'final String txtInputPath = ""target / test - classes / names . txt"" ;', 'throw new IllegalArgumentException ( ""To use ParquetTBaseScheme as a sink , you must specify a thrift class in the constructor"" ) ;', 'package org . apache . parquet . cascading ;', 'import org . apache . parquet . thrift . TBaseRecordConverter ;', 'import org . apache . parquet . filter2 . predicate . FilterPredicate ;']","['private byte [ ] cachedBytes ;', 'this . offset = 0 ;', 'private final int offset ;', 'private transient byte [ ] cachedBytes ;', 'private final int length ;', 'this . length = length ;', 'private int offset ;', 'private int length ;', 'import java . io . ByteArrayInputStream ;', 'out . writeObject ( bao . binary ) ;']","['LOG . debug ( String . format ( BYTE BUF IMPL NOT FOUND MSG , ""decompressor"" + codec . getClass ( ) . getName ( ) ) ) ;', 'LOG . debug ( String . format ( BYTE BUF IMPL NOT FOUND MSG , ""decompressor"" , codec . getClass ( ) . getName ( ) ) ) ;', 'LOG . debug ( String . format ( BYTE BUF IMPL NOT FOUND MSG , ""compressor"" + codec . getClass ( ) . getName ( ) ) ) ;', 'LOG . debug ( String . format ( BYTE BUF IMPL NOT FOUND MSG , ""compressor"" , codec . getClass ( ) . getName ( ) ) ) ;']","['Types . PrimitiveBuilder < PrimitiveType > builder = Types . primitive (', 'getOriginalType ( ) ! = toMerge . getOriginalType ( ) ) {', 'return builder . named ( getName ( ) ) ;', 'reportSchemaMergeError ( toMerge ) ;', 'throw new IncompatibleSchemaModificationException ( ""can not merge type "" + toMerge + "" into "" + this ) ;', 'if ( strict ) {', 'primitive , toMerge . getRepetition ( ) ) ;', 'if ( !primitive . equals ( toMerge . asPrimitiveType ( ) . getPrimitiveTypeName ( ) ) | |', 'if ( !toMerge . isPrimitive ( ) | | ( strict & & !primitive . equals ( toMerge . asPrimitiveType ( ) . getPrimitiveTypeName ( ) ) ) ) {', '}']","['String name = getClass ( ) . getSimpleName ( ) . toLowerCase ( ) ;', 'String name = getClass ( ) . getSimpleName ( ) . toLowerCase ( Locale . ENGLISH ) ;', 'import java . util . Locale ;', '. append ( getRepetition ( ) . name ( ) . toLowerCase ( ) )', '. append ( getRepetition ( ) . name ( ) . toLowerCase ( Locale . ENGLISH ) )', 'import java . util . Locale ;', 'return Repetition . valueOf ( t . toUpperCase ( ) ) ;', 'import java . util . Locale ;', 'return PrimitiveTypeName . valueOf ( t . toUpperCase ( ) ) ;', 'return PrimitiveTypeName . valueOf ( t . toUpperCase ( Locale . ENGLISH ) ) ;']","['} else if ( memoryManager . getMemoryPoolRatio ( ) ! = maxLoad ) {', 'if ( memoryManager = = null ) {', 'if ( memoryManager = = null ) {', 'memoryManager = new MemoryManager ( maxLoad , minAllocation ) ;', 'memoryManager = new MemoryManager ( maxLoad , minAllocation ) ;', 'public synchronized static MemoryManager getMemoryManager ( ) {', 'public static MemoryManager getMemoryManager ( ) {', '}', 'synchronized ( ParquetOutputFormat . class ) {', 'if ( memoryManager . getMemoryPoolRatio ( ) ! = maxLoad ) {']","['if ( DEBUG ) LOG . debug ( ""LoadMetadata . getPartitionKeys ( "" + location + "" , "" + job + "" ) "" ) ;', 'LOG . debug ( ""LoadFunc . setLocation ( "" + location + "" , "" + jobToString + "" ) "" ) ;', 'if ( DEBUG ) LOG . debug ( ""LoadMetadata . getStatistics ( "" + location + "" , "" + job + "" ) "" ) ;', '}', 'if ( DEBUG ) LOG . debug ( ""LoadFunc . setLocation ( "" + location + "" , "" + job + "" ) "" ) ;', 'LOG . debug ( ""LoadMetadata . getSchema ( "" + location + "" , "" + jobToString + "" ) "" ) ;', 'if ( DEBUG ) LOG . debug ( ""LoadMetadata . getSchema ( "" + location + "" , "" + job + "" ) "" ) ;', 'LOG . debug ( ""LoadMetadata . getPartitionKeys ( "" + location + "" , "" + jobToString + "" ) "" ) ;', 'if ( DEBUG ) {', 'LOG . debug ( ""LoadMetadata . getStatistics ( "" + location + "" , "" + jobToString + "" ) "" ) ;']","['public class ParquetLoader extends LoadFunc implements LoadMetadata , LoadPushDown {', 'import org . apache . pig . Expression . BetweenExpression ;', 'OpType . OP GE ,', 'import org . apache . pig . Expression . UnaryExpression ;', 'public static final String ENABLE PREDICATE FILTER PUSHDOWN = ""parquet . pig . predicate . pushdown . enable"" ;', 'LOG . info ( ""Parquet filter predicate expression : "" + pred ) ;', 'FilterPredicate pred = buildFilter ( e ) ;', 'OpType . OP OR ,', 'case DataType . CHARARRAY :', '@ Override']","['if ( DEBUG ) log ( "" < ! - - flush - - > "" ) ;', '}', 'public void flush ( ) {', 'delegate . flush ( ) ;', '@ Override', 'public void flush ( ) {', '@ Override', '}', 'public void flush ( ) {', '@ Override']","['f . close ( ) ;', 'try {', '}', 'f . close ( ) ;', 'if ( f ! = null ) {', '}', 'codecFactory . release ( ) ;', '} finally {', 'if ( codecFactory ! = null ) {', 'if ( f ! = null ) {']","['ParquetProperties . DEFAULT MINIMUM RECORD COUNT FOR CHECK ) ;', 'ParquetProperties . DEFAULT MAXIMUM RECORD COUNT FOR CHECK ) ;', 'if ( INFO ) LOG . info ( ""Min row count for page size check is : "" + props . getMaxRowCountForPageSizeCheck ( ) ) ;', 'if ( INFO ) LOG . info ( ""Max row count for page size check is : "" + props . getMaxRowCountForPageSizeCheck ( ) ) ;']","['public IntList ( ) {', 'if ( currentSlab = = null ) {', '}', '} else if ( currentSlabPos = = currentSlab . length ) {', 'if ( currentSlabPos = = currentSlab . length ) {', '}', 'initSlab ( ) ;', 'initSlab ( ) ;']","['} else {', 'else {', 'if ( name ! = null & & command ! = null ) {', 'showUsage ( ) ;', 'showUsage ( name , command ) ;', '}', 'if ( name = = null & & command = = null ) {']","['LOGGER . warn ( ""Decimal with { } digits is stored in an INT64 , but fits in an INT32 . See { } . "" ,', 'import org . slf4j . Logger ;', 'if ( meta . getPrecision ( ) < = MAX PRECISION INT32 ) {', 'import org . slf4j . LoggerFactory ;', '}', 'precision , LOGICAL TYPES DOC URL ) ;', '""https : / / github . com / apache / parquet - format / blob / master / LogicalTypes . md"" ;', 'private static final Logger LOGGER = LoggerFactory . getLogger ( BasePrimitiveBuilder . class ) ;', 'private static final String LOGICAL TYPES DOC URL =']","['GenericData model , ParentValueContainer parent ) {', 'GenericData model , ParentValueContainer setter ) {', 'import org . apache . avro . LogicalType ;', 'return null ;', '. getConversionContainer ( setter , conversion , schema ) ;', '}', 'import org . apache . avro . Conversion ;', 'if ( model . getConversionFor ( schema . getLogicalType ( ) ) ! = null ) {', 'Conversion < ? > conversion = model . getConversionFor ( logicalType ) ;', 'LogicalType logicalType = schema . getLogicalType ( ) ;']","['private void initSlab ( ) {', 'allocateSlab ( ) ;', 'return new IntIterator ( itSlabs , SLAB SIZE * slabs . size ( ) + currentSlabPos ) ;', 'currentSlab = new int [ currentSlabSize ] ;', 'currentSlab = new int [ SLAB SIZE ] ;', 'updateCurrentSlabSize ( ) ;', 'private static final int SLAB SIZE = 64 * 1024 ;', '}', '+ + current ;', 'currentRow + + ;']","['return true ;', 'dataStats . put ( encoding , numPages + ( pages ! = null ? pages : 0 ) ) ;', 'package org . apache . parquet . column ;', 'usesV2Pages ) ;', 'return dictStats . get ( enc ) ;', 'public Builder addDataEncoding ( Encoding encoding , int numPages ) {', '}', 'private boolean usesV2Pages = false ;', 'if ( dataStats . containsKey ( enc ) ) {', 'return dataStats . get ( enc ) ;']","['public OffsetListMetadataFilter ( Set < Long > offsets ) {', 'List < RowGroup > rowGroups = metaData . getRow groups ( ) ;', 'static FileMetaData filterFileMetaData ( FileMetaData metaData , OffsetMetadataFilter filter ) {', '}', 'return filterFileMetaData ( readFileMetaData ( from ) , filter ) ;', 'static FileMetaData filterFileMetaDataByStart ( FileMetaData metaData , OffsetMetadataFilter filter ) {', 'boolean contains ( long offset ) ;', 'static final class RangeMetadataFilter extends MetadataFilter {', 'interface OffsetMetadataFilter {', '@ Override']","['public void finish ( ) {', 'public synchronized void finish ( ) {']","['return !hasNonNullValue ( ) | | ( ( min . length ( ) + max . length ( ) ) < size ) ;', '@ Deprecated', '}', '@ Override', 'public boolean isSmallerThan ( long size ) {', 'return !hasNonNullValue ( ) | | ( 2 < size ) ;', '@ Override', '}', 'public boolean isSmallerThan ( long size ) {', '@ Override']","['value . prettyPrintJson ( writer ) ;', 'import org . apache . parquet . hadoop . ParquetFileReader ;', 'import org . apache . hadoop . conf . Configuration ;', 'import org . apache . parquet . hadoop . metadata . ParquetMetadata ;', 'JsonRecordFormatter . JsonGroupFormatter formatter = JsonRecordFormatter . fromSchema ( metadata . getFileMetaData ( ) . getSchema ( ) ) ;', 'writer . write ( formatter . formatRecord ( value ) ) ;', 'import org . apache . parquet . tools . json . JsonRecordFormatter ;', 'ParquetMetadata metadata = ParquetFileReader . readFooter ( new Configuration ( ) , new Path ( input ) ) ;', 'import org . apache . parquet . schema . GroupType ;', 'protected Object formatResults ( List < Object > listOfValues ) {']","['Map < String , String > finalMetadata = new HashMap < String , String > ( extraMetaData ) ;', 'if ( !closed ) {', 'finalMetadata . putAll ( finalWriteContext . getExtraMetaData ( ) ) ;', 'closed = true ;', 'flushRowGroupToStore ( ) ;', 'Map < String , String > finalMetadata = new HashMap < String , String > ( extraMetaData ) ;', 'finalMetadata . put ( ParquetWriter . OBJECT MODEL NAME PROP , modelName ) ;', 'private boolean closed ;', 'FinalizedWriteContext finalWriteContext = writeSupport . finalizeWrite ( ) ;', 'if ( modelName ! = null ) {']","['if ( value = = null ) {', 'return BLOCK MIGHT MATCH ;', '}', 'assertFalse ( ""Should not drop block for null"" ,', 'canDrop ( notEq ( b , null ) , ccmd , dictionaries ) ) ;', 'canDrop ( eq ( b , null ) , ccmd , dictionaries ) ) ;']","['return Binary . fromString ( ( CharSequence ) value ) ;', 'return Binary . fromCharSequence ( ( CharSequence ) value ) ;', 'int position = value . position ( ) ;', 'return ""Binary { \\ """" + toStringUsingUTF8 ( ) + "" \\ "" } "" ;', 'value . position ( offset ) ;', 'try {', 'public static Binary fromString ( CharSequence value ) {', 'return ByteBuffer . wrap ( value . getBytes ( ""UTF - 8"" ) ) ;', 'String ret = UTF8 . decode ( value ) . toString ( ) ;', 'public String toString ( ) {']","['{ PrimitiveTypeName . FIXED LEN BYTE ARRAY }', 'List < CompressionCodecName > codecs ;', 'DictionaryPage dictPage = getDictionaryPageForColumn ( pageReadStore , columnsDesc ) ;', 'try {', '} ) ;', 'System . err . println ( ""Testing codecs : "" + codecs ) ;', '{ PrimitiveTypeName . BOOLEAN } ,', '} ) ;', '{ PrimitiveTypeName . INT32 } ,', '}']","['recordReader = columnIO . getRecordReader ( pages , recordConverter , filter ) ;', 'import static org . apache . parquet . hadoop . ParquetInputFormat . RECORD FILTERING ENABLED ;', 'private boolean filterRecords = true ;', 'recordReader = columnIO . getRecordReader ( pages , recordConverter ,', 'filterRecords ? filter : FilterCompat . NOOP ) ;', 'import static org . apache . parquet . hadoop . ParquetInputFormat . RECORD FILTERING ENABLED DEFAULT ;', 'this . filterRecords = configuration . getBoolean (', 'RECORD FILTERING ENABLED , RECORD FILTERING ENABLED DEFAULT ) ;', 'if ( conf . getBoolean ( ""parquet . filter . statistics . enabled"" , true ) ) {', 'import static org . apache . parquet . hadoop . ParquetInputFormat . STATS FILTERING ENABLED ;']","['Set < String > fieldNames = new HashSet < String > ( ) ;', 'new AvroSchemaConverter ( true ) ;', 'fieldNames . add ( field . name ( ) ) ;', 'private static final AvroSchemaConverter CONVERTER =', 'return fieldNames . contains ( repeatedType . asGroupType ( ) . getFieldName ( 0 ) ) ;', 'return true ;', 'for ( Schema . Field field : elementSchema . getFields ( ) ) {', 'import org . apache . parquet . filter2 . predicate . SchemaCompatibilityValidator ;', 'import static org . apache . avro . SchemaCompatibility . SchemaCompatibilityType . COMPATIBLE ;', 'Schema schemaFromRepeated = CONVERTER . convert ( repeatedType . asGroupType ( ) ) ;']","['import org . apache . parquet . column . values . boundedint . ZeroIntegerValuesReader ;', 'import org . apache . parquet . column . values . rle . ZeroIntegerValuesReader ;', 'import org . apache . parquet . column . values . boundedint . DevNullValuesWriter ;', 'import org . apache . parquet . column . values . bitpacking . DevNullValuesWriter ;', 'package org . apache . parquet . column . values . boundedint ;', 'package org . apache . parquet . column . values . bitpacking ;', 'int toShift = 8 - currentPosition ;', 'currentByte = 0 ;', 'i + = 7 ;', 'if ( currentPosition = = 8 ) {']","['if ( totalValueCount = = 0 ) {', 'private long readValues = 0 ;', 'throw new ParquetDecodingException ( ""totalValueCount = = 0"" ) ;', 'if ( totalValueCount < = 0 ) {', 'private int readValues = 0 ;', 'throw new ParquetDecodingException ( ""totalValueCount \'"" + totalValueCount + ""\' < = 0"" ) ;', 'int count = 0 ;', 'long count = 0 ;']","['. withFlushOnTab ( )', 'PrettyPrintWriter out = prettyPrintWriter ( cropoutput ) ;', '. withColumnPadding ( 1 )', 'private static PrettyPrintWriter prettyPrintWriter ( boolean cropOutput ) {', '. withMaxBufferedLines ( 1000000 )', '. withColumnPadding ( 1 )', 'PrettyPrintWriter out = PrettyPrintWriter . stdoutPrettyPrinter ( )', '}', '. withAutoCrop ( )', 'PrettyPrintWriter . Builder builder = PrettyPrintWriter . stdoutPrettyPrinter ( )']","['return new DeltaBinaryPackingValuesWriterForLong ( initialSlabSize , pageSizeThreshold , allocator ) ;', 'public Builder withValuesWriterFactory ( ValuesWriterFactory factory ) {', 'break ;', 'return valuesWriterFactory . newValuesWriter ( path ) ;', 'case INT96 :', 'estimateNextSizeCheck , allocator , valuesWriterFactory ) ;', 'return dictWriterWithFallBack ( path ) ;', 'return initialSlabSize ;', 'estimateNextSizeCheck , allocator ) ;', '}']","['import java . io . InputStream ;', 'import java . io . IOException ;', 'public abstract void readFully ( byte [ ] bytes ) throws IOException ;', 'import java . nio . ByteBuffer ;', 'public abstract class SeekableInputStream extends InputStream {', 'public abstract void readFully ( ByteBuffer buf ) throws IOException ;', '}', 'package org . apache . parquet . io ;', 'import java . io . EOFException ;', 'public abstract long getPos ( ) throws IOException ;']","['return input ;', 'List < Path > input = new ArrayList < Path > ( ) ;', 'public void execute ( CommandLine options ) throws Exception {', 'Path p = new Path ( input . get ( 0 ) ) ;', 'List < String > args = options . getArgList ( ) ;', '}', 'import org . apache . hadoop . fs . FileSystem ;', 'public MergeCommand ( ) {', 'FileStatus status = fs . getFileStatus ( inputFile ) ;', 'private List < Path > parseInputFiles ( List < String > input ) {']","['prefixLengthReader . skip ( ) ;', 'readBytes ( ) ;', 'suffixReader . skip ( ) ;', 'Assert . assertEquals ( Binary . fromString ( vals [ i ] ) , reader . readBytes ( ) ) ;', 'private void assertReadWriteWithSkip ( DeltaByteArrayWriter writer , DeltaByteArrayReader reader , String [ ] vals ) throws Exception {', 'DeltaByteArrayReader reader = new DeltaByteArrayReader ( ) ;', '@ Test', 'import java . nio . ByteBuffer ;', 'Utils . writeData ( writer , vals ) ;', '}']","['case LONG : return builder . primitive ( INT64 , repetition ) ;', 'case DOUBLE : return builder . primitive ( DOUBLE , repetition ) ;', 'case DOUBLE : return builder . primitive ( DOUBLE , repetition ) ;', 'case LONG : return builder . primitive ( INT64 , repetition ) ;', 'return group ;', 'case INT : return builder . primitive ( INT32 , repetition ) ;', 'convertFields ( group , descriptor . getMessageType ( ) . getFields ( ) ) ;', 'return group ;', 'case BOOLEAN : return builder . primitive ( BOOLEAN , repetition ) ;', 'convertFields ( group , descriptor . getMessageType ( ) . getFields ( ) ) ;']","['import java . io . IOException ;', 'long getLength ( ) throws IOException ;', '}', 'SeekableInputStream newStream ( ) throws IOException ;', 'package org . apache . parquet . io ;', 'public interface InputFile {', 'this . footer = readFooter ( fileStatus . getLen ( ) , fileStatus . getPath ( ) . toString ( ) , f , filter ) ;', 'public static final ParquetMetadata readFooter (', 'FileSystem fileSystem = file . getPath ( ) . getFileSystem ( configuration ) ;', 'return readFooter ( HadoopInputFile . fromPath ( file , configuration ) , filter ) ;']","['Assert . assertTrue ( ""Pool size should be within 5 % of the expected value"" ,', '"" ( expected = "" + expectedPoolSize + "" actual = "" + poolSize + "" ) "" ,', 'Math . abs ( expectedPoolSize - poolSize ) < ( long ) ( expectedPoolSize * 0 . 05 ) ) ;', 'Assert . assertTrue ( ""Pool size should be within 10 % of the expected value"" +', 'Math . abs ( expectedPoolSize - poolSize ) < ( long ) ( expectedPoolSize * 0 . 10 ) ) ;']","['import java . util . Collections ;', 'this ( path , start , end ( blocks , requestedSchema ) , length , hosts , offsets ( blocks ) ) ;', 'this ( path , start , length , end ( blocks , requestedSchema ) , hosts , offsets ( blocks ) ) ;', 'long end = lastRowGroup . getStartingPos ( ) + lastRowGroup . getTotalByteSize ( ) ;', 'splitInfo . hdfsBlock . getOffset ( ) , splitInfo . hdfsBlock . getLength ( ) , splitInfo . hdfsBlock . getHosts ( ) ,', 'splitInfo . hdfsBlock . getOffset ( ) , end , splitInfo . hdfsBlock . getHosts ( ) ,', 'BlockMetaData lastRowGroup = splitInfo . getRowGroups ( ) . get ( splitInfo . getRowGroupCount ( ) - 1 ) ;']","['if ( statistics ! = null & & !CorruptStatistics . shouldIgnoreStatistics ( createdBy , type ) ) {', 'return SortOrder . UNSIGNED ;', 'messageType . getType ( path . toArray ( ) ) . asPrimitiveType ( ) . getPrimitiveTypeName ( ) ) ,', 'case UINT 64 :', 'case DOUBLE :', '. unmodifiableSet ( new HashSet < > ( Arrays . asList (', 'OriginalType annotation = type . getOriginalType ( ) ;', 'enum SortOrder {', '}', 'PrimitiveTypeName . BINARY = = type . getPrimitiveTypeName ( ) & &']","['cache . put ( dotPath , dict ) ;', '} catch ( IOException e ) {', 'import org . apache . parquet . bytes . BytesInput ;', 'private static DictionaryPage reusableCopy ( DictionaryPage dict ) {', 'try {', 'return null ;', 'BytesInput . from ( dict . getBytes ( ) . toByteArray ( ) ) ,', 'throw new ParquetDecodingException ( ""Cannot read dictionary"" , e ) ;', 'if ( dict = = null ) {', '}']","['reader . setRequestedSchema ( requestedSchema ) ;', 'for ( ColumnDescriptor col : projection . getColumns ( ) ) {', '}', 'paths . clear ( ) ;', 'import org . apache . parquet . schema . MessageType ;', 'public void setRequestedSchema ( MessageType projection ) {', 'paths . put ( ColumnPath . get ( col . getPath ( ) ) , col ) ;', 'outputFolder . delete ( ) ;', 'import static java . lang . Thread . sleep ;', 'import java . util . UUID ;']","['return super . hashCode ( ) * 31 + getFields ( ) . hashCode ( ) ;', 'if ( type . getOriginalType ( ) ! = null & & fieldToMerge . getOriginalType ( ) ! = type . getOriginalType ( ) ) {', 'return new GroupType ( toMerge . getRepetition ( ) , getName ( ) , mergeFields ( toMerge . asGroupType ( ) ) ) ;', 'import java . util . Objects ;', '& & getOriginalType ( ) = = otherType . getOriginalType ( )', '}', 'return Objects . hash ( getOriginalType ( ) , getFields ( ) ) ;', 'return new GroupType ( toMerge . getRepetition ( ) , getName ( ) , toMerge . getOriginalType ( ) , mergeFields ( toMerge . asGroupType ( ) ) , getId ( ) ) ;', 'throw new IncompatibleSchemaModificationException ( ""cannot merge original type "" + fieldToMerge . getOriginalType ( ) + "" into "" + type . getOriginalType ( ) ) ;', '. requiredGroup ( )']","['package org . apache . parquet . arrow . schema ;', 'import org . apache . parquet . schema . GroupType ;', 'private final Type element ;', '}', 'class List3Levels {', 'public Type getElement ( ) {', 'if ( repeatedField . isPrimitive ( ) | | !repeatedField . isRepetition ( REPEATED ) | | repeatedField . asGroupType ( ) . getFields ( ) . size ( ) ! = 1 ) {', 'public List3Levels ( GroupType list ) {', 'import org . apache . parquet . schema . OriginalType ;', 'return repeated ;']","['stream . close ( ) ;', '@ Override', '}', 'public void close ( ) throws IOException {']","['+ context . getClass ( ) . getCanonicalName ( ) ) ;', 'BenchmarkCounter . initCounterFromContext ( context ) ;', 'if ( context instanceof TaskInputOutputContext < ? , ? , ? , ? > ) {', 'if ( ContextUtil . hasCounterMethod ( context ) ) {', 'BenchmarkCounter . initCounterFromContext ( ( TaskInputOutputContext < ? , ? , ? , ? > ) context ) ;', 'context . getClass ( ) . getCanonicalName ( ) ) ) ;', 'LOG . error ( ""Can not initialize counter due to context is not a instance of TaskInputOutputContext , but is ""', 'LOG . error (', 'String . format ( ""Can not initialize counter because the class \' % s\' does not have a \' . getCounterMethod\'"" ,', '} catch ( Exception e ) {']","['return conf . getInt ( MAX PADDING BYTES , DEFAULT MAX PADDING SIZE ) ;', 'return conf . getInt ( MAX PADDING BYTES , ParquetWriter . MAX PADDING SIZE DEFAULT ) ;', 'private static final int DEFAULT MAX PADDING SIZE = 0 ;', 'public static final int MAX PADDING SIZE DEFAULT = 0 ;', 'public static final int MAX PADDING SIZE DEFAULT = 8 * 1024 * 1024 ;']","['return false ;', 'if ( inverted ) {', '}', '} else {', 'return BLOCK MIGHT MATCH ;', 'return !udp . keep ( null ) ;', 'if ( columnChunk = = null ) {', 'return udp . keep ( null ) ;', 'throw new RuntimeException ( ""this method should not be called"" ) ;', 'return true ;']","['if ( value . compareTo ( entry ) < = 0 ) {', 'try {', 'if ( value . compareTo ( entry ) < 0 ) {', '}', 'if ( value . compareTo ( entry ) > = 0 ) {', 'if ( dictSet = = null ) {', 'if ( value . compareTo ( entry ) > 0 ) {', 'return visit ( udp . getUserDefined ( ) , true ) ;', 'throw new UnsupportedOperationException ( ""UDP not supported with dictionary evaluation . "" ) ;', 'if ( hasNonDictionaryPages ( meta ) ) {']","['return startLevel = = other . startLevel', 'return other ! = null', '& & startLevel = = other . startLevel', 'return getClass ( ) = = o . getClass ( ) & & children . equals ( ( ( OneOf ) o ) . children ) ;', 'return o ! = null & & getClass ( ) = = o . getClass ( ) & & s . equals ( ( ( Atom ) o ) . s ) ;', 'return getClass ( ) = = o . getClass ( ) & & s . equals ( ( ( Atom ) o ) . s ) ;', 'return o ! = null & & getClass ( ) = = o . getClass ( ) & & children . equals ( ( ( OneOf ) o ) . children ) ;', 'fw . append ( "" } \\ n"" ) ;', 'fw . append ( "" } \\ n"" ) ;', 'fw . append ( "" packers [ "" + i + "" ] = new Packer"" + i + "" ( ) ; \\ n"" ) ;']","['createWriter ( 1 ) . close ( null ) ;', 'createWriter ( 0 ) . close ( null ) ;']","['die ( th . getMessage ( ) , usage , name , command ) ;', 'die ( th . toString ( ) , usage , name , command ) ;']","['assertEquals ( stats . toString ( ) , ""min : 0 . 00010 , max : 553 . 59998 , num nulls : 0"" ) ;', 'assertEquals ( stats . toString ( ) , String . format ( ""min : % . 5f , max : % . 5f , num nulls : % d"" , 0 . 00001 , 944 . 50000 , 0 ) ) ;', 'assertEquals ( stats . toString ( ) , ""min : 0 . 00001 , max : 944 . 50000 , num nulls : 0"" ) ;', 'assertEquals ( stats . toString ( ) , String . format ( ""min : % . 5f , max : % . 5f , num nulls : % d"" , 0 . 00010 , 553 . 59998 , 0 ) ) ;']","['TestProto3 . IOFormatMessage input ;', 'reader . setRequestedProjection ( projection ) ;', '@ Test', 'assertEquals ( input , output ) ;', 'import org . apache . parquet . proto . test . TestProto3 ;', 'assertTrue ( readDocument . getDocId ( ) = = 12345 ) ;', 'assertEquals ( ""writtenString"" , stringValue ) ;', '}', 'assertEquals ( 666 , output . getOptionalDouble ( ) , 0 . 00001 ) ;', 'assertEquals ( 323 , output . getMsg ( ) . getSomeId ( ) ) ;']","['private class DecimalConverter extends SimplePrimitiveConverter {', 'record . add ( name , new BigDecimal ( new BigInteger ( value . getBytes ( ) ) , scale ) ) ;', 'public DecimalConverter ( String name , int scale ) {', 'super ( name ) ;', 'return new DecimalConverter ( field . getName ( ) , scale ) ;', 'case DECIMAL :', '}', 'import java . math . BigInteger ;', 'int scale = field . asPrimitiveType ( ) . getDecimalMetadata ( ) . getScale ( ) ;', 'this . scale = scale ;']","['registry . put ( ""rowcount"" , RowCountCommand . class ) ;', 'registry . put ( ""size"" , SizeCommand . class ) ;', 'super ( 1 , 1 ) ;', 'fileRowCount + = b . getRowCount ( ) ;', 'public static final Options OPTIONS ;', 'public void execute ( CommandLine options ) throws Exception {', 'for ( FileStatus fs : inputFileStatuses ) {', 'for ( Footer f : ParquetFileReader . readFooters ( conf , fs , false ) ) {', '}', 'import org . apache . parquet . hadoop . metadata . BlockMetaData ;']","['LOG . debug ( ""writing { } bytes"" , ( slabs . size ( ) * slabSize + packedByteLength ) ) ;', 'int getNumSlabs ( ) {', 'return ( slabs . size ( ) * slabSize ) + packed . length + input . length * 4 ;', 'if ( slabSize < bitWidth * MAX SLAB SIZE MULT ) {', 'private final int slabSize ;', 'private static final int INITIAL SLAB SIZE MULT = 1024 ;', 'return BytesUtils . paddedByteCountFromBits ( totalValues * bitWidth ) ;', 'private long totalFullSlabSize ;', 'this . slabSize = bitWidth * 64 * 1024 ;', '}']","['throw new RuntimeException ( filePath + "" is not a Parquet file ( too small ) "" ) ;', 'throw new RuntimeException ( ""corrupted file : the footer index is not within the file : "" + footerIndex ) ;', 'throw new RuntimeException ( ""corrupted file : the footer index is not within the file"" ) ;', 'throw new RuntimeException ( filePath + "" is not a Parquet file ( too small length : "" + fileLen + "" ) "" ) ;']","['return new FieldSchema ( fieldName , null , DataType . BYTEARRAY ) ;', 'return new FieldSchema ( fieldName , null , DataType . BYTEARRAY ) ;', 'PrimitiveTypeName primitiveTypeName ) throws FrontendException {', 'PrimitiveTypeName primitiveTypeName ) throws FrontendException {', 'if ( originalType = = OriginalType . DECIMAL ) {', 'return new FieldSchema ( fieldName , null , DataType . BIGDECIMAL ) ;', '}', '} else {', 'public class DecimalUtils {', '}']","['Options options = mergeOptions ( OPTIONS , command . getOptions ( ) ) ;', '. hasArgs ( )', '. hasArg ( )', 'import org . apache . parquet . format . converter . ParquetMetadataConverter ;']","['if ( statistics . isSetMax ( ) & & statistics . isSetMin ( ) ) {', 'boolean sortOrdersMatch = SortOrder . SIGNED = = typeSortOrder ;', 'SortOrder . SIGNED = = typeSortOrder ) {', 'if ( isSet ) {', 'boolean maxEqualsMin = isSet ? Arrays . equals ( statistics . getMin ( ) , statistics . getMax ( ) ) : false ;', 'boolean isSet = statistics ! = null & & statistics . isSetMax ( ) & & statistics . isSetMin ( ) ;', '( sortOrdersMatch | | maxEqualsMin ) ) {', 'Assert . assertTrue ( ""Stats should be empty"" , convertedStats . isEmpty ( ) ) ;', 'ParquetMetadataConverter . toParquetStatistics ( stats ) ,', 'Assert . assertArrayEquals ( ""min = = max : "" + convertedStats , convertedStats . getMaxBytes ( ) , convertedStats . getMinBytes ( ) ) ;']","['throw new FrontendException ( ""NYI"" ) ;', 'LOG . warn ( ""Converting type "" + primitiveTypeName + "" to bytearray"" ) ;', '!mapKeyValType . getOriginalType ( ) . equals ( OriginalType . MAP KEY VALUE ) | |', 'return new FieldSchema ( fieldName , null , DataType . BYTEARRAY ) ;', '( mapKeyValType . getOriginalType ( ) ! = null & & !mapKeyValType . getOriginalType ( ) . equals ( OriginalType . MAP KEY VALUE ) ) | |', '@ Test', '}', '"" optional fixed len byte array ( 5 ) c ; \\ n"" +', '"" optional int96 datetime ; \\ n"" +', '""datetime : bytearray""']","['format . printWrapped ( err , WIDTH , name + "" : \\ n"" + command . getCommandDescription ( ) ) ;', '@ Override', '}', 'return ""Prints the content of a Parquet file . The output contains only the data , no metadata is displayed"" ;', 'public String getCommandDescription ( ) {', 'public String [ ] getUsageDescription ( ) ;', 'String [ ] getUsageDescription ( ) ;', 'String getCommandDescription ( ) ;', '@ Override', '@ Override']","['if ( IS READ LENGTH SETABLE & & protocol instanceof TBinaryProtocol ) {', 'return protocolFactory . getProtocol ( new TIOStreamTransport ( new ByteArrayInputStream ( record . getBytes ( ) ) ) ) ;', 'return protocol ;', 'private static boolean IS READ LENGTH SETABLE = false ;', 'try {', '} catch ( NoSuchMethodException e ) {', 'IS READ LENGTH SETABLE = false ;', 'IS READ LENGTH SETABLE = true ;', '}', '( ( TBinaryProtocol ) protocol ) . setReadLength ( record . getLength ( ) ) ;']","['case BROTLI :', 'case ZSTD :', 'return ""B"" ;', 'return ""4"" ;', 'return ""Z"" ;', 'case LZ4 :', 'LZO ( ""com . hadoop . compression . lzo . LzoCodec"" , CompressionCodec . LZO , "" . lzo"" ) ;', 'ZSTD ( ""org . apache . hadoop . io . compress . ZStandardCodec"" , CompressionCodec . ZSTD , "" . zstd"" ) ;', 'BROTLI ( ""org . apache . hadoop . io . compress . BrotliCodec"" , CompressionCodec . BROTLI , "" . br"" ) ,', 'LZ4 ( ""org . apache . hadoop . io . compress . Lz4Codec"" , CompressionCodec . LZ4 , "" . lz4"" ) ,']","['return visitPrimitiveType ( BINARY , UTF8 , state ) ;', 'return stringType . isBinary ( ) ? visitPrimitiveType ( BINARY , state ) : visitPrimitiveType ( BINARY , UTF8 , state ) ;', 'type = new StringType ( ) ;', 'FieldMetaData fieldMetaData = field . getFieldMetaData ( ) ;', 'type = stringType ;', 'StringType stringType = new StringType ( ) ;', '}', 'if ( fieldMetaData ! = null & & fieldMetaData . valueMetaData . isBinary ( ) ) {', 'import org . apache . thrift . meta data . FieldMetaData ;', 'stringType . setBinary ( true ) ;']","['public int getId ( ) {', '@ Deprecated', '}', 'import java . io . Serializable ;', 'return id ;', 'return buildGroup ( repetition ) . as ( OriginalType . LIST )', 'builder . id ( id . intValue ( ) ) ;', 'return buildGroup ( repetition ) . as ( OriginalType . MAP )', 'if ( id ! = null ) {', '}']","['assertEquals ( Types . required ( PrimitiveType . PrimitiveTypeName . BINARY ) . named ( ""s"" ) , fields . get ( 0 ) ) ;', 'assertEquals ( Types . required ( PrimitiveType . PrimitiveTypeName . BINARY ) . id ( 1 ) . named ( ""s"" ) , fields . get ( 0 ) ) ;', 'assertEquals ( Types . required ( PrimitiveType . PrimitiveTypeName . BINARY ) . named ( ""b"" ) , fields . get ( 1 ) ) ;', 'assertEquals ( Types . required ( PrimitiveType . PrimitiveTypeName . BINARY ) . id ( 2 ) . named ( ""b"" ) , fields . get ( 1 ) ) ;']","['}', '} else {', 'out . format ( "" ST : [ % s ] "" , stats ) ;', 'import org . apache . parquet . column . statistics . Statistics ;', 'out . format ( "" ST : [ none ] "" ) ;', 'Statistics < ? > stats = meta . getStatistics ( ) ;', 'if ( stats ! = null ) {']","['& & eqOrBothNull ( id , other . id ) ;', '& & eqOrBothNull ( originalType , other . originalType ) ;', 'import java . io . Serializable ;', '& & eqOrBothNull ( id , other . id )', 'import org . apache . parquet . schema . PrimitiveType . PrimitiveTypeName ;', '"" optional binary a ( UTF8 ) ; \\ n"" +', 'import org . apache . parquet . schema . PrimitiveType ;', 'public void testAnonymousField ( ) throws Exception {', 'public void testAnnonymousField ( ) throws Exception {', 'import static org . apache . parquet . schema . PrimitiveType . PrimitiveTypeName . INT32 ;']","['printable ( maxBytes , annotation = = OriginalType . UTF8 , 30 ) ) ;', 'return String . format ( "" % s / % s"" , humanReadable ( stats . minAsString ( ) , 30 ) , humanReadable ( stats . maxAsString ( ) , 30 ) ) ;', 'private static String printable ( byte [ ] bytes , boolean isUtf8 , int len ) {', 'humanReadable ( stats . minAsString ( ) , 30 ) , humanReadable ( stats . maxAsString ( ) , 30 ) , stats . getNumNulls ( ) , count ) ;', 'return humanReadable ( bytes , len ) ;', 'return String . format ( ""min : % s max : % s nulls : % d / % d"" ,', '}', 'return humanReadable ( new String ( bytes , StandardCharsets . UTF 8 ) , len ) ;', 'return String . format ( ""nulls : % d / % d"" , stats . getNumNulls ( ) , count ) ;', 'stats . getNumNulls ( ) , count ) ;']","['}', 'return parquetFileWriter . getFooter ( ) ;', 'public ParquetMetadata getFooter ( ) {', 'import org . apache . parquet . hadoop . metadata . ParquetMetadata ;', 'ParquetMetadata footer = new ParquetMetadata ( new FileMetaData ( schema , extraMetaData , Version . FULL VERSION ) , blocks ) ;', 'this . footer = new ParquetMetadata ( new FileMetaData ( schema , extraMetaData , Version . FULL VERSION ) , blocks ) ;', 'Preconditions . checkState ( state = = STATE . ENDED , ""Cannot return unfinished footer . "" ) ;', '}', 'return footer ;', 'public ParquetMetadata getFooter ( ) {']","['Random random = new Random ( System . currentTimeMillis ( ) ) ;', 'Random random = new Random ( 42 ) ;', 'int splitSize = random . nextInt ( 10000 ) ;', 'int splitSize = random . nextInt ( 10000 ) + 1 ;']","['dlReader . initFromPage ( pageValueCount , bytes , next ) ;', 'import org . apache . parquet . bytes . ByteBufferInputStream ;', 'import java . io . ByteArrayInputStream ;', 'BytesInput bytes = page . getBytes ( ) ;', 'next = dlReader . getNextOffset ( ) ;', 'initDataReader ( page . getValueEncoding ( ) , in , page . getValueCount ( ) ) ;', 'initDataReader ( page . getDataEncoding ( ) , page . getData ( ) . toByteBuffer ( ) , 0 , page . getValueCount ( ) ) ;', 'LOG . debug ( ""reading definition levels at { } "" , in . position ( ) ) ;', 'private void initDataReader ( Encoding dataEncoding , ByteBuffer bytes , int offset , int valueCount ) {', 'dlReader . initFromPage ( pageValueCount , in ) ;']","['return protocolFactory . getProtocol ( new TIOStreamTransport ( new ByteArrayInputStream ( record . getBytes ( ) ) ) ) ;', 'if ( SET READ LENGTH ! = null & & protocol instanceof TBinaryProtocol ) {', 'return protocol ;', 'try {', 'import org . slf4j . Logger ;', 'import java . lang . reflect . Method ;', '} catch ( NoSuchMethodException e ) {', 'import org . slf4j . LoggerFactory ;', 'SET READ LENGTH = null ;', '}']","['public static Builder getBuilder ( PrimitiveType type ) {', 'if ( Double . compare ( max , - 0 . 0 ) = = 0 ) {', 'return new Builder ( type ) ;', 'min = - 0 . 0f ;', 'Float min = stats . genericGetMin ( ) ;', 'case DOUBLE :', 'FloatStatistics stats = ( FloatStatistics ) super . build ( ) ;', 'max = 0 . 0f ;', '}', 'public static Builder getBuilderForReading ( PrimitiveType type ) {']","['private Builder ( InputFile file ) {', 'import org . apache . parquet . io . InputFile ;', 'super ( file ) ;', '@ Deprecated', '}', 'public static < T > Builder < T > builder ( InputFile file ) {', 'return new Builder < T > ( file ) ;', 'public static < T > Builder < T > builder ( OutputFile file ) {', 'super ( file ) ;', 'private Builder ( OutputFile file ) {']","['protected Configuration conf = new Configuration ( ) ;', 'if ( file instanceof HadoopInputFile ) {', 'private ParquetReadOptions . Builder optionsBuilder = HadoopReadOptions . builder ( conf ) ;', 'optionsBuilder = HadoopReadOptions . builder ( conf ) ;', 'protected Configuration conf ;', '}', 'this . optionsBuilder = HadoopReadOptions . builder ( conf ) ;', '} else {', 'private ParquetReadOptions . Builder optionsBuilder ;', 'this . conf = ( ( HadoopInputFile ) file ) . getConfiguration ( ) ;']","['}', '}', 'fw . append ( "" * @ see ByteBasedBitPackingGenerator \\ n"" ) ;', 'fw . append ( "" * See ByteBasedBitPackingGenerator to make changes to this file \\ n"" ) ;']","['"" * This class is auto - generated by { @ link org . apache . parquet . version . VersionGenerator } \\ n"" +', '"" * This class is auto - generated by org . apache . parquet . version . VersionGenerator \\ n"" +']","['return field ( new ArrowType . Timestamp ( TimeUnit . MICROSECOND ) ) ;', 'case UINT 64 :', 'case 16 :', 'case 16 :', 'case UINT 64 :', 'return primitive ( INT64 , signed ? INT 64 : UINT 64 ) ;', 'return primitive ( INT64 , signed ? INT 64 : UINT 64 ) ;', 'case DOUBLE :', 'return integer ( 16 , true ) ;', 'return integer ( 16 , true ) ;']","['public void start ( ) {', 'if ( OriginalType . LIST = = parquetType . getOriginalType ( ) ) {', 'if ( originalType ! = OriginalType . LIST | | parquetType . isPrimitive ( ) ) {', 'GroupType rootWrapperType = parquetType . asGroupType ( ) ;', '}', 'public void end ( ) {', 'OriginalType originalType = parquetType . getOriginalType ( ) ;', 'public MapConverter ( Message . Builder parentBuilder , Descriptors . FieldDescriptor fieldDescriptor , Type parquetType ) {', 'if ( fieldIndex > 0 ) {', 'import org . apache . parquet . io . ParquetDecodingException ;']","['return field ( new ArrowType . Timestamp ( org . apache . arrow . vector . types . TimeUnit . MICROSECOND , ""UTC"" ) ) ;', 'return primitive ( INT64 , TIME MICROS ) ;', 'return primitive ( INT32 , TIME MILLIS ) ;', 'return field ( new ArrowType . Time ( TimeUnit . MILLISECOND , 32 ) ) ;', 'return field ( new ArrowType . Timestamp ( org . apache . arrow . vector . types . TimeUnit . MILLISECOND , ""UTC"" ) ) ;', 'return primitive ( INT32 , TIME MILLIS ) ;', 'default :', 'int bitWidth = type . getBitWidth ( ) ;', 'return field ( new ArrowType . Time ( org . apache . arrow . vector . types . TimeUnit . MILLISECOND , 32 ) ) ;', 'import org . apache . arrow . vector . types . TimeUnit ;']","['return primitive ( INT64 , TIMESTAMP MILLIS ) ;', 'return primitive ( INT64 , TIMESTAMP MILLIS ) ;', 'return field ( new ArrowType . Timestamp ( TimeUnit . MICROSECOND , ""UTC"" ) ) ;', 'import static org . apache . parquet . schema . OriginalType . TIMESTAMP MICROS ;', 'case TIMESTAMP MILLIS :', '} else if ( timeUnit = = TimeUnit . MICROSECOND ) {', 'case TIME MICROS :', 'TimeUnit timeUnit = type . getUnit ( ) ;', 'case TIMESTAMP MICROS :', '}']","['protected void updateNextOffset ( int bytesRead ) {', 'public void initFromPage ( int valueCount , byte [ ] page , int offset ) throws IOException {', 'private int nextOffset ;', 'public void initFromPage ( int valueCount , ByteBuffer page , int offset ) throws IOException {', '}', 'pageWithOffset . position ( offset ) ;', 'import org . apache . parquet . io . ParquetDecodingException ;', 'nextOffset = actualOffset = = - 1 ? - 1 : actualOffset + bytesRead ;', 'ByteBuffer pageWithOffset = page . duplicate ( ) ;', 'throw new ParquetDecodingException ( ""Unsupported : cannot get offset of the next section . "" ) ;']","['LogicalTypeAnnotation newLogicalType = getOriginalType ( schemaElement . logicalType ) ;', 'LogicalTypeAnnotation newLogicalType = schemaElement . isSetLogicalType ( ) ? getOriginalType ( schemaElement . logicalType ) : null ;', 'childBuilder . as ( getOriginalType ( schemaElement . converted type , schemaElement ) ) ;', 'childBuilder . as ( originalType ) ;']","['public void testLogicalTypesBackwardCompatibleWithConvertedTypes ( ) {', '@ Test', 'assertEquals ( expected , schema ) ;', '. as ( OriginalType . DECIMAL ) . precision ( 9 ) . scale ( 2 )', '. required ( PrimitiveTypeName . BINARY )', '. named ( ""Message"" ) ;', 'List < SchemaElement > parquetSchema = parquetMetadataConverter . toParquetSchema ( expected ) ;', 'parquetSchema . get ( 1 ) . setLogicalType ( null ) ;', 'MessageType schema = parquetMetadataConverter . fromParquetSchema ( parquetSchema , null ) ;', '}']","['useStatsFilter ( conf . getBoolean ( DICTIONARY FILTERING ENABLED , true ) ) ;', 'useStatsFilter ( conf . getBoolean ( STATS FILTERING ENABLED , true ) ) ;', 'useDictionaryFilter ( conf . getBoolean ( STATS FILTERING ENABLED , true ) ) ;', 'useDictionaryFilter ( conf . getBoolean ( DICTIONARY FILTERING ENABLED , true ) ) ;']","['default void visit ( DecimalLogicalTypeAnnotation logicalTypeAnnotation ) {', 'default Optional < T > visit ( ListLogicalTypeAnnotation logicalTypeAnnotation ) {', 'public abstract void accept ( LogicalTypeAnnotationVisitor logicalTypeAnnotationVisitor ) ;', 'default Optional < T > visit ( TimestampLogicalTypeAnnotation logicalTypeAnnotation ) {', 'default void visit ( StringLogicalTypeAnnotation logicalTypeAnnotation ) {', 'default Optional < T > visit ( IntLogicalTypeAnnotation logicalTypeAnnotation ) {', 'default void visit ( EnumLogicalTypeAnnotation logicalTypeAnnotation ) {', 'default Optional < T > visit ( DecimalLogicalTypeAnnotation logicalTypeAnnotation ) {', 'default void visit ( DateLogicalTypeAnnotation logicalTypeAnnotation ) {', 'default Optional < T > visit ( MapLogicalTypeAnnotation logicalTypeAnnotation ) {']","['for ( Schema childSchema : nonNullSchemas ) {', 'for ( Schema childSchema : nonNullSchemas ) {', 'unionTypes . add ( convertField ( ""member"" + index + + , childSchema , Type . Repetition . OPTIONAL ) ) ;', 'foundNullSchema = true ;', '}', 'convertUnionToGroupType ( fieldName , repetition , nonNullSchemas ) ;', 'List < Type > unionTypes = new ArrayList < Type > ( nonNullSchemas . size ( ) ) ;', '}', 'return convertField ( fieldName , nonNullSchemas . get ( 0 ) , repetition ) ;', 'return convertUnionToGroupType ( fieldName , repetition , nonNullSchemas ) ;']","['return LogicalTypeToken . UTF8 ;', 'INTEGER {', 'return LogicalTypeToken . INT ;', 'return LogicalTypeToken . INTEGER ;', 'INT {', 'STRING {', 'UTF8 {', 'return LogicalTypeToken . STRING ;', '"" required int32 i32 ( INT ( 32 , true ) ) ; "" +', '"" required int64 u64 ( INTEGER ( 64 , false ) ) ; "" +']","['public abstract class PrimitiveComparator < T > implements Comparator < T > {', 'public abstract class PrimitiveComparator < T > implements Comparator < T > , Serializable {', 'import java . io . Serializable ;']","['if ( formatStats . isSetNull count ( ) ) {', 'if ( formatStats . isSetNull count ( ) ) {', 'statsBuilder . withNumNulls ( formatStats . null count ) ;', 'statsBuilder . withNumNulls ( formatStats . null count ) ;', '}', '}', 'Assert . assertTrue ( ""Stats should be empty : "" + convertedStats , convertedStats . isEmpty ( ) ) ;', 'Assert . assertFalse ( ""Stats should not include min / max : "" + convertedStats , convertedStats . hasNonNullValue ( ) ) ;', 'Assert . assertEquals ( ""Stats should have 3 nulls : "" + convertedStats , 3L , convertedStats . getNumNulls ( ) ) ;', 'Assert . assertTrue ( ""Stats should have null count : "" + convertedStats , convertedStats . isNumNullsSet ( ) ) ;']","['return new GroupType ( repetition , name , getOriginalType ( ) , fields , id ) ;', 'return new GroupType ( repetition , name , logicalTypeAnnotation , fields , id ) ;', 'return new PrimitiveType ( repetition , primitiveType , length , name , getOriginalType ( ) , meta , id , columnOrder ) ;', 'return new PrimitiveType ( repetition , primitiveType , length , name , getOriginalType ( ) , meta , id , columnOrder ) ;', 'return new PrimitiveType ( repetition , primitiveType , length , name , logicalTypeAnnotation , id , columnOrder ) ;', '}', 'if ( newLogicalTypeSet ) {', '} else {', 'return new GroupType ( repetition , name , getOriginalType ( ) , fields , id ) ;', 'Assert . assertEquals ( utcMicrosExpected , utcMicrosActual ) ;']","['"" required binary key ( STRING ) ; \\ n"" +', 'import static org . apache . parquet . schema . LogicalTypeAnnotation . stringType ;', 'public void testUTF8Annotation ( ) {', '@ Test', '. required ( BINARY ) . as ( UTF8 ) . named ( ""string"" )', 'String message =', '"" required binary string ( STRING ) = 6 ; \\ n"" +', '"" required binary string ( UTF8 ) ; \\ n"" +', '"" repeated binary string ( STRING ) ; \\ n"" +', '}']","['transpositions + + ;', 'if ( copy . charAt ( j ) = = ch ) {', '}', 'for ( int i = 0 ; i < first . length ( ) ; i + + ) {', 'transpositions / = 2 ;', 'if ( first . charAt ( i ) ! = second . charAt ( i ) ) {', 'return transpositions ;', 'for ( int j = Math . max ( 0 , i - limit ) ; !found & & j < Math . min ( i + limit , second . length ( ) ) ; j + + ) {', '{', 'private static String getSetOfMatchingCharacterWithin ( final CharSequence first , final CharSequence second , final int limit ) {']","['return transpositions ;', 'return transpositions / 2 ;', 'transpositions / = 2 ;']","['}', 'final int result = getCommonPrefix ( first . toString ( ) , second . toString ( ) ) . length ( ) ;', 'longer = first . toString ( ) . toLowerCase ( ) ;', 'if ( shorter . charAt ( i ) ! = longer . charAt ( i ) ) {', 'String shorter ;', '} else {', 'for ( int i = 0 ; i < shorter . length ( ) ; i + + ) {', 'int result = 0 ;', 'if ( first . length ( ) > second . length ( ) ) {', 'longer = second . toString ( ) . toLowerCase ( ) ;']","[""if ( sz > start + 1 & & chars [ start ] = = '0' & & chars [ start + 1 ] = = 'x' ) {"", ""( chars [ start + 1 ] = = 'X' )"", '(', '& &', ') {', ""( chars [ start + 1 ] = = 'x' ) | |"", ""if ( sz > start + 1 & & chars [ start ] = = '0'"", ')']","['this ( pattern , timeZone , locale , null ) ;', '}', 'protected FastDateParser ( final String pattern , final TimeZone timeZone , final Locale locale ) {']","['if ( m1 . length ( ) = = 0 | | m2 . length ( ) = = 0 ) return 0 . 0 ;', 'return 0 . 0 ;', 'if ( m1 . length ( ) ! = m2 . length ( ) ) return 0 . 0 ;', 'if ( m1 . length ( ) ! = m2 . length ( ) ) {', 'if ( m1 . length ( ) = = 0 | | m2 . length ( ) = = 0 ) {', '}']","['Validate . isTrue ( constants . length < = Long . SIZE , CANNOT STORE S S VALUES IN S BITS , constants . length ,', 'if ( block < lvalues . length & & ( lvalues [ block ] & 1 < < ( constant . ordinal ( ) % Long . SIZE ) ) ! = 0 ) {', 'public static < E extends Enum < E > > EnumSet < E > processBitVectors ( final Class < E > enumClass , long . . . values ) {', 'Validate . isTrue ( constants . length < = Long . SIZE , CANNOT STORE S S VALUES IN S BITS ,', 'if ( block < values . length & & ( values [ block ] & 1 < < ( constant . ordinal ( ) % Long . SIZE ) ) ! = 0 ) {', 'ArrayUtils . reverse ( lvalues ) ;', 'enumClass . getSimpleName ( ) , Long . SIZE ) ;', 'public static < E extends Enum < E > > EnumSet < E > processBitVectors ( final Class < E > enumClass , final long . . . values ) {', 'values = ArrayUtils . clone ( Validate . notNull ( values ) ) ;', 'long [ ] lvalues = ArrayUtils . clone ( Validate . notNull ( values ) ) ;']","['private static boolean equals ( GenericArrayType a , Type t ) {', 'private static StringBuilder appendAllTo ( final StringBuilder buf , final String sep , final Type . . . types ) {', 'private static StringBuilder appendAllTo ( StringBuilder buf , String sep , Type . . . types ) {', 'public WildcardTypeBuilder withLowerBounds ( final Type . . . bounds ) {', 'private static String classToString ( Class < ? > c ) {', 'public WildcardTypeBuilder withUpperBounds ( final Type . . . bounds ) {', 'private static String genericArrayTypeToString ( GenericArrayType g ) {', 'final WildcardType wild = ( WildcardType ) type ;', 'private static boolean equals ( Type [ ] t1 , Type [ ] t2 ) {', 'public static boolean equals ( final Type t1 , final Type t2 ) {']","['if ( str = = null ) {', 'return new String ( newChars , 0 , count - ( whitespacesCount > 0 ? 1 : 0 ) ) ;', 'return WHITESPACE PATTERN . matcher ( trim ( str ) ) . replaceAll ( SPACE ) ;', 'for ( int i = 0 ; i < size ; i + + ) {', 'private static final Pattern WHITESPACE PATTERN = Pattern . compile ( "" ( ? : | \\ \\ u00A0 | \\ \\ s | [ \\ \\ s & & [ ^ ] ] ) \\ \\ s * "" ) ;', 'if ( whitespacesCount = = 0 & & !startWhitespaces ) {', 'return null ;', 'if ( startWhitespaces ) {', 'return EMPTY ;', 'newChars [ count + + ] = ( actualChar = = 160 ? 32 : actualChar ) ;']","['super . appendDetail ( buffer , fieldName , array ) ;', 'setContentEnd ( SystemUtils . LINE SEPARATOR + spacer ( spaces - indent ) + "" ] "" ) ;', 'import org . apache . commons . lang3 . ClassUtils ;', 'protected void appendDetail ( final StringBuffer buffer , final String fieldName , final long [ ] array ) {', 'buffer . append ( ReflectionToStringBuilder . toString ( value , this ) ) ;', 'StringBuilder sb = new StringBuilder ( ) ;', 'class MultilineRecursiveToStringStyle extends RecursiveToStringStyle {', 'protected void appendDetail ( final StringBuffer buffer , final String fieldName , final byte [ ] array ) {', 'super ( ) ;', 'setArrayEnd ( SystemUtils . LINE SEPARATOR + spacer ( spaces - indent ) + "" } "" ) ;']","['index = CharSequenceUtils . indexOf ( str , searchStr , index + 1 ) ;', 'index = CharSequenceUtils . indexOf ( str , searchStr , index + searchStr . length ( ) ) ;', 'index = CharSequenceUtils . lastIndexOf ( str , searchStr , index - 1 ) ;', 'index = CharSequenceUtils . lastIndexOf ( str , searchStr , index - searchStr . length ( ) ) ;']","['buffer . append ( value ) ;', 'if ( value . getClass ( ) = = String . class ) {', 'appendValueAsString ( buffer , ( String ) value ) ;', 'public void append ( StringBuffer buffer , String fieldName , int [ ] array ,', 'if ( value = = null ) {', 'this . setUseIdentityHashCode ( false ) ;', 'public void append ( StringBuffer buffer , String fieldName ,', '""FullDetail must be true when using JsonToStringStyle"" ) ;', 'super . appendFieldStart ( buffer , FIELD NAME PREFIX + fieldName', 'if ( fieldName = = null ) {']","['}', 'Properties systemProperties = null ;', '@ SuppressWarnings ( ""unchecked"" )', 'while ( propertyNames . hasMoreElements ( ) ) {', 'StrLookup < String > lookup = null ;', 'if ( input = = null ) {', 'private static final StrLookup < String > NONE LOOKUP ;', 'String propertyName = propertyNames . nextElement ( ) ;', 'static {', 'return null ;']","['import org . apache . commons . lang3 . Validate ;', ""buffer . setCharAt ( - - index , ( char ) ( '0' + value % 10 ) ) ;"", '}', '}', 'int digits ;', ""buffer . append ( '0' ) ;"", '} else {', 'for ( int digit = 0 ; digit < mSize ; + + digit ) {', ""buffer . append ( '0' ) ;"", 'for ( ; value > 0 ; value / = 10 ) {']","['final int max = ( j > Integer . MAX VALUE - threshold ) ? n : Math . min ( n , j + threshold ) ;', 'final int halflength = shorter . length ( ) / 2 + 1 ;', 'final int halflength = ( shorter . length ( ) / 2 ) + 1 ;', 'final int max = j > Integer . MAX VALUE - threshold ? n : Math . min ( n , j + threshold ) ;']","['}', 'regex . append ( VALID TZ ) ;', 'continue ;', 'private static final String VALID TZ = "" ( ( ? iu ) "" + RFC 822 TIME ZONE + "" | "" + GMT OPTION + "" | "" + TZ DATABASE + "" ) "" ;', 'private static class TimeZoneStrategy extends Strategy {', '}', ""sb . setCharAt ( sb . length ( ) - 1 , ' ) ' ) ;"", 'tz = TimeZone . getTimeZone ( value . toUpperCase ( ) ) ;', 'validTimeZoneChars = sb . toString ( ) ;', 'static final String TZ DATABASE = "" ( ? : \\ \\ p { L } [ \\ \\ p { L } \\ \\ p { Mc } \\ \\ p { Nd } \\ \\ p { Zs } \\ \\ p { P } & & [ ^ - ] ] * - ? \\ \\ p { Zs } ? ) * "" ;']","['. append ( Character . toTitleCase ( firstChar ) )', 'final char newChar = Character . toUpperCase ( firstChar ) ;', '. append ( str . substring ( 1 ) )', 'return String . valueOf ( newChars ) ;', 'if ( Character . isLowerCase ( firstChar ) ) {', 'if ( firstChar = = newChar ) {', '. toString ( ) ;', 'str . getChars ( 1 , strLen , newChars , 1 ) ;', 'return new StringBuilder ( strLen )', 'final char newChar = Character . toLowerCase ( firstChar ) ;']","['& & valueAsString . startsWith ( getArrayEnd ( ) ) ) {', '& & valueAsString . startsWith ( getArrayEnd ( ) ) ;', '| | valueAsString . startsWith ( getArrayStart ( ) )', '}', '& & valueAsString . endsWith ( getContentEnd ( ) )', 'if ( isJsonObject ( valueAsString ) | | isJsonArray ( valueAsString ) ) {', 'if ( valueAsString . startsWith ( getContentStart ( ) )', 'private boolean isJsonObject ( String valueAsString ) {', 'return valueAsString . startsWith ( getContentStart ( ) )', 'return valueAsString . startsWith ( getArrayStart ( ) )']","['this . typeArguments = typeArguments ;', 'this . typeArguments = typeArguments . clone ( ) ;']","['import java . util . TreeMap ;', 'for ( int i = 1 ; i < zoneNames . length ; + + i ) {', 'if ( !tzNames . containsKey ( zone [ SHORT DST ] ) ) {', ""simpleQuote ( sb . append ( ' | ' ) , zoneName ) ;"", ""escapeRegex ( regex , textKeyValue , false ) . append ( ' | ' ) ;"", ""case ' * ' :"", 'static final String TZ DATABASE = "" ( ? : \\ \\ p { L } [ \\ \\ p { L } \\ \\ p { Mc } \\ \\ p { Nd } \\ \\ p { Zs } \\ \\ p { P } & & [ ^ - ] ] * - ? \\ \\ p { Zs } ? ) * "" ;', ""case ' + ' :"", 'regex . append ( VALID TZ ) ;', 'this . locale = locale ;']","['return performStateCheck ( 1 ) ;', 'map . put ( State . CLOSED , new StateStrategyClosed ( ) ) ;', 'return now - currentData . getCheckIntervalStart ( ) > fetchCheckInterval ( breaker ) ;', 'return incrementAndCheckState ( 1 ) ;', 'public boolean checkState ( ) {', 'public void open ( ) {', 'checkIntervalStart = intervalStart ;', 'checkIntervalData = new AtomicReference < CheckIntervalData > ( new CheckIntervalData ( 0 , 0 ) ) ;', 'private final long checkIntervalStart ;', 'int closingThreshold ) {']","[""regex . setCharAt ( regex . length ( ) - 1 , ' ) ' ) ;"", 'private static final Comparator < Map . Entry < String , Integer > > ALTERNATIVES ORDERING = new Comparator < Map . Entry < String , Integer > > ( ) {', 'int modify ( final int iValue ) {', 'import java . util . Map . Entry ;', 'private transient Pattern parsePattern ;', 'for ( Map . Entry < String , Integer > entry : sort ) {', 'final Matcher matcher = parsePattern . matcher ( source . substring ( offset ) ) ;', 'String symbol = entry . getKey ( ) ;', 'protected FastDateParser ( final String pattern , final TimeZone timeZone , final Locale locale , final Date centuryStart ) {', '}']","['public static final FastDateFormat ISO TIME NO T TIME ZONE FORMAT', 'public static final FastDateFormat ISO TIME NO T FORMAT = ISO8601 TIME FORMAT ;', 'public static final FastDateFormat ISO TIME NO T FORMAT', 'public static final FastDateFormat ISO8601 TIME TIME ZONE FORMAT', 'public static final FastDateFormat ISO DATE FORMAT', 'public static final FastDateFormat ISO DATETIME TIME ZONE FORMAT = ISO8601 DATETIME TIME ZONE FORMAT ;', 'public static final FastDateFormat ISO DATETIME TIME ZONE FORMAT', 'public static final FastDateFormat ISO8601 DATETIME FORMAT', 'public static final FastDateFormat ISO DATETIME FORMAT', 'public static final FastDateFormat ISO DATETIME FORMAT = ISO8601 DATETIME FORMAT ;']","['if ( zoneName = = null ) {', '}', 'break ;']","['private static final Comparator < Map . Entry < String , Integer > > ALTERNATIVES ORDERING = new Comparator < Map . Entry < String , Integer > > ( ) {', 'if ( sorted . add ( key ) ) {', 'if ( zoneName = = null ) {', 'tzNames . put ( key , tzInfo ) ;', 'int v = left . getValue ( ) - right . getValue ( ) ;', 'TzInfo ( TimeZone tz , boolean useDst ) {', 'private final Map < String , TimeZone > tzNames = new HashMap < String , TimeZone > ( ) ;', 'TzInfo tzInfo = standard ;', 'cal . setTimeZone ( tz ) ;', 'final Set < String > sorted = new TreeSet < String > ( LONGER FIRST LOWERCASE ) ;']","['srcClass = srcArgs [ i ] ;', 'return ClassUtils . isAssignable ( parameterTypes , methodParameterTypes , true ) ;', 'totalCost + = getObjectTransformationCost ( srcClass , destClass ) ;', 'private static boolean isMatchingExecutable ( Executable method , Class < ? > [ ] parameterTypes ) {', 'private static float getTotalTransformationCost ( final Class < ? > [ ] srcArgs , final Class < ? > [ ] destArgs ) {', 'else if ( explicitArrayForVarags ) {', 'static int compareParameterTypes ( final Class < ? > [ ] left , final Class < ? > [ ] right , final Class < ? > [ ] actual ) {', 'if ( srcArgs . length < normalArgsLen )', 'for ( int i = 0 ; i < srcArgs . length ; i + + ) {', 'final boolean noVarArgsPassed = srcArgs . length < destArgs . length ;']","['continue ;', 'spaceToWrapAt = matcher . start ( ) ;', ""spaceToWrapAt = str . indexOf ( ' ' , wrapLength + offset ) ;"", 'Matcher matcher = patternToWrapOn . matcher ( str . substring ( offset , Math . min ( offset + wrapLength + 1 , inputLineLength ) ) ) ;', ""if ( str . charAt ( offset ) = = ' ' ) {"", 'while ( matcher . find ( ) ) {', ""int spaceToWrapAt = str . lastIndexOf ( ' ' , wrapLength + offset ) ;"", 'if ( StringUtils . isBlank ( wrapOn ) ) {', 'offset + + ;', 'offset + = matcher . end ( ) ;']","['int value = Integer . parseInt ( source . substring ( pos . getIndex ( ) , idx ) ) ;', 'final String key = zoneNames [ i ] . toLowerCase ( locale ) ;', 'Map < String , Integer > displayNames = cal . getDisplayNames ( field , Calendar . ALL STYLES , locale ) ;', 'final TzInfo tzInfo = tzNames . get ( value . toLowerCase ( locale ) ) ;', 'StrategyAndWidth field = fm . getNextStrategy ( ) ;', 'final TimeZone tz = TimeZone . getTimeZone ( ""GMT"" + value ) ;', 'int maxWidth = pattern . getMaxWidth ( lt ) ;', 'final TreeSet < String > sorted = new TreeSet < > ( LONGER FIRST LOWERCASE ) ;', 'ListIterator < StrategyAndWidth > lt = patterns . listIterator ( ) ;', 'final char c = value . charAt ( i ) ;']","['super . appendFieldStart ( buffer , FIELD NAME PREFIX + fieldName', 'super . appendFieldStart ( buffer , FIELD NAME QUOTE + fieldName', 'private static final String FIELD NAME PREFIX = "" \\ """" ;', 'private static final String FIELD NAME QUOTE = "" \\ """" ;', '+ FIELD NAME PREFIX ) ;', '+ FIELD NAME QUOTE ) ;']","['isNumericAreaCode ( segments [ 1 ] ) ) {', '( country . length ( ) = = 0 | | isISO3166CountryCode ( country ) ) & &', 'segments [ 2 ] . length ( ) > 0 ) {', 'isNumericAreaCode ( country ) ) {', 'final int segmentCount = segments . length - 1 ;', 'if ( isISO639LanguageCode ( language ) & & isISO3166CountryCode ( country ) | |', '} else if ( segmentCount = = 2 ) {', 'return new Locale ( language , country ) ;', '( segments [ 1 ] . length ( ) = = 0 | | isISO3166CountryCode ( segments [ 1 ] ) ) & &', 'final String variant = segments [ 2 ] ;']","['return array = = null | | array . length = = 0 ;', 'return getLength ( array ) = = 0 ;']","['return ( array ! = null & & array . length ! = 0 ) ;', 'return !isEmpty ( array ) ;']","['assert ( ( nBools - 1 ) < 16 - srcPos ) ;', 'if ( src . length = = 0 & & srcPos = = 0 | | 0 = = nBytes ) {', 'final long bits = ( ( 0xffffffffL & src [ i + srcPos ] ) < < shift ) ;', 'dst [ dstPos + i ] = ( 0x1 & ( src > > shift ) ) ! = 0 ;', 'if ( ( src . length = = 0 & & srcPos = = 0 ) | | 0 = = nBools ) {', 'final long bits = ( 0xffffffffL & src [ i + srcPos ] ) < < shift ;', 'if ( ( src . length = = 0 & & srcPos = = 0 ) | | 0 = = nShorts ) {', 'if ( src . length = = 0 & & srcPos = = 0 | | 0 = = nBools ) {', 'if ( ( src . length = = 0 & & srcPos = = 0 ) | | 0 = = nInts ) {', 'if ( src . length = = 0 & & srcPos = = 0 | | 0 = = nInts ) {']","['shift = i * 32 + srcPos ;', 'final int shift = i * 16 + dstPos ;', 'shift = i * 4 + dstPos ;', 'final int shift = i * 4 + dstPos ;', 'shift = i * 32 + dstPos ;', 'final int shift = i * 32 + srcPos ;', 'shift = i * 8 + srcPos ;', 'final int shift = i * 16 + srcPos ;', 'shift = i * 16 + dstPos ;', 'final int shift = i * 32 + dstPos ;']","[""& & ( f . getName ( ) . indexOf ( '$' ) = = - 1 )"", '& & ( !f . getName ( ) . contains ( ""$"" ) )', ""& & ( f . getName ( ) . indexOf ( '$' ) = = - 1 )"", '& & ( !f . getName ( ) . contains ( ""$"" ) )', ""& & ( field . getName ( ) . indexOf ( '$' ) = = - 1 )"", '& & ( !field . getName ( ) . contains ( ""$"" ) )']","['& & ( !f . getName ( ) . contains ( ""$"" ) )', '& & !f . getName ( ) . contains ( ""$"" )', 'isEquals = ( lhs = = rhs ) ;', '& & !Modifier . isStatic ( f . getModifiers ( ) ) ) {', '& & ( !Modifier . isStatic ( f . getModifiers ( ) ) ) ) {', 'isEquals = lhs = = rhs ;']","['if ( isEquals = = false ) {', 'if ( !isEquals ) {']","['& & ( !field . getName ( ) . contains ( ""$"" ) )', '& & !field . getName ( ) . contains ( ""$"" )', '& & ( !Modifier . isStatic ( field . getModifiers ( ) ) ) ) {', '& & !Modifier . isStatic ( field . getModifiers ( ) ) ) {']","['return ( cal1 . get ( Calendar . ERA ) = = cal2 . get ( Calendar . ERA ) & &', 'return cal1 . get ( Calendar . ERA ) = = cal2 . get ( Calendar . ERA ) & &', 'if ( modType = = ModifyType . CEILING | | ( modType = = ModifyType . ROUND & & roundUp ) ) {', 'cal1 . get ( Calendar . DAY OF YEAR ) = = cal2 . get ( Calendar . DAY OF YEAR ) ;', 'cal1 . getClass ( ) = = cal2 . getClass ( ) ) ;', 'return cal1 . get ( Calendar . MILLISECOND ) = = cal2 . get ( Calendar . MILLISECOND ) & &', 'return ( cal1 . get ( Calendar . MILLISECOND ) = = cal2 . get ( Calendar . MILLISECOND ) & &', 'if ( modType = = ModifyType . CEILING | | modType = = ModifyType . ROUND & & roundUp ) {', 'cal1 . get ( Calendar . DAY OF YEAR ) = = cal2 . get ( Calendar . DAY OF YEAR ) ) ;', 'cal1 . getClass ( ) = = cal2 . getClass ( ) ;']","['result = DateUtils . addYears ( base , 1 ) ;', 'BASE DATE = cal . getTime ( ) ;', 'result = DateUtils . setMinutes ( base , 59 ) ;', 'result = DateUtils . setMinutes ( BASE DATE , 60 ) ;', 'result = DateUtils . addMilliseconds ( base , 1 ) ;', 'result = DateUtils . setYears ( BASE DATE , 2008 ) ;', 'result = DateUtils . setMilliseconds ( base , 1000 ) ;', 'Date result = DateUtils . addMilliseconds ( BASE DATE , 0 ) ;', 'Date result = DateUtils . setMonths ( base , 5 ) ;', 'result = DateUtils . addHours ( BASE DATE , 1 ) ;']","['Date dateAmPm4 = null ;', 'private Date date4 = null ;', 'Date date8 = null ;', 'private DateFormat dateTimeParser = null ;', 'Calendar cal6 = null ;', 'private Date dateAmPm2 = null ;', 'Calendar calAmPm4 = null ;', 'private Calendar cal6 = null ;', 'Calendar cal8 = null ;', 'private Date dateAmPm1 = null ;']","['DateUtils . round ( ( Object ) cal5 , Calendar . HOUR OF DAY ) ) ;', 'DateUtils . round ( ( Object ) cal5 , Calendar . HOUR OF DAY ) ) ;', 'DateUtils . round ( ( Object ) cal7 , Calendar . HOUR OF DAY ) ) ;', 'DateUtils . round ( ( Object ) cal7 , Calendar . HOUR OF DAY ) ) ;', 'this . warn ( ""WARNING : Some date ceiling tests not run since the current version is "" + SystemUtils . JAVA SPECIFICATION VERSION ) ;', 'DateUtils . ceiling ( ( Object ) cal7 , Calendar . HOUR OF DAY ) ) ;', '}', 'assertEquals ( ""round MET date across DST change - over"" ,', 'if ( SystemUtils . isJavaVersionAtLeast ( JAVA 1 4 ) ) {', 'DateUtils . ceiling ( date5 , Calendar . HOUR OF DAY ) ) ;']","['public void testRoundLang346 ( ) throws Exception', 'public void testRoundLang346 ( ) throws Exception {', '{']","['result = DateUtils . setMinutes ( BASE DATE , 60 ) ;', 'DateUtils . setMinutes ( BASE DATE , 60 ) ;', 'result = DateUtils . setMonths ( BASE DATE , 12 ) ;', 'DateUtils . setMonths ( BASE DATE , 12 ) ;', 'result = DateUtils . setMilliseconds ( BASE DATE , 1000 ) ;', 'DateUtils . setDays ( BASE DATE , 32 ) ;', 'result = DateUtils . setDays ( BASE DATE , 32 ) ;', 'DateUtils . setMilliseconds ( BASE DATE , 1000 ) ;', 'result = DateUtils . setSeconds ( BASE DATE , 60 ) ;', 'DateUtils . setSeconds ( BASE DATE , 60 ) ;']","['date = DateUtils . parseDateStrictly ( dateStr , parsers ) ;', 'DateUtils . parseDateStrictly ( dateStr , parsers ) ;']","['DateUtils . isSameInstant ( ( Date ) null , ( Date ) null ) ;', '@ Test ( expected = IllegalArgumentException . class )', 'fail ( ) ;', '}', 'DateUtils . isSameDay ( ( Calendar ) null , ( Calendar ) null ) ;', 'public void testIsDameDay DateNullNull ( ) throws Exception {', 'DateUtils . isSameInstant ( ( Calendar ) null , ( Calendar ) null ) ;', 'DateUtils . isSameLocalTime ( ( Calendar ) null , ( Calendar ) null ) ;', 'try {', 'final String [ ] parsers = new String [ ] { ""yyyy\' - \'DDD"" , ""yyyy\' - \'MM\' - \'dd"" , ""yyyyMMdd"" } ;']","['for ( final String id : tzNames . keySet ( ) ) {', 'private static final String RFC 822 TIME ZONE = "" [ + - ] \\ \\ d { 4 } "" ;', 'continue ;', 'tz = TimeZone . getTimeZone ( value . toUpperCase ( ) ) ;', ""sb . setCharAt ( sb . length ( ) - 1 , ' ) ' ) ;"", 'static class TimeZoneStrategy extends Strategy {', 'private final String validTimeZoneChars ;', '}', 'final StringBuilder sb = new StringBuilder ( ) ;', 'static final String TZ DATABASE = "" ( ? : \\ \\ p { L } [ \\ \\ p { L } \\ \\ p { Mc } \\ \\ p { Nd } \\ \\ p { Zs } \\ \\ p { P } & & [ ^ - ] ] * - ? \\ \\ p { Zs } ? ) * "" ;']","['private static final String RFC 822 TIME ZONE = "" [ + - ] \\ \\ d { 4 } "" ;', 'for ( final String id : tzNames . keySet ( ) ) {', 'tz = TimeZone . getTimeZone ( value . toUpperCase ( ) ) ;', 'continue ;', 'static class TimeZoneStrategy extends Strategy {', ""sb . setCharAt ( sb . length ( ) - 1 , ' ) ' ) ;"", '}', 'private final String validTimeZoneChars ;', 'static final String TZ DATABASE = "" ( ? : \\ \\ p { L } [ \\ \\ p { L } \\ \\ p { Mc } \\ \\ p { Nd } \\ \\ p { Zs } \\ \\ p { P } & & [ ^ - ] ] * - ? \\ \\ p { Zs } ? ) * "" ;', 'final StringBuilder sb = new StringBuilder ( ) ;']","['} else if ( value = = d ) {', '} else if ( value . equals ( m ) ) {', '} else if ( value = = H ) {', '} else if ( value . equals ( H ) ) {', 'if ( previous ! = null & & previous . getValue ( ) = = value ) {', '} else if ( value . equals ( S ) ) {', '} else if ( value = = M ) {', 'if ( previous ! = null & & previous . getValue ( ) . equals ( value ) ) {', '} else if ( value = = S ) {', '} else if ( value . equals ( s ) ) {']","['return removeAll ( array , Arrays . copyOf ( indices , count ) ) ;', 'int [ ] indices = new int [ array . length - index ] ;', 'int count = 1 ;', '}', 'while ( ( index = indexOf ( array , element , indices [ count - 1 ] + 1 ) ) ! = INDEX NOT FOUND ) {', 'if ( index = = INDEX NOT FOUND ) {', 'indices [ count + + ] = index ;', 'public static < T > T [ ] removeAllOccurences ( final T [ ] array , final T element ) {', 'indices [ 0 ] = index ;', 'public static boolean [ ] removeAllOccurences ( final boolean [ ] array , final boolean element ) {']","['@ SuppressWarnings ( ""unchecked"" )', '@ SuppressWarnings ( ""unchecked"" )']","['@ SuppressWarnings ( ""unchecked"" )', '@ SuppressWarnings ( ""unchecked"" )']","['public static < T > T [ ] nullToEmpty ( final T [ ] array , final Class < T [ ] > type ) {', 'throw new IllegalArgumentException ( ""The type must not be null"" ) ;', '}', 'return array ;', 'return type . cast ( Array . newInstance ( type . getComponentType ( ) , 0 ) ) ;', 'if ( type = = null ) {', 'if ( array = = null ) {', 'public void testNullToEmptyGenericEmpty ( ) {', 'public void testNullToEmptyGenericNull ( ) {', 'private class TestClass { }']","['import static org . junit . Assert . assertFalse ;', 'assertTrue ( CharSet . getInstance ( "" ^ a - c"" ) . contains ( \'d\' ) ) ;', 'import static org . junit . Assert . assertSame ;', 'assertFalse ( CharSet . getInstance ( "" ^ a - c"" ) . contains ( \'a\' ) ) ;', 'import static org . junit . Assert . assertTrue ;', '@ Test', 'import static org . junit . Assert . assertEquals ;', 'assertFalse ( CharSet . getInstance ( "" ^ ^ a - c"" ) . contains ( \' ^ \' ) ) ;', 'assertTrue ( CharSet . getInstance ( "" ^ "" , ""a - c"" ) . contains ( \' ^ \' ) ) ;', 'import static org . junit . Assert . * ;']","['assertEquals ( ""cAT"" , StringUtils . uncapitalize ( ""CAT"" ) ) ;', 'assertEquals ( ""cat"" , StringUtils . uncapitalize ( ""cat"" ) ) ;', 'assertEquals ( ""cat"" , StringUtils . uncapitalize ( ""Cat"" ) ) ;']","['Assert . assertTrue ( locale . getDisplayName ( ) + "" : "" + zoneExpr , tz . matcher ( zoneExpr ) . matches ( ) ) ;', 'for ( Locale locale : Locale . getAvailableLocales ( ) ) {', 'for ( final String [ ] zone : zones ) {', '@ Test', 'final String [ ] [ ] zones = DateFormatSymbols . getInstance ( locale ) . getZoneStrings ( ) ;', 'for ( String zoneExpr : zone ) {', '}', 'Assert . assertFalse ( tz . matcher ( ""GMT - 1234"" ) . matches ( ) ) ;', 'public void testTimeZoneStrategyPattern ( ) {', 'import java . util . regex . Pattern ;']","['import static org . junit . Assert . * ;', 'import static org . junit . Assert . assertFalse ;', 'import static org . junit . Assert . assertSame ;', 'import static org . junit . Assert . assertTrue ;', 'import static org . junit . Assert . assertEquals ;']","['class MultilineRecursiveToStringStyle extends RecursiveToStringStyle {', 'public class MultilineRecursiveToStringStyle extends RecursiveToStringStyle {']","['return EMPTY ;', 'if ( repeat < = 0 ) {', '}', 'assertEquals ( ""zzz"" , StringUtils . repeat ( \'z\' , 3 ) ) ;', '@ Test', 'assertEquals ( """" , StringUtils . repeat ( \'z\' , - 2 ) ) ;', '}', 'assertEquals ( """" , StringUtils . repeat ( \'z\' , 0 ) ) ;', 'public void testRepeat CharInt ( ) {']","['assertEquals ( """" , StringUtils . repeat ( ""a"" , - 2 ) ) ;']","['final int offset = - ( shift % strLen ) ;', 'if ( shift = = 0 | | strLen = = 0 | | shift % strLen = = 0 ) {', 'return null ;', '}', 'if ( str = = null ) {', 'public static String rotate ( String str , int shift ) {', 'builder . append ( substring ( str , offset ) ) ;', 'final StringBuilder builder = new StringBuilder ( strLen ) ;', 'builder . append ( substring ( str , 0 , offset ) ) ;', 'final int strLen = str . length ( ) ;']","['""invalid number of type parameters specified : expected % s , got % s"" , raw . getTypeParameters ( ) . length ,', '""invalid number of type parameters specified : expected % d , got % d"" , raw . getTypeParameters ( ) . length ,']","['return true ;', 'return false ;', 'Assert . assertFalse ( TypeUtils . equals ( nonWildcardType , wildcardType ) ) ;', '@ Test', 'public void testLang1114 ( ) throws Exception {', '}', 'Assert . assertFalse ( TypeUtils . equals ( wildcardType , nonWildcardType ) ) ;', 'final Type nonWildcardType = getClass ( ) . getDeclaredField ( ""wildcardComparable"" ) . getGenericType ( ) ;', 'final Type wildcardType = ( ( ParameterizedType ) nonWildcardType ) . getActualTypeArguments ( ) [ 0 ] ;', 'public static Comparable < ? > wildcardComparable ;']","['fail ( ""Should have generated UnsupportedOperationException"" ) ;', 'try {', '@ Test', 'public void testChar ( ) {', 'public void testDate ( ) {', '}', 'new ToStringBuilder ( base ) . append ( now ) . toString ( ) ;', 'final Date after now = new Date ( System . currentTimeMillis ( ) + 1 ) ;', '} catch ( UnsupportedOperationException e ) {', 'assertEquals ( "" { \\ ""a \\ "" : \\ ""A \\ "" , \\ ""b \\ "" : \\ ""B \\ "" } "" , new ToStringBuilder ( base ) . append ( ""a"" , \'A\' ) . append ( ""b"" , \'B\' )']","['buffer . append ( value ) ;', 'if ( value instanceof Number | | value . getClass ( ) = = Boolean . class ) {', 'if ( value . getClass ( ) = = String . class ) {', '}', 'appendValueAsString ( buffer , ( String ) value ) ;', 'protected void appendDetail ( StringBuffer buffer , String fieldName , char value ) {', 'appendValueAsString ( buffer , String . valueOf ( value ) ) ;', 'appendValueAsString ( buffer , value . toString ( ) ) ;', '@ Override', 'buffer . append ( value ) ;']","['cal . set ( 2004 , 11 , 31 ) ;', 'final GregorianCalendar cal2 = new GregorianCalendar ( 2003 , 6 , 10 , 9 , 0 , 0 ) ;', 'cal . set ( 2004 , 1 , 3 ) ;', 'cal . set ( 1 , Calendar . MARCH , 2 ) ;', 'import static org . junit . Assert . * ;', 'cal . set ( 2004 , Calendar . FEBRUARY , 3 ) ;', 'final GregorianCalendar cal2 = new GregorianCalendar ( 2003 , 6 , 10 , 9 , 00 , 00 ) ;', 'cal . set ( 100 , Calendar . JANUARY , 1 ) ;', 'cal . set ( 10 , 0 , 1 ) ;', 'cal . set ( 2010 , Calendar . JANUARY , 1 , 12 , 0 , 0 ) ;']","['cal . set ( 2004 , 11 , 31 ) ;', 'cal . set ( 2003 , Calendar . FEBRUARY , 10 , 9 , 0 , 0 ) ;', 'cal . set ( 2010 , 7 , 1 , 3 , 33 , 20 ) ;', 'cal . set ( 2010 , Calendar . AUGUST , 1 , 3 , 33 , 20 ) ;', 'cal . set ( 2003 , 1 , 10 , 15 , 33 , 20 ) ;', 'cal . set ( 1000 , Calendar . JANUARY , 1 ) ;', 'cal . set ( 2010 , 7 , 1 , 0 , 33 , 20 ) ;', 'cal . set ( 2003 , Calendar . JULY , 10 , 16 , 33 , 20 ) ;', 'cal . set ( 2004 , 1 , 3 ) ;', 'cal . set ( 2004 , Calendar . FEBRUARY , 3 ) ;']","['cal . set ( 2002 , 1 , 23 , 10 , 11 , 12 ) ;', 'c . set ( 2005 , Calendar . JANUARY , 1 , 12 , 0 , 0 ) ;', 'cal . set ( 2002 , 1 , 23 , 9 , 11 , 12 ) ;', 'cal . set ( 2002 , Calendar . FEBRUARY , 23 , 10 , 11 , 12 ) ;', 'utcCal . set ( 2002 , 1 , 23 , 9 , 11 , 12 ) ;', 'cal . set ( 2003 , Calendar . JUNE , 8 , 10 , 11 , 12 ) ;', 'import static org . junit . Assert . * ;', 'import static org . junit . Assert . assertTrue ;', 'cal . set ( 2003 , 5 , 8 , 10 , 11 , 12 ) ;', 'import static org . junit . Assert . assertEquals ;']","['calb . set ( 2004 , 6 , 9 , 13 , 45 , 0 ) ;', 'testCalendar . set ( 2007 , Calendar . JULY , 2 , 8 , 8 , 50 ) ;', 'cala . set ( 2004 , 6 , 9 , 13 , 45 , 0 ) ;', 'testCalendar . set ( 2007 , Calendar . JULY , 2 , 8 , 31 , 50 ) ;', 'testCalendar . set ( 2007 , 6 , 2 , 8 , 8 , 20 ) ;', 'calb . set ( 2004 , Calendar . JULY , 9 , 13 , 45 , 0 ) ;', 'testCalendar . set ( 2007 , 6 , 2 , 8 , 8 , 50 ) ;', 'cala . set ( 2004 , Calendar . JULY , 9 , 13 , 45 , 0 ) ;', 'testCalendar . set ( 2007 , 6 , 2 , 8 , 31 , 50 ) ;', 'calb . set ( 2004 , Calendar . JULY , 9 , 11 , 45 , 0 ) ;']","['cal . set ( 1973 , 10 , 1 , 0 , 0 , 0 ) ;', 'cal . set ( 1973 , Calendar . JULY , 1 , 0 , 0 , 0 ) ;', 'cal . set ( 2003 , 1 , 1 , 0 , 0 , 0 ) ;', 'calendar . set ( 2012 , Calendar . SEPTEMBER , 8 ) ;', 'calendar . set ( 2012 , 6 , 30 , 0 , 0 , 0 ) ;', 'base . set ( 1970 , Calendar . JANUARY , 1 , 0 , 0 , 0 ) ;', 'cal . set ( 2002 , 1 , 23 , 9 , 11 , 12 ) ;', 'cal . set ( 1974 , Calendar . JANUARY , 1 , 0 , 0 , 0 ) ;', 'cal1970 . set ( 1970 , 0 , 1 , 0 , 0 , 0 ) ;', 'cal . set ( 2002 , Calendar . FEBRUARY , 23 , 9 , 11 , 12 ) ;']",['import java . util . Date ;'],"['try {', '@ Test', 'df . setTimeZone ( kst ) ;', 'fdp . parse ( ""2015"" ) ;', '}', '} catch ( ParseException pe ) {', 'Date expected = cal . getTime ( ) ;', 'cal . clear ( ) ;', 'Assert . assertEquals ( expected , actual ) ;', 'expected = df . parse ( ""20150429113100"" ) ;']","['parser = new SimpleDateFormat ( """" , locale ) ;', 'FastDateParser fdp = new FastDateParser ( parsePattern , tz , lcl , null , lenient ) ;', '}', 'return date ;', 'if ( locale = = null ) {', 'try {', 'str2 = str . replaceAll ( "" ( [ - + ] [ 0 - 9 ] [ 0 - 9 ] ) : ( [ 0 - 9 ] [ 0 - 9 ] ) $"" , ""$1$2"" ) ;', 'if ( pos . getIndex ( ) = = str . length ( ) ) {', 'for ( final String parsePattern : parsePatterns ) {', 'final ParsePosition pos = new ParsePosition ( 0 ) ;']","['return applyRules ( calendar , buf ) ;', 'return format ( calendar . getTime ( ) , buf ) ;', 'DateFormatUtils . SMTP DATETIME FORMAT . getLocale ( ) ) ;', 'String value = DateFormatUtils . format ( cal . getTimeInMillis ( ) , DateFormatUtils . ISO DATETIME TIME ZONE FORMAT . getPattern ( ) , TimeZone . getTimeZone ( ""Europe / London"" ) ) ;', 'text = DateFormatUtils . ISO TIME TIME ZONE FORMAT . format ( cal ) ;', 'private void testGmtMinus3 ( String expectedValue , String pattern ) {', 'text = DateFormatUtils . ISO DATETIME TIME ZONE FORMAT . format ( utcCal ) ;', 'timeZone = TimeZone . getTimeZone ( ""UTC"" ) ;', 'cal . set ( 2002 , Calendar . FEBRUARY , 23 , 10 , 11 , 12 ) ;', '@ Test']","['@ Test', 'final Person p = new Person ( ) {', '}', 'Person person ;', '"" { \\ ""pid \\ "" : \\ ""#1 @ Jane \\ "" , \\ ""person \\ "" : { \\ ""name \\ "" : \\ ""Jane Doe \\ "" , \\ ""age \\ "" : 25 , \\ ""smoker \\ "" : true } } "" ,', 'p . smoker = true ;', 'public void testNestingPerson ( ) {', 'return new ToStringBuilder ( this ) . append ( ""name"" , this . name )', 'p . age = 25 ;', '. append ( ""person"" , nestP . person )']","['if ( value instanceof Number | | value . getClass ( ) = = Boolean . class ) {', '| | try value str . startsWith ( getArrayStart ( ) ) & & try value str . startsWith ( getArrayEnd ( ) )', 'appendValueAsString ( buffer , value . toString ( ) ) ;', 'final String try value str = value . toString ( ) ;', 'buffer . append ( value ) ;', ') {', 'if ( try value str . startsWith ( getContentStart ( ) ) & & try value str . endsWith ( getContentEnd ( ) )', '}', 'appendDetail ( buffer , fieldName , try value str ) ;', 'appendValueAsString ( buffer , value . toString ( ) ) ;']","['return new ToStringBuilder ( this ) . append ( ""name"" , this . name )', 'return new ToStringBuilder ( this ) . append ( ""name"" , this . name )', '. append ( ""age"" , this . age ) . append ( ""smoker"" , this . smoker )', '. append ( ""age"" , this . age ) . append ( ""smoker"" , this . smoker )', 'final Person p = new Person ( ) {', 'final Person p = new Person ( ) {', '} ;', '} ;', '}', '}']","['timeZone = TimeZone . getTimeZone ( ""UTC"" ) ;', 'timeZone = TimeZone . getTimeZone ( ""UTC"" ) ;', 'Calendar june = createJuneTestDate ( timeZone ) ;', 'try {', 'assertFormats ( ""Sun , 08 Jun 2003 10 : 11 : 12 - 0300"" , DateFormatUtils . SMTP DATETIME FORMAT . getPattern ( ) ,', 'Calendar june = createJuneTestDate ( timeZone ) ;', 'timeZone , june ) ;', 'assertFormats ( ""Sun , 08 Jun 2003 10 : 11 : 12 - 0300"" , DateFormatUtils . SMTP DATETIME FORMAT . getPattern ( ) ,', 'TimeZone timeZone = TimeZone . getTimeZone ( ""GMT - 3"" ) ;', '}']","['public void testTimeISO ( ) {', 'public void testTimeISO ( ) {', 'public void testTimeNoTISO ( ) {', 'public void testDateISO ( ) {', 'public void testDateISO ( ) {', 'public void testTimeNoTISO ( ) {']","['iTotal = iTotal * iConstant + object . hashCode ( ) ;', '} else if ( object instanceof Double ) {', 'try {', 'append ( ( ( Byte ) object ) . byteValue ( ) ) ;', '} else if ( object instanceof Character ) {', '}', '} finally {', 'return this ;', '} else if ( object instanceof Boolean ) {', '} else if ( object instanceof Float ) {']","['appendDetail ( buffer , fieldName , try value str ) ;', '| | valueAsString . startsWith ( getArrayStart ( ) ) & & valueAsString . startsWith ( getArrayEnd ( ) )', 'if ( try value str . startsWith ( getContentStart ( ) ) & & try value str . endsWith ( getContentEnd ( ) )', 'appendDetail ( buffer , fieldName , valueAsString ) ;', 'final String try value str = value . toString ( ) ;', 'final String valueAsString = value . toString ( ) ;', '| | try value str . startsWith ( getArrayStart ( ) ) & & try value str . startsWith ( getArrayEnd ( ) )', 'if ( valueAsString . startsWith ( getContentStart ( ) ) & & valueAsString . endsWith ( getContentEnd ( ) )', 'final Date after now = new Date ( System . currentTimeMillis ( ) + 1 ) ;', 'final Date afterNow = new Date ( System . currentTimeMillis ( ) + 1 ) ;']","['| | valueAsString . startsWith ( getArrayStart ( ) ) & & valueAsString . startsWith ( getArrayEnd ( ) )', '& & valueAsString . startsWith ( getArrayEnd ( ) ) ) {', ') {', '& & valueAsString . endsWith ( getContentEnd ( ) )', 'if ( valueAsString . startsWith ( getContentStart ( ) ) & & valueAsString . endsWith ( getContentEnd ( ) )', '| | valueAsString . startsWith ( getArrayStart ( ) )', 'appendValueAsString ( buffer , value . toString ( ) ) ;', 'if ( valueAsString . startsWith ( getContentStart ( ) )', 'buffer . append ( value ) ;', 'appendValueAsString ( buffer , value . toString ( ) ) ;']","['buffer . append ( ""Z"" ) ;', 'if ( offset = = 0 ) {', 'static final TimeZoneNumberRule INSTANCE ISO 8601 = new TimeZoneNumberRule ( true , true ) ;', 'static final TimeZoneNumberRule INSTANCE NO COLON = new TimeZoneNumberRule ( false ) ;', 'final boolean mISO8601 ;', 'static final TimeZoneNumberRule INSTANCE COLON = new TimeZoneNumberRule ( true ) ;', 'if ( mISO8601 & & calendar . getTimeZone ( ) . getID ( ) . equals ( ""UTC"" ) ) {', 'rule = Iso8601 Rule . ISO8601 HOURS COLON MINUTES ;', 'static final TimeZoneNumberRule INSTANCE COLON = new TimeZoneNumberRule ( true , false ) ;', 'int offset = calendar . get ( Calendar . ZONE OFFSET ) + calendar . get ( Calendar . DST OFFSET ) ;']","['assertTrue ( Locale . getDefault ( ) + "" : "" + j + "" "" + tdata [ j ] [ 0 ] + "" "" + tdata [ j ] [ 1 ] , StringUtils', 'assertTrue ( Locale . getDefault ( ) + "" : "" + j + "" "" + tdata [ j ] [ 0 ] + "" "" + tdata [ j ] [ 1 ] , StringUtils', 'Locale . setDefault ( orig ) ;', 'import org . apache . commons . lang3 . test . DefaultLocale ;', 'try {', '} ;', '}', '}', '. containsIgnoreCase ( tdata [ j ] [ 0 ] , tdata [ j ] [ 1 ] ) ) ;', '. containsIgnoreCase ( tdata [ j ] [ 0 ] , tdata [ j ] [ 1 ] ) ) ;']","['DatePrinter getInstance ( final String format ) {', 'DatePrinter getInstance ( final String format ) {']","['assertTrue ( Locale . getDefault ( ) + "" : "" + j + "" "" + tdata [ j ] [ 0 ] + "" "" + tdata [ j ] [ 1 ] , StringUtils', 'assertTrue ( Locale . getDefault ( ) + "" : "" + j + "" "" + tdata [ j ] [ 0 ] + "" "" + tdata [ j ] [ 1 ] , StringUtils', 'import org . apache . commons . lang3 . test . DefaultLocale ;', 'import org . junit . Rule ;', '} ;', '@ Rule', '}', 'public TestLocale locale = TestLocale . usingDefaultLocale ( ) ;', '. containsIgnoreCase ( tdata [ j ] [ 0 ] , tdata [ j ] [ 1 ] ) ) ;', '}']","['& & !Modifier . isStatic ( f . getModifiers ( ) ) ) {', '& & ( !f . isAnnotationPresent ( EqualsExclude . class ) ) ) {', '& & ( !Modifier . isStatic ( f . getModifiers ( ) ) )', '@ Target ( ElementType . FIELD )', 'import java . lang . annotation . Target ;', '}', 'import static java . lang . annotation . RetentionPolicy . RUNTIME ;', 'import java . lang . annotation . ElementType ;', 'import java . lang . annotation . Retention ;', 'package org . apache . commons . lang3 . builder ;']","['private AlwaysTruePredicate ( ) {', 'return true ;', 'result . addAll ( findThreads ( group , false , new NamePredicate ( threadName ) ) ) ;', 'if ( thread ! = null & & thread . getThreadGroup ( ) ! = null & & thread . getThreadGroup ( ) . getName ( ) . equals ( threadGroupName ) ) {', 'public boolean test ( final Thread thread ) {', 'throw new IllegalArgumentException ( ""The thread group must not be null"" ) ;', '@ Override', 'public static Collection < Thread > findThreadsByName ( final String threadName , final String threadGroupName ) {', 'return result . iterator ( ) . next ( ) ;', 'if ( predicate . test ( threads [ i ] ) ) {']","['result . addAll ( findThreads ( group , false , new NamePredicate ( threadName ) ) ) ;', 'if ( result . isEmpty ( ) ) {', 'if ( !result . iterator ( ) . hasNext ( ) ) {', 'result . addAll ( findThreads ( group , false , threadNamePredicate = = null ? ( threadNamePredicate = new NamePredicate ( threadName ) ) : threadNamePredicate ) ) ;', 'final List < Thread > result = new ArrayList < Thread > ( ) ;', 'final List < ThreadGroup > result = new ArrayList < ThreadGroup > ( count ) ;', 'final List < ThreadGroup > result = new ArrayList < ThreadGroup > ( ) ;', 'NamePredicate threadNamePredicate = null ;', 'final List < Thread > result = new ArrayList < Thread > ( count ) ;', 'final List < ThreadGroup > threadGroups = Arrays . asList ( threadGroup1 , threadGroup2 , threadGroup3 , threadGroup4 , threadGroup5 , threadGroup6 ) ;']","['@ Retention ( RUNTIME )', 'import java . lang . annotation . RetentionPolicy ;', 'import static java . lang . annotation . RetentionPolicy . RUNTIME ;', '@ Retention ( RetentionPolicy . RUNTIME )', '@ Retention ( RUNTIME )', 'import java . lang . annotation . RetentionPolicy ;', 'import static java . lang . annotation . RetentionPolicy . RUNTIME ;', '@ Retention ( RetentionPolicy . RUNTIME )', '@ Retention ( RUNTIME )', 'import java . lang . annotation . RetentionPolicy ;']","['threads = new Thread [ count + ( count > > 1 ) + 1 ] ;', 'threads = new Thread [ count + ( count / 2 ) + 1 ] ;', 'result . addAll ( findThreads ( group , false , threadNamePredicate = = null ? ( threadNamePredicate = new NamePredicate ( threadName ) ) : threadNamePredicate ) ) ;', 'return Collections . EMPTY LIST ;', 'for ( final ThreadGroup group : findThreadGroups ( new NamePredicate ( threadGroupName ) ) ) {', 'if ( threadGroups . isEmpty ( ) ) {', 'for ( int i = 0 ; i < count ; + + i ) {', '} while ( count > = threadGroups . length ) ;', 'NamePredicate threadNamePredicate = null ;', 'threadGroups = new ThreadGroup [ count + ( count / 2 ) + 1 ] ;']","['return list . toArray ( ArrayUtils . EMPTY STRING ARRAY ) ;', 'return list . toArray ( new String [ list . size ( ) ] ) ;']","['}', 'Assert . assertEquals ( ArrayUtils . INDEX NOT FOUND , toString . indexOf ( SECRET VALUE ) ) ;', 'Assert . assertEquals ( ArrayUtils . INDEX NOT FOUND , toString . indexOf ( SECRET VALUE ) ) ;', 'Assert . assertEquals ( ArrayUtils . INDEX NOT FOUND , toString . indexOf ( SECRET FIELD ) ) ;', 'private void validateSecretFieldAbsent ( final String toString ) {', 'this . validateSecretFieldAbsent ( toString ) ;', 'private void validateNonSecretField ( final String toString ) {', 'Assert . assertEquals ( ArrayUtils . INDEX NOT FOUND , toString . indexOf ( SECRET FIELD ) ) ;', 'this . validateNonSecretField ( toString ) ;']","['import org . junit . Assert ;', 'assertThat ( toString , containsString ( NOT SECRET VALUE ) ) ;', 'Assert . assertTrue ( toString . indexOf ( NOT SECRET FIELD ) > ArrayUtils . INDEX NOT FOUND ) ;', 'assertThat ( toString , containsString ( NOT SECRET FIELD ) ) ;', 'import org . apache . commons . lang3 . ArrayUtils ;', 'assertThat ( toString , not ( containsString ( SECRET VALUE ) ) ) ;', 'Assert . assertEquals ( ArrayUtils . INDEX NOT FOUND , toString . indexOf ( SECRET VALUE ) ) ;', 'assertThat ( toString , not ( containsString ( SECRET FIELD ) ) ) ;', 'Assert . assertTrue ( toString . indexOf ( NOT SECRET VALUE ) > ArrayUtils . INDEX NOT FOUND ) ;', 'import static org . hamcrest . Matchers . containsString ;']","['private static final String SECRET VALUE = ""secret value"" ;', 'private final String includedField = INCLUDED FIELD VALUE ;', 'private final String showField = NOT SECRET VALUE ;', 'private final String excludedField = EXCLUDED FIELD VALUE ;', 'private static final String SECRET FIELD = ""secretField"" ;', 'private static final String INCLUDED FIELD NAME = ""includedField"" ;', 'assertThat ( toString , containsString ( NOT SECRET VALUE ) ) ;', 'assertThat ( toString , containsString ( INCLUDED FIELD NAME ) ) ;', 'private static final String NOT SECRET VALUE = ""Hello World!"" ;', 'private static final String INCLUDED FIELD VALUE = ""Hello World!"" ;']","['if ( iterator . hasNext ( ) ) {', '}', 'return result . toString ( ) ;', 'String sanitizedSeparator = defaultString ( separator , StringUtils . EMPTY ) ;', 'throw new IllegalArgumentException ( ""Object varargs must not be null"" ) ;', 'if ( objects = = null ) {', 'StringBuilder result = new StringBuilder ( ) ;', 'result . append ( sanitizedSeparator ) ;', 'while ( iterator . hasNext ( ) ) {', 'Iterator < Object > iterator = Arrays . asList ( objects ) . iterator ( ) ;']","['V compute ( final A arg ) throws InterruptedException ;', 'public interface Computable < A , V > {', '}', 'package org . apache . commons . lang3 . concurrent ;', 'public class Memoizer < A , V > implements Computable < A , V > {', 'try {', 'import java . util . concurrent . Callable ;', 'ft . run ( ) ;', '}', 'private final boolean recalculate ;']","['public TestLocale locale = TestLocale . usingDefaultLocale ( ) ;', '@ SystemDefaults ( locale = ""de DE"" )', 'locale . setLocale ( testLocale ) ;', 'import org . apache . commons . lang3 . test . SwitchDefaults ;', 'import org . apache . commons . lang3 . time . TestLocale ;', 'Locale . setDefault ( testLocale ) ;', 'public SwitchDefaults defaults = new SwitchDefaults ( ) ;', 'import org . apache . commons . lang3 . test . SystemDefaults ;', 'try {', 'if ( defaults = = null ) {']","['for ( final Class < ? > primitiveClass : primitiveWrapperMap . keySet ( ) ) {', 'final Class < ? > primitiveClass = entry . getKey ( ) ;', 'final Class < ? > wrapperClass = primitiveWrapperMap . get ( primitiveClass ) ;', 'final Class < ? > wrapperClass = entry . getValue ( ) ;', 'for ( final Map . Entry < Class < ? > , Class < ? > > entry : primitiveWrapperMap . entrySet ( ) ) {']","['if ( obj instanceof StrBuilder ) {', 'return obj instanceof StrBuilder & & equals ( ( StrBuilder ) obj ) ;', 'return false ;', 'return equals ( ( StrBuilder ) obj ) ;', '}']","['if ( other = = null ) {', 'return false ;', '}', '@ Test', 'public void test LANG 1131 EqualsWithNullStrBuilder ( ) throws Exception {', '}', 'final StrBuilder sb = new StrBuilder ( ) ;', 'final StrBuilder other = null ;', 'assertFalse ( sb . equals ( other ) ) ;']","['if ( !p . matcher ( word ) . matches ( ) ) {', 'return true ;', '| | ( words . length = = 1 & & StringUtils . isBlank ( words [ 0 ] ) ) ) {', 'import org . apache . commons . lang3 . ArrayUtils ;', '}', 'if ( StringUtils . isEmpty ( word ) | | ArrayUtils . isEmpty ( words )', 'for ( String w : words ) {', 'public static boolean containsAllWords ( String word , String . . . words ) {', 'return false ;', 'import java . util . regex . Pattern ;']","['String sanitizedSeparator = defaultString ( separator , StringUtils . EMPTY ) ;', 'final StringBuilder result = new StringBuilder ( ) ;', 'Iterator < Object > iterator = Arrays . asList ( objects ) . iterator ( ) ;', 'public static String joinWith ( final String separator , final Object . . . objects ) {', 'StringBuilder result = new StringBuilder ( ) ;', 'final String sanitizedSeparator = defaultString ( separator , StringUtils . EMPTY ) ;', 'public static String joinWith ( final String separator , Object . . . objects ) {', 'final Iterator < Object > iterator = Arrays . asList ( objects ) . iterator ( ) ;']","['assertEquals ( "" , a , "" , StringUtils . joinWith ( "" , "" , new String [ ] { null , ""a"" , """" } ) ) ;', 'StringUtils . joinWith ( "" , "" , ( Object [ ] ) null ) ;', 'assertEquals ( """" , StringUtils . joinWith ( "" , "" , NULL ARRAY LIST ) ) ;', 'assertEquals ( """" , StringUtils . joinWith ( "" , "" , ( Object [ ] ) NULL ARRAY LIST ) ) ;', 'assertEquals ( ""a , b , c"" , StringUtils . joinWith ( "" , "" , new String [ ] { ""a"" , ""b"" , ""c"" } ) ) ;', 'assertEquals ( ""a , b , c"" , StringUtils . joinWith ( "" , "" , new Object [ ] { ""a"" , ""b"" , ""c"" } ) ) ;', 'StringUtils . joinWith ( "" , "" , null ) ;', 'assertEquals ( "" , a , "" , StringUtils . joinWith ( "" , "" , new Object [ ] { null , ""a"" , """" } ) ) ;']","['public boolean test ( @ SuppressWarnings ( ""unused"" ) final ThreadGroup threadGroup ) {', 'public boolean test ( final Thread thread ) {', 'public boolean test ( @ SuppressWarnings ( ""unused"" ) final Thread thread ) {', 'public boolean test ( final ThreadGroup threadGroup ) {', 'return Collections . EMPTY LIST ;', 'return Collections . emptyList ( ) ;']","['result . append ( ObjectUtils . toString ( iterator . next ( ) ) ) ;', '@ SuppressWarnings ( ""deprecation"" )', 'final String value = ObjectUtils . toString ( iterator . next ( ) ) ;', 'result . append ( value ) ;']","['public void testConstructorWithNullObject ( ) {', '@ Test ( expected = IllegalArgumentException . class )', '}', 'public class ReflectionToStringBuilderTest {', 'import org . junit . Test ;', 'package org . apache . commons . lang3 . builder ;', 'new ReflectionToStringBuilder ( null , ToStringStyle . DEFAULT STYLE , new StringBuffer ( ) ) ;']","['super ( object , style ) ;', 'super ( checkNotNull ( object ) , style , buffer ) ;', 'super ( object ) ;', 'super ( checkNotNull ( object ) , style ) ;', 'super ( object , style , buffer ) ;', 'super ( checkNotNull ( object ) ) ;', '}', 'return obj ;', 'throw new IllegalArgumentException ( ""The Object passed in should not be null . "" ) ;', 'if ( obj = = null ) {']","['@ Test', '@ Test ( expected = IllegalArgumentException . class )']","['long aux = array [ offset1 + i ] ;', 'if ( array = = null | | array . length = = 0 ) {', 'boolean aux = array [ offset1 + i ] ;', '}', 'double aux = array [ offset1 + i ] ;', 'array [ offset1 ] = array [ offset2 ] ;', 'float aux = array [ offset1 + i ] ;', 'array [ offset2 ] = aux ;', '}', 'long aux = array [ offset1 ] ;']","['/', 'assertEquals ( 4 , array [ 0 ] ) ;', 'assertEquals ( 5 , array [ 1 ] ) ;', 'assertEquals ( 2 , array [ 3 ] ) ;', 'assertEquals ( 3 , array [ 4 ] ) ;', 'ArrayUtils . shift ( array , 2 ) ;', 'assertEquals ( 1 , array [ 2 ] ) ;', 'array = new short [ ] { 1 , 2 , 3 , 4 , 5 } ;']","['assertFalse ( StringUtils . containsAny ( ""hello , null"" , new String [ ] { ""Hello"" , null } ) ) ;', 'assertFalse ( StringUtils . containsAny ( ""hello , goodbye"" , new String [ ] { ""Hello"" , null } ) ) ;']","['assertTrue ( StringUtils . containsAny ( ""zzabyycdxx"" , ""zy"" ) ) ;']","['assertTrue ( StringUtils . containsAny ( ""zzabyycdxx"" , new char [ ] { \'z\' , \'y\' } ) ) ;']","['assertEquals ( - 1 , StringUtils . indexOfAnyBut ( ""aba"" , new char [ ] { \'a\' , \'b\' } ) ) ;', 'assertEquals ( - 1 , StringUtils . indexOfAny ( ""ab"" , \'z\' ) ) ;', 'assertTrue ( StringUtils . containsAny ( ""hello , goodbye"" , new String [ ] { ""hello"" , ""Goodbye"" } ) ) ;', 'assertEquals ( 0 , StringUtils . indexOfAny ( ""zzabyycdxx"" , \'z\' , \'a\' ) ) ;', 'assertEquals ( 0 , StringUtils . indexOfAny ( ""zzabyycdxx"" , new char [ ] { \'z\' , \'a\' } ) ) ;', 'assertEquals ( - 1 , StringUtils . indexOfAnyBut ( """" ) ) ;', 'assertEquals ( - 1 , StringUtils . indexOfAny ( """" , new char [ ] { \'a\' , \'b\' } ) ) ;', 'assertEquals ( 3 , StringUtils . indexOfAnyBut ( ""zzabyycdxx"" , \'z\' , \'a\' ) ) ;', ""assertEquals ( - 1 , StringUtils . indexOfAnyBut ( null , new char [ ] { 'a' , 'b' } ) ) ;"", 'assertEquals ( - 1 , StringUtils . indexOfAnyBut ( ""aba"" , \'a\' , \'b\' ) ) ;']","['public static interface ThreadPredicate / * extends java . util . function . Predicate < Thread > * / {', 'public interface ThreadPredicate / * extends java . util . function . Predicate < Thread > * / {', 'public static interface ThreadGroupPredicate / * extends java . util . function . Predicate < ThreadGroup > * / {', 'public interface ThreadGroupPredicate / * extends java . util . function . Predicate < ThreadGroup > * / {']","['for ( final Iterator iterator = threadGroups . iterator ( ) ; iterator . hasNext ( ) ; ) {', 'if ( !threadGroup . isDestroyed ( ) ) {', 'import java . util . Iterator ;', 'for ( final ThreadGroup threadGroup : threadGroups ) {', 'final ThreadGroup threadGroup = ( ThreadGroup ) iterator . next ( ) ;', 'for ( final Thread thread : threads ) {', 'final Thread thread = ( Thread ) iterator . next ( ) ;', 'for ( final Iterator iterator = threads . iterator ( ) ; iterator . hasNext ( ) ; ) {', 'if ( !threadGroup . isDestroyed ( ) ) {']","['assertEquals ( t2 . getName ( ) , ThreadUtils . findThreadById ( t2 . getId ( ) , ""thread group DDZZ99 "" ) . getName ( ) ) ;', 'assertSame ( t1 , ThreadUtils . findThreadById ( t1 . getId ( ) , ""thread group DDZZ99 "" ) ) ;', 'assertEquals ( t1 . getName ( ) , ThreadUtils . findThreadById ( t1 . getId ( ) ) . getName ( ) ) ;', 'assertSame ( t2 , ThreadUtils . findThreadById ( t2 . getId ( ) , ""thread group DDZZ99 "" ) ) ;', 'assertEquals ( t1 . getName ( ) , ThreadUtils . findThreadById ( t1 . getId ( ) , ""thread group DDZZ99 "" ) . getName ( ) ) ;', 'assertSame ( t1 , ThreadUtils . findThreadById ( t1 . getId ( ) ) ) ;']","['if ( StringUtils . isEmpty ( word ) | | ArrayUtils . isEmpty ( words )', 'public static boolean containsAllWords ( CharSequence word , CharSequence . . . words ) {', 'for ( String w : words ) {', 'if ( StringUtils . isEmpty ( word ) | | ArrayUtils . isEmpty ( words ) ) {', 'public static boolean containsAllWords ( String word , String . . . words ) {', '}', '| | ( words . length = = 1 & & StringUtils . isBlank ( words [ 0 ] ) ) ) {', 'if ( StringUtils . isBlank ( w ) ) {', 'return false ;', 'for ( CharSequence w : words ) {']","['final TimeZone newTimeZone = TimeZone . getTimeZone ( defaults . timezone ( ) ) ;', 'final TimeZone newTimeZone = TimeZone . getTimeZone ( defaults . timezone ( ) ) ;', 'return stmt ;', 'return stmt ;', '} ;', '} ;', 'SystemDefaults defaults = description . getAnnotation ( SystemDefaults . class ) ;', 'SystemDefaults defaults = description . getAnnotation ( SystemDefaults . class ) ;', 'if ( defaults = = null ) {', '}']","['import org . apache . commons . lang3 . test . SwitchDefaults ;', 'import org . apache . commons . lang3 . test . SystemDefaultsSwitch ;', 'public SwitchDefaults defaults = new SwitchDefaults ( ) ;', 'public SystemDefaultsSwitch defaults = new SystemDefaultsSwitch ( ) ;', 'public class SwitchDefaults implements TestRule {', 'public class SystemDefaultsSwitch implements TestRule {', 'import org . apache . commons . lang3 . test . SwitchDefaults ;', 'import org . apache . commons . lang3 . test . SystemDefaultsSwitch ;', 'public SwitchDefaults defaults = new SwitchDefaults ( ) ;', 'public SystemDefaultsSwitch defaults = new SystemDefaultsSwitch ( ) ;']","['DEFAULT TIMEZONE BEFORE TEST = TimeZone . getDefault ( ) ;', 'import org . junit . Rule ;', '@ Test', 'private static TimeZone TEST DEFAULT TIMEZONE ;', 'public void testDefaultLocaleNoAnnotation ( ) throws Exception {', 'public static void classSetUp ( ) {', '}', 'public void testUseDifferentTimeZone ( ) throws Exception {', 'public class SystemDefaultsSwitchTest {', 'TEST DEFAULT TIMEZONE = TimeZone . getDefault ( ) ;']","['listeners . add ( listener ) ;', '} else if ( !allowDuplicate & & !listeners . contains ( listener ) ) {', 'listeners . add ( listener ) ;', '}', 'addListener ( listener , true ) ;', 'if ( allowDuplicate ) {', 'public void addListener ( final L listener , boolean allowDuplicate ) {', 'final VetoableChangeListener [ ] listeners = listenerSupport . getListeners ( ) ;', 'listenerSupport . addListener ( listener1 , false ) ;', 'public void testAddListenerNoDuplicates ( ) {']","['private VetoableChangeListener createListener ( final List < VetoableChangeListener > calledListeners )', 'public void testCreateWithNonInterfaceParameter ( ) {', 'public void testCreateWithNonInterfaceParameter ( )', 'public class EventListenerSupportTest {', 'public void testCreateWithNullParameter ( )', 'public void testEventDispatchOrder ( ) throws PropertyVetoException {', 'public void testAddNullListener ( )', '@ Test ( expected = IllegalArgumentException . class )', 'listenerSupport . addListener ( new VetoableChangeListener ( )', 'private void addDeregisterListener ( final EventListenerSupport < VetoableChangeListener > listenerSupport ) {']","['} else if ( !allowDuplicate & & !listeners . contains ( listener ) ) {', '} else if ( !listeners . contains ( listener ) ) {']","['public String toString ( ) {', ""return super . toString ( ) + ' ' + Arrays . toString ( chars ) ;"", '@ Override', '}']","['StringUtils . getLevenshteinDistance ( null , ""a"" , 0 ) ;', 'StringUtils . getLevenshteinDistance ( null , ""a"" , 0 ) ;', 'assertEquals ( StringUtils . replaceEach ( ""abcde"" , new String [ ] { ""ab"" , ""d"" } , new String [ ] { ""d"" , ""t"" } ) , ""dcte"" ) ;', 'assertTrue ( StringUtils . isEmpty ( """" ) ) ;', 'assertTrue ( StringUtils . isEmpty ( """" ) ) ;', 'final String [ ] expectedResults = { ""ab"" , """" , "" de fg"" } ;', 'final String [ ] expectedResults = { ""ab"" , """" , "" de fg"" } ;', 'assertEquals ( ""a"" , StringUtils . join ( new String [ ] { null , ""a"" , """" } ) ) ;', 'FOO CAP , StringUtils . capitalize ( FOO CAP ) ) ;', 'assertEquals ( - 1 , StringUtils . indexOfDifference ( new String [ ] { ""abc"" , ""abc"" } ) ) ;']","['return text . replaceFirst ( regex , replacement ) ;', 'return text . replaceAll ( regex , replacement ) ;', '}', 'public static String replaceFirst ( final String text , final String regex , final String replacement ) {', 'public static String replaceAll ( final String text , final String regex , final String replacement ) {', 'return text ;', 'import java . util . regex . PatternSyntaxException ;', 'if ( text = = null | | regex = = null | | replacement = = null ) {', 'try {', '@ Test']","['@ SuppressWarnings ( ""unchecked"" )', '@ SuppressWarnings ( { ""unchecked"" , ""rawtypes"" } )']","['+ "" Locale : "" + locale . getDisplayName ( )', 'Assert . fail ( ""\'"" + tzDisplay + ""\'""', '+ "" offset : "" + t ) ;', ') ;', 'Assert . fail ( tzDisplay', '+ "" defaultLocale : "" + Locale . getDefault ( )', '+ "" offset : "" + t', '+ "" Locale : \'"" + locale . getDisplayName ( ) + ""\'""', '+ "" defaultTimeZone : "" + TimeZone . getDefault ( ) . getDisplayName ( )']","['assertEquals ( ""B \\ nJ"" , WordUtils . initials ( "" Ben \\ n JohnLee"" , array ) ) ;', 'assertEquals ( ""BJL"" , WordUtils . initials ( "" Ben \\ n JohnLee"" , array ) ) ;', 'assertEquals ( """" , WordUtils . initials ( "" Ben \\ n JohnLee"" , array ) ) ;', 'assertEquals ( ""BJL"" , WordUtils . initials ( "" Ben \\ n JohnLee"" ) ) ;']","['""FOO TEST THING"" , StringUtils . upperCase ( ""fOo test THING"" , Locale . ENGLISH ) ) ;', '""FOO TEST THING"" , StringUtils . upperCase ( ""fOo test THING"" , Locale . ENGLISH ) ) ;', 'assertEquals ( ""lowerCase ( String , Locale ) failed"" ,', '@ Test', '"""" , StringUtils . lowerCase ( """" ) ) ;', 'assertEquals ( ""lowerCase ( String , Locale ) failed"" ,', 'assertEquals ( ""cat"" , StringUtils . uncapitalize ( ""Cat"" ) ) ;', '}', '""foo test thing"" , StringUtils . lowerCase ( ""fOo test THING"" ) ) ;', 'public void testUpperCase ( ) {']","['assertNull ( StringUtils . capitalize ( null ) ) ;', 'assertEquals ( ""\'cat\'"" , StringUtils . capitalize ( ""\'cat\'"" ) ) ;', 'assertEquals ( """" , StringUtils . capitalize ( """" ) ) ;', 'assertEquals ( ""CAt"" , StringUtils . capitalize ( ""cAt"" ) ) ;', 'assertEquals ( ""Cat"" , StringUtils . capitalize ( ""cat"" ) ) ;']","['if ( block < lvalues . length & & ( lvalues [ block ] & 1 < < ( constant . ordinal ( ) % Long . SIZE ) ) ! = 0 ) {', 'total | = 1L < < constant . ordinal ( ) ;', 'result [ value . ordinal ( ) / Long . SIZE ] | = 1 < < ( value . ordinal ( ) % Long . SIZE ) ;', 'if ( block < lvalues . length & & ( lvalues [ block ] & 1L < < ( constant . ordinal ( ) % Long . SIZE ) ) ! = 0 ) {', 'total | = 1 < < constant . ordinal ( ) ;', 'result [ value . ordinal ( ) / Long . SIZE ] | = 1L < < ( value . ordinal ( ) % Long . SIZE ) ;', 'assertArrayEquals ( EnumUtils . generateBitVectors ( Enum64 . class , Enum64 . A31 ) , ( 1L < < 31 ) ) ;', 'assertEquals ( ( 1L < < 31 ) , EnumUtils . generateBitVector ( Enum64 . class , EnumSet . of ( Enum64 . A31 ) ) ) ;', 'A48 , A49 , A50 , A51 , A52 , A53 , A54 , A55 , A56 , A57 , A58 , A59 , A60 , A61 , A62 , A63 ;', 'assertEquals ( ( 1L < < 31 ) , EnumUtils . generateBitVector ( Enum64 . class , Enum64 . A31 ) ) ;']","['final String systemNewLine = System . getProperty ( ""line . separator"" ) ;', 'import org . apache . commons . lang3 . SystemUtils ;', 'final String systemNewLine = SystemUtils . LINE SEPARATOR ;']","['if ( StringUtils . endsWith ( str , "" . "" ) ) {', 'return true ;', 'return isDigits ( StringUtils . replaceOnce ( str , "" . "" , StringUtils . EMPTY ) ) ;', 'if ( decimalPoints > 1 ) {', 'if ( StringUtils . startsWith ( str , "" - "" ) ) {', ""if ( str . charAt ( str . length ( ) - 1 ) = = ' . ' ) {"", 'return isDigits ( StringUtils . replaceOnce ( str . substring ( 1 ) , "" . "" , StringUtils . EMPTY ) ) ;', 'int decimalPoints = 0 ;', 'if ( str . length ( ) = = 1 ) {', 'private static boolean withDecimalsParsing ( final String str , final int beginIdx ) {']","['Properties output = new Properties ( ) ;', 'private static class SystemPropertiesStrLookup extends StrLookup < String > {', 'try {', 'try {', '}', 'if ( key . length ( ) > 0 ) {', 'Enumeration < String > propertyNames = ( Enumeration < String > ) input . propertyNames ( ) ;', 'return null ;', 'String propertyName = propertyNames . nextElement ( ) ;', '}']","['return random ( count , 33 , 126 , false , false ) ;', 'public static String randomGraph ( final int count ) {', 'return random ( count , 32 , 126 , false , false ) ;', '}', 'public static String randomPrint ( final int count ) {', 'r2 = RandomStringUtils . randomPrint ( 50 ) ;', 'for ( int i = 0 ; i < r1 . length ( ) ; i + + ) {', 'assertTrue ( ""char between 33 and 126"" , r1 . charAt ( i ) > = 33 & & r1 . charAt ( i ) < = 126 ) ;', '}', 'r1 = RandomStringUtils . randomPrint ( 50 ) ;']","['return randomGraph ( RandomUtils . nextInt ( minLengthInclusive , maxLengthExclusive ) ) ;', 'public static String randomAlphabetic ( final int minLengthInclusive , final int maxLengthExclusive ) {', 'public static String randomAlphanumeric ( final int minLengthInclusive , final int maxLengthExclusive ) {', 'public static String randomGraph ( final int minLengthInclusive , final int maxLengthExclusive ) {', 'return randomPrint ( RandomUtils . nextInt ( minLengthInclusive , maxLengthExclusive ) ) ;', '}', 'public static String randomPrint ( final int minLengthInclusive , final int maxLengthExclusive ) {', 'return randomNumeric ( RandomUtils . nextInt ( minLengthInclusive , maxLengthExclusive ) ) ;', 'public static String randomAscii ( final int minLengthInclusive , final int maxLengthExclusive ) {', 'public static String randomNumeric ( final int minLengthInclusive , final int maxLengthExclusive ) {']","[""buffer . setCharAt ( - - index , ( char ) ( '0' + value % 10 ) ) ;"", ""char c = ( char ) ( '0' + value % 10 ) ;"", ""buffer . append ( '0' ) ;"", ""buffer . append ( '0' ) ;"", 'int first = buffer . length ( ) ;', 'if ( - - index < first ) {', '}', 'buffer . setCharAt ( index , c ) ;', 'else {', 'buffer . insert ( first , c ) ;']","['@ SuppressWarnings ( ""unchecked"" )', '}', 'return ExceptionUtils . < R , RuntimeException > typeErasure ( throwable ) ;', 'public static < R > R rethrow ( Throwable throwable ) {', 'throw ( T ) throwable ;', 'private static < R , T extends Throwable > R typeErasure ( Throwable throwable ) throws T {', 'import org . junit . Test ;', 'Assert . assertSame ( expected , actual ) ;', 'import org . junit . Before ;', 'import static org . junit . Assert . assertSame ;']","['throw new UndeclaredThrowableException ( throwable ) ;', 'if ( chain instanceof UndeclaredThrowableException ) {', 'public static boolean hasCause ( Throwable chain ,', 'import java . lang . reflect . UndeclaredThrowableException ;', 'chain = chain . getCause ( ) ;', '}', 'if ( throwable instanceof Error ) {', 'throw ( RuntimeException ) throwable ;', 'throw ( Error ) throwable ;', 'Class < ? extends Throwable > type ) {']","['final String decomposed = Normalizer . normalize ( input , Normalizer . Form . NFD ) ;', ""} else if ( decomposed . charAt ( i ) = = ' \\ u0142' ) {"", ""decomposed . insert ( i , 'l' ) ;"", '}', 'convertRemainingAccentCharacters ( decomposed ) ;', 'final StringBuilder decomposed = new StringBuilder ( Normalizer . normalize ( input , Normalizer . Form . NFD ) ) ;', 'decomposed . deleteCharAt ( i ) ;', ""if ( decomposed . charAt ( i ) = = ' \\ u0141' ) {"", 'private static void convertRemainingAccentCharacters ( StringBuilder decomposed ) {', 'for ( int i = 0 ; i < decomposed . length ( ) ; i + + ) {']","['< B extends Appendable > B format ( Date date , B buf ) ;', '< B extends Appendable > B format ( long millis , B buf ) ;', '< B extends Appendable > B format ( Calendar calendar , B buf ) ;', '@ Deprecated', 'return printer . format ( obj , toAppendTo , pos ) ;', 'return printer . format ( millis , buf ) ;', 'public < B extends Appendable > B format ( final Calendar calendar , final B buf ) {', 'public < B extends Appendable > B format ( final Date date , final B buf ) {', '@ Deprecated', 'public < B extends Appendable > B format ( final long millis , final B buf ) {']",['@ Deprecated'],"['sb . append ( "" / "" ) ;', 'return context . getName ( ) + "" . "" + resourceName ;', 'sb . append ( context . getName ( ) ) ;', 'return context . getName ( ) . replace ( \' . \' , \' / \' ) + "" / "" + resourceName ;', ""sb . append ( context . getName ( ) . replace ( ' . ' , ' / ' ) ) ;"", 'sb . append ( resourceName ) ;', 'return sb . toString ( ) ;', 'final StringBuilder sb = new StringBuilder ( ) ;', 'sb . append ( "" . "" ) ;', ""buf . append ( ' ] ' ) ;""]","['final char newChar = Character . toUpperCase ( firstChar ) ;', 'final char newChar = Character . toTitleCase ( firstChar ) ;', 'assertEquals ( ""capitalize ( String ) is not using TitleCase"" ,', '"" \\ u01C8"" , StringUtils . capitalize ( "" \\ u01C9"" ) ) ;']","['StopWatch sw = new StopWatch ( ) ;', '}', 'public static StopWatch createStarted ( ) {', 'return sw ;', 'sw . start ( ) ;', '@ Test', '}', 'final StopWatch watch = StopWatch . createStarted ( ) ;', 'assertTrue ( watch . isStarted ( ) ) ;', 'public void testStopWatchStatic ( ) {']","['if ( startsWith ( str , wrapToken ) & & endsWith ( str , wrapToken ) ) {', 'return str . substring ( startIndex + wrapLength , endIndex ) ;', ""if ( isEmpty ( str ) | | wrapChar = = ' \\ 0' ) {"", 'int startIndex = str . indexOf ( wrapToken ) ;', 'if ( str . charAt ( 0 ) = = wrapChar & & str . charAt ( str . length ( ) - 1 ) = = wrapChar ) {', 'int endIndex = str . length ( ) - 1 ;', '}', 'if ( startIndex ! = - 1 & & endIndex ! = - 1 ) {', 'int endIndex = str . lastIndexOf ( wrapToken ) ;', 'return str . substring ( startIndex + 1 , endIndex ) ;']","['if ( Character . isDigit ( cs . charAt ( i ) ) = = false ) {', 'if ( !Character . isDigit ( cs . charAt ( i ) ) ) {']","['return true ;', 'return StringUtils . isNumeric ( str ) ;', 'if ( !Character . isDigit ( str . charAt ( i ) ) ) {', '}', 'return false ;', 'if ( StringUtils . isEmpty ( str ) ) {', 'for ( int i = 0 ; i < str . length ( ) ; i + + ) {']","['return ExceptionUtils . rethrow ( e ) ;', 'return ExceptionUtils . < Integer > rethrow ( e ) ;']","['if ( val = = null ) {', 'return true ;', 'if ( values = = null ) {', '}', 'for ( final Object val : values ) {', 'return firstNonNull ( values ) ! = null ;', 'return false ;', 'public static boolean anyNotNull ( final Object . . . values ) {', 'public static boolean allNotNull ( final Object . . . values ) {', '@ Test']","['return CharSequenceUtils . regionMatches ( cs1 , false , 0 , cs2 , 0 , Math . max ( cs1 . length ( ) , cs2 . length ( ) ) ) ;', 'return CharSequenceUtils . regionMatches ( cs1 , false , 0 , cs2 , 0 , cs1 . length ( ) ) ;', 'return false ;', 'if ( cs1 . length ( ) ! = cs2 . length ( ) ) {', '}', 'final CharSequence fooCs = FOO , barCs = BAR , foobarCs = FOOBAR ;', 'final CharSequence fooCs = new StringBuilder ( FOO ) , barCs = new StringBuilder ( BAR ) , foobarCs = new StringBuilder ( FOOBAR ) ;']","['Assert . fail ( ""Expected "" + IndexOutOfBoundsException . class . getName ( ) ) ;', 'Assert . assertEquals ( null , CharSequenceUtils . subSequence ( StringUtils . EMPTY , 1 ) ) ;', 'Assert . assertEquals ( null , CharSequenceUtils . subSequence ( StringUtils . EMPTY , 1 ) ) ;', 'public void testSubSequenceNegativeStart ( ) {', '/ /', 'Assert . assertEquals ( null , CharSequenceUtils . subSequence ( StringUtils . EMPTY , - 1 ) ) ;', 'try {', '}', 'Assert . assertEquals ( null , CharSequenceUtils . subSequence ( StringUtils . EMPTY , - 1 ) ) ;', '@ Test ( expected = IndexOutOfBoundsException . class )']","['if ( thisStart < 0 | | start < 0 | | length < 0 ) {', 'final int srcLen = cs . length ( ) - thisStart ;', 'final int otherLen = substring . length ( ) - start ;', 'if ( srcLen < length | | otherLen < length ) {', '}', 'return false ;', 'sb . append ( source ) . append ( "" [ "" ) . append ( toffset ) . append ( "" ] "" ) ;', '} . run ( data , ""CSString"" ) ;', 'try {', 'Assert . fail ( id + "" Expected "" + data . throwable ) ;']","['new TestData ( ""Abc"" , false , 0 , ""abc"" , 0 , 3 , false ) ,', 'new TestData ( ""Abc"" , true , 1 , ""abc"" , 1 , 2 , true ) ,', 'new TestData ( ""Abc"" , true , 0 , ""abc"" , 0 , 3 , true ) ,', 'new TestData ( ""Abcd"" , true , 1 , ""abcD"" , 1 , 2 , true ) ,', 'new TestData ( ""Abcd"" , false , 1 , ""abcD"" , 1 , 2 , true ) ,', 'new TestData ( ""Abc"" , false , 1 , ""abc"" , 1 , 2 , true ) ,']","['return true ;', 'if ( ArrayUtils . isNotEmpty ( searchStrings ) ) {', 'if ( equalsIgnoreCase ( string , next ) ) {', 'for ( CharSequence next : searchStrings ) {', '}', 'public static boolean equalsAnyIgnoreCase ( final CharSequence string , final CharSequence . . . searchStrings ) {', 'public static boolean equalsAny ( final CharSequence string , final CharSequence . . . searchStrings ) {', 'return false ;', 'if ( equals ( string , next ) ) {', 'assertTrue ( StringUtils . equalsAnyIgnoreCase ( FOO , BAR , null , """" , FOO . toUpperCase ( ) , BAR ) ) ;']","['return compare ( str1 , str2 , true ) ;', 'public static int compareIgnoreCase ( final String str1 , final String str2 ) {', 'return 0 ;', 'if ( str1 = = null ) {', 'return str1 . compareTo ( str2 ) ;', 'if ( str1 = = str2 ) {', '}', 'public static int compareIgnoreCase ( final String str1 , final String str2 , final boolean nullIsLess ) {', 'return compareIgnoreCase ( str1 , str2 , true ) ;', 'return str1 . compareToIgnoreCase ( str2 ) ;']","['}', 'return nextFloat ( 0 , Float . MAX VALUE ) ;', 'public static double nextDouble ( ) {', 'public static float nextFloat ( ) {', '}', 'return nextInt ( 0 , Integer . MAX VALUE ) ;', 'public static int nextInt ( ) {', 'return nextDouble ( 0 , Double . MAX VALUE ) ;', 'public static long nextLong ( ) {', 'return nextLong ( 0 , Long . MAX VALUE ) ;']","['public static final FastDateFormat ISO TIME NO T TIME ZONE FORMAT = ISO8601 TIME TIME ZONE FORMAT ;', 'public static final FastDateFormat ISO 8601 EXTENDED DATETIME FORMAT', 'public static final FastDateFormat ISO8601 TIME TIME ZONE FORMAT', 'public static final FastDateFormat ISO DATETIME TIME ZONE FORMAT = ISO 8601 EXTENDED DATETIME TIME ZONE FORMAT ;', 'public static final FastDateFormat ISO DATE FORMAT = ISO8601 DATE FORMAT ;', 'public static final FastDateFormat ISO 8601 EXTENDED TIME TIME ZONE FORMAT', 'public static final FastDateFormat ISO8601 DATE FORMAT', 'public static final FastDateFormat ISO DATE FORMAT = ISO 8601 EXTENDED DATE FORMAT ;', 'public static final FastDateFormat ISO8601 TIME FORMAT', 'public static final FastDateFormat ISO TIME NO T TIME ZONE FORMAT = ISO 8601 EXTENDED TIME TIME ZONE FORMAT ;']","['fail ( ""The method "" + m + "" appears to be immutable in spirit and therefore must not accept a String"" ) ;', 'final String [ ] excludeMethods = {', 'fail ( ""The method "" + m + "" appears to be mutable in spirit and therefore must not accept a CharSequence"" ) ;', '""public static int org . apache . commons . lang3 . StringUtils . compare ( java . lang . String , java . lang . String ) "" ,', 'fail ( ""The method \\ """" + methodStr + "" \\ "" appears to be immutable in spirit and therefore must not accept a String"" ) ;', '""public static int org . apache . commons . lang3 . StringUtils . compare ( java . lang . String , java . lang . String , boolean ) "" ,', '""public static int org . apache . commons . lang3 . StringUtils . compareIgnoreCase ( java . lang . String , java . lang . String ) "" ,', '} ;', 'fail ( ""The method \\ """" + methodStr + "" \\ "" appears to be mutable in spirit and therefore must not accept a CharSequence"" ) ;', 'String methodStr = m . toString ( ) ;']","['} else {', 'if ( !ArrayUtils . contains ( excludeMethods , methodStr ) ) {', 'System . out . println ( ""The mutable method \\ """" + methodStr + "" \\ "" is expressly excluded from testStringUtilsCharSequenceContract ( ) "" ) ;', 'System . out . println ( ""The immutable method \\ """" + methodStr + "" \\ "" is expressly excluded from testStringUtilsCharSequenceContract ( ) "" ) ;', 'if ( ArrayUtils . contains ( excludeMethods , methodStr ) ) {']",['import java . util . regex . PatternSyntaxException ;'],"['if ( source = = null | | regex = = null | | replacement = = null ) {', 'return source ;', '}', 'assertNull ( StringUtils . replacePattern ( null , """" , """" ) ) ;', 'assertEquals ( ""AB"" , StringUtils . removePattern ( ""A < > \\ n < > B"" , "" < . * > "" ) ) ;', 'assertEquals ( ""z"" , StringUtils . replacePattern ( "" < > \\ \\ n < > "" , "" < . * > "" , ""z"" ) ) ;', 'assertEquals ( ""zzz"" , StringUtils . replacePattern ( """" , "" . * "" , ""zzz"" ) ) ;', 'assertEquals ( ""ABC 123"" , StringUtils . replacePattern ( ""ABCabc123"" , "" [ a - z ] "" , "" "" ) ) ;', 'assertEquals ( """" , StringUtils . replacePattern ( """" , "" . + "" , ""zzz"" ) ) ;', 'assertEquals ( """" , StringUtils . removePattern ( """" , "" . * "" ) ) ;']","['@ SuppressWarnings ( ""deprecation"" )', '@ SuppressWarnings ( ""deprecation"" )', '@ SuppressWarnings ( ""deprecation"" )', '@ SuppressWarnings ( ""deprecation"" )', '@ SuppressWarnings ( ""deprecation"" )']","['return replaceAll ( text , regex , StringUtils . EMPTY ) ;', 'return replaceFirst ( text , regex , StringUtils . EMPTY ) ;', '}', 'public static String removeFirst ( final String text , final String regex ) {', 'public static String removeAll ( final String text , final String regex ) {', 'assertEquals ( """" , StringUtils . removeFirst ( ""any"" , "" . + "" ) ) ;', 'try {', '@ Test', 'assertNull ( StringUtils . removeAll ( null , """" ) ) ;', 'assertEquals ( """" , StringUtils . removeAll ( ""any"" , "" . + "" ) ) ;']","['public void testReplaceFirst StringStringString ( ) {', 'public void testReplaceAll ( ) {', 'public void testReplaceAll StringStringString ( ) {', 'public void testReplaceFirst ( ) {', 'assertEquals ( ""ZZaZZbZZcZZ"" , StringUtils . replaceAll ( ""abc"" , """" , ""ZZ"" ) ) ;', 'assertEquals ( ""ZZabc"" , StringUtils . replaceFirst ( ""abc"" , """" , ""ZZ"" ) ) ;']","['assertFalse ( StringUtils . equalsAny ( FOO , new CustomCharSequence ( ""fOo"" ) ) ) ;', 'assertTrue ( StringUtils . equalsAny ( FOO , new CustomCharSequence ( ""foo"" ) ) ) ;', 'assertFalse ( StringUtils . equalsAny ( FOO , new StringBuilder ( ""fOo"" ) ) ) ;', 'assertFalse ( StringUtils . equalsAnyIgnoreCase ( null , ( CharSequence [ ] ) null ) ) ;', 'assertTrue ( StringUtils . equalsAny ( FOO , new StringBuilder ( ""foo"" ) ) ) ;', 'assertTrue ( StringUtils . equalsAnyIgnoreCase ( FOO , new CustomCharSequence ( ""fOo"" ) ) ) ;', 'assertTrue ( StringUtils . equalsAnyIgnoreCase ( FOO , new StringBuilder ( ""fOo"" ) ) ) ;', 'assertFalse ( StringUtils . equalsAny ( null , ( CharSequence [ ] ) null ) ) ;']","['return ( long [ ] ) removeAll ( ( Object ) array , clone ( indices ) ) ;', 'return ( char [ ] ) removeAll ( ( Object ) array , indices ) ;', 'return ( double [ ] ) removeAll ( ( Object ) array , clone ( indices ) ) ;', 'int i = clonedIndices . length ;', 'if ( isNotEmpty ( indices ) ) {', 'int [ ] clonedIndices = clone ( indices ) ;', 'return ( char [ ] ) removeAll ( ( Object ) array , clone ( indices ) ) ;', 'final int index = clonedIndices [ i ] ;', 'return ( float [ ] ) removeAll ( ( Object ) array , clone ( indices ) ) ;', 'for ( int i = clonedIndices . length - 1 ; i > = 0 ; i - - ) {']","['return - 1 ;', '}', 'else if ( Math . abs ( n - m ) > threshold ) {']","['index = CharSequenceUtils . lastIndexOf ( str , searchStr , index - searchStr . length ( ) ) ;', 'index = CharSequenceUtils . lastIndexOf ( str , searchStr , index - 1 ) ;', 'index = CharSequenceUtils . indexOf ( str , searchStr , index + searchStr . length ( ) ) ;', 'index = CharSequenceUtils . indexOf ( str , searchStr , index + 1 ) ;', 'assertEquals ( - 1 , StringUtils . ordinalIndexOf ( ""aaaaaa"" , ""aa"" , 3 ) ) ;', 'assertEquals ( 2 , StringUtils . ordinalIndexOf ( ""aaaaaa"" , ""aa"" , 3 ) ) ;', 'assertEquals ( 3 , StringUtils . ordinalIndexOf ( ""aaaaaa"" , ""aa"" , 2 ) ) ;', 'assertEquals ( 1 , StringUtils . ordinalIndexOf ( ""aaaaaa"" , ""aa"" , 2 ) ) ;', 'assertEquals ( 2 , StringUtils . ordinalIndexOf ( ""ababab"" , ""aba"" , 2 ) ) ;', 'assertEquals ( - 1 , StringUtils . ordinalIndexOf ( ""ababab"" , ""aba"" , 3 ) ) ;']","['assertEquals ( 4 , StringUtils . ordinalIndexOf ( ""abababab"" , ""abab"" , 3 ) ) ;', 'assertEquals ( - 1 , StringUtils . ordinalIndexOf ( ""abababab"" , ""abab"" , 4 ) ) ;', 'assertEquals ( 0 , StringUtils . ordinalIndexOf ( ""abababab"" , ""abab"" , 1 ) ) ;', 'assertEquals ( 2 , StringUtils . ordinalIndexOf ( ""abababab"" , ""abab"" , 2 ) ) ;']","[""case 'u' :"", '} ;', '}', 'private static final Strategy DAY OF WEEK STRATEGY = new NumberStrategy ( Calendar . DAY OF WEEK ) {', 'return iValue ! = 7 ? iValue + 1 : Calendar . SUNDAY ;', 'return DAY OF WEEK STRATEGY ;', '@ Override', 'int modify ( FastDateParser parser , final int iValue ) {', 'rule = new DayInWeekField ( selectNumberRule ( Calendar . DAY OF WEEK , tokenLen ) ) ;', 'break ;']","['return ( Integer ) GET WEEK YEAR . invoke ( calendar ) ;', 'if ( IS WEEK DATE SUPPORTED = = null & & calendar instanceof GregorianCalendar ) {', 'try {', '- - year ;', 'if ( isWeekDateSupported ( calendar ) ) {', 'case Calendar . JANUARY :', '}', 'case Calendar . DECEMBER :', 'static boolean isWeekDateSupported ( Calendar calendar ) {', 'return m ;']","['if ( bit pattern ! = 0 ) {', 'shift count = mask ! = 0 ? Integer . numberOfTrailingZeros ( mask ) : 0 ;', 'bit pattern > > = 1 ;', 'shift count = count ;', '}', 'int bit pattern = mask ;', 'int count = 0 ;', 'while ( ( bit pattern & 1 ) = = 0 ) {', 'count + + ;']","['return ( Integer ) GET WEEK YEAR . invoke ( calendar ) ;', 'if ( IS WEEK DATE SUPPORTED = = null & & calendar instanceof GregorianCalendar ) {', 'try {', '- - year ;', 'if ( isWeekDateSupported ( calendar ) ) {', 'case Calendar . JANUARY :', '}', 'case Calendar . DECEMBER :', 'static boolean isWeekDateSupported ( Calendar calendar ) {', 'return m ;']","['return ( Integer ) GET WEEK YEAR . invoke ( calendar ) ;', 'if ( IS WEEK DATE SUPPORTED = = null & & calendar instanceof GregorianCalendar ) {', 'try {', '- - year ;', 'if ( isWeekDateSupported ( calendar ) ) {', 'case Calendar . JANUARY :', '}', 'case Calendar . DECEMBER :', 'static boolean isWeekDateSupported ( Calendar calendar ) {', 'return m ;']","['return bool ? 1 : 0 ;', 'return bool ? 1 : 0 ;', 'if ( !element ) {', 'if ( !element ) {', 'return true ;', 'return true ;', 'public static boolean xor ( final boolean . . . array ) {', 'public static boolean xor ( final boolean . . . array ) {', 'return nullString ;', 'return nullString ;']","['return bool ? 1 : 0 ;', 'return bool ? 1 : 0 ;', 'if ( !element ) {', 'if ( !element ) {', 'return true ;', 'return true ;', 'public static boolean xor ( final boolean . . . array ) {', 'public static boolean xor ( final boolean . . . array ) {', 'return nullString ;', 'return nullString ;']","['}', 'return x ? 1 : - 1 ;', '} else {', 'return - 1 ;', 'return 1 ;', 'if ( x ) {']","['return list . toArray ( new String [ list . size ( ) ] ) ;', 'return list . toArray ( ArrayUtils . EMPTY STRING ARRAY ) ;']","['if ( fieldName = = null ) {', 'throw new IllegalArgumentException ( ""Field name cannot be null"" ) ;', '}']","['if ( objectsTriviallyEqual ) {', 'if ( fieldName = = null ) {', 'if ( diffResult = = null ) {', 'public DiffBuilder append ( final String fieldName ,', 'throw new IllegalArgumentException ( ""Diff result cannot be null"" ) ;', 'throw new IllegalArgumentException ( ""Field name cannot be null"" ) ;', '}', 'for ( Diff < ? > diff : diffResult . getDiffs ( ) ) {', 'append ( fieldName + "" . "" + diff . getFieldName ( ) ,', 'return this ;']","['/ /', ""assertFalse ( Character . isWhitespace ( ' \\ u00A0' ) ) ;""]","['assertTrue ( StringUtils . containsAny ( ""abcd"" , ""ab"" , null ) ) ;', 'assertTrue ( StringUtils . containsAny ( ""abcd"" , ""ab"" , ""cd"" ) ) ;', 'assertTrue ( StringUtils . containsAny ( ""abc"" , ""d"" , ""abc"" ) ) ;']","['public static final boolean IS OS MAC OSX EL CAPITAN = getOSMatches ( ""Mac OS X"" , ""10 . 11"" ) ;']","['continue ;', 'this . preserveEscapes = preserveEscapes ;', 'private boolean preserveEscapes = false ;', 'public void setPreserveEscapes ( final boolean preserveEscapes ) {', '}', 'public boolean isPreserveEscapes ( ) {', 'return preserveEscapes ;', 'pos + + ;', 'if ( preserveEscapes ) {', '@ Test']","[""case 'L' :"", ""case 'L' :"", 'return true ;', 'return true ;', 'boolean negate = false ;', 'boolean negate = false ;', ""if ( chars [ i ] = = 'e' | | chars [ i ] = = 'E' ) {"", ""if ( chars [ i ] = = 'e' | | chars [ i ] = = 'E' ) {"", 'public static byte toByte ( final String str , final byte defaultValue ) {', 'public static byte toByte ( final String str , final byte defaultValue ) {']","['}', 'return x < y ? - 1 : 1 ;', '} else {', 'return 1 ;', 'return - 1 ;', 'if ( x < y ) {']","['return x - y ;', 'return x - y ;']","['return literal ( ) ;', 'return literal ( ) ;', 'else {', '}']","['private AlwaysTruePredicate ( ) {', 'private AlwaysTruePredicate ( ) {', 'return true ;', 'return true ;', 'if ( thread ! = null & & thread . getThreadGroup ( ) ! = null & & thread . getThreadGroup ( ) . getName ( ) . equals ( threadGroupName ) ) {', 'if ( thread ! = null & & thread . getThreadGroup ( ) ! = null & & thread . getThreadGroup ( ) . getName ( ) . equals ( threadGroupName ) ) {', 'public boolean test ( final Thread thread ) {', 'public boolean test ( final Thread thread ) {', 'throw new IllegalArgumentException ( ""The thread group must not be null"" ) ;', 'throw new IllegalArgumentException ( ""The thread group must not be null"" ) ;']","['if ( isFormatLetter ( c ) ) {', 'if ( isFormatLetter ( c ) ) {', 'while ( + + currentIdx < pattern . length ( ) ) {', 'if ( pattern . charAt ( currentIdx ) ! = c ) {', 'this . pattern = pattern ;', 'this . pattern = pattern ;', 'if ( currentIdx > = pattern . length ( ) ) {', 'if ( currentIdx > = pattern . length ( ) ) {', 'this . definingCalendar = definingCalendar ;', 'while ( + + currentIdx < pattern . length ( ) ) {']","['while ( currentIdx < pattern . length ( ) ) {', ""if ( + + currentIdx = = pattern . length ( ) | | pattern . charAt ( currentIdx ) ! = ' \\ '' ) {"", 'char c = pattern . charAt ( currentIdx ) ;', 'while ( currentIdx < pattern . length ( ) ) {', '}', 'char c = pattern . charAt ( currentIdx ) ;', ""else if ( c = = ' \\ '' ) {"", ""} else if ( c = = ' \\ '' ) {"", 'if ( !activeQuote & & isFormatLetter ( c ) ) {', 'if ( activeQuote ) {']","['if ( inCache! = null ) {', '} else if ( value . regionMatches ( true , 0 , ""GMT"" , 0 , 3 ) ) {', 'if ( strategy = = null ) {', ""if ( value . charAt ( 0 ) = = ' + ' | | value . charAt ( 0 ) = = ' - ' ) {"", ""return c > = 'A' & & c < = 'Z' | | c > = 'a' & & c < = 'z' ;"", 'final Strategy inCache = cache . putIfAbsent ( locale , strategy ) ;', '}', 'synchronized ( caches ) {', 'final int trial = century + twoDigitYear ;', 'if ( v ! = 0 ) {']","['private AlwaysTruePredicate ( ) {', 'private AlwaysTruePredicate ( ) {', 'return true ;', 'return true ;', 'if ( thread ! = null & & thread . getThreadGroup ( ) ! = null & & thread . getThreadGroup ( ) . getName ( ) . equals ( threadGroupName ) ) {', 'if ( thread ! = null & & thread . getThreadGroup ( ) ! = null & & thread . getThreadGroup ( ) . getName ( ) . equals ( threadGroupName ) ) {', 'public boolean test ( final Thread thread ) {', 'public boolean test ( final Thread thread ) {', 'throw new IllegalArgumentException ( ""The thread group must not be null"" ) ;', 'throw new IllegalArgumentException ( ""The thread group must not be null"" ) ;']","['private AlwaysTruePredicate ( ) {', 'private AlwaysTruePredicate ( ) {', 'return true ;', 'return true ;', 'if ( thread ! = null & & thread . getThreadGroup ( ) ! = null & & thread . getThreadGroup ( ) . getName ( ) . equals ( threadGroupName ) ) {', 'if ( thread ! = null & & thread . getThreadGroup ( ) ! = null & & thread . getThreadGroup ( ) . getName ( ) . equals ( threadGroupName ) ) {', 'public boolean test ( final Thread thread ) {', 'public boolean test ( final Thread thread ) {', 'throw new IllegalArgumentException ( ""The thread group must not be null"" ) ;', 'throw new IllegalArgumentException ( ""The thread group must not be null"" ) ;']","['public static final boolean IS OS ZOS = getOSMatchesName ( ""z / OS"" ) ;', '} else if ( osName . contains ( ""z / OS"" ) ) {', 'if ( osName = = null ) {', '@ Test', 'public void testIS zOS ( ) {', '}', 'assertFalse ( SystemUtils . IS OS ZOS ) ;', 'final String osName = System . getProperty ( ""os . name"" ) ;', 'assertTrue ( SystemUtils . IS OS ZOS ) ;', 'assertFalse ( SystemUtils . IS OS WINDOWS ) ;']","['return size / ( K3 / K1 ) ;', 'return Long . MAX VALUE ;', 'public abstract long toBits ( final long size ) ;', '@ Override', 'public long toBits ( long size ) {', 'return u . toGigabytes ( s ) ;', 'public abstract long toMegabytes ( final long size ) ;', 'return name ;', 'public abstract long toGigabytes ( final long size ) ;', 'public long convert ( final long s , final DigitalBase10SizeUnit u ) {']","['Assert . assertEquals ( 2 , GIGABYTES . convert ( 2000000 , KILOBYTES ) ) ;', 'public void testToMegabytes ( ) throws Exception {', '/ /', 'Assert . assertEquals ( 2000000 , MEGABYTES . convert ( 2 , TERABYTES ) ) ;', 'Assert . assertEquals ( 2 , TERABYTES . convert ( 2000000000000L , BYTES ) ) ;', '@ Test', 'Assert . assertEquals ( 2 , TERABYTES . convert ( 2 , TERABYTES ) ) ;', 'Assert . assertEquals ( 2 , GIGABYTES . toTerabytes ( 2000 ) ) ;', 'Assert . assertEquals ( 2000 , GIGABYTES . convert ( 2 , TERABYTES ) ) ;', 'Assert . assertEquals ( 2 , TERABYTES . convert ( 2000 , GIGABYTES ) ) ;']","['return new StringBuilder ( annotationType = = null ? """" : annotationType . getName ( ) )', 'return new StringBuilder ( annotationType = = null ? StringUtils . EMPTY : annotationType . getName ( ) )', 'COMMON . put ( """" , EMPTY ) ;', 'COMMON . put ( StringUtils . EMPTY , EMPTY ) ;', 'list . add ( new Locale ( locale . getLanguage ( ) , """" ) ) ;', 'list . add ( new Locale ( locale . getLanguage ( ) , StringUtils . EMPTY ) ) ;', 'return new Locale ( """" , str . substring ( 1 , 3 ) , str . substring ( 4 ) ) ;', 'return new Locale ( StringUtils . EMPTY , str . substring ( 1 , 3 ) , str . substring ( 4 ) ) ;', 'return new Locale ( """" , str . substring ( 1 , 3 ) ) ;', 'return new Locale ( StringUtils . EMPTY , str . substring ( 1 , 3 ) ) ;']","['+ type1 . getName ( ) , ase ) ;', 'if ( Float . compare ( previous , current ) > 0 ) {', 'if ( array = = null | | array . length < 2 ) {', 'if ( array ! = null ) {', 'while ( ( set = indices . nextSetBit ( srcIndex ) ) ! = - 1 ) {', 'int destIndex = 0 ;', 'if ( Double . compare ( previous , current ) > 0 ) {', 'if ( BooleanUtils . compare ( previous , current ) > 0 ) {', 'throw new IllegalArgumentException ( ""Cannot store "" + type2 . getName ( ) + "" in an array of ""', 'if ( type = = null ) {']","['assertEquals ( - 1 , StringUtils . indexOfIgnoreCase ( ""abc"" , """" , 9 ) ) ;']","['final Comparator < String > lengthComp = new Comparator < String > ( ) {', 'assertTrue ( ""should contain i"" , rbstr . contains ( ""i"" ) ) ;', 'rbstr = Range . between ( ""house"" , ""i"" , lengthComp ) ;', 'assertFalse ( ""should not contain houses"" , rbstr . contains ( ""houses"" ) ) ;', '} ;', 'assertFalse ( ""should not contain null"" , rbstr . contains ( null ) ) ;', 'return str1 . length ( ) - str2 . length ( ) ;', '}', 'Range < String > rbstr = Range . between ( ""house"" , ""i"" ) ;', 'assertFalse ( ""should not contain \'\'"" , rbstr . contains ( """" ) ) ;']","['assertFalse ( ""should not contain null"" , rbstr . contains ( null ) ) ;', 'assertFalse ( ""should not contain \'\'"" , rbstr . contains ( """" ) ) ;', 'assertFalse ( ""should not contain \'\'"" , rbstr . contains ( """" ) ) ;', 'rb = Range . between ( - 10 , 20 , c ) ;', 'assertTrue ( ""should contain - 11"" , rb . contains ( - 11 ) ) ;', 'assertFalse ( ""should not contain null"" , rb . contains ( null ) ) ;', 'assertFalse ( ""should not contain ice"" , rbstr . contains ( ""ice"" ) ) ;', 'assertTrue ( ""should contain 10"" , rb . contains ( 10 ) ) ;', 'final Comparator < Integer > c = new Comparator < Integer > ( ) {', 'assertFalse ( ""should not contain 21"" , rb . contains ( 21 ) ) ;']","['}', 'assertTrue ( ""should contain 11"" , ri . contains ( 11 ) ) ;', 'assertTrue ( ""should contain 10"" , ri . contains ( 10 ) ) ;', '}', 'assertFalse ( ""should not contain 11"" , ri . contains ( 11 ) ) ;', '@ Override', '@ Override', '} catch ( final NullPointerException npe ) {', 'longRange = Range . between ( ( long ) 10 , ( long ) 20 ) ;', 'byteRange3 = Range . between ( ( byte ) 0 , ( byte ) 10 ) ;']","['public void testIsDameDay DateNullNull ( ) throws Exception {', 'DateUtils . isSameInstant ( new Date ( ) , ( Date ) null ) ;', 'public void testIsSameInstant DateNotNullNull ( ) throws Exception {', '@ Test ( expected = IllegalArgumentException . class )', 'DateUtils . isSameDay ( ( Calendar ) null , Calendar . getInstance ( ) ) ;', '}', 'public void testIsSameDay DateNullNull ( ) throws Exception {', 'public void testIsSameDay DateNotNullNull ( ) throws Exception {', 'DateUtils . isSameDay ( ( Date ) null , new Date ( ) ) ;', 'DateUtils . isSameInstant ( ( Date ) null , new Date ( ) ) ;']","['import java . util . regex . Pattern ;', 'import java . util . regex . Pattern ;']","['return parseDateWithLeniency ( str , null , parsePatterns , false ) ;', 'return parseDateWithLeniency ( str , locale , parsePatterns , false ) ;', 'import junit . framework . AssertionFailedError ;', '@ Test', 'import org . apache . commons . lang3 . test . SystemDefaultsSwitch ;', 'import junit . framework . AssertionFailedError ;', 'DateUtils . parseDateStrictly ( ""09 abril 2008 23 : 55 : 38 GMT"" , new Locale ( ""es"" ) , new String [ ] { ""dd MMM yyyy HH : mm : ss zzz"" } ) ;', 'import org . apache . commons . lang3 . test . SystemDefaultsSwitch ;', '}', 'public void testLANG799 ( ) throws ParseException {']","['public static void greaterOrEqual ( final double value , final double min , final String message , final Object . . . values ) {', 'public static < T > void greaterObj ( final Comparable < T > value , final T min ) {', '""The value is invalid : % f"" ;', 'if ( value = = reference ) {', 'public static void smallerOrEqual ( final long value , final long max , final String message , final Object . . . values ) {', 'throw new IllegalArgumentException ( String . format ( message , values ) ) ;', 'greater ( value , min , DEFAULT GREATER EX MESSAGE , value , min ) ;', 'public static void smaller ( final long value , final long max ) {', 'if ( ! ( value > = min ) ) {', 'public static < T > void differentObj ( final Comparable < T > value , final T reference ) {']","['final Float f = NumberUtils . createFloat ( numeric ) ;', 'final Float f = NumberUtils . createFloat ( str ) ;', 'final Double d = NumberUtils . createDouble ( numeric ) ;', 'final Double d = NumberUtils . createDouble ( str ) ;', 'public void testCreateNumberFailure 6 ( ) {', '}', 'NumberUtils . createNumber ( ""1234 . 5FF"" ) ;', 'public void testCreateNumberFailure 7 ( ) {', 'NumberUtils . createNumber ( ""1234 . 5ff"" ) ;', 'NumberUtils . createNumber ( ""1234 . 5dd"" ) ;']","['try {', 'assertEquals ( StringUtils . EMPTY , StringUtils . join ( BYTE PRIM LIST , SEPARATOR CHAR , 1 , 0 ) ) ;', 'assertEquals ( StringUtils . EMPTY , StringUtils . join ( BYTE PRIM LIST , SEPARATOR CHAR , 0 , 0 ) ) ;', '}', 'assertEquals ( StringUtils . EMPTY , StringUtils . join ( LONG PRIM LIST , SEPARATOR CHAR , 0 , 0 ) ) ;', 'assertEquals ( StringUtils . EMPTY , StringUtils . join ( DOUBLE PRIM LIST , SEPARATOR CHAR , 1 , 0 ) ) ;', 'assertEquals ( StringUtils . EMPTY , StringUtils . join ( DOUBLE PRIM LIST , SEPARATOR CHAR , 0 , 0 ) ) ;', 'assertEquals ( StringUtils . EMPTY , StringUtils . join ( SHORT PRIM LIST , SEPARATOR CHAR , 1 , 0 ) ) ;', 'assertNull ( StringUtils . join ( ( float [ ] ) null , SEPARATOR CHAR , 0 , 1 ) ) ;', 'assertNull ( StringUtils . join ( ( double [ ] ) null , SEPARATOR CHAR , 0 , 1 ) ) ;']","['if ( str . length ( ) > maxWidth ) {', 'public static String truncate ( final String str , int offset , int maxWidth ) {', 'return str . substring ( offset , ix ) ;', 'throw new IllegalArgumentException ( ""maxWith cannot be negative"" ) ;', 'return null ;', '}', 'throw new IllegalArgumentException ( ""offset cannot be negative"" ) ;', 'public static String truncate ( final String str , int maxWidth ) {', 'if ( offset < 0 ) {', 'if ( str = = null ) {']","['} else if ( lhs . getClass ( ) ! = rhs . getClass ( ) ) {', 'private void appendArray ( final Object lhs , final Object rhs ) {', 'return this ;', '}', '} else {', 'if ( lhs . getClass ( ) ! = rhs . getClass ( ) ) {', 'return this ;', 'appendArray ( lhs , rhs ) ;']","['package org . apache . commons . lang3 ;', 'final int end = start + length ;', 'public static boolean isWhitespace ( final CharSequence charSequence ) {', 'public class XMLCharacter {', 'public static boolean isWhitespace ( final char ch ) {', 'final int length = charSequence . length ( ) ;', '}', 'return ch = = 0x20 | | ch = = 0x09 | | ch = = 0xD | | ch = = 0xA ;', 'for ( int s = start ; s < end ; s + + ) {', 'if ( !isWhitespace ( charSequence . charAt ( i ) ) ) {']","['return getCause ( throwable , CAUSE METHOD NAMES ) ;', 'return cause ;', 'return cause ;', 'if ( cause ! = null ) {', 'if ( cause ! = null ) {', '}', 'final Throwable cause = getCauseUsingMethodName ( throwable , methodName ) ;', 'final Throwable legacyCause = getCauseUsingMethodName ( throwable , methodName ) ;', 'return getCause ( throwable , null ) ;', 'final Throwable cause = throwable . getCause ( ) ;']","['append ( ( char [ ] ) object ) ;', 'append ( ( char [ ] ) object ) ;', 'append ( ( short [ ] ) object ) ;', 'append ( ( short [ ] ) object ) ;', '} else if ( object instanceof double [ ] ) {', 'if ( object . getClass ( ) . isArray ( ) ) {', '}', '} else if ( object instanceof double [ ] ) {', '} else if ( object instanceof byte [ ] ) {', '}']","['if ( getRegistry ( ) = = null ) {', 'if ( registry . isEmpty ( ) ) {', 'REGISTRY . remove ( ) ;', 'REGISTRY . set ( registry ) ;', 'synchronized ( EqualsBuilder . class ) {', 'registry = new HashSet < Pair < IDKey , IDKey > > ( ) ;', 'static void register ( final Object lhs , final Object rhs ) {', 'REGISTRY . remove ( ) ;', '}', 'private static void register ( final Object lhs , final Object rhs ) {']","['int found = 0 ;', 'final short key = array [ i ] ;', 'for ( final Map . Entry < T , MutableInt > e : occurrences . entrySet ( ) ) {', 'if ( count ! = null ) {', 'found = indexOf ( array , v . charValue ( ) , found ) ;', 'for ( int i = 0 ; i < array . length ; i + + ) {', 'for ( final Map . Entry < Double , MutableInt > e : occurrences . entrySet ( ) ) {', 'final float key = array [ i ] ;', 'found = indexOf ( array , v . shortValue ( ) , found ) ;', 'final MutableInt count = occurrences . get ( key ) ;']","['end = text . indexOf ( searchString , start ) ;', 'String searchText = text ;', '}', 'public static String replaceOnceIgnoreCase ( String text , String searchString , String replacement ) {', 'int increase = replacement . length ( ) - replLength ;', 'if ( isEmpty ( str ) | | isEmpty ( remove ) ) {', 'increase * = max < 0 ? 16 : max > 64 ? 64 : max ;', '}', 'break ;', 'return replaceIgnoreCase ( text , searchString , replacement , 1 ) ;']","['public static final boolean IS OS WINDOWS 10 = getOSMatchesName ( OS NAME WINDOWS PREFIX + "" 10"" ) ;']","['try {', 'return 99f ;', 'return JAVA 1 9 ;', '} else if ( ""9"" . equals ( nom ) ) {', 'if ( toParse . length > = 2 ) {', 'if ( value . contains ( "" . "" ) ) {', 'final float v = toFloatVersion ( System . getProperty ( ""java . version"" , ""2 . 0"" ) ) ;', 'return JAVA 9 ;', 'return - 1 ;', 'final float v = toFloatVersion ( System . getProperty ( ""java . specification . version"" , ""99 . 0"" ) ) ;']","[""char lastChar = ' ' ;"", 'buffer . append ( lastChar ) ;', 'continue ;', 'continue ;', 'if ( ch = = lastChar & & i ! = 0 & & chars . contains ( ch ) ) {', 'if ( ch = = lastChar ) {', 'for ( int i = 0 ; i < sz ; i + + ) {', 'if ( chars . contains ( ch ) ) {', 'char lastChar = chrs [ 0 ] ;', 'inChars = ch ;']","['if ( first . charAt ( i ) ! = second . charAt ( i ) ) {', 'if ( first . charAt ( mi ) = = second . charAt ( mi ) ) {', 'if ( m1 . length ( ) ! = m2 . length ( ) ) {', 'char c1 = min . charAt ( mi ) ;', '( m1 . length ( ) - transpositions ) / ( ( double ) m1 . length ( ) ) ) / 3 . 0 ;', 'int [ ] matchIndexes = new int [ min . length ( ) ] ;', 'shorter = second . toString ( ) . toLowerCase ( ) ;', 'transpositions + + ;', 'transpositions + + ;', 'for ( int xi = Math . max ( mi - range , 0 ) , xn = Math . min ( mi + range + 1 , max . length ( ) ) ; xi < xn ; xi + + ) {']","['public static boolean startsWithAny ( final CharSequence string , final CharSequence . . . searchStrings ) {', 'if ( startsWith ( sequence , searchString ) ) {', 'public static boolean endsWithAny ( final CharSequence string , final CharSequence . . . searchStrings ) {', 'if ( isEmpty ( sequence ) | | ArrayUtils . isEmpty ( searchStrings ) ) {', 'if ( endsWith ( string , searchString ) ) {', 'if ( endsWith ( sequence , searchString ) ) {', 'if ( isEmpty ( string ) | | ArrayUtils . isEmpty ( searchStrings ) ) {', 'public static boolean startsWithAny ( final CharSequence sequence , final CharSequence . . . searchStrings ) {', 'if ( startsWith ( string , searchString ) ) {', 'public static boolean endsWithAny ( final CharSequence sequence , final CharSequence . . . searchStrings ) {']","['return new String ( newChars , 0 , count - ( whitespacesCount > 0 ? 1 : 0 ) ) ;', 'return new String ( newChars , 0 , count - ( whitespacesCount > 0 ? 1 : 0 ) ) . trim ( ) ;', 'assertEquals ( ""b"" , StringUtils . normalizeSpace ( "" \\ u0000b"" ) ) ;', 'assertEquals ( ""b"" , StringUtils . normalizeSpace ( ""b \\ u0000"" ) ) ;']","['return timeUnit . convert ( getNanoTime ( ) , TimeUnit . NANOSECONDS ) ;', '}', 'public long getTime ( final TimeUnit timeUnit ) {', 'import java . util . concurrent . TimeUnit ;', 'import org . junit . Assert ;', 'try {', 'import static org . junit . Assert . assertTrue ;', '@ Test', '}', '+ TimeUnit . MINUTES . toNanos ( 59 )']","['assertEquals ( args , varArgs ) ;', 'assertArrayEquals ( new String [ ] { ""2"" , ""3"" } , testBean . varArgs ) ;', 'Assert . assertArrayEquals ( new String [ ] { ""2"" , ""3"" } , testBean . varArgs ) ;', 'assertArrayEquals ( args , varArgs ) ;', 'import org . junit . Assert ;', 'import static org . junit . Assert . assertArrayEquals ;']","['MethodUtils . invokeMethod ( testBean , ""varOverloadEcho"" , new String [ ] { ""x"" , ""y"" } ) ) ;', 'MethodUtils . invokeMethod ( testBean , ""varOverloadEcho"" , ""x"" , ""y"" ) ) ;', 'TestBean . verify ( new ImmutablePair ( ""Number . . . "" , new Number [ ] { 17 , 23 , 42 } ) ,', 'TestBean . verify ( new ImmutablePair < String , Object [ ] > ( ""Number . . . "" , new Number [ ] { 17 , 23 , 42 } ) ,', 'MethodUtils . invokeStaticMethod ( TestBean . class , ""varOverloadEchoStatic"" , new Number [ ] { 17 , 23 , 42 } ) ) ;', '@ SuppressWarnings ( ""unchecked"" )', 'TestBean . verify ( new ImmutablePair ( ""String . . . "" , new String [ ] { ""x"" , ""y"" } ) ,', 'TestBean . verify ( new ImmutablePair < String , Object [ ] > ( ""String . . . "" , new String [ ] { ""x"" , ""y"" } ) ,', 'MethodUtils . invokeStaticMethod ( TestBean . class , ""varOverloadEchoStatic"" , new String [ ] { ""x"" , ""y"" } ) ) ;', 'MethodUtils . invokeStaticMethod ( TestBean . class , ""varOverloadEchoStatic"" , ""x"" , ""y"" ) ) ;']","['m . put ( ""void"" , ""V"" ) ;', 'namePrimitiveMap . put ( ""char"" , Character . TYPE ) ;', 'clazz = Class . forName ( clsName , initialize , classLoader ) . getComponentType ( ) ;', 'namePrimitiveMap . put ( ""void"" , Void . TYPE ) ;', 'if ( abbreviationMap . containsKey ( className ) ) {', 'if ( namePrimitiveMap . containsKey ( className ) ) {', 'final String clsName = "" [ "" + abbreviationMap . get ( className ) ;', 'namePrimitiveMap . put ( ""short"" , Short . TYPE ) ;', 'namePrimitiveMap . put ( ""double"" , Double . TYPE ) ;', 'namePrimitiveMap . put ( ""float"" , Float . TYPE ) ;']","['assertFalse ( StringUtils . endsWithAny ( ""abcXYZ"" , null ) ) ;', 'assertFalse ( StringUtils . endsWithAny ( ""abcXYZ"" , ( CharSequence [ ] ) null ) ) ;', 'assertFalse ( StringUtils . endsWithAny ( ""abcXYZ"" , ( CharSequence ) null ) ) ;']",['private static final long serialVersionUID = 1L ;'],"['continue ;', 'if ( toTypeArg = = null & & fromTypeArg instanceof Class ) {', '}', 'import java . util . ArrayList ;', 'Type failingToType = TypeUtils . wildcardType ( ) . withLowerBounds ( ClassWithSuperClassWithGenericType . class ) . build ( ) ;', 'private static final long serialVersionUID = 1L ;', '@ Test', 'return null ;', 'public static class ClassWithSuperClassWithGenericType extends ArrayList < Object > {', 'Assert . assertTrue ( TypeUtils . isAssignable ( fromType , failingToType ) ) ;']","['>', '{ "" \\ u2284"" , "" & nsub ; "" } , >']","['public byte addAndGet ( final byte operand ) {', 'byte last = value ;', 'return last ;', 'public byte getAndDecrement ( ) {', 'public byte incrementAndGet ( ) {', '}', 'public byte getAndIncrement ( ) {', 'public byte addAndGet ( final Number operand ) {', 'return value ;', 'value + + ;']","['if ( count . intValue ( ) = = 0 ) {', 'if ( count . decrementAndGet ( ) = = 0 ) {', 'count . decrement ( ) ;']","[""if ( str . charAt ( i ) = = ' . ' ) {"", 'if ( isDecimalPoint ) {']","['+ methodName + "" ( ) on object : ""', 'if ( method = = null ) {', 'if ( method = = null ) {', 'if ( method ! = null ) {', 'args = toVarArgs ( method , args ) ;', 'final String messagePrefix ;', 'public static Object invokeMethod ( final Object object , final String methodName ,', 'try {', 'methodName , parameterTypes ) ;', 'isOriginallyAccessible = method . isAccessible ( ) ;']","['} else {', 'return str . substring ( offset ) ;', 'return str . substring ( offset ) ;']","['this . testEmpty ( StrTokenizer . getCSVInstance ( ) ) ;', 'this . testEmpty ( StrTokenizer . getTSVInstance ( ) ) ;', 'this . testEmpty ( StrTokenizer . getCSVInstance ( """" ) ) ;', 'this . testEmpty ( StrTokenizer . getTSVInstance ( """" ) ) ;']","['} else if ( object instanceof Double ) {', 'iTotal = iTotal * iConstant + object . hashCode ( ) ;', 'try {', 'append ( ( ( Byte ) object ) . byteValue ( ) ) ;', '} else if ( object instanceof Character ) {', '}', '} finally {', 'return this ;', '} else if ( object instanceof Boolean ) {', '} else if ( object instanceof Float ) {']","['numDecimals = dec . length ( ) ;', 'if ( !d . isInfinite ( ) & & ! ( d . doubleValue ( ) = = 0 . 0D & & !allZeros ) ) {', 'if ( ! ( f . isInfinite ( ) | | ( f . floatValue ( ) = = 0 . 0F & & !allZeros ) ) ) {', 'if ( !f . isInfinite ( )', 'try {', 'if ( b . compareTo ( BigDecimal . valueOf ( d ) ) = = 0 ) {', 'if ( numDecimals < = 7 ) {', '& & f . toString ( ) . equals ( d . toString ( ) ) ) {', 'if ( ! ( d . isInfinite ( ) | | ( d . doubleValue ( ) = = 0 . 0D & & !allZeros ) ) ) {', 'return b ;']","['assertEquals ( 4 , StringUtils . ordinalIndexOf ( ""abababab"" , ""abab"" , 3 ) ) ;', 'assertEquals ( 4 , StringUtils . ordinalIndexOf ( ""abababa"" , ""aba"" , 3 ) ) ;', 'public void testLANG1241 2 ( ) {', 'assertEquals ( 6 , StringUtils . ordinalIndexOf ( ""abaabaab"" , ""ab"" , 3 ) ) ;', '@ Test', 'assertEquals ( 0 , StringUtils . ordinalIndexOf ( ""abababa"" , ""aba"" , 1 ) ) ;', 'assertEquals ( 0 , StringUtils . ordinalIndexOf ( ""abaabaab"" , ""ab"" , 1 ) ) ;', '}', 'public void testLANG1241 1 ( ) {', 'assertEquals ( 3 , StringUtils . ordinalIndexOf ( ""abaabaab"" , ""ab"" , 2 ) ) ;']","['Double . valueOf ( ""193343 . 82"" ) , NumberUtils . createNumber ( ""193343 . 82"" ) ) ;', 'assertEquals ( ""createNumber ( String ) LANG - 1215 failed"" ,', 'assertEquals ( ""createNumber ( String ) LANG - 1187 failed"" ,', 'Double . valueOf ( ""6264583 . 33"" ) , NumberUtils . createNumber ( ""6264583 . 33"" ) ) ;']","['protected < B extends Appendable > B applyRules ( final Calendar calendar , final B buf ) {', 'protected StringBuffer applyRules ( final Calendar calendar , final StringBuffer buf ) {', 'return ( StringBuffer ) applyRules ( calendar , ( Appendable ) buf ) ;', '@ Deprecated', '}', 'private < B extends Appendable > B applyRules ( final Calendar calendar , final B buf ) {']","['return format ( new Date ( millis ) , buf ) ;', 'final Calendar c = newCalendar ( ) ;', 'c . setTimeInMillis ( millis ) ;', 'return applyRules ( c , buf ) ;']","['return applyRules ( c , buf ) ;', 'return ( StringBuffer ) applyRules ( c , ( Appendable ) buf ) ;']","[""buffer . append ( '0' ) ;"", 'while ( - - digit > = 0 ) {', 'while ( value! = 0 ) {', 'value % = 1000 ;', 'char [ ] work = new char [ MAX DIGITS ] ;', 'if ( value < 10000 ) {', '}', 'case 1 :', ""work [ digit + + ] = ( char ) ( value % 10 + '0' ) ;"", '}']","['} catch ( final ClassCastException ex ) {', '@ SuppressWarnings ( ""unchecked"" )', 'throw new SerializationException ( ex ) ;', '@ SuppressWarnings ( ""unchecked"" )']","['primitiveTypes . put ( ""boolean"" , boolean . class ) ;', 'primitiveTypes . put ( ""boolean"" , boolean . class ) ;', 'primitiveTypes . put ( ""int"" , int . class ) ;', 'static {', 'primitiveTypes . put ( ""byte"" , byte . class ) ;', 'primitiveTypes . put ( ""int"" , int . class ) ;', 'primitiveTypes . put ( ""double"" , double . class ) ;', 'primitiveTypes . put ( ""byte"" , byte . class ) ;', 'primitiveTypes . put ( ""void"" , void . class ) ;', '}']","['}', 'public static boolean nextBoolean ( ) {', 'return RANDOM . nextBoolean ( ) ;']","['assertFalse ( StringUtils . containsNone ( str3 , chars2 ) ) ;', 'assertFalse ( StringUtils . containsIgnoreCase ( null , ""abc"" ) ) ;', '{ "" \\ u03A3"" , "" \\ u03C2"" } ,', 'assertTrue ( StringUtils . containsOnly ( str2 , chars1 ) ) ;', 'assertTrue ( StringUtils . containsNone ( str2 , chars2 ) ) ;', 'assertTrue ( StringUtils . contains ( ""abc"" , \'b\' ) ) ;', 'assertTrue ( StringUtils . contains ( CharU20000 , CharU20000 ) ) ;', 'assertEquals ( 0 , CharU20000 . indexOf ( CharU20001 . charAt ( 0 ) ) ) ;', 'assertTrue ( StringUtils . containsAny ( CharU20000 + CharU20001 + ""a"" , ""a"" . toCharArray ( ) ) ) ;', 'assertFalse ( StringUtils . containsOnly ( str1 , """" ) ) ;']","['public static String [ ] splitByWholeSeparator ( final String str , final String separator , final int max ) {', 'public static String [ ] splitByWholeSeparator ( final String str , final String separator , final int max ) {']","['StringBuilder builder = new StringBuilder ( str . length ( ) + wrapWith . length ( ) + wrapWith . length ( ) ) ;', 'public static String wrapIfMissing ( final String str , final String wrapWith ) {', 'StringBuilder builder = new StringBuilder ( str . length ( ) + 2 ) ;', 'public static String wrapIfMissing ( final String str , final char wrapWith ) {', 'if ( !str . endsWith ( wrapWith ) ) {', 'if ( !str . startsWith ( wrapWith ) ) {', 'if ( isEmpty ( str ) | | isEmpty ( wrapWith ) ) {', 'if ( str . charAt ( str . length ( ) - 1 ) ! = wrapWith ) {', 'return builder . toString ( ) ;', '}']","['String [ ] al = new String [ source . length ] ;', 'al [ i ] = source [ i ] . toString ( ) ;', '}', 'for ( int i = 0 ; i < source . length ; i + + ) {', 'if ( null = = source ) return null ;', 'public static String [ ] toStringArray ( final Object [ ] source ) {', 'return al ;', 'assertArrayEquals ( new String [ ] { ""1"" , ""2"" , ""3"" , ""array"" , ""test"" } , ArrayUtils . toStringArray ( array ) ) ;', 'assertNull ( ArrayUtils . toStringArray ( null ) ) ;', 'public void testToStringArray ( ) {']","['} else if ( array . getClass ( ) . getComponentType ( ) . isInstance ( objectToFind ) ) {', '} else {', 'return true ;', '@ Test', 'class LANG1261ParentObject {', 'public boolean equals ( Object o ) {', 'assertTrue ( ArrayUtils . contains ( array , new LANG1261ParentObject ( ) ) ) ;', '}', 'public void testContains LANG 1261 ( ) {', 'class LANG1261ChildObject extends LANG1261ParentObject {']","['append ( ( int [ ] ) lhs , ( int [ ] ) rhs ) ;', 'append ( ( int [ ] ) lhs , ( int [ ] ) rhs ) ;', '} else if ( lhs instanceof boolean [ ] ) {', '} else if ( lhs instanceof boolean [ ] ) {', 'append ( ( long [ ] ) lhs , ( long [ ] ) rhs ) ;', 'append ( ( long [ ] ) lhs , ( long [ ] ) rhs ) ;', '} else if ( lhs instanceof double [ ] ) {', '} else if ( lhs instanceof double [ ] ) {', '} else if ( lhs instanceof char [ ] ) {', '} else if ( lhs instanceof char [ ] ) {']","[""final int start = ( chars [ 0 ] = = ' - ' ) ? 1 : 0 ;"", 'boolean isJava6 = StringUtils . startsWith ( System . getProperty ( ""java . version"" ) , ""1 . 6"" ) ;', 'public static boolean isNumber ( final String str ) {', 'if ( isJava6 & & hasLeadingPlusSign & & !hasDecPoint ) {', 'return isCreatable ( str ) ;', ""final int start = ( chars [ 0 ] = = ' - ' | | chars [ 0 ] = = ' + ' ) ? 1 : 0 ;"", '@ Deprecated', 'public static boolean isCreatable ( final String str ) {', '}', 'public static boolean isNumber ( final String str ) {']","['boolean isJava6 = StringUtils . startsWith ( System . getProperty ( ""java . version"" ) , ""1 . 6"" ) ;', 'boolean isJava6 = StringUtils . startsWith (', 'System . getProperty ( ""java . version"" ) , ""1 . 6"" ) ;']","['return removeAll ( array , Arrays . copyOf ( indices , count ) ) ;', 'return removeAll ( array , Arrays . copyOf ( indices , count ) ) ;']","['public static void swap ( final char [ ] array , int offset1 , int offset2 , int len ) {', 'public static void swap ( final char [ ] array , int offset1 , int offset2 , int len ) {', 'public static void swap ( final byte [ ] array , int offset1 , int offset2 , int len ) {', 'public static void swap ( final byte [ ] array , int offset1 , int offset2 , int len ) {', 'public static void swap ( final boolean [ ] array , int offset1 , int offset2 , int len ) {', 'public static void swap ( final float [ ] array , int offset1 , int offset2 , int len ) {', 'public static void swap ( final float [ ] array , int offset1 , int offset2 , int len ) {', 'public static void swap ( final boolean [ ] array , int offset1 , int offset2 , int len ) {']","['public static void swap ( final Object [ ] array , int offset1 , int offset2 , int len ) {', 'public static void swap ( final Object [ ] array , int offset1 , int offset2 , int len ) {']","['if ( method ! = null ) {', 'if ( method ! = null ) {', 'isOriginallyAccessible = method . isAccessible ( ) ;', 'isOriginallyAccessible = method . isAccessible ( ) ;', 'List < Class < ? > > superclassList = ClassUtils . getAllSuperclasses ( cls ) ;', 'List < Class < ? > > superclassList = ClassUtils . getAllSuperclasses ( cls ) ;', 'return inexactMatch ;', 'return inexactMatch ;', '< distance ( parameterTypes , inexactMatch . getParameterTypes ( ) ) ) {', '< distance ( parameterTypes , inexactMatch . getParameterTypes ( ) ) ) {']","['compareIsNumberWithCreateNumber ( ""123 . 4E5"" , true ) ;', 'compareIsNumberWithCreateNumber ( ""1234E + 5"" , true ) ;', '@ Test', 'compareIsNumberWithCreateNumber ( ""1234 . 5"" , true ) ;', '}', 'compareIsNumberWithCreateNumber ( "" - . 12345"" , true ) ;', 'compareIsNumberWithCreateNumber ( "" - 0ABC123"" , false ) ;', 'compareIsNumberWithCreateNumber ( ""1234E5l"" , false ) ;', 'compareIsNumberWithCreateNumber ( ""0xGF"" , false ) ;', 'compareIsNumberWithCreateNumber ( "" - 0x0"" , true ) ;']","['boolean isJava6 = StringUtils . startsWith (', 'import org . apache . commons . lang3 . SystemUtils ;', 'System . getProperty ( ""java . version"" ) , ""1 . 6"" ) ;', 'if ( SystemUtils . IS JAVA 1 6 & & hasLeadingPlusSign & & !hasDecPoint ) {', 'if ( isJava6 & & hasLeadingPlusSign & & !hasDecPoint ) {', 'if ( StringUtils . startsWith ( System . getProperty ( ""java . version"" ) , ""1 . 6"" ) ) {', 'import org . apache . commons . lang3 . SystemUtils ;', 'if ( SystemUtils . IS JAVA 1 6 ) {']","['@ Test', '}', 'compareIsNumberWithCreateNumber ( ""08"" , false ) ;', 'compareIsNumberWithCreateNumber ( "" + 2 . 0"" , true ) ;', 'compareIsNumberWithCreateNumber ( ""0XABCD"" , true ) ;', 'public void testIsNumberLANG972 ( ) {', 'compareIsNumberWithCreateNumber ( ""0 . 0"" , true ) ;', 'public void testIsNumberLANG1252 ( ) {', '} else {', 'compareIsNumberWithCreateNumber ( "" + 2"" , false ) ;']","['d [ 0 ] = j ;', 'int upper left ;', 'int d [ ] ;', 'upper = p [ i ] ;', 'd = p ;', 'upper left = upper ;', 'p = d ;', 'int upper ;', 'd [ i ] = Math . min ( Math . min ( d [ i - 1 ] + 1 , p [ i ] + 1 ) , p [ i - 1 ] + cost ) ;', 'int p [ ] = new int [ n + 1 ] ;']","['public static < T > void smallerObj ( final Comparable < T > value , final T max , final String message , final Object . . . values ) {', 'greaterOrEqualObject ( value , min , DEFAULT GREATER OR EQUAL EX MESSAGE , value , min ) ;', 'public static < T > void differentObj ( final Comparable < T > value , final T reference ) {', 'public static < T > void smallerOrEqualObject ( final Comparable < T > value , final T max , final String message , final Object . . . values ) {', 'public static < T > void greaterObj ( final Comparable < T > value , final T min , final String message , final Object . . . values ) {', 'public static < T > void greaterOrEqualObject ( final Comparable < T > value , final T min ) {', 'smallerObj ( value , max , DEFAULT SMALLER EX MESSAGE , value , max ) ;', 'public static < T > void differentObject ( final T value , final T reference ) {', 'public static < T > void smallerObj ( final Comparable < T > value , final T max ) {', 'public static < T > void smallerObject ( final Comparable < T > value , final T max , final String message , final Object . . . values ) {']","['return JAVA AWT HEADLESS ! = null ? JAVA AWT HEADLESS . equals ( Boolean . TRUE . toString ( ) ) : false ;', 'return Boolean . TRUE . toString ( ) . equals ( JAVA AWT HEADLESS ) ;']","['? new TimeZoneStrategy ( definingCalendar , locale )', '? new TimeZoneStrategy ( locale )', 'TimeZoneStrategy ( Calendar cal , final Locale locale ) {', 'TimeZoneStrategy ( final Locale locale ) {']","['final boolean isValid = NumberUtils . isNumber ( val ) ;', 'final boolean isValid = NumberUtils . isCreatable ( val ) ;']","['}', 'FastDateFormat . getInstance ( ""yyyy - MM - dd\'T\'HH : mm : ss . SSSXXX"" ) ;', 'public void testLANG 1267 ( ) throws Exception {', '}', '@ Test']","['FastDateFormat . getInstance ( pattern ) ;', 'FastDateFormat . getInstance ( pattern ) ;', 'final String pattern = ""yyyy - MM - dd\'T\'"" ;', 'public void testLANG 954 ( ) {', '@ Test', 'final String pattern = ""yyyy - MM - dd\'T\'"" ;', '}', '@ Test', 'public void testLang954 ( ) {', '}']","['public static void greater ( final long value , final long min , final String message , final Object . . . values ) {', 'greaterOrEqualObject ( value , min , DEFAULT GREATER OR EQUAL EX MESSAGE , value , min ) ;', 'public static < T > void smallerOrEqualObject ( final Comparable < T > value , final T max , final String message , final Object . . . values ) {', 'if ( value > = max ) {', 'public static < T > void smallerObject ( final Comparable < T > value , final T max ) {', 'public static void greater ( final double value , final double min , final String message , final Object . . . values ) {', 'if ( value < min ) {', 'public static void greater ( final double value , final double min ) {', 'public static void greaterOrEqual ( final double value , final double min , final String message , final Object . . . values ) {', 'smallerObject ( value , max , DEFAULT SMALLER EX MESSAGE , value , max ) ;']","['if ( srcArgs . length < normalArgsLen )', 'if ( srcArgs . length < normalArgsLen ) {', '}']","['continue ;', 'continue ;', '} else if ( ClassUtils . isAssignable ( classArray [ offset ] , toClassArray [ offset ] , true )', '} else if ( ClassUtils . isAssignable ( classArray [ offset ] , toClassArray [ offset ] , true )', 'if ( classArray [ offset ] . equals ( toClassArray [ offset ] ) ) {', 'if ( classArray [ offset ] . equals ( toClassArray [ offset ] ) ) {', 'if ( !ClassUtils . isAssignable ( classArray , toClassArray , true ) ) {', 'if ( !ClassUtils . isAssignable ( classArray , toClassArray , true ) ) {', 'for ( int offset = 0 ; offset < classArray . length ; offset + + ) {', 'for ( int offset = 0 ; offset < classArray . length ; offset + + ) {']","['if ( ( notInChars = = null ) | | ( ch ! = notInChars ) ) {', 'if ( inChars ! = null & & ch = = inChars ) {', 'if ( ( inChars ! = null ) & & ( ch = = inChars ) ) {', 'if ( notInChars = = null | | ch ! = notInChars ) {', '( split [ 1 ] . length ( ) = = 0 | | ( split [ 1 ] . length ( ) = = 2 & & StringUtils . isAllUpperCase ( split [ 1 ] ) ) ) & &', '( split [ 1 ] . length ( ) = = 0 | | split [ 1 ] . length ( ) = = 2 & & StringUtils . isAllUpperCase ( split [ 1 ] ) ) & &', 'comparison = ( ( lhs < rhs ) ? - 1 : ( ( lhs > rhs ) ? 1 : 0 ) ) ;', '& & !f . getName ( ) . contains ( ""$"" )', '& & ( !f . getName ( ) . contains ( ""$"" ) )', '& & !Modifier . isStatic ( f . getModifiers ( ) ) ) {']","['continue ;', 'activeQuote = !activeQuote ;', ""if ( + + currentIdx = = pattern . length ( ) | | pattern . charAt ( currentIdx ) ! = ' \\ '' ) {"", 'continue ;', '}', ""} else if ( c = = ' \\ '' & & ( + + currentIdx = = pattern . length ( ) | | pattern . charAt ( currentIdx ) ! = ' \\ '' ) ) {"", 'activeQuote = !activeQuote ;', ""} else if ( c = = ' \\ '' ) {""]","['c . setTime ( date ) ;', '}', 'return c ;', 'public static Calendar toCalendar ( final Date date , final TimeZone tz ) {', 'final Calendar c = Calendar . getInstance ( tz ) ;']","['assertEquals ( ""Convert Date and TimeZone to a Calendar , but failed to get the TimeZone back"" , defaultZone , c . getTimeZone ( ) ) ;', 'public void testToCalendarWithTimeZone ( ) {', 'try {', '@ Test', 'assertEquals ( ""Convert Date and TimeZone to a Calendar , but failed to get the TimeZone back"" , zone , DateUtils . toCalendar ( date1 , zone ) . getTimeZone ( ) ) ;', 'Calendar c = DateUtils . toCalendar ( date2 , defaultZone ) ;', 'assertEquals ( ""Convert Date and TimeZone to a Calendar , but failed to get the Date back"" , date2 , c . getTime ( ) ) ;', 'public void testToCalendarWithDate ( ) {', 'fail ( ""Expected NullPointerException to be thrown"" ) ;', '}']","['}', 'if ( isNotBlank ( cs ) ) {', 'return true ;', 'if ( isNotEmpty ( cs ) ) {', 'public static boolean isAnyNotBlank ( final CharSequence . . . css ) {', '}', 'return false ;', 'if ( ArrayUtils . isEmpty ( css ) ) {', 'public static boolean isAnyNotEmpty ( final CharSequence . . . css ) {', 'for ( final CharSequence cs : css ) {']","['return true ;', 'return false ;', 'assertFalse ( StringUtils . isNoneBlank ( ( String [ ] ) null ) ) ;', 'assertFalse ( StringUtils . isAnyNotEmpty ( ( String [ ] ) null ) ) ;', 'assertTrue ( StringUtils . isAnyBlank ( ( String [ ] ) null ) ) ;', 'assertTrue ( StringUtils . isNoneBlank ( ( String [ ] ) null ) ) ;', 'assertTrue ( StringUtils . isAnyNotEmpty ( ( String [ ] ) null ) ) ;', 'assertTrue ( StringUtils . isNoneEmpty ( ( String [ ] ) null ) ) ;', 'assertTrue ( StringUtils . isAnyEmpty ( ( String [ ] ) null ) ) ;', 'assertFalse ( StringUtils . isAnyNotBlank ( ( String [ ] ) null ) ) ;']","['assertEquals ( ""Convert Date and TimeZone to a Calendar , but failed to get the TimeZone back"" , defaultZone , c . getTimeZone ( ) ) ;', 'assertEquals ( ""Convert Date and TimeZone to a Calendar , but failed to get the TimeZone back"" , defaultZone , c . getTimeZone ( ) ) ;', 'public void testToCalendarWithTimeZone ( ) {', 'public void testToCalendarWithDateNotNull ( ) {', 'try {', 'public void testToCalendarWithDateAndTimeZoneNull ( ) {', 'Calendar c = DateUtils . toCalendar ( date2 , defaultZone ) ;', 'public void testToCalendarWithDateNull ( ) {', 'assertEquals ( ""Convert Date and TimeZone to a Calendar , but failed to get the Date back"" , date2 , c . getTime ( ) ) ;', '@ Test']","['final String javaVersion = System . getProperty ( ""java . specification . name"" ) ;', 'final String javaVersion = SystemUtils . JAVA VERSION ;']","['assertEquals ( ""Convert Date and TimeZone to a Calendar , but failed to get the TimeZone back"" , defaultZone , c . getTimeZone ( ) ) ;', 'assertEquals ( ""Convert Date and TimeZone to a Calendar , but failed to get the TimeZone back"" , defaultZone , c . getTimeZone ( ) ) ;', 'public void testToCalendarWithDateNotNull ( ) {', 'Calendar c = DateUtils . toCalendar ( date2 , defaultZone ) ;', 'assertEquals ( ""Convert Date and TimeZone to a Calendar , but failed to get the TimeZone back"" , zone , DateUtils . toCalendar ( date1 , zone ) . getTimeZone ( ) ) ;', 'assertEquals ( ""Convert Date and TimeZone to a Calendar , but failed to get the Date back"" , date2 , c . getTime ( ) ) ;', 'try {', '@ Test ( expected = NullPointerException . class )', '@ Test', 'DateUtils . toCalendar ( null , null ) ;']","['if ( SystemUtils . isJavaVersionAtLeast ( JAVA 1 3 ) ) {', 'this . assertSupportedEncoding ( CharEncoding . UTF 16LE ) ;', 'this . assertSupportedEncoding ( CharEncoding . UTF 16LE ) ;', 'this . assertSupportedEncoding ( CharEncoding . UTF 16 ) ;', '/ /', 'this . assertSupportedEncoding ( CharEncoding . ISO 8859 1 ) ;', 'public void testWorksOnJava1 2 2 ( ) {', 'public void testMustBeSupportedJava1 3 1 and above ( ) {', '@ Test', 'this . assertSupportedEncoding ( CharEncoding . US ASCII ) ;']","['} else if ( javaVersion . startsWith ( ""1 . 1"" ) ) {', 'final boolean expectedValue = Boolean . valueOf ( expectedStringValue ) . booleanValue ( ) ;', 'assertFalse ( SystemUtils . isJavaVersionAtLeast ( JAVA 9 ) ) ;', 'assertEquals ( expectedValue , SystemUtils . isJavaAwtHeadless ( ) ) ;', '} else if ( javaVersion . startsWith ( ""1 . 3"" ) ) {', 'assertEquals ( expectedStringValue , SystemUtils . JAVA AWT HEADLESS ) ;', 'assertEquals ( expectedValue , SystemUtils . isJavaAwtHeadless ( ) ) ;', 'if ( expectedStringValue ! = null ) {', 'assertTrue ( SystemUtils . IS JAVA 1 2 ) ;', 'if ( SystemUtils . IS JAVA 1 6 ) {']","['assertFalse ( SystemUtils . isJavaVersionAtLeast ( JAVA 9 ) ) ;', '@ Test', '} else if ( SystemUtils . IS JAVA 1 4 ) {', 'assertTrue ( SystemUtils . isJavaVersionAtLeast ( JAVA 1 5 ) ) ;', '}', 'import static org . apache . commons . lang3 . JavaVersion . JAVA 1 8 ;', 'assertTrue ( SystemUtils . isJavaVersionAtLeast ( JAVA 1 8 ) ) ;', 'public void testIsJavaVersionAtLeat ( ) throws Exception {', 'import static org . apache . commons . lang3 . JavaVersion . JAVA 1 6 ;', 'assertTrue ( SystemUtils . isJavaVersionAtLeast ( JAVA 1 4 ) ) ;']","['{ "" \\ u00F1"" , "" & ntilde ; "" } ,', '{ "" \\ u00F1"" , "" & ntilde ; "" } ,', '{ "" \\ u00F2"" , "" & ograve ; "" } ,', '{ "" \\ u00F2"" , "" & ograve ; "" } ,', '{ "" \\ u00A9"" , "" & copy ; "" } ,', '{ "" \\ u00A9"" , "" & copy ; "" } ,', '{ "" \\ u00CF"" , "" & Iuml ; "" } ,', '{ "" \\ u00CF"" , "" & Iuml ; "" } ,', '{ "" \\ u00F0"" , "" & eth ; "" } ,', '{ "" \\ u00F0"" , "" & eth ; "" } ,']","['throw new IllegalStateException ( ""TimedSemaphore is shut down!"" ) ;', 'throw new IllegalStateException ( ""TimedSemaphore is shut down!"" ) ;', 'if ( task = = null ) {', 'if ( getLimit ( ) < = NO LIMIT | | acquireCount < getLimit ( ) ) {', 'if ( isShutdown ( ) ) {', 'return true ;', '}', 'canPass = acquirePermit ( ) ;', 'task = startTimer ( ) ;', 'if ( task = = null ) {']","['offset = str . length ( ) - ( maxWidth - 3 ) ;', 'return abbreviate ( str , defaultAbbrevMarker , 0 , maxWidth ) ;', 'throw new IllegalArgumentException ( ""Minimum abbreviation width is 4"" ) ;', 'if ( isEmpty ( str ) | | isEmpty ( abbrevMarker ) ) {', 'return abrevMarker + abbreviate ( str . substring ( offset ) , maxWidth - 3 ) ;', '}', 'return abrevMarker + str . substring ( str . length ( ) - ( maxWidth - 3 ) ) ;', 'final int abbrevMarkerLength = abbrevMarker . length ( ) ;', 'return null ;', 'final int minAbbrevWidth = abbrevMarkerLength + 1 ;']","['int cost ;', 'int cost ;', 'int m = t . length ( ) ;', 'int m = t . length ( ) ;', 'upper = p [ i ] ;', 'upper = p [ i ] ;', 'int n = s . length ( ) ;', 'int n = s . length ( ) ;', 'upper left = p [ 0 ] ;', 'upper left = p [ 0 ] ;']","['if ( m = = 0 ) {', 'final double DEFAULT SCALING FACTOR = 0 . 1 ;', 'double j = ( ( m / first . length ( ) + m / second . length ( ) + ( m - mtp [ 1 ] ) / m ) ) / 3 ;', '@ Deprecated', '}', 'double jw = j < 0 . 7D ? j : j + Math . min ( DEFAULT SCALING FACTOR , 1D / mtp [ 3 ] ) * mtp [ 2 ] * ( 1D - j ) ;', 'throw new IllegalArgumentException ( ""Strings must not be null"" ) ;', 'return Math . round ( jw * 100 . 0D ) / 100 . 0D ;', 'int [ ] mtp = matches ( first , second ) ;', 'public static double getJaroWinklerSimilarity ( final CharSequence first , final CharSequence second ) {']","['compareIsCreatableWithCreateNumber ( ""0 . 1"" , true ) ;']","['if ( method = = null ) {', '+ methodName + "" ( ) on object : ""', 'if ( method ! = null ) {', 'if ( method = = null ) {', 'try {', 'if ( method ! = null ) {', 'isOriginallyAccessible = method . isAccessible ( ) ;', 'if ( !method . isAccessible ( ) ) {', 'args = toVarArgs ( method , args ) ;', 'messagePrefix = ""No such accessible method : "" ;']","['final char [ ] buf = buffer ;', 'final char [ ] buf = buffer ;', 'sb . replaceAll ( StrMatcher . stringMatcher ( ""X"" ) , ""012345678901234567"" ) ;', 'sb = new StrBuilder ( ""Dear X , hello X . "" ) ;', 'assertEquals ( ""Dear 012345678901234567 , hello 012345678901234567 . "" , sb . toString ( ) ) ;']","['return String . valueOf ( newChars ) ;', 'newCodePoint = oldCodepoint ;', 'final char [ ] buffer = str . toCharArray ( ) ;', '} else if ( Character . isTitleCase ( oldCodepoint ) ) {', 'for ( int i = 0 ; i < buffer . length ; i + + ) {', '}', 'final char firstChar = str . charAt ( 0 ) ;', 'newCodePoints [ outOffset + + ] = codepoint ;', 'return new String ( buffer ) ;', 'int outOffset = 0 ;']","['if ( source = = null | | regex = = null | | replacement = = null ) {', 'if ( source = = null | | regex = = null | | replacement = = null ) {']","['private volatile T object ;', 'private volatile T object = ( T ) NoInit ;', 'if ( result = = null ) {', 'private static final Object NoInit = new Object ( ) ;', 'if ( result = = NoInit ) {']","['final HashMap < Float , MutableInt > occurrences = new HashMap < Float , MutableInt > ( values . length ) ;', 'final Map < Byte , MutableInt > occurrences = new HashMap < > ( values . length ) ;', 'final HashMap < Boolean , MutableInt > occurrences = new HashMap < Boolean , MutableInt > ( 2 ) ;', 'final HashMap < Double , MutableInt > occurrences = new HashMap < > ( values . length ) ;', 'final HashMap < Long , MutableInt > occurrences = new HashMap < Long , MutableInt > ( values . length ) ;', 'final HashMap < Float , MutableInt > occurrences = new HashMap < > ( values . length ) ;', 'final Map < Object , Object > map = new HashMap < Object , Object > ( ( int ) ( array . length * 1 . 5 ) ) ;', 'final HashMap < Integer , MutableInt > occurrences = new HashMap < > ( values . length ) ;', 'final HashMap < Double , MutableInt > occurrences = new HashMap < Double , MutableInt > ( values . length ) ;', 'final HashMap < Long , MutableInt > occurrences = new HashMap < > ( values . length ) ;']","['private int indent = 2 ;', 'private final int indent = 2 ;', 'private String FIELD NAME PREFIX = "" \\ """" ;', 'private final String FIELD NAME PREFIX = "" \\ """" ;', 'private int a ;', 'private final int a ;', 'private int b ;', 'private final int b ;', 'private int a ;', 'private final int a ;']","['public static void shift ( final double [ ] array , int offset ) {', 'public static boolean isSorted ( final short [ ] array ) {', 'public static void shift ( final short [ ] array , int offset ) {', 'public static void swap ( final Object [ ] array , final int offset1 , final int offset2 ) {', 'public static boolean isSorted ( char [ ] array ) {', 'public static void swap ( final int [ ] array , final int offset1 , final int offset2 ) {', 'public static void shift ( final Object [ ] array , int offset ) {', 'public static void shift ( final double [ ] array , final int offset ) {', 'public static void shift ( final boolean [ ] array , int offset ) {', 'public static void shift ( final char [ ] array , final int offset ) {']","['final EqualsBuilder builder ,', 'if ( !isEquals )', '& & ( useTransients | | !Modifier . isTransient ( f . getModifiers ( ) ) )', 'return excludeFields ;', 'isEquals = lhs . equals ( rhs ) ;', 'isEquals = lhs . equals ( rhs ) ;', 'return equalsBuilder . isEquals ( ) ;', 'private boolean testTransients = false ;', 'for ( int i = 0 ; i < fields . length & & builder . isEquals ; i + + ) {', '}']","['in = new ClassLoaderAwareObjectInputStream ( bais , object . getClass ( ) . getClassLoader ( ) ) ;', 'try ( ClassLoaderAwareObjectInputStream in = new ClassLoaderAwareObjectInputStream ( bais ,', 'ClassLoaderAwareObjectInputStream in = null ;', 'throw new SerializationException ( ""IOException while reading or closing cloned object data"" , ex ) ;', 'if ( in ! = null ) {', 'object . getClass ( ) . getClassLoader ( ) ) ) {', 'throw new SerializationException ( ""IOException while reading cloned object data"" , ex ) ;', 'try {', 'in . close ( ) ;', '}']","['try ( ClassLoaderAwareObjectInputStream in = new ClassLoaderAwareObjectInputStream ( bais ,', 'try ( final ClassLoaderAwareObjectInputStream in = new ClassLoaderAwareObjectInputStream ( bais ,']","['ArrayUtils . isEquals ( parameterTypes , method . getParameterTypes ( ) ) ) {', 'import java . util . Objects ;', 'Objects . deepEquals ( parameterTypes , method . getParameterTypes ( ) ) ) {', 'assertTrue ( ArrayUtils . isEquals ( new String [ ] { ""ab"" , "" "" , ""de"" , "" "" ,', 'assertTrue ( Objects . deepEquals ( new String [ ] { ""ab"" , "" "" , ""de"" , "" "" ,', 'assertTrue ( ArrayUtils . isEquals ( new String [ ] { ""foo"" , ""200"" , ""Bar"" } ,', 'assertTrue ( Objects . deepEquals ( new String [ ] { ""number"" , ""5"" } ,', 'assertTrue ( ArrayUtils . isEquals ( new String [ ] { ""number"" , ""5"" } ,', 'assertTrue ( Objects . deepEquals ( new String [ ] { ""ASF"" , ""Rules"" } ,', 'assertTrue ( ArrayUtils . isEquals ( new String [ ] { ""ASFR"" , ""ules"" } ,']",['@ SafeVarargs'],"['T [ ] result = ( T [ ] ) removeAll ( array , toRemove ) ;', 'final T [ ] result = ( T [ ] ) removeAll ( array , toRemove ) ;', 'T [ ] joinedArray = ( T [ ] ) Array . newInstance ( type1 , array1 . length + array2 . length ) ;', 'final T [ ] joinedArray = ( T [ ] ) Array . newInstance ( type1 , array1 . length + array2 . length ) ;', 'final', '@ SafeVarargs', '@ SafeVarargs', 'T result = ( T ) sort . toArray ( ) [ ( sort . size ( ) - 1 ) / 2 ] ;', 'final T result = ( T ) sort . toArray ( ) [ ( sort . size ( ) - 1 ) / 2 ] ;', 'final']","['private volatile T object = ( T ) NoInit ;', 'if ( result = = noInit ) {', 'private static final Object NoInit = new Object ( ) ;', 'private static final Object noInit = new Object ( ) ;', 'if ( result = = NoInit ) {', 'private volatile T object = ( T ) noInit ;', '@ SuppressWarnings ( ""unchecked"" )']","['if ( in ! = null ) {', 'try ( ObjectOutputStream out = new ObjectOutputStream ( outputStream ) ) {', 'out = new ObjectOutputStream ( outputStream ) ;', '} catch ( final ClassNotFoundException | IOException ex ) {', 'try {', 'try ( ObjectInputStream in = new ObjectInputStream ( inputStream ) ) {', 'ObjectInputStream in = null ;', 'ObjectOutputStream out = null ;', 'in . close ( ) ;', '}']","['} catch ( final IllegalAccessException ex ) {', '} catch ( final IllegalAccessException | InvocationTargetException ex ) {', 'return false ;', '} catch ( final InvocationTargetException ex ) {', '} catch ( final InvocationTargetException ignored ) {', '} catch ( final IllegalAccessException | IllegalArgumentException | InvocationTargetException ignored ) {', '} catch ( final SecurityException ignored ) {', '} catch ( final NoSuchMethodException | SecurityException ignored ) {', '} catch ( final IllegalArgumentException ignored ) {', '} catch ( final NoSuchMethodException ignored ) {']","['if ( result = = noInit ) {', 'private volatile T object = ( T ) NO INIT ;', 'private static final Object noInit = new Object ( ) ;', 'if ( result = = NO INIT ) {', 'private volatile T object = ( T ) noInit ;', 'private static final Object NO INIT = new Object ( ) ;']","['String result = ObjectUtils . toString ( first ) ;', 'final String result = Objects . toString ( first , """" ) ;', '@ SuppressWarnings ( ""deprecation"" )', 'import java . util . Objects ;', 'final String result = ObjectUtils . toString ( first ) ;', 'final String value = Objects . toString ( iterator . next ( ) , """" ) ;', 'final String value = ObjectUtils . toString ( iterator . next ( ) ) ;', '@ SuppressWarnings ( ""deprecation"" )', 'final', 'import org . apache . commons . lang3 . ObjectUtils ;']","['import org . apache . commons . lang3 . ObjectUtils ;', 'import java . util . Objects ;', '@ SuppressWarnings ( ""deprecation"" )', 'return Objects . equals ( getObject ( ) , c . getObject ( ) ) ;', 'return ObjectUtils . equals ( getObject ( ) , c . getObject ( ) ) ;', '@ SuppressWarnings ( ""deprecation"" )', 'import java . util . Objects ;', 'if ( ObjectUtils . equals ( t1 , t2 ) ) {', 'if ( Objects . equals ( t1 , t2 ) ) {', '& & ObjectUtils . equals ( getValue ( ) , other . getValue ( ) ) ;']","['@ SuppressWarnings ( ""deprecation"" )', 'result | = Objects . hashCode ( useOwner ) ;', 'result | = ObjectUtils . hashCode ( useOwner ) ;', 'result = HASH SEED * result + ObjectUtils . hashCode ( toPattern ) ;', 'result = HASH SEED * result + Objects . hashCode ( registry ) ;', '@ SuppressWarnings ( ""deprecation"" )', 'result = HASH SEED * result + Objects . hashCode ( toPattern ) ;', 'result = HASH SEED * result + ObjectUtils . hashCode ( registry ) ;', 'import java . util . Objects ;']","['V compute ( final A arg ) throws InterruptedException ;', 'public interface Computable < I , O > {', 'public interface Computable < A , V > {', 'O compute ( final I arg ) throws InterruptedException ;', 'public class Memoizer < A , V > implements Computable < A , V > {', 'try {', 'try {', 'this . computable = computable ;', 'ft . run ( ) ;', '}']","['assertFalse ( SystemUtils . isJavaVersionAtLeast ( JAVA 9 ) ) ;', 'if ( SystemUtils . IS JAVA 1 7 ) {', 'assertTrue ( SystemUtils . isJavaVersionAtLeast ( JAVA 1 5 ) ) ;', 'assertFalse ( SystemUtils . IS JAVA 1 9 ) ;', 'assertFalse ( SystemUtils . IS JAVA 1 5 ) ;', 'assertTrue ( SystemUtils . isJavaVersionAtLeast ( JAVA 1 4 ) ) ;', 'assertFalse ( SystemUtils . IS JAVA 1 3 ) ;', 'assertFalse ( SystemUtils . IS JAVA 1 2 ) ;', 'assertFalse ( SystemUtils . IS JAVA 1 8 ) ;', '} else if ( SystemUtils . IS JAVA 1 7 ) {']","['String [ ] al = new String [ source . length ] ;', 'if ( null = = array ) {', 'al [ i ] = source [ i ] . toString ( ) ;', 'for ( int i = 0 ; i < array . length ; i + + ) {', 'for ( int i = 0 ; i < source . length ; i + + ) {', 'final Object object = array [ i ] ;', 'if ( null = = source ) return null ;', 'return null ;', 'public static String [ ] toStringArray ( final Object [ ] source ) {', 'return result ;']","['if ( startsWith ( str , wrapToken ) & & endsWith ( str , wrapToken ) ) {', 'public static String unwrap ( final String str , final char wrapChar ) {', 'if ( str . charAt ( 0 ) = = wrapChar & & str . charAt ( str . length ( ) - 1 ) = = wrapChar ) {', 'if ( str . charAt ( 0 ) = = wrapChar & & str . charAt ( str . length ( ) - 1 ) = = wrapChar ) {', 'int endIndex = str . length ( ) - 1 ;', 'if ( startsWith ( str , wrapToken ) & & endsWith ( str , wrapToken ) ) {', 'if ( startIndex ! = - 1 & & endIndex ! = - 1 ) {', 'int endIndex = str . length ( ) - 1 ;', 'public static String unwrap ( final String str , final String wrapToken ) {', 'int wrapLength = wrapToken . length ( ) ;']","['equalsBuilder . reflectionAppend ( lhs , rhs ) ;', '. setTestRecursive ( testRecursive )', 'if ( !isEquals )', '. reflectionAppend ( lhs , rhs )', 'return excludeFields ;', 'if ( !isEquals ) {', 'return testTransients ;', '}', 'equalsBuilder . setExcludeFields ( excludeFields )', '. setExcludeFields ( excludeFields )']","['import java . lang . reflect . Modifier ;', 'return true ;', 'try {', 'readField ( field , right , true ) ) ;', '}', 'if ( left . equals ( right ) ) {', '@ Override', 'public < T > ReflectionDiffBuilder ( final T lhs , final T rhs , final ToStringStyle style ) {', 'if ( Modifier . isStatic ( field . getModifiers ( ) ) ) {', 'import org . apache . commons . lang3 . reflect . FieldUtils ;']","['throw new IllegalArgumentException ( ""Parameter end ( "" + end + "" ) must be greater then ( "" + zero digit ascii + "" ) for generating digits "" +', 'if ( chars = = null ) {', 'final int zero digit ascii = 48 ;', '}', 'if ( numbers & & end < = zero digit ascii', 'final int first letter ascii = 65 ;', '| | letters & & end < = first letter ascii ) {', '""or greater then ( "" + first letter ascii + "" ) for generating letters . "" ) ;', 'fail ( ) ;', 'try {']","['tzNames . put ( key , tzInfo ) ;', 'if ( zoneNames [ i ] ! = null ) {', 'final String key = zoneNames [ i ] . toLowerCase ( locale ) ;', 'tzNames . put ( key , tzInfo ) ;', 'if ( sorted . add ( key ) ) {', '}', 'final String key = zoneNames [ i ] . toLowerCase ( locale ) ;', 'if ( sorted . add ( key ) ) {']","['if ( !pattern . strategy . parse ( this , calendar , source , pos , maxWidth ) ) {', 'final int maxWidth = strategyAndWidth . getMaxWidth ( lt ) ;', 'final int maxWidth = pattern . getMaxWidth ( lt ) ;', 'final StrategyAndWidth strategyAndWidth = lt . next ( ) ;', 'final StrategyAndWidth pattern = lt . next ( ) ;', 'if ( !strategyAndWidth . strategy . parse ( this , calendar , source , pos , maxWidth ) ) {']","['public void testParseOffset ( ) throws ParseException {', 'public void testParseOffset ( ) {']","['private void checkParsePosition ( final String formattedDate ) throws ParseException {', 'private void checkParse ( final String formattedDate ) {', 'private void checkParse ( final String formattedDate ) throws ParseException {', 'private void checkParsePosition ( final String formattedDate ) {']","['public void testInputHasWhitespace ( ) throws ParseException {', 'public void testInputHasWhitespace ( ) {', 'public void testInputHasWrongDay ( ) throws ParseException {', 'public void testInputHasWrongDay ( ) {', 'public void testInputHasMoreCharacters ( ) throws ParseException {', 'public void testInputHasPrecedingCharacters ( ) {', 'public void testInputHasPrecedingCharacters ( ) throws ParseException {', 'public void testInputHasMoreCharacters ( ) {']","['StrategyParser ( final String pattern , final Calendar definingCalendar ) {', 'final StrategyParser fm = new StrategyParser ( definingCalendar ) ;', 'final StrategyParser fm = new StrategyParser ( pattern , definingCalendar ) ;', 'StrategyParser ( final Calendar definingCalendar ) {']","['private TestRecursiveInnerObject a ;', 'private final TestRecursiveInnerObject a ;', 'private int n ;', 'private final int n ;', 'private TestRecursiveInnerObject b ;', 'private final TestRecursiveInnerObject b ;']","['public static String abbreviate ( final String str , int offset , final int maxWidth ) {', 'public static String abbreviate ( final String str , final int offset , final int maxWidth ) {', 'public EqualsBuilder setTestRecursive ( boolean testRecursive ) {', 'public EqualsBuilder setExcludeFields ( final String . . . excludeFields ) {', 'public EqualsBuilder setReflectUpToClass ( Class < ? > reflectUpToClass ) {', 'public EqualsBuilder setTestTransients ( final boolean testTransients ) {', 'public EqualsBuilder setTestTransients ( boolean testTransients ) {', 'final boolean testRecursive , final String . . . excludeFields ) {', 'public EqualsBuilder setExcludeFields ( String . . . excludeFields ) {', 'public EqualsBuilder setReflectUpToClass ( final Class < ? > reflectUpToClass ) {']","['int startIndex = str . indexOf ( wrapToken ) ;', 'final double m = mtp [ 0 ] ;', 'double jw = j < 0 . 7D ? j : j + Math . min ( DEFAULT SCALING FACTOR , 1D / mtp [ 3 ] ) * mtp [ 2 ] * ( 1D - j ) ;', 'final int [ ] mtp = matches ( first , second ) ;', 'double j = ( ( m / first . length ( ) + m / second . length ( ) + ( m - mtp [ 1 ] ) / m ) ) / 3 ;', 'final int endIndex = str . length ( ) - 1 ;', 'int endIndex = str . length ( ) - 1 ;', 'final double j = ( ( m / first . length ( ) + m / second . length ( ) + ( m - mtp [ 1 ] ) / m ) ) / 3 ;', 'int endIndex = str . lastIndexOf ( wrapToken ) ;', 'final int newCodePoints [ ] = new int [ strLen ] ;']","['@ Override', '@ Override', '@ Override', '@ Override', '@ Override']","['final Locale [ ] availableLocales = ChoiceFormat . getAvailableLocales ( ) ;', 'final Locale [ ] availableLocales = NumberFormat . getAvailableLocales ( ) ;']","['@ Deprecated', 'mRule . appendTo ( buffer , CalendarReflection . getWeekYear ( calendar ) ) ;', 'mRule . appendTo ( buffer , calendar . getWeekYear ( ) ) ;']",['@ Deprecated'],"['return NumberUtils . toFloat ( value , defaultReturnValue ) ;', 'try {', 'import org . apache . commons . lang3 . math . NumberUtils ;', 'private static float toFloat ( final String str , final float defaultValue ) {', ""return NumberUtils . toFloat ( toParse [ 0 ] + ' . ' + toParse [ 1 ] , defaultReturnValue ) ;"", ""return toFloat ( toParse [ 0 ] + ' . ' + toParse [ 1 ] , defaultReturnValue ) ;"", 'return Float . parseFloat ( str ) ;', 'return toFloat ( value , defaultReturnValue ) ;', '}', 'if ( str = = null ) {']","['try {', 'return NumberUtils . toFloat ( value , defaultReturnValue ) ;', 'private static float toFloat ( final String str , final float defaultValue ) {', 'import org . apache . commons . lang3 . math . NumberUtils ;', ""return toFloat ( toParse [ 0 ] + ' . ' + toParse [ 1 ] , defaultReturnValue ) ;"", ""return NumberUtils . toFloat ( toParse [ 0 ] + ' . ' + toParse [ 1 ] , defaultReturnValue ) ;"", 'return Float . parseFloat ( str ) ;', 'return toFloat ( value , defaultReturnValue ) ;', '}', 'if ( str = = null ) {']","['if ( b . compareTo ( BigDecimal . valueOf ( d ) ) = = 0 ) {', 'if ( b . compareTo ( BigDecimal . valueOf ( d . doubleValue ( ) ) ) = = 0 ) {']","['final Test testAnno = getClass ( ) . getDeclaredMethod ( ""testToString"" )', 'assertTrue ( annotationString . contains ( ""expected = class org . junit . Test$None"" ) ) ;', 'assertTrue ( toString . contains ( ""timeout = 666000"" ) ) ;', 'assertTrue ( annotationString . endsWith ( "" ) "" ) ) ;', 'assertTrue ( toString . contains ( "" , "" ) ) ;', 'final Test testAnnotation = getClass ( ) . getDeclaredMethod ( ""testToString"" )', 'assertTrue ( toString . startsWith ( "" @ org . junit . Test ( "" ) ) ;', 'final String annotationString = AnnotationUtils . toString ( testAnnotation ) ;', 'final String toString = AnnotationUtils . toString ( testAnno ) ;', 'assertTrue ( annotationString . startsWith ( "" @ org . junit . Test ( "" ) ) ;']","['throw new IllegalArgumentException ( "" ( nBytes - 1 ) * 8 + srcPos is greather or equal to than 64"" ) ;', 'throw new IllegalArgumentException ( "" ( nHexs - 1 ) * 4 + srcPos is greater or equal to than 64"" ) ;', 'throw new IllegalArgumentException ( "" ( nBytes - 1 ) * 8 + dstPos is greather or equal to than 64"" ) ;', 'throw new IllegalArgumentException ( "" ( nInts - 1 ) * 32 + dstPos is greater or equal to than 64"" ) ;', 'throw new IllegalArgumentException ( "" ( nBytes - 1 ) * 8 + srcPos is greather or equal to than 16"" ) ;', 'throw new IllegalArgumentException ( "" ( nHexs - 1 ) * 4 + dstPos is greater or equal to than 16"" ) ;', 'throw new IllegalArgumentException ( "" ( nShorts - 1 ) * 16 + srcPos is greather or equal to than 32"" ) ;', 'throw new IllegalArgumentException ( ""nBools - 1 + srcPos is greater or equal to than 64"" ) ;', 'throw new IllegalArgumentException ( ""nBools - 1 + srcPos is greather or equal to than 64"" ) ;', 'throw new IllegalArgumentException ( "" ( nShorts - 1 ) * 16 + dstPos is greater or equal to than 64"" ) ;']","['ToStringBuilder . setDefaultStyle ( ToStringStyle . DEFAULT STYLE ) ;', 'final ArrayList < Object > emptyList = new ArrayList < > ( ) ;', 'assertEquals ( baseStr + "" [ a = [ ] ] "" , new ToStringBuilder ( base ) . append ( ""a"" , new ArrayList < > ( ) , true ) . toString ( ) ) ;', 'ToStringBuilder . setDefaultStyle ( new RecursiveToStringStyle ( ) ) ;', 'assertEquals ( baseStr + "" [ a = < size = 0 > ] "" , new ToStringBuilder ( base ) . append ( ""a"" , new ArrayList < > ( ) , false ) . toString ( ) ) ;', 'assertEquals ( baseStr + "" [ a = < size = 0 > ] "" , new ToStringBuilder ( base ) . append ( ""a"" , emptyList , false ) . toString ( ) ) ;', 'assertEquals ( baseStr + "" [ a = java . util . ArrayList @ "" + Integer . toHexString ( System . identityHashCode ( emptyList ) ) + "" { } ] "" ,', 'new ToStringBuilder ( base ) . append ( ""a"" , emptyList , true ) . toString ( ) ) ;']","['final boolean [ ] array = new boolean [ ] { true , true , false , false } ;', 'public void testSwapNullObjectArray ( ) {', 'public void testShiftRangeNullInt ( ) {', 'final short [ ] array = new short [ 0 ] ;', 'assertEquals ( 4 , array [ 1 ] ) ;', 'assertEquals ( ""1"" , array [ 4 ] ) ;', 'assertTrue ( array [ 2 ] ) ;', 'boolean [ ] array = new boolean [ ] { false , false , true , true } ;', 'public void testShiftNullLong ( ) {', 'public void testSwapEmptyByteArray ( ) {']",['@ Retention ( RUNTIME )'],"['@ Target ( { ElementType . FIELD , ElementType . METHOD } )', 'String value ( ) ;', 'import java . lang . annotation . Target ;', '}', 'import java . lang . annotation . ElementType ;', 'import java . lang . annotation . Retention ;', 'import java . lang . annotation . RetentionPolicy ;', 'public @ interface GuardedBy {', 'package org . apache . commons . lang3 . concurrent . annotation ;', '@ Retention ( RetentionPolicy . CLASS )']","['import java . lang . annotation . Documented ;', '@ Documented']",['import org . junit . Test ;'],"['spaceToWrapAt = matcher . start ( ) ;', 'spaceToWrapAt = matcher . start ( ) + offset ;', 'import static org . junit . Assert . assertFalse ;', 'WordUtils . wrap ( ""aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa ""', 'import static org . junit . Assert . assertNotNull ;', '+ ""aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa ""', 'import static org . junit . Assert . assertTrue ;', '@ Test', 'import static org . junit . Assert . assertEquals ;', 'import static org . junit . Assert . * ;']","['return !isAnyNotEmpty ( css ) ;', '}', 'public static boolean isAllBlank ( final CharSequence . . . css ) {', 'public static boolean isAllEmpty ( final CharSequence . . . css ) {', 'return !isAnyNotBlank ( css ) ;', '@ Test', 'assertTrue ( StringUtils . isAllBlank ( ( String ) null ) ) ;', 'public void testIsAllBlank ( ) {', '}', 'assertFalse ( StringUtils . isAllBlank ( ""foo"" , ""bar"" ) ) ;']","['float [ ] result = new float [ array . length + values . length ] ;', 'byte [ ] result = new byte [ array . length + values . length ] ;', 'long [ ] result = new long [ array . length + values . length ] ;', 'public static int [ ] insert ( final int index , final int [ ] array , final int . . . values ) {', 'return result ;', 'public static long [ ] insert ( final int index , final long [ ] array , final long . . . values ) {', '}', 'final Class < ? > type = array . getClass ( ) . getComponentType ( ) ;', 'int [ ] result = new int [ array . length + values . length ] ;', 'double [ ] result = new double [ array . length + values . length ] ;']","['@ SuppressWarnings ( ""unused"" )', '@ SuppressWarnings ( ""deprecation"" )', '@ SuppressWarnings ( { ""unused"" , ""deprecation"" } )', '@ Test', 'String [ ] result = arrayOfTwo ( ""foo"" , ""bar"" ) ;', '}', 'public void testBadVarArgs ( ) throws Exception {', 'static < T > T [ ] arrayOfTwo ( T a , T b ) {', '@ SuppressWarnings ( ""unused"" )', 'return ArrayUtils . toArray ( a , b ) ;']","['buffer [ count ] = ( char ) ( 56320 + random . nextInt ( 128 ) ) ;', 'final int numberOfChars = Character . charCount ( codePoint ) ;', '}', '}', 'if ( ch > = 56320 & & ch < = 57343 ) {', 'count + + ;', 'final char [ ] buffer = new char [ count ] ;', 'continue ;', 'end = Integer . MAX VALUE ;', 'case Character . PRIVATE USE :']","['return SystemUtils . IS OS WINDOWS ? System . getenv ( ""COMPUTERNAME"" ) : System . getenv ( ""HOSTNAME"" ) ;', '}', 'public static String getHostName ( ) {', '@ Test', 'final String hostName = SystemUtils . getHostName ( ) ;', 'Assert . assertEquals ( expected , hostName ) ;', '}', 'public void testGetHostName ( ) {', 'Assert . assertNotNull ( hostName ) ;', 'Assert . assertFalse ( hostName . isEmpty ( ) ) ;']","['public < T > StrBuilder appendAll ( final T . . . array ) {', 'public < T > StrBuilder appendAll ( @ SuppressWarnings ( ""unchecked"" ) final T . . . array ) {']","['if ( str . length ( ) = = 0 ) {', 'for ( int i = 0 ; i < result . length ; i + + ) {', 'return null ;', 'return result ;', 'result [ i ] = s . codePointAt ( index ) ;', 'int [ ] result = new int [ s . codePointCount ( 0 , s . length ( ) ) ] ;', '}', 'return ArrayUtils . EMPTY INT ARRAY ;', 'String s = str . toString ( ) ;', 'if ( str = = null ) {']","['import static org . junit . Assert . assertFalse ;', '@ Test', 'import static org . junit . Assert . assertNotNull ;', 'import static org . junit . Assert . * ;', 'import static org . junit . Assert . assertTrue ;', '}', 'import static org . junit . Assert . assertEquals ;', 'public void testToCharArray ( ) throws Exception {', 'final StringBuilder builder = new StringBuilder ( ""abcdefg"" ) ;', 'final char [ ] expected = builder . toString ( ) . toCharArray ( ) ;']","['assertPatternsEqual ( ""toPattern "" + buffer . toString ( ) , mf . toPattern ( ) , emf . toPattern ( ) ) ;', 'assertEquals ( ""toPattern "" + buffer . toString ( ) , mf . toPattern ( ) , emf . toPattern ( ) ) ;', 'assertPatternsEqual ( ""pattern comparison for locale "" + locale , expectedPattern , emf . toPattern ( ) ) ;', 'assertEquals ( ""TOPATTERN"" , pattern , emf . toPattern ( ) ) ;', 'private void assertPatternsEqual ( final String message , final String expected , final String actual ) {', 'assertEquals ( ""pattern comparison for locale "" + locale , expectedPattern , emf . toPattern ( ) ) ;', '}', 'if ( SystemUtils . isJavaVersionAtLeast ( JAVA 1 4 ) ) {', 'import static org . apache . commons . lang3 . JavaVersion . JAVA 1 4 ;', 'assertEquals ( message , expected , actual ) ;']","['fis . close ( ) ;', 'import java . nio . file . Paths ;', 'import org . apache . commons . io . IOUtils ;', 'final String input = new String ( inputBytes , StandardCharsets . UTF 8 ) ;', 'final FileInputStream fis = new FileInputStream ( ""src / test / resources / lang - 708 - input . txt"" ) ;', 'final byte [ ] inputBytes = Files . readAllBytes ( Paths . get ( ""src / test / resources / lang - 708 - input . txt"" ) ) ;', 'import java . io . FileInputStream ;', 'import java . nio . file . Files ;', 'final String input = IOUtils . toString ( fis , ""UTF - 8"" ) ;', 'import java . nio . charset . StandardCharsets ;']","['if ( containsUppercase & & containsLowercase ) {', 'return true ;', 'containsUppercase = true ;', 'containsLowercase = true ;', '}', 'public static boolean isMixedCase ( final CharSequence cs ) {', 'boolean containsUppercase = false ;', 'return containsUppercase & & containsLowercase ;', 'return false ;', 'if ( isEmpty ( cs ) | | cs . length ( ) = = 1 ) {']","['strDigits . append ( tempChar ) ;', 'final int sz = str . length ( ) ;', 'final char tempChar = str . charAt ( i ) ;', 'if ( isEmpty ( str ) ) {', 'return strDigits . toString ( ) ;', '}', 'public static String getDigits ( final String str ) {', 'final StringBuilder strDigits = new StringBuilder ( sz ) ;', 'for ( int i = 0 ; i < sz ; i + + ) {', 'if ( Character . isDigit ( tempChar ) ) {']","['final Throwable cause = exception . getCause ( ) ;', '@ Test', '}', 'assertNotNull ( exception ) ;', 'public void testThrowingExceptionWithMessage ( ) throws Exception {', 'throw new CircuitBreakingException ( EXCEPTION MESSAGE ) ;', 'throw new CircuitBreakingException ( generateCause ( ) ) ;', 'public void testWithoutCause ( ) throws Exception {', 'throw new CircuitBreakingException ( EXCEPTION MESSAGE , generateCause ( ) ) ;', 'public void testWithCauseAndMessage ( ) throws Exception {']","['@ Deprecated', 'setArraySeparator ( "" , "" + SystemUtils . LINE SEPARATOR + spacer ( spaces ) ) ;', 'setFieldSeparator ( "" , "" + System . lineSeparator ( ) + spacer ( spaces ) ) ;', 'setFieldSeparator ( "" , "" + SystemUtils . LINE SEPARATOR + spacer ( spaces ) ) ;', 'setContentStart ( "" [ "" + System . lineSeparator ( ) + spacer ( spaces ) ) ;', 'setContentStart ( "" [ "" + SystemUtils . LINE SEPARATOR + spacer ( spaces ) ) ;', 'setArrayStart ( "" { "" + System . lineSeparator ( ) + spacer ( spaces ) ) ;', 'setArrayEnd ( SystemUtils . LINE SEPARATOR + spacer ( spaces - indent ) + "" } "" ) ;', 'setContentEnd ( System . lineSeparator ( ) + spacer ( spaces - indent ) + "" ] "" ) ;', 'setContentEnd ( SystemUtils . LINE SEPARATOR + spacer ( spaces - indent ) + "" ] "" ) ;']","['private final String FIELD NAME PREFIX = "" \\ """" ;', 'private static final String FIELD NAME PREFIX = "" \\ """" ;']","['spaces + = indent ;', 'spaces + = INDENT ;', 'spaces - = indent ;', 'setContentEnd ( System . lineSeparator ( ) + spacer ( spaces - INDENT ) + "" ] "" ) ;', 'setContentEnd ( System . lineSeparator ( ) + spacer ( spaces - indent ) + "" ] "" ) ;', 'private static final int INDENT = 2 ;', 'setArrayEnd ( System . lineSeparator ( ) + spacer ( spaces - indent ) + "" } "" ) ;', 'spaces - = INDENT ;', 'private final int indent = 2 ;', 'setArrayEnd ( System . lineSeparator ( ) + spacer ( spaces - INDENT ) + "" } "" ) ;']","['}', 'aIt . remove ( ) ;', 'public void testIteratorRemove ( ) {', '@ Test ( expected = UnsupportedOperationException . class )', 'final Iterator < Character > aIt = a . iterator ( ) ;', ""CharRange a = CharRange . is ( 'a' ) ;"", 'import java . lang . reflect . Modifier ;', '@ Test', 'assertNotNull ( new RandomUtils ( ) ) ;', 'assertTrue ( result = = true | | result = = false ) ;']","['assertFalse ( CharUtils . isAscii ( CHAR COPY ) ) ;', 'assertFalse ( CharUtils . isAsciiPrintable ( CHAR COPY ) ) ;']","['} catch ( final IOException ex ) {', '} catch ( final NullPointerException | IOException npe ) {', '} catch ( final NullPointerException npe ) {']","['return list . size ( ) < 2 ? null : ( Throwable ) list . get ( list . size ( ) - 1 ) ;', 'return list . size ( ) < 2 ? null : list . get ( list . size ( ) - 1 ) ;', 'final GenericDeclaration d = ( ( TypeVariable < ? > ) var ) . getGenericDeclaration ( ) ;', 'final GenericDeclaration d = var . getGenericDeclaration ( ) ;', 'this ( ( StrLookup < ? > ) null , DEFAULT PREFIX , DEFAULT SUFFIX , DEFAULT ESCAPE ) ;', 'this ( null , DEFAULT PREFIX , DEFAULT SUFFIX , DEFAULT ESCAPE ) ;', 'newArray = ArrayUtils . add ( ( boolean [ ] ) null , true ) ;', 'assertNull ( ArrayUtils . addAll ( null , ( Object [ ] ) null ) ) ;', 'assertNull ( ArrayUtils . addAll ( ( Object [ ] ) null , ( Object [ ] ) null ) ) ;', 'doubleArray = ArrayUtils . add ( null , - 1 , 2 . 2 ) ;']","['} catch ( final NullPointerException | IOException npe ) {', '} catch ( final NullPointerException expectedException ) {', 'fail ( ""IOException unexpected"" ) ;', '} catch ( final IOException ex ) {']","['return buffer . toString ( ) ;', 'StringBuilder builder = new StringBuilder ( count ) ;', 'buffer . appendCodePoint ( codePoint ) ;', 'return builder . toString ( ) ;', 'StringBuffer buffer = new StringBuffer ( count ) ;', 'builder . appendCodePoint ( codePoint ) ;', 'final StringBuffer buf = new StringBuffer ( ""pick"" ) ;', 'original1 = new Object [ ] { builder , ""a"" , new String [ ] { ""stick"" } } ;', 'original1 = new Object [ ] { buf , ""a"" , new String [ ] { ""stick"" } } ;', 'final StringBuilder builder = new StringBuilder ( ""pick"" ) ;']","['if ( c . isArray ( ) ) {', 'return toString ( c . getComponentType ( ) ) + "" [ ] "" ;', '}', 'Assert . assertEquals ( ""java . util . List < java . lang . String > [ ] "" , TypeUtils . toString ( stringListField . getGenericType ( ) ) ) ;', '@ Test', 'Assert . assertEquals ( ""int [ ] "" , TypeUtils . toString ( int [ ] . class ) ) ;', '}', 'public static List < String > [ ] stringListArray ;', 'public void testToStringLang1311 ( ) {', 'Assert . assertEquals ( ""java . lang . Integer [ ] "" , TypeUtils . toString ( Integer [ ] . class ) ) ;']","['throw new IllegalArgumentException ( String . format ( message ) ) ;', 'throw new IllegalArgumentException ( message ) ;']","['final String expectedString = ""The quick brown fox jumped over the lazy dog . "" ;', 'final String expectedString = ""The quick brown fox jumps over the lazy dog . "" ;']","['split [ 1 ] . length ( ) = = 2 & & StringUtils . isAllUpperCase ( split [ 1 ] ) ) {', '( split [ 1 ] . length ( ) = = 2 & & StringUtils . isAllUpperCase ( split [ 1 ] ) ) | |', '( split [ 1 ] . length ( ) = = 3 & & StringUtils . isNumeric ( split [ 1 ] ) ) ) {', 'assertValidToLocale ( ""en 150"" , ""en"" , ""150"" ) ;', '@ Test', 'assertValidToLocale ( ""en 001"" , ""en"" , ""001"" ) ;', 'public void testLanguageAndUNM49Numeric3AreaCodeLang1312 ( ) {', 'assertValidToLocale ( ""ar 001"" , ""ar"" , ""001"" ) ;', '}']","['MOE , LARRY , CURLY , JOE , SHEMP ;', 'MOE , LARRY , CURLY , JOE , SHEMP', 'A48 , A49 , A50 , A51 , A52 , A53 , A54 , A55 , A56 , A57 , A58 , A59 , A60 , A61 , A62 , A63 ;', 'A48 , A49 , A50 , A51 , A52 , A53 , A54 , A55 , A56 , A57 , A58 , A59 , A60 , A61 , A62 , A63', 'A2 , B2 , C2 , D2 , E2 , F2 , G2 , H2 , I2 , J2 , K2 , L2 , M2 ;', 'A2 , B2 , C2 , D2 , E2 , F2 , G2 , H2 , I2 , J2 , K2 , L2 , M2']","['A1 , B1 , C1 , D1 , E1 , F1 , G1 , H1 , I1 , J1 , K1 , L1 , M1 , N1 , O1 , P1 , Q1 , R1 , S1 , T1 , U1 , V1 , W1 , X1 , Y1 , Z1 ,', 'U1 , V1 , W1 , X1 , Y1 , Z1 , A2 , B2 , C2 , D2 , E2 , F2 , G2 , H2 , I2 , J2 , K2 , L2 , M2', 'A , B , C , D , E , F , G , H , I , J , K , L , M , N , O , P , Q , R , S , T , U , V , W , X , Y , Z ,', 'A , B , C , D , E , F , G , H , I , J , K , L , M , N , O , P , Q , R , S , T , U , V , W , X , Y , Z ,', 'A2 , B2 , C2 , D2 , E2 , F2 , G2 , H2 , I2 , J2 , K2 , L2 , M2', 'A1 , B1 , C1 , D1 , E1 , F1 , G1 , H1 , I1 , J1 , K1 , L1 , M1 , N1 , O1 , P1 , Q1 , R1 , S1 , T1 ,']","['for ( int i = 0 ; i < sz ; i + + ) {', 'add ( s ) ;', 'add ( set [ i ] ) ;', 'for ( String s : set ) {', 'final int sz = set . length ;', 'if ( chars . contains ( chrs [ i ] ) = = expect ) {', 'if ( chars . contains ( chr ) = = expect ) {', 'for ( int i = 0 ; i < sz ; i + + ) {', 'buffer . append ( chr ) ;', 'final int sz = chrs . length ;']","['if ( Math . abs ( cal1 . getTime ( ) . getTime ( ) - cal2 . getTime ( ) . getTime ( ) ) > delta ) {', 'Math . abs ( cal1 . getTime ( ) . getTime ( ) - cal2 . getTime ( ) . getTime ( ) ) > delta ) ;', 'if ( count % 7 ! = 0 ) {', 'assertFalse ( message + "" expected "" + cal1 . getTime ( ) + "" but got "" + cal2 . getTime ( ) ,', 'import junit . framework . AssertionFailedError ;', 'assertFalse ( ""There were "" + count + "" days in this iterator"" , count % 7 ! = 0 ) ;', '}', 'message + "" expected "" + cal1 . getTime ( ) + "" but got "" + cal2 . getTime ( ) ) ;', 'throw new AssertionFailedError ( ""There were "" + count + "" days in this iterator"" ) ;', 'throw new AssertionFailedError (']","['import static junit . framework . TestCase . assertNotNull ;', 'import static org . junit . Assert . assertNotNull ;']","['array = ArrayUtils . removeElements ( new long [ ] { 1 , 2 } , ( long ) 1 ) ;', 'array = ArrayUtils . removeElements ( new long [ ] { 1 , 2 } , 1L ) ;', 'array = ArrayUtils . removeElements ( new long [ ] { 1 , 2 , 1 } , ( long ) 1 , ( long ) 2 ) ;', 'array = ArrayUtils . removeElements ( new long [ ] { 1 , 2 } , 1L , 2L ) ;', 'array = ArrayUtils . removeElements ( new long [ ] { 1 } , ( long ) 1 ) ;', 'array = ArrayUtils . removeElements ( ArrayUtils . EMPTY LONG ARRAY , 1L , 1L ) ;', 'array = ArrayUtils . removeElements ( new long [ ] { 1 , 2 , 1 } , ( long ) 1 , ( long ) 1 , ( long ) 1 , ( long ) 1 ) ;', 'array = ArrayUtils . removeElements ( new long [ ] { 1 } , 1L , 1L ) ;', 'array = ArrayUtils . removeElements ( ArrayUtils . EMPTY LONG ARRAY , ( long ) 1 ) ;', 'array = ArrayUtils . removeElements ( new long [ ] { 1 , 2 , 1 } , 1L ) ;']","['assertEquals ( ""CONST ( long ) "" , 3l , ObjectUtils . CONST ( 3l ) ) ;', 'assertEquals ( ""CONST ( long ) "" , 3L , ObjectUtils . CONST ( 3L ) ) ;', 'assertTrue ( ""toLong ( String ) 2 failed"" , NumberUtils . toLong ( ""abc"" ) = = 0l ) ;', 'assertTrue ( ""toLong ( String ) 4 failed"" , NumberUtils . toLong ( ""1l"" ) = = 0L ) ;', 'assertTrue ( ""toLong ( null ) failed"" , NumberUtils . toLong ( null ) = = 0l ) ;', 'assertTrue ( ""toLong ( String , long ) 1 failed"" , NumberUtils . toLong ( ""12345"" , 5L ) = = 12345L ) ;', 'assertTrue ( ""toLong ( String , long ) 2 failed"" , NumberUtils . toLong ( ""1234 . 5"" , 5l ) = = 5l ) ;', 'assertTrue ( ""toLong ( String , long ) 2 failed"" , NumberUtils . toLong ( ""1234 . 5"" , 5L ) = = 5L ) ;', 'assertTrue ( ""toLong ( String ) 4 failed"" , NumberUtils . toLong ( ""1l"" ) = = 0l ) ;', 'assertTrue ( ""toLong ( String ) 2 failed"" , NumberUtils . toLong ( ""abc"" ) = = 0L ) ;']","['return i ;', 'for ( int i = start ; i > = 0 ; - - i ) {', 'for ( int i = start ; i > = 0 ; - - i ) {', 'if ( searchChar < = Character . MAX CODE POINT ) {', 'if ( cs . charAt ( i ) = = searchChar ) {', 'return i ;', 'if ( cs . charAt ( i ) = = searchChar ) {', '}', 'if ( cs . charAt ( i ) = = chars [ 1 ] ) {', 'if ( searchChar < Character . MIN SUPPLEMENTARY CODE POINT ) {']","['return i ;', 'break ;', 'if ( cs . charAt ( i ) = = searchChar ) {', 'if ( i + 1 = = cs . length ( ) ) {', '}', 'for ( int i = start ; i < sz ; i + + ) {', 'if ( cs . charAt ( i ) = = chars [ 1 ] ) {', 'if ( searchChar < = Character . MAX CODE POINT ) {', 'for ( int i = start ; i > 0 ; - - i ) {', 'return i ;']","['builder . append ( tmp ) ;', 'assertEquals ( - 1 , CharSequenceUtils . lastIndexOf ( builder , CODE POINT , 0 ) ) ;', 'builder = new StringBuilder ( ) ;', 'char [ ] tmp = { ( char ) 55361 } ;', 'assertEquals ( - 1 , CharSequenceUtils . indexOf ( builder , CODE POINT , 0 ) ) ;']","['assertEquals ( - 1 , CharSequenceUtils . lastIndexOf ( builder , CODE POINT , 0 ) ) ;', 'assertEquals ( - 1 , StringUtils . lastIndexOf ( builder , CODE POINT ) ) ;', 'assertFalse ( StringUtils . contains ( builder , CODE POINT ) ) ;', 'assertEquals ( 0 , StringUtils . indexOf ( builder , CODE POINT , 0 ) ) ;', 'assertEquals ( - 1 , StringUtils . indexOf ( builder , CODE POINT , 0 ) ) ;', 'assertEquals ( 0 , StringUtils . lastIndexOf ( builder , CODE POINT ) ) ;', 'assertEquals ( 0 , CharSequenceUtils . lastIndexOf ( builder , CODE POINT , 0 ) ) ;', 'assertEquals ( 0 , StringUtils . indexOf ( builder , CODE POINT ) ) ;', 'assertEquals ( - 1 , StringUtils . lastIndexOf ( builder , CODE POINT , 0 ) ) ;', 'assertTrue ( StringUtils . contains ( builder , CODE POINT ) ) ;']","['break ;', 'break ;', 'if ( i + 1 = = cs . length ( ) ) {', 'for ( int i = start ; i > = 0 ; - - i ) {', 'for ( int i = start ; i < sz ; i + + ) {', 'if ( searchChar < Character . MIN SUPPLEMENTARY CODE POINT ) {', 'if ( searchChar < = Character . MAX CODE POINT ) {', 'if ( i + 1 = = cs . length ( ) ) {', 'return i ;', 'return i ;']","['builder . append ( tmp ) ;', 'assertEquals ( 0 , StringUtils . indexOf ( builder , CODE POINT , 0 ) ) ;', 'builder . appendCodePoint ( CODE POINT ) ;', 'builder = new StringBuilder ( ) ;', 'assertEquals ( - 1 , StringUtils . indexOf ( builder , CODE POINT , 0 ) ) ;', 'char [ ] tmp = { ( char ) 55361 } ;', 'assertEquals ( - 1 , StringUtils . lastIndexOf ( builder , CODE POINT , 0 ) ) ;', 'StringBuilder builder = new StringBuilder ( ) ;', 'assertEquals ( 0 , StringUtils . lastIndexOf ( builder , CODE POINT , 0 ) ) ;', 'final int CODE POINT = 0x2070E ;']","['init PPC 32Bit ( ) ;', 'private static final void init IA64 32Bit ( ) {', 'String msg = ""Key "" + key + "" already exists in processor map"" ;', 'addProcessors ( processor , ""x86"" , ""i386"" , ""i486"" , ""i586"" , ""i686"" , ""pentium"" ) ;', 'init IA64 32Bit ( ) ;', '}', 'init X86 32Bit ( ) ;', 'addProcessors ( processor , ""ppc"" , ""power"" , ""powerpc"" , ""power pc"" , ""power rs"" ) ;', 'init ( ) ;', 'public static final Processor getProcessor ( String value ) {']","['break ;', '} else if ( Character . isSurrogatePair ( high , low ) ) {', 'if ( i + 1 = = cs . length ( ) ) {', 'break ;', 'return i ;', 'if ( i + 1 = = cs . length ( ) ) {', '}', 'char high = cs . charAt ( i ) ;', 'if ( cs . charAt ( i + 1 ) = = chars [ 1 ] ) {', 'char low = cs . charAt ( i + 1 ) ;']","['break ;', '} else if ( Character . isSurrogatePair ( high , low ) ) {', 'for ( int i = start ; i > = 0 ; - - i ) {', 'return maxInd ;', 'if ( i + 1 = = cs . length ( ) ) {', 'if ( start = = sz - 1 ) {', 'return i ;', 'for ( int i = 0 ; i < cs . length ( ) - 1 ; i + + ) {', '}', 'char high = cs . charAt ( i ) ;']","['c . setTime ( date ) ;', 'c . setTime ( date ) ;', 'return c ;', 'return c ;', 'final Calendar c = Calendar . getInstance ( tz ) ;', 'final Calendar c = Calendar . getInstance ( tz ) ;']","['@ SuppressWarnings ( ""unchecked"" )']","['assertTrue ( ClassUtils . isAssignable ( ( Class [ ] ) null , null ) ) ;', 'assertTrue ( ClassUtils . isAssignable ( ( Class [ ] ) null , ( Class < ? > [ ] ) null ) ) ;']","['assertEquals ( autoboxing , ClassUtils . isAssignable ( Boolean . TYPE , Object . class ) ) ;', 'assertTrue ( ""long - > float"" , ClassUtils . isAssignable ( Long . class , Float . TYPE ) ) ;', 'assertEquals ( ""int - > float"" , autoboxing , ClassUtils . isAssignable ( Integer . class , Float . TYPE ) ) ;', 'assertTrue ( ClassUtils . isAssignable ( Integer . TYPE , Object . class ) ) ;', 'assertEquals ( ""byte - > short"" , autoboxing , ClassUtils . isAssignable ( Byte . class , Short . TYPE ) ) ;', 'assertTrue ( ""int - > double"" , ClassUtils . isAssignable ( Integer . class , Double . TYPE ) ) ;', 'assertEquals ( ""short - > long"" , autoboxing , ClassUtils . isAssignable ( Short . class , Long . TYPE ) ) ;', 'assertTrue ( ClassUtils . isAssignable ( Boolean . TYPE , Object . class ) ) ;', 'final boolean autoboxing = SystemUtils . isJavaVersionAtLeast ( JAVA 1 5 ) ;', 'assertTrue ( ""char - > double"" , ClassUtils . isAssignable ( Character . class , Double . TYPE ) ) ;']","['@ SuppressWarnings ( ""deprecation"" )', '@ Deprecated', '@ Deprecated', '@ Deprecated', '@ Deprecated', '@ Deprecated', '@ Deprecated', '@ Deprecated', '@ Deprecated', '@ Deprecated']","['return !isAnyNotEmpty ( css ) ;', 'if ( isNotBlank ( cs ) ) {', 'if ( isNotBlank ( cs ) ) {', 'return true ;', 'return true ;', 'if ( isNotEmpty ( cs ) ) {', 'if ( isNotEmpty ( cs ) ) {', '}', 'public static boolean isAnyNotBlank ( final CharSequence . . . css ) {', 'return false ;']","['if ( bestMatch ! = null & & bestMatch . isVarArgs ( ) & & bestMatch . getParameterTypes ( ) . length > 0 & & parameterTypes . length > 0 ) {', 'final Class < ? > [ ] methodParameterTypes = bestMatch . getParameterTypes ( ) ;', '& & !methodParameterComponentTypeName . equals ( parameterTypeSuperClassName ) ) {', 'return null ;', '}', 'final Class < ? > methodParameterComponentType = methodParameterTypes [ methodParameterTypes . length - 1 ] . getComponentType ( ) ;', 'final String methodParameterComponentTypeName = ClassUtils . primitiveToWrapper ( methodParameterComponentType ) . getName ( ) ;', 'final String parameterTypeName = parameterTypes [ parameterTypes . length - 1 ] . getName ( ) ;', 'final String parameterTypeSuperClassName = parameterTypes [ parameterTypes . length - 1 ] . getSuperclass ( ) . getName ( ) ;', 'if ( !methodParameterComponentTypeName . equals ( parameterTypeName )']","['import static org . junit . Assert . * ;', 'import static org . junit . Assert . fail ;', 'import static org . junit . Assert . assertFalse ;', 'import static org . junit . Assert . assertArrayEquals ;', 'import static org . junit . Assert . assertNull ;', 'Assert . assertEquals ( null , CharSequenceUtils . subSequence ( StringUtils . EMPTY , 1 ) ) ;', 'fail ( id + "" Expected "" + data . throwable ) ;', 'Assert . assertEquals ( ""2"" , CharSequenceUtils . subSequence ( ""012"" , 2 ) ) ;', 'assertEquals ( null , CharSequenceUtils . subSequence ( null , 0 ) ) ;', 'Assert . assertEquals ( StringUtils . EMPTY , CharSequenceUtils . subSequence ( ""012"" , 3 ) ) ;']","['return ""privateStringStuff ( int ) "" ;', 'return ""privateStringStuff ( int ) "" ;', 'return ""privateStringStuff ( ) "" ;', 'return ""privateStringStuff ( ) "" ;', 'return ""privateStringStuff ( Object ) "" ;', 'return ""privateStringStuff ( Object ) "" ;', 'return ""privateStringStuff ( double ) "" ;', 'return ""privateStringStuff ( double ) "" ;', 'return ""privateStringStuff ( Integer ) "" ;', 'return ""privateStringStuff ( Integer ) "" ;']","['} else if ( Character . isSurrogatePair ( high , low ) ) {', 'return i ;', 'return maxInd ;', 'for ( int i = start ; i > = 0 ; i - - ) {', 'for ( int i = 0 ; i < cs . length ( ) - 1 ; i + + ) {', 'if ( maxInd > = start ) {', '}', 'ind + + ;', 'return ind ;', 'int ind = 0 ;']","['this . append ( fieldName , fieldValue ) ;', 'this . append ( fieldName , fieldValue ) ;', 'this . setAppendStatics ( outputStatics ) ;', 'public < T > ReflectionToStringBuilder (', '}', 'return this . excludeNullValues ;', 'if ( !excludeNullValues | | fieldValue ! = null ) {', 'final boolean outputStatics , boolean excludeNulls , final Class < ? super T > reflectUpToClass ) {', 'public boolean isExcludeNullValues ( ) {', 'public void setExcludeNullValues ( final boolean excludeNullValues ) {']","['builder . setExcludeNullValues ( true ) ;', 'oldBuilder = new ReflectionToStringBuilder ( BOTH NULL , null , null , null , false , false ) ;', 'ReflectionToStringBuilder builder = new ReflectionToStringBuilder ( BOTH NON NULL , null , null , null , false , false , false ) ;', '@ Test', 'assertFalse ( builder . isExcludeNullValues ( ) ) ;', 'ReflectionToStringBuilder oldBuilder = new ReflectionToStringBuilder ( BOTH NULL ) ;', '}', 'assertTrue ( toString . contains ( STRING FIELD NAME ) ) ;', 'assertTrue ( builder . isExcludeNullValues ( ) ) ;', 'toString = oldBuilder . toString ( ) ;']","['assertEquals ( 0 , StringUtils . lastIndexOf ( builder , CODE POINT , 1 ) ) ;', 'assertEquals ( 0 , StringUtils . lastIndexOf ( builder , CODE POINT , 1 ) ) ;', 'builder = new StringBuilder ( ) ;', 'builder = new StringBuilder ( ) ;', 'assertEquals ( - 1 , StringUtils . indexOf ( builder . toString ( ) , CODE POINT , 0 ) ) ;', 'assertEquals ( - 1 , StringUtils . indexOf ( builder . toString ( ) , CODE POINT , 0 ) ) ;', 'assertEquals ( 1 , StringUtils . indexOf ( builder , CODE POINT , 0 ) ) ;', 'assertEquals ( 1 , StringUtils . indexOf ( builder , CODE POINT , 0 ) ) ;', 'assertEquals ( - 1 , StringUtils . indexOf ( builder , CODE POINT , 2 ) ) ;', 'char [ ] tmp = { ( char ) 55361 } ;']",['@ Deprecated'],"['final Method [ ] allMethods = cls . getMethods ( ) ;', 'final Method [ ] methods = ( ignoreAccess ? acls . getDeclaredMethods ( ) : acls . getMethods ( ) ) ;', 'for ( final Method method : allMethods ) {', 'int ifi = 0 ;', 'final List < Method > annotatedMethodsList = getMethodsListWithAnnotation ( cls , annotationCls ) ;', 'List < Class < ? > > classes = ( searchSupers ? getAllSuperclassesAndInterfaces ( cls )', 'annotatedMethods . add ( method ) ;', 'annotatedMethods . add ( method ) ;', 'if ( method . getAnnotation ( annotationCls ) ! = null ) {', 'try {']","['public static int [ ] insert ( final int index , final int [ ] array , final int . . . values ) {', 'public static int [ ] insert ( final int index , final int [ ] array , final int . . . values ) {', 'public static long [ ] insert ( final int index , final long [ ] array , final long . . . values ) {', 'public static long [ ] insert ( final int index , final long [ ] array , final long . . . values ) {', '}', '}', 'public static boolean [ ] insert ( final int index , final boolean [ ] array , final boolean . . . values ) {', 'public static boolean [ ] insert ( final int index , final boolean [ ] array , final boolean . . . values ) {', 'public static float [ ] insert ( final int index , final float [ ] array , final float . . . values ) {', 'public static float [ ] insert ( final int index , final float [ ] array , final float . . . values ) {']","['break ;', 'default :']","['switch ( occurrences ) {', 'switch ( segmentCount ) {', '( split [ 1 ] . length ( ) = = 0 | | split [ 1 ] . length ( ) = = 2 & & StringUtils . isAllUpperCase ( split [ 1 ] ) ) & &', 'final String country = segments [ 0 ] ;', 'final String [ ] split = str . split ( "" "" , - 1 ) ;', 'final String [ ] segments = str . split ( "" "" , - 1 ) ;', '( split [ 0 ] . length ( ) = = 2 | | split [ 0 ] . length ( ) = = 3 ) & &', '( country . length ( ) = = 2 | | country . length ( ) = = 3 ) & &', 'if ( StringUtils . isAllLowerCase ( split [ 0 ] ) & &', '( segments [ 1 ] . length ( ) = = 3 & & StringUtils . isNumeric ( segments [ 1 ] ) ) ) {']","['return parseLocale ( str , len ) ;', '}', 'private static Locale parseLocale ( final String str , final int len ) {']","['( segments [ 1 ] . length ( ) = = 3 & & StringUtils . isNumeric ( segments [ 1 ] ) ) ) {', 'return new Locale ( language , segments [ 1 ] ) ;', 'final String country = segments [ 0 ] ;', 'if ( isISO639LanguageCode ( language ) & &', 'if ( StringUtils . isAllLowerCase ( str ) & & ( len = = 2 | | len = = 3 ) ) {', 'if ( isISO639LanguageCode ( language ) & & isISO3166CountryCode ( segments [ 1 ] ) | |', '( country . length ( ) = = 2 | | country . length ( ) = = 3 ) & &', 'final String language = segments [ 0 ] ;', 'return new Locale ( country , segments [ 1 ] , segments [ 2 ] ) ;', 'return new Locale ( language , segments [ 1 ] , segments [ 2 ] ) ;']","['switch ( segmentCount ) {', 'return new Locale ( language , segments [ 1 ] ) ;', 'return new Locale ( language , segments [ 1 ] ) ;', 'if ( isISO639LanguageCode ( language ) & &', 'if ( isISO639LanguageCode ( language ) & &', 'if ( isISO639LanguageCode ( language ) & & isISO3166CountryCode ( segments [ 1 ] ) | |', 'if ( isISO639LanguageCode ( language ) & & isISO3166CountryCode ( segments [ 1 ] ) | |', 'return new Locale ( language , segments [ 1 ] , segments [ 2 ] ) ;', 'return new Locale ( language , segments [ 1 ] , segments [ 2 ] ) ;', '}']","['}', 'if ( isISO639LanguageCode ( str ) ) {', 'return new Locale ( str ) ;', '}', 'if ( isISO639LanguageCode ( str ) ) {', 'return new Locale ( str ) ;', '} else if ( segmentCount = = 1 ) {', 'if ( segmentCount = = 1 ) {', 'if ( segmentCount = = 0 ) {']","['( country . length ( ) = = 0 | | isISO3166CountryCode ( country ) ) & &', '( country . length ( ) = = 0 | | isISO3166CountryCode ( country ) | | isNumericAreaCode ( country ) ) & &', 'assertValidToLocale ( ""en 150 US"" , ""en"" , ""150"" , ""US"" ) ;', 'assertValidToLocale ( ""en 001 GB"" , ""en"" , ""001"" , ""GB"" ) ;']","['throw new IllegalArgumentException ( ""Parameter end ( "" + end + "" ) must be greater then ( "" + zero digit ascii + "" ) for generating digits "" +', 'if ( chars = = null & & ( numbers & & end < = zero digit ascii', 'if ( chars = = null ) {', '| | letters & & end < = first letter ascii ) ) {', '}', 'throw new IllegalArgumentException ( ""Parameter end ( "" + end + "" ) must be greater then ( "" + zero digit ascii + "" ) for generating digits "" +', 'if ( numbers & & end < = zero digit ascii', '""or greater then ( "" + first letter ascii + "" ) for generating letters . "" ) ;', '| | letters & & end < = first letter ascii ) {', '""or greater then ( "" + first letter ascii + "" ) for generating letters . "" ) ;']","['ThreadingBehavior threading ( ) default ThreadingBehavior . UNSAFE ;', 'import java . lang . annotation . Documented ;', 'public @ interface Contract {', 'import java . lang . annotation . Target ;', '}', 'import java . lang . annotation . ElementType ;', 'import java . lang . annotation . Retention ;', 'import java . lang . annotation . RetentionPolicy ;', '@ Target ( ElementType . TYPE )', '@ Documented']","['@ Test', 'AnnotationTestUtils . testMethodAnnotationNotRetainedAtRuntime ( ContractTestFixture . class , Contract . class ) ;', '}', 'public void testClassAnnotationInClassFile ( ) throws Exception {', 'import org . junit . Test ;', 'AnnotationTestUtils . testClassAnnotationInClassFile (', 'public class ContractTest {', 'package org . apache . commons . lang3 . concurrent . annotation ;', '""Lorg / apache / commons / lang3 / concurrent / annotation / Contract ; "" ) ;', 'public void testMethodAnnotationNotRetainedAtRuntime ( ) {']","['ArrayUtils . toPrimitive ( new Double [ ] { Double . valueOf ( Double . MIN VALUE ) ,', 'ArrayUtils . toPrimitive ( new Double [ ] { Double . valueOf ( Double . MIN VALUE ) ,', 'try {', 'try {', '@ Test', '@ Test', 'final Long [ ] b = null ;', 'final Long [ ] b = null ;', '}', '}']","['public static void shuffle ( short [ ] array , Random random ) {', 'import java . util . Random ;', 'public static void shuffle ( boolean [ ] array , Random random ) {', '}', 'public static void shuffle ( long [ ] array , Random random ) {', 'public static void shuffle ( byte [ ] array , Random random ) {', 'public static void shuffle ( boolean [ ] array ) {', 'public static void shuffle ( float [ ] array ) {', 'public static void shuffle ( float [ ] array , Random random ) {', 'public static void shuffle ( long [ ] array ) {']","['if ( className = = null ) {', 'Validate . notNull ( className , ""className must not be null . "" ) ;', '} else if ( className . endsWith ( "" [ ] "" ) ) {', 'if ( className . endsWith ( "" [ ] "" ) ) {', 'throw new NullPointerException ( ""className must not be null . "" ) ;', 'if ( object = = null ) {', 'Validate . notNull ( object , ""Cannot get the toString of a null identity"" ) ;', 'throw new NullPointerException ( ""Cannot get the toString of a null identity"" ) ;', '}', 'throw new NullPointerException ( ""Element is null"" ) ;']","['if ( range = = null ) {', 'Validate . isTrue ( range ! = null , ""The Range must not be null"" ) ;', '}', 'throw new IllegalArgumentException ( ""The Range must not be null"" ) ;', 'throw new IllegalArgumentException ( ""The Character must not be null"" ) ;', 'Validate . isTrue ( ch ! = null , ""The Character must not be null"" ) ;', '}', 'Validate . isTrue ( StringUtils . isNotEmpty ( str ) , ""The String must not be empty"" ) ;', 'throw new IllegalArgumentException ( ""The String must not be empty"" ) ;', 'Validate . isTrue ( ch ! = null , ""The character must not be null"" ) ;']","['if ( !excludeNullValues | | fieldValue ! = null ) {', 'return new ReflectionToStringBuilder ( object , style , null , reflectUpToClass , outputTransients , outputStatics , excludeNullValues )', 'return new ReflectionToStringBuilder ( object , style , null , reflectUpToClass , outputTransients , outputStatics , excludeNulls )', 'if ( !excludeNullValues | | fieldValue ! = null ) {', 'final boolean outputStatics , boolean excludeNulls , final Class < ? super T > reflectUpToClass ) {', 'final boolean outputStatics , boolean excludeNullValues , final Class < ? super T > reflectUpToClass ) {', 'class TestFixture {', 'public TestFixture ( Integer a , String b ) {', 'import static org . junit . Assert . * ;', 'import static org . junit . Assert . assertTrue ;']","['final List < Class < ? > > classes = new ArrayList < > ( ) ;', '} else if ( superClassIndex < interfaceIndex ) {', 'if ( annotation = = null & & searchSupers ) {', 'if ( annotation = = null & & searchSupers ) {', 'int ifi = 0 ;', '} else if ( superClassIndex > = allSuperclasses . size ( ) ) {', '} else if ( sci < ifi ) {', '} else if ( interfaceIndex < superClassIndex ) {', 'while ( ifi < allInterfaces . size ( ) | |', 'if ( !ignoreAccess & & !MemberUtils . isAccessible ( method ) ) {']","['classes . add ( cls ) ;', 'classes . add ( 0 , cls ) ;']","['Assert . assertTrue ( toString . indexOf ( NOT SECRET FIELD ) > ArrayUtils . INDEX NOT FOUND ) ;', 'Assert . assertTrue ( toString . contains ( NOT SECRET FIELD ) ) ;', 'Assert . assertTrue ( toString . indexOf ( NOT SECRET VALUE ) > ArrayUtils . INDEX NOT FOUND ) ;', 'Assert . assertTrue ( toString . contains ( NOT SECRET VALUE ) ) ;', 'assertTrue ( message . indexOf ( ""test1"" ) > = 0 ) ;', 'assertTrue ( !contextMessage . contains ( TEST MESSAGE ) ) ;', 'assertTrue ( message . indexOf ( ""5"" ) > = 0 ) ;', 'assertTrue ( message . contains ( ""test Poorly written obj"" ) ) ;', 'assertTrue ( message . indexOf ( ""test Poorly written obj"" ) > = 0 ) ;', 'assertTrue ( message . contains ( ""test1"" ) ) ;']","['assertTrue ( !bf single . isSet ( 0 ) ) ;', 'assertFalse ( bf zero . isSet ( j ) ) ;', 'assertTrue ( !bf multi . isAllSet ( j ) ) ;', 'assertFalse ( bf single . isSet ( 0 ) ) ;', 'assertTrue ( !bf single . isAllSet ( 0 ) ) ;', 'assertFalse ( bf multi . isSet ( 0 ) ) ;', 'assertTrue ( !bf zero . isSet ( 0 ) ) ;', 'assertFalse ( bf multi . isAllSet ( j ) ) ;', 'assertTrue ( !bf multi . isSet ( 0 ) ) ;', 'assertFalse ( bf zero . isSet ( 0 ) ) ;']","['int found = 0 ;', 'int found = 0 ;', 'int [ ] output = new int [ 0 ] ;', 'import org . openjdk . jmh . annotations . OutputTimeUnit ;', 'for ( int i = 0 ; i < count ; i + + ) {', 'public int [ ] timeBitSetRemoveAll ( ) {', '@ Test', 'final HashSet < Integer > toRemove = new HashSet < Integer > ( ) ;', 'private long timeBitSetRemoveAll ( final int [ ] array , final BitSet toRemove ) {', 'final BitSet toRemove = new BitSet ( ) ;']","['final HashSet < Integer > toRemove = new HashSet < Integer > ( ) ;', 'final HashSet < Integer > toRemove = new HashSet < > ( ) ;']","['String objectToAppend1 = """" ;', '@ Test', 'assertEquals ( baseStr + "" [ { 1 , 2 , - 3 , 4 } ] "" , new ToStringBuilder ( base ) . append ( null , array ) . toString ( ) ) ;', 'assertEquals ( baseStr + "" [ flags = { true , false , false } ] "" ,', 'Object objectToAppend3 = new Object ( ) ;', 'public void testAppendByteArrayWithFieldName ( ) {', 'new ToStringBuilder ( base ) . append ( ""flags"" , ( boolean [ ] ) null ) . toString ( ) ) ;', '}', 'boolean [ ] array = new boolean [ ] { true , false , false } ;', 'assertEquals ( baseStr + "" [ chars = { A , 2 , , D } ] "" , new ToStringBuilder ( base ) . append ( ""chars"" , array ) . toString ( ) ) ;']","['public void testConstructToStringBuilder ( ) {', '@ Test', 'assertNotNull ( stringBuilder2 . getStringBuffer ( ) ) ;', 'ToStringBuilder stringBuilder2 = new ToStringBuilder ( base , ToStringStyle . DEFAULT STYLE , new StringBuffer ( 1024 ) ) ;', '}', 'ToStringBuilder stringBuilder1 = new ToStringBuilder ( base , null , null ) ;', 'assertEquals ( ToStringStyle . DEFAULT STYLE , stringBuilder2 . getStyle ( ) ) ;', 'assertNotNull ( stringBuilder1 . toString ( ) ) ;', 'assertNotNull ( stringBuilder2 . toString ( ) ) ;', 'assertNotNull ( stringBuilder1 . getStringBuffer ( ) ) ;']","['return NULL ;', 'private static final ImmutablePair NULL = ImmutablePair . of ( null , null ) ;', 'public static < L , R > ImmutablePair < L , R > nullPair ( ) {', '}', '@ SuppressWarnings ( ""rawtypes"" )', 'import static org . junit . Assert . assertSame ;', '@ Test', '}', 'assertSame ( ImmutablePair . nullPair ( ) , ImmutablePair . nullPair ( ) ) ;', 'public void testNullPairRight ( ) {']","['@ SuppressWarnings ( ""rawtypes"" )', '@ SuppressWarnings ( ""unchecked"" )']","['return NULL ;', 'private static final ImmutableTriple NULL = ImmutableTriple . of ( null , null , null ) ;', '@ SuppressWarnings ( ""unchecked"" )', '}', '@ SuppressWarnings ( ""rawtypes"" )', 'public static < L , M , R > ImmutableTriple < L , M , R > nullTriple ( ) {', 'public void testNullTripleTyped ( ) {', 'import static org . junit . Assert . assertSame ;', 'public void testNullTripleSame ( ) {', '@ Test']","['super . appendDetail ( buffer , fieldName , array ) ;', 'super . reflectionAppendArrayDetail ( buffer , fieldName , array ) ;', 'import static org . junit . Assert . assertEquals ;', 'assertEquals ( exp , toString ( stringArray ) ) ;', '+ "" } "" + BR', '+ "" ] "" ;', '@ Test', 'import static org . junit . Assert . * ;', '+ "" 2"" + BR', '}']","['import static org . junit . Assert . * ;', 'import static org . junit . Assert . assertEquals ;']","['public static final String UTF 16BE = ""UTF - 16BE"" ;', 'public static final String UTF 16 = StandardCharsets . UTF 16 . name ( ) ;', 'public static final String ISO 8859 1 = ""ISO - 8859 - 1"" ;', 'public static final String UTF 16BE = StandardCharsets . UTF 16BE . name ( ) ;', 'public static final String UTF 16 = ""UTF - 16"" ;', '@ Deprecated', 'public static final String US ASCII = ""US - ASCII"" ;', 'public static final String ISO 8859 1 = StandardCharsets . ISO 8859 1 . name ( ) ;', 'public static final String UTF 16LE = ""UTF - 16LE"" ;', 'public static final String UTF 8 = StandardCharsets . UTF 8 . name ( ) ;']","['@ Deprecated', '@ Deprecated', '@ Deprecated', '@ Deprecated']","['continue ;', 'continue ;', 'if ( chars . contains ( ch ) ) {', 'if ( chars . contains ( ch ) ) {', 'if ( notInChars = = null | | ch ! = notInChars ) {', 'if ( notInChars = = null | | ch ! = notInChars ) {', 'inChars = ch ;', 'inChars = ch ;', 'notInChars = ch ;', 'notInChars = ch ;']",['@ Deprecated'],"['BIT 32 , BIT 64 , UNKNOWN', 'X86 ,', 'X86 , IA 64 , PPC , UNKNOWN', 'BIT 32 ,', 'PPC ,', 'BIT 64 ,', 'UNKNOWN', 'IA 64 ,']","['final List < Object > list = new ArrayList < > ( ) ;', 'final List < Object > list = new ArrayList < > ( 10 ) ;']","['}', '}', '}', '}', '}', '}']","['private final static class AlwaysTruePredicate implements ThreadPredicate , ThreadGroupPredicate {', 'private static final class AlwaysTruePredicate implements ThreadPredicate , ThreadGroupPredicate {', 'protected synchronized final ExecutorService getActiveExecutor ( ) {', 'protected final synchronized ExecutorService getActiveExecutor ( ) {', 'private final static long INITIAL COUNT = 0L ;', 'private static final long INITIAL COUNT = 0L ;', 'final private String formatField ;', 'private final String formatField ;', 'private static abstract class PatternStrategy extends Strategy {', 'private abstract static class Strategy {']","['private static final void init ( ) {', 'private static void addProcessors ( Processor processor , String . . . keys ) throws IllegalStateException {', 'private static final void init IA64 32Bit ( ) {', 'private static void init PPC 32Bit ( ) {', 'private static final void addProcessor ( String key , Processor processor ) throws IllegalStateException {', 'private static void init X86 64Bit ( ) {', 'private static final void init X86 64Bit ( ) {', 'private static void init IA64 64Bit ( ) {', 'private static final void init PPC 32Bit ( ) {', 'private static void init PPC 64Bit ( ) {']","['public static int CONST ( final int v ) { return v ; }', 'return v ;', 'public static long CONST ( final long v ) { return v ; }', 'public static float CONST ( final float v ) {', 'public static byte CONST ( final byte v ) { return v ; }', 'public static byte CONST ( final byte v ) {', 'public static boolean CONST ( final boolean v ) { return v ; }', '}', 'public static < T > T CONST ( final T v ) { return v ; }', 'public static < T > T CONST ( final T v ) {']","['final List < Object > list = new ArrayList < > ( 10 ) ;', 'final List < Object > list = new ArrayList < > ( arraylistInitialCapacity ) ;', 'private final Integer arraylistInitialCapacity = Integer . valueOf ( 10 ) ;']","['final List < Object > list = new ArrayList < > ( arraylistInitialCapacity ) ;', 'final List < Object > list = new ArrayList < > ( ARRAYLIST INITIAL CAPACITY ) ;', 'private final Integer arraylistInitialCapacity = Integer . valueOf ( 10 ) ;', 'private static final int ARRAYLIST INITIAL CAPACITY = 10 ;']","[""public static final char NUL = ' \\ 0' ;"", ""if ( isEmpty ( str ) | | wrapChar = = ' \\ 0' ) {"", 'if ( isEmpty ( str ) | | wrapChar = = CharUtils . NUL ) {', ""if ( isEmpty ( str ) | | wrapWith = = ' \\ 0' ) {"", 'if ( isEmpty ( str ) | | wrapWith = = CharUtils . NUL ) {', ""buffer [ i ] = ' \\ 0' ;"", 'import org . apache . commons . lang3 . CharUtils ;', 'buffer [ i ] = CharUtils . NUL ;', 'assertEquals ( """" , StringUtils . wrap ( """" , \' \\ 0\' ) ) ;', 'assertEquals ( """" , StringUtils . wrap ( """" , CharUtils . NUL ) ) ;']","['public static final String UTF 16BE = StandardCharsets . UTF 16BE . name ( ) ;', 'public static final String UTF 16BE = ""UTF - 16BE"" ;', 'public static final String UTF 16 = StandardCharsets . UTF 16 . name ( ) ;', 'public static final String ISO 8859 1 = ""ISO - 8859 - 1"" ;', 'public static final String ISO 8859 1 = StandardCharsets . ISO 8859 1 . name ( ) ;', 'public static final String UTF 16 = ""UTF - 16"" ;', 'public static final String UTF 8 = StandardCharsets . UTF 8 . name ( ) ;', 'public static final String US ASCII = ""US - ASCII"" ;', 'import java . nio . charset . StandardCharsets ;', 'public static final String UTF 16LE = ""UTF - 16LE"" ;']","['assertEquals ( StandardCharsets . UTF 16LE . name ( ) , CharEncoding . UTF 16LE ) ;', 'assertEquals ( StandardCharsets . US ASCII . name ( ) , CharEncoding . US ASCII ) ;', 'assertEquals ( StandardCharsets . UTF 16BE . name ( ) , CharEncoding . UTF 16BE ) ;', '@ Test', 'assertEquals ( StandardCharsets . UTF 8 . name ( ) , CharEncoding . UTF 8 ) ;', '}', 'import static org . junit . Assert . assertEquals ;', 'public void testStandardCharsetsEquality ( ) throws Exception {', 'assertEquals ( StandardCharsets . ISO 8859 1 . name ( ) , CharEncoding . ISO 8859 1 ) ;', 'import java . nio . charset . StandardCharsets ;']","['@ Deprecated', '@ Deprecated']","['this . append ( fieldName , fieldValue ) ;', 'this . append ( fieldName , fieldValue , !field . isAnnotationPresent ( ToStringSummary . class ) ) ;', 'public @ interface ToStringSummary {', 'import java . lang . annotation . Target ;', '}', '@ Retention ( RetentionPolicy . RUNTIME )', 'import java . lang . annotation . ElementType ;', 'import java . lang . annotation . Retention ;', 'import java . lang . annotation . RetentionPolicy ;', 'package org . apache . commons . lang3 . builder ;']","['final Pair < IDKey , IDKey > swappedPair = Pair . of ( pair . getLeft ( ) , pair . getRight ( ) ) ;', 'final Pair < IDKey , IDKey > swappedPair = Pair . of ( pair . getRight ( ) , pair . getLeft ( ) ) ;']","['return ClassUtils . isAssignable ( parameterTypes , methodParameterTypes , true ) ;', 'return false ;', 'return true ;', '}', 'if ( ClassUtils . isAssignable ( parameterTypes , methodParameterTypes , true ) ) {', 'ConstructorUtils . invokeConstructor ( TestBean . class , new SubClass ( ) , new String [ ] { ""a"" , ""b"" } )', 'new Class < ? > [ ] { SubClass . class , String [ ] . class } ,', 'new Class < ? > [ ] { BaseClass . class , String [ ] . class } ) ;', 'toString = "" ( BaseClass , String . . . ) "" ;', 'varArgs = s ;']","['try ( final ClassLoaderAwareObjectInputStream in = new ClassLoaderAwareObjectInputStream ( bais ,', 'try ( ClassLoaderAwareObjectInputStream in = new ClassLoaderAwareObjectInputStream ( bais ,', 'O compute ( final I arg ) throws InterruptedException ;', 'O compute ( I arg ) throws InterruptedException ;']","['assertTrue ( EqualsBuilder . isRegistered ( secondObject , firstObject ) ) ;', 'registerMethod . invoke ( null , firstObject , secondObject ) ;', 'assertTrue ( EqualsBuilder . isRegistered ( firstObject , secondObject ) ) ;', 'import org . apache . commons . lang3 . reflect . MethodUtils ;', 'public void testIsRegistered ( ) throws Exception {', 'Object firstObject = new Object ( ) ;', '@ Test', 'import java . lang . reflect . Method ;', 'registerMethod . setAccessible ( true ) ;', '}']","['assertTrue ( EqualsBuilder . isRegistered ( secondObject , firstObject ) ) ;', 'unregisterMethod . setAccessible ( true ) ;', 'registerMethod . invoke ( null , firstObject , secondObject ) ;', 'assertTrue ( EqualsBuilder . isRegistered ( secondObject , firstObject ) ) ;', 'assertTrue ( EqualsBuilder . isRegistered ( firstObject , secondObject ) ) ;', 'registerMethod . invoke ( null , firstObject , secondObject ) ;', 'registerMethod . setAccessible ( true ) ;', 'assertTrue ( EqualsBuilder . isRegistered ( firstObject , secondObject ) ) ;', 'Method registerMethod = MethodUtils . getMatchingMethod ( EqualsBuilder . class , ""register"" , Object . class , Object . class ) ;', 'Method unregisterMethod = MethodUtils . getMatchingMethod ( EqualsBuilder . class , ""unregister"" , Object . class , Object . class ) ;']","['Enum . valueOf ( enumClass , enumName ) ;', 'return getEnum ( enumClass , enumName ) ! = null ;', 'return true ;', 'public static < E extends Enum < E > > boolean isValidEnumIgnoreCase ( final Class < E > enumClass , final String enumName ) {', 'try {', 'return null ;', '}', 'return each ;', 'if ( enumName = = null ) {', '}']","['if ( hasNext = = false ) {', 'if ( !hasNext ) {', 'if ( obj instanceof CharRange = = false ) {', 'if ( ! ( obj instanceof CharRange ) ) {']","['appendAllTo ( buf . append ( \' < \' ) , "" , "" , typeArguments ) . append ( \' > \' ) ;', 'if ( argumentsFiltered . length > 0 ) {', 'private static StringBuilder appendAllTo ( final StringBuilder buf , final String sep , final Type . . . types ) {', '}', 'final Type [ ] typeArguments = p . getActualTypeArguments ( ) ;', 'appendAllTo ( buf . append ( \' < \' ) , "" , "" , argumentsFiltered ) . append ( \' > \' ) ;', 'private static < T > String toString ( T object ) {', '} else {', 'if ( recursiveTypeIndexes . length > 0 ) {', 'int [ ] indexesToRemove = new int [ ] { } ;']","['if ( i < 128 ) {', 'assertEquals ( i < 128 , CharUtils . isAscii ( ( char ) i ) ) ;', '}', '} else {', 'assertFalse ( CharUtils . isAscii ( ( char ) i ) ) ;', 'assertTrue ( CharUtils . isAscii ( ( char ) i ) ) ;']","['for ( int i = 0 ; i < 128 ; i + + ) {', 'for ( int i = 0 ; i < 255 ; i + + ) {']","['fail ( ""An IllegalArgumentException should have been thrown"" ) ;', 'import static org . junit . Assert . fail ;']","['cal . set ( 2007 , Calendar . JANUARY , 23 , 18 , 33 , 05 ) ;', 'cal . set ( 2007 , Calendar . JANUARY , 23 , 18 , 33 , 5 ) ;']","['final TzInfo tzInfo = tzNames . get ( value . toLowerCase ( locale ) ) ;', '} else if ( timeZone . regionMatches ( true , 0 , ""GMT"" , 0 , 3 ) ) {', '} else if ( value . regionMatches ( true , 0 , ""GMT"" , 0 , 3 ) ) {', 'void setCalendar ( final FastDateParser parser , final Calendar cal , final String timeZone ) {', ""if ( value . charAt ( 0 ) = = ' + ' | | value . charAt ( 0 ) = = ' - ' ) {"", 'final TimeZone tz = TimeZone . getTimeZone ( timeZone . toUpperCase ( Locale . ROOT ) ) ;', 'void setCalendar ( final FastDateParser parser , final Calendar cal , final String value ) {', 'final TzInfo tzInfo = tzNames . get ( timeZone . toLowerCase ( locale ) ) ;', 'final TimeZone tz = TimeZone . getTimeZone ( value . toUpperCase ( ) ) ;', 'final TimeZone tz = TimeZone . getTimeZone ( ""GMT"" + timeZone ) ;']","['final TimeZone tz = TimeZone . getTimeZone ( ""GMT"" + timeZone ) ;', 'final TimeZone tz = TimeZone . getTimeZone ( TimeZones . GMT ID + timeZone ) ;', '} else if ( timeZone . regionMatches ( true , 0 , ""GMT"" , 0 , 3 ) ) {', 'if ( tzId . equalsIgnoreCase ( TimeZones . GMT ID ) ) {', 'if ( tzId . equalsIgnoreCase ( ""GMT"" ) ) {', '} else if ( timeZone . regionMatches ( true , 0 , TimeZones . GMT ID , 0 , 3 ) ) {', 'package org . apache . commons . lang3 . time ;', 'public class TimeZones {', '}', 'public static final String GMT ID = ""GMT"" ;']","['private static final String GMT OPTION = ""GMT [ + - ] \\ \\ d { 1 , 2 } : \\ \\ d { 2 } "" ;', 'private static final String GMT OPTION = TimeZones . GMT ID + "" [ + - ] \\ \\ d { 1 , 2 } : \\ \\ d { 2 } "" ;']","['cal . setTimeZone ( TimeZone . getTimeZone ( ""GMT"" + value ) ) ;', 'cal . setTimeZone ( TimeZone . getTimeZone ( TimeZones . GMT ID + value ) ) ;']","['cal . setTimeZone ( TimeZone . getTimeZone ( ""UTC"" ) ) ;', 'cal . setTimeZone ( TimeZone . getTimeZone ( TimeZones . GMT ID ) ) ;']","['return toAppendTo . append ( ( ( String ) obj ) . toUpperCase ( ) ) ;', 'return toAppendTo . append ( ( ( String ) obj ) . toUpperCase ( Locale . ROOT ) ) ;', 'expected . append ( args [ 0 ] . toString ( ) . toUpperCase ( ) ) ;', 'expected . append ( args [ 0 ] . toString ( ) . toUpperCase ( Locale . ROOT ) ) ;']","['assertFalse ( StringUtils . equalsAny ( FOO , FOO . toUpperCase ( ) ) ) ;', 'assertTrue ( StringUtils . equalsAnyIgnoreCase ( FOO , BAR , null , """" , FOO . toUpperCase ( Locale . ROOT ) , BAR ) ) ;', 'assertTrue ( StringUtils . equalsAnyIgnoreCase ( FOO , BAR , null , """" , FOO . toUpperCase ( ) , BAR ) ) ;', 'assertFalse ( StringUtils . equalsAny ( FOO , FOO . toUpperCase ( Locale . ROOT ) ) ) ;', 'assertTrue ( StringUtils . equalsAnyIgnoreCase ( FOO , FOO . toUpperCase ( ) ) ) ;', 'import java . util . Locale ;', 'assertTrue ( StringUtils . equalsAnyIgnoreCase ( FOO , FOO . toUpperCase ( Locale . ROOT ) ) ) ;']","['return toAppendTo . append ( ( ( String ) obj ) . toLowerCase ( ) ) ;', 'return toAppendTo . append ( ( ( String ) obj ) . toLowerCase ( Locale . ROOT ) ) ;']","['private static final TimeZone UTC TIME ZONE = TimeZone . getTimeZone ( ""GMT"" ) ;', 'private static final TimeZone UTC TIME ZONE = FastTimeZone . getGmtTimeZone ( ) ;', 'cal . setTimeZone ( TimeZone . getTimeZone ( TimeZones . GMT ID + value ) ) ;', 'TimeZone tz = FastTimeZone . getGmtTimeZone ( timeZone ) ;', 'cal . setTimeZone ( TimeZone . getTimeZone ( TimeZones . GMT ID ) ) ;', 'cal . setTimeZone ( FastTimeZone . getGmtTimeZone ( value ) ) ;', 'final TimeZone tz = TimeZone . getTimeZone ( timeZone . toUpperCase ( Locale . ROOT ) ) ;', 'if ( tz ! = null ) {', 'if ( value . equals ( ""Z"" ) ) {', 'final TimeZone tz = TimeZone . getTimeZone ( TimeZones . GMT ID + timeZone ) ;']","['} else {', 'return zoneId = = ( ( GmtTimeZone ) other ) . zoneId ;', 'return zoneId = = ( ( GmtTimeZone ) other ) . zoneId ;']","['TimeZone tz = getGmtTimeZone ( id ) ;', 'TimeZone tz = getGmtTimeZone ( id ) ;', 'public static TimeZone getTimeZone ( String id ) {', 'public static TimeZone getTimeZone ( String id ) {', 'return TimeZone . getTimeZone ( id ) ;', 'return TimeZone . getTimeZone ( id ) ;', 'private FastTimeZone ( ) {', 'if ( tz ! = null ) {', 'if ( tz ! = null ) {', 'private FastTimeZone ( ) {']","['private boolean booleanField = true ;', 'private final long longField = 1L ;', 'private long [ ] longArrayField = { 1L } ;', 'private final boolean [ ] booleanArrayField = { true } ;', 'private float floatField = 1 . 0f ;', 'private final byte [ ] byteArrayField = { ( byte ) 0xFF } ;', 'private byte byteField = ( byte ) 0xFF ;', 'private final double [ ] doubleArrayField = { 1 . 0 } ;', 'private ToStringStyle style = SHORT STYLE ;', 'private final short shortField = 1 ;']","['final Field [ ] declaredFields = currentClass . getDeclaredFields ( ) ;', 'if ( !declaredField . isSynthetic ( ) ) {', 'Collections . addAll ( allFields , declaredFields ) ;', '}', 'allFields . add ( declaredField ) ;', 'for ( final Field declaredField : currentClass . getDeclaredFields ( ) ) {']","['if ( !declaredField . isSynthetic ( ) ) {', 'import java . util . Collections ;', '}', 'final Field [ ] declaredFields = currentClass . getDeclaredFields ( ) ;', 'allFields . add ( declaredField ) ;', 'Collections . addAll ( allFields , declaredFields ) ;', 'for ( final Field declaredField : currentClass . getDeclaredFields ( ) ) {']","['buf . append ( text . substring ( start , end ) ) . append ( replacement ) ;', 'buf . append ( text , start , end ) . append ( replacement ) ;', 'buf . append ( text . substring ( start ) ) ;', 'buf . append ( text , start , text . length ( ) ) ;']","['buffer . append ( data ) ;', 'buffer . append ( toString , pos1 , pos2 ) ;', 'final String data = toString . substring ( pos1 , pos2 ) ;', 'wrappedLine . append ( str . substring ( offset ) ) ;', 'wrappedLine . append ( str , offset , spaceToWrapAt ) ;', 'wrappedLine . append ( str . substring ( offset , wrapLength + offset ) ) ;', 'wrappedLine . append ( str , offset , str . length ( ) ) ;', 'wrappedLine . append ( str . substring ( offset , spaceToWrapAt ) ) ;', 'wrappedLine . append ( str , offset , wrapLength + offset ) ;']","['assertEquals ( null , array ) ;', 'assertNull ( ArrayUtils . toPrimitive ( b , Character . MIN VALUE ) ) ;', 'assertEquals ( null , ArrayUtils . toPrimitive ( l , Integer . MIN VALUE ) ) ;', 'assertNull ( array ) ;', 'assertEquals ( null , ArrayUtils . toPrimitive ( b , Byte . MIN VALUE ) ) ;', 'assertNull ( ArrayUtils . toPrimitive ( iArray , Integer . MIN VALUE ) ) ;', 'assertEquals ( null , ArrayUtils . toPrimitive ( b , Character . MIN VALUE ) ) ;', 'assertNull ( ArrayUtils . clone ( ( short [ ] ) null ) ) ;', 'assertEquals ( null , ArrayUtils . toPrimitive ( l , Float . MIN VALUE ) ) ;', 'assertNull ( ArrayUtils . toPrimitive ( null , false ) ) ;']","['assertEquals ( true , r2 . isNaturalOrdering ( ) ) ;', 'assertTrue ( r1 . isNaturalOrdering ( ) ) ;', 'assertEquals ( true , r1 . isNaturalOrdering ( ) ) ;', 'assertTrue ( r2 . isNaturalOrdering ( ) ) ;', 'assertEquals ( false , subject . translate ( 0xe000 , writer ) ) ;', 'assertTrue ( subject . translate ( 0xd800 , writer ) ) ;', 'assertEquals ( true , subject . translate ( 0xd800 , writer ) ) ;', 'assertFalse ( subject . translate ( 0xd7ff , writer ) ) ;', 'assertEquals ( true , subject . translate ( 0xdfff , writer ) ) ;', 'import static org . junit . Assert . assertTrue ;']","['Assert . assertArrayEquals ( new double [ ] { 2 . 718 } , ArrayUtils . toPrimitive ( new Double [ ] { 2 . 718 } ) , 0 . 1 ) ;', 'assertEquals ( 5 , ArrayUtils . removeAllOccurences ( array1 , true ) . length ) ;', 'Assert . assertArrayEquals ( new int [ ] { } , ArrayUtils . toPrimitive ( new Integer [ ] { } ) ) ;', 'assertNull ( ArrayUtils . toPrimitive ( ( Object [ ] ) null ) ) ;', 'Assert . assertTrue ( ""Element "" + element + "" not found"" , ArrayUtils . contains ( array1 , element ) ) ;', 'assertArrayEquals ( new short [ ] { 2 } , ArrayUtils . toPrimitive ( new Short [ ] { 2 } ) ) ;', 'Assert . assertArrayEquals ( new long [ ] { 2 , 3 } , ArrayUtils . toPrimitive ( new Long [ ] { 2L , 3L } ) ) ;', 'assertArrayEquals ( new float [ ] { 3 . 14f } , ArrayUtils . toPrimitive ( new Float [ ] { 3 . 14f } ) , 0 . 1f ) ;', 'import org . junit . Assert ;', 'assertArrayEquals ( new double [ ] { 2 . 718 } , ArrayUtils . toPrimitive ( new Double [ ] { 2 . 718 } ) , 0 . 1 ) ;']","['private static void addProcessors ( Processor processor , String . . . keys ) throws IllegalStateException {', 'final Processor processor = new Processor ( Processor . Arch . BIT 64 , Processor . Type . X86 ) ;', 'for ( String key : keys ) {', 'private static void addProcessor ( final String key , final Processor processor ) throws IllegalStateException {', 'Processor processor = new Processor ( Processor . Arch . BIT 32 , Processor . Type . IA 64 ) ;', 'final Processor processor = new Processor ( Processor . Arch . BIT 32 , Processor . Type . X86 ) ;', 'String msg = ""Key "" + key + "" already exists in processor map"" ;', 'final Processor processor = new Processor ( Processor . Arch . BIT 32 , Processor . Type . IA 64 ) ;', 'public static Processor getProcessor ( String value ) {', 'private static void addProcessors ( final Processor processor , final String . . . keys ) throws IllegalStateException {']","['public static String getClassSimpleName ( final Object object ) {', 'return object = = null ? null : object . getClass ( ) . getName ( ) ;', '}', 'public static String getClassName ( final Object object ) {', 'public static String getClassCanonicalName ( final Object object ) {', 'return object = = null ? null : object . getClass ( ) . getSimpleName ( ) ;', 'return object = = null ? null : object . getClass ( ) . getCanonicalName ( ) ;', 'Assert . assertNull ( ObjectUtils . getClassSimpleName ( null ) ) ;', 'ObjectUtils . getClassCanonicalName ( new CloneableString ( ""test"" ) ) ) ;', 'Assert . assertEquals ( ""String"" , ObjectUtils . getClassSimpleName ( new String ( ) ) ) ;']","['} catch ( final IllegalArgumentException e ) {', 'import org . junit . Rule ;', 'fail ( ""Add method should have thrown an exception , so method should fail . "" ) ;', 'expectedException . expect ( IllegalArgumentException . class ) ;', 'try {', '} ) ;', '} ) ;', 'expectedException . expectMessage ( ""Class "" + src . getClass ( ) . getName ( ) + "" does not have a public add"" + VetoableChangeListener . class . getSimpleName ( ) + "" method which takes a parameter of type "" + VetoableChangeListener . class . getName ( ) + "" . "" ) ;', 'public void propertyChange ( final PropertyChangeEvent e ) {', 'public void propertyChange ( final PropertyChangeEvent e ) {']","[""assertFalse ( CharUtils . isAsciiAlpha ( ' \\ n' ) ) ;"", ""assertFalse ( CharUtils . isAsciiAlpha ( ' \\ n' ) ) ;"", ""if ( i > = 'a' & & i < = 'z' ) {"", ""if ( i > = 'a' & & i < = 'z' ) {"", ""assertTrue ( CharUtils . isAsciiAlphanumeric ( 'A' ) ) ;"", ""assertTrue ( CharUtils . isAsciiAlphanumeric ( 'A' ) ) ;"", 'assertFalse ( CharUtils . isAsciiAlpha ( ( char ) i ) ) ;', 'assertFalse ( CharUtils . isAsciiAlpha ( ( char ) i ) ) ;', ""if ( ( i > = 'A' & & i < = 'Z' ) | | ( i > = 'a' & & i < = 'z' ) | | ( i > = '0' & & i < = '9' ) ) {"", ""if ( ( i > = 'A' & & i < = 'Z' ) | | ( i > = 'a' & & i < = 'z' ) | | ( i > = '0' & & i < = '9' ) ) {""]","['for ( final Class < ? > primitive : primitives ) {', 'for ( final Class < ? > primitive : primitives ) {', 'assertFalse ( iter . hasNext ( ) ) ;', 'assertFalse ( iter . hasNext ( ) ) ;', 'assertEquals ( ""String [ ] "" , ClassUtils . getShortClassName ( String [ ] . class ) ) ;', 'assertEquals ( ""String [ ] "" , ClassUtils . getShortClassName ( String [ ] . class ) ) ;', 'Float . class , ClassUtils . primitiveToWrapper ( Float . TYPE ) ) ;', 'assertEquals ( java . util . Map . Entry [ ] . class , ClassUtils . getClass ( ""java . util . Map . Entry [ ] "" ) ) ;', 'assertEquals ( java . util . Map . Entry [ ] . class , ClassUtils . getClass ( ""java . util . Map . Entry [ ] "" ) ) ;', 'assertEquals ( ""ClassUtils [ ] "" , ClassUtils . getShortCanonicalName ( new ClassUtils [ 0 ] , "" < null > "" ) ) ;']","['assertEquals ( ""ClassUtilsTest . 2"" , ClassUtils . getShortClassName ( new Object ( ) { } . getClass ( ) ) ) ;', 'assertEquals ( """" , ClassUtils . getSimpleName ( new Object ( ) {', 'assertEquals ( ""ClassUtilsTest . 7"" , ClassUtils . getShortCanonicalName ( new Object ( ) { } . getClass ( ) ) ) ;', 'assertEquals ( ""ClassUtilsTest . 2"" , ClassUtils . getShortClassName ( new Object ( ) {', 'private class DeeplyNested { }', '} , "" < null > "" ) ) ;', 'List < Object > olist = ( List < Object > ) ( List < ? > ) list ;', 'assertEquals ( ""org . apache . commons . lang3"" , ClassUtils . getPackageCanonicalName ( new Object ( ) {', 'assertEquals ( ""ClassUtilsTest . 1"" , ClassUtils . getShortClassName ( new Object ( ) { } , "" < null > "" ) ) ;', 'assertEquals ( ""ClassUtilsTest . 1"" , ClassUtils . getShortClassName ( new Object ( ) {']","['return valueIfNull ;', '}', 'return getSimpleName ( object . getClass ( ) ) ;', 'return cls = = null ? valueIfNull : cls . getSimpleName ( ) ;', 'if ( cls = = null ) {', 'public static String getCanonicalName ( final Class < ? > cls ) {', '}', 'public static String getName ( final Object object ) {', 'return StringUtils . EMPTY ;', 'public static String getCanonicalName ( final Object object ) {']","['return cls = = null ? valueIfNull : cls . getClass ( ) . getCanonicalName ( ) ;', 'return valueIfNull ;', 'return object = = null ? valueIfNull : object . getClass ( ) . getCanonicalName ( ) ;', 'if ( object = = null ) {', 'if ( cls = = null ) {', '}', 'final String canonicalName = cls . getCanonicalName ( ) ;', 'final String canonicalName = object . getClass ( ) . getCanonicalName ( ) ;', 'return canonicalName = = null ? valueIfNull : canonicalName ;', 'assertEquals ( ""org . apache . commons . lang3 . ClassUtils"" , ClassUtils . getName ( ClassUtils . class ) ) ;']","['assertEquals ( ""org . apache . commons . lang3 . ClassUtilsTest$2Named"" , ClassUtils . getName ( Named . class ) ) ;', 'assertEquals ( ""short [ ] "" , ClassUtils . getCanonicalName ( short [ ] . class , ""X"" ) ) ;', 'assertEquals ( ""org . apache . commons . lang3 . ClassUtilsTest$3Named"" , ClassUtils . getName ( new Named ( ) , "" < null > "" ) ) ;', 'assertEquals ( ""java . util . Map . Entry [ ] "" , ClassUtils . getCanonicalName ( Map . Entry [ ] . class , ""X"" ) ) ;', 'assertEquals ( ""ClassUtilsTest . 7Named"" , ClassUtils . getShortCanonicalName ( Named . class ) ) ;', 'assertEquals ( ""byte"" , ClassUtils . getCanonicalName ( byte . class , ""X"" ) ) ;', 'assertEquals ( ""ClassUtilsTest . 9"" , ClassUtils . getShortClassName ( new Object ( ) {', '@ Test', 'assertEquals ( ""ClassUtilsTest . 8Named"" , ClassUtils . getShortCanonicalName ( new Named ( ) , "" < null > "" ) ) ;', 'assertEquals ( ""org . apache . commons . lang3 . ClassUtilsTest . Inner"" , ClassUtils . getCanonicalName ( Inner . class , ""X"" ) ) ;']","['throwable = ExceptionUtils . getCause ( throwable ) ;', 'throwable = throwable . getCause ( ) ;']",['import org . junit . Assert ;'],"['assertTrue ( ""Delta to current time too large"" , delta < 100000 ) ;', 'assertTrue ( String . format ( ""Delta % d ns to current time too large"" , delta ) , delta < 100000 ) ;']","['public void testIsJavaVersionAtLeat ( ) throws Exception {', 'public void testIsJavaVersionAtLeast ( ) throws Exception {']","['return JAVA 10 ;', '} else if ( ""10"" . equals ( nom ) ) {', 'JAVA 10 ( 10 . 0f , ""10"" ) ,', 'public static final boolean IS JAVA 10 = getJavaVersionMatches ( ""10"" ) ;', 'assertEquals ( ""10 failed"" , JAVA 10 , get ( ""10"" ) ) ;', 'import static org . apache . commons . lang3 . JavaVersion . JAVA 10 ;', 'System . out . println ( ""Can\'t test IS JAVA value : "" + javaVersion ) ;', 'assertTrue ( SystemUtils . isJavaVersionAtLeast ( JAVA 1 5 ) ) ;', 'assertFalse ( SystemUtils . IS JAVA 1 9 ) ;', 'assertTrue ( SystemUtils . isJavaVersionAtLeast ( JAVA 1 8 ) ) ;']","['DateUtils . round ( ( Object ) cal7 , Calendar . HOUR OF DAY ) ) ;', 'DateUtils . round ( ( Object ) cal7 , Calendar . HOUR OF DAY ) ) ;', 'oct31MDT , DateUtils . round ( oct31 01 02 03 04MDT , Calendar . DATE ) ) ;', 'oct31MDT , DateUtils . round ( oct31 01 02 03 04MDT , Calendar . DATE ) ) ;', 'oct31 01 02MDT , DateUtils . truncate ( oct31 01 02 03 04MDT , Calendar . MINUTE ) ) ;', 'oct31 01 02MDT , DateUtils . truncate ( oct31 01 02 03 04MDT , Calendar . MINUTE ) ) ;', 'assertEquals ( ""Demonstrate Problem"" , gval . getTime ( ) . getTime ( ) , oct31 01MDT . getTime ( ) + 3600000L ) ;', 'assertEquals ( ""Demonstrate Problem"" , gval . getTime ( ) . getTime ( ) , oct31 01MDT . getTime ( ) + 3600000L ) ;', 'gval . setTime ( new Date ( oct31 01MDT . getTime ( ) ) ) ;', 'assertEquals ( ""Check 01 : 02 : 03 . 004"" , ""2004 - 10 - 31 01 : 02 : 03 . 004 - 06 : 00"" , format . format ( oct31 01 02 03 04MDT ) ) ;']","['Validate . notNull ( object , ""Cannot get the toString of a null identity"" ) ;', 'Validate . notNull ( object , ""Cannot get the toString of a null object"" ) ;']","["". append ( ' @ ' )"", '. append ( AT SIGN )', ""private static final char AT SIGN = ' @ ' ;""]","['ObjectUtils . identityToString ( ( StringBuilder ) null , ""tmp"" ) ;', 'ObjectUtils . identityToString ( ( StringBuilder ) null , ""tmp"" ) ;', 'ObjectUtils . identityToString ( new StringBuilder ( ) , null ) ;', '@ Test', 'ObjectUtils . identityToString ( FOO ) ) ;', 'public void testIdentityToStringObjectNull ( ) {', 'public void testIdentityToStringStringBuilder ( ) {', 'ObjectUtils . identityToString ( new StringBuilder ( ) , null ) ;', '""java . lang . String @ "" + Integer . toHexString ( System . identityHashCode ( FOO ) ) ,', 'public void testIdentityToStringInteger ( ) {']","['assertEquals ( expected , ObjectUtils . identityToString ( i ) ) ;', 'final StringBuilder builder = new StringBuilder ( ""ABC = "" ) ;', '@ Test', 'public void testIdentityToStringStringBuilderInUse ( ) {', '}', 'final String expected = ""ABC = java . lang . Integer @ "" + Integer . toHexString ( System . identityHashCode ( i ) ) ;', 'assertEquals ( expected , builder . toString ( ) ) ;', 'final Integer i = Integer . valueOf ( 90 ) ;', 'ObjectUtils . identityToString ( builder , i ) ;']","['builder . append ( object . getClass ( ) . getName ( ) )', 'buffer . append ( name )', 'final StringBuilder builder = new StringBuilder ( ) ;', 'builder . append ( name )', 'buffer . append ( object . getClass ( ) . getName ( ) )', 'final String name = object . getClass ( ) . getName ( ) ;', 'identityToString ( builder , object ) ;', 'builder . ensureCapacity ( builder . length ( ) + name . length ( ) + 1 + hexString . length ( ) ) ;', '. append ( Integer . toHexString ( System . identityHashCode ( object ) ) ) ;', 'buffer . ensureCapacity ( buffer . length ( ) + name . length ( ) + 1 + hexString . length ( ) ) ;']","['this . typeArguments = typeArguments . clone ( ) ;', 'this . typeArguments = Arrays . copyOf ( typeArguments , typeArguments . length , Type [ ] . class ) ;', 'final TypeVariable < ? > [ ] variables = ArrayList . class . getTypeParameters ( ) ;', 'final Map < TypeVariable < ? > , Type > mapping = Collections . < TypeVariable < ? > , Type > singletonMap ( variables [ 0 ] , String . class ) ;', 'public void testParameterizeNarrowerTypeArray ( ) {', 'assertEquals ( TypeUtils . parameterize ( ArrayList . class , String . class ) , unrolled ) ;', '@ Test', 'final ParameterizedType parameterizedType = TypeUtils . parameterize ( ArrayList . class , variables ) ;', 'import java . util . Collections ;', '}']","['public static final boolean IS OS SOLARIS = getOSMatchesName ( ""Solaris"" ) ;', 'public static final boolean IS OS MAC OSX YOSEMITE = getOsMatches ( ""Mac OS X"" , ""10 . 10"" ) ;', 'public static final boolean IS OS MAC OSX SNOW LEOPARD = getOSMatches ( ""Mac OS X"" , ""10 . 6"" ) ;', 'public static final boolean IS OS 400 = getOsMatchesName ( ""OS / 400"" ) ;', 'public static final boolean IS OS WINDOWS 2012 = getOSMatchesName ( OS NAME WINDOWS PREFIX + "" Server 2012"" ) ;', 'public static final boolean IS OS WINDOWS 2012 = getOsMatchesName ( OS NAME WINDOWS PREFIX + "" Server 2012"" ) ;', 'public static final boolean IS OS IRIX = getOSMatchesName ( ""Irix"" ) ;', 'public static final boolean IS OS WINDOWS 8 = getOsMatchesName ( OS NAME WINDOWS PREFIX + "" 8"" ) ;', 'public static final boolean IS OS MAC OSX LION = getOSMatches ( ""Mac OS X"" , ""10 . 7"" ) ;', 'public static final boolean IS OS WINDOWS ME = getOsMatchesName ( OS NAME WINDOWS PREFIX + "" Me"" ) ;']","['return performStateCheck ( 1 ) ;', 'return performStateCheck ( increment ) ;', 'assertTrue ( ""Not open"" , open ) ;', 'TimeUnit . SECONDS , CLOSING THRESHOLD , 1 , TimeUnit . SECONDS ) ;', '@ Test', 'final long timeIncrement = NANO FACTOR / OPENING THRESHOLD - 1 ;', 'assertFalse ( ""Closed"" , breaker . isClosed ( ) ) ;', 'final EventCountCircuitBreakerTestImpl breaker = new EventCountCircuitBreakerTestImpl ( OPENING THRESHOLD , 1 ,', '}', 'boolean open = !breaker . at ( startTime ) . incrementAndCheckState ( OPENING THRESHOLD + 1 ) ;']","['daemonFlag = Boolean . valueOf ( f ) ;', 'daemon = null ;', 'daemonFlag = null ;', 'private Boolean daemon ;', 'daemonFlag = builder . daemonFlag ;', 'daemonFlag = builder . daemon ;', 'private Boolean daemonFlag ;', 'daemon = Boolean . valueOf ( f ) ;']","['private final Boolean daemonFlag ;', 'private final Boolean daemon ;', 'daemonFlag = builder . daemon ;', 'return daemon ;', 'return daemonFlag ;', 'daemon = builder . daemon ;']","['private void initializeThread ( final Thread t ) {', 'thread . setPriority ( getPriority ( ) . intValue ( ) ) ;', 't . setUncaughtExceptionHandler ( getUncaughtExceptionHandler ( ) ) ;', 'private void initializeThread ( final Thread thread ) {', 't . setName ( String . format ( getNamingPattern ( ) , count ) ) ;', 'thread . setName ( String . format ( getNamingPattern ( ) , count ) ) ;', 't . setPriority ( getPriority ( ) . intValue ( ) ) ;', 'thread . setUncaughtExceptionHandler ( getUncaughtExceptionHandler ( ) ) ;', 't . setDaemon ( getDaemonFlag ( ) . booleanValue ( ) ) ;', 'thread . setDaemon ( getDaemonFlag ( ) . booleanValue ( ) ) ;']","['public Builder priority ( final int prio ) {', 'public Thread newThread ( final Runnable runnable ) {', 'return t ;', 'public Builder daemon ( final boolean daemon ) {', 'final Thread t = getWrappedFactory ( ) . newThread ( r ) ;', 'final Thread thread = getWrappedFactory ( ) . newThread ( runnable ) ;', 'priority = Integer . valueOf ( prio ) ;', 'initializeThread ( thread ) ;', 'public Thread newThread ( final Runnable r ) {', 'return thread ;']","['& & valueAsString . startsWith ( getArrayEnd ( ) ) ;', '& & valueAsString . endsWith ( getArrayEnd ( ) ) ;', '"" { \\ ""name \\ "" : \\ ""Jane Doe \\ "" , \\ ""age \\ "" : 25 , \\ ""smoker \\ "" : true , \\ ""groups \\ "" : [ \'admin\' , \'manager\' , \'user\' ] } "" ,', 'p . smoker = true ;', 'p . age = 25 ;', '@ Test', 'new ToStringBuilder ( p ) . append ( ""name"" , p . name )', 'return "" [ \'admin\' , \'manager\' , \'user\' ] "" ;', 'final Person p = new Person ( ) ;', '} )']","['final String sanitizedSeparator = defaultString ( separator , StringUtils . EMPTY ) ;', 'final String sanitizedSeparator = defaultString ( separator ) ;', 'return str = = null ? EMPTY : str ;', 'return defaultString ( str , EMPTY ) ;']","[""if ( sz > start + 1 & & chars [ start ] = = '0' ) {"", ""if ( sz > start + 1 & & chars [ start ] = = '0' & & !StringUtils . contains ( str , ' . ' ) ) {"", 'compareIsNumberWithCreateNumber ( "" - 000E . 12345"" , false ) ;', 'compareIsNumberWithCreateNumber ( "" + 0002 . 12345"" , true ) ;', 'compareIsNumberWithCreateNumber ( "" - 0001 . 12345"" , true ) ;', 'compareIsNumberWithCreateNumber ( "" - 000 . 12345"" , true ) ;', 'compareIsNumberWithCreateNumber ( "" + 000E . 12345"" , false ) ;', 'compareIsNumberWithCreateNumber ( "" + 00 . 12345"" , true ) ;']","['if ( SystemUtils . IS JAVA 1 6 & & hasLeadingPlusSign & & !hasDecPoint ) {', '}', 'return false ;', 'import org . apache . commons . lang3 . SystemUtils ;', ""final boolean hasLeadingPlusSign = start = = 1 & & chars [ 0 ] = = ' + ' ;"", 'compareIsCreatableWithCreateNumber ( "" + 2"" , false ) ;', 'compareIsNumberWithCreateNumber ( "" + 2"" , true ) ;', 'compareIsCreatableWithCreateNumber ( "" + 2"" , true ) ;', 'compareIsCreatableWithCreateNumber ( "" + 2"" , true ) ;', '}']","['return list . size ( ) < 2 ? null : list . get ( list . size ( ) - 1 ) ;', 'return list . isEmpty ( ) ? null : list . get ( list . size ( ) - 1 ) ;', 'assertSame ( null , ExceptionUtils . getRootCause ( jdkNoCause ) ) ;', 'assertSame ( jdkNoCause , ExceptionUtils . getRootCause ( jdkNoCause ) ) ;', 'assertSame ( null , ExceptionUtils . getRootCause ( withoutCause ) ) ;', 'assertSame ( withoutCause , ExceptionUtils . getRootCause ( withoutCause ) ) ;']","['assertEquals ( ""createNumber ( String ) LANG - 1060j failed"" , Float . valueOf ( "" + 001 . 1E20"" ) , NumberUtils . createNumber ( "" + 001 . 1E20"" ) ) ;', 'assertTrue ( ""toFloat ( String , int ) 5 failed"" , NumberUtils . toFloat ( ""001Z . 2345"" , 5 . 0f ) = = 5 . 0f ) ;', 'assertTrue ( ""toDouble ( String , int ) 7 failed"" , NumberUtils . toDouble ( ""000 . 00"" , 5 . 1d ) = = 0d ) ;', 'assertTrue ( ""toFloat ( String ) 4 failed"" , NumberUtils . toFloat ( "" - 001 . 2345"" ) = = - 1 . 2345f ) ;', 'assertTrue ( ""toDouble ( String ) 5 failed"" , NumberUtils . toDouble ( "" + 001 . 2345"" ) = = 1 . 2345d ) ;', 'assertTrue ( ""toDouble ( String , int ) 4 failed"" , NumberUtils . toDouble ( "" - 001 . 2345"" , 5 . 1d ) = = - 1 . 2345d ) ;', 'assertEquals ( ""createNumber ( String ) LANG - 1060b failed"" , Double . valueOf ( "" + 001234 . 5678"" ) , NumberUtils . createNumber ( "" + 001234 . 5678"" ) ) ;', 'assertTrue ( ""toDouble ( String ) 6 failed"" , NumberUtils . toDouble ( ""001 . 2345"" ) = = 1 . 2345d ) ;', 'assertEquals ( ""createNumber ( String ) LANG - 1060i failed"" , Float . valueOf ( ""001 . 1E20"" ) , NumberUtils . createNumber ( ""001 . 1E20"" ) ) ;', 'assertEquals ( ""createNumber ( String ) LANG - 1060e failed"" , Float . valueOf ( ""001234 . 56"" ) , NumberUtils . createNumber ( ""001234 . 56"" ) ) ;']","['while ( testClass . getSuperclass ( ) ! = null & & testClass ! = reflectUpToClass ) {', 'import java . util . ArrayList ;', 'reflectionAppend ( lhs , rhs , testClass ) ;', 'isEquals = lhs . equals ( rhs ) ;', 'testClass = testClass . getSuperclass ( ) ;', 'bypassReflectionClasses . add ( String . class ) ;', 'while ( testClass . getSuperclass ( ) ! = null & & testClass ! = reflectUpToClass ) {', 'private List < Class < ? > > bypassReflectionClasses ;', 'if ( bypassReflectionClasses ! = null', '}']","['return str = = null & & suffix = = null ;', 'return str = = suffix ;']","['return str = = null & & prefix = = null ;', 'return str = = prefix ;']","['} else if ( v > 10 ) {', 'return JAVA RECENT ;', 'assertEquals ( ""Unhandled"" , JAVA RECENT , get ( ""11"" ) ) ;']","['} else if ( ""11"" . equals ( nom ) ) {', 'JAVA 11 ( 11 . 0f , ""11"" ) ,', 'return JAVA 11 ;', 'public static final boolean IS JAVA 11 = getJavaVersionMatches ( ""11"" ) ;', 'assertEquals ( ""Unhandled"" , JAVA RECENT , get ( ""11"" ) ) ;', 'assertEquals ( ""Unhandled"" , JAVA RECENT , get ( ""12"" ) ) ;', 'assertEquals ( ""11 failed"" , JavaVersion . JAVA 11 , get ( ""11"" ) ) ;', 'assertTrue ( SystemUtils . isJavaVersionAtLeast ( JAVA 1 3 ) ) ;', 'assertTrue ( SystemUtils . isJavaVersionAtLeast ( JAVA 11 ) ) ;', 'assertTrue ( SystemUtils . isJavaVersionAtLeast ( JAVA 1 7 ) ) ;']","['bypassReflectionClasses = new ArrayList < Class < ? > > ( ) ;', 'bypassReflectionClasses = new ArrayList < > ( ) ;']","['ArrayUtils . shuffle ( array1 ) ;', 'private static final long SEED = 16111981L ;', 'import java . util . Random ;', 'ArrayUtils . shuffle ( array1 , new Random ( SEED ) ) ;']","[""& & ( numeric . charAt ( 0 ) = = ' - ' & & isDigits ( numeric . substring ( 1 ) ) | | isDigits ( numeric ) ) ) {"", ""& & ( numeric . length ( ) > 0 & & numeric . charAt ( 0 ) = = ' - ' & & isDigits ( numeric . substring ( 1 ) ) | | isDigits ( numeric ) ) ) {"", 'compareIsNumberWithCreateNumber ( ""L"" , false ) ;', 'public void testIsNumberLANG1385 ( ) {', '}', '@ Test']","['assertFalse ( SystemUtils . IS JAVA 1 3 ) ;', 'assertFalse ( SystemUtils . IS JAVA 11 ) ;', 'assertFalse ( SystemUtils . IS JAVA 1 4 ) ;', 'assertFalse ( SystemUtils . IS JAVA 1 2 ) ;', '} else if ( javaVersion . startsWith ( ""11"" ) ) {', 'assertFalse ( SystemUtils . IS JAVA 1 6 ) ;', 'assertFalse ( SystemUtils . IS JAVA 1 7 ) ;', 'assertFalse ( SystemUtils . IS JAVA 1 8 ) ;', 'assertFalse ( SystemUtils . IS JAVA 10 ) ;', 'assertFalse ( SystemUtils . IS JAVA 1 1 ) ;']","['assertEquals ( 5 , FieldUtils . getAllFieldsList ( PublicChild . class ) . size ( ) ) ;', 'final Field [ ] allFields = FieldUtils . getAllFields ( PublicChild . class ) ;', 'assertEquals ( 5 , FieldUtils . getAllFields ( PublicChild . class ) . length ) ;', 'if ( field . getName ( ) . equals ( ""$jacocoData"" ) ) {', 'final List < Field > allFields = FieldUtils . getAllFieldsList ( PublicChild . class ) ;', 'assertEquals ( Arrays . toString ( allFields ) , expected , allFields . length ) ;', 'assertEquals ( allFields . toString ( ) , expected , allFields . size ( ) ) ;', 'for ( Field field : allFields ) {', '}', 'expected + + ;']","['if ( field . getName ( ) . equals ( ""$jacocoData"" ) ) {', 'if ( field . getName ( ) . equals ( JACOCO DATA FIELD NAME ) ) {', 'private static final String JACOCO DATA FIELD NAME = ""$jacocoData"" ;']","['assertTrue ( iInteger ! = testMap . get ( ""BAR"" ) ) ;', 'assertNotSame ( iInteger , testMap . get ( ""BAR"" ) ) ;', 'assertTrue ( iString ! = testMap . get ( ""FOO"" ) ) ;', 'assertNotSame ( test , iMap ) ;', 'assertTrue ( test ! = iMap ) ;', 'import static org . junit . Assert . assertNotSame ;', 'assertNotSame ( iString , testMap . get ( ""FOO"" ) ) ;']","['SerializationUtils . serialize ( iMap ) ;', 'SerializationUtils . serialize ( iMap ) ;', 'fail ( ) ;', '@ Test ( expected = IllegalArgumentException . class )', 'try {', 'SerializationUtils . deserialize ( ( InputStream ) null ) ;', '@ Test', 'SerializationUtils . deserialize ( new ByteArrayInputStream ( new byte [ 0 ] ) ) ;', 'SerializationUtils . deserialize ( ( InputStream ) null ) ;', 'SerializationUtils . serialize ( null , null ) ;']","['for ( int i = 0 ; i < realBytes . length ; i + + ) {', 'import static org . junit . Assert . assertArrayEquals ;', 'assertEquals ( realBytes [ i ] , testBytes [ i ] ) ;', 'assertArrayEquals ( realBytes , testBytes ) ;', '}']","['if ( isNotEmpty ( val ) ) {', 'public static < T extends CharSequence > T firstNonBlank ( final T . . . values ) {', 'return null ;', '}', 'if ( values ! = null ) {', 'public static < T extends CharSequence > T firstNonEmpty ( final T . . . values ) {', 'for ( final T val : values ) {', 'return val ;', '@ SafeVarargs', 'if ( isNotBlank ( val ) ) {']","['return value = = null ? defaultValue : value ;', 'try {', '}', 'System . err . println ( ""Caught a SecurityException reading the environment variable \'"" + name + ""\' . "" ) ;', '} catch ( final SecurityException ex ) {', 'return defaultValue ;', 'final String value = System . getenv ( name ) ;', 'public static String getEnvironmentVariable ( final String name , final String defaultValue ) {', 'final String name = ""THIS ENV VAR SHOULD NOT EXIST FOR THIS TEST TO PASS"" ;', 'assertEquals ( ""DEFAULT"" , value ) ;']","['System . err . println ( ""Caught a SecurityException reading the environment variable \'"" + name + ""\' . "" ) ;', '+ ""\' ; the SystemUtils property value will default to null . "" ) ;', 'System . err . println ( ""Caught a SecurityException reading the system property \'"" + property']","['buffer . append ( \'""\' ) . append ( value ) . append ( \'""\' ) ;', 'import org . apache . commons . lang3 . StringEscapeUtils ;', 'buffer . append ( \'""\' ) . append ( StringEscapeUtils . escapeJson ( value ) ) . append ( \'""\' ) ;', '@ SuppressWarnings ( ""deprecation"" )', 'assertEquals ( "" { \\ ""name \\ "" : \\ "" \\ \\ \\ \\ \\ "" } "" , new ToStringBuilder ( base ) . append ( ""name"" , \' \\ \\ \' ) . toString ( ) ) ;', '@ Test', '}', 'public void testLANG1395 ( ) {', 'assertEquals ( "" { \\ ""name \\ "" : \\ "" \\ "" } "" , new ToStringBuilder ( base ) . append ( ""name"" , """" ) . toString ( ) ) ;', 'assertEquals ( "" { \\ ""name \\ "" : \\ "" \\ \\ \\ "" \\ "" } "" , new ToStringBuilder ( base ) . append ( ""name"" , \'""\' ) . toString ( ) ) ;']","['super . appendFieldStart ( buffer , FIELD NAME QUOTE + fieldName', 'super . appendFieldStart ( buffer , FIELD NAME QUOTE + StringEscapeUtils . escapeJson ( fieldName )', 'public void testLANG1396 ( ) {', 'assertEquals ( "" { \\ ""Let\'s \\ \\ \\ ""quote \\ \\ \\ "" this \\ "" : \\ ""value \\ "" } "" , new ToStringBuilder ( base ) . append ( ""Let\'s \\ ""quote \\ "" this"" , ""value"" ) . toString ( ) ) ;', '}', '@ Test']","['return Pattern . compile ( regex , Pattern . DOTALL ) . matcher ( text ) . replaceAll ( replacement ) ;', '}', 'public static String replaceFirst ( final String text , final String regex , final String replacement ) {', 'return regex . matcher ( text ) . replaceAll ( replacement ) ;', 'return text . replaceFirst ( regex , replacement ) ;', 'if ( text = = null | | regex = = null | | replacement = = null ) {', 'return text . replaceAll ( regex , replacement ) ;', 'public static String replaceAll ( final String text , final String regex , final String replacement ) {', 'return replacePattern ( text , regex , StringUtils . EMPTY ) ;', 'public static String removeFirst ( final String text , final String regex ) {']","['public static String replaceAll ( final String text , final Pattern regex , final String replacement ) {', 'public static String replaceAll ( final String text , final Pattern regex , final String replacement ) {', 'return replaceAll ( text , regex , StringUtils . EMPTY ) ;', 'return replaceAll ( text , regex , StringUtils . EMPTY ) ;', 'public static String removeFirst ( final String text , final Pattern regex ) {', 'public static String removeFirst ( final String text , final Pattern regex ) {', 'if ( text = = null | | regex = = null | | replacement = = null ) {', 'public static String removePattern ( final String text , final String regex ) {', 'public static String removePattern ( final String text , final String regex ) {', 'if ( text = = null | | regex = = null | | replacement = = null ) {']","['assertNull ( RegExUtils . removeFirst ( null , Pattern . compile ( """" ) ) ) ;', 'assertNull ( RegExUtils . removeFirst ( null , Pattern . compile ( """" ) ) ) ;', 'assertEquals ( ""A \\ nB"" , RegExUtils . removeAll ( ""A < > \\ n < > B"" , "" < . * > "" ) ) ;', 'assertEquals ( ""A \\ nB"" , RegExUtils . removeAll ( ""A < > \\ n < > B"" , "" < . * > "" ) ) ;', 'RegExUtils . replaceAll ( ""any"" , "" { badRegexSyntax } "" , """" ) ;', 'RegExUtils . replaceAll ( ""any"" , "" { badRegexSyntax } "" , """" ) ;', 'assertEquals ( ""ABC123"" , RegExUtils . replaceAll ( ""ABCabc123"" , "" [ ^ A - Z0 - 9 ] + "" , """" ) ) ;', 'assertEquals ( ""ABC123"" , RegExUtils . replaceAll ( ""ABCabc123"" , "" [ ^ A - Z0 - 9 ] + "" , """" ) ) ;', 'assertNull ( RegExUtils . replacePattern ( null , """" , """" ) ) ;', 'assertNull ( RegExUtils . replacePattern ( null , """" , """" ) ) ;']","['RegExUtils . replaceAll ( ""Lorem ipsum dolor sit"" , "" ( + ) ( [ a - z ] + ) "" , "" $2"" ) ) ;', 'RegExUtils . replaceFirst ( ""Lorem ipsum dolor sit"" , Pattern . compile ( "" ( + ) ( [ a - z ] + ) "" ) , "" $2"" ) ) ;', 'assertEquals ( ""Lorem ipsum dolor sit"" ,', 'assertEquals ( ""Lorem ipsum dolor sit"" , RegExUtils . replaceAll ( ""Lorem ipsum dolor sit"" , "" ( + ) ( [ a - z ] + ) "" , "" $2"" ) ) ;', 'RegExUtils . replaceFirst ( ""Lorem ipsum dolor sit"" , Pattern . compile ( "" ( + ) ( [ a - z ] + ) "" ) , "" $2"" ) ) ;']","['Matcher matcher = patternToWrapOn . matcher ( str . substring ( offset , Math . min ( offset + wrapLength + 1 , inputLineLength ) ) ) ;', 'Matcher matcher = patternToWrapOn . matcher (', 'str . substring ( offset , Math . min ( ( int ) Math . min ( Integer . MAX VALUE , offset + wrapLength + 1L ) , inputLineLength ) ) ) ;', 'WordUtils . wrap ( ""aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa ""', '+ ""aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa ""', '@ Test', 'public void testLANG1397 ( ) throws Exception {', '}', '+ ""aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"" , Integer . MAX VALUE ) ;']","['if ( noOfItems < = 0 ) {', 'final int noOfItems = endIndex - startIndex ;', 'public static String join ( final List < ? > list , final String separator , final int startIndex , final int endIndex ) {', 'return null ;', 'return join ( subList . iterator ( ) , separator ) ;', '}', 'return EMPTY ;', 'public static String join ( final List < ? > list , final char separator , final int startIndex , final int endIndex ) {', 'final List < ? > subList = list . subList ( startIndex , endIndex ) ;', 'if ( list = = null ) {']","['return splitByWholeSeparatorWorker ( str , separator , - 1 , false ) ;', 'return splitByWholeSeparatorWorker ( str , separator , - 1 , false ) ;']","['return Objects . toString ( first , """" ) ;', 'return Objects . toString ( first , EMPTY ) ;']","['final StringBuilder buf = new StringBuilder ( 256 ) ;', 'private static final int STRING BUILDER SIZE = 256 ;', 'final StringBuilder buf = new StringBuilder ( STRING BUILDER SIZE ) ;']","['final StringBuilder buf = new StringBuilder ( noOfItems * 16 ) ;', 'final StringBuilder buf = newStringBuilder ( noOfItems ) ;', '}', 'return new StringBuilder ( noOfItems * 16 ) ;', 'private static StringBuilder newStringBuilder ( final int noOfItems ) {']","['private static void addProcessors ( final Processor processor , final String . . . keys ) throws IllegalStateException {', 'private static void addProcessor ( final String key , final Processor processor ) {', 'private static void addProcessor ( final String key , final Processor processor ) throws IllegalStateException {', 'private static void addProcessors ( final Processor processor , final String . . . keys ) {', 'throws SecurityException , NoSuchMethodException {', 'throws NoSuchMethodException {', 'public static short CONST SHORT ( final int v ) throws IllegalArgumentException {', 'public static byte CONST BYTE ( final int v ) {', 'public static byte CONST BYTE ( final int v ) throws IllegalArgumentException {', 'public static short CONST SHORT ( final int v ) {']","[""private static final char [ ] HEX DIGITS = new char [ ] { '0' , '1' , '2' , '3' , '4' , '5' , '6' , '7' , '8' , '9' , 'a' , 'b' , 'c' , 'd' , 'e' , 'f' } ;"", ""private static final char [ ] HEX DIGITS = { '0' , '1' , '2' , '3' , '4' , '5' , '6' , '7' , '8' , '9' , 'a' , 'b' , 'c' , 'd' , 'e' , 'f' } ;"", 'private static final boolean [ ] TTTF = new boolean [ ] { true , true , true , false } ;', 'private static final boolean [ ] TTTF = { true , true , true , false } ;', 'private static final boolean [ ] FFTT = new boolean [ ] { false , false , true , true } ;', 'private static final boolean [ ] TFFF = { true , false , false , false } ;', 'private static final boolean [ ] TTFF = new boolean [ ] { true , true , false , false } ;', 'private static final boolean [ ] TFTF = { true , false , true , false } ;', 'private static final boolean [ ] FTFF = new boolean [ ] { false , true , false , false } ;', 'private static final boolean [ ] FTFT = { false , true , false , true } ;']","['if ( className . length ( ) > 0 ) {', 'if ( !className . isEmpty ( ) ) {', 'variant . length ( ) > 0 ) {', '!variant . isEmpty ( ) ) {', 'locale . getCountry ( ) . length ( ) ! = 0 & &', 'if ( !locale . getVariant ( ) . isEmpty ( ) ) {', 'if ( locale . getVariant ( ) . length ( ) > 0 ) {', '!locale . getCountry ( ) . isEmpty ( ) & &', '( country . length ( ) = = 0 | | isISO3166CountryCode ( country ) | | isNumericAreaCode ( country ) ) & &', '( country . isEmpty ( ) | | isISO3166CountryCode ( country ) | | isNumericAreaCode ( country ) ) & &']","['final int srcLength = ArrayUtils . getLength ( array ) ;', 'final int srcLength = getLength ( array ) ;', 'if ( ArrayUtils . isEmpty ( array ) ) {', 'if ( isEmpty ( array ) ) {', 'return ClassUtils . getPackageName ( getCanonicalName ( canonicalName ) ) ;', 'return getPackageName ( getCanonicalName ( canonicalName ) ) ;', 'return ClassUtils . getShortClassName ( getCanonicalName ( canonicalName ) ) ;', 'return getShortClassName ( getCanonicalName ( canonicalName ) ) ;', 'final int tmpHash = ObjectUtils . hashCode ( object ) ;', 'return !equals ( object1 , object2 ) ;']","['} else {', 'ARCH TO PROCESSOR . put ( key , processor ) ;', 'final String msg = ""Key "" + key + "" already exists in processor map"" ;', 'if ( ARCH TO PROCESSOR . containsKey ( key ) ) {', 'if ( !ARCH TO PROCESSOR . containsKey ( key ) ) {', 'throw new IllegalStateException ( ""Key "" + key + "" already exists in processor map"" ) ;', 'throw new IllegalStateException ( msg ) ;', 'ARCH TO PROCESSOR . put ( key , processor ) ;', 'shift count = mask ! = 0 ? Integer . numberOfTrailingZeros ( mask ) : 0 ;', 'shift count = mask = = 0 ? 0 : Integer . numberOfTrailingZeros ( mask ) ;']","['comparison = + 1 ;', 'comparison = 1 ;', 'comparison = lhs . length < rhs . length ? - 1 : + 1 ;', 'comparison = lhs . length < rhs . length ? - 1 : 1 ;']","['comparison = lhs < rhs ? - 1 : lhs > rhs ? 1 : 0 ;', 'comparison = Character . compare ( lhs , rhs ) ;', 'comparison = Byte . compare ( lhs , rhs ) ;', 'comparison = Long . compare ( lhs , rhs ) ;', 'comparison = Integer . compare ( lhs , rhs ) ;', 'comparison = Short . compare ( lhs , rhs ) ;', 'return a < rhs . a ? - 1 : a > rhs . a ? + 1 : 0 ;', 'return Integer . compare ( a , rhs . a ) ;']","['final TzInfo tzInfo = tzNames . get ( timeZone . toLowerCase ( locale ) ) ;', 'if ( iVal = = null ) {', 'final Integer iVal = lKeyValues . get ( value . toLowerCase ( locale ) ) ;', ""if ( sb . charAt ( sb . length ( ) - 1 ) = = ' . ' ) {"", ""tzInfo = tzNames . get ( lowerCase + ' . ' ) ;"", '}', 'TzInfo tzInfo = tzNames . get ( lowerCase ) ;', ""sb . append ( ' ? ' ) ;"", ""iVal = lKeyValues . get ( lowerCase + ' . ' ) ;"", 'final String lowerCase = timeZone . toLowerCase ( locale ) ;']","['if ( index < 0 ) {', '}', 'return defaultReturn ;', 'public static Object get ( Object [ ] array , int index , Object defaultReturn ) {', 'if ( getLength ( array ) = = 0 | | array . length < = index ) {', 'return array [ index ] ;', 'index = 0 ;', 'public static Object get ( Object [ ] array , int index ) {', 'return get ( array , index , null ) ;', 'assertNull ( ArrayUtils . get ( null , 0 ) ) ;']","['public static Object get ( Object [ ] array , int index , Object defaultReturn ) {', '}', 'public static Object get ( Object [ ] array , int index ) {', 'public static < T > boolean isArrayIndexValid ( T [ ] array , int index ) {', 'return index > = 0 ;', 'return false ;', 'if ( getLength ( array ) = = 0 | | array . length < = index ) {', 'public static < T > T get ( T [ ] array , int index ) {', 'public static < T > T get ( T [ ] array , int index , T defaultReturn ) {', 'assertFalse ( ArrayUtils . isArrayIndexValid ( null , 0 ) ) ;']","['index = 0 ;', 'return defaultReturn ;', 'assertEquals ( ""Hello World"" , ArrayUtils . get ( array , - 1 ) ) ;', 'assertEquals ( ""Default"" , ArrayUtils . get ( array , - 1 , ""Default"" ) ) ;']","[""assertNull ( null , StringUtils . join ( ( List ) null , ' / ' , 0 , 1 ) ) ;"", ""assertNull ( null , StringUtils . join ( ( List < ? > ) null , ' / ' , 0 , 1 ) ) ;"", 'assertNull ( null , StringUtils . join ( ( List ) null , "" / "" , 0 , 1 ) ) ;', 'assertNull ( null , StringUtils . join ( ( List < ? > ) null , "" / "" , 0 , 1 ) ) ;']","['return isAssignable ( classArray , toClassArray , SystemUtils . isJavaVersionAtLeast ( JavaVersion . JAVA 1 5 ) ) ;', 'return isAssignable ( classArray , toClassArray , true ) ;', 'return isAssignable ( cls , toClass , SystemUtils . isJavaVersionAtLeast ( JavaVersion . JAVA 1 5 ) ) ;', 'return isAssignable ( cls , toClass , true ) ;']","['public static double toDouble ( BigDecimal value ) {', '}', 'return value = = null ? defaultValue : value . doubleValue ( ) ;', 'public static double toDouble ( BigDecimal value , double defaultValue ) {', 'return toDouble ( value , 0 . 0d ) ;', 'assertTrue ( ""toDouble ( null ) failed"" , NumberUtils . toDouble ( null ) = = 0 . 0d ) ;', 'assertTrue ( ""toDouble ( BigInteger ) 2 failed"" , NumberUtils . toDouble ( BigDecimal . valueOf ( 8 . 5d ) , 1 . 1d ) = = 8 . 5d ) ;', '@ Test', 'assertTrue ( ""toDouble ( BigInteger ) 1 failed"" , NumberUtils . toDouble ( ( BigDecimal ) null ) = = 0 . 0d ) ;', 'assertTrue ( ""toDouble ( BigInteger ) 1 failed"" , NumberUtils . toDouble ( ( BigDecimal ) null , 1 . 1d ) = = 1 . 1d ) ;']","['public static double toDouble ( BigDecimal value ) {', 'public static BigDecimal toScaledBigDecimal ( String value ) {', 'public static double toDouble ( BigDecimal value , double defaultValue ) {', 'return toScaledBigDecimal (', 'scale ,', '}', 'public static BigDecimal toScaledBigDecimal ( Double value ) {', 'public static double toDouble ( final BigDecimal value , final double defaultValue ) {', ') ;', 'if ( value = = null ) {']","['public static BigDecimal toScaledBigDecimal ( BigDecimal value ) {', 'public static BigDecimal toScaledBigDecimal ( final Float value , final int scale , final RoundingMode roundingMode ) {', 'public static BigDecimal toScaledBigDecimal ( String value ) {', 'public static BigDecimal toScaledBigDecimal ( final BigDecimal value ) {', 'public static BigDecimal toScaledBigDecimal ( BigDecimal value , int scale , RoundingMode roundingMode ) {', 'public static BigDecimal toScaledBigDecimal ( final Double value , final int scale , final RoundingMode roundingMode ) {', 'public static BigDecimal toScaledBigDecimal ( Float value ) {', 'public static BigDecimal toScaledBigDecimal ( final BigDecimal value , final int scale , final RoundingMode roundingMode ) {', 'public static BigDecimal toScaledBigDecimal ( Float value , int scale , RoundingMode roundingMode ) {', 'public static BigDecimal toScaledBigDecimal ( final Double value ) {']","['if ( object instanceof CharSequence ) {', 'return ( ( Map < ? , ? > ) object ) . isEmpty ( ) ;', 'return true ;', 'if ( object . getClass ( ) . isArray ( ) ) {', 'return ( ( Collection < ? > ) object ) . isEmpty ( ) ;', 'public static boolean isNotEmpty ( final Object object ) {', 'return Array . getLength ( object ) = = 0 ;', '}', 'public static boolean isEmpty ( final Object object ) {', 'import java . util . Collection ;']",['@ Test'],"['assertFalse ( SystemUtils . IS JAVA 1 3 ) ;', 'assertFalse ( SystemUtils . IS JAVA 1 4 ) ;', 'assertFalse ( SystemUtils . IS JAVA 11 ) ;', 'assertFalse ( SystemUtils . IS JAVA 1 2 ) ;', 'assertFalse ( SystemUtils . IS JAVA 1 6 ) ;', 'assertFalse ( SystemUtils . IS JAVA 10 ) ;', 'assertFalse ( SystemUtils . IS JAVA 1 8 ) ;', '} else if ( javaVersion . startsWith ( ""1 . 7"" ) ) {', 'assertFalse ( SystemUtils . IS JAVA 1 1 ) ;', 'assertFalse ( SystemUtils . IS JAVA 1 9 ) ;']","['private final Set < CharRange > set = Collections . synchronizedSet ( new HashSet < CharRange > ( ) ) ;', 'protected static final Map < String , CharSet > COMMON = Collections . synchronizedMap ( new HashMap < > ( ) ) ;', 'protected static final Map < String , CharSet > COMMON = Collections . synchronizedMap ( new HashMap < String , CharSet > ( ) ) ;', 'private final Set < CharRange > set = Collections . synchronizedSet ( new HashSet < > ( ) ) ;', 'final MutableObject < Class < ? > > next = new MutableObject < Class < ? > > ( type ) ;', 'final MutableObject < Class < ? > > next = new MutableObject < > ( type ) ;', ': new ArrayList < Class < ? > > ( ) ) ;', ': new ArrayList < > ( ) ) ;', 'final HashMap < TypeVariable < ? > , Type > typeVarAssigns = subtypeVarAssigns = = null ? new HashMap < TypeVariable < ? > , Type > ( )', 'typeVarAssigns = subtypeVarAssigns = = null ? new HashMap < > ( )']","['} catch ( final IllegalAccessException ignored ) {', '} catch ( final NoSuchFieldException | IllegalAccessException ignored ) {', '} catch ( final NoSuchFieldException ignored ) {']","['} else if ( first < second ) {', 'return Long . compare ( first , second ) ;', 'return 0 ;', '}', '} else {', 'return - 1 ;', 'return 1 ;', 'if ( first = = second ) {', 'return leftCost < rightCost ? - 1 : rightCost < leftCost ? 1 : 0 ;', 'return Float . compare ( leftCost , rightCost ) ;']","['private static final class AlwaysTruePredicate implements ThreadPredicate , ThreadGroupPredicate {', 'public static Collection < ThreadGroup > findThreadGroups ( final ThreadGroup group , final boolean recurse , final ThreadGroupPredicate predicate ) {', 'public static Collection < ThreadGroup > findThreadGroups ( final ThreadGroupPredicate predicate ) {', 'private static final class AlwaysTruePredicate implements ThreadPredicate , ThreadGroupPredicate {', 'public static Collection < ThreadGroup > findThreadGroups ( final ThreadGroup group , final boolean recurse , final ThreadGroupPredicate predicate ) {', 'public static Collection < ThreadGroup > findThreadGroups ( final ThreadGroupPredicate predicate ) {', 'public static Collection < Thread > findThreads ( final ThreadPredicate predicate ) {', 'public static Collection < Thread > findThreads ( final ThreadPredicate predicate ) {']","['public interface ThreadPredicate / * extends java . util . function . Predicate < Thread > * / {', '@ FunctionalInterface', 'public interface ThreadGroupPredicate / * extends java . util . function . Predicate < ThreadGroup > * / {', 'public interface ThreadGroupPredicate {', 'public interface ThreadPredicate {', '>']","['import static org . junit . Assert . assertSame ;', 'import org . junit . jupiter . api . Test ;', 'import static org . junit . Assert . assertTrue ;', 'import static org . junit . jupiter . api . Assertions . assertFalse ;', 'import static org . junit . Assert . assertEquals ;', 'import static org . junit . jupiter . api . Assertions . fail ;', 'import static org . junit . Assert . fail ;', 'import static org . junit . jupiter . api . Assertions . assertNotNull ;', 'import org . junit . Test ;', 'import static org . junit . jupiter . api . Assertions . assertSame ;']","['public void testNotEmptyMap2 ( ) {', 'void testExclusiveBetweenLong ( ) {', 'public void testNotBlankMsgNotBlankStringWithNewlinesShouldNotThrow ( ) {', 'void testNotNaN1 ( ) {', 'public void testNotBlankMsgEmptyStringShouldThrow ( ) {', 'void testExclusiveBetween withMessage ( ) {', 'public void testNotEmptyString1 ( ) {', 'void testMatchesPattern withMessage ( ) {', 'public void testNotBlankMsgBlankStringShouldThrow ( ) {', 'void testValidIndex collection ( ) {']","['Validate . isTrue ( false ) ;', '( ) - > Validate . isTrue ( false , ""MSG % s % s"" , ""Object 1"" , ""Object 2"" ) ) ;', 'try {', '@ Test', '@ Test', 'Validate . isTrue ( true , ""MSG"" , ""Object 1"" , ""Object 2"" ) ;', '}', '}', 'void testIsTrue1 ( ) {', 'void shouldThrowExceptionWithDefaultMessageForFalseExpression ( ) {']","['try {', '@ MethodSource ( ""java . util . Locale#getAvailableLocales"" )', '@ Test', 'try {', '}', 'import static org . junit . jupiter . api . Assertions . fail ;', 'for ( final Locale locale : Locale . getAvailableLocales ( ) ) {', 'void testLang1219 ( ) throws ParseException {', 'for ( int t = 1 ; t < zone . length ; + + t ) {', '}']","['final String str = ""Hi"" ;', '@ Test', 'Validate . notNull ( null ) ;', '}', 'void testNotNull2 ( ) {', '( ) - > Validate . notNull ( null , ""MSG"" ) ) ;', 'final String testStr = Validate . notNull ( str , ""Message"" ) ;', '@ Nested', 'try {', 'void shouldNotThrowForNonNullReference ( ) {']","['final String [ ] test = Validate . notEmpty ( array , ""Message"" ) ;', 'Validate . notEmpty ( Collections . singletonMap ( ""key"" , null ) ) ;', 'map . put ( ""ll"" , Integer . valueOf ( 8 ) ) ;', 'final Set < String > result = Validate . notEmpty ( col , ""MSG"" ) ;', 'try {', 'final IllegalArgumentException ex = assertThrows (', '@ Test', '@ Nested', 'assertEquals ( ""The validated map is empty"" , ex . getMessage ( ) ) ;', '( ) - > Validate . notEmpty ( ( Map < ? , ? > ) null , ""MSG"" ) ) ;']","['final String string = "" "" ;', 'void shouldThrowNullPointerExceptionWithDefaultMessageForNullString ( ) {', 'try {', '@ Test', '@ Test', 'void shouldThrowIllegalArgumentExceptionWithDefaultMessageForBlankString ( ) {', '}', '}', 'final String string = """" ;', 'void shouldThrowIllegalArgumentExceptionWithGivenMessageForBlankString ( ) {']","['Validate . noNullElements ( array ) ;', '( ) - > Validate . noNullElements ( ( Object [ ] ) null ) ) ;', 'final String [ ] test = Validate . noNullElements ( array ) ;', '@ Test', 'try {', 'class NoNullElements {', '@ Test', 'class WithCollection {', 'coll . add ( ""b"" ) ;', 'Validate . noNullElements ( new String [ ] { ""a"" , ""b"" } ) ;']","['assertFalse ( Modifier . isFinal ( Validate . class . getModifiers ( ) ) ) ;', 'assertFalse ( Modifier . isFinal ( Validate . class . getModifiers ( ) ) ) ;', '@ Test', '@ Test', 'void testConstructor ( ) {', 'void testConstructor ( ) {', '}', '}', 'final Constructor < ? > [ ] cons = Validate . class . getDeclaredConstructors ( ) ;', 'final Constructor < ? > [ ] cons = Validate . class . getDeclaredConstructors ( ) ;']","['Validate . validIndex ( array , 1 ) ;', '( ) - > Validate . validIndex ( Collections . singleton ( ""a"" ) , - 1 ) ) ;', 'Validate . validIndex ( str , - 1 , ""Broken : "" ) ;', '( ) - > Validate . validIndex ( ( Collection < ? > ) null , 1 , ""MSG"" ) ) ;', 'try {', 'class WithCollection {', '@ Test', '@ Test', 'void testValidIndex collection ( ) {', 'void shouldThrowNullPointerExceptionWithDefaultForNullArray ( ) {']","['} catch ( final IllegalArgumentException e ) {', 'assertEquals ( ""MSG"" , ex . getMessage ( ) ) ;', 'Validate . matchesPattern ( str , "" [ 0 - 9 ] * "" ) ;', 'class MatchesPattern {', 'void testMatchesPattern ( ) {', 'assertEquals ( ""The string hi does not match the pattern [ 0 - 9 ] * "" , ex . getMessage ( ) ) ;', 'Validate . matchesPattern ( str , "" [ a - z ] * "" , ""Does not match"" ) ;', '@ Test', 'try {', 'void shouldThrowIllegalArgumentExceptionWithDefaultMessageWhenStringDoesNotMatchPattern ( ) {']","['void testNotNaN1 ( ) {', '@ Test', 'try {', '}', '@ Test', '( ) - > Validate . notNaN ( Double . NaN ) ) ;', 'assertEquals ( ""The validated value is not a number"" , ex . getMessage ( ) ) ;', 'Validate . notNaN ( Double . POSITIVE INFINITY ) ;', 'Validate . notNaN ( 0 . 0 ) ;', 'final IllegalArgumentException ex = assertThrows (']","['try {', '@ Test', '@ Test', '( ) - > Validate . finite ( Double . NaN , ""MSG"" ) ) ;', 'void testFinite1 ( ) {', 'Validate . finite ( 0 . 0 ) ;', 'Validate . finite ( 0 . 0 ) ;', '}', '}', 'void shouldThrowIllegalArgumentExceptionWithDefaultMessageForNegativeInfinity ( ) {']","['Validate . inclusiveBetween ( 0 , 2 , 2 ) ;', '( ) - > Validate . inclusiveBetween ( LOWER BOUND , UPPER BOUND , 0 . 01 , ""MSG"" ) ) ;', 'try {', 'Validate . inclusiveBetween ( LOWER BOUND , UPPER BOUND , ""2"" , ""MSG"" ) ;', '@ Test', '( ) - > Validate . inclusiveBetween ( LOWER BOUND , UPPER BOUND , ""4"" , ""MSG"" ) ) ;', 'Validate . inclusiveBetween ( 0 . 1 , 5 . 1 , 6 . 1 , ""Error"" ) ;', 'Validate . inclusiveBetween ( LOWER BOUND , UPPER BOUND , 2 ) ;', 'void testInclusiveBetweenLong withMessage ( ) {', '@ Test']","['Validate . exclusiveBetween ( 0 . 1 , 2 . 1 , 1 . 1 ) ;', '( ) - > Validate . exclusiveBetween ( LOWER BOUND , UPPER BOUND , 4 . 1 , ""MSG"" ) ) ;', 'assertEquals ( ""The value 5 is not in the specified exclusive range of 0 to 5"" , e . getMessage ( ) ) ;', '@ Test', 'try {', 'Validate . exclusiveBetween ( LOWER BOUND , UPPER BOUND , 2 . 1 ) ;', '@ Test', 'assertEquals ( ""The value 4 is not in the specified exclusive range of 1 to 3"" , ex . getMessage ( ) ) ;', 'Validate . exclusiveBetween ( 0 . 1 , 5 . 1 , 5 . 1 ) ;', 'private static final double LOWER BOUND = 0 . 1 ;']","['Validate . isInstanceOf ( String . class , ""hi"" , ""Error"" ) ;', '@ Test', 'Validate . isInstanceOf ( List . class , ""hi"" ) ;', '}', 'Validate . isInstanceOf ( List . class , ""hi"" , ""Error"" ) ;', 'Validate . isInstanceOf ( String . class , ""hi"" , ""Error % s = % s"" , ""Name"" , ""Value"" ) ;', 'Validate . isInstanceOf ( Integer . class , 1 ) ;', 'final IllegalArgumentException ex = assertThrows (', '@ Test', 'void shouldThrowIllegalArgumentExceptionWithGivenMessageWhenValueIsNotInstanceOfClass ( ) {']","['} catch ( final IllegalArgumentException e ) {', 'assertEquals ( ""Cannot assign a java . lang . String to a java . util . List"" , ex . getMessage ( ) ) ;', 'Validate . isAssignableFrom ( CharSequence . class , String . class ) ;', 'Validate . isAssignableFrom ( CharSequence . class , String . class ) ;', 'void testIsAssignable ( ) {', 'assertEquals ( ""MSG"" , ex . getMessage ( ) ) ;', 'void testIsAssignable withMessage ( ) {', 'void shouldNotThrowExceptionWhenClassIsAssignable ( ) {', 'try {', '@ Test']","['import java . util . ArrayList ;', 'void isPublicClass ( ) {', 'assertFalse ( Modifier . isFinal ( Validate . class . getModifiers ( ) ) ) ;', 'void instancesCanBeConstrcuted ( ) {', '@ Test', 'void isNonFinalClass ( ) {', 'import static org . junit . jupiter . api . Assertions . fail ;', 'assertFalse ( Modifier . isFinal ( Validate . class . getModifiers ( ) ) ) ;', 'assertNotNull ( new Validate ( ) ) ;', '@ Test']","['CompareToBuilder . reflectionCompare ( o1 , o2 ) ;', 'import org . junit . jupiter . api . Test ;', 'CompareToBuilder . reflectionCompare ( o1 , null ) ;', '@ Test', '@ Test ( expected = NullPointerException . class )', 'assertThrows ( ClassCastException . class , ( ) - > CompareToBuilder . reflectionCompare ( o1 , o2 ) ) ;', '@ Test ( expected = ClassCastException . class )', 'import static org . junit . jupiter . api . Assertions . assertThrows ;', 'import static org . junit . Assert . assertTrue ;', 'import static org . junit . jupiter . api . Assertions . assertTrue ;']","['assertEquals ( ""Got different object at "" + i , obj , initializer . get ( ) ) ;', 'import org . junit . jupiter . api . Test ;', 'import static org . junit . Assert . assertEquals ;', 'assertEquals ( managedObject , t . object , ""Wrong object"" ) ;', 'import org . junit . Test ;', 'import static org . junit . jupiter . api . Assertions . assertNotNull ;', 'assertEquals ( ""Wrong object"" , managedObject , t . object ) ;', 'assertNotNull ( createInitializer ( ) . get ( ) , ""No managed object"" ) ;', 'assertNotNull ( ""No managed object"" , createInitializer ( ) . get ( ) ) ;', 'assertEquals ( obj , initializer . get ( ) , ""Got different object at "" + i ) ;']","['import static org . junit . Assert . assertSame ;', 'import org . junit . jupiter . api . Test ;', '@ Test ( expected = IllegalArgumentException . class )', '@ Test', '@ Test ( expected = NullPointerException . class )', 'assertThrows ( IllegalArgumentException . class , ( ) - > EventListenerSupport . create ( String . class ) ) ;', 'import static org . junit . Assert . assertEquals ;', 'assertThrows ( NullPointerException . class , ( ) - > EventListenerSupport . create ( null ) ) ;', 'import org . junit . Test ;', 'import static org . junit . jupiter . api . Assertions . assertSame ;']","['import org . junit . Before ;', 'import org . junit . jupiter . api . Test ;', 'import static org . junit . Assert . assertTrue ;', 'import static org . junit . jupiter . api . Assertions . assertFalse ;', 'import static org . junit . Assert . assertEquals ;', '@ BeforeEach', 'import org . junit . Test ;', 'import org . junit . jupiter . api . BeforeEach ;', 'import static org . junit . Assert . assertFalse ;', 'import static org . junit . jupiter . api . Assertions . assertTrue ;']","['+ toString ( actualTypes ) , Arrays . equals ( actualTypes , c', 'import org . junit . jupiter . api . Test ;', 'import static org . junit . Assert . assertNull ;', '@ BeforeEach', 'assertTrue ( toString ( c . getParameterTypes ( ) ) + "" not equals ""', 'import org . junit . jupiter . api . BeforeEach ;', 'import org . junit . Before ;', 'import static org . junit . jupiter . api . Assertions . fail ;', '. getParameterTypes ( ) ) ) ;', 'toString ( c . getParameterTypes ( ) ) + "" not equals "" + toString ( actualTypes ) ) ;']","['import org . junit . Test ;', 'import org . junit . jupiter . api . Test ;', 'assertEquals ( ""Parser get method incorrectly implemented"" , parser , composite . getParser ( ) ) ;', 'import static org . junit . jupiter . api . Assertions . assertEquals ;', 'assertEquals ( ""Formatter get method incorrectly implemented"" , formatter , composite . getFormatter ( ) ) ;', 'assertEquals ( formatter , composite . getFormatter ( ) , ""Formatter get method incorrectly implemented"" ) ;', 'import static org . junit . Assert . assertEquals ;', 'assertEquals ( parser , composite . getParser ( ) , ""Parser get method incorrectly implemented"" ) ;', 'assertTrue ( ""equal , equals ( ) "" , emf . equals ( other ) ) ;', 'assertEquals ( expected . toString ( ) , emf . format ( args ) , String . valueOf ( locale ) ) ;']","['import static org . junit . Assert . assertSame ;', 'import org . junit . jupiter . api . Test ;', 'import static org . junit . Assert . assertNull ;', 'import static org . junit . jupiter . api . Assertions . assertFalse ;', 'import static org . junit . Assert . assertTrue ;', 'import static org . junit . jupiter . api . Assertions . assertNull ;', 'import static org . junit . Assert . assertEquals ;', 'import static org . junit . jupiter . api . Assertions . assertNotNull ;', 'import org . junit . Test ;', 'import static org . junit . jupiter . api . Assertions . assertSame ;']","['Fraction . getFraction ( null ) ;', 'import org . junit . jupiter . api . Test ;', 'import static org . junit . Assert . assertSame ;', 'import static org . junit . jupiter . api . Assertions . assertFalse ;', '@ Test ( expected = IllegalArgumentException . class )', 'import static org . junit . jupiter . api . Assertions . fail ;', 'import static org . junit . Assert . assertTrue ;', '@ Test', 'import static org . junit . Assert . fail ;', 'assertThrows ( IllegalArgumentException . class , ( ) - > Fraction . getFraction ( null ) ) ;']","['@ Test ( expected = NullPointerException . class )', 'import org . junit . jupiter . api . Test ;', 'new MutableBoolean ( null ) ;', 'import static org . junit . jupiter . api . Assertions . assertFalse ;', 'import static org . junit . Assert . assertTrue ;', 'assertThrows ( NullPointerException . class , ( ) - > mutBool . setValue ( null ) ) ;', 'import static org . junit . Assert . assertEquals ;', '@ Test', 'import org . junit . Test ;', 'assertThrows ( NullPointerException . class , ( ) - > new MutableBoolean ( null ) ) ;']","['private int low ( ) { return network ( ) + ( isInclusiveHostCount ( ) ? 0 : 1 ) ; }', 'broadcast ( ) - network ( ) > 1 ? broadcast ( ) - 1 : 0 ) ;', 'public int getAddressCount ( ) { return ( broadcast ( ) - low ( ) + ( isInclusiveHostCount ( ) ? 1 : 0 ) ) ; }', 'int count = broadcast ( ) - network ( ) + ( isInclusiveHostCount ( ) ? 1 : - 1 ) ;', 'private int high ( ) { return broadcast ( ) - ( isInclusiveHostCount ( ) ? 0 : 1 ) ; }', 'broadcast ( ) - network ( ) > 1 ? network ( ) + 1 : 0 ) ;', '}', 'private int high ( ) {', 'return ( isInclusiveHostCount ( ) ? network ( ) :', 'return count < 0 ? 0 : count ;']","['replyLines = new ArrayList < String > ( ) ;', 'private final String encoding ;', 'this ( ) ;', 'this ( DEFAULT ENCODING ) ;', 'newReplyString = false ;', 'replyLines = new ArrayList < String > ( ) ;', 'setDefaultPort ( DEFAULT PORT ) ;', 'newReplyString = false ;', 'commandSupport = new ProtocolCommandSupport ( this ) ;', 'setDefaultPort ( DEFAULT PORT ) ;']","['new BufferedReader ( new InputStreamReader ( input , getControlEncoding ( ) ) ) ;', 'new CRLFLineReader ( new InputStreamReader ( input , getControlEncoding ( ) ) ) ;', 'import org . apache . commons . net . io . CRLFLineReader ;']","['dataConnectionMode ! = PASSIVE LOCAL DATA CONNECTION MODE )', '}', 'if ( activeMaxPort = = activeMinPort )', 'if ( dataTimeout > = 0 ) {', 'if ( !FTPReply . isPositiveIntermediate ( rnfr ( from ) ) )', 'if ( ( socket = openDataConnection ( FTPCommand . NLST , getListArguments ( pathname ) ) ) = = null ) {', 'if ( !FTPReply . isPositiveIntermediate ( replyCode ) )', 'if ( FTPReply . isPositiveCompletion ( replyCode ) ) {', 'if ( dataTimeout > = 0 )', 'if ( activeMaxPort = = activeMinPort ) {']","['boolean ok = completePendingCommand ( ) ;', 'boolean ok = completePendingCommand ( ) ;']","['private String host ;', 'super . connectAction ( ) ;', 'throw new IOException ( ""Invalid response from proxy : "" + resp ) ;', 'tunnelHandshake ( this . getPassiveHost ( ) , this . getPassivePort ( ) , is , os ) ;', 'if ( resp . startsWith ( ""HTTP / "" ) & & resp . length ( ) > = 12 ) {', 'throw new IOException ( ""Invalid response from proxy : "" + resp ) ;', 'for ( String line = reader . readLine ( ) ; line ! = null', 'socket = new Socket ( proxyHost , proxyPort ) ;', 'this . host = host ;', 'if ( ( getRestartOffset ( ) > 0 ) & & !restart ( getRestartOffset ( ) ) ) {']","['return bytesAvailable ;', 'return bytesAvailable + super . available ( ) ;']","['continue ;', 'continue sendPacket ;']","['{', 'do {', 'while ( timeouts < maxTimeouts )', 'while ( timeouts < maxTimeouts ) ;', '}', '} while ( timeouts < maxTimeouts ) ;']","['if ( file = = null )', '}', 'else if ( isType = = MEMBER LIST TYPE ) {', 'if ( file = = null ) {', 'if ( isType = = FILE LIST TYPE )', 'if ( isType = = FILE LIST TYPE ) {', 'if ( !isParsed )', 'if ( !isParsed ) {', '} else if ( isType = = MEMBER LIST TYPE ) {', 'if ( mode = = TFTP . ASCII MODE )']","[""return ( ! ( line . startsWith ( code ) & & line . charAt ( 3 ) = = ' ' ) ) ;"", ""if ( length > REPLY CODE LEN & & line . charAt ( REPLY CODE LEN ) = = ' - ' )"", 'if ( length < 3 ) {', 'public static final int REPLY CODE LEN = 3 ;', ""if ( length > 3 & & line . charAt ( 3 ) = = ' - ' )"", ""return ( ! ( line . length ( ) > REPLY CODE LEN & & line . charAt ( REPLY CODE LEN ) ! = ' - ' & &"", 'code = line . substring ( 0 , 3 ) ;', ""return ( ! ( line . startsWith ( code ) & & line . charAt ( REPLY CODE LEN ) = = ' ' ) ) ;"", ""return ( ! ( line . length ( ) > = 4 & & line . charAt ( 3 ) ! = ' - ' & &"", 'code = line . substring ( 0 , REPLY CODE LEN ) ;']","['private String parsePathname ( String reply )', '}', 'return reply . substring ( begin , end ) ;', 'private static String parsePathname ( String reply )', 'int begin = reply . indexOf ( \'""\' ) + 1 ;', 'return reply . substring ( REPLY CODE LEN + 1 ) ;', 'int end = reply . indexOf ( \'""\' , begin ) ;', 'if ( begin = = - 1 ) {', 'int end = reply . lastIndexOf ( "" \\ "" "" ) ;', 'int begin = reply . indexOf ( \'""\' ) ;']","['"" [ Replacing site local address "" + passiveHost + "" with "" + hostAddress + "" ] \\ n"" ) ;', 'if ( !remote . isSiteLocalAddress ( ) ) {', 'passiveHost = hostAddress ;', 'String hostAddress = remote . getHostAddress ( ) ;', 'if ( host . isSiteLocalAddress ( ) & & !getRemoteAddress ( ) . isSiteLocalAddress ( ) ) {', 'if ( host . isSiteLocalAddress ( ) ) {', 'String hostAddress = getRemoteAddress ( ) . getHostAddress ( ) ;', 'InetAddress remote = getRemoteAddress ( ) ;', 'fireReplyReceived ( 0 ,', '}']","['return param . substring ( 1 , param . length ( ) - 1 ) . replace ( "" \\ "" \\ """" , "" \\ """" ) ;', 'int end ;', 'if ( param . startsWith ( "" \\ """" ) & & param . endsWith ( "" \\ """" ) ) {', 'end = param . length ( ) - 1 ;', '}', '} else {', 'return param . substring ( 1 , end ) . replace ( "" \\ "" \\ """" , "" \\ """" ) ;', 'if ( end ! = - 1 ) {', 'if ( param . endsWith ( "" \\ """" ) ) {', 'end = param . lastIndexOf ( "" \\ "" "" ) ;']","['if ( !remote . isSiteLocalAddress ( ) ) {', 'if ( passiveNatWorkaround ) {', '""Could not parse passive host information . \\ nServer Reply : "" + reply ) ;', 'private boolean passiveNatWorkaround = true ;', 'try {', 'if ( !remote . isSiteLocalAddress ( ) ) {', '"" [ Replacing site local address "" + passiveHost + "" with "" + hostAddress + "" ] \\ n"" ) ;', '}', 'passiveHost = hostAddress ;', '""Could not parse passive host information . \\ nServer Reply : "" + reply ) ;']","['int n = ( rangeCheck ( Integer . parseInt ( matcher . group ( i ) ) , - 1 , 255 ) ) ;', 'int cidrPart = rangeCheck ( Integer . parseInt ( matcher . group ( 5 ) ) , 1 , NBITS ) ;', 'throw new IllegalArgumentException ( ""Value [ "" + value + "" ] not in range ( "" + begin + "" , "" + end + "" ] "" ) ;', 'int n = ( rangeCheck ( Integer . parseInt ( matcher . group ( i ) ) , 0 , 255 ) ) ;', 'int cidrPart = rangeCheck ( Integer . parseInt ( matcher . group ( 5 ) ) , 0 , NBITS ) ;', 'if ( value > = begin & & value < = end ) {', 'if ( value > begin & & value < = end ) {', 'throw new IllegalArgumentException ( ""Value [ "" + value + "" ] not in range [ "" + begin + "" , "" + end + "" ] "" ) ;']","['StringBuilder args = new StringBuilder ( mailboxName ) ;', 'args . append ( DQUOTE ) . append ( datetime ) . append ( DQUOTE ) ;', 'args . append ( "" "" ) . append ( flags ) ;', 'if ( message . startsWith ( DQUOTE S ) & & message . endsWith ( DQUOTE S ) ) {', 'args . append ( datetime ) ;', 'if ( datetime . charAt ( 0 ) = = DQUOTE ) {', 'if ( flags ! = null ) {', 'private static final String DQUOTE S = "" \\ """" ;', 'public boolean append ( String mailboxName , String flags , String datetime , String message ) throws IOException', '{']","['netmask | = ( 1 < < 31 - j ) ;', '}', 'int cidrPart = rangeCheck ( Integer . parseInt ( matcher . group ( 5 ) ) , 1 , NBITS ) ;', 'if ( cidrPart = = 0 & & address ! = 0 ) {', 'throw new IllegalArgumentException ( ""Cannot have / 0 cidr with non - zero address"" ) ;', 'int cidrPart = rangeCheck ( Integer . parseInt ( matcher . group ( 5 ) ) , 0 , NBITS ) ;', 'netmask | = ( 1 < < 31 - j ) ;']","['int count = broadcast ( ) - network ( ) + ( isInclusiveHostCount ( ) ? 1 : - 1 ) ;', 'long b = broadcast ( ) & UNSIGNED INT MASK ;', 'public int getAddressCount ( ) {', 'long n = network ( ) & UNSIGNED INT MASK ;', 'private static final long UNSIGNED INT MASK = 0x0FFFFFFFFL ;', 'if ( countLong > Integer . MAX VALUE ) {', '}', 'return ( int ) countLong ;', 'throw new RuntimeException ( ""Count is larger than an integer : "" + countLong ) ;', 'long count = b - n + ( isInclusiveHostCount ( ) ? 1 : - 1 ) ;']","['new UnixFTPEntryParser ( config )', 'new UnixFTPEntryParser ( config ,', 'parser = new UnixFTPEntryParser ( config ) ;', 'parser = new UnixFTPEntryParser ( config , true ) ;', 'else if ( ukey . indexOf ( FTPClientConfig . SYST UNIX TRIM LEADING ) > = 0 )', 'parser = new UnixFTPEntryParser ( config , false ) ;', 'config ! = null & & FTPClientConfig . SYST UNIX TRIM LEADING . equals ( config . getServerSystemKey ( ) ) )', '}', '{']","['hostname = hostname ;', 'protected String hostname ;', 'hostname = null ;']","['totalBytesSent + = totalThisPacket ;', '}', 'totalBytesReceived + = dataLength ;', 'public long getTotalBytesReceived ( ) {', 'private long totalBytesReceived = 0 ;', 'private long totalBytesSent = 0 ;', 'return totalBytesSent ;', 'totalBytesSent = 0L ;', 'return totalBytesReceived ;', 'totalBytesReceived = 0 ;']","['private int netmask ( ) { return netmask ; }', 'format ( toArray ( address ) ) ,', 'broadcastLong ( ) - networkLong ( ) > 1 ? network ( ) + 1 : 0 ) ;', 'format ( toArray ( netmask ) )', 'private int address ( ) { return address ; }', 'return ( isInclusiveHostCount ( ) ? broadcast :', 'private int broadcast ( ) { return broadcast ; }', 'return format ( toArray ( address ) ) ;', 'return ( isInclusiveHostCount ( ) ? network ( ) :', 'broadcastLong ( ) - networkLong ( ) > 1 ? network + 1 : 0 ) ;']","['return doCommand ( IMAPCommand . LSUB , refName + "" "" + mailboxName ) ;', 'return doCommand ( IMAPCommand . LSUB , quoteString ( refName ) + "" "" + quoteString ( mailboxName ) ) ;', 'return doCommand ( IMAPCommand . LIST , refName + "" "" + mailboxName ) ;', 'return doCommand ( IMAPCommand . LIST , quoteString ( refName ) + "" "" + quoteString ( mailboxName ) ) ;']","['System . out . println ( ""Usage : java - jar examples . jar < exampleClass > < exampleClass parameters > "" ) ;', '| | name . equals ( ""examples / mail / IMAPUtils . class"" )', '| | name . equals ( ""examples / Main . class"" ) ) {', '| | name . equals ( ""examples / Main . class"" ) ) {', 'System . out . println ( ""Usage : java - jar commons - net - examples - m . n . jar < exampleClass > < exampleClass parameters > "" ) ;', 'imap . disconnect ( ) ;', 'final IMAPClient imap = IMAPUtils . imapLogin ( uri , 10000 , null ) ;', 'System . out . println ( ""Using secure protocol"" ) ;', 'String username = userpass [ 0 ] ;', 'try {']","['return true ;', 'volatile int total = 0 ;', 'String [ ] parts = line . split ( "" "" , 2 ) ;', 'DATE FORMAT . setTimeZone ( TimeZone . getTimeZone ( ""GMT"" ) ) ;', ""bw . append ( ' ' ) ;"", 'break ;', 'if ( path = = null | | path . length ( ) < 1 ) {', 'import java . text . ParseException ;', 'throw new IOException ( ""mailbox file : "" + mbox + "" already exists!"" ) ;', '{']","['os . close ( ) ;', 'is . close ( ) ;']","['f ) ;', 'assertNotNull ( ""Failed to parse "" + test , f ) ;', 'assertNotNull ( ""Failed to parse "" + test ,']","['Reader rdr = retrieveArticle ( a , ai ) ;', 'public Reader retrieveArticleInfo ( int lowArticleNumber , int highArticleNumber ) throws IOException {', 'ai2ap ( ai , ap ) ;', 'return retrieveHeader ( header , ( long ) lowArticleNumber , ( long ) highArticleNumber ) ;', 'ArticleInfo ai = ap2ai ( ap ) ;', 'return retrieveArticleInfo ( ( long ) lowArticleNumber , ( long ) highArticleNumber ) ;', 'private BufferedReader retrieve ( int command ,', 'public Reader retrieveArticle ( int articleNumber , ArticlePointer pointer ) throws IOException {', 'public Reader retrieveArticle ( int a ) throws IOException {', 'public Reader retrieveArticle ( int articleNumber ) throws IOException {']","['public AuthenticatingSMTPClient ( ) throws NoSuchAlgorithmException', 'public AuthenticatingSMTPClient ( )', 'public AuthenticatingSMTPClient ( String protocol ) throws NoSuchAlgorithmException {', 'public AuthenticatingSMTPClient ( String protocol ) {', 'public AuthenticatingSMTPClient ( String protocol , String encoding ) throws NoSuchAlgorithmException {', 'public AuthenticatingSMTPClient ( String protocol , String encoding ) {']","['public boolean execTLS ( ) throws SSLException , IOException', 'public boolean execTLS ( ) throws IOException']","['Reader rdr = retrieveArticle ( a , ai ) ;', 'public boolean selectArticle ( ArticlePointer pointer ) throws IOException {', 'ai2ap ( ai , ap ) ;', 'Reader rdr = retrieveArticle ( articleId , ai ) ;', 'Reader rdr = retrieveArticleBody ( a , ai ) ;', 'ai2ap ( ai , pointer ) ;', 'ArticleInfo ai = ap2ai ( ap ) ;', 'Reader rdr = retrieveArticleBody ( articleId , ai ) ;', 'public boolean selectPreviousArticle ( ArticlePointer ap ) throws IOException {', 'public boolean selectNextArticle ( ArticlePointer pointer ) throws IOException {']","['return thread ( java . util . Arrays . asList ( messages ) ) ;', 'return thread ( Arrays . asList ( messages ) ) ;', 'return null ;', 'if ( idTable . isEmpty ( ) ) {', '}', 'if ( messages = = null ) {', 'import java . util . Arrays ;', '@ Test', 'Iterable < Threadable > messages = null ;', 'public void testNullArray ( ) {']","['System . out . println ( article . getSubject ( ) + """" + article . getFrom ( ) + """" + article . getArticleId ( ) ) ;', 'printThread ( article , depth , System . out ) ;', 'System . out . print ( "" = = > "" ) ;', 'public static void printThread ( Article article , int depth , PrintStream ps ) {', '}', 'public static void printThread ( Article article ) {', 'printThread ( article , 0 , System . out ) ;', 'public static void printThread ( Article article , PrintStream ps ) {', 'printThread ( article , 0 , ps ) ;', 'import java . io . PrintStream ;']",['scanner . close ( ) ;'],"['br = ( BufferedReader ) client . retrieveArticleBody ( articleSpec ) ;', 'brBody = client . retrieveArticleBody ( articleNum ) ;', 'BufferedReader br ;', 'brHdr = client . retrieveArticleHeader ( articleNum ) ;', 'while ( ( line = br . readLine ( ) ) ! = null ) {', 'brBody = ( BufferedReader ) client . retrieveArticleBody ( articleSpec ) ;', 'br = client . retrieveArticleBody ( articleNum ) ;', 'if ( brBody ! = null ) {', 'br = client . retrieveArticleHeader ( articleNum ) ;', 'while ( ( line = brHdr . readLine ( ) ) ! = null ) {']",['total + + ;'],"['client . connect ( ""ftp . microsoft . com"" , 1234 ) ;', 'client . connect ( ""www . apache . org"" , 1234 ) ;']","['spy . write ( ch ) ;', 'spy . write ( ch ) ;']","['public void testprintWorkingDirectory ( )', 'public void testPrintWorkingDirectory ( )']","['total + + ;', 'total + + ;', 'brBody = ( BufferedReader ) client . retrieveArticleBody ( articleSpec ) ;', 'brBody = ( BufferedReader ) client . retrieveArticleBody ( articleSpec ) ;']","['MboxListener chunkListener = new MboxListener ( mbox ) ;', 'MboxListener chunkListener = new MboxListener ( mbox ) ;', '}', '}', 'private static final byte [ ] listFilesByteTrace = {', 'private static final byte [ ] listFilesByteTrace = {', 'Assert . assertNull ( t . thread ( messages ) ) ;', 'Assert . assertNull ( t . thread ( messages ) ) ;']","['System . err . println ( ""Usage : TelnetClientExample1 < remote - ip > [ < remote - port > ] "" ) ;', 'System . err . println ( ""Usage : TelnetClientExample < remote - ip > [ < remote - port > ] "" ) ;']","['lastWasCR = false ;', 'client . sendByte ( ch ) ;', 'break ;', 'lastWasCR = false ;', '}', ""case ' \\ n' :"", 'if ( ! lastWasCR ) {']","['outstr . flush ( ) ;', ""outstr . write ( toSend - 'A' + 1 ) ;"", ""if ( toSend = = ' ^ ' ) {"", '}', '} else {', '{', 'System . out . println ( ""Type ^ [ A - Z ] to send the control character ; use ^ ^ to send ^ "" ) ;', 'byte toSend = buff [ 1 ] ;', 'outstr . write ( toSend ) ;']","['else if ( ( new String ( buff , 0 , ret read ) ) . startsWith ( ""UNSPY"" ) )', 'else if ( line . startsWith ( ""OPT"" ) )', 'else if ( ( new String ( buff , 0 , ret read ) ) . startsWith ( ""UNREGISTER"" ) )', 'else if ( line . startsWith ( ""UNREGISTER"" ) )', 'else if ( ( new String ( buff , 0 , ret read ) ) . startsWith ( ""REGISTER"" ) )', 'final String line = new String ( buff , 0 , ret read ) ;', 'else if ( ( new String ( buff , 0 , ret read ) ) . startsWith ( ""SPY"" ) )', 'else if ( line . startsWith ( ""UNSPY"" ) )', 'if ( ( new String ( buff , 0 , ret read ) ) . startsWith ( ""AYT"" ) )', 'else if ( line . startsWith ( ""SPY"" ) )']","['listener . bytesTransferred ( total , chars , streamSize ) ;', 'listener . bytesTransferred ( total , 1 , streamSize ) ;', 'import java . io . Reader ;', 'import java . io . CharArrayReader ;', '@ Test', 'package org . apache . commons . net . util ;', 'this . expectedTotal = totalBytesTransferred ;', 'long streamSize = 0 ;', 'this . expectedSize = streamSize ;', '}']","['while ( ( bytes = source . read ( buffer ) ) ! = - 1 )', 'int singleChar = source . read ( ) ;', 'while ( ( chars = source . read ( buffer ) ) ! = - 1 )', 'total + = numChars ;', 'total + = bytes ;', 'while ( ( numBytes = source . read ( buffer ) ) ! = - 1 )', 'dest . write ( bytes ) ;', 'int singleByte = source . read ( ) ;', 'dest . write ( chars ) ;', 'if ( singleChar < 0 ) {']","['char [ ] buffer = new char [ bufferSize > = 0 ? bufferSize : DEFAULT COPY BUFFER SIZE ] ;', 'byte [ ] buffer = new byte [ bufferSize > 0 ? bufferSize : DEFAULT COPY BUFFER SIZE ] ;', 'byte [ ] buffer = new byte [ bufferSize > = 0 ? bufferSize : DEFAULT COPY BUFFER SIZE ] ;', 'char [ ] buffer = new char [ bufferSize > 0 ? bufferSize : DEFAULT COPY BUFFER SIZE ] ;', 'Assert . assertEquals ( ""Wrong bytes"" , expectedBytes , bytesTransferred ) ;', 'this . expectedTotal = totalBytesTransferred ;', '@ Test', 'Util . copyReader ( rdr , dest , 2 , 0 , listener ) ;', 'final int bufflen = buff . length ;', ""final char [ ] buff = new char [ ] { 'a' , 'b' , 'c' , 'd' } ;""]","['Util . copyReader ( rdr , dest , 0 , 0 , listener ) ;', 'Util . copyReader ( rdr , dest , 0 , 0 , listener ) ;', 'Util . copyReader ( rdr , dest , 2 , 0 , listener ) ;', 'Util . copyReader ( rdr , dest , 2 , 0 , listener ) ;', 'Util . copyStream ( is , dst , 20 , 0 , listener ) ;', 'Util . copyStream ( is , dst , 20 , 0 , listener ) ;', 'Util . copyReader ( rdr , dest , 20 , 0 , listener ) ;', 'Util . copyReader ( rdr , dest , 20 , 0 , listener ) ;', 'Util . copyStream ( is , dst , - 1 , 0 , listener ) ;', 'Util . copyStream ( is , dst , - 1 , 0 , listener ) ;']","['else if ( negotiation code = = TelnetNotificationHandler . RECEIVED WONT )', 'break ;', 'command = ""WILL"" ;', 'command = ""WILL"" ;', 'else if ( negotiation code = = TelnetNotificationHandler . RECEIVED DONT )', 'command = ""COMMAND"" ;', 'if ( negotiation code = = TelnetNotificationHandler . RECEIVED DO )', 'case TelnetNotificationHandler . RECEIVED WILL :', '}', 'case TelnetNotificationHandler . RECEIVED WONT :']","['private boolean isInRange ( int address ) {', 'public boolean isInRange ( int address ) {']","['m . invoke ( null , ( Object ) args2 ) ;', 'try {', 'public static void main ( String [ ] args ) throws Exception {', 'if ( cause ! = null ) {', 'throw cause ;', '}', 'public static void main ( String [ ] args ) throws Throwable {', 'm . invoke ( null , ( Object ) args2 ) ;', '} else {', 'Throwable cause = ite . getCause ( ) ;']","['return true ;', 'if ( printHash ) {', 'try {', 'for ( argIdx = 0 ; argIdx < args . length ; argIdx + + ) {', 'bw . append ( CRLF ) ;', 'System . err . println ( ""Usage : IMAPExportMbox [ - LF | - CRLF ] [ - c n ] [ - r n ] [ # ] imap [ s ] : / / user : password @ host [ : port ] / folder / path < mboxfile > [ sequence - set ] [ itemnames ] "" ) ;', 'imap . removeProtocolCommandListener ( listener ) ;', 'final String sequenceSet = argCount > 2 ? args [ argIdx + + ] : ""1 : * "" ;', 'final URI uri = URI . create ( args [ 0 ] ) ;', 'private static final String LF = "" \\ n"" ;']","['public int [ ] startSubnegotiationRemote ( )', 'return null ;', 'public int [ ] startSubnegotiationLocal ( )', '}', '{', 'int suboptionLength )', '@ Override', 'public int [ ] answerSubnegotiation ( int suboptionData [ ] ,', 'return null ;', 'public int [ ] startSubnegotiationLocal ( )']","['return initiateListParsing ( entryParser , pathname ) ;', 'if ( entryParser = = null | | ( parserKey ! = null & & ! entryParserKey . equals ( parserKey ) ) ) {', 'if ( entryParser = = null | | ! entryParserKey . equals ( parserKey ) ) {', 'FTPFileEntryParser getEntryParser ( ) {', 'void createParser ( String parserKey ) throws IOException {', 'createParser ( parserKey ) ;', '}', 'return entryParser ;', 'return initiateListParsing ( entryParser , pathname ) ;', 'assertNull ( client . getEntryParser ( ) ) ;']","['fmt . format ( "" % - 8s % - 8s"" , getGroup ( ) , getUser ( ) ) ;', 'fmt . format ( "" % - 8s % - 8s"" , getUser ( ) , getGroup ( ) ) ;']","['cal . set ( Calendar . MILLISECOND , 0 ) ;', 'cal . set ( Calendar . MILLISECOND , 0 ) ;', 'Integer . parseInt ( hr ) ) ;', 'cal . set ( Calendar . HOUR OF DAY , 0 ) ;', 'cal . set ( Calendar . MONTH ,', 'cal . set ( Calendar . SECOND , 0 ) ;', 'cal . set ( Calendar . YEAR ,', 'cal . set ( Calendar . MONTH , month ) ;', 'cal . set ( Calendar . MINUTE ,', 'cal . set ( Calendar . YEAR , year ) ;']","['cal . set ( Calendar . DATE , Integer . parseInt ( da ) ) ;', 'cal . set ( Calendar . DAY OF MONTH , Integer . parseInt ( da ) ) ;', 'now . add ( Calendar . DATE , 1 ) ;', 'now . add ( Calendar . DAY OF MONTH , 1 ) ;', 'first . add ( Calendar . DATE , 2 ) ;', 'first . add ( Calendar . DAY OF MONTH , 2 ) ;', 'cal . set ( Calendar . DATE , 2 ) ;', 'cal . set ( Calendar . DAY OF MONTH , 2 ) ;', 'caltemp . add ( Calendar . DATE , 1 ) ;', 'caltemp . add ( Calendar . DAY OF MONTH , 1 ) ;']","['+ "" ( \\ \\ S * ) ( \\ \\ s * . * ) "" ;', '+ "" ( \\ \\ S * ) ( \\ \\ s * . * ) "" ;', '+ "" ( \\ \\ S + ) \\ \\ s * ""', '+ "" ( \\ \\ S + ) \\ \\ s * ""', '+ "" \\ \\ s * ""', '+ "" \\ \\ s * ""', '+ "" ( ( \\ \\ d \\ \\ d \\ \\ d \\ \\ d ) | ( ( ? : [ 01 ] \\ \\ d ) | ( ? : 2 [ 0123 ] ) ) : ( [ 012345 ] \\ \\ d ) ) \\ \\ s""', '+ "" ( ( \\ \\ d \\ \\ d \\ \\ d \\ \\ d ) | ( ( ? : [ 01 ] \\ \\ d ) | ( ? : 2 [ 0123 ] ) ) : ( [ 012345 ] \\ \\ d ) ) \\ \\ s""', '+ "" ( ( ? : [ 012 ] \\ \\ d * ) | ( ? : 3 [ 01 ] ) ) \\ \\ s * ""', '+ "" ( ( ? : [ 012 ] \\ \\ d * ) | ( ? : 3 [ 01 ] ) ) \\ \\ s * ""']","[""outstr . write ( toSend - 'A' + 1 ) ;"", ""outstr . write ( toSend - 'A' + 1 ) ;""]","['if ( lenient ) {', 'serverTimeZoneId = args [ + + base ] ;', 'config . setLenientFutureDates ( true ) ;', '"" - Z timezone - set the server timezone for parsing LIST responses \\ n"" +', 'String serverTimeZoneId = null ;', 'if ( serverTimeZoneId ! = null ) {', 'config . setLenientFutureDates ( lenient ) ;', '}', 'else if ( args [ base ] . equals ( "" - Z"" ) ) {', 'if ( lenient | | serverTimeZoneId ! = null ) {']","['boolean mlst = false , mlsd = false ;', 'try {', 'boolean mlst = false , mlsd = false , mdtm = false ;', 'System . out . println ( f . toFormattedString ( ) ) ;', 'sdf = new SimpleDateFormat ( ""yyyyMMddHHmmss . SSS"" ) ;', 'sdf = new SimpleDateFormat ( ""yyyyMMddHHmmss"" ) ;', '}', 'return gc ;', 'if ( gmtTimeStamp . contains ( "" . "" ) ) {', 'else if ( args [ base ] . equals ( "" - m"" ) ) {']","['assertNull ( ""Should have Failed to parse "" + test ,', 'assertNull ( ""Should have Failed to parse < "" + test + "" > "" ,']","['continue ;', 'if ( entry . length ( ) > 1 ) {', 'String [ ] factparts = fact . split ( "" = "" ) ;', 'continue ;', 'file . setTimestamp ( gc ) ;', 'return file ;', 'String [ ] facts = parts [ 0 ] . split ( "" ; "" ) ;', 'if ( entry . startsWith ( "" "" ) ) {', 'if ( parts . length ! = 2 ) {', 'return null ;']","['fmt . format ( "" % 1$tZ"" , timestamp ) ;', 'fmt . format ( "" : % 1$tS"" , timestamp ) ;', 'fmt . format ( "" % 1$tY - % 1$tm - % 1$td % 1$tH : % 1$tM : % 1$tS"" , timestamp ) ;', 'import java . util . Date ;', ""sb . append ( ' ' ) ;"", 'fmt . format ( "" % 1$tY - % 1$tm - % 1$td"" , timestamp ) ;', 'if ( timestamp . isSet ( Calendar . MINUTE ) ) {', 'if ( timestamp . isSet ( Calendar . MILLISECOND ) ) {', '}', 'fmt . format ( "" % 1$tH"" , timestamp ) ;']","['"" - m - list file details using MLSD ( remote is used as the pathname if provided ) \\ n"" +', '"" - m - list file details using MDTM ( remote is used as the pathname if provided ) \\ n"" +']","['newStamp . setTime ( original ) ;', 'public String toFormattedString ( final String timezone )', 'TimeZone newZone = TimeZone . getTimeZone ( timezone ) ;', '}', 'Calendar newStamp = Calendar . getInstance ( newZone ) ;', 'Date original = timestamp . getTime ( ) ;', '{', 'return toFormattedString ( null ) ;', 'if ( timezone ! = null ) {', 'timestamp = newStamp ;']","['System . out . println ( f . toFormattedString ( ) ) ;', '}', '}', 'System . out . println ( f . getRawListing ( ) ) ;', 'System . out . println ( f . getRawListing ( ) ) ;', 'if ( f ! = null ) {', 'if ( f ! = null ) {', 'else if ( listFiles | | mlsd | | mdtm | | mlst | | listNames )', 'config . setLenientFutureDates ( lenient ) ;', 'if ( listFiles ) {']","['return file ;', 'file . setTimestamp ( MLSxEntryParser . parseGMTdateTime ( reply ) ) ;', 'return null ;', '}', 'if ( FTPReply . isPositiveCompletion ( mdtm ( pathname ) ) ) {', 'public FTPFile mdtmFile ( String pathname ) throws IOException {', 'FTPFile file = new FTPFile ( ) ;', 'String reply = getReplyStrings ( ) [ 0 ] . substring ( 4 ) ;', 'file . setName ( pathname ) ;', 'file . setRawListing ( reply ) ;']","['try {', 'System . out . println ( f . getRawListing ( ) ) ;', 'sdf = new SimpleDateFormat ( ""yyyyMMddHHmmss . SSS"" ) ;', 'FTPFile f = ftp . mdtmFile ( remote ) ;', 'sdf = new SimpleDateFormat ( ""yyyyMMddHHmmss"" ) ;', '}', 'return gc ;', 'if ( gmtTimeStamp . contains ( "" . "" ) ) {', 'import java . util . Calendar ;', 'import java . util . GregorianCalendar ;']","['TimeZone GMT = TimeZone . getTimeZone ( ""GMT"" ) ;', 'if ( !hasMillis ) {', 'SimpleDateFormat sdf ;', 'hasMillis = false ;', '}', 'TimeZone GMT = TimeZone . getTimeZone ( ""GMT"" ) ;', 'final boolean hasMillis ;', 'final SimpleDateFormat sdf ;', 'gc . clear ( Calendar . MILLISECOND ) ;', 'hasMillis = true ;']","['try {', 'final Calendar parsed = parseGMTdateTime ( factvalue ) ;', 'gc . setTime ( sdf . parse ( timestamp ) ) ;', 'return null ;', 'import java . text . ParseException ;', 'import java . text . ParsePosition ;', 'return null ;', 'import java . util . Date ;', 'if ( !hasMillis ) {', 'final Date parsed = sdf . parse ( timestamp , pos ) ;']","['"" - rw - r - - r - - 1 root root 190144 Apr 27 2001 zxJDBC - 2 . 0 . 1b1 . zip""', '"" - C - - E - - - - - FTP A QUA1I1 18128 41 Aug 12 13 : 56 QUADTEST2"" ,', '"" - C - - E - - - - - FTP A QUA1I1 18128 41 Aug 12 13 : 56 QUADTEST2""', '"" - rw - r - - r - - 1 root root 190144 Apr 27 2001 zxJDBC - 2 . 0 . 1b1 . zip"" ,', '""drwxr - xr - x 2 root root 4096 Aug 26 20 zztpp"" ,', '"" - C - - E - - - - - FTP A QUA1I1 18128 41 Apr 1 2014 QUADTEST3""', '""drwxr - xr - x 2 root root 4096 Aug 26 201O zztpp"" ,', '""drwxr - xr - x 2 root root 4096 Aug 26 201 zztpp"" ,']","['int month = pos / 4 ;', 'cal . clear ( missingUnit ) ;', 'int pos = MONTHS . indexOf ( mo ) ;', 'final int missingUnit ;', 'missingUnit = Calendar . SECOND ;', 'int month = pos / 4 ;', 'missingUnit = Calendar . HOUR OF DAY ;', 'int pos = MONTHS . indexOf ( mo ) ;', 'public void testPrecisionDays ( ) {', 'assertFalse ( ""Expected hour to be unset"" , stamp . isSet ( Calendar . HOUR OF DAY ) ) ;']",['assertNotNull ( file ) ;'],['assertNotNull ( stamp ) ;'],"['setPrecision ( defaultDateFormat , working ) ;', '}', 'break ;', 'if ( lastChar = = 0 ) {', ""case 'm' :"", ""case 's' :"", 'return ;', 'String pattern = dateFormat . toPattern ( ) ;', 'final String FORMAT CHARS = ""HmsS"" ;', 'lastChar = ch ;']","['private void setRecentDateFormat ( String format ) {', 'final String FORMAT CHARS = ""SsmHdM"" ;', 'setPrecision ( defaultDateFormat , working ) ;', 'this . defaultDateFormat = null ;', '}', 'private static int getEntry ( SimpleDateFormat dateFormat ) {', 'this . recentDateFormat = new SimpleDateFormat ( recentFormatString , dfs ) ;', '}', 'this . recentDateFormat = new SimpleDateFormat ( format ) ;', 'this . recentDateFormat = new SimpleDateFormat ( format ) ;']","['break ;', 'final int field = CALENDAR UNITS [ index - 1 ] ;', 'final int value = working . get ( field ) ;', 'if ( index < = 0 ) {', '}', 'final int value = working . get ( field ) ;', 'for ( i = 0 ; i < index ; i + + ) {', '}', 'if ( value ! = 0 ) {', '} else {']","['assertNotNull ( ""Failed to parse time in "" + listEntry , stamp ) ;', 'MINUTE ( Calendar . MINUTE ) ,', '}', 'assertTrue ( ""Expected set "" + expectedPrecision + "" in "" + listEntry , stamp . isSet ( expectedPrecision . unit ) ) ;', 'assertNotNull ( ""Could not parse "" + listEntry , file ) ;', 'FTPFile file = getParser ( ) . parseFTPEntry ( listEntry ) ;', 'HOUR OF DAY ( Calendar . HOUR OF DAY ) ,', 'import java . util . Calendar ;', 'MILLISECOND ( Calendar . MILLISECOND ) ,', 'protected enum CalendarUnit {']","['assertFalse ( ""Expected not set "" + prevUnit + "" in "" + listEntry , stamp . isSet ( prevUnit . unit ) ) ;', 'if ( ordinal > 0 ) {', '}', 'final int ordinal = expectedPrecision . ordinal ( ) ;', 'final CalendarUnit prevUnit = CalendarUnit . values ( ) [ ordinal - 1 ] ;']","['final CalendarUnit prevUnit = CalendarUnit . values ( ) [ ordinal - 1 ] ;', 'final CalendarUnit prevUnit = values [ ordinal - 1 ] ;', 'assertTrue ( ""Expected set "" + expectedPrecision + "" in "" + listEntry , stamp . isSet ( expectedPrecision . unit ) ) ;', 'assertTrue ( ""Expected set "" + unit + "" in "" + listEntry , stamp . isSet ( unit . unit ) ) ;', '}', 'for ( int i = ordinal ; i < values . length ; i + + ) {', 'final CalendarUnit [ ] values = CalendarUnit . values ( ) ;', 'CalendarUnit unit = values [ i ] ;']","['assertFalse ( ""Expected hour to be unset"" , stamp . isSet ( Calendar . HOUR OF DAY ) ) ;', 'testPrecision ( "" - C - - E - - - - - FTP B QUA1I1 18128 5000000000 Aug 12 2014 QUADTEST"" , CalendarUnit . DAY OF MONTH ) ;', 'assertNotNull ( stamp ) ;', 'testPrecision ( "" - C - - E - - - - - FTP B QUA1I1 18128 5000000000 Aug 12 13 : 56 QUADTEST"" , CalendarUnit . MINUTE ) ;', 'assertTrue ( ""Expected day to be set"" , stamp . isSet ( Calendar . DAY OF MONTH ) ) ;', 'assertNotNull ( file ) ;', 'FTPFile file = getParser ( ) . parseFTPEntry ( "" - C - - E - - - - - FTP B QUA1I1 18128 5000000000 Aug 12 2014 QUADTEST"" ) ;', 'assertFalse ( ""Expected second to be unset"" , stamp . isSet ( Calendar . SECOND ) ) ;', 'assertTrue ( ""Expected minute to be set"" , stamp . isSet ( Calendar . MINUTE ) ) ;', 'FTPFile file = getParser ( ) . parseFTPEntry ( "" - C - - E - - - - - FTP B QUA1I1 18128 5000000000 Aug 12 13 : 56 QUADTEST"" ) ;']","['file . getSize ( ) ) ;', 'assertEquals ( 5000000000L , file . getSize ( ) ) ;', 'assertEquals ( ""QUA1I1"" ,', 'assertEquals ( ""QUADTEST"" , file . getName ( ) ) ;', 'assertTrue ( ""Should be a file . "" ,', 'assertTrue ( ""Should be a file . "" , file . isFile ( ) ) ;', 'file . getUser ( ) ) ;', 'assertEquals ( ""QUA1I1"" , file . getUser ( ) ) ;', 'file . getGroup ( ) ) ;', 'assertEquals ( ""18128"" , file . getGroup ( ) ) ;']","['public void testPrecisionDays ( ) {', 'public void testDefaultPrecision ( ) {', 'public void testPrecisionMinutes ( ) {', 'public void testRecentPrecision ( ) {', 'abstract public void testDefaultPrecision ( ) ;', 'abstract public void testRecentPrecision ( ) ;', 'testPrecision ( ""Type = dir ; Modify = 20141022065102 . 999 ; UNIX . mode = 0775 ; source"" , CalendarUnit . MILLISECOND ) ;', 'public void testDefaultPrecision ( ) {', '}', 'testPrecision ( ""Type = dir ; Modify = 20141022065102 ; UNIX . mode = 0775 ; source"" , CalendarUnit . SECOND ) ;']","['String [ ] settings )', 'public ListingFunctionalTest ( String arg0 , String [ ] settings )', 'assertTrue ( names . toString ( ) ,', 'assertTrue ( files . toString ( ) , findByName ( files , validFilename ) ) ;', 'lnames . contains ( validFilename ) ) ;', 'suite . addTest ( new ListingFunctionalTest ( method . getName ( ) , element ) ) ;', 'suite . addTest ( new ListingFunctionalTest (', 'assertTrue ( names . toString ( ) , findByName ( names , validFilename ) ) ;', 'findByName ( names , validFilename ) ) ;', '}']","['FTPClientConfig config = new FTPClientConfig ( ) ;', '}', 'System . out . println ( f . toFormattedString ( displayTimeZoneId ) ) ;', 'serverType = args [ + + base ] ;', 'boolean mlst = false , mlsd = false , mdtm = false ;', 'saveUnparseable = true ;', 'config . setUnparseableEntries ( saveUnparseable ) ;', '} else {', 'config = new FTPClientConfig ( serverType ) ;', 'System . out . println ( f . toFormattedString ( displayTimeZoneId ) ) ;']","['if ( f . isValid ( ) ) {', 'System . out . println ( f . toFormattedString ( displayTimeZoneId ) ) ;', '}', '} else {', 'System . out . println ( "" [ Unparseable ] "" ) ;', 'System . out . println ( f . toFormattedString ( displayTimeZoneId ) ) ;', 'return getRawListing ( ) ;', 'return "" [ Invalid : could not parse file entry ] "" ;', 'if ( permissions = = null ) {', 'return false ;']","['final MboxListener chunkListener = mbox = = null ? null : new MboxListener ( mbox , eol , printHash ) ;', 'System . err . println ( "" [ "" + total + "" ] "" + firstLine ) ;', 'System . err . println ( ""Usage : IMAPExportMbox [ - LF | - CRLF ] [ - c n ] [ - r n ] [ # ] imap [ s ] : / / user : password @ host [ : port ] / folder / path < mboxfile > [ sequence - set ] [ itemnames ] "" ) ;', 'printMarker = true ;', 'MboxListener ( File mbox , String eol , boolean printHash ) throws IOException {', 'volatile String lastFetched ;', 'final MboxListener chunkListener = mbox = = null ? null : new MboxListener ( mbox , eol , printHash , printMarker ) ;', 'this . printMarker = printMarker ;', 'MboxListener ( File mbox , String eol , boolean printHash , boolean printMarker ) throws IOException {', 'if ( chunkListener ! = null ) {']","['final MboxListener chunkListener = mbox = = null ? null : new MboxListener ( mbox , eol , printHash , printMarker ) ;', 'chunkListener = null ;', 'if ( mbox ! = null ) {', 'final File mbox = new File ( file ) ;', 'MboxListener ( File mbox , String eol , boolean printHash , boolean printMarker ) throws IOException {', '}', 'throw new IOException ( ""mailbox file : "" + mbox + "" already exists!"" ) ;', 'chunkListener = new MboxListener ( new BufferedWriter ( new FileWriter ( mbox ) ) , eol , printHash , printMarker ) ;', '}', 'chunkListener = new MboxListener ( new BufferedWriter ( new FileWriter ( mbox , false ) ) , eol , printHash , printMarker ) ;']","['chunkListener . close ( ) ;', 'super . protocolReplyReceived ( event ) ;', 'System . out . println ( line ) ;', 'import org . apache . commons . net . ProtocolCommandEvent ;', 'final PrintCommandListener listener = new PrintCommandListener ( System . out , true ) ;', '} ;', 'imap . removeProtocolCommandListener ( listener ) ;', 'final PrintCommandListener listener = new PrintCommandListener ( System . out , true ) {', 'if ( chunkListener ! = null ) {', 'public void protocolReplyReceived ( ProtocolCommandEvent event ) {']","['int argCount = args . length - argIdx ;', 'StringBuilder sb = new StringBuilder ( ) ;', 'final String itemNames = argCount > 3 ? args [ argIdx + + ] : "" ( INTERNALDATE BODY . PEEK [ ] ) "" ;', 'itemNames = "" ( INTERNALDATE BODY . PEEK [ ] ) "" ;', 'sb . append ( args [ argIdx + + ] ) ;', 'if ( i > 4 ) {', '}', 'final String itemNames ;', 'if ( argCount > 3 ) {', '} else {']","['chunkListener = new MboxListener ( new BufferedWriter ( new FileWriter ( mbox , true ) ) , eol , printHash , printMarker ) ;', 'String date = m . group ( PATID DATE GROUP ) ;', 'MboxListener ( BufferedWriter bw , String eol , boolean printHash , boolean printMarker ) throws IOException {', 'private static final Pattern PATSEQ = Pattern . compile ( "" \\ \\ * ( \\ \\ d + ) "" ) ;', 'chunkListener = new MboxListener ( new BufferedWriter ( new FileWriter ( mbox ) ) , eol , printHash , printMarker ) ;', 'this . checkSequence = checkSequence ;', 'private static final Pattern PATID =', '}', 'String date = m . group ( 1 ) ;', 'lastSeq = msgSeq ;']","['System . err . println ( ""Last response seen : "" + chunkListener . lastFetched ) ;', 'for ( long j = lastSeq + 1 ; j < msgSeq ; j + + ) {', 'if ( msgSeq ! = ( lastSeq + 1 ) ) {', 'for ( ; ; ) {', 'System . err . println ( ""Sequence error : current = "" + msgSeq + "" previous = "" + lastSeq + "" Diff = "" + ( msgSeq - lastSeq ) ) ;', '}', 'lastFetched = firstLine ;', 'sb . append ( "" , "" ) ;', 'lastFetched = firstLine ;', 'sb . append ( missingIds . next ( ) ) ;']","['if ( printHash ) {', 'if ( printHash ) {', 'System . err . println ( ) ;', 'System . err . println ( ) ;', '}', '}']","['for ( long j = lastSeq + 1 ; j < msgSeq ; j + + ) {', 'if ( !ok & & retryWaitSecs > 0 & & chunkListener ! = null & & checkSequence ) {', 'final String sequenceSet = argCount > 2 ? args [ argIdx + + ] : ""1 : * "" ;', 'try {', '}', 'maxIndexInFolder = matches ( line , PATEXISTS , 1 ) ;', 'lastSeq = msgSeq ;', 'boolean ok = imap . fetch ( sequenceSet , itemNames ) ;', 'm = PATSEQ . matcher ( firstLine ) ;', 'for ( long j = lastSeq + 1 ; j < msgSeq ; j + + ) {']","['System . arraycopy ( args , 1 , args2 , 0 , args2 . length ) ;', 'processFileName ( name , map , noArgsProvided ) ;', ""int lastSep = name . lastIndexOf ( ' / ' ) ;"", 'try {', '}', 'if ( examples . exists ( ) ) {', 'if ( args . length = = 0 ) {', 'System . arraycopy ( args , 1 , args2 , 0 , args2 . length ) ;', '| | name . equals ( ""examples / mail / IMAPUtils . class"" )', 'System . out . println ( e ) ;']","['""Usage : ftp [ options ] < hostname > < username > < password > [ < remote file > [ < local file > ] ] \\ n"" +', '}', '""Expected Parameters : [ options ] < hostname > < username > < password > [ < remote file > [ < local file > ] ] \\ n"" +', 'if ( args . length > 0 ) {', 'System . err . println ( ""Actual Parameters : "" + Arrays . toString ( args ) ) ;', 'import java . util . Arrays ;']","['assertTrue ( ""Expecting SocketTimeoutException"" , false ) ;', 'fail ( ""Expecting an Exception"" ) ;', 'import java . net . ConnectException ;', '}', 'catch ( ConnectException se ) {', 'assertTrue ( true ) ;']","['new CRLFLineReader ( new InputStreamReader ( input , getControlEncoding ( ) ) ) ;', 'new CRLFLineReader ( new InputStreamReader ( input , getControlEncoding ( ) ) ) ;', 'controlInput =', 'connectAction ( null ) ;', 'import java . io . Reader ;', 'controlInput = new CRLFLineReader ( socketIsReader ) ;', '}', '} else {', 'protected void connectAction ( Reader socketIsReader ) throws IOException {', 'if ( socketIsReader = = null ) {']","['processFileName ( name , map , noArgsProvided ) ;', 'private static boolean fromJar ( ) {', 'String name = je . getName ( ) ;', 'String fullName = fp . getProperty ( shortName ) ;', 'final String sourceFile = codeSource . getLocation ( ) . getFile ( ) ;', 'final CodeSource codeSource = Main . class . getProtectionDomain ( ) . getCodeSource ( ) ;', 'if ( examples . exists ( ) ) {', 'System . out . println ( ""Usage : java - cp target / classes examples / Main < alias or exampleClass > < exampleClass parameters > "" ) ;', '}', 'Collections . sort ( l ) ;']","['for ( String c : cp . stringPropertyNames ( ) ) {', 'final Enumeration < String > propertyNames = ( Enumeration < String > ) cp . propertyNames ( ) ;', 'while ( propertyNames . hasMoreElements ( ) ) {', 'String c = propertyNames . nextElement ( ) ;', '@ SuppressWarnings ( ""unchecked"" )']","['fp . load ( Main . class . getResourceAsStream ( ""examples . properties"" ) ) ;', 'import java . io . InputStream ;', 'System . out . println ( "" \\ nAliases and their classes : "" ) ;', 'System . err . println ( "" [ Cannot find examples . properties file , so aliases cannot be used ] "" ) ;', 'fp . load ( ras ) ;', 'final InputStream ras = Main . class . getResourceAsStream ( ""examples . properties"" ) ;', '}', 'if ( l . isEmpty ( ) ) {', 'System . out . println ( "" \\ nAliases and their classes : "" ) ;', '} else {']","['"" ( [ bcdelfmpSs - ] ) ""', '"" ( [ bcdelfmpSs - ] ) ""']","['assertEquals ( f . getName ( ) , ""test 1999 abc . pdf"" ) ;', 'assertEquals ( ""test 1999 abc . pdf"" , f . getName ( ) ) ;', 'assertEquals ( f . getSize ( ) , 5840 ) ;', 'assertEquals ( 41472 , f . getSize ( ) ) ;', 'assertEquals ( f . getName ( ) , ""123 456 abc . csv"" ) ;', 'assertEquals ( ""chrism"" , f . getUser ( ) ) ;', 'assertEquals ( f . getName ( ) , ""abc ( test ) 123 . pdf"" ) ;', 'assertEquals ( 1464 , f . getHardLinkCount ( ) ) ;', 'assertEquals ( f . getUser ( ) , ""ftpuser"" ) ;', 'assertEquals ( ""ftpuser"" , f . getUser ( ) ) ;']","['public void testTrimLeadingSpacesNET566 ( ) {', 'assertEquals ( ""zxbox"" , f . getName ( ) ) ;', 'assertNotNull ( f ) ;', '}', 'FTPFile f = new UnixFTPEntryParser ( null , true ) . parseFTPEntry ( ""drwxr - xr - x 2 john smith group 4096 Mar 2 15 : 13 zxbox"" ) ;']","['public Reader retrieveArticleInfo ( int a ) throws IOException {', 'return retrieveArticleInfo ( ( long ) lowArticleNumber ) ;', 'return retrieveArticleInfo ( ( long ) a ) ;', 'public Reader retrieveArticleInfo ( int lowArticleNumber ) throws IOException {']","['String pathname )', 'public FTPListParseEngine initiateListParsing ( String pathname )', 'public FTPListParseEngine initiateListParsing (']","['void setRootDispersion ( int disperson ) ;', 'void setRootDispersion ( int dispersion ) ;', 'Long . parseLong ( s . substring ( ind + 1 ) , 16 ) ;', ""int ind = hexString . indexOf ( ' . ' ) ;"", 'protected static long decodeNtpHexString ( String s )', 'Long . parseLong ( hexString . substring ( ind + 1 ) , 16 ) ;', 'return Long . parseLong ( s , 16 ) < < 32 ;', 'return Long . parseLong ( hexString , 16 ) < < 32 ;', 'return Long . parseLong ( s . substring ( 0 , ind ) , 16 ) < < 32 |', 'if ( hexString = = null ) {']","['NtpV3Packet response = new NtpV3Impl ( ) ;', 'import org . apache . commons . net . ntp . NtpV3Packetbis ;', 'NtpV3Packetbis response = new NtpV3Impl ( ) ;', 'public class NtpV3Impl implements NtpV3Packet', 'public class NtpV3Impl implements NtpV3Packetbis', 'void setRootDelay ( int delay ) ;', 'void setRootDispersion ( int dispersion ) ;', 'void setPrecision ( int precision ) ;', 'public interface NtpV3Packetbis extends NtpV3Packet', 'void setRootDelay ( int delay ) ;']","['import org . apache . commons . net . ntp . NtpV3Packetbis ;', 'NtpV3Packet response = new NtpV3Impl ( ) ;', 'NtpV3Packetbis response = new NtpV3Impl ( ) ;', 'public class NtpV3Impl implements NtpV3Packetbis', 'public class NtpV3Impl implements NtpV3Packet', 'void setRootDelay ( int delay ) ;', 'void setRootDispersion ( int dispersion ) ;', 'void setPrecision ( int precision ) ;', 'public interface NtpV3Packetbis extends NtpV3Packet', 'void setRootDelay ( int delay ) ;']","['tftp . sendFile ( "" . . / foo"" , TFTP . BINARY MODE , fis , ""localhost"" , 6900 ) ;', 'private static final int SERVER PORT = 6901 ;', 'TFTPServer tftpS = new TFTPServer ( serverDirectory , serverDirectory , 6900 ,', 'TFTPServer tftpS = new TFTPServer ( serverDirectory , serverDirectory , SERVER PORT ,', 'tftp . sendFile ( out . getName ( ) , TFTP . BINARY MODE , fis , ""localhost"" , 6900 ) ;', 'tftp . sendFile ( out . getName ( ) , TFTP . BINARY MODE , fis , ""localhost"" , SERVER PORT ) ;', 'tftp . receiveFile ( file . getName ( ) , TFTP . BINARY MODE , output , ""localhost"" , 6900 ) ;', 'tftp . receiveFile ( file . getName ( ) , TFTP . BINARY MODE , output , ""localhost"" , SERVER PORT ) ;', 'tftp . sendFile ( "" . . / foo"" , TFTP . BINARY MODE , fis , ""localhost"" , SERVER PORT ) ;', 'tftpS = new TFTPServer ( serverDirectory , serverDirectory , 6900 , ServerMode . GET AND PUT ,']","['if ( port < 0 ) throw new IllegalArgumentException ( ) ;', 'throw new IllegalArgumentException ( ) ;', 'if ( port = = 0 ) port = socket . getLocalPort ( ) ;', '}', 'if ( port = = 0 ) {', 'if ( port < 0 ) {', 'port = socket . getLocalPort ( ) ;']","['super . connectAction ( socketIsReader ) ;', 'super . connectAction ( socketIsReader ) ;']","['socket = new Socket ( proxyHost , proxyPort ) ;', 'socket = socketFactory . createSocket ( proxyHost , proxyPort ) ;', 'Socket socket = new Socket ( proxyHost , proxyPort ) ;', 'Socket socket = socketFactory . createSocket ( proxyHost , proxyPort ) ;']","['String F = ""F"" ;', 'private static final String E = ""E"" ;', 'String tooShort = ""jan | feb | mar | apr | may | jun | jul | aug | sep | oct | nov"" ;', 'private static final String tooShort = ""jan | feb | mar | apr | may | jun | jul | aug | sep | oct | nov"" ;', 'String badDelim = ""jan , feb , mar , apr , may , jun , jul , aug . sep , oct , nov , dec"" ;', 'private static final String B = ""B"" ;', 'String D = ""D"" ;', 'private static final String fakeLang = ""abc | def | ghi | jkl | mno | pqr | stu | vwx | yza | bcd | efg | hij"" ;', 'String tooLong = ""jan | feb | mar | apr | may | jun | jul | aug | sep | oct | nov | dec | jan"" ;', 'private static final String F = ""F"" ;']","['"" N . B . if the wrong server - type is used , output may be lost . Use - U or - S as necessary . \\ n"" +']","['Calendar cal = Calendar . getInstance ( ) ;', '}', 'assertEquals ( ""AUDWRK0204232015114625 . PDF"" , f . getName ( ) ) ;', 'cal . set ( Calendar . YEAR , 2015 ) ;', 'cal . set ( Calendar . MINUTE , 36 ) ;', 'assertEquals ( 9069 , f . getSize ( ) ) ;', 'cal . set ( Calendar . SECOND , 52 ) ;', 'assertEquals ( ""ZFTPDEV"" , f . getUser ( ) ) ;', '{', 'FTPFile f = parser . parseFTPEntry ( ""ZFTPDEV 9069 05 / 20 / 15 15 : 36 : 52 * STMF / DRV / AUDWRKSHET / AUDWRK0204232015114625 . PDF"" ) ;']","['"" - m - list file details using MDTM ( remote is used as the pathname if provided ) \\ n"" +', '"" - m - list file details using MDTM ( remote is used as the pathname if provided ) \\ n"" +']","['recentDateFormat = args [ + + base ] ;', 'if ( defaultDateFormat ! = null ) {', '}', 'String recentDateFormat = null ;', '"" - y format - set default date format string \\ n"" +', '"" - Y format - set recent date format string \\ n"" +', 'defaultDateFormat = args [ + + base ] ;', 'String defaultDateFormat = null ;', 'else if ( args [ base ] . equals ( "" - Y"" ) ) {', 'config . setDefaultDateFormatStr ( defaultDateFormat ) ;']","['entryParser = parserFactory . createFileEntryParser ( systemType ) ;', 'entryParser = parserFactory . createFileEntryParser ( new FTPClientConfig ( systemType , configuration ) ) ;', 'if ( null ! = configuration ) {', 'entryParser = parserFactory . createFileEntryParser ( systemType ) ;', '}', '} else {', 'if ( null ! = configuration & & configuration . getServerSystemKey ( ) . length ( ) > 0 ) {', 'if ( null ! = configuration ) {', 'this . serverLanguageCode = serverLanguageCode ;', 'String serverLanguageCode ,']","['return getReplyString ( ) . substring ( 4 ) ;', 'return getReplyStrings ( ) [ 0 ] . substring ( 4 ) ;']","['public final static void main ( String [ ] args )', 'public static final void main ( String [ ] args )']","['protected final static long ul ( byte b )', 'protected static final int ui ( byte b )', 'protected final static int ui ( byte b )', 'protected static final long ul ( byte b )', 'public final static String NTP DATE FORMAT = ""EEE , MMM dd yyyy HH : mm : ss . SSS"" ;', 'public static final String NTP DATE FORMAT = ""EEE , MMM dd yyyy HH : mm : ss . SSS"" ;']","['public final static TFTPPacket newTFTPPacket ( DatagramPacket datagram )', 'public static final TFTPPacket newTFTPPacket ( DatagramPacket datagram )']","['abstract public void testDefaultPrecision ( ) ;', 'public abstract void testRecentPrecision ( ) ;', 'abstract public void testRecentPrecision ( ) ;', 'public abstract void testDefaultPrecision ( ) ;']","['if ( running ) break ;', 'break ;', 'if ( running ) {', '}', 'fail ( ""TimeStamp cannot equal null"" ) ;', 'if ( time . equals ( other ) ) {', 'if ( time . equals ( other ) )', 'fail ( ""TimeStamp cannot equal null"" ) ;', '}']","['return ( permissions ! = null ) ;', 'return ( permissions ! = null ) ;', 'this . defaultDateFormat = new SimpleDateFormat ( format ) ;', 'this . defaultDateFormat = new SimpleDateFormat ( format ) ;', 'Calendar . MINUTE ,', 'Calendar . MINUTE ,', 'Calendar . MILLISECOND ,', 'Calendar . MILLISECOND ,']","['if ( l . isEmpty ( ) ) {', 'if ( l . isEmpty ( ) ) {', 'System . out . println ( ""Usage : java - cp target / classes examples / Main < alias or exampleClass > < exampleClass parameters > "" ) ;', 'System . out . println ( ""Usage : java - cp target / classes examples / Main < alias or exampleClass > < exampleClass parameters > "" ) ;', 'System . out . println ( ""Usage : java - jar commons - net - examples - m . n . jar < alias or exampleClass > < exampleClass parameters > "" ) ;', 'System . out . println ( ""Usage : java - jar commons - net - examples - m . n . jar < alias or exampleClass > < exampleClass parameters > "" ) ;', 'if ( fromJar ( ) ) {', 'if ( fromJar ( ) ) {', 'config = new FTPClientConfig ( ) ;', 'config = new FTPClientConfig ( ) ;']","['{ }', '{ / * ignored * / }', '{ }', '{ / * ignored * / }', '{ }', '{ / * ignored * / }', '} catch ( SecurityException e ) {', '} catch ( SecurityException e ) {', '} catch ( NoSuchMethodException e ) {', '} catch ( NoSuchMethodException e ) {']","['header . append ( "" \\ nTo : "" ) ;', 'throw new IllegalArgumentException ( ""From cannot be null"" ) ;', ""header . append ( ' \\ n' ) ;"", 'private final String subject ;', 'header . append ( to ) ;', 'header . append ( ""To : "" ) . append ( to ) . append ( "" \\ n"" ) ;', 'header . append ( cc . toString ( ) ) ;', ""header . append ( ' \\ n' ) ;"", 'header . append ( subject ) ;', 'header . append ( ""Cc : "" ) . append ( cc . toString ( ) ) . append ( "" \\ n"" ) ;']","['public void setUp ( ) {', 'assertEquals ( ""From : from @ here . invalid \\ nTo : to @ there . invalid \\ nSubject : Test email \\ n \\ n"" , header . toString ( ) ) ;', '@ Test', 'assertNotNull ( hdr ) ;', '@ Test ( expected = IllegalArgumentException . class )', 'header = new SimpleSMTPHeader ( ""from @ here . invalid"" , ""to @ there . invalid"" , ""Test email"" ) ;', '}', 'assertEquals ( ""From : from @ here . invalid \\ nTo : to @ there . invalid \\ n \\ n"" , hdr . toString ( ) ) ;', 'public void testToStringNoSubject ( ) {', '@ Before']","['SimpleSMTPHeader hdr = new SimpleSMTPHeader ( null , null , null ) ;', 'new SimpleSMTPHeader ( null , null , null ) ;', 'assertEquals ( ""From : from @ here . invalid \\ n \\ n"" , hdr . toString ( ) ) ;', '@ Test', '@ Test', 'assertNotNull ( hdr ) ;']","['final String pattern = ""EEE , dd MMM yyyy HH : mm : ss Z"" ;', 'addHeaderField ( ""Date"" , format . format ( new Date ( ) ) ) ;', 'final SimpleDateFormat format = new SimpleDateFormat ( pattern , Locale . ENGLISH ) ;', 'if ( !hasHeaderDate ) {', 'if ( !hasHeaderDate & & ""Date"" . equals ( headerField ) ) {', 'import java . util . Date ;', 'import java . text . SimpleDateFormat ;', 'import java . util . Locale ;', '}', 'private boolean hasHeaderDate ;']","['System . out . println ( ""Usage : java - jar commons - net - examples - m . n . jar < alias or exampleClass > < exampleClass parameters > "" ) ;', '"" exampleClass > , < exampleClass parameters > ( comma - separated , no spaces ) "" ) ;', 'System . out . println ( ""Or : mvn - q exec : java - Dexec . args = \\ "" < alias or exampleClass > < exampleClass parameters > \\ "" ( space separated ) "" ) ;', '"" or exampleClass > < exampleClass parameters > \\ "" ( space separated ) "" ) ;', 'System . out . println ( ""Usage : java - cp target / classes examples / Main < alias or exampleClass > < exampleClass parameters > "" ) ;', 'System . out . println ( ""Or : mvn - q exec : java - Dexec . args = \\ "" < alias"" +', 'System . out . println ( ""Usage : mvn - q exec : java - Dexec . arguments = < alias or exampleClass > , < exampleClass parameters > ( comma - separated , no spaces ) "" ) ;', '""Usage : java - cp target / classes examples / Main < alias or exampleClass > < exampleClass parameters > "" ) ;', '""Usage : java - jar commons - net - examples - m . n . jar < alias or exampleClass > < exampleClass parameters > "" ) ;', 'System . out . println (']","['static final String JES LEVEL 1 LIST REGEX = "" ( \\ \\ S + ) \\ \\ s + "" +', '"" ( \\ \\ S + ) \\ \\ s + "" +', 'static final String JES LEVEL 2 LIST REGEX = "" ( \\ \\ S + ) \\ \\ s + "" +', 'static final String JES LEVEL 2 LIST REGEX =', 'static final String JES LEVEL 1 LIST REGEX =']","['Format shortFormat = parser . getRecentDateFormat ( ) ;', '+ "" . Failed to parse "" + shortDate + ( lenient ? "" ( lenient ) "" : "" ( non - lenient ) "" )', '+ "" . Failed to parse "" + shortDate', 'SimpleDateFormat shortFormat = parser . getRecentDateFormat ( ) ;', '+ "" using "" + shortFormat . toPattern ( )']","['System . out . println ( ""Skipping Feb 29 test"" ) ;', '& & now . before ( new GregorianCalendar ( thisYear , Calendar . AUGUST , 29 ) )', 'if ( now . isLeapYear ( thisYear ) & & now . before ( new GregorianCalendar ( thisYear , Calendar . AUGUST , 29 ) ) ) {', 'System . out . println ( ""Skipping Feb 29 test ( not leap year or before Feb 29 ) "" ) ;', 'GregorianCalendar target = new GregorianCalendar ( thisYear , Calendar . FEBRUARY , 29 ) ;', 'final GregorianCalendar target = new GregorianCalendar ( thisYear , Calendar . FEBRUARY , 29 ) ;', '& & now . after ( target )', ') {', 'if ( now . isLeapYear ( thisYear )']","['public void testFeb29LeapYear4 ( ) throws Exception {', 'GregorianCalendar now = new GregorianCalendar ( year , Calendar . MARCH , 1 , 12 , 0 ) ;', '}', 'checkShortParse ( ""Feb 29th 2000"" , now , new GregorianCalendar ( year , Calendar . FEBRUARY , 29 ) ) ;', 'public void testFeb29LeapYear2 ( ) throws Exception {', 'int year = 2000 ;', 'public void testFeb29LeapYear3 ( ) throws Exception {', 'GregorianCalendar now = new GregorianCalendar ( year , Calendar . FEBRUARY , 29 , 12 , 0 ) ;', 'checkShortParse ( ""Feb 29th 2000"" , now , new GregorianCalendar ( year , Calendar . FEBRUARY , 29 ) , true ) ;', 'GregorianCalendar now = new GregorianCalendar ( year , Calendar . FEBRUARY , 28 , 12 , 0 ) ;']","['String password = userpass [ 1 ] ;', 'if ( tmp ! = null ) {', '} else if ( password . equals ( password . toUpperCase ( Locale . ROOT ) ) ) {', 'import java . io . Console ;', '}', 'password = tmp ;', 'password = new String ( pwd ) ;', 'import java . io . BufferedReader ;', '} else {', 'char [ ] pwd = con . readPassword ( ""Password for "" + username + "" : "" ) ;']","['@ Override', '@ Override', '@ Override', '@ Override']","['""FREEWARE40 . DIR ; 1 27 / 36 16 - FEB - 1999 10 : 01 : 46 [ AP HTTPD , APACHE$WWW ( RWE , RWE , RE , RE ) "" ,', '""FREEWARE40 . DIR ; 1 27 / 36"" +', '"" 14 / 15 24 - JUL - 2002 14 : 35 : 40 [ TRANSLATED ] ( RWE , RWE , RWE , RE ) "" ,', '"" 16 - FEB - 1999 10 : 01 : 46 [ AP HTTPD , APACHE$WWW ( RWE , RWE , RE , RE ) "" ,', '"" 14 / 15 17 - JAN - 2002 11 : 13 : 53 [ POSTWARE , LP ] ( RWE , RWED , RWE , RE ) "" ,', '"" 4 / 15 24 - FEB - 2003 13 : 17 : 24 [ POSTWARE , LP ] ( RWED , RWED , RE , ) "" ,']","['@ Deprecated', 'output . write ( command . getBytes ( getCharsetName ( ) ) ) ;', 'output . write ( command . getBytes ( getCharset ( ) ) ) ;', 'output . write ( password . getBytes ( getCharsetName ( ) ) ) ;', 'output . write ( username . getBytes ( getCharset ( ) ) ) ;', 'output . write ( username . getBytes ( getCharsetName ( ) ) ) ;', 'output . write ( password . getBytes ( getCharset ( ) ) ) ;', 'reader = new BufferedReader ( new InputStreamReader ( input , getCharsetName ( ) ) ) ;', 'reader = new BufferedReader ( new InputStreamReader ( input , getCharset ( ) ) ) ;', 'username ) , getCharsetName ( ) ) ) ;']",['newReplyString = true ;'],"['private OutputStream dst = new ByteArrayOutputStream ( ) ;', ""private final Reader source = new CharArrayReader ( new char [ ] { 'a' } ) ;"", ""private InputStream src = new ByteArrayInputStream ( new byte [ ] { 'z' } ) ;"", 'private final OutputStream dst = new ByteArrayOutputStream ( ) ;', 'private Writer dest = new CharArrayWriter ( ) ;', ""private final InputStream src = new ByteArrayInputStream ( new byte [ ] { 'z' } ) ;"", ""private Reader source = new CharArrayReader ( new char [ ] { 'a' } ) ;"", 'private final Writer dest = new CharArrayWriter ( ) ;']","['@ Override', '@ Override', '@ Override', '@ Override', '@ Override', '@ Override', '@ Override', '@ Override', '@ Override', '@ Override']","['Object key = iter . next ( ) ;', 'Map . Entry < String , ThreadContainer > entry = iter . next ( ) ;', 'ThreadContainer c = idTable . get ( key ) ;', 'Iterator < Map . Entry < String , ThreadContainer > > iter = idTable . entrySet ( ) . iterator ( ) ;', 'Iterator < String > iter = idTable . keySet ( ) . iterator ( ) ;', 'ThreadContainer c = entry . getValue ( ) ;', 'import java . util . Map ;']","['id = "" < Bogus - id : "" + ( bogusIdCount + + ) + "" > "" ;', 'bogusIdCount + + ;', 'id = "" < Bogus - id : "" + ( bogusIdCount ) + "" > "" ;']","['throw new IllegalArgumentException ( ""Invalid userInfo details : \'"" + userpass + ""\'"" ) ;', 'throw new IllegalArgumentException ( ""Invalid userInfo details : \'"" + userInfo + ""\'"" ) ;']","['newsgroup = stdin . readLine ( ) . trim ( ) ;', 'break ;', 'newsgroup = stdin . readLine ( ) ;', '}', 'if ( newsgroup = = null ) {', 'newsgroup = newsgroup . trim ( ) ;']","['if ( plainSocket ! = null ) {', '}', 'plainSocket . close ( ) ;']","['input . close ( ) ;', 'input . close ( ) ;', 'super . disconnect ( ) ;', 'super . disconnect ( ) ;', 'output . close ( ) ;', 'try {', '}', 'output . close ( ) ;', 'if ( input ! = null ) {', '}']","['socket . bind ( new InetSocketAddress ( localAddr , localPort ) ) ;', 'socket . bind ( new InetSocketAddress ( localAddr , localPort ) ) ;', '}', '}', 'socket = socketFactory . createSocket ( ) ;', 'throws SocketException , IOException', 'if ( sendBufferSize ! = - 1 ) {', 'private void connect ( InetAddress host , int port , InetAddress localAddr , int localPort )', 'connectAction ( ) ;', 'connect ( host , port , null , - 1 ) ;']","['fail ( ""Could not find examples classes"" ) ;', 'fail ( ""Could not find examples classes : "" + examples . getCanonicalPath ( ) ) ;']","['final String sourceFile = codeSource . getLocation ( ) . getFile ( ) ;', 'import java . net . URLDecoder ;', 'final String sourceFile = URLDecoder . decode ( codeSource . getLocation ( ) . getFile ( ) , ""UTF - 8"" ) ;']","['final String sourceFile = URLDecoder . decode ( codeSource . getLocation ( ) . getFile ( ) , ""UTF - 8"" ) ;', 'final String sourceFile = URLDecoder . decode ( codeSource . getLocation ( ) . getFile ( ) , ""UTF - 8"" ) ;']","['String recentDateFormatStr )', 'this ( systemKey ) ;', 'this . recentDateFormatStr = recentDateFormatStr ;', 'public FTPClientConfig ( String systemKey ,', '}', 'this . defaultDateFormatStr = defaultDateFormatStr ;', '{', 'String defaultDateFormatStr ,', 'DEFAULT DATE FORMAT , null , null , null , null ) ;', 'DEFAULT DATE FORMAT , null ) ;']","['file . setTimestamp ( super . parseTimestamp ( datestr ) ) ;', 'DEFAULT RECENT DATE FORMAT ) ;', '+ "" ( ( ? : \\ \\ d + [ - / ] \\ \\ d + [ - / ] \\ \\ d + ) | ( ? : \\ \\ S { 3 } \\ \\ s + \\ \\ d { 1 , 2 } ) | ( ? : \\ \\ d { 1 , 2 } \\ \\ s + \\ \\ S { 3 } ) ) ""', 'FTPClientConfig . SYST UNIX , DEFAULT DATE FORMAT JA , DEFAULT RECENT DATE FORMAT JA ) ) ;', 'DEFAULT RECENT DATE FORMAT ,', 'private static final String JA DAY = "" \\ u65e5"" ;', 'null , null , null ) ;', '}', '+ "" ( \\ \\ d + ( ? : : \\ \\ d + ) ? ) ""', '= ""M\'"" + JA MONTH + ""\' d\'"" + JA DAY + ""\' HH : mm"" ;']","['public String toString ( ) {', '@ Override', '}', 'return ""Number : "" + number + "" . Size : "" + size + "" . Id : "" + identifier ;']","['if ( tmp ! = null ) {', 'password = Utils . getPassword ( username , password ) ;', '} else if ( password . equals ( password . toUpperCase ( Locale . ROOT ) ) ) {', 'import java . io . Console ;', '}', 'password = tmp ;', 'password = new String ( pwd ) ;', 'import java . io . BufferedReader ;', '} else {', 'char [ ] pwd = con . readPassword ( ""Password for "" + username + "" : "" ) ;']","['System . exit ( 1 ) ;', 'try {', 'System . out . println ( ""Connecting to server "" + server + "" on "" + pop3 . getDefaultPort ( ) ) ;', 'System . out . println ( ""Status : "" + status ) ;', 'String server = args [ 0 ] ;', '}', '""Usage : POP3Mail < pop3 server hostname > < username > < password > [ TLS [ true = implicit ] ] "" ) ;', 'password = Utils . getPassword ( username , password ) ;', 'System . err . println ( ""Could not retrieve password : "" + e1 . getMessage ( ) ) ;', 'POP3MessageInfo status = pop3 . status ( ) ;']","['throw new IOException ( ""mailbox file : "" + mbox + "" already exists!"" ) ;', 'if ( mbox . exists ( ) & & mbox . length ( ) > 0 ) {', 'if ( mbox . exists ( ) ) {', 'throw new IOException ( ""mailbox file : "" + mbox + "" already exists and is non - empty!"" ) ;']","['final URI uri = URI . create ( args [ argIdx + + ] ) ;', 'throw e ;', 'public static void main ( String [ ] args ) throws IOException', 'import java . net . URISyntaxException ;', 'try {', 'if ( m . matches ( ) ) {', '}', 'uri = new URI ( uri . getScheme ( ) , uri . getAuthority ( ) , m . group ( 2 ) , null , null ) ;', '} else {', 'public static void main ( String [ ] args ) throws IOException , URISyntaxException']","['parser = new UnixFTPEntryParser ( config , true ) ;', 'else if ( ukey . indexOf ( FTPClientConfig . SYST UNIX ) > = 0 )', 'else if ( ukey . indexOf ( FTPClientConfig . SYST UNIX TRIM LEADING ) > = 0 )', 'parser = new UnixFTPEntryParser ( config , true ) ;', 'if ( ukey . indexOf ( FTPClientConfig . SYST UNIX ) > = 0 )', 'parser = new UnixFTPEntryParser ( config , false ) ;', 'parser = new UnixFTPEntryParser ( config , false ) ;', 'if ( ukey . indexOf ( FTPClientConfig . SYST UNIX TRIM LEADING ) > = 0 )', 'private final boolean trimLeadingSpaces ;', 'final boolean trimLeadingSpaces ;']","['System . out . println ( f . getRawListing ( ) ) ;', '}', 'System . out . println ( f . toFormattedString ( displayTimeZoneId ) ) ;', 'System . out . println ( f . getRawListing ( ) ) ;', '} else {', 'System . out . println ( f . toFormattedString ( displayTimeZoneId ) ) ;', 'if ( f ! = null ) {', 'System . out . println ( ""File not found"" ) ;']","['line = controlInput . readLine ( ) ;', 'if ( line = = null ) {', '""Connection closed without indication . "" ) ;', '}', 'while ( isStrictMultilineParsing ( ) ? strictCheck ( line , code ) : lenientCheck ( line ) ) ;', ""if ( sep = = ' - ' ) {"", 'if ( line = = null ) {', 'if ( length > REPLY CODE LEN ) {', 'replyLines . add ( line ) ;', 'public void setStrictReplyParsing ( boolean strictReplyParsing ) {']","['String entry = getReplyStrings ( ) [ 1 ] . substring ( 1 ) ;', 'String entry = reply . substring ( 1 ) ;', '}', ""if ( reply . length ( ) < 3 | | reply . charAt ( 0 ) ! = ' ' ) {"", 'throw new MalformedServerReplyException ( ""Invalid server reply ( MLST ) : \'"" + reply + ""\'"" ) ;', 'String reply = getReplyStrings ( ) [ 1 ] ;']","['if ( !remote . isSiteLocalAddress ( ) ) {', 'private FTPClient client ;', 'this . passiveNatWorkaround = enabled ;', 'this . passiveNatWorkaroundStrategy = resolver ;', 'fireReplyReceived ( 0 ,', 'this . passiveNatWorkaroundStrategy = new NatServerResolverImpl ( this ) ;', '"" [ Replacing site local address "" + passiveHost + "" with "" + hostAddress + "" ] \\ n"" ) ;', '}', 'private boolean passiveNatWorkaround = true ;', 'public static class NatServerResolverImpl implements HostnameResolver {']","['public FTPClientConfig ( FTPClientConfig config ) {', 'this . serverSystemKey = config . serverSystemKey ;', 'this . serverTimeZoneId = config . serverTimeZoneId ;', 'this . defaultDateFormatStr = config . defaultDateFormatStr ;', 'this . serverLanguageCode = config . serverLanguageCode ;', 'this . saveUnparseableEntries = config . saveUnparseableEntries ;', '}', 'this . lenientFutureDates = config . lenientFutureDates ;', 'this . shortMonthNames = config . shortMonthNames ;', 'this . recentDateFormatStr = config . recentDateFormatStr ;']","['output . close ( ) ;', 'try {', 'input = null ;', '}', '} finally {', 'output = null ;', 'output . close ( ) ;', 'output = null ;']","['try', 'open ( tftp ) ;', 'FileOutputStream output = null ;', 'try', '}', 'FileOutputStream output = null ;', 'File file ;', '}', 'System . err . println ( ""Error : could not open local UDP socket . "" ) ;', 'closed = receive ( transferMode , hostname , localFilename , remoteFilename , tftp ) ;']","['tftp . receiveFile ( remoteFilename , transferMode , output , hostname ) ;', 'tftp . sendFile ( remoteFilename , transferMode , input , parts [ 0 ] , Integer . parseInt ( parts [ 1 ] ) ) ;', 'tftp . setDefaultTimeout ( 60000 ) ;', 'tftp . sendFile ( remoteFilename , transferMode , input , hostname ) ;', 'tftp . sendFile ( remoteFilename , transferMode , input , hostname ) ;', 'if ( parts . length = = 2 ) {', '""hostname - The name of the remote host \\ n"" +', '}', 'tftp . setDefaultTimeout ( timeout ) ;', 'String [ ] parts = hostname . split ( "" : "" ) ;']","['public String toString ( ) {', '@ Override', 'return super . toString ( ) + "" ACK "" + blockNumber ;', '}', 'public String toString ( ) {', '@ Override', '}', 'return super . toString ( ) + "" DATA "" + blockNumber + "" "" + length ;', 'public String toString ( ) {', 'return super . toString ( ) + "" ERR "" + error + "" "" + message ;']","['return TFTPPacket . newTFTPPacket ( receiveDatagram ) ;', 'return newTFTPPacket ;', 'return TFTPPacket . newTFTPPacket ( packet ) ;', 'trace ( "" < "" , newTFTPPacket ) ;', 'trace ( "" > "" , packet ) ;', '}', 'TFTPPacket newTFTPPacket = TFTPPacket . newTFTPPacket ( packet ) ;', 'protected void trace ( String direction , TFTPPacket packet ) {', 'TFTPPacket newTFTPPacket = TFTPPacket . newTFTPPacket ( receiveDatagram ) ;']","['totalThisPacket = 0 ;', '""File write failed . "" ) ;', 'if ( + + timeouts > = maxTimeouts )', '} while ( dataLength = = TFTPPacket . SEGMENT SIZE ) ;', '""File write failed . "" ) ;', 'TFTPDataPacket data = ( TFTPDataPacket ) received ;', 'received . getPort ( ) ,', '} catch ( InterruptedIOException e ) {', 'if ( block > 65535 )', 'sent . setAddress ( host ) ;']","['if ( recdPort = = port ) {', 'recdPort , TFTPErrorPacket . UNKNOWN TID ,', 'TFTPErrorPacket error = new TFTPErrorPacket ( recdAddress ,', '}', 'throw new IOException ( ""Incorrect source port ( "" + recdPort + "" ) in request reply . "" ) ;', 'bufferedSend ( error ) ;', '""INCORRECT SOURCE PORT"" ) ;']","['"" - b Use binary transfer mode \\ n"" ;', 'import org . apache . commons . net . tftp . TFTPPacket ;', 'TFTPClient tftp ;', '"" - v Verbose ( trace packets ) \\ n""', 'tftp = new TFTPClient ( ) ;', 'final TFTPClient tftp ;', 'tftp = new TFTPClient ( ) ;', '} ;', 'boolean verbose = false ;', '}']","['serverTftp . open ( port ) ;', 'laddr = iaddr ;', '}', 'if ( ifaddrs . hasMoreElements ( ) ) iaddr = ifaddrs . nextElement ( ) ;', 'log = ( log = = null ? nullStream : log ) ;', 'private final InetAddress laddr ;', 'import java . util . Enumeration ;', 'launch ( serverReadDirectory , serverWriteDirectory ) ;', 'InetAddress iaddr = null ;', 'if ( localiface ! = null )']","['{', 'if ( justStarted ) {', 'if ( lastBlock = = 0 )', 'boolean justStarted = true ;', 'justStarted = false ;']","['transferTftp . bufferedSend ( lastSentAck ) ;', 'return new TFTP ( ) ;', 'transferTftp . bufferedSend ( lastSentData ) ;', 'tftp . bufferedSend ( data ) ;', 'transferTftp = new TFTP ( ) ;', 'sendData ( transferTftp , lastSentAck ) ;', '}', 'transferTftp = newTFTP ( ) ;', 'sendData ( transferTftp , lastSentData ) ;', 'void sendData ( TFTP tftp , TFTPPacket data ) throws IOException {']","['switch ( rint ) {', '@ Override', 'break ;', 'for ( argc = 0 ; argc < args . length ; argc + + )', '{', 'TFTP newTFTP ( ) {', 'int argc ;', 'if ( argc < args . length ) {', 'default :', 'System . err . println ( ""\x07Error : unrecognized option . "" ) ;']","['System . out . println ( ""File not found"" ) ;', 'System . out . println ( ""File not found"" ) ;', 'tftp . receiveFile ( remoteFilename , transferMode , output , parts [ 0 ] , Integer . parseInt ( parts [ 1 ] ) ) ;', 'tftp . receiveFile ( remoteFilename , transferMode , output , parts [ 0 ] , Integer . parseInt ( parts [ 1 ] ) ) ;', 'tftp . sendFile ( remoteFilename , transferMode , input , parts [ 0 ] , Integer . parseInt ( parts [ 1 ] ) ) ;', 'tftp . sendFile ( remoteFilename , transferMode , input , parts [ 0 ] , Integer . parseInt ( parts [ 1 ] ) ) ;', 'throw e ;', 'throw e ;', 'throw new MalformedServerReplyException ( ""Truncated server reply : \'"" + line + ""\'"" ) ;', 'throw new MalformedServerReplyException ( ""Truncated server reply : \'"" + line + ""\'"" ) ;']",['e . printStackTrace ( ) ;'],"['assertEquals ( ""0 . 0 . 0 . 0"" , info . getNetmask ( ) ) ;', 'assertEquals ( 2147483648L , info . getAddressCountLong ( ) ) ;', 'assertEquals ( 4294967296L , info . getAddressCountLong ( ) ) ;', 'utils . setInclusiveHostCount ( true ) ;', 'utils = new SubnetUtils ( ""192 . 168 . 0 . 1 / 1"" ) ;', 'assertEquals ( ""128 . 0 . 0 . 0"" , info . getNetmask ( ) ) ;', 'utils = new SubnetUtils ( ""192 . 168 . 0 . 1 / 0"" ) ;', 'info = utils . getInfo ( ) ;']","['netmask | = ( 1 < < 31 - j ) ;', 'netmask = ( int ) ( 0x0FFFFFFFFL < < trailingZeroes ) ;', 'int cidrPart = rangeCheck ( Integer . parseInt ( matcher . group ( 5 ) ) , 0 , NBITS ) ;', 'int trailingZeroes = NBITS - rangeCheck ( Integer . parseInt ( matcher . group ( 5 ) ) , 0 , NBITS ) ;', 'for ( int j = 0 ; j < cidrPart ; + + j ) {', '}']","['private static final String SLASH FORMAT = IP ADDRESS + "" / ( \\ \\ d { 1 , 3 } ) "" ;', 'private static final String SLASH FORMAT = IP ADDRESS + "" / ( \\ \\ d { 1 , 2 } ) "" ;']","['return addr + "" / "" + pop ( toInteger ( mask ) ) ;', 'return addr + "" / "" + pop ( maskInt ) ;', '}', 'if ( ( maskInt & - maskInt ) - 1 ! = ~ maskInt ) {', 'throw new IllegalArgumentException ( ""Could not parse [ "" + mask + "" ] "" ) ;', 'int maskInt = toInteger ( mask ) ;', 'try {', 'new SubnetUtils ( ""0 . 0 . 0 . 0 / 0"" ) ;', 'fail ( ""Should have thrown IllegalArgumentException"" ) ;', '}']","['}', 'System . err . println ( ""NET - 584 : notAcked = "" + notAcked ) ;', '} catch ( SocketTimeoutException e ) {', 'if ( notAcked > 0 ) {', 'System . err . println ( ""NET - 584 : ignoring "" + e . getMessage ( ) ) ;']","['return toCidrNotation (', 'return format ( toArray ( address ) ) + "" / "" + pop ( netmask ) ;', 'format ( toArray ( netmask ) )', ') ;', 'format ( toArray ( address ) ) ,']","['int trailingZeroes = NBITS - rangeCheck ( Integer . parseInt ( matcher . group ( 5 ) ) , 0 , NBITS ) ;', 'private final int network ;', 'private int matchAddress ( Matcher matcher ) {', 'this . address = matchAddress ( matcher ) ;', '}', 'int trailingZeroes = NBITS - rangeCheck ( Integer . parseInt ( matcher . group ( 5 ) ) , 0 , NBITS ) ;', 'if ( ( maskInt & - maskInt ) - 1 ! = ~ maskInt ) {', 'private static int rangeCheck ( int value , int begin , int end ) {', 'private int rangeCheck ( int value , int begin , int end ) {', 'private final int broadcast ;']","['@ SuppressWarnings ( ""deprecation"" )', 'System . out . println ( ""CslDebug = "" + Arrays . toString ( stats ) ) ;', '}', 'private static void showCslStats ( FTPClient ftp ) {', 'int [ ] stats = ftp . getCslDebug ( ) ;', 'if ( keepAliveTimeout > 0 ) {', 'showCslStats ( ftp ) ;', 'while ( notAcked - - > 0 ) {', 'int [ ] cleanUp ( ) throws IOException {', 'csl . cleanUp ( ) ;']","['return new int [ ] { acksAcked , remain , notAcked } ;', 'private int ioErrors ;', 'ioErrors + + ;', 'return new int [ ] { acksAcked , remain , notAcked , ioErrors } ;']","['throw e ;', 'throw e ;', 'if ( csl ! = null ) {', '} finally {', 'csl . cleanUp ( ) ;', '}']","['parent . getReplyNoReport ( ) ;', 'parent . getReply ( ) ;', 'output . close ( ) ;', 'Util . closeQuietly ( output ) ;', 'boolean ok = completePendingCommand ( ) ;', 'return completePendingCommand ( ) ;', 'return ok ;', 'output . close ( ) ;', 'socket . close ( ) ;', 'socket . close ( ) ;']","['if ( notAcked > 0 ) {', 'System . err . println ( ""NET - 584 : ignoring "" + e . getMessage ( ) ) ;', '}', 'System . err . println ( ""NET - 584 : notAcked = "" + notAcked ) ;']","['Date refDate = refCal . getTime ( ) ;', 'Date refDate = refCal . getTime ( ) ;', 'TimeStamp ts = new TimeStamp ( refDate ) ;', 'TimeStamp ts = new TimeStamp ( refDate ) ;', 'assertEquals ( ""refDate . getTime ( ) "" , refDate . getTime ( ) , ts . getTime ( ) ) ;', 'assertEquals ( ""refDate . getTime ( ) "" , refDate . getTime ( ) , ts . getTime ( ) ) ;', 'Date tsDate = ts . getDate ( ) ;', 'Date tsDate = ts . getDate ( ) ;', 'String actual = ts1 . toUTCString ( ) ;', 'String actual = ts1 . toUTCString ( ) ;']","['return true ;', 'return unixFTPEntryParser . parseFTPEntry ( entry ) ;', 'file = unixFTPEntryParser . parseFTPEntry ( entry ) ;', 'if ( file = = null ) {', '}', 'return false ;', 'isParsed = parseUnixList ( f , entry ) ;', 'private boolean parseUnixList ( FTPFile file , String entry ) {', 'for ( String test : list ) {', 'assertNotNull ( ""Failed to parse name "" + test , f . getName ( ) ) ;']","['}', 'public void doAdditionalGoodTests ( String test , FTPFile f ) {', 'assertNotNull ( ""Could not parse raw listing in "" + test , f . getRawListing ( ) ) ;', 'assertNotNull ( ""Could not parse name in "" + test , f . getName ( ) ) ;', '@ Override']","['return true ;', 'return parseMemberList ( entry ) ;', 'private boolean parseMemberList ( FTPFile file , String entry ) {', 'private FTPFile parseFileList ( String entry ) {', 'boolean isParsed = false ;', 'return unixFTPEntryParser . parseFTPEntry ( entry ) ;', 'private boolean parseFileList ( FTPFile file , String entry ) {', 'return null ;', '}', 'return parseJeslevel1List ( entry ) ;']","['output . write ( hostString . getBytes ( ""UTF - 8"" ) ) ;', 'this . charset = null ;', 'output . write ( connectString . getBytes ( ""UTF - 8"" ) ) ;', 'this ( proxyHost , proxyPort , proxyUser , proxyPass , Charset . forName ( ""UTF - 8"" ) ) ;', '+ base64 . encodeToString ( auth . getBytes ( ""UTF - 8"" ) ) ;', 'output . write ( hostString . getBytes ( charset ) ) ;', 'public FTPHTTPClient ( String proxyHost , int proxyPort , String proxyUser , String proxyPass ) {', 'output . write ( header . getBytes ( charset ) ) ;', 'output . write ( header . getBytes ( ""UTF - 8"" ) ) ;', 'private final Charset charset ;']","['XOAUTH ( ""XOAUTH"" ) ;', 'case XOAUTH2 :', 'XOAUTH ( ""XOAUTH"" ) ,', 'XOAUTH2 ( ""XOAUTH2"" ) ;', 'XOAUTH ;', 'return ""XOAUTH2"" ;', 'else if ( method . equals ( AUTH METHOD . XOAUTH ) )', 'XOAUTH2 ;', 'else if ( method . equals ( AUTH METHOD . XOAUTH ) | | method . equals ( AUTH METHOD . XOAUTH2 ) )', 'XOAUTH ,']","['System . out . printf ( ""IP Address : % s [ % s ] \\ n"" , info . getAddress ( ) ,', 'System . out . printf ( ""Subnet Information for % s : % n"" , subnet ) ;', 'System . out . printf ( ""Broadcast Address : % s [ % s ] \\ n"" , info . getBroadcastAddress ( ) ,', 'System . out . printf ( ""CIDR Representation : % s % n % n"" , info . getCidrSignature ( ) ) ;', 'System . out . printf ( ""Supplied IP Address : % s \\ n \\ n"" , info . getAddress ( ) ) ;', 'System . out . printf ( ""Supplied IP Address : % s % n % n"" , info . getAddress ( ) ) ;', 'System . out . printf ( ""Netmask : % s [ % s ] \\ n"" , info . getNetmask ( ) ,', 'System . out . printf ( ""Netmask : % s [ % s ] % n"" , info . getNetmask ( ) ,', 'System . out . printf ( ""Subnet Information for % s : \\ n"" , subnet ) ;', 'System . out . printf ( ""Network Address : % s [ % s ] % n"" , info . getNetworkAddress ( ) ,']","['chargenInput . close ( ) ;', 'echoOutput . close ( ) ;', 'echoInput . close ( ) ;']","['index = args [ arg ] . lastIndexOf ( "" @ "" ) ;', ""index = args [ arg ] . lastIndexOf ( ' @ ' ) ;"", 'index = args [ 0 ] . lastIndexOf ( "" @ "" ) ;', ""index = args [ 0 ] . lastIndexOf ( ' @ ' ) ;""]","['name = name . substring ( 0 , name . lastIndexOf ( "" ; "" ) ) ;', ""name = name . substring ( 0 , name . lastIndexOf ( ' ; ' ) ) ;""]","['d2 = sdf1 . parse ( ""hij 31 , 2004"" ) ;', 'sdf1 . parse ( ""hij 31 , 2004"" ) ;', 'd2 = sdf2 . parse ( ""dec 31 , 2004"" ) ;', 'sdf2 . parse ( ""dec 31 , 2004"" ) ;']","['parser = factory . createFileEntryParser (', 'factory . createFileEntryParser (']","['remoteport = ( new Integer ( args [ 1 ] ) ) . intValue ( ) ;', 'remoteport = Integer . parseInt ( args [ 1 ] ) ;']","['System . out . println ( ""Status : "" + status ) ;', 'password = Utils . getPassword ( username , password ) ;', 'if ( !pop3 . login ( username , password ) )', 'fw . append ( DATE FORMAT . format ( received ) ) ;', 'public static void main ( String [ ] args )', 'POP3Client pop3 ;', 'port = pop3 . getDefaultPort ( ) ;', 'POP3MessageInfo status = pop3 . status ( ) ;', 'fw . close ( ) ;', 'final SimpleDateFormat DATE FORMAT']","['this . charset = null ;', 'this . charset = encoding ;']","['System . err . println ( ""Error : could not open local file for writing . "" ) ;', 'throw new RuntimeException ( ""Error : could not open local UDP socket . "" , e ) ;', 'System . err . println ( e . getMessage ( ) ) ;', 'throw new RuntimeException ( ""Error : could not open local file for writing . "" , e ) ;', 'System . err . println ( ""Error : could not open local file for reading . "" ) ;', 'return false ;', 'System . exit ( 1 ) ;', 'throw new RuntimeException ( ""Error : could not open local file for reading . "" , e ) ;', 'System . err . println ( ""Error : could not open local UDP socket . "" ) ;']","['if ( name ! = null & & name . toUpperCase ( ) . endsWith ( "" . SAVF"" ) )', 'if ( name ! = null & & name . toUpperCase ( Locale . ROOT ) . endsWith ( "" . SAVF"" ) )', 'import java . util . Locale ;']","['num = h . indexOf ( "" % "" ) ;', ""num = h . indexOf ( ' % ' ) ;"", 'if ( attrib . indexOf ( ""W"" ) ! = - 1 ) {', ""if ( attrib . indexOf ( 'R' ) ! = - 1 ) {"", 'if ( attrib . indexOf ( ""R"" ) ! = - 1 ) {', ""if ( attrib . indexOf ( 'W' ) ! = - 1 ) {""]","['else if ( listFiles | | mlsd | | mdtm | | mlst | | listNames )', 'System . out . println ( ""Size = "" + ftp . getSize ( remote ) ) ;', 'else if ( args [ base ] . equals ( "" - i"" ) ) {', 'boolean size = false ;', 'if ( size ) {', 'size = true ;', 'else if ( listFiles | | mlsd | | mdtm | | mlst | | listNames | | size )', '}', '"" - i - issue SIZE command for a file \\ n"" +', 'minParams = 3 ;']","['package examples ;', 'package org . apache . commons . net . examples ;', 'package examples . cidr ;', 'package org . apache . commons . net . examples . cidr ;', 'package examples . ftp ;', 'package org . apache . commons . net . examples . ftp ;', 'package examples . ftp ;', 'package org . apache . commons . net . examples . ftp ;', 'package examples . ftp ;', 'package org . apache . commons . net . examples . ftp ;']","['System . out . println ( ""Writing : "" + mbox ) ;', 'System . out . println ( ""Writing file : "" + mbox ) ;', '""Usage : POP3Mail [ - F file ] < server [ : port ] > < username > < password | - | * | VARNAME > [ TLS [ true = implicit ] ] "" ) ;', '}', 'OutputStreamWriter fw = new OutputStreamWriter ( new FileOutputStream ( mbox ) , Charset . forName ( ""iso - 8859 - 1"" ) ) ;', 'OutputStreamWriter fw = new OutputStreamWriter ( new FileOutputStream ( mbox ) , Charset . forName ( ""iso - 8859 - 1"" ) ) ;', 'writeMbox ( pop3 , fw , i ) ;', 'fw . close ( ) ;', 'fw . close ( ) ;', 'fw . write ( line ) ;']","['"" \\ \\ S + \\ \\ s + "" +', '"" ( ? : \\ \\ S + \\ \\ s + ) ? "" +', '""FPFS25 3390 2004 / 06 / 23 1 1 FB 128 6144 PS INCOMING . WTM204 . D061704"" , } ;', '""PEX26F 3390 2017 / 07 / 03 115807 FB 29600 29600 PS INCOMING . FIN . D170630 . T160630"" ,', '} ;', '""FPFS25 3390 2004 / 06 / 23 1 1 FB 128 6144 PS INCOMING . WTM204 . D061704"" ,']","['output = null ;', 'maxSubnegotiationLength = maxSubnegotiationLength ;', 'super ( termtype ) ;', 'public TelnetClient ( String termtype , int maxSubnegotiationLength )', 'super ( ""VT100"" ) ;', 'this ( ""VT100"" , maxSubnegotiationLength ) ;', 'input = null ;', 'this ( ""VT100"" , DEFAULT MAX SUBNEGOTIATION LENGTH ) ;', '}', 'final int maxSubnegotiationLength ;']","['return false ;', 'if ( address = = 0 ) {', '}', 'assertFalse ( new SubnetUtils ( ""192 . 168 . 1 . 0 / 30"" ) . getInfo ( ) . isInRange ( ""0 . 0 . 0 . 0"" ) ) ;', 'public void testNET641 ( ) {', '}', 'assertFalse ( new SubnetUtils ( ""192 . 168 . 1 . 0 / 32"" ) . getInfo ( ) . isInRange ( ""0 . 0 . 0 . 0"" ) ) ;', 'assertFalse ( new SubnetUtils ( ""192 . 168 . 1 . 0 / 31"" ) . getInfo ( ) . isInRange ( ""0 . 0 . 0 . 0"" ) ) ;', 'assertFalse ( new SubnetUtils ( ""192 . 168 . 1 . 0 / 00"" ) . getInfo ( ) . isInRange ( ""0 . 0 . 0 . 0"" ) ) ;']","['System . err . println ( ""Usage : mail smtpserver"" ) ;', 'System . err . println ( ""Usage : SMTPMail < smtpserver > "" ) ;']","['throw new IOException ( ""Stream closed"" ) ;', 'if ( output = = null ) {', '}', 'return ;']","['imap . list ( """" , "" * "" ) ;']","['System . err . println ( ""Unexpected Return - path : "" + line + "" in "" + firstLine ) ;', 'if ( !parts [ 1 ] . equals ( "" < > "" ) ) {', 'replyTo = replyTo . substring ( 1 , replyTo . length ( ) - 1 ) ;', 'if ( replyTo . endsWith ( "" > "" ) ) {', '} else {', 'replyTo = replyTo . substring ( 1 , replyTo . length ( ) - 1 ) ;', 'String [ ] parts = line . split ( "" "" , 2 ) ;', '}', 'replyTo = parts [ 1 ] ;', '} else {']","['static String quoteString ( String input ) {', 'static String quoteMailboxName ( String input ) {', 'return doCommand ( IMAPCommand . COPY , sequenceSet + "" "" + mailboxName ) ;', 'sb . append ( quoteMailboxName ( mailboxName ) ) ;', 'sb . append ( mailboxName ) ;', 'StringBuilder args = new StringBuilder ( quoteMailboxName ( mailboxName ) ) ;', 'return doCommand ( IMAPCommand . SUBSCRIBE , mailboxName ) ;', 'return doCommand ( IMAPCommand . UNSUBSCRIBE , quoteMailboxName ( mailboxName ) ) ;', 'return doCommand ( IMAPCommand . RENAME , oldMailboxName + "" "" + newMailboxName ) ;', 'return doCommand ( IMAPCommand . LSUB , quoteMailboxName ( refName ) + "" "" + quoteMailboxName ( mailboxName ) ) ;']","['}', 'import java . io . Serializable ;', '@ SuppressWarnings ( ""unchecked"" )', 'private final Factory < ? extends Collection < V > > collectionFactory ;', 'protected Map < K , Collection < V > > getMap ( ) {', 'protected < C extends Collection < V > > AbstractMultiValuedMap ( final Map < K , ? super C > map ,', 'return getMap ( ) . toString ( ) ;', 'private final Map < K , Collection < V > > map ;', 'final Class < C > collectionClazz ) {', 'this . collectionFactory = new InstantiateFactory < C > ( collectionClazz ) ;']","['if ( coll = = null ) {', 'return getMap ( ) ;', 'public Iterator < V > iterator ( final Object key ) {', '}', 'public V getValue ( ) {', 'protected < C extends Collection < V > > AbstractMultiValuedMap ( final Map < K , ? super C > map ,', 'if ( !containsKey ( key ) ) {', 'if ( initialCollectionCapacity < 0 ) {', 'return getMap ( ) . get ( key ) ;', 'public boolean add ( V value ) {']","['UnmodifiableMultiValuedMap . unmodifiableMultiValuedMap ( new MultiValuedHashMap ( ) ) ;', 'return MultiValuedHashMap . < K , V , C > setValuedHashMap ( setClass ) ;', 'return MultiValuedHashMap . < K , V > setValuedHashMap ( ) ;', 'import org . apache . commons . collections4 . multimap . MultiValuedHashMap ;', 'return MultiValuedHashMap . < K , V > listValuedHashMap ( ) ;', '}', 'return MultiValuedHashMap . < K , V , C > listValuedHashMap ( listClass ) ;', 'return ( Bag < V > ) col ;', 'Collection < V > col = map . get ( key ) ;', 'final Transformer < ? super K , ? extends K > keyTransformer ,']","['return false ;', 'public int hashCode ( ) {', 'public boolean equals ( Object obj ) {', '}', 'if ( this = = obj ) {', '@ Override', 'return true ;', 'import java . util . Iterator ;', 'h + = ( key = = null ? 0 : key . hashCode ( ) ) ^ ListUtils . hashCodeForList ( valueList ) ;', 'return h ;']","['new Object [ ] { new Integer ( initialCollectionCapacity ) } ) ;', 'new Object [ ] { Integer . valueOf ( initialCollectionCapacity ) } ) ;']","['}', 'public static < K , V , C extends Set < V > > SetValuedMap < K , V > newSetValuedHashMap ( final Class < C > setClass ) {', 'public static < K , V > List < V > getList ( MultiValuedMap < K , V > map , K key ) {', 'public static < K , V , C extends List < V > > ListValuedMap < K , V > newListValuedHashMap ( final Class < C > listClass ) {', 'private MultiMapUtils ( ) {', 'public static < K , V > Set < V > getValuesAsSet ( final MultiValuedMap < K , V > map , final K key ) {', 'public static < K , V , C extends Set < V > > SetValuedMap < K , V > createSetValuedHashMap ( final Class < C > setClass ) {', 'public static < K , V > List < V > getValuesAsList ( final MultiValuedMap < K , V > map , final K key ) {', 'public static < K , V > Set < V > getSet ( MultiValuedMap < K , V > map , K key ) {', 'public static < K , V > SetValuedMap < K , V > newSetValuedHashMap ( ) {']","['import java . util . Iterator ;', 'return ( List < V > ) super . createCollection ( ) ;', 'h + = ( key = = null ? 0 : key . hashCode ( ) ) ^ ListUtils . hashCodeForList ( valueList ) ;', 'return asMap ( ) . hashCode ( ) ;', 'private static final long serialVersionUID = 6024950625989666915L ;', 'return ( List < V > ) getMap ( ) . get ( key ) ;', 'return h ;', 'return asMap ( ) . equals ( ( ( ListValuedMap < ? , ? > ) obj ) . asMap ( ) ) ;', 'public ValuesListIterator ( Object key , int index ) {', 'protected List < V > createCollection ( ) {']","['public final static String DESERIALIZE', '= ""org . apache . commons . collections . invokertransformer . enableDeserialization"" ;', 'if ( deserializeProperty = = null | | !deserializeProperty . equalsIgnoreCase ( ""true"" ) ) {', '}', '} ) ;', 'import java . io . IOException ;', 'public Object run ( ) {', 'deserializeProperty = null ;', 'import java . security . AccessController ;', '( String ) AccessController . doPrivileged ( new PrivilegedAction ( ) {']","['throw new UnsupportedOperationException ( ""Deserialization of InvokerTransformer is disabled , "" ) ;', '""Deserialization of InvokerTransformer is disabled for security reasons . "" +', 'if ( deserializeProperty = = null | | !deserializeProperty . equalsIgnoreCase ( ""true"" ) ) {', 'if ( !""true"" . equalsIgnoreCase ( deserializeProperty ) ) {', 'throw new UnsupportedOperationException (', '""To re - enable it set system property \'"" + DESERIALIZE + ""\' to \'true\'"" ) ;', 'import java . io . ObjectOutputStream ;']","['protected String fileSeparator = System . getProperty ( ""file . separator"" ) ;', 'put ( key , i ) ;', 'put ( key , f ) ;', 'put ( key , b ) ;', 'put ( key , d ) ;', 'put ( key , s ) ;', 'remove ( key ) ;', 'put ( key , l ) ;', 'return getProperties ( key , new Properties ( ) ) ;', 'currentOutput . append ( currentElement ) ;']","['final LinkedMap < K , ? > parent ;', 'private final LinkedMap < K , ? > parent ;']","['assertEquals ( 3 , lom . insertOrder . size ( ) ) ;', 'assertEquals ( 3 , lom . keyList ( ) . size ( ) ) ;']","['protected final List < K > insertOrder = new ArrayList < K > ( ) ;', 'private final List < K > insertOrder = new ArrayList < K > ( ) ;']","['protected List < Set < E > > all = new ArrayList < Set < E > > ( ) ;', 'private SetMutator < E > mutator ;', 'protected SetMutator < E > mutator ;', 'private final List < Set < E > > all = new ArrayList < Set < E > > ( ) ;']","['protected final List < E > setOrder ;', 'private final Collection < E > set ;', 'protected final Collection < E > set ;', 'private E last ;', 'protected E last ;', 'private final List < E > setOrder ;']","['protected final V dummyValue ;', 'private final V dummyValue ;', 'protected final Map < E , ? super V > map ;', 'private final Map < E , ? super V > map ;']","['protected final int lengthInBits ;', 'private final K fromKey ;', 'protected final int offset ;', 'private final int lengthInBits ;', 'protected TrieEntry < K , V > subtree ;', 'private TrieEntry < K , V > subtree ;', 'protected final boolean fromInclusive ;', 'private final boolean fromInclusive ;', 'protected final K prefix ;', 'private final K prefix ;']","['protected final AbstractHashedMap < K , V > parent ;', 'private final AbstractHashedMap < K , V > parent ;', 'protected final AbstractHashedMap < ? , V > parent ;', 'private int expectedModCount ;', 'protected final AbstractHashedMap < K , ? > parent ;', 'private HashEntry < K , V > last ;', 'protected HashEntry < K , V > last ;', 'private final AbstractHashedMap < ? , V > parent ;', 'protected int hashIndex ;', 'private final AbstractHashedMap < K , ? > parent ;']","['protected transient LinkEntry < K , V > header ;', 'protected transient LinkEntry < K , V > header ;', 'protected LinkEntry < K , V > before ;', 'protected LinkEntry < K , V > before ;', 'protected transient Map < K , V > map ;', 'protected transient Map < K , V > map ;', 'protected transient Map < K , V > map ;', 'protected transient Map < K , V > map ;']","['assertFalse ( CollectionUtils . isEqualCollection ( collectionA , collB , defaultEquator ) ) ;', 'assertFalse ( CollectionUtils . isEqualCollection ( collectionA , collB , defaultEquator ) ) ;', '/ /', '/ /', 'list . add ( new X ( 2 , ""x3"" ) ) ;', 'list . add ( new X ( 2 , ""x3"" ) ) ;', '}', '}', '}', '}']","['if ( other = = null ) {', 'final Character other , final int otherOffsetInBits , final int otherLengthInBits ) {', '}', 'other = Character . MIN VALUE ;', 'Character other , final int otherOffsetInBits , final int otherLengthInBits ) {']","['return ( key & mask ( bitIndex ) ) ! = 0 ;', 'return ( key . charValue ( ) & mask ( bitIndex ) ) ! = 0 ;']","['public boolean isPrefix ( final Character prefix , final int offsetInBits ,', 'public boolean isPrefix ( final Character prefix , final int offsetInBits ,', 'throw new IllegalArgumentException ( ""offsetInBits = "" + offsetInBits', 'throw new IllegalArgumentException ( ""offsetInBits = "" + offsetInBits', 'public int bitIndex ( final Character key , final int offsetInBits , final int lengthInBits ,', 'public int bitIndex ( final Character key , final int offsetInBits , final int lengthInBits ,', 'public static final CharacterKeyAnalyzer INSTANCE', 'public static final CharacterKeyAnalyzer INSTANCE']","['return sequence . charAt ( index ) ;', 'return Character . valueOf ( sequence . charAt ( index ) ) ;']","['throw new IllegalArgumentException ( ""Size must be greater than 0"" ) ;', 'throw new IllegalArgumentException ( ""Size must be greater than 0"" ) ;', '}', '}', 'throw new IllegalArgumentException ( ""CharSequence must not be null"" ) ;', 'throw new IllegalArgumentException ( ""CharSequence must not be null"" ) ;', 'throw new IndexOutOfBoundsException ( ""Index "" + index + "" must not be negative"" ) ;', 'throw new IndexOutOfBoundsException ( ""Index "" + index + "" must not be negative"" ) ;', 'listSize ) ;', 'listSize ) ;']","['return ( this = = object ) | |', 'return ( this = = object ) | |', '( ( object instanceof BooleanComparator ) & &', '( ( object instanceof BooleanComparator ) & &', 'return this = = object | |', 'return this = = object | |']","['@ SuppressWarnings ( ""unchecked"" )', '@ SuppressWarnings ( ""unchecked"" )', 'throw new IllegalArgumentException ( ""Objects of type "" + object . getClass ( ) + "" cannot be added to "" +', 'throw new IllegalArgumentException ( ""Objects of type "" + object . getClass ( ) + "" cannot be added to "" +']","['( getValue ( ) = = null ? 0 : getValue ( ) . hashCode ( ) ) ;', '( getValue ( ) = = null ? 0 : getValue ( ) . hashCode ( ) ) ;', 'return', 'return', '( value = = null ? 0 : value . hashCode ( ) ) ;', '( value = = null ? 0 : value . hashCode ( ) ) ;']","['@ SuppressWarnings ( ""unchecked"" )', '@ SuppressWarnings ( ""unchecked"" )']","['}', '}']","['@ SuppressWarnings ( ""unchecked"" )', '@ SuppressWarnings ( ""unchecked"" )']","['final TransformedQueue < E > decorated = new TransformedQueue < E > ( queue , transformer ) ;', 'final TransformedQueue < E > decorated = new TransformedQueue < E > ( queue , transformer ) ;']","['super . removeAllNodes ( ) ;', 'super . removeAllNodes ( ) ;', '}', '}']","['throw new IllegalStateException ( ""Invalid map index"" ) ;', 'break ;', 'throw new IllegalStateException ( ""Invalid map index : "" + index ) ;', 'default :', 'case 0 :', 'throw new IllegalStateException ( ""Invalid map index : "" + nextIndex ) ;', 'throw new IllegalStateException ( ""Invalid map index : "" + size ) ;']","['return ( Bag < E > ) EMPTY BAG ;', 'return ( Bag < E > ) EMPTY BAG ;', 'return ( SortedBag < E > ) EMPTY SORTED BAG ;', 'return ( SortedBag < E > ) EMPTY SORTED BAG ;', 'REMOVE ,', 'REMOVE ,', 'CONTINUE ,', 'CONTINUE ,', 'EXIT ,', 'EXIT ,']","['}', 'assertNotNull ( string3 ) ;', 'final String string1 = m . toString ( ) ;', 'assertNotSame ( string2 , string3 ) ;', 'assertNotSame ( string0 , string1 ) ;', 'assertNotNull ( string1 ) ;', 'final String string3 = m . toString ( ) ;', 'm . put ( Integer . valueOf ( 0 ) , Integer . valueOf ( 0 ) ) ;', 'assertNotNull ( string0 ) ;', 'public void testToString ( ) {']","['return ( Queue < E > ) super . getCollection ( ) ;', 'return super . getCollection ( ) ;']","['return super . hashCode ( ) ;', '@ Override', '}', 'public int hashCode ( ) {']","['assertEquals ( i , orderedList . get ( i ) ) ;', 'assertEquals ( Integer . valueOf ( i ) , orderedList . get ( i ) ) ;']","['@ SuppressWarnings ( ""boxing"" )', '@ SuppressWarnings ( ""boxing"" )', '@ SuppressWarnings ( ""boxing"" )', '@ SuppressWarnings ( ""boxing"" )', '@ SuppressWarnings ( ""boxing"" )', '@ SuppressWarnings ( ""boxing"" )', '@ SuppressWarnings ( ""boxing"" )', '@ SuppressWarnings ( ""boxing"" )', '@ SuppressWarnings ( ""boxing"" )']","['return key - o . key ;', 'return key - o . key | name . compareTo ( o . name ) ;']","['abstract class AbstractTrie < K , V > extends AbstractMap < K , V >', 'abstract class AbstractTrie < K , V > extends AbstractMap < K , V >', 'if ( compare ( key , other . getKey ( ) )', 'if ( compare ( key , other . getKey ( ) )', 'return keyAnalyzer . bitIndex ( key , 0 , lengthInBits ( key ) ,', 'return keyAnalyzer . bitIndex ( key , 0 , lengthInBits ( key ) ,', 'public int bitIndex ( final byte [ ] key , final int offsetInBits , final int lengthInBits ,', 'public int bitIndex ( final byte [ ] key , final int offsetInBits , final int lengthInBits ,', 'if ( isBitSet ( prefix , i + offsetInBits , lengthInBits )', 'if ( isBitSet ( prefix , i + offsetInBits , lengthInBits )']","['return object ;', 'return object ;', '}', '}', 'public static < E > List < E > longestCommonSubsequence ( final List < E > a , final List < E > b , final Equator < ? super E > equator ) {', 'public static < E > List < E > longestCommonSubsequence ( final List < E > a , final List < E > b ,', 'final Equator < ? super E > equator ) {', 'final Transformer < E , K > keyTransformer ,', 'final Transformer < E , K > keyTransformer ,', 'public static < K , V , E > void populateMap ( final Map < K , V > map , final Collection < ? extends E > collection ,']","['throw new IllegalArgumentException ( ""Initial capacity must be a non negative number"" ) ;', 'throw new IllegalArgumentException ( ""Initial capacity must be a non negative number"" ) ;', '}', '}', 'protected synchronized Map . Entry < K , V > current ( ) {', 'protected synchronized Map . Entry < K , V > current ( ) {', '@ SuppressWarnings ( ""unchecked"" )', '@ SuppressWarnings ( ""unchecked"" )', '@ SuppressWarnings ( ""unchecked"" )', '@ SuppressWarnings ( ""unchecked"" )']","['private boolean previousObjectSet = false ;', 'private boolean previousObjectSet = false ;', 'private boolean nextObjectSet = false ;', 'private boolean nextObjectSet = false ;', 'this . iterator = new ListIteratorWrapper < E > ( iterator ) ;', 'this . iterator = new ListIteratorWrapper < E > ( iterator ) ;']","['@ SuppressWarnings ( ""unchecked"" )', '@ SuppressWarnings ( ""unchecked"" )', '@ SuppressWarnings ( ""unchecked"" )', '@ SuppressWarnings ( ""unchecked"" )']","['paramTypes = paramTypes . clone ( ) ;', 'iArgs = args . clone ( ) ;', 'args = args . clone ( ) ;', 'iParamTypes = paramTypes . clone ( ) ;', 'iParamTypes = paramTypes ;', 'iArgs = args ;']","['public static < T > Transformer < Class < ? extends T > , T > instantiateTransformer ( Class < ? > [ ] paramTypes , Object [ ] args ) {', 'iArgs = args ! = null ? args . clone ( ) : null ;', 'iArgs = args . clone ( ) ;', 'iParamTypes = paramTypes ! = null ? paramTypes . clone ( ) : null ;', 'iParamTypes = paramTypes . clone ( ) ;', 'public static < T > Transformer < Class < ? extends T > , T > instantiateTransformer ( final Class < ? > [ ] paramTypes ,', 'final Object [ ] args ) {', 'public static < I , O > Transformer < I , O > invokerTransformer ( final String methodName , Class < ? > [ ] paramTypes ,', 'iArgs = args ! = null ? args . clone ( ) : null ;', 'paramTypes = paramTypes . clone ( ) ;']","['return new ChainedClosure < E > ( cmds ) ;', '}', 'return new ChainedClosure < E > ( FunctorUtils . copy ( closures ) ) ;', 'this ( true , closures ) ;', 'iClosures = closures ;', 'iClosures = clone ? FunctorUtils . copy ( closures ) : closures ;', 'super ( ) ;', 'public ChainedClosure ( final Closure < ? super E > . . . closures ) {', 'public ChainedClosure ( final Closure < ? super E > [ ] closures ) {', 'return new ChainedClosure < E > ( closures ) ;']","['@ SuppressWarnings ( ""unchecked"" )', 'return new SwitchClosure < E > ( false , preds , closures , defaultClosure ) ;', 'return new SwitchClosure < E > ( FunctorUtils . copy ( predicates ) , FunctorUtils . copy ( closures ) , defaultClosure ) ;', 'final Closure < ? super E > [ ] closures , final Closure < ? super E > defaultClosure ) {', 'return new SwitchClosure < E > ( preds , closures , defaultClosure ) ;', '@ SuppressWarnings ( ""unchecked"" )', 'iPredicates = predicates ;', 'this ( true , predicates , closures , defaultClosure ) ;', 'iClosures = closures ;', 'iPredicates = clone ? FunctorUtils . copy ( predicates ) : predicates ;']","['public AbstractQuantifierPredicate ( final Predicate < ? super T > . . . predicates ) {', 'public AbstractQuantifierPredicate ( final Predicate < ? super T > . . . predicates ) {', 'public static < T > Predicate < T > allPredicate ( final Predicate < ? super T > . . . predicates ) {', 'public static < T > Predicate < T > allPredicate ( final Predicate < ? super T > . . . predicates ) {', 'public AllPredicate ( final Predicate < ? super T > . . . predicates ) {', 'public AllPredicate ( final Predicate < ? super T > . . . predicates ) {', 'public AnyPredicate ( final Predicate < ? super T > [ ] predicates ) {', 'public AnyPredicate ( final Predicate < ? super T > . . . predicates ) {', 'public NonePredicate ( final Predicate < ? super T > [ ] predicates ) {', 'public NonePredicate ( final Predicate < ? super T > . . . predicates ) {']","['static void validate ( final Transformer < ? , ? > [ ] transformers ) {', 'static void validate ( final Closure < ? > . . . closures ) {', 'static void validate ( final Closure < ? > [ ] closures ) {', 'static < T > Predicate < T > [ ] copy ( final Predicate < ? super T > . . . predicates ) {', 'static void validate ( final Predicate < ? > [ ] predicates ) {', 'static < I , O > Transformer < I , O > [ ] copy ( final Transformer < ? super I , ? extends O > . . . transformers ) {', 'static < T > Predicate < T > [ ] copy ( final Predicate < ? super T > [ ] predicates ) {', 'static < E > Closure < E > [ ] copy ( final Closure < ? super E > . . . closures ) {', 'static < E > Closure < E > [ ] copy ( final Closure < ? super E > [ ] closures ) {', 'static void validate ( final Transformer < ? , ? > . . . transformers ) {']","['public FixedOrderComparator ( final T [ ] items ) {', 'public FixedOrderComparator ( final T . . . items ) {']","['@ SuppressWarnings ( ""unchecked"" )', 'final Comparator < E > . . . comparators ) {', '}', 'return chainedComparator ( new Comparator [ ] { comparator1 , comparator2 } ) ;', 'final Comparator < E > [ ] comparators ) {', 'public static < E extends Comparable < ? super E > > Comparator < E > chainedComparator ( final Comparator < E > comparator1 ,', 'final Comparator < E > comparator2 ) {', 'final Iterator < ? extends E > iterator2 ) {', 'public static < E > ResettableListIterator < E > arrayListIterator ( final E . . . array ) {', 'return new IteratorChain < E > ( iterator1 , iterator2 ) ;']","['public UniqueFilterIterator ( final Iterator < E > iterator ) {', 'public UniqueFilterIterator ( final Iterator < ? extends E > iterator ) {']","['@ SuppressWarnings ( ""unchecked"" )', '@ SuppressWarnings ( ""unchecked"" )', '@ SuppressWarnings ( ""unchecked"" )', '@ SuppressWarnings ( ""unchecked"" )', '@ SuppressWarnings ( ""unchecked"" )', '@ SuppressWarnings ( ""unchecked"" )', '@ SuppressWarnings ( ""unchecked"" )', '@ SuppressWarnings ( ""unchecked"" )', '@ SuppressWarnings ( ""unchecked"" )', '@ SuppressWarnings ( ""unchecked"" )']","['entry . setValue ( ""88"" ) ;', 'final Map . Entry < K , V > entry = entrySet . iterator ( ) . next ( ) ;', 'final Map . Entry entry = entrySet . iterator ( ) . next ( ) ;', 'entry . setValue ( ( V ) ""88"" ) ;']","['final Iterator < ? extends E > iterator2 ) {', 'return new IteratorChain < E > ( iterator1 , iterator2 ) ;', '}', 'public static < E > Iterator < E > chainedIterator ( final Iterator < ? extends E > iterator1 ,']","['return PeekingIterator . peekingIterator ( iterator ) ;', 'import org . apache . commons . collections4 . iterators . PeekingIterator ;', 'public static < E > Iterator < E > peekingIterator ( final Iterator < ? extends E > iterator ) {', '}', 'if ( iterator . hasNext ( ) ) {', 'return slotFilled ? true : iterator . hasNext ( ) ;', 'throw new NoSuchElementException ( ) ;', 'public class PeekingIterator < E > implements Iterator < E > {', 'private boolean exhausted = false ;', '}']","['public static < E > Iterator < E > pushbackIterator ( final Iterator < ? extends E > iterator ) {', 'return PushbackIterator . pushbackIterator ( iterator ) ;', 'import org . apache . commons . collections4 . iterators . PushbackIterator ;', '}', 'final PushbackIterator < E > it = ( PushbackIterator < E > ) iterator ;', '}', 'return it ;', 'return new PushbackIterator < E > ( iterator ) ;', 'return !items . isEmpty ( ) ? items . pop ( ) : iterator . next ( ) ;', 'private ArrayStack < E > items = new ArrayStack < E > ( ) ;']","['public static < K , V > void populateMap ( final Map < K , V > map , final Collection < ? extends V > collection ,', 'public static < K , V > void populateMap ( final MultiMap < K , V > map , final Iterable < ? extends V > elements ,', 'public static < K , V , E > void populateMap ( final Map < K , V > map , final Collection < ? extends E > collection ,', 'public static < K , V , E > void populateMap ( final MultiMap < K , V > map , final Iterable < ? extends E > elements ,', 'public static < K , V , E > void populateMap ( final MultiMap < K , V > map , final Collection < ? extends E > collection ,', 'public static < K , V > void populateMap ( final Map < K , V > map , final Iterable < ? extends V > elements ,', 'populateMap ( map , collection , keyTransformer , TransformerUtils . < V > nopTransformer ( ) ) ;', 'public static < K , V , E > void populateMap ( final Map < K , V > map , final Iterable < ? extends E > elements ,', 'public static < K , V > void populateMap ( final MultiMap < K , V > map , final Collection < ? extends V > collection ,', 'populateMap ( map , elements , keyTransformer , TransformerUtils . < V > nopTransformer ( ) ) ;']","['final Iterator < Map . Entry < Object , Long > > iter = expirationMap . entrySet ( )', 'final Iterator < Map . Entry < Object , Long > > iter = expirationMap . entrySet ( ) . iterator ( ) ;', '. iterator ( ) ;']","['final ArrayList < O > answer = new ArrayList < O > ( ) ;', 'public static < T , C extends Closure < ? super T > > T forAllButLastDo ( final Iterable < T > collection ,', 'public static < O extends Comparable < ? super O > > List < O > collate ( Collection < ? extends O > a ,', 'return select ( inputCollection , predicate , answer ) ;', 'public static < O > Collection < O > select ( final Collection < ? extends O > inputCollection ,', 'public static < T > T find ( final Iterable < T > collection , final Predicate < ? super T > predicate ) {', 'final int totalSize = Math . max ( 1 , a . size ( ) + b . size ( ) ) ;', 'public static < O , R extends Collection < ? super O > > R selectRejected ( final Iterable < ? extends O > inputCollection ,', 'public static < O , R extends Collection < ? super O > > R selectRejected ( final Collection < ? extends O > inputCollection ,', 'public static < O , R extends Collection < ? super O > > R select ( final Iterable < ? extends O > inputCollection ,']","['throw new NullPointerException ( ""Iterator must not be null"" ) ;', 'while ( currentIterator . hasNext ( ) = = false & & !iteratorChain . isEmpty ( ) ) {', '}', 'import java . util . Queue ;', 'public void setIterator ( final int index , final Iterator < ? extends E > iterator )', 'import java . util . LinkedList ;', 'currentIterator = iteratorChain . get ( currentIteratorIndex ) ;', 'private final Queue < Iterator < ? extends E > > iteratorChain = new LinkedList < Iterator < ? extends E > > ( ) ;', 'currentIterator = iteratorChain . get ( 0 ) ;', 'currentIterator = iteratorChain . remove ( ) ;']","['0L ) ;', 'new PassiveExpiringMap < Integer , String > ( new TestExpirationPolicy ( ) ) ;', 'extends AbstractMapTest < K , V > {', 'public class PassiveExpiringMapTest < K , V > extends AbstractMapTest < K , V > {', 'final PassiveExpiringMap < String , String > m = new PassiveExpiringMap < String , String > (', 'final PassiveExpiringMap < String , String > m = new PassiveExpiringMap < String , String > ( 0L ) ;', 'new TestExpirationPolicy ( ) ,', 'return new PassiveExpiringMap < Integer , String > ( new TestExpirationPolicy ( ) , m ) ;', 'return new PassiveExpiringMap < Integer , String > (', 'final Map < Integer , String > m =']","['return result ;', 'if ( getCount ( current ) < other . getCount ( current ) ) {', 'final boolean contains = getCount ( current ) > = other . getCount ( current ) ;', 'return true ;', 'boolean result = true ;', 'return false ;', 'result = result & & contains ;', '}']","['}', 'public abstract class AbstractKeyAnalyzer < K > implements KeyAnalyzer < K > {', 'static boolean isNullBitKey ( final int bitIndex ) {', 'if ( o1 = = null ) {', 'return bitIndex = = EQUAL BIT KEY ;', 'static boolean isEqualBitKey ( final int bitIndex ) {', 'return ( ( Comparable < K > ) o1 ) . compareTo ( o2 ) ;', 'return o2 = = null ? 0 : - 1 ;', 'private static final long serialVersionUID = - 20497563720380683L ;', '} else if ( o2 = = null ) {']","['public Map . Entry < K , V > select ( K key ) ;', 'public V selectValue ( K key ) ;', 'public K selectKey ( K key ) ;', 'public Map . Entry < K , V > select ( K key , Cursor < ? super K , ? super V > cursor ) ;', 'public AbstractTrie ( final KeyAnalyzer < ? super K > keyAnalyzer ) {', 'import java . util . Map . Entry ;', 'abstract class AbstractTrie < K , V > extends AbstractMap < K , V >', 'public abstract Map . Entry < K , V > select ( K key , Cursor < ? super K , ? super V > cursor ) ;', 'public AbstractBitwiseTrie ( final KeyAnalyzer < ? super K > keyAnalyzer ) {', 'public abstract Map . Entry < K , V > select ( K key ) ;']","['return new TransformedMap < J , K , U , V > ( map , keyTransformer , valueTransformer ) ;', 'public static < J , K , U , V > TransformedSplitMap < J , K , U , V > transformingMap ( final Map < K , V > map ,', 'protected TransformedMap ( final Map < K , V > map , final Transformer < ? super J , ? extends K > keyTransformer ,', 'public class TransformedSplitMap < J , K , U , V > extends AbstractIterableGetMapDecorator < K , V >', 'public static < J , K , U , V > TransformedMap < J , K , U , V > transformingMap ( final Map < K , V > map ,', 'return new TransformedSplitMap < J , K , U , V > ( map , keyTransformer , valueTransformer ) ;', 'public class TransformedMap < J , K , U , V > extends AbstractIterableGetMapDecorator < K , V >', 'protected TransformedSplitMap ( final Map < K , V > map , final Transformer < ? super J , ? extends K > keyTransformer ,', 'import org . apache . commons . collections4 . splitmap . TransformedMap ;', 'import org . apache . commons . collections4 . splitmap . TransformedSplitMap ;']","['import java . util . Map . Entry ;', 'public SortedMap < K , V > prefixMap ( K key ) ;', 'public static enum Decision {', 'public interface Trie < K , V > extends IterableSortedMap < K , V > {', 'CONTINUE ,', 'public SortedMap < K , V > getPrefixedBy ( K key , int length ) ;', 'public SortedMap < K , V > getPrefixedByBits ( K key , int lengthInBits ) ;', 'REMOVE AND EXIT ;', 'public interface Trie < K , V > extends SortedMap < K , V > {', 'EXIT ,']","['assertNull ( CollectionUtils . forAllButLastDo ( ( Collection < ? > ) null , null ) ) ;', 'assertNull ( CollectionUtils . forAllButLastDo ( ( Collection < ? > ) null , ( Closure ) null ) ) ;', 'assertNull ( CollectionUtils . forAllButLastDo ( strings , null ) ) ;', 'assertNull ( CollectionUtils . forAllButLastDo ( col . iterator ( ) , ( Closure ) null ) ) ;', 'assertNull ( CollectionUtils . forAllButLastDo ( col . iterator ( ) , null ) ) ;', 'assertNull ( CollectionUtils . forAllButLastDo ( strings , ( Closure ) null ) ) ;']","['public static < K , V > Trie < K , V > synchronizedTrie ( final Trie < K , V > trie ) {', 'return SynchronizedTrie . synchronizedTrie ( trie ) ;', '}', 'import org . apache . commons . collections4 . trie . SynchronizedTrie ;', 'abstract class AbstractPatriciaTrie < K , V > extends AbstractBitwiseTrie < K , V > {', 'abstract class AbstractPatriciaTrie < K , V > extends AbstractBitwiseTrie < K , V > implements Trie < K , V > {', 'import org . apache . commons . collections4 . Trie ;', 'public synchronized void clear ( ) {', 'return delegate . remove ( key ) ;', 'import org . apache . commons . collections4 . Trie ;']","['final Iterator < Map . Entry < K , V > > it = entrySet ( ) . iterator ( ) ;', 'final Iterator < Map . Entry < K , V > > it = super . entrySet ( ) . iterator ( ) ;']","['@ Override', '}', 'return false ;', 'public boolean isSubMapViewsSerializable ( ) {']","['protected transient Map < K , V > map ;', 'protected transient Map < K , V > map ;', 'protected transient Map < K , V > map ;', 'protected transient Map < K , V > map ;']","['public void setArray ( final Object array ) {', 'protected void checkBound ( final int bound , final int len , final String type ) {', 'protected int startIndex = 0 ;', 'this ( array , startIndex , Array . getLength ( array ) ) ;', 'this . startIndex = startIndex ;', 'final int len = Array . getLength ( array ) ;', 'this . startIndex = 0 ;', 'protected final int endIndex ;', 'this . index = 0 ;', 'protected final int startIndex ;']","['. iterator ( ) ) ;', 'return UnmodifiableIterator . < E > unmodifiableIterator ( decorated ( ) . iterator ( ) ) ;', 'return UnmodifiableIterator . < E > unmodifiableIterator ( decorated ( )']","['return CompliantBag . compliantBag ( bag ) ;', 'import org . apache . commons . collections4 . bag . CompliantBag ;', '}', 'public static < E > Bag < E > compliantBag ( final Bag < E > bag ) {', 'final boolean added = add ( i . next ( ) , 1 ) ;', 'public boolean retainAll ( final Collection < ? > coll ) {', 'return true ;', 'import java . io . ObjectOutputStream ;', 'return add ( object , 1 ) ;', 'out . defaultWriteObject ( ) ;']","['protected transient LinkEntry < K , V > header ;', 'protected transient LinkEntry < K , V > header ;', 'protected LinkEntry < K , V > before ;', 'protected LinkEntry < K , V > before ;']","['protected final Object array ;', 'final int startIndex ;', 'protected final int endIndex ;', 'int index = 0 ;', 'protected int index = 0 ;', 'final Object array ;', 'protected final int startIndex ;', 'final int endIndex ;', 'protected final E [ ] array ;', 'final int startIndex ;']","['public static < K , V > Map < K , V > putAll ( final Map < K , V > map , final Object . . . array ) {', 'public static < K , V > Map < K , V > putAll ( final Map < K , V > map , final Object [ ] array ) {']","['collection = ( Collection < E > ) in . readObject ( ) ;', 'out . writeObject ( decorated ( ) ) ;', 'out . writeObject ( collection ) ;', 'setCollection ( ( Collection < E > ) in . readObject ( ) ) ;', 'return ( Bag < E > ) collection ;', 'return ( Bag < E > ) decorated ( ) ;', 'return ( SortedBag < E > ) collection ;', 'return ( SortedBag < E > ) decorated ( ) ;', 'collection = ( Collection < E > ) in . readObject ( ) ;', 'out . writeObject ( decorated ( ) ) ;']","['protected transient BidiMap < V , K > inverseBidiMap = null ;', 'transient Map < V , K > reverseMap ;', 'protected transient Collection < V > values = null ;', 'transient Set < Map . Entry < K , V > > entrySet = null ;', 'protected transient Map < K , V > normalMap ;', 'transient Map < K , V > normalMap ;', 'protected transient Set < Map . Entry < K , V > > entrySet = null ;', 'transient BidiMap < V , K > inverseBidiMap = null ;', 'protected transient Set < K > keySet = null ;', 'transient Collection < V > values = null ;']","['reset ( ) ;', 'reset ( ) ;', 'private void reset ( ) {', '}']","['iterator = IteratorUtils . arrayListIterator ( null ) ;', 'iterator = IteratorUtils . arrayIterator ( ( Object [ ] ) null ) ;', 'iterator = IteratorUtils . arrayIterator ( null ) ;', 'iterator = IteratorUtils . arrayListIterator ( ( Object [ ] ) null ) ;']","['hmap . put ( key2 , ""2"" ) ;', 'hmap . put ( key2 , null ) ;', 'listMap . put ( key1 , null ) ;', 'listMap . put ( key1 , ""3"" ) ;', 'public void testCOLLECTIONS 474 nullValues ( ) {', 'HashMap < Object , Object > hmap = new HashMap < Object , Object > ( ) ;', 'Object key2 = new Object ( ) ;', '}', 'public void testCOLLECTIONS 474 nonNullValues ( ) {', 'hmap . put ( key1 , null ) ;']","['final V old = put ( index , entry . getKey ( ) , entry . getValue ( ) ) ;', 'final boolean contains = containsKey ( key ) ;', 'if ( old = = null ) {', 'put ( index , entry . getKey ( ) , entry . getValue ( ) ) ;', 'final K key = entry . getKey ( ) ;', 'if ( !contains ) {']","['if ( index < 0 | | index > insertOrder . size ( ) ) {', '}', 'throw new IndexOutOfBoundsException ( ""Index : "" + index + "" , Size : "" + insertOrder . size ( ) ) ;']","['return CompliantBag . compliantBag ( bag ) ;', 'return CollectionBag . collectionBag ( bag ) ;', 'import org . apache . commons . collections4 . bag . CompliantBag ;', 'import org . apache . commons . collections4 . bag . CollectionBag ;', 'public static < E > Bag < E > compliantBag ( final Bag < E > bag ) {', 'public static < E > Bag < E > collectionBag ( final Bag < E > bag ) {', 'public CompliantBag ( final Bag < E > bag ) {', 'public final class CollectionBag < E >', 'public static < E > Bag < E > compliantBag ( final Bag < E > bag ) {', 'public static < E > Bag < E > collectionBag ( final Bag < E > bag ) {']","['this ( validateAndConvertToMillis ( timeToLive , TimeUnit . MILLISECONDS ) ) ;', 'return TimeUnit . MILLISECONDS . convert ( timeToLive , timeUnit ) ;', 'return timeUnit . convert ( timeToLive , TimeUnit . MILLISECONDS ) ;', 'this ( validateAndConvertToMillis ( timeToLive , timeUnit ) ) ;', 'validateExpiration ( new PassiveExpiringMap < String , String > ( 1000 ) , 1000 ) ;', 'assertNotNull ( map . get ( ""a"" ) ) ;', 'private void validateExpiration ( final Map < String , String > map , long timeout ) {', 'fail ( ) ;', 'try {', 'new PassiveExpiringMap . ConstantTimeToLiveExpirationPolicy < String , String > ( 1 , TimeUnit . SECONDS ) ) , 1000 ) ;']","['all . add ( set1 ) ;', 'addComposited ( set1 ) ;', 'public void addComposited ( final Set < E > [ ] sets ) {', 'addComposited ( set2 ) ;', 'all . addAll ( Arrays . asList ( sets ) ) ;', 'public void addComposited ( final Set < E > . . . sets ) {', 'all . add ( set2 ) ;', '}', 'import java . util . Arrays ;', 'addComposited ( set ) ;']","['import java . util . Set ;', 'Set < V > values ( ) ;', 'return decorated ( ) . values ( ) ;', 'import java . util . Set ;', 'public Set < V > values ( ) {', '}', 'transient Collection < V > values = null ;', 'public Set < V > values ( ) {', 'public Collection < V > values ( ) {', 'transient Set < V > values = null ;']","['public void addComposited ( final Collection < E > [ ] compositeCollections ) {', 'public CompositeCollection ( final Collection < E > . . . compositeCollections ) {', 'public CompositeCollection ( final Collection < E > [ ] compositeCollections ) {', 'public void addComposited ( final Collection < E > . . . compositeCollections ) {']","['public static < E > Bag < E > unmodifiableBag ( final Bag < E > bag ) {', 'public static < E > Bag < E > unmodifiableBag ( final Bag < ? extends E > bag ) {', 'public static < C > Collection < C > unmodifiableCollection ( final Collection < C > collection ) {', 'public static < C > Collection < C > unmodifiableCollection ( final Collection < ? extends C > collection ) {', 'public static < E > List < E > toList ( final Enumeration < E > enumeration ) {', 'public static < E > List < E > toList ( final Enumeration < ? extends E > enumeration ) {', 'public static < E > List < E > unmodifiableList ( final List < E > list ) {', 'public static < E > List < E > unmodifiableList ( final List < ? extends E > list ) {', 'public static < K , V > Map < K , V > unmodifiableMap ( final Map < K , V > map ) {', 'public static < K , V > Map < K , V > unmodifiableMap ( final Map < ? extends K , ? extends V > map ) {']","['public static < C > boolean matchesAll ( final Iterable < C > input , final Predicate < ? super C > predicate ) {', 'return true ;', '}', 'for ( final C o : input ) {', 'return false ;', 'if ( input ! = null ) {', 'if ( !predicate . evaluate ( o ) ) {', 'if ( predicate = = null ) {', 'assertFalse ( CollectionUtils . matchesAll ( collectionA , null ) ) ;', 'Predicate < Integer > lessThanFour = new Predicate < Integer > ( ) {']","['assertNull ( CollectionUtils . forAllButLastDo ( ( Collection < ? > ) null , ( Closure ) null ) ) ;', 'assertNull ( CollectionUtils . forAllButLastDo ( col . iterator ( ) , ( Closure < List < ? extends Number > > ) null ) ) ;', 'assertNull ( CollectionUtils . forAllButLastDo ( col . iterator ( ) , ( Closure ) null ) ) ;', 'assertNull ( CollectionUtils . forAllButLastDo ( ( Collection < String > ) null , ( Closure < String > ) null ) ) ;', 'assertNull ( CollectionUtils . forAllButLastDo ( strings , ( Closure ) null ) ) ;', 'assertNull ( CollectionUtils . forAllButLastDo ( strings , ( Closure < String > ) null ) ) ;', 'assertNull ( CollectionUtils . forAllButLastDo ( ( Iterator < String > ) null , ( Closure < String > ) null ) ) ;']","['import org . apache . commons . collections4 . functors . Equator ;', 'package org . apache . commons . collections4 . functors ;', 'package org . apache . commons . collections4 ;', 'import org . apache . commons . collections4 . functors . Equator ;', 'import org . apache . commons . collections4 . Equator ;', 'import org . apache . commons . collections4 . Equator ;', 'import org . apache . commons . collections4 . functors . Equator ;', 'import org . apache . commons . collections4 . Equator ;']","['public void testUnmodifiableQueue ( ) {', 'queue . add ( new Object ( ) ) ;', 'return BulkTest . makeSuite ( QueueUtilsTest . class ) ;', 'try {', 'import org . apache . commons . collections4 . Predicate ;', 'public class QueueUtilsTest extends BulkTest {', 'protected Predicate < Object > truePredicate = TruePredicate . truePredicate ( ) ;', 'protected Class < ? > stringClass = this . getName ( ) . getClass ( ) ;', 'assertTrue ( ""Returned object should be an TransformedQueue . "" , queue instanceof TransformedQueue ) ;', 'public static Test suite ( ) {']","['import org . apache . commons . collections4 . trie . UnmodifiableTrie ;', 'import junit . framework . Test ;', 'return BulkTest . makeSuite ( TrieUtilsTest . class ) ;', 'public void testUnmodifiableTrie ( ) {', 'public TrieUtilsTest ( final String name ) {', 'public class TrieUtilsTest extends BulkTest {', 'import org . apache . commons . collections4 . trie . PatriciaTrie ;', 'super ( name ) ;', 'try {', 'public static Test suite ( ) {']","['assertEquals ( ""Queues is the right size"" , queue . size ( ) , queue2 . size ( ) ) ;', 'try {', 'assertTrue ( ""Queue should contain added element"" , getCollection ( ) . contains ( element ) ) ;', 'if ( !isNullSupported ( ) ) {', 'public void testQueueElement ( ) {', '}', 'element = getCollection ( ) . peek ( ) ;', 'E element = getCollection ( ) . peek ( ) ;', 'if ( !isAddSupported ( ) ) {', 'assertNull ( element ) ;']","['public static < K , V > UnmodifiableTrie < K , V > unmodifiableTrie ( final Trie < K , ? extends V > trie ) {', 'return tmpTrie ;', '@ SuppressWarnings ( ""unchecked"" )', 'if ( trie instanceof Unmodifiable ) {', 'final Trie < K , V > tmpTrie = ( Trie < K , V > ) trie ;', 'public static < K , V > Trie < K , V > unmodifiableTrie ( final Trie < K , ? extends V > trie ) {', '}', 'assertSame ( ""UnmodifiableTrie shall not be decorated"" , trie , TrieUtils . unmodifiableTrie ( trie ) ) ;', 'final SortedMap < String , V > m = new PatriciaTrie < V > ( ) ;', 'import org . apache . commons . collections4 . Trie ;']","['implements BoundedCollection < E > {', 'if ( coll instanceof Unmodifiable ) {', '@ SuppressWarnings ( ""unchecked"" )', 'implements BoundedCollection < E > , Unmodifiable {', '}', 'return tmpColl ;', 'import org . apache . commons . collections4 . Unmodifiable ;', 'final BoundedCollection < E > tmpColl = ( BoundedCollection < E > ) coll ;', 'public Collection < E > makeFullCollection ( ) {', 'public void testUnmodifiable ( ) {']","['Bag < Object > bag = BagUtils . unmodifiableSortedBag ( new TreeBag < Object > ( ) ) ;', 'SortedBag < Object > bag = BagUtils . unmodifiableSortedBag ( new TreeBag < Object > ( ) ) ;', 'assertSame ( ""UnmodifiableBag shall not be decorated"" , bag , BagUtils . unmodifiableBag ( bag ) ) ;', 'assertSame ( ""UnmodifiableSortedBag shall not be decorated"" , bag , BagUtils . unmodifiableSortedBag ( bag ) ) ;', 'assertSame ( ""UnmodifiableQueue shall not be decorated"" , queue , QueueUtils . unmodifiableQueue ( queue ) ) ;', 'public void testUnmodifiable ( ) {', 'fail ( ) ;', 'try {', 'assertTrue ( makeFullMap ( ) instanceof Unmodifiable ) ;', 'public void testDecorateFactory ( ) {']","['boolean result = false ;', 'boolean result = false ;', 'while ( e . hasNext ( ) ) {', 'while ( e . hasNext ( ) ) {', 'if ( !coll . contains ( e . next ( ) ) ) {', 'return decorated ( ) . removeAll ( coll ) ;', 'boolean modified = false ;', 'if ( !coll . contains ( e . next ( ) ) ) {', 'return result ;', 'return decorated ( ) . retainAll ( coll ) ;']","['return decorated ( ) . retainAll ( coll ) ;', 'return decorated ( ) . removeAll ( null ) ;', 'return decorated ( ) . removeAll ( coll ) ;', 'return decorated ( ) . retainAll ( null ) ;', 'final boolean added = add ( i . next ( ) , 1 ) ;', 'public boolean retainAll ( final Collection < ? > coll ) {', 'return true ;', 'import java . io . ObjectOutputStream ;', 'return add ( object , 1 ) ;', 'import org . apache . commons . collections4 . SortedBag ;']","['return con . newInstance ( new Object [ ] { m . getName ( ) } ) ;', 'return con . newInstance ( m . getName ( ) ) ;', 'Collection < String > oneString = Arrays . asList ( new String [ ] { ""a"" } ) ;', 'Collection < String > strings = Arrays . asList ( ""a"" , ""b"" , ""c"" ) ;', 'assertNull ( CollectionUtils . forAllButLastDo ( strings , ( Closure < String > ) null ) ) ;', 'assertNull ( CollectionUtils . forAllButLastDo ( ( Collection < String > ) null , null ) ) ;', 'Collection < String > strings = Arrays . asList ( new String [ ] { ""a"" , ""b"" , ""c"" } ) ;', 'Collection < String > oneString = Arrays . asList ( ""a"" ) ;', 'assertNull ( CollectionUtils . forAllButLastDo ( ( Iterator < String > ) null , ( Closure < String > ) null ) ) ;', 'assertNull ( CollectionUtils . forAllButLastDo ( strings , null ) ) ;']",['@ Test'],"['for ( @ SuppressWarnings ( ""unused"" ) final String element : array ) {', '@ SuppressWarnings ( ""unused"" )', 'for ( final String element : array ) {', 'for ( @ SuppressWarnings ( ""unused"" ) final Number actual : iterable ) {', '@ SuppressWarnings ( ""unused"" )', 'for ( final Number actual : iterable ) {']","['assertNull ( CollectionUtils . forAllButLastDo ( ( Collection < String > ) null , null ) ) ;', 'assertNull ( CollectionUtils . forAllButLastDo ( ( Collection < String > ) null , ( Closure < String > ) null ) ) ;', 'assertNull ( CollectionUtils . forAllButLastDo ( ( Iterator < String > ) null , null ) ) ;', 'assertNull ( CollectionUtils . forAllButLastDo ( strings , ( Closure < String > ) null ) ) ;', 'assertNull ( CollectionUtils . forAllButLastDo ( strings , null ) ) ;', 'assertNull ( CollectionUtils . forAllButLastDo ( ( Iterator < String > ) null , ( Closure < String > ) null ) ) ;']","['final String vmName = System . getProperty ( ""java . vm . name"" ) ;', 'protected static final boolean IBMJDK16 ;', '}', 'final String version = System . getProperty ( ""java . version"" ) ;', 'version ! = null & & version . equals ( ""1 . 6 . 0"" ) ;', 'static {', 'IBMJDK16 = vmName ! = null & & vmName . equals ( ""IBM J9 VM"" ) & &', 'preSub + ""EntrySet . testCollectionIteratorRemove"" ,', 'preTail + ""testMapRemove"" ,', 'final String vmName = System . getProperty ( ""java . vm . name"" ) ;']","['public V remove ( K key , V item ) ;', 'boolean removeMapping ( K key , V item ) ;', 'return null ;', 'return true ;', 'return ( V ) value ;', 'return false ;', 'public V remove ( final Object key , final Object value ) {', 'public boolean removeMapping ( final Object key , final Object value ) {', '@ SuppressWarnings ( ""unchecked"" )', 'one . remove ( ""One"" , value ) ;']","['public V remove ( final Object key1 , final Object key2 , final Object key3 , final Object key4 ) {', 'public V removeMultiKey ( final Object key1 , final Object key2 , final Object key3 , final Object key4 ) {', 'public V remove ( final Object key1 , final Object key2 ) {', 'public V removeMultiKey ( final Object key1 , final Object key2 , final Object key3 ) {', 'public V remove ( final Object key1 , final Object key2 , final Object key3 , final Object key4 , final Object key5 ) {', 'final Object key4 , final Object key5 ) {', 'public V remove ( final Object key1 , final Object key2 , final Object key3 ) {', 'public V removeMultiKey ( final Object key1 , final Object key2 ) {', 'public V removeMultiKey ( final Object key1 , final Object key2 , final Object key3 ,', 'assertEquals ( value , multimap . remove ( key . getKey ( 0 ) , key . getKey ( 1 ) , key . getKey ( 2 ) , key . getKey ( 3 ) ) ) ;']","['public final class CollectionBag < E >', 'public final class CollectionBag < E > extends AbstractBagDecorator < E > {', 'extends AbstractBagDecorator < E > implements Serializable {', 'import java . io . Serializable ;', 'extends AbstractSortedBagDecorator < E > implements Serializable {', 'public final class CollectionSortedBag < E > extends AbstractSortedBagDecorator < E > {', 'public final class CollectionSortedBag < E >', 'import java . io . Serializable ;', 'public class HashBag < E > extends AbstractMapBag < E > implements Bag < E > , Serializable {', 'public class HashBag < E > extends AbstractMapBag < E > implements Serializable {']","['@ Override', '@ Override', '@ Override', '@ Override', '@ Override']","['throw new UnsupportedOperationException ( ""remove ( ) method not supported for an NodeListIterator . "" ) ;', 'throw new UnsupportedOperationException ( ""remove ( ) method not supported for a NodeListIterator . "" ) ;']","['} else {', 'throw new NoSuchElementException ( ""underlying nodeList has no more elements"" ) ;', 'throw new NoSuchElementException ( ""underlying nodeList has no more elements"" ) ;']","['} else {', 'object = null ;', 'removed = true ;', 'removed = true ;', 'object = null ;']","['} else {', 'iterator . remove ( ) ;', 'iterator . remove ( ) ;']","['} else {', 'object = null ;', 'removed = true ;', 'removed = true ;', 'object = null ;']","['} else {', 'return firstEntry ( ) . getKey ( ) ;', 'return firstEntry ( ) . getKey ( ) ;']","['} else {', 'return peek ( ) ;', 'return peek ( ) ;', 'return remove ( ) ;', 'return remove ( ) ;']","['} else {', 'return new InvokerTransformer < I , O > ( methodName , paramTypes , args ) ;', 'return new InvokerTransformer < I , O > ( methodName , paramTypes , args ) ;']","['list . addAll ( java . util . Arrays . asList ( getFullElements ( ) ) ) ;', 'list . addAll ( Arrays . asList ( getFullElements ( ) ) ) ;']","['final java . util . List < E > list2 = new java . util . LinkedList < E > ( ) ;', 'import java . util . LinkedList ;', 'final java . util . List < E > list2 = new LinkedList < E > ( ) ;']","['private static class IntegerComparator implements Comparator < Integer > , java . io . Serializable {', 'private static class IntegerComparator implements Comparator < Integer > , Serializable {']","['public Iterator < java . util . Map . Entry < K , V > > iterator ( ) {', 'public Iterator < Map . Entry < V , K > > iterator ( ) {', 'public Iterator < java . util . Map . Entry < V , K > > iterator ( ) {', 'public Iterator < Map . Entry < K , V > > iterator ( ) {']","['public Comparator < ? super V > valueComparator ( ) ;', 'SortedBidiMap < V , K > inverseBidiMap ( ) ;', 'public SortedBidiMap < V , K > inverseBidiMap ( ) ;', 'Comparator < ? super V > valueComparator ( ) ;']","['public T create ( ) ;', 'T create ( ) ;']","['public void putAll ( Map < ? extends K , ? extends V > t ) ;', 'void clear ( ) ;', 'public Object put ( K key , V value ) ;', 'Object put ( K key , V value ) ;', 'public void clear ( ) ;', 'void putAll ( Map < ? extends K , ? extends V > t ) ;']","['public Set < java . util . Map . Entry < K , V > > entrySet ( ) {', 'public Set < Map . Entry < K , V > > entrySet ( ) {']","['public K lastKey ( ) ;', 'K previousKey ( K key ) ;', 'public K nextKey ( K key ) ;', 'K lastKey ( ) ;', 'public K previousKey ( K key ) ;', 'K firstKey ( ) ;', 'public K firstKey ( ) ;', 'K nextKey ( K key ) ;']","['public OrderedBidiMap < V , K > inverseBidiMap ( ) ;', 'OrderedBidiMap < V , K > inverseBidiMap ( ) ;']","['public void execute ( T input ) ;', 'void execute ( T input ) ;']","['public boolean evaluate ( T object ) ;', 'boolean evaluate ( T object ) ;']","['public void reset ( ) ;', 'void reset ( ) ;']","['public Comparator < ? super E > comparator ( ) ;', 'E first ( ) ;', 'public E last ( ) ;', 'Comparator < ? super E > comparator ( ) ;', 'public E first ( ) ;', 'E last ( ) ;']","['public Set < K > keySet ( ) ;', 'Set < java . util . Map . Entry < K , V > > entrySet ( ) ;', 'public V remove ( Object key ) ;', 'boolean containsKey ( Object key ) ;', 'public boolean isEmpty ( ) ;', 'Set < K > keySet ( ) ;', 'public Collection < V > values ( ) ;', 'V remove ( Object key ) ;', 'public boolean containsValue ( Object value ) ;', 'int size ( ) ;']","['public boolean add ( CompositeCollection < E > composite , List < Collection < E > > collections , E obj ) ;', 'boolean remove ( CompositeCollection < E > composite ,', 'public boolean remove ( CompositeCollection < E > composite ,', 'boolean add ( CompositeCollection < E > composite , List < Collection < E > > collections , E obj ) ;', 'public boolean addAll ( CompositeCollection < E > composite ,', 'boolean addAll ( CompositeCollection < E > composite ,']","['final java . util . List < E > list2 = new LinkedList < E > ( ) ;', 'final List < E > list2 = new LinkedList < E > ( ) ;']","['public void resolveCollision ( CompositeSet < E > comp ,', 'boolean addAll ( CompositeSet < E > composite ,', 'public boolean addAll ( CompositeSet < E > composite ,', 'void resolveCollision ( CompositeSet < E > comp ,', 'public boolean add ( CompositeSet < E > composite , List < Set < E > > sets , E obj ) ;', 'boolean add ( CompositeSet < E > composite , List < Set < E > > sets , E obj ) ;']","['public V put ( CompositeMap < K , V > map , Map < K , V > [ ] composited , K key , V value ) ;', 'void resolveCollision ( CompositeMap < K , V > composite , Map < K , V > existing ,', 'public void resolveCollision ( CompositeMap < K , V > composite , Map < K , V > existing ,', 'V put ( CompositeMap < K , V > map , Map < K , V > [ ] composited , K key , V value ) ;', 'public void putAll ( CompositeMap < K , V > map , Map < K , V > [ ] composited ,', 'void putAll ( CompositeMap < K , V > map , Map < K , V > [ ] composited ,']","['public void handleReplacement ( int skipped , List < T > from , List < T > to ) ;', 'void handleReplacement ( int skipped , List < T > from , List < T > to ) ;']","['public O transform ( I input ) ;', 'O transform ( I input ) ;']","['public SortedMap < K , V > prefixMap ( K key ) ;', 'SortedMap < K , V > prefixMap ( K key ) ;']","['super ( ) ;', 'try {', '}', 'import junit . framework . TestCase ;', 'Iterator < String > iterator = Arrays . asList ( ""a"" , ""b"" , ""c"" ) . iterator ( ) ;', 'assertTrue ( enumeration . hasMoreElements ( ) ) ;', 'import java . util . Arrays ;', 'public void testEnumeration ( ) {', 'fail ( ""NoSuchElementException expected"" ) ;', 'import java . util . NoSuchElementException ;']",['import java . util . Map . Entry ;'],"['public static final Iterator < Object > INSTANCE = RESETTABLE INSTANCE ;', '@ SuppressWarnings ( ""rawtypes"" )', 'public static final ResettableIterator < Object > RESETTABLE INSTANCE = new EmptyIterator < Object > ( ) ;', 'public static final Iterator INSTANCE = RESETTABLE INSTANCE ;', 'public static final ResettableIterator RESETTABLE INSTANCE = new EmptyIterator < Object > ( ) ;', 'public static final ListIterator < Object > INSTANCE = RESETTABLE INSTANCE ;', '@ SuppressWarnings ( ""rawtypes"" )', 'public static final ResettableListIterator < Object > RESETTABLE INSTANCE = new EmptyListIterator < Object > ( ) ;', 'public static final ListIterator INSTANCE = RESETTABLE INSTANCE ;', 'public static final ResettableListIterator RESETTABLE INSTANCE = new EmptyListIterator < Object > ( ) ;']","['public static final Bag < Object > EMPTY BAG = UnmodifiableBag . unmodifiableBag ( new HashBag < Object > ( ) ) ;', '@ SuppressWarnings ( ""rawtypes"" )', 'public static final Bag < Object > EMPTY SORTED BAG =', 'public static final Bag EMPTY SORTED BAG =', 'public static final Bag EMPTY BAG = UnmodifiableBag . unmodifiableBag ( new HashBag < Object > ( ) ) ;', '@ SuppressWarnings ( { ""unchecked"" , ""rawtypes"" } )', '@ SuppressWarnings ( ""rawtypes"" )', 'public static final Comparator NATURAL COMPARATOR = ComparableComparator . < Comparable > comparableComparator ( ) ;', 'public static final Comparator NATURAL COMPARATOR = ComparableComparator . comparableComparator ( ) ;', 'public static final OrderedIterator < Object > EMPTY ORDERED ITERATOR = EmptyOrderedIterator . INSTANCE ;']","['@ SuppressWarnings ( ""rawtypes"" )', '@ SuppressWarnings ( { ""rawtypes"" , ""unchecked"" } )', 'public static final Comparator NATURAL COMPARATOR = ComparableComparator . comparableComparator ( ) ;', 'public static final Comparator NATURAL COMPARATOR = ComparableComparator . < Comparable > comparableComparator ( ) ;']","['private ArrayList < Iterator < ? extends E > > iterators = null ;', 'private List < E > values = null ;', 'private ArrayList < E > values = null ;', 'private boolean anyHasNext ( final List < Iterator < ? extends E > > iters ) {', 'private boolean anyHasNext ( final ArrayList < Iterator < ? extends E > > iters ) {', 'private List < Iterator < ? extends E > > iterators = null ;']","['throw new IllegalStateException ( ) ;', 'throw new IllegalStateException ( ""peek ( ) or element ( ) called before remove ( ) "" ) ;']","['import org . apache . commons . collections4 . iterators . BoundedIterator ;', 'long offset , long max ) {', 'return BoundedIterator . boundedIterator ( iterator , offset , max ) ;', 'public static < E > BoundedIterator < E > boundedIterator ( final Iterator < ? extends E > iterator , long max ) {', 'return BoundedIterator . boundedIterator ( iterator , max ) ;', '}', 'public static < E > BoundedIterator < E > boundedIterator ( final Iterator < ? extends E > iterator ,', 'return true ;', 'throw new NoSuchElementException ( ) ;', 'this . offset = offset ;']","['final Transformer < ? super T , ? extends T > trueTransformer ) {', 'return IfTransformer . ifTransformer ( predicate , trueTransformer ) ;', '}', '@ Deprecated', 'public static < T > Transformer < T , T > ifTransformer ( final Predicate < ? super T > predicate ,', 'final Transformer < ? super I , ? extends O > trueTransformer ,', 'public static < I , O > Transformer < I , O > ifTransformer ( final Predicate < ? super I > predicate ,', 'import org . apache . commons . collections4 . functors . IfTransformer ;', 'return IfTransformer . ifTransformer ( predicate , trueTransformer , falseTransformer ) ;', 'final Transformer < ? super I , ? extends O > falseTransformer ) {']","['public static < E extends Comparable < ? super E > > Comparator < E > chainedComparator (', 'public static < E > Comparator < E > chainedComparator ( final Collection < Comparator < E > > comparators ) {', 'final Collection < Comparator < E > > comparators ) {', 'public static < E > Comparator < E > chainedComparator ( final Comparator < E > . . . comparators ) {', 'final Comparator < E > . . . comparators ) {']","['return BoundedIterator . boundedIterator ( iterator , max ) ;', 'return new BoundedIterator < E > ( iterator , offset , max ) ;', 'return BoundedIterator . boundedIterator ( iterator , offset , max ) ;', 'return boundedIterator ( iterator , 0 , max ) ;', 'return new BoundedIterator < E > ( iterator , 0 , max ) ;', 'final long offset , final long max ) {', 'public static < E > BoundedIterator < E > boundedIterator ( final Iterator < ? extends E > iterator ,', '}', 'return boundedIterator ( iterator , 0 , max ) ;', 'final long max ) {']","['return BoundedIterator . boundedIterator ( new ArrayList < E > ( testList ) . iterator ( ) , 1 , testList . size ( ) - 1 ) ;', 'return new BoundedIterator < E > ( Collections . < E > emptyList ( ) . iterator ( ) , 0 , 10 ) ;', 'return BoundedIterator . boundedIterator ( Collections . < E > emptyList ( ) . iterator ( ) , 10 ) ;', 'return new BoundedIterator < E > ( new ArrayList < E > ( testList ) . iterator ( ) , 1 , testList . size ( ) - 1 ) ;']","['private final Comparator < E > comparator ;', 'private final Comparator < ? super E > comparator ;']","['V put ( K key , V value ) ;', 'boolean put ( K key , V value ) ;', 'return addedVal ! = null ? true : false ;', 'public boolean put ( K key , V value ) {', 'return getMap ( ) . remove ( key ) ;', 'import java . util . Collections ;', 'public V put ( K key , V value ) {', 'return result ;', 'V addedVal = AbstractMultiValuedMap . this . put ( ( K ) key , value ) ;', 'return AbstractMultiValuedMap . this . put ( ( K ) key , value ) ;']","['return null = = decorated ? null = = comp . decorated : decorated . equals ( comp . decorated ) & &', 'return ( null = = decorated ? null = = comp . decorated : decorated . equals ( comp . decorated ) ) & &', 'null = = transformer ? null = = comp . transformer : transformer . equals ( comp . transformer ) ;', '( null = = transformer ? null = = comp . transformer : transformer . equals ( comp . transformer ) ) ;', 'comp1 . equals ( comp2 ) ? comp1 . hashCode ( ) = = comp2 . hashCode ( ) : true ) ;', 'Transformer < String , String > t1 = TransformerUtils . nopTransformer ( ) ;', 'public void testEquals ( ) {', 'TransformingComparator < String , String > comp2 = new TransformingComparator < String , String > ( t1 , comp1 ) ;', '}', 'import org . apache . commons . collections4 . Transformer ;']","['private ClosureUtils ( ) { }', 'protected ClosureUtils ( ) { }', 'private CollectionUtils ( ) { }', 'protected CollectionUtils ( ) { }', 'private ComparatorUtils ( ) { }', 'protected ComparatorUtils ( ) { }', 'private EnumerationUtils ( ) { }', 'protected EnumerationUtils ( ) { }', 'private FactoryUtils ( ) { }', 'protected FactoryUtils ( ) { }']","['protected ClosureUtils ( ) { }', 'private ClosureUtils ( ) { }', 'protected CollectionUtils ( ) { }', 'private CollectionUtils ( ) { }', 'protected ComparatorUtils ( ) { }', 'private ComparatorUtils ( ) { }', 'protected EnumerationUtils ( ) { }', 'private EnumerationUtils ( ) { }', 'protected FactoryUtils ( ) { }', 'private FactoryUtils ( ) { }']","['null = = unknownObjectBehavior ? null = = comp . unknownObjectBehavior :', 'unknownObjectBehavior = = comp . unknownObjectBehavior ) ;', 'unknownObjectBehavior = = comp . unknownObjectBehavior ;', 'isLocked = = comp . isLocked & &', 'return null = = map ? null = = comp . map : map . equals ( comp . map ) & &', '( null = = unknownObjectBehavior ? null = = comp . unknownObjectBehavior :', 'isLocked = = comp . isLocked & &', 'counter = = comp . counter & &', 'counter = = comp . counter & &', 'return ( null = = map ? null = = comp . map : map . equals ( comp . map ) ) & &']","['import org . apache . commons . collections4 . iterators . AbstractListIteratorDecorator ;', 'import org . apache . commons . collections4 . iterators . AbstractListIteratorDecorator ;', 'import org . apache . commons . collections4 . collection . PredicatedCollection ;', 'import org . apache . commons . collections4 . collection . PredicatedCollection ;', 'import org . apache . commons . collections4 . Predicate ;', 'import org . apache . commons . collections4 . Predicate ;']","['( key2 = = multi . getKey ( 1 ) | | key1 ! = null & & key2 . equals ( multi . getKey ( 1 ) ) ) ;', '( key2 = = multi . getKey ( 1 ) | | key2 ! = null & & key2 . equals ( multi . getKey ( 1 ) ) ) ;', 'public void testMultiKeyPutWithNullKey ( ) {', 'assertEquals ( ""value4"" , map . get ( ""a"" , ""z"" ) ) ;', 'map . put ( ""a"" , null , ""value1"" ) ;', 'assertEquals ( ""value5"" , map . get ( ""a"" , null ) ) ;', 'map . put ( ""a"" , null , ""value5"" ) ;', 'assertEquals ( 6 , map . size ( ) ) ;', 'final MultiKeyMap < String , String > map = new MultiKeyMap < String , String > ( ) ;', 'map . put ( null , null , ""value7"" ) ;']","['list . retainAll ( set ) ;', 'CollectionUtils . filter ( list , UniquePredicate . uniquePredicate ( ) ) ;', 'import org . apache . commons . collections4 . CollectionUtils ;', 'import org . apache . commons . collections4 . functors . UniquePredicate ;', 'import org . apache . commons . collections4 . IteratorUtils ;', 'assertEquals ( Integer . valueOf ( 1 ) , orderedSet . get ( 0 ) ) ;', 'final List < E > list = new ArrayList < E > ( 10 ) ;', 'public void testDuplicates ( ) {', 'list . add ( ( E ) Integer . valueOf ( 1 ) ) ;', '@ SuppressWarnings ( ""unchecked"" )']","['private V put ( final K key , final V value , final long now ) {', 'return put ( key , value , now ( ) ) ;', '}']","['final Transformer transformer = new Transformer ( ) {', 'final Transformer < E , ? > transformer = new Transformer ( ) {', '@ SuppressWarnings ( { ""unchecked"" , ""rawtypes"" } )', 'final Equator < ? super E > equator ) {', 'public static boolean isEqualCollection ( final Collection < ? > a , final Collection < ? > b , final Equator < ? > equator ) {', 'final Collection < ? extends E > b ,', 'public static < E > boolean isEqualCollection ( final Collection < ? extends E > a ,', '@ SuppressWarnings ( { ""unchecked"" , ""rawtypes"" } )']","['private final Equator < O > equator ;', 'return true ;', 'public EquatorWrapper ( final Equator < O > equator , final O object ) {', 'final Set < EquatorWrapper < E > > removeSet =', '}', 'public static < E > boolean contains ( final Collection < ? extends E > collection , final E object ,', 'return new EquatorWrapper < E > ( equator , input ) ;', 'if ( equator . equate ( obj , object ) ) {', 'final Iterable < ? extends E > retain ,', 'private final Equator < ? super O > equator ;']","['private static class SetValuedLinkedHashMap < K , V > extends AbstractSetValuedMap < K , V > {', 'super ( new LinkedHashMap < K , Collection < V > > ( initialCapacity , loadFactor ) , collectionClazz ) ;', 'initialListCapacity ) ;', 'super ( new LinkedHashMap < K , Set < V > > ( DEFAULT INITIAL CAPACITY , DEFAULT LOAD FACTOR ) , setClazz ,', '}', 'private static final long serialVersionUID = 3667581458573135234L ;', 'import java . util . LinkedList ;', 'public static < K , V > SetValuedMap < K , V > setValuedLinkedHashMap ( ) {', 'public < C extends List < V > > ListValuedLinkedHashMap ( Class < C > listClazz , int initialListCapacity ) {', 'this ( initialCapacity , DEFAULT LOAD FACTOR , LinkedList . class ) ;']","['import java . util . Set ;', 'import java . util . * ;', 'import java . util . Collection ;', 'return new SetValuedLinkedHashMap ( LinkedHashSet . class ) ;', 'import java . util . Map ;', 'import java . util . LinkedHashMap ;', 'import java . util . List ;', 'return new SetValuedLinkedHashMap ( HashSet . class ) ;', 'import java . util . LinkedList ;', 'import java . util . HashSet ;']","['import java . util . HashMap ;', 'Collection < V > col = map . get ( key ) ;', 'Collection < V > col = map . get ( key ) ;', 'super ( new LinkedHashMap < K , Collection < V > > ( initialCapacity , loadFactor ) , collectionClazz , initialCollectionCapacity ) ;', 'import java . util . Set ;', 'import java . util . * ;', 'super ( new LinkedHashMap < K , Collection < V > > ( initialCapacity , loadFactor ) , collectionClazz ,', 'import java . util . LinkedHashSet ;', 'import java . util . Collection ;', 'import java . util . Map ;']","['map . size ( ) ;', 'if ( map = = null ) {', 'throw new NullPointerException ( ""The map must not be null"" ) ;', '}']","['public class AbstractIterableGetMapDecorator < K , V > implements IterableGet < K , V > {', 'public abstract class AbstractIterableGetMapDecorator < K , V > implements IterableGet < K , V > {']","['writeExternalFormToStream ( o , fileStream ) ;', 'try {', '}', 'writeExternalFormToStream ( o , fileStream ) ;', '} finally {', 'fileStream . close ( ) ;']","['return readExternalFormFromStream ( stream ) ;', 'stream . close ( ) ;', 'try {', '}', '} finally {', 'return readExternalFormFromStream ( stream ) ;']","['} else {', 'return null ;', 'return null ;']","['final Set < ? > set = TransformedSortedSet . transformedSet ( originalSet , TransformedCollectionTest . STRING TO INTEGER TRANSFORMER ) ;', 'final Set < ? > set = TransformedSet . transformedSet ( originalSet , TransformedCollectionTest . STRING TO INTEGER TRANSFORMER ) ;']","['} else {', 'return null ;', 'return null ;']","['return root ;', 'return root ;', 'throw new NoSuchElementException ( ) ;', 'throw new NoSuchElementException ( ) ;', '}', '}', 'return ret > 0 ;', 'return ret > 0 ;', 'return nextEntryImpl ( node . predecessor , node , parentOfSubtree ) ;', 'return nextEntryImpl ( node . predecessor , node , parentOfSubtree ) ;']","['public class MultiValuedHashMap < K , V > extends AbstractMultiValuedMap < K , V > implements MultiValuedMap < K , V > {', 'public class MultiValuedHashMap < K , V > extends AbstractMultiValuedMap < K , V > {']","['public class MultiValuedLinkedHashMap < K , V > extends AbstractMultiValuedMap < K , V > implements MultiValuedMap < K , V > {', 'public class MultiValuedLinkedHashMap < K , V > extends AbstractMultiValuedMap < K , V > {']","['implements ListValuedMap < K , V > , Serializable {', 'implements ListValuedMap < K , V > {', 'import java . io . Serializable ;']","['m . put ( key , value ) ;', 'm . put ( key , value ) ;', 'return null ;', 'return null ;', 'return result ;', 'return result ;', '} else {', 'final V result = decorated ( ) . put ( key , value ) ;', 'final V result = decorated ( ) . put ( key , value ) ;', 'insertOrder . add ( key ) ;']","['s = sAncestor . balance ( ) ;', 's = sAncestor . balance ( ) ;', 'otherTree . min ( ) . setLeft ( null , otherTreeMin ) ;', 'otherTree . min ( ) . setLeft ( null , otherTreeMin ) ;', 'return s ;', 'return s ;', 'int sParentAbsolutePosition = 0 ;', 'int sParentAbsolutePosition = 0 ;', '}', '}']","['while ( it . hasNext ( ) ) {', 'public static < T > T get ( final Enumeration < T > e , final int index ) {', 'it . next ( ) ;', 'e . nextElement ( ) ;', 'if ( i = = - 1 ) {', 'int i = index ;', 'i - - ;', 'if ( i = = - 1 ) {', 'while ( it . hasMoreElements ( ) ) {', 'i - - ;']","['public static < E > Closure < E > chainedClosure ( final Collection < Closure < E > > closures ) {', 'public static < E > Closure < E > chainedClosure ( final Collection < ? extends Closure < ? super E > > closures ) {', 'public static < T > Predicate < T > allPredicate ( final Collection < ? extends Predicate < T > > predicates ) {', 'public static < T > Predicate < T > allPredicate ( final Collection < ? extends Predicate < ? super T > > predicates ) {', 'public static < T > Predicate < T > nonePredicate ( final Collection < ? extends Predicate < T > > predicates ) {', 'public static < T > Predicate < T > nonePredicate ( final Collection < ? extends Predicate < ? super T > > predicates ) {', 'public static < T > Predicate < T > onePredicate ( final Collection < Predicate < T > > predicates ) {', 'public static < T > Predicate < T > anyPredicate ( final Collection < ? extends Predicate < ? super T > > predicates ) {', 'public static < T > Predicate < T > anyPredicate ( final Collection < ? extends Predicate < T > > predicates ) {', 'public static < T > Predicate < T > onePredicate ( final Collection < ? extends Predicate < ? super T > > predicates ) {']","['for ( final O element : inputCollection ) {', 'final Predicate < ? super O > . . . predicates ) {', 'rejectedCollection . add ( element ) ;', '}', 'boolean elementAssigned = false ;', 'partitions . add ( partitionFactory . create ( ) ) ;', 'final Factory < R > partitionFactory , final Predicate < ? super O > . . . predicates ) {', 'break ;', 'return partition ( inputCollection , FactoryUtils . instantiateFactory ( outputClass ) , predicates ) ;', 'elementAssigned = true ;']","['return partition ( inputCollection , FactoryUtils . instantiateFactory ( outputClass ) , predicates ) ;', 'return partition ( inputCollection , factory , predicates ) ;', 'final Class < R > outputClass = ( Class < R > ) ArrayList . class ;', 'final Factory < R > factory = ( Factory < R > ) FactoryUtils . instantiateFactory ( ArrayList . class ) ;']","['public static < O , R extends Collection < O > > List < R > partition ( final Iterable < ? extends O > inputCollection ,', '@ SuppressWarnings ( { ""unchecked"" , ""rawtypes"" } )', '@ SuppressWarnings ( ""unchecked"" )', 'public static < O > List < List < O > > partition ( final Iterable < ? extends O > inputCollection ,', 'final Factory < R > factory = ( Factory < R > ) FactoryUtils . instantiateFactory ( ArrayList . class ) ;', 'final Factory < List < O > > factory = FactoryUtils . instantiateFactory ( ( Class ) ArrayList . class ) ;', 'List < Collection < Integer > > partitions = CollectionUtils . partition ( input , EQUALS TWO ) ;', 'List < List < Integer > > partitions = CollectionUtils . partition ( input , EQUALS TWO , EVEN ) ;', 'List < Collection < Integer > > partitions = CollectionUtils . partition ( input , EQUALS TWO , EVEN ) ;', '@ SuppressWarnings ( ""unchecked"" )']","['if ( isBitSet ( prefix , endIndexInBits , endIndexInBits )', 'if ( isBitSet ( prefix , endIndexInBits - 1 , endIndexInBits )', '! = isBitSet ( entry . key , lengthInBits , lengthInBits ( entry . key ) ) ) {', '! = isBitSet ( entry . key , lengthInBits - 1 , lengthInBits ( entry . key ) ) ) {', '} else if ( delegate . lengthInBits > = prefixStart . bitIndex ) {', '} else if ( delegate . lengthInBits > prefixStart . bitIndex ) {', 'if ( current . bitIndex < = path . bitIndex | | lengthInBits < current . bitIndex ) {', 'if ( current . bitIndex < = path . bitIndex | | lengthInBits < = current . bitIndex ) {', 'assertEquals ( 1 , aTree . prefixMap ( ""点评"" ) . values ( ) . size ( ) ) ;', 'assertEquals ( 2 , aTree . prefixMap ( ""点"" ) . values ( ) . size ( ) ) ;']","['private boolean isAtFullCapacity ( ) {', 'public boolean isAtFullCapacity ( ) {']","['public boolean equals ( final Object object ) {', 'return object = = this | | decorated ( ) . equals ( object ) ;', '}', 'return decorated ( ) . hashCode ( ) ;', 'public int hashCode ( ) {', '@ Override', 'public boolean equals ( final Object object ) {', 'return object = = this | | decorated ( ) . equals ( object ) ;', '}', 'return decorated ( ) . hashCode ( ) ;']","['throw new IllegalArgumentException ( ""set must not be null"" ) ;', 'throw new IllegalArgumentException ( ""list must not be null"" ) ;', 'public Builder < E > addAll ( final Collection < ? extends E > items ) {', 'add ( item ) ;', 'return Collections . unmodifiableCollection ( rejected ) ;', 'this . predicate = predicate ;', 'if ( items ! = null ) {', 'import org . apache . commons . collections4 . queue . PredicatedQueue ;', '}', 'public Queue < E > createPredicatedQueue ( ) {']","['if ( collectionRetainAll . size ( ) = = decorated ( ) . size ( ) ) {', 'boolean result = decorated ( ) . retainAll ( coll ) ;', 'return true ;', 'if ( !decorated ( ) . contains ( it . next ( ) ) ) {', 'if ( collectionRetainAll . size ( ) = = 0 ) {', 'setOrder . clear ( ) ;', '}', 'return result ;', 'for ( final Iterator < E > it = iterator ( ) ; it . hasNext ( ) ; ) {', 'if ( result = = false ) {']","['setRetainAll . add ( next ) ;', 'return result ;', 'return true ;', 'if ( result = = false ) {', 'it . remove ( ) ;', 'import org . apache . commons . collections4 . set . UnmodifiableSet ;', 'if ( setRetainAll . size ( ) = = 0 ) {', 'if ( set . size ( ) = = 0 ) {', 'if ( set . contains ( next ) ) {', 'super . retainAll ( set ) ;']","['public static < C > String toString ( Iterable < C > iterable ) {', 'return toString ( iterable , new Transformer < C , String > ( ) {', 'if ( transformer = = null ) {', 'if ( prefix = = null ) {', 'if ( suffix = = null ) {', 'stringBuilder . setLength ( stringBuilder . length ( ) - delimiter . length ( ) ) ;', 'for ( final C element : iterable ) {', '}', 'throw new IllegalArgumentException ( ""iterable may not be null"" ) ;', 'throw new IllegalArgumentException ( ""transformer may not be null"" ) ;']","['if ( object = = null ) {', 'throw new NullPointerException ( ) ;', '}', 'import java . util . Comparator ;', 'bag2 . add ( null ) ;', 'try {', '} ) ;', 'final Bag < Object > bag = new TreeBag < Object > ( ) ;', 'bag . add ( null ) ;', '}']","['final Object obj = setOrder . remove ( index ) ;', 'final E obj = setOrder . remove ( index ) ;', 'public Object remove ( final int index ) {', 'public E remove ( final int index ) {']","['moveToMRU ( entry ) ;', 'public V get ( final Object key , final boolean updateToMRU ) {', '}', 'if ( updateToMRU ) {', 'return get ( key , true ) ;', 'moveToMRU ( entry ) ;', 'Iterator < V > vit = null ;', 'assertSame ( values [ 1 ] , vit . next ( ) ) ;', '}', 'public void testAccessOrder2 ( ) {']","['final Transformer < ? super I , ? extends O > transformer ) {', 'final Transformer < ? super I , ? extends O > transformer ) {']","['@ SuppressWarnings ( ""deprecation"" )', 'import java . util . ArrayDeque ;', 'import org . apache . commons . collections4 . ArrayStack ;', 'import java . util . Deque ;', 'private final ArrayStack < Iterator < ? extends E > > stack = new ArrayStack < Iterator < ? extends E > > ( 8 ) ;', 'private final Deque < Iterator < ? extends E > > stack = new ArrayDeque < Iterator < ? extends E > > ( 8 ) ;', '@ SuppressWarnings ( ""deprecation"" )', 'import java . util . ArrayDeque ;', 'import org . apache . commons . collections4 . ArrayStack ;', 'import java . util . Deque ;']","['return Collections . newSetFromMap ( new IdentityHashMap < E , Boolean > ( ) ) ;', '}', 'import java . util . IdentityHashMap ;', 'public static < E > Set < E > identityHashSet ( ) {', 'set . add ( a ) ;', 'public void testIdentityHashSet ( ) {', 'set . remove ( a ) ;', 'String a = new String ( ""a"" ) ;', 'assertEquals ( 2 , set . size ( ) ) ;', '}']","['return iterator . next ( ) ;', 'return IterableUtils . get ( iterable , index ) ;', 'checkIndexBounds ( index ) ;', 'return IteratorUtils . get ( iterator , index ) ;', 'int i = index ;', 'static void checkIndexBounds ( final int index ) {', 'private static void checkIndexBounds ( final int index ) {', '@ Deprecated', 'if ( i = = - 1 ) {', 'i - - ;']","['public static < T > FluentIterable < T > of ( Iterable < T > iterable ) {', 'FluentIterable ( ) {', 'public static < T > FluentIterable < T > of ( T . . . elements ) {', 'public E get ( final int position ) {', 'public E get ( int position ) {', 'this . iterable = this ;', '}', 'public static < T > FluentIterable < T > of ( final T . . . elements ) {', 'public static < T > FluentIterable < T > of ( final Iterable < T > iterable ) {', 'return new AbstractIterable < E > ( ) {']","['iterables [ 0 ] = iterable ;', 'return zip ( Arrays . asList ( elements ) ) ;', 'import java . util . Comparator ;', 'return of ( IterableUtils . zippingIterable ( iterables ) ) ;', 'public FluentIterable < E > collate ( final Iterable < E > other ) {', '@ SuppressWarnings ( ""unchecked"" )', 'Iterable < E > [ ] iterables = new Iterable [ 1 + others . length ] ;', 'System . arraycopy ( others , 0 , iterables , 1 , others . length ) ;', 'return of ( IterableUtils . collatedIterable ( iterable , other , null ) ) ;', '}']","['}', 'IterableUtils . apply ( iterable , closure ) ;', 'public void apply ( final Closure < ? super E > closure ) {', 'public static < E > void apply ( final Iterable < E > iterable , final Closure < ? super E > closure ) {', 'IteratorUtils . apply ( emptyIteratorIfNull ( iterable ) , closure ) ;', '}', 'throw new NullPointerException ( ""Closure must not be null"" ) ;', 'public static < E > void apply ( final Iterator < E > iterator , final Closure < ? super E > closure ) {', 'if ( closure = = null ) {', '}']","['pos + + ;', 'assertFalse ( testListCopy . contains ( ""g"" ) ) ;', 'public class SkippingIteratorTest < E > extends AbstractIteratorTest < E > {', 'try {', '@ Test', 'assertFalse ( iter . hasNext ( ) ) ;', 'Iterator < E > iter = new SkippingIterator < E > ( testList . iterator ( ) , 0 ) ;', 'iter . remove ( ) ;', '}', 'assertEquals ( ""g"" , iter . next ( ) ) ;']","['return new SkippingIterator < E > ( iterator , offset ) ;', 'public static < E > ZippingIterator < E > zippingIterator ( final Iterator < ? extends E > a , final Iterator < ? extends E > b ) {', 'public static < E > SkippingIterator < E > skippingIterator ( final Iterator < E > iterator , long offset ) {', 'final Iterator < ? extends E > b ,', '}', 'public static < E > ZippingIterator < E > zippingIterator ( final Iterator < ? extends E > a ,', '}', 'public static < E > ZippingIterator < E > zippingIterator ( final Iterator < ? extends E > . . . iterators ) {', 'return new SkippingIterator < E > ( iterator , offset ) ;', 'final Iterator < ? extends E > c ) {']","['}', '}', 'private IteratorUtils ( ) { }', 'private IteratorUtils ( ) { }']","['return SwitchTransformer . < I , O > switchTransformer ( predicates , transformers , defaultTransformer ) ;', 'return NOPTransformer . nopTransformer ( ) ;', 'return CloneTransformer . < T > cloneTransformer ( ) ;', 'return SwitchTransformer . switchTransformer ( predicatesAndTransformers ) ;', 'return InvokerTransformer . < I , O > invokerTransformer ( methodName , paramTypes , args ) ;', 'return InvokerTransformer . invokerTransformer ( methodName , null , null ) ;', 'return StringValueTransformer . < T > stringValueTransformer ( ) ;', 'return InvokerTransformer . invokerTransformer ( methodName , paramTypes , args ) ;', 'return InstantiateTransformer . < T > instantiateTransformer ( ) ;', 'return TransformerUtils . switchTransformer ( preds , trs , def ) ;']","['return ExceptionPredicate . < T > exceptionPredicate ( ) ;', 'return ExceptionPredicate . exceptionPredicate ( ) ;', 'final Predicate < T > onePredicate = PredicateUtils . < T > onePredicate ( predicate1 , predicate2 ) ;', 'return UniquePredicate . uniquePredicate ( ) ;', 'return UniquePredicate . < T > uniquePredicate ( ) ;', 'return IdentityPredicate . identityPredicate ( value ) ;', 'return NotNullPredicate . < T > notNullPredicate ( ) ;', 'return OrPredicate . orPredicate ( predicate1 , predicate2 ) ;', 'return AndPredicate . < T > andPredicate ( predicate1 , predicate2 ) ;', 'final Predicate < T > nonePredicate = PredicateUtils . nonePredicate ( predicate1 , predicate2 ) ;']","['public static < E > Set < E > identityHashSet ( ) {', 'import org . apache . commons . collections4 . set . UnmodifiableNavigableSet ;', 'public static < E > Set < E > newIdentityHashSet ( ) {', 'public static < E > SortedSet < E > unmodifiableNavigableSet ( final NavigableSet < E > set ) {', 'import org . apache . commons . collections4 . set . TransformedNavigableSet ;', '}', 'import java . util . NavigableSet ;', 'return TransformedNavigableSet . transformingNavigableSet ( set , transformer ) ;', 'final Transformer < ? super E , ? extends E > transformer ) {', 'return UnmodifiableNavigableSet . unmodifiableNavigableSet ( set ) ;']","['public static < E > SortedSet < E > predicatedSortedSet ( final SortedSet < E > set , final Predicate < ? super E > predicate ) {', 'import org . apache . commons . collections4 . set . UnmodifiableNavigableSet ;', 'public static < E > Set < E > transformedSet ( final Set < E > set , final Transformer < ? super E , ? extends E > transformer ) {', 'public static < E > SortedSet < E > unmodifiableNavigableSet ( final NavigableSet < E > set ) {', 'public static < E > SortedSet < E > predicatedNavigableSet ( final NavigableSet < E > set ,', 'final Predicate < ? super E > predicate ) {', 'import org . apache . commons . collections4 . set . TransformedNavigableSet ;', '}', 'import java . util . NavigableSet ;', 'public static < E > Set < E > transformedSet ( final Set < E > set ,']","['public abstract class AbstractIterableGetMapDecorator < K , V > implements IterableGet < K , V > {', 'public class AbstractIterableGetMapDecorator < K , V > implements IterableGet < K , V > {']","['public FluentIterable < E > skip ( int elementsToSkip ) {', 'public FluentIterable < E > skip ( final long elementsToSkip ) {', 'public FluentIterable < E > limit ( final int maxSize ) {', 'public FluentIterable < E > limit ( final long maxSize ) {', 'public static < E > Iterable < E > boundedIterable ( final Iterable < E > iterable , final int maxSize ) {', 'public static < E > Iterable < E > boundedIterable ( final Iterable < E > iterable , final long maxSize ) {', 'public static < E > Iterable < E > skippingIterable ( final Iterable < E > iterable , final int elementsToSkip ) {', 'public static < E > Iterable < E > skippingIterable ( final Iterable < E > iterable , final long elementsToSkip ) {']","['@ SuppressWarnings ( ""unchecked"" )', 'public FluentIterable < E > filter ( final Predicate < ? super E > predicate ) {', 'public FluentIterable < E > collate ( final Iterable < E > other ) {', 'return of ( IterableUtils . zippingIterable ( iterable , other ) ) ;', 'public FluentIterable < E > append ( final Iterable < E > other ) {', 'public FluentIterable < E > zip ( final Iterable < ? extends E > . . . others ) {', 'public FluentIterable < E > zip ( final E . . . elements ) {', 'public FluentIterable < E > collate ( final Iterable < ? extends E > other ,', 'public FluentIterable < E > zip ( final Iterable < E > . . . others ) {', 'public FluentIterable < E > append ( final Iterable < ? extends E > other ) {']","['super ( maxSize < 1 ? DEFAULT CAPACITY : maxSize , loadFactor ) ;', 'this ( maxSize , initialSize , DEFAULT LOAD FACTOR ) ;', 'this ( maxSize , initialSize , loadFactor , false ) ;', 'public LRUMap ( final int maxSize , final int initialSize ) {', 'public LRUMap ( final int maxSize , final int initialSize , final float loadFactor ) {', '}', 'throw new IllegalArgumentException ( ""LRUMap initial size must not be greather than max size"" ) ;', 'super ( initialSize , loadFactor ) ;', 'this ( maxSize , maxSize , loadFactor , scanUntilRemovable ) ;', 'if ( initialSize > maxSize ) {']","['return true ;', 'return predicate = = null ? false : IterableUtils . matchesAll ( input , predicate ) ;', 'final Predicate < ? super O > . . . predicates ) {', 'return IteratorUtils . get ( iterator , i ) ;', 'it . next ( ) ;', 'final Predicate < ? super O > . . . predicates ) {', 'if ( i = = - 1 ) {', 'return predicate = = null ? 0 : ( int ) IterableUtils . frequency ( input , predicate ) ;', '}', 'return IterableUtils . isEmpty ( ( Iterable < ? > ) object ) ;']","['public class BagUtilsTest extends BulkTest {', 'import static org . junit . Assert . assertSame ;', 'import junit . framework . Test ;', '@ Test', 'super ( name ) ;', 'public class BagUtilsTest {', 'protected Class < ? > stringClass = this . getName ( ) . getClass ( ) ;', 'import static org . junit . Assert . assertTrue ;', 'public static Test suite ( ) {', 'import static org . junit . Assert . fail ;']","['public void testGetList ( ) {', 'assertNull ( MultiMapUtils . getValuesAsList ( null , ""key1"" ) ) ;', 'public void testGetSet ( ) {', 'assertNull ( MultiMapUtils . getValuesAsBag ( null , ""key1"" ) ) ;', 'Bag < String > bag = MultiMapUtils . getBag ( map , ""key1"" ) ;', 'public void testGetValuesAsList ( ) {', 'Set < String > set = MultiMapUtils . getSet ( map , ""key1"" ) ;', 'List < String > list = MultiMapUtils . getValuesAsList ( map , ""key1"" ) ;', 'List < String > list = MultiMapUtils . getList ( map , ""key1"" ) ;', 'public void testGetValuesAsBag ( ) {']","['public LRUMap ( final int maxSize , final int initialSize , final float loadFactor , final boolean scanUntilRemovable ) {', 'final float loadFactor ,', 'final boolean scanUntilRemovable ) {', 'public LRUMap ( final int maxSize ,', 'final int initialSize ,']","['@ SuppressWarnings ( ""deprecation"" )', '@ SuppressWarnings ( ""deprecation"" )', '@ Deprecated', '@ Deprecated', '@ Deprecated']",['@ Deprecated'],"['fail ( ) ;', 'fail ( ""map must not be null"" ) ;', '} catch ( IllegalArgumentException e ) {', '} catch ( NullPointerException e ) {']","['if ( collection ! = null & & closure ! = null ) {', 'if ( closure ! = null ) {', 'return true ;', 'IteratorUtils . apply ( iterator , closure ) ;', 'return null ;', 'IterableUtils . apply ( collection , closure ) ;', 'for ( final T element : collection ) {', 'return predicate ! = null ? IterableUtils . find ( collection , predicate ) : null ;', '}', '@ Deprecated']","['import static org . apache . commons . collections4 . functors . NullPredicate . * ;', 'return NullPredicate . nullPredicate ( ) ;', 'return nullPredicate ( ) ;']","['return new CollatingIterator < E > ( comparator , iterators ) ;', 'return new CollatingIterator < E > ( comp , iterator1 , iterator2 ) ;', 'final Collection < Iterator < ? extends E > > iterators ) {', 'final Comparator < E > comp = comparator = = null ? ComparatorUtils . NATURAL COMPARATOR : comparator ;', 'return new CollatingIterator < E > ( comparator , iterator1 , iterator2 ) ;', 'final Collection < Iterator < ? extends E > > iterators ) {', '@ SuppressWarnings ( ""unchecked"" )', 'return new CollatingIterator < E > ( comp , iterators ) ;', 'import java . util . Comparator ;', 'Collections . reverse ( ( List < Integer > ) collectionOdd ) ;']","['return of ( IterableUtils . collatedIterable ( iterable , other , null ) ) ;', 'return of ( IterableUtils . collatedIterable ( comparator , iterable , other ) ) ;', 'return IteratorUtils . toList ( iterator ( ) ) ;', 'return of ( IterableUtils . collatedIterable ( null , iterable , other ) ) ;', 'return of ( IterableUtils . collatedIterable ( iterable , other , comparator ) ) ;', 'return IterableUtils . toList ( iterable ) ;', 'final Iterable < ? extends E > b ,', 'emptyIteratorIfNull ( b ) ) ;', 'final Comparator < ? super E > comparator ) {', '} ;']","['List < Integer > result = FluentIterable . of ( iterableOdd ) . collate ( iterableEven ) . toList ( ) ;', 'public void appendIterable ( ) {', 'Collections . sort ( combinedList ) ;', 'List < Integer > expected = IterableUtils . toList ( iterableA ) ;', 'CollectionUtils . addAll ( combinedList , iterableOdd ) ;', '} catch ( IllegalArgumentException iae ) {', 'List < Integer > combinedList = new ArrayList < Integer > ( ) ;', 'result = new ArrayList < Integer > ( ) ;', '@ Test', '@ Override']","['}', '} else if ( iterable instanceof FluentIterable < ? > ) {', 'throw new NullPointerException ( ""Iterable must not be null"" ) ;', 'return empty ;', 'if ( iterable instanceof FluentIterable < ? > ) {', '@ SuppressWarnings ( ""unchecked"" )', 'final FluentIterable < T > empty = IterableUtils . EMPTY ITERABLE ;', '@ SuppressWarnings ( ""unchecked"" )', '} ;', 'public Iterator < Object > iterator ( ) {']","['for ( final O element : inputCollection ) {', 'public static < O > Collection < O > selectRejected ( final Iterable < ? extends O > inputCollection ,', 'final Predicate < ? super O > . . . predicates ) {', 'public static < O , R extends Collection < ? super O > > R select ( final Iterable < ? extends O > inputCollection ,', 'for ( final O item : inputCollection ) {', 'final Predicate < ? super O > predicate , final R outputCollection ) {', '}', 'for ( final O item : inputCollection ) {', 'boolean elementAssigned = false ;', 'if ( !predicate . evaluate ( item ) ) {']","['if ( iterator . hasNext ( ) ) {', 'return closure ! = null ? IteratorUtils . applyForAllButLast ( iterator , closure ) : null ;', 'return collection ! = null & & closure ! = null ? forAllButLastDo ( collection . iterator ( ) , closure ) : null ;', '@ Deprecated', 'final T element = iterator . next ( ) ;', 'return closure ! = null ? IterableUtils . applyForAllButLast ( collection , closure ) : null ;', 'return null ;', 'if ( iterator ! = null & & closure ! = null ) {', '}', '} else {']","['for ( final E element : iterable ) {', 'CollectionUtils . addAll ( collection , iterable ) ;', '}', 'collection . add ( element ) ;', '@ SuppressWarnings ( ""unchecked"" )', 'public static < E > Iterable < E > emptyIfNull ( final Iterable < E > iterable ) {', 'final Iterable < E > it = iterable ! = null ? iterable : EMPTY ITERABLE ;', 'return iterable = = null ? IterableUtils . < E > emptyIterable ( ) : iterable ;', 'return new UnmodifiableIterable < E > ( it ) ;', 'return IteratorUtils . zippingIterator ( iterators ) ;']","['for ( final Object element : coll ) {', '@ Deprecated', 'return ( ( Bag < ? super O > ) coll ) . getCount ( obj ) ;', 'if ( coll = = null ) {', 'if ( obj . equals ( element ) ) {', 'return IterableUtils . cardinality ( coll , obj ) ;', 'return predicate = = null ? 0 : ( int ) IterableUtils . frequency ( input , predicate ) ;', 'throw new NullPointerException ( ""coll must not be null . "" ) ;', 'if ( element = = null ) {', 'return predicate = = null ? 0 : ( int ) IterableUtils . countMatches ( input , predicate ) ;']","['@ Override', 'import org . apache . commons . collections4 . set . UnmodifiableSet ;', '@ Override', 'import org . apache . commons . collections4 . set . UnmodifiableSet ;', '@ Override', 'import org . apache . commons . collections4 . Bag ;', '@ Override', '@ Override', '@ Override', '@ Override']","['return closure ! = null ? IteratorUtils . applyForAllButLast ( iterator , closure ) : null ;', 'IterableUtils . forEach ( collection , closure ) ;', 'return closure ! = null ? IterableUtils . applyForAllButLast ( collection , closure ) : null ;', 'IteratorUtils . forEach ( iterator , closure ) ;', 'IteratorUtils . apply ( iterator , closure ) ;', 'return closure ! = null ? IteratorUtils . forEachButLast ( iterator , closure ) : null ;', 'IterableUtils . apply ( collection , closure ) ;', 'return IterableUtils . frequency ( coll , obj ) ;', 'return IterableUtils . cardinality ( coll , obj ) ;', 'return closure ! = null ? IterableUtils . forEachButLast ( collection , closure ) : null ;']","['iterables [ 0 ] = iterable ;', 'return of ( IterableUtils . zippingIterable ( iterable , others ) ) ;', 'if ( iterable = = null ) {', 'IterableUtils . checkNotNull ( iterable ) ;', 'return of ( IterableUtils . zippingIterable ( iterables ) ) ;', 'if ( iterable instanceof FluentIterable < ? > ) {', '@ SuppressWarnings ( ""unchecked"" )', 'final FluentIterable < T > empty = IterableUtils . EMPTY ITERABLE ;', 'Iterable < E > [ ] iterables = new Iterable [ 1 + others . length ] ;', 'System . arraycopy ( others , 0 , iterables , 1 , others . length ) ;']","['return of ( IterableUtils . collatedIterable ( null , iterable , other ) ) ;', 'return of ( IterableUtils . collatedIterable ( iterable , other ) ) ;', '@ Override', '@ SuppressWarnings ( ""unchecked"" )', '@ SuppressWarnings ( ""unchecked"" )', 'import static org . junit . Assert . * ;', 'assertEquals ( expectedSum , sum . get ( ) ) ;', 'result = FluentIterable . of ( Arrays . asList ( 1 , 4 , 7 ) ) . zip ( Arrays . asList ( 2 , 5 , 8 ) , Arrays . asList ( 3 , 6 , 9 ) ) . toList ( ) ;', '@ Override', 'CollectionUtils . addAll ( combinedList , iterableEven ) ;']","['import java . util . Comparator ;', 'public void max ( ) {', '@ Test', 'try {', 'assertTrue ( comp . compare ( null , 10 ) < 0 ) ;', '}', 'Comparator < Integer > comp = ComparatorUtils . nullHighComparator ( null ) ;', 'assertEquals ( Integer . valueOf ( - 10 ) , ComparatorUtils . max ( 10 , - 10 , reversed ) ) ;', 'assertTrue ( comp . compare ( 1 , 2 ) < 0 ) ;', 'Comparator < Integer > reversed =']","['int remove ( Object object , int occurrences ) ;', 'int getCount ( ) ;', 'int setCount ( E object , int count ) ;', '}', 'boolean add ( E object ) ;', '@ Override', 'Set < E > uniqueSet ( ) ;', 'public interface MultiSet < E > extends Collection < E > {', 'boolean remove ( Object object ) ;', 'int hashCode ( ) ;']","['public void clear ( ) {', 'public boolean retainAll ( final Collection < ? > coll ) {', 'import java . io . ObjectOutputStream ;', 'public int add ( final E object , final int count ) {', 'out . defaultWriteObject ( ) ;', 'final MultiSet < E > tmpMultiSet = ( MultiSet < E > ) multiset ;', '}', 'public boolean removeAll ( final Collection < ? > coll ) {', 'public final class UnmodifiableMultiSet < E >', 'import org . apache . commons . collections4 . MultiSet ;']","['@ Override', 'void putAll ( MultiValuedMap < ? extends K , ? extends V > m ) ;', 'void putAll ( Map < ? extends K , ? extends V > map ) ;', 'Bag < K > keys ( ) ;', 'void putAll ( MultiValuedMap < ? extends K , ? extends V > map ) ;', 'void putAll ( Map < ? extends K , ? extends V > m ) ;', 'MultiSet < K > keys ( ) ;', '@ Override', 'public boolean remove ( Object object , int nCopies ) {', 'public Set < MultiSet . Entry < K > > entrySet ( ) {']","['import java . util . Collections ;', 'return null ;', 'return Collections . emptyList ( ) ;']","['import org . apache . commons . collections4 . Bag ;', 'return !valueCollection . isEmpty ( ) & & get ( key ) . addAll ( valueCollection ) ;', 'return !valueCollection . isEmpty ( ) & & get ( key ) . addAll ( valueCollection ) ;', 'import org . apache . commons . collections4 . MultiSet ;']","['@ Deprecated', 'fail ( ""Expecting IllegalArgumentException for null collection . "" ) ;', '} catch ( final NullPointerException ex ) {', '} catch ( final IllegalArgumentException ex ) {', 'fail ( ""Expecting NullPointerException for null collection . "" ) ;', '@ Deprecated']","['public static < E > int indexOf ( final Iterable < E > iterable , final Predicate < ? super E > predicate ) {', '}', 'return IteratorUtils . indexOf ( emptyIteratorIfNull ( iterable ) , predicate ) ;', 'public static < E > boolean matchesAny ( final Iterator < E > iterator , final Predicate < ? super E > predicate ) {', 'for ( int index = 0 ; iterator . hasNext ( ) ; index + + ) {', 'return true ;', '}', 'while ( iterator . hasNext ( ) ) {', 'public static < E > int indexOf ( final Iterator < E > iterator , final Predicate < ? super E > predicate ) {', 'return false ;']","['return ( SortedSet < E > ) EMPTY SORTED SET ;', 'return !b . contains ( object ) ;', 'return b . contains ( object ) ;', 'copyInto ( set ) ;', '}', 'public static < E > SetView < E > union ( final Set < ? extends E > a , final Set < ? extends E > b ) {', 'return a . contains ( o ) | | b . contains ( o ) ;', 'final SetView < E > bMinusA = difference ( b , a ) ;', 'return a . contains ( o ) & & !b . contains ( o ) ;', 'return IteratorUtils . filteredIterator ( a . iterator ( ) , containedInB ) ;']","['public class PredicatedMultiSet < E > extends PredicatedCollection < E > implements MultiSet < E > {', 'public int add ( final E object , final int count ) {', 'import org . apache . commons . collections4 . Predicate ;', 'validate ( object ) ;', '}', 'return decorated ( ) . setCount ( object , count ) ;', 'import org . apache . commons . collections4 . MultiSet ;', '@ Override', 'public boolean equals ( final Object object ) {', 'return decorated ( ) . add ( object , count ) ;']","['private Object readResolve ( ) {', 'protected Object readResolve ( ) {', 'assertEquals ( mk . hashCode ( ) , mk2 . hashCode ( ) ) ;', '}', 'out . writeObject ( mk ) ;', 'final DerivedMultiKey < ? > mk2 = ( DerivedMultiKey < ? > ) in . readObject ( ) ;', 'final DerivedMultiKey < ? > mk = new DerivedMultiKey < String > ( ""A"" , ""B"" ) ;', 'in . close ( ) ;', 'public T getFirst ( ) {', 'final ByteArrayInputStream bais = new ByteArrayInputStream ( baos . toByteArray ( ) ) ;']","['assertEquals ( 2 , longerString . length ( ) ) ;', 'trie . put ( prefixString , ""prefixString"" ) ;', 'assertEquals ( 2 , trie . prefixMap ( prefixString ) . size ( ) ) ;', 'final String prefixString = """" + char b ;', 'assertTrue ( trie . prefixMap ( prefixString ) . containsKey ( longerString ) ) ;', 'assertTrue ( longerString . startsWith ( prefixString ) ) ;', 'final String longerString = prefixString + u8000 ;', 'final PatriciaTrie < String > trie = new PatriciaTrie < String > ( ) ;', '}', 'assertEquals ( 1 , prefixString . length ( ) ) ;']","['public class CloneTransformer < T > implements Transformer < T , T > , Serializable {', '@ Override', 'return INSTANCE ;', 'public class CloneTransformer < T > implements Transformer < T , T > {', '}', 'return INSTANCE ;', 'private static final long serialVersionUID = - 8188742709499652567L ;', 'return ( Transformer < T , T > ) INSTANCE ;', 'import java . io . Serializable ;', 'private Object readResolve ( ) {']","['factory = FactoryUtils . < Object > prototypeFactory ( new Mock2 ( ""S"" ) ) ;', 'import static org . junit . Assert . assertSame ;', 'import java . io . ObjectOutputStream ;', 'import static org . junit . Assert . assertNull ;', 'try {', 'import static org . junit . Assert . assertTrue ;', '}', 'import static org . junit . Assert . assertEquals ;', 'import java . io . NotSerializableException ;', 'import static org . junit . Assert . fail ;']","['public void testFullMapCompatibility ( ) throws Exception {', 'public void xtestFullMapCompatibility ( ) throws Exception {', 'public void testEmptyMapCompatibility ( ) throws Exception {', '}', 'public boolean isTestSerialization ( ) {', 'return false ;', '@ Override', 'public void xtestEmptyMapCompatibility ( ) throws Exception {']","['private void readObject ( ObjectInputStream is ) throws IOException , ClassNotFoundException {', 'is . defaultReadObject ( ) ;', '}', '@ Override', 'throw new UnsupportedOperationException ( ) ;', 'if ( clazz ! = null & & !Collection . class . isAssignableFrom ( clazz ) ) {', 'import java . io . ObjectOutputStream ;', 'try {', '}', 'return iis . readObject ( ) ;']","['}', 'return EMPTY MULTISET ;', 'public static < E > MultiSet < E > predicatedMultiSet ( final MultiSet < E > multiset ,', 'public static final MultiSet EMPTY MULTISET =', 'public class MultiSetUtils {', 'public static < E > MultiSet < E > unmodifiableMultiSet ( final MultiSet < ? extends E > multiset ) {', 'return UnmodifiableMultiSet . unmodifiableMultiSet ( multiset ) ;', 'return PredicatedMultiSet . predicatedMultiSet ( multiset , predicate ) ;', 'public static < E > MultiSet < E > synchronizedMultiSet ( final MultiSet < E > multiset ) {', 'return SynchronizedMultiSet . synchronizedMultiSet ( multiset ) ;']","['if ( mut = = null ) {', 'return remove ( object , 1 ) ! = 0 ;', 'return true ;', '}', 'final MutableInteger mut = map . get ( object ) ;', 'modCount + + ;', 'size - = mut . value ;', 'return false ;', 'map . remove ( object ) ;', 'TestBagUniqueSet . this . setCollection ( AbstractMultiSetTest . this . getCollection ( ) . uniqueSet ( ) ) ;']","['return parent . entrySet . size ( ) ;', 'return parent . map . entrySet ( ) . size ( ) ;']","['return "" [ ] "" ;', 'final Object current = it . next ( ) ;', 'final StringBuilder buf = new StringBuilder ( ) ;', 'final int count = getCount ( current ) ;', ""buf . append ( ' [ ' ) ;"", 'buf . append ( "" , "" ) ;', 'while ( it . hasNext ( ) ) {', ""buf . append ( ' ] ' ) ;"", 'return buf . toString ( ) ;', 'public String toString ( ) {']","['return MultiValuedHashMap . < K , V > setValuedHashMap ( ) ;', 'return new HashSetValuedHashMap < K , V > ( ) ;', 'return MultiValuedHashMap . < K , V , C > setValuedHashMap ( setClass ) ;', 'return new ArrayListValuedHashMap < K , V > ( ) ;', 'public static < K , V , C extends Set < V > > SetValuedMap < K , V > newSetValuedHashMap ( final Class < C > setClass ) {', 'import org . apache . commons . collections4 . multimap . HashSetValuedHashMap ;', '}', 'import org . apache . commons . collections4 . multimap . ArrayListValuedHashMap ;', 'return MultiValuedHashMap . < K , V , C > listValuedHashMap ( listClass ) ;', 'UnmodifiableMultiValuedMap . unmodifiableMultiValuedMap ( new ArrayListValuedHashMap ( 0 , 0 ) ) ;']","['import org . apache . commons . collections4 . ListValuedMap ;', 'import org . apache . commons . collections4 . SetValuedMap ;']","['public void clear ( ) {', 'protected int uniqueElements ( ) {', 'return true ;', 'array = unchecked ;', 'for ( int index = getCount ( current ) ; index > 0 ; index - - ) {', 'for ( final Map . Entry < E , MutableInteger > entry : map . entrySet ( ) ) {', 'public String toString ( ) {', 'return result ;', 'import org . apache . commons . collections4 . collection . AbstractCollectionDecorator ;', 'return new MapBasedMultiSetIterator < E > ( this ) ;']","['public void clear ( ) {', 'protected int uniqueElements ( ) {', 'return true ;', 'public K getElement ( ) {', 'for ( int index = getCount ( current ) ; index > 0 ; index - - ) {', 'implements Transformer < Map . Entry < K , Collection < V > > , MultiSet . Entry < K > > {', 'final Iterator < K > it = getMap ( ) . keySet ( ) . iterator ( ) ;', 'import org . apache . commons . collections4 . multiset . AbstractMultiSet ;', 'return UnmodifiableSet . unmodifiableSet ( keySet ( ) ) ;', '}']","['protected class WrappedCollection implements Collection < V > {', 'class WrappedCollection implements Collection < V > {', 'protected class WrappedSet extends WrappedCollection implements Set < V > {', 'private class WrappedSet extends WrappedCollection implements Set < V > {']","['import java . util . Iterator ;', 'List < V > wrappedCollection ( final K key ) {', 'return wrappedCollection ( key ) ;', '@ Override', '}', '@ SuppressWarnings ( ""unchecked"" )', 'AbstractMultiValuedMap . this . remove ( entry . getKey ( ) ) ;', 'return ( Map < K , Collection < V > > ) getMap ( ) ;', 'public void clear ( ) {', 'AsMap . this . clear ( ) ;']","['return asMap ( ) . toString ( ) ;', 'return getMap ( ) . toString ( ) ;', 'return asMap ( ) . hashCode ( ) ;', 'return getMap ( ) . hashCode ( ) ;']",['import java . util . Iterator ;'],"['FluentIterable . of ( iterableA ) . forEach ( null ) ;', 'FluentIterable . of ( iterableA ) . forEach ( ( Closure < Integer > ) null ) ;']","['writeExternalFormToDisk ( ( java . io . Serializable ) makeFullMap ( ) ,', '""src / test / resources / data / test / ArrayListValuedHashMap . emptyCollection . version4 . 1 . obj"" ) ;', '}', 'writeExternalFormToDisk ( ( java . io . Serializable ) makeObject ( ) ,', 'public void testCreate ( ) throws Exception {', '""src / test / resources / data / test / ArrayListValuedHashMap . fullCollection . version4 . 1 . obj"" ) ;', '""src / test / resources / data / test / HashSetValuedHashMap . fullCollection . version4 . 1 . obj"" ) ;', 'writeExternalFormToDisk ( ( java . io . Serializable ) makeFullMap ( ) ,', '""src / test / resources / data / test / HashSetValuedHashMap . emptyCollection . version4 . 1 . obj"" ) ;', '}']","['final Comparator < E > comp = comparator = = null ? ComparatorUtils . NATURAL COMPARATOR : comparator ;', 'final Comparator < E > comp =', 'comparator = = null ? ComparatorUtils . NATURAL COMPARATOR : ( Comparator < E > ) comparator ;', 'final Collection < List < ? extends Number > > col = new ArrayList < List < ? extends Number > > ( ) ;', 'import static org . junit . Assert . assertSame ;', 'private Collection < Integer > emptyCollection = new ArrayList < Integer > ( 1 ) ;', 'final Closure < Collection < Integer > > testClosure = ClosureUtils . invokerClosure ( ""clear"" ) ;', 'assertTrue ( collectionA . isEmpty ( ) & & collectionB . isEmpty ( ) ) ;', 'resultClosure = CollectionUtils . forAllDo ( ( Collection < Collection < Integer > > ) null , testClosure ) ;', 'final Closure < List < ? extends Number > > testClosure = ClosureUtils . invokerClosure ( ""clear"" ) ;']","['private ArrayList < E > sequence ;', 'private final ArrayList < E > sequence ;', 'private boolean [ ] direction ;', 'private final int [ ] keys ;', 'private Map < Integer , E > objectMap ;', 'private final boolean [ ] direction ;', 'private int [ ] keys ;', 'private final Map < Integer , E > objectMap ;', 'private Deque < E > items = new ArrayDeque < E > ( ) ;', 'private final Deque < E > items = new ArrayDeque < E > ( ) ;']","['public static int size ( Map < ? , ? > map ) {', 'return map = = null ? 0 : map . size ( ) ;', '}', 'import static org . junit . Assert . * ;', 'assertEquals ( 2 , MapUtils . size ( map ) ) ;', 'import static org . junit . Assert . assertSame ;', '@ Test', 'assertEquals ( 0 , MapUtils . size ( null ) ) ;', 'map . put ( ""A"" , ""1"" ) ;', '}']","['public void clear ( ) {', 'it . remove ( ) ;', 'while ( it . hasNext ( ) ) {', '}', 'if ( currentKeys . contains ( it . next ( ) . getKey ( ) ) ) {', 'Set < K > currentKeys = keySet ( ) ;', 'Iterator < Map . Entry < K , V > > it = AbstractPatriciaTrie . this . entrySet ( ) . iterator ( ) ;', '@ Override', 'import org . apache . commons . collections4 . Trie ;', 'trie . put ( ""Andres"" , 6 ) ;']","['return predicate = = null ? false : IterableUtils . matchesAll ( input , predicate ) ;', 'return collection = = null ? CollectionUtils . < T > emptyCollection ( ) : collection ;', 'if ( foundCurrentElement ) {', 'import java . util . Collections ;', 'continue ;', 'public static final Collection EMPTY COLLECTION = Collections . emptyList ( ) ;', 'return IteratorUtils . get ( iterator , i ) ;', 'final Collection < List < E > > result = new ArrayList < List < E > > ( ) ;', 'final Iterator < ? > iterator = ( ( Collection < ? > ) object ) . iterator ( ) ;', 'return predicate ! = null & & IterableUtils . matchesAny ( input , predicate ) ;']","['return map . get ( key ) ;', 'V v ;', 'return value . transform ( ( K ) key ) ;', 'return ( ( ( v = map . get ( key ) ) ! = null ) | | map . containsKey ( key ) )', '}', '? v', 'if ( map . containsKey ( key ) = = false ) {', ': value . transform ( ( K ) key ) ;']","['keys . add ( key . toString ( ) ) ;', '}', '@ Override', 'import java . util . Enumeration ;', 'private static final long serialVersionUID = 1L ;', 'final Set < Object > keySet = keySet ( ) ;', 'import java . util . List ;', 'Collections . sort ( keys ) ;', 'public class SortedProperties extends Properties {', 'import org . apache . commons . collections4 . iterators . IteratorEnumeration ;']","['throw new IllegalArgumentException ( ""negative size : "" + listSize ) ;', 'if ( listSize < 0 ) {', '}', 'left . relativePosition + = relativePosition + ( relativePosition > 0 ? 0 : 1 ) ;', 'left . relativePosition + = relativePosition ;']","['} catch ( final IOException ex ) {', '} catch ( final IOException ex ) {', 'if ( !setNextObject ( ) ) {', 'if ( !nextObjectSet & & !setNextObject ( ) ) {', 'if ( !nextObjectSet ) {', 'throw new NoSuchElementException ( ) ;', '}', 'throw new NoSuchElementException ( ) ;', 'if ( !nextObjectSet ) {', 'if ( !previousObjectSet & & !setPreviousObject ( ) ) {']","['assertNull ( IterableUtils . indexOf ( iterableA , null ) ) ;', 'IterableUtils . indexOf ( iterableA , null ) ;', 'assertNull ( IteratorUtils . indexOf ( iterableA . iterator ( ) , null ) ) ;', 'IteratorUtils . indexOf ( iterableA . iterator ( ) , null ) ;']","['assertEquals ( ""Map should still equal HashMap"" , map , confirmed ) ;']","['IteratorUtils . toListIterator ( null ) ;', 'try {', '@ Test', 'assertTrue ( ""returns ObjectArrayIterator when Object array passed"" , IteratorUtils . getIterator ( objArray ) instanceof ObjectArrayIterator ) ;', 'public void testToListIteratorNull ( ) {', '}', 'assertTrue ( ""returns Iterator when iterable passed"" , IteratorUtils . getIterator ( iterableA ) instanceof Iterator ) ;', '+ + expected ;', 'import java . util . Vector ;', 'IteratorUtils . toArray ( null , String . class ) ;']","['Iterable < ? extends O > b ) {', 'public static < O extends Comparable < ? super O > > List < O > collate ( final Iterable < ? extends O > a ,', 'final Predicate < ? super O > predicate , R outputCollection , R rejectedCollection ) {', 'public EquatorWrapper < E > transform ( final E input ) {', 'public EquatorWrapper < E > transform ( E input ) {', 'final Predicate < ? super O > predicate , final R outputCollection , final R rejectedCollection ) {', 'public static < O extends Comparable < ? super O > > List < O > collate ( Iterable < ? extends O > a ,', 'final Iterable < ? extends O > b ) {', 'protected Iterator < ? extends E > nextIterator ( int count ) {', 'protected Iterator < ? extends E > nextIterator ( final int count ) {']","['int i = index ;', 'final int i = index ;', 'for ( Predicate < ? > p : predicates ) {', 'for ( final Predicate < ? > p : predicates ) {', 'final', 'for ( Character ch : lcs ) {', 'for ( final Character ch : lcs ) {', 'Collection < V > col = map . get ( key ) ;', 'final Collection < V > col = map . get ( key ) ;', 'K k = ( K ) stream . readObject ( ) ;']","['final int i = index ;', 'int i = index ;', 'for ( final Predicate < ? > p : predicates ) {', 'for ( Predicate < ? > p : predicates ) {', 'final', 'for ( final Character ch : lcs ) {', 'for ( Character ch : lcs ) {', 'final Collection < V > col = map . get ( key ) ;', 'Collection < V > col = map . get ( key ) ;', 'final int size = stream . readInt ( ) ;']","['public static < O extends Comparable < ? super O > > List < O > collate ( final Iterable < ? extends O > a ,', 'Iterable < ? extends O > b ) {', 'public EquatorWrapper < E > transform ( final E input ) {', 'final Predicate < ? super O > predicate , R outputCollection , R rejectedCollection ) {', 'final Predicate < ? super O > predicate , final R outputCollection , final R rejectedCollection ) {', 'public EquatorWrapper < E > transform ( E input ) {', 'final Iterable < ? extends O > b ) {', 'public static < O extends Comparable < ? super O > > List < O > collate ( Iterable < ? extends O > a ,', 'protected Iterator < ? extends E > nextIterator ( final int count ) {', 'protected Iterator < ? extends E > nextIterator ( int count ) {']","['boolean isSetValuedMap = AbstractMultiValuedMapTest . this . getMap ( ) instanceof SetValuedMap ;', 'boolean isSetValuedMap = AbstractMultiValuedMapTest . this . makeObject ( ) instanceof SetValuedMap ;']","['Collection < V > values = new ArrayList < > ( map . values ( ) ) ;', 'final Collection < V > col2 = map . get ( ( K ) ""one"" ) ;', 'MapIterator < K , V > mapIt = getMap ( ) . mapIterator ( ) ;', 'final Iterator < Map . Entry < K , V > > iterator = map . entries ( ) . iterator ( ) ;', 'Collection < K > col = new ArrayList < > ( ) ;', 'final Map < K , Collection < V > > mapCol = getMap ( ) . asMap ( ) ;', 'Iterator < K > it = map . keys ( ) . iterator ( ) ;', 'final Iterator < K > it = map . keys ( ) . iterator ( ) ;', 'Collection < V > [ ] colArr = new Collection [ 3 ] ;', 'protected void addSampleMappings ( final MultiValuedMap < ? super K , ? super V > map ) {']","['return ( Bag < E > ) EMPTY BAG ;', 'return EMPTY BAG ;', 'return ( Queue < E > ) EMPTY QUEUE ;', 'return EMPTY QUEUE ;', 'return ( Factory < T > ) NULL INSTANCE ;', 'return NULL INSTANCE ;', 'return ( Transformer < I , O > ) NULL INSTANCE ;', 'return NULL INSTANCE ;', 'return ( DefaultEquator < T > ) DefaultEquator . INSTANCE ;', 'return DefaultEquator . INSTANCE ;']","['final Map < String , String > inMap = new HashMap < String , String > ( ) ;', 'final Map < String , String > inMap = new HashMap < > ( ) ;', 'final Map < String , Short > in = new HashMap < String , Short > ( ) ;', 'final Map < String , Short > in = new HashMap < > ( ) ;', 'final Map < String , String > inMap = new HashMap < String , String > ( ) ;', 'final Map < String , Object > in = new HashMap < > ( ) ;', 'final Map < String , Boolean > in = new HashMap < String , Boolean > ( ) ;', 'final Map < String , Double > in = new HashMap < > ( ) ;', 'final Map < String , Long > in = new HashMap < String , Long > ( ) ;', 'final Map < String , Boolean > in = new HashMap < > ( ) ;']","['public class MapUtilsTest {', 'import org . apache . commons . collections4 . junit . AbstractAvailableLocalesTest ;', 'inStr . put ( ""str1"" , ""2 . 0"" ) ;', 'assertEquals ( MapUtils . getFloatValue ( inStr , ""str1"" , 0 . 0f ) , 2 . 0 , 0 ) ;', 'assertEquals ( MapUtils . getFloatValue ( inStr , ""str1"" , 0 . 0f ) , 2 . 0 , 0 ) ;', 'import java . text . DecimalFormat ;', 'char decimalSeparator = getDecimalSeparator ( ) ;', 'public class MapUtilsTest extends AbstractAvailableLocalesTest {', 'import java . util . Locale ;', '}']","['assertEquals ( MapUtils . getDoubleValue ( in , ""key"" ) , 2 . 0 , 0 ) ;', 'assertEquals ( val . intValue ( ) , MapUtils . getNumber ( in , ""noKey"" , val ) . intValue ( ) , 0 ) ;', 'assertEquals ( MapUtils . getInteger ( in , ""noKey"" , 0 ) , 0 , 0 ) ;', 'assertEquals ( 2 . 0 , MapUtils . getDouble ( in , ""key"" , 0 . 0 ) , 0 ) ;', 'assertEquals ( MapUtils . getIntValue ( in , ""noKey"" , 0 ) , 0 , 0 ) ;', 'assertEquals ( 2 . 0 , MapUtils . getFloatValue ( in , ""key"" , 0 . 0f ) , 0 ) ;', 'assertEquals ( MapUtils . getShortValue ( in , ""key"" , val ) , val , 0 ) ;', 'assertEquals ( 0 , MapUtils . getInteger ( in , ""noKey"" , 0 ) , 0 ) ;', 'assertEquals ( MapUtils . getObject ( null , ""key"" ) , null ) ;', 'assertEquals ( 2 , MapUtils . getInteger ( in , ""key"" , 0 ) , 0 ) ;']","['final NodeList nodeList = createNodeList ( nodes ) ;', 'final NodeList nodeList = createNodeList ( nodes ) ;', 'Iterator < Integer > it =', 'Iterator < Integer > it =', 'assertEquals ( """" , inMap . get ( ""key2"" ) ) ;', 'assertEquals ( """" , inMap . get ( ""key2"" ) ) ;', '@ Test', '@ Test', '@ Test ( expected = NullPointerException . class )', '@ Test ( expected = NullPointerException . class )']","['} else {', 'return remove ( n - 1 ) ;', 'return get ( n - 1 ) ;', 'return get ( n - 1 ) ;', 'return get ( m ) ;', 'return get ( m ) ;', 'return remove ( n - 1 ) ;', 'final Iterator < ? > it = coll1 . iterator ( ) ;', 'final Iterator < ? > it = coll1 . iterator ( ) ;', 'return true ;']","['final ArrayList < E > result = new ArrayList < > ( list1 ) ;', 'result . addAll ( list1 ) ;', 'final ArrayList < E > result = new ArrayList < > ( list1 . size ( ) + list2 . size ( ) ) ;']","['public static < C > boolean addAll ( final Collection < C > collection , final C [ ] elements ) {', 'public static < C > boolean addAll ( final Collection < C > collection , final C . . . elements ) {']","['if ( objectToFind = = null ) {', 'if ( startIndex < 0 ) {', 'for ( int i = startIndex ; i < array . length ; i + + ) {', 'static int indexOf ( final Object [ ] array , final Object objectToFind , int startIndex ) {', '}', 'if ( objectToFind . equals ( array [ i ] ) ) {', 'if ( array [ i ] = = null ) {', '} else {', 'package org . apache . commons . collections4 ;', 'class ArrayUtils {']","['public static < E > Queue < E > synchronizedQueue ( final Queue < E > queue ) {', 'import org . apache . commons . collections4 . queue . SynchronizedQueue ;', 'return SynchronizedQueue . synchronizedQueue ( queue ) ;', '}', 'return true ;', '}', 'return decorated ( ) . offer ( e ) ;', 'return ( Queue < E > ) super . decorated ( ) ;', 'protected SynchronizedQueue ( final Queue < E > queue ) {', 'return new SynchronizedQueue < E > ( queue ) ;']","['}', '}']","['int i = index ;', 'public EquatorWrapper < E > transform ( final E input ) {', 'Iterable < ? extends O > b ) {', 'final Iterable < ? extends O > b ) {', 'final Predicate < ? super O > predicate , R outputCollection , R rejectedCollection ) {', 'public static < O extends Comparable < ? super O > > List < O > collate ( final Iterable < ? extends O > a ,', 'public static < O extends Comparable < ? super O > > List < O > collate ( Iterable < ? extends O > a ,', 'final Predicate < ? super O > predicate , final R outputCollection , final R rejectedCollection ) {', 'public EquatorWrapper < E > transform ( E input ) {', 'final int i = index ;']","['public static < E > E first ( final Iterator < E > iterator ) {', '}', 'return get ( iterator , 0 ) ;', 'public void indexOf ( ) {', 'public void testFirstFromIterator ( ) throws Exception {', 'public void forEach ( ) {', 'public void testForEachButLast ( ) {', 'public void getFromIterator ( ) throws Exception {', 'public void testGetAtIndexFromIterator ( ) throws Exception {', 'public void forEachButLast ( ) {']","['return get ( iterable , 0 ) ;', '}', 'public static < T > T first ( final Iterable < T > iterable ) {', '@ Test ( expected = IndexOutOfBoundsException . class )', '@ Test ( expected = IndexOutOfBoundsException . class )', 'final Bag < String > bag = new HashBag < > ( ) ;', 'assertEquals ( ""element"" , IterableUtils . first ( bag ) ) ;', 'IterableUtils . first ( bag ) ;', '}', 'public void firstFromIterable ( ) throws Exception {']","['threshold = calculateThreshold ( data . length , loadFactor ) ;', '/ /', 'threshold = calculateThreshold ( data . length , loadFactor ) ;', 'import java . io . ByteArrayInputStream ;', 'ByteArrayInputStream bais = new ByteArrayInputStream ( baos . toByteArray ( ) ) ;', 'assertEquals ( 1 , deserialisedMap . size ( ) ) ;', 'import java . io . ObjectOutputStream ;', 'import java . io . IOException ;', '@ SuppressWarnings ( ""unchecked"" )', 'import java . io . ObjectInputStream ;']","['IteratorUtils . toListIterator ( null ) ;', 'IteratorUtils . toListIterator ( null ) ;', 'assertSame ( EmptyIterator . INSTANCE , IteratorUtils . EMPTY ITERATOR ) ;', 'assertSame ( EmptyIterator . INSTANCE , IteratorUtils . EMPTY ITERATOR ) ;', 'final ListIterator < String > listIterator = getImmutableListIterator ( ) ;', 'final Closure < List < Integer > > testClosure = ClosureUtils . invokerClosure ( ""clear"" ) ;', 'final Closure < List < Integer > > testClosure = ClosureUtils . invokerClosure ( ""clear"" ) ;', 'final ListIterator < String > listIterator = getImmutableListIterator ( ) ;', 'final Node node3 = createMock ( Node . class ) ;', 'final Node node3 = createMock ( Node . class ) ;']","['public static < E > Iterator < E > peekingIterator ( final Iterator < ? extends E > iterator ) {', 'public static < E > PeekingIterator < E > peekingIterator ( final Iterator < ? extends E > iterator ) {']","['public static < E > Iterator < E > pushbackIterator ( final Iterator < ? extends E > iterator ) {', 'public static < E > PushbackIterator < E > pushbackIterator ( final Iterator < ? extends E > iterator ) {']","['fail ( ""UnsupportedOperationException must be thrown from set in "" + it . getClass ( ) . getSimpleName ( ) ) ;', 'fail ( ""UnsupportedOperationException must be thrown from add of "" + it . getClass ( ) . getSimpleName ( ) ) ;']","['public static < E > PeekingIterator < E > peekingIterator ( final Iterator < ? extends E > iterator ) {', 'public static < E > Iterator < E > pushbackIterator ( final Iterator < ? extends E > iterator ) {', 'public static < E > PushbackIterator < E > pushbackIterator ( final Iterator < ? extends E > iterator ) {', 'public static < E > Iterator < E > peekingIterator ( final Iterator < ? extends E > iterator ) {']","['public boolean evaluate ( String object ) {', 'public void setUp ( ) {', 'public void testUnmodifiableMultiSet ( ) {', 'try {', '@ Test', '} ) ;', '}', 'empty . add ( 55 ) ;', 'MultiSet < String > synced = MultiSetUtils . synchronizedMultiSet ( multiSet ) ;', 'synced . add ( ""a"" ) ;']","['import static org . junit . Assert . * ;', 'import static org . junit . Assert . fail ;', 'import static org . junit . Assert . assertEquals ;']","['final Flat3Map < Integer , Integer > m = new Flat3Map < > ( ) ;', 'final Map < Integer , Integer > orig = new HashMap < > ( ) ;', 'm . put ( null , TWO ) ;', 'public void testRemove3 ( ) {', 'm . put ( TWO , null ) ;', 'assertEquals ( orig , m ) ;', 'public void testPut5 ( ) {', 'assertSame ( THREE , obj ) ;', 'public void testRemove7 ( ) {', 'm . put ( ONE , THREE ) ;']","['assertEquals ( multiSet , synced ) ;', 'assertEquals ( multiSet , synced ) ;', 'obj = m . remove ( ONE ) ;', 'obj = m . remove ( ONE ) ;']","['Iterator < Integer > iterator = iterableA . iterator ( ) ;', 'final Iterator < Integer > iterator = iterableA . iterator ( ) ;', 'public boolean evaluate ( String object ) {', 'final MultiSet < String > unmodifiable = MultiSetUtils . unmodifiableMultiSet ( multiSet ) ;', 'MultiSet < String > synced = MultiSetUtils . synchronizedMultiSet ( multiSet ) ;', 'final MultiSet < String > predicated = MultiSetUtils . predicatedMultiSet ( multiSet , predicate ) ;', 'MultiSet < Integer > empty = MultiSetUtils . emptyMultiSet ( ) ;', 'catch ( final IllegalArgumentException iae ) {', '} catch ( UnsupportedOperationException e ) {', '} catch ( final UnsupportedOperationException e ) {']","['return ( list . size ( ) + size - 1 ) / size ;', 'return ( int ) Math . ceil ( ( double ) list . size ( ) / ( double ) size ) ;', 'assertEquals ( strings , partitionMax . get ( 0 ) ) ;', 'assertEquals ( 1 , partitionMax . size ( ) ) ;', 'List < List < Integer > > partitionMax = ListUtils . partition ( strings , Integer . MAX VALUE ) ;', 'assertEquals ( strings . size ( ) , partitionMax . get ( 0 ) . size ( ) ) ;']","['List < List < Integer > > partitionMax = ListUtils . partition ( strings , Integer . MAX VALUE ) ;', 'final List < List < Integer > > partitionMax = ListUtils . partition ( strings , Integer . MAX VALUE ) ;']","['import junit . framework . TestCase ;', 'public class FilterListIteratorTest {', '@ Override', '@ Test', 'public class FilterListIteratorTest extends TestCase {', 'import org . junit . Before ;', 'import static org . junit . Assert . * ;', 'import org . junit . After ;', 'import org . junit . Test ;', '@ After']","['return true ;', 'return true ;', '}', '}', 'return decorated ( ) . offer ( e ) ;', 'return decorated ( ) . offer ( e ) ;', 'return ( Queue < E > ) super . decorated ( ) ;', 'return ( Queue < E > ) super . decorated ( ) ;', 'protected SynchronizedQueue ( final Queue < E > queue ) {', 'protected SynchronizedQueue ( final Queue < E > queue ) {']","['public static interface MapMutator < K , V > extends Serializable {', 'public interface MapMutator < K , V > extends Serializable {', 'public static interface ExpirationPolicy < K , V >', 'public interface ExpirationPolicy < K , V >', 'public static interface SetMutator < E > extends Serializable {', 'public interface SetMutator < E > extends Serializable {']","['!getMap ( ) . containsValue ( values [ i ] ) ) ;', 'while ( values . contains ( sampleValue ) & & j < 10000 ) {', 'keys . remove ( sampleKeys [ i ] ) ;', 'for ( V sampleValue : sampleValues ) {', 'for ( int i = 0 ; i < sampleKeys . length ; i + + ) {', '!getMap ( ) . containsValue ( sampleValue ) ) ;', 'for ( int i = 0 ; i < sampleValues . length ; i + + ) {', 'for ( Object value : values ) {', 'if ( map . containsValue ( sampleValues [ i ] ) ) {', 'for ( K sampleKey : sampleKeys ) {']","['for ( K sampleKey : sampleKeys ) {', 'for ( final Object value : values ) {', 'for ( V sampleValue : sampleValues ) {', 'for ( final V sampleValue : sampleValues ) {', 'for ( Object value : values ) {', 'for ( final K sampleKey : sampleKeys ) {']","['public NavigableSet < E > subSet ( final E fromElement , final boolean fromInclusive , final E toElement , final boolean toInclusive ) {', 'public NavigableSet < E > subSet ( final E fromElement , final boolean fromInclusive , final E toElement ,', 'final boolean toInclusive ) {', 'public NavigableSet < E > subSet ( final E fromElement , final boolean fromInclusive , final E toElement , final boolean toInclusive ) {', 'public NavigableSet < E > subSet ( final E fromElement , final boolean fromInclusive , final E toElement ,', 'final boolean toInclusive ) {', 'public NavigableSet < E > subSet ( final E fromElement , final boolean fromInclusive , final E toElement , final boolean toInclusive ) {', 'public NavigableSet < E > subSet ( final E fromElement , final boolean fromInclusive , final E toElement ,', 'final boolean toInclusive ) {', 'public NavigableSet < E > subSet ( final E fromElement , final boolean fromInclusive , final E toElement , final boolean toInclusive ) {']","['private final int getFreq ( final Object obj , final Map < ? , Integer > freqMap ) {', 'private int getFreq ( final Object obj , final Map < ? , Integer > freqMap ) {']","['static enum DataElement {', 'enum DataElement {', 'public static enum UnknownObjectBehavior {', 'public enum UnknownObjectBehavior {', 'public static enum ReferenceStrength {', 'public enum ReferenceStrength {']","['return decorated ( ) . addAll ( index , coll ) | result ;', 'return decorated ( ) . addAll ( index , coll ) | | result ;']","['@ SuppressWarnings ( ""unchecked"" )', '| NoSuchMethodException ie ) {', 'subSet = new HashSet < > ( ) ;', 'subSet = set . getClass ( ) . getDeclaredConstructor ( set . getClass ( ) ) . newInstance ( set ) ;', 'subSet = set . getClass ( ) . newInstance ( ) ;', '| IllegalAccessException', '} catch ( final InstantiationException ie ) {', '} catch ( final InstantiationException', '} catch ( final IllegalAccessException iae ) {', 'import java . lang . reflect . Constructor ;']","['value = null ;', 'protected boolean isValueType ( final ReferenceStrength type ) {', 'boolean purge ( final Reference < ? > ref ) {', 'protected void onPurge ( ) {', 'if ( ( ( ReferenceEntry < K , V > ) entry ) . purge ( ref ) ) {', 'refEntry . onPurge ( ) ;', 'protected boolean purge ( final Reference < ? > ref ) {', 'if ( refEntry . purge ( ref ) ) {', '}', 'nullValue ( ) ;']","['/ /', 'List < String > decoratedList = new ArrayList < > ( ) ;', 'sizeBefore + 1 , fixedSizeList . size ( ) ) ;', 'import org . junit . Assert ;', 'Assert . assertEquals ( ""Modifying an the underlying list is allowed"" ,', '}', 'int sizeBefore = fixedSizeList . size ( ) ;', 'decoratedList . add ( ""item 1"" ) ;', 'FixedSizeList < String > fixedSizeList = FixedSizeList . fixedSizeList ( decoratedList ) ;', 'public void testListAllowsMutationOfUnderlyingCollection ( ) {']","['throw new UnsupportedOperationException ( ""List is fixed size"" ) ;', 'private static UnsupportedOperationException unsupportedOperationException ( ) {', 'throw unsupportedOperationException ( ) ;', '}', 'return new UnsupportedOperationException ( ""List is fixed size"" ) ;']","['array = getCollection ( ) . toArray ( null ) ;', 'array = getCollection ( ) . toArray ( ( Object [ ] ) null ) ;']","['@ Test', '}', '@ Ignore', 'Assert . assertEquals ( list , list . get ( 0 ) ) ;', 'final List < Object > list = SetUniqueList . setUniqueList ( source ) ;', 'final List < Object > source = new ArrayList < > ( ) ;', 'public void testHashSet ( ) {', 'Assert . assertEquals ( 1 , list . size ( ) ) ;', 'import java . util . List ;', 'list . add ( list ) ;']","['public boolean addLast ( Object o ) {', 'public void clear ( ) {', 'return true ;', 'protected CursorableLinkedList list = null ;', 'return super . addAll ( index , c ) ;', 'add ( element ) ;', 'Listable pred = ( null = = succ ? null : succ . prev ( ) ) ;', 'protected void removeListable ( Listable elt ) {', 'Listable cur = head . next ( ) ;', 'return changed ;']","['return ( get ( n - 1 ) ) ;', 'add ( item ) ;', '}', 'if ( n < = 0 )', 'package org . apache . commons . collections ;', 'return ( - 1 ) ;', 'return ( size ( ) = = 0 ) ;', 'public Object push ( Object item ) {', 'if ( o . equals ( get ( i ) ) )', 'return ( remove ( n - 1 ) ) ;']","['assert ( stack . empty ( ) ) ;', 'fail ( ""pop ( ) should have thrown EmptyStackException"" ) ;', 'public void testNew ( ) {', 'public void testSearch ( ) {', 'try {', 'stack . search ( ""First Item"" ) , 2 ) ;', 'stack . pop ( ) ;', '}', 'assertEquals ( ""Top item is \'First Item\'"" ,', 'public void testNewStack ( ) {']","['int m = ( size ( ) - n ) - 1 ;', 'throw new EmptyStackException ( ) ;', 'return ( get ( m ) ) ;', 'if ( m < 0 )', '}', 'public Object peek ( int n ) throws EmptyStackException {', 'else']","['public void clear ( ) {', 'return ( list . indexOf ( element ) ) ;', 'public String toString ( ) {', 'StringBuffer sb = new StringBuffer ( ""FastArrayList [ "" ) ;', 'import java . io . Serializable ;', 'public Iterator iterator ( ) {', 'return ( list . subList ( fromIndex , toIndex ) ) ;', 'public Object [ ] toArray ( ) {', 'return ( list . containsAll ( collection ) ) ;', 'public void add ( int index , Object element ) {']","['setList ( stack ) ;', 'return new ArrayStack ( ) ;', '}', 'public List makeList ( ) {', 'try {', 'public abstract Collection makeCollection ( ) ;', 't . printStackTrace ( ) ;', 'assert ( ""Initial Collection is empty . "" , c . isEmpty ( ) ) ;', 'assert ( ""Collection is still empty . "" , collection . isEmpty ( ) ) ;', 'assert ( ""After Collection . clear ( ) , Collection . isEmpty ( ) should be true . "" , c . isEmpty ( ) ) ;']","['public class FastArrayList implements List , Cloneable , Serializable {', 'results = new FastArrayList ( list ) ;', 'FastArrayList results = null ;', '}', 'results . setFast ( getFast ( ) ) ;', 'int hashCode = 1 ;', 'while ( i . hasNext ( ) ) {', 'hashCode = 31 * hashCode + ( o = = null ? 0 : o . hashCode ( ) ) ;', 'public Object clone ( ) {', '} else {']","['suite . addTest ( TestFastHashMap1 . suite ( ) ) ;', 'suite . addTest ( TestArrayList . suite ( ) ) ;', 'suite . addTest ( TestFastTreeMap1 . suite ( ) ) ;', 'suite . addTest ( TestHashMap . suite ( ) ) ;', 'suite . addTest ( TestTreeMap . suite ( ) ) ;', 'suite . addTest ( TestFastArrayList1 . suite ( ) ) ;', 'public static void main ( String args [ ] )', 'public static Test suite ( )', 'return ( al ) ;', 'try']","['implements Enumeration', 'protected Object [ ] m elements ;', '}', 'm elements = elements ;', 'package org . apache . commons . collections ;', 'public ArrayEnumeration ( final Object [ ] elements )', 'import java . util . Enumeration ;', 'public final class ArrayEnumeration', 'if ( !hasMoreElements ( ) )', 'import java . util . List ;']","['Integer c = ( Integer ) ( count . get ( obj ) ) ;', 'if ( ( null = = obj & & null = = elt ) | | obj . equals ( elt ) ) {', 'for ( int i = 0 , m = Math . max ( getFreq ( obj , mapa ) , getFreq ( obj , mapb ) ) ; i < m ; i + + ) {', 'return true ;', 'return CollectionUtils . isSubCollection ( a , b ) & & ( ! ( CollectionUtils . isEqualCollection ( a , b ) ) ) ;', 'try {', 'public static boolean isProperSubCollection ( final Collection a , final Collection b ) {', 'if ( mapa . size ( ) ! = mapb . size ( ) ) {', '}', 'public static boolean isSubCollection ( final Collection a , final Collection b ) {']","['} catch ( UnsupportedOperationException e ) {', 'boolean added = tryToAdd ( c , ""element1"" ) ;', 'added2 = c . add ( ""element1"" ) ;', 'boolean added2 = tryToAdd ( c , ""element2"" ) ;', 'try {', 'boolean added = false ;', 't . printStackTrace ( ) ;', 'fail ( ""Collection . add should only throw UnsupportedOperationException , ClassCastException or IllegalArgumentException . Found "" + t . toString ( ) ) ;', '} catch ( ClassCastException e ) {', '}']","['if ( added1 ) {', 'try {', 't . printStackTrace ( ) ;', 'assert ( added b = = b . retainAll ( a ) ) ;', 'assert ( b . contains ( ""element2"" ) ) ;', 'assert ( small ! = c . toArray ( small ) ) ;', '}', 'assert ( b . contains ( ""element1"" ) ) ;', 'assert ( !a . retainAll ( a ) ) ;', 'boolean added a1 = a . add ( ""element1"" ) ;']","['throw new IndexOutOfBoundsException ( ) ;', 'throw new IndexOutOfBoundsException ( String . valueOf ( index ) + "" < 0 or "" + String . valueOf ( index ) + "" > = "" + size ) ;', 'throw new IndexOutOfBoundsException ( String . valueOf ( index ) + "" < 0 or "" + String . valueOf ( index ) + "" > "" + size ) ;', 'if ( index < 0 | | index > size ) {', '}']","['}', 'list2 . add ( it . next ( ) ) ;', 'return true ;', 'public void testListAddByIndexBoundsChecking2 ( ) {', 'assertEquals ( lastIndexOfB , list . lastIndexOf ( ""b"" ) ) ;', 'fail ( ""Shouldn\'t get here [ Integer . MAX VALUE ] "" ) ;', '} else if ( ""g"" . equals ( expected [ i ] ) ) {', 'int lastIndexOfB = - 1 ;', 'fail ( ""Shouldn\'t get here [ 0 ] "" ) ;', 'list . add ( index , obj ) ;']","['public ExtendedProperties ( String file , String defaultFile )', 'public ExtendedProperties ( )', 'key + "" doesn\'t map to a String object"" ) ;', '\' \\ \'\' + key + ""\' doesn\'t map to a Float object"" ) ;', 'return getInteger ( key , new Integer ( defaultValue ) ) . intValue ( ) ;', '\' \\ \'\' + key + ""\' doesn\'t map to a Long object"" ) ;', '}', 'try', 'key + "" doesn\'t map to a Vector object"" ) ;', 'load ( input , null ) ;']","['suite . addTest ( TestExtendedProperties . suite ( ) ) ;', 'public static void main ( String args [ ] )', 'public static Test suite ( )', 'return new TestSuite ( TestExtendedProperties . class ) ;', 'public void testRetrieve ( )', 'assertEquals ( ""This returns null"" , eprop . getProperty ( ""foo"" ) , null ) ;', '}', 'import junit . framework . TestCase ;', 'public TestExtendedProperties ( String testName )', 'package org . apache . commons . collections ;']","['final Comparable [ ] elements =', 'final Comparable [ ] elements =', 'new Comparable [ m elements . length * 2 ] ;', 'new Comparable [ m elements . length * 2 ] ;', 'if ( child ! = m size & &', 'if ( child ! = m size & &', 'public final class BinaryHeap', 'public final class BinaryHeap']","['import java . util . Stack ;', 'import java . util . LinkedList ;', 'import java . lang . UnsupportedOperationException ;']","['fail ( ""Shouldn\'t get here [ 1 ] "" ) ;', 'fail ( ""List . add should throw IndexOutOfBoundsException [ Integer . MAX VALUE ] "" ) ;', 'fail ( ""Shouldn\'t get here [ 2 ] "" ) ;', 'public void testListSetByIndexBoundsChecking2 ( ) {', 'fail ( ""Shouldn\'t get here [ - 1 ] "" ) ;', 'assert ( ( i! = ( values . length - 1 ) ) = = iter . hasNext ( ) ) ;', 'fail ( ""Shouldn\'t get here [ 0 ] "" ) ;', 'fail ( ""List . set should throw IndexOutOfBoundsException [ 2 ] "" ) ;', 'fail ( ""Shouldn\'t get here [ Integer . MAX VALUE ] "" ) ;', 'for ( int i = values . length - 1 ; i > = 0 ; i - - ) {']","['}', 'package org . apache . commons . collections ;', 'public ArrayIterator ( Object [ ] array ) {', 'return + + index > = 0 & & index < array . length ;', 'public class ArrayIterator implements Iterator {', 'private Object [ ] array ;', 'this . array = array ;', 'public void remove ( ) {', 'public boolean hasNext ( ) {', 'public Object next ( ) {']","['public void setUp ( ) {', 'map = ( HashMap ) makeMap ( ) ;', 'public static void main ( String args [ ] ) {', 'public static Test suite ( ) {', '}', 'import junit . framework . TestCase ;', 'package org . apache . commons . collections ;', 'public class TestLRUMap extends TestHashMap', 'import java . util . Map ;', 'junit . textui . TestRunner . main ( testCaseName ) ;']","['keysAsListed . add ( key ) ;', 'put ( key , obj ) ;', '}', 'c . addPropertyDirect ( newKey , get ( key ) ) ;', 'put ( key , token ) ;', 'addPropertyDirect ( key , token ) ;', 'put ( key , token ) ;', 'private void addPropertyDirect ( String key , Object obj )', '{', 'keysAsListed . add ( key ) ;']","['}', '}', 'package org . apache . commons . collections ;', 'package org . apache . commons . collections ;', 'public ArrayIterator ( Object [ ] array ) {', 'public ArrayIterator ( Object [ ] array ) {', 'return + + index > = 0 & & index < array . length ;', 'public class ArrayIterator implements Iterator {', 'public class ArrayIterator implements Iterator {', 'private Object [ ] array ;']","['public static List intersection ( final List list1 , final List list2 )', 'public static List intersection ( final List list1 , final List list2 )', 'public static List subtract ( final List list1 , final List list2 )', 'public static List subtract ( final List list1 , final List list2 )', 'public static List union ( final List list1 , final List list2 )', 'public static List union ( final List list1 , final List list2 )', 'return subtract ( union ( list1 , list2 ) ,', 'return subtract ( union ( list1 , list2 ) ,', 'while ( iterator . hasNext ( ) )', 'while ( iterator . hasNext ( ) )']","['Entry e = ( Entry ) i . next ( ) ;', 'Map . Entry e = ( Map . Entry ) i . next ( ) ;', 'Entry e = ( Entry ) i . next ( ) ;', 'Map . Entry e = ( Map . Entry ) i . next ( ) ;']","['Iterator i = list . iterator ( ) ;', 'java . util . Iterator i = list . iterator ( ) ;', 'Iterator i = map . entrySet ( ) . iterator ( ) ;', 'java . util . Iterator i = map . entrySet ( ) . iterator ( ) ;', 'Iterator i = map . entrySet ( ) . iterator ( ) ;', 'java . util . Iterator i = map . entrySet ( ) . iterator ( ) ;']","['return outputCollection ;', 'public static void select ( Collection inputCollection , Predicate predicate , Collection outputCollection ) {', 'public static Collection select ( Collection inputCollection , Predicate predicate , Collection outputCollection ) {']","['}', 'throw new NoSuchElementException ( ) ;', 'package org . apache . commons . collections ;', '}', 'public ArrayIterator ( Object [ ] array ) {', 'package org . apache . commons . collections ;', 'public class ArrayIterator implements Iterator {', 'public ArrayIterator ( Object [ ] array ) {', 'private Object [ ] array ;', 'public class ArrayIterator implements Iterator {']","['assert ( ""NoSuchElementException must be thrown"" ,', 'assertTrue ( ""NoSuchElementException must be thrown"" ,', 'assert ( ""Iterator should now be empty"" , ! iter . hasNext ( ) ) ;', 'assertTrue ( ""Iterator should now be empty"" , ! iter . hasNext ( ) ) ;', 'assert ( ""New list is empty"" , list . isEmpty ( ) ) ;', 'assertTrue ( ""New list is empty"" , list . isEmpty ( ) ) ;', 'assert ( ""Stack is not empty"" , !stack . empty ( ) ) ;', 'assertTrue ( ""Stack is not empty"" , !stack . empty ( ) ) ;', 'assert ( ""New stack is empty"" , stack . empty ( ) ) ;', 'assertTrue ( ""New stack is empty"" , stack . empty ( ) ) ;']","['throw new NoSuchElementException ( ) ;', '}', 'package org . apache . commons . collections ;', 'public void remove ( ) {', 'public boolean hasNext ( ) {', 'return answer ;', 'public SingletonIterator ( Object object ) {', 'import java . util . NoSuchElementException ;', 'throw new UnsupportedOperationException ( ""remove ( ) is not supported by this iterator"" ) ;', 'public Object next ( ) {']","['suite . addTest ( TestCollectionUtils . suite ( ) ) ;', 'suite . addTest ( TestSingletonIterator . suite ( ) ) ;', 'suite . addTest ( TestExtendedProperties . suite ( ) ) ;', 'suite . addTest ( TestCollectionUtils . suite ( ) ) ;', 'suite . addTest ( TestExtendedProperties . suite ( ) ) ;']","['return ( index < array . length ) ;', 'public Object getArray ( ) {', 'private Object [ ] array ;', 'return Array . get ( array , index + + ) ;', 'return array [ index + + ] ;', 'private Object array ;', 'public void setArray ( Object [ ] array ) {', 'import java . lang . reflect . Array ;', 'public Object [ ] getArray ( ) {', 'return index < Array . getLength ( array ) ;']","['public Object getArray ( ) {', 'private Object [ ] array ;', 'return Array . get ( array , index + + ) ;', 'return array [ index + + ] ;', 'private Object array ;', 'public void setArray ( Object [ ] array ) {', 'import java . lang . reflect . Array ;', 'public Object [ ] getArray ( ) {', 'return index < Array . getLength ( array ) ;', 'public ArrayIterator ( Object [ ] array ) {']","['private Object [ ] array ;', 'public Object getArray ( ) {', 'return array [ index + + ] ;', 'return Array . get ( array , index + + ) ;', 'public void setArray ( Object [ ] array ) {', 'private Object array ;', 'public Object [ ] getArray ( ) {', 'import java . lang . reflect . Array ;', 'public ArrayIterator ( Object [ ] array ) {', 'return index < Array . getLength ( array ) ;']","['public void clear ( ) {', 'result = map . equals ( ( ( AbstractBag ) o ) . getMap ( ) ) ;', 'support = support ;', 'total = 0 ;', 'map . clear ( ) ;', 'int otherCount = other . getCount ( current ) ;', 'return map ;', 'public Iterator iterator ( ) {', 'return changed ;', 'private Map map = null ;']","['public void setEnumeration ( Enumeration enumeration ) {', 'public class EnumerationIterator implements Iterator {', 'import java . util . Iterator ;', 'private Enumeration enumeration ;', 'import java . util . Enumeration ;', 'public EnumerationIterator ( ) {', 'return enumeration . nextElement ( ) ;', 'this . collection = collection ;', 'public class EnumerationIterator implements Iterator {', 'throw new IllegalStateException']","['else if ( obj ! = null & & obj . getClass ( ) . isArray ( ) ) {', 'int idx = - 1 ;', 'return ( ( List ) obj ) . get ( idx ) ;', 'return ( Iterator ) obj ;', 'while ( j > i ) {', '}', 'if ( obj instanceof Map ) {', 'return enum . nextElement ( ) ;', 'else if ( obj instanceof Enumeration ) {', 'public static Object index ( Object obj , int idx ) {']","['} else {', 'String columnName = metadata . getColumnName ( i ) ;', 'name = metadata . getColumnName ( i ) . toLowerCase ( ) ;', '}', 'if ( lowerCase ) {', '} else {', 'String name = null ;', 'columnNameXref . put ( name , columnName ) ;', 'name = metadata . getColumnName ( i ) ;', 'String name = lowerCase ? columnName . toLowerCase ( ) : columnName ;']","['}', 'protected abstract Class getDefaultType ( ) ;', 'this ( defaultType ) ;', 'public AbstractConverter ( Object defaultValue ) {', 'return defaultType ;', 'public AbstractConverter ( ) {', 'throw new IllegalArgumentException ( ""Default type is missing . "" ) ;', 'this . defaultType = defaultType ;', 'private Class defaultType = null ;', 'if ( defaultType = = null ) {']","['readMethod = MethodUtils . getAccessibleMethod ( readMethod ) ;', 'return ( MethodUtils . getAccessibleMethod ( clazz , descriptor . getWriteMethod ( ) ) ) ;', 'Method writeMethod = getWriteMethod ( descriptor ) ;', '}', 'writeMethod = MethodUtils . getAccessibleMethod ( writeMethod ) ;', 'Method readMethod = getReadMethod ( bean . getClass ( ) , descriptor ) ;', 'Method readMethod = getReadMethod ( descriptor ) ;', 'Method getWriteMethod ( Class clazz , PropertyDescriptor descriptor ) {', 'Method readMethod = getReadMethod ( desc ) ;', 'readMethod = MethodUtils . getAccessibleMethod ( bean . getClass ( ) , readMethod ) ;']","['return mappedPropertyType ;', 'paramTypes = new Class [ ] { String . class , ( Class ) writeParamTypeRef . get ( ) } ;', 'private Method mappedReadMethod ;', 'private Reference writeParamTypeRef ;', 'private Method mappedWriteMethod ;', 'writeParamTypeRef = new WeakReference ( types [ 1 ] ) ;', 'return mappedReadMethod ;', 'if ( writeParamTypeRef ! = null ) {', 'mappedWriteMethod = mappedSetter ;', 'mappedWriteMethodRef = new MappedMethodReference ( mappedSetter ) ;']","['} catch ( Throwable t ) {', '}', 'private Class reLoadClass ( ) {', 'return null ;', 'try {', 'if ( clazz = = null ) {', 'if ( clazz ! = null ) {', 'clazz = reLoadClass ( ) ;', 'return classLoader . loadClass ( className ) ;', 'if ( classLoader ! = null ) {']","['if ( posDouble < Float . MIN VALUE | | posDouble > Float . MAX VALUE ) {', 'if ( posDouble ! = 0 & & posDouble < Float . MIN VALUE | | posDouble > Float . MAX VALUE ) {']","['} else if ( target . getClass ( ) . isArray ( ) & & index > = 0 ) {', 'type = Array . get ( target , index ) . getClass ( ) ;']","['return ( ( List ) bean ) . get ( index ) ;', 'Method getWriteMethod ( Class < ? > clazz , PropertyDescriptor descriptor ) {', 'protected void setPropertyOfMapBean ( Map bean , String propertyName , Object value )', 'private WeakFastHashMap < Class < ? > , PropertyDescriptor [ ] > descriptorsCache = null ;', 'Class [ ] parTypes = method . getParameterTypes ( ) ;', 'return mappedDescriptorsCache . get ( beanClass ) ;', 'return ( ( java . util . List ) value ) . get ( index ) ;', 'public FastHashMap getMappedPropertyDescriptors ( Class < ? > beanClass ) {', 'getPropertyDescriptors ( Class beanClass ) {', 'Class < ? > [ ] parameterTypes = methods [ j ] . getParameterTypes ( ) ;']","['private final Map mapped = new HashMap ( ) ;', 'private final Map < String , Object > mapped = new HashMap < String , Object > ( ) ;']","['Map result = null ;', '@ SuppressWarnings ( ""unused"" )', 'Map < String , String > result = null ;', 'private static final long serialVersionUID = 1L ;']","['result = m2 . invoke ( bean , null ) ;', 'result = m2 . invoke ( bean ) ;']","['Map properties = new HashMap ( ) ;', 'private Comparator < ? > comparator ;', 'private Comparator comparator ;', 'public Comparator < ? > getComparator ( ) {', 'public void setComparator ( Comparator comparator ) {', 'public void setComparator ( Comparator < ? > comparator ) {', 'public Comparator getComparator ( ) {', 'Map < String , Object > properties = new HashMap < String , Object > ( ) ;']","['Class beanClass = loader . loadClass ( className ) ;', 'import java . util . ArrayList ;', 'SoftReference ref = new SoftReference ( new Object ( ) ) ;', 'SoftReference < Object > ref = new SoftReference < Object > ( new Object ( ) ) ;', 'java . util . ArrayList list = new java . util . ArrayList ( ) ;', 'ArrayList < Object > list = new ArrayList < Object > ( ) ;', 'Object bean = beanClass . newInstance ( ) ;', 'beanClass . newInstance ( ) ;', 'Class < ? > beanClass = loader . loadClass ( className ) ;']","['private void checkReadMethod ( String propertyName , Class expectedDeclaringClass ) throws Exception {', 'private void checkReadMethod ( String propertyName , Class < ? > expectedDeclaringClass ) throws Exception {']","['Class [ ] runtimeClasses = new Class [ ] { TestObjectSubclass . class } ;', 'Class < ? > [ ] runtimeClasses = new Class < ? > [ ] { TestObjectSubclass . class } ;', 'Class target = TestServiceBean . class ;', 'Class < ? > target = TestServiceBean . class ;']","['Class propertyType = PropertyUtils . getPropertyType ( bean , ""file [ 0 ] "" ) ;', '@ SuppressWarnings ( ""rawtypes"" )', 'Class < ? > propertyType = PropertyUtils . getPropertyType ( bean , ""file [ 0 ] "" ) ;', '@ SuppressWarnings ( ""unchecked"" )']","['Map source = new HashMap ( ) ;', 'Map < String , Object > source = new HashMap < String , Object > ( ) ;']","['WeakReference weakRefToComponent = new WeakReference ( componentLoader ) ;', 'private void forceGarbageCollection ( WeakReference < ? > target ) {', 'WeakReference weakRefToComponent1 = new WeakReference ( componentLoader1 ) ;', 'WeakReference < ClassLoader > ref = new WeakReference < ClassLoader > ( componentLoader ) ;', 'WeakReference ref = new WeakReference ( componentLoader ) ;', 'WeakReference < ClassLoader > weakRefToComponent = new WeakReference < ClassLoader > ( componentLoader ) ;', 'import org . apache . commons . beanutils . ConvertUtils ;', 'import org . apache . commons . beanutils . ConvertUtils ;', 'Class newFloatConverterClass = componentLoader . reload ( FloatConverter . class ) ;', 'WeakReference < ClassLoader > weakRefToComponent1 = new WeakReference < ClassLoader > ( componentLoader1 ) ;']","['private final ContextClassLoaderLocal ccll ;', 'Map < Object , Object > map = new WeakHashMap < Object , Object > ( ) ;', 'WeakReference convertUtilsReference = new WeakReference ( thread . convertUtils ) ;', 'public < T > T convert ( Class < T > type , Object value ) {', 'WeakReference loaderReference = new WeakReference ( loader ) ;', 'import junit . framework . TestCase ;', 'import junit . framework . TestCase ;', 'WeakReference < ConvertUtilsBean > convertUtilsReference = new WeakReference < ConvertUtilsBean > ( thread . convertUtils ) ;', 'WeakReference reference = new WeakReference ( loader ) ;', 'ContextClassLoaderLocal < Integer > ccll = new ContextClassLoaderLocal < Integer > ( ) ;']","['String inKey = ( String ) inKeys . next ( ) ;', 'inMap = new HashMap < String , Object > ( ) ;', 'private Map inMap = null ;', 'Iterator < String > outKeys = inMap . keySet ( ) . iterator ( ) ;', 'inStrs = new HashMap ( ) ;', 'String inKey = inKeys . next ( ) ;', 'private Map inStrs = null ;', 'import junit . framework . TestCase ;', 'import junit . framework . TestCase ;', 'Iterator < String > inKeys = inMap . keySet ( ) . iterator ( ) ;']","['( String ) map . get ( ""doubleProperty"" ) ) ;', 'assertEquals ( ""BEFORE"" , ""sub - value - 3"" , ( ( Map < ? , ? > ) bean . getMapProperty ( ) . get ( ""mappedMap"" ) ) . get ( ""sub - key - 3"" ) ) ;', '( String ) map . get ( ""intProperty"" ) ) ;', 'Map < String , Object > origMap = new HashMap < String , Object > ( ) ;', '( String ) map . get ( ""stringProperty"" ) ) ;', 'map . get ( ""doubleProperty"" ) ) ;', '( String ) map . get ( ""floatProperty"" ) ) ;', 'Map < String , Object > changedMap = new HashMap < String , Object > ( ) ;', 'protected void checkMap ( Map actual , Map expected ) {', 'Map < String , Object > map = new HashMap < String , Object > ( ) ;']","['Constructor ctor = ConstructorUtils . getAccessibleConstructor ( TestBean . class , types ) ;', 'Constructor < ? > ctor = ConstructorUtils . getAccessibleConstructor ( TestBean . class , types ) ;', 'Constructor c1 = TestBean . class . getDeclaredConstructor ( types ) ;', 'Class < ? > [ ] types = { Boolean . TYPE , Boolean . TYPE , String . class } ;', 'Class [ ] types = { Float . class , String . class } ;', 'Constructor < ? > ctor = ConstructorUtils . getAccessibleConstructor ( TestBean . class , Integer . class ) ;', 'Constructor ctor = ConstructorUtils . getAccessibleConstructor ( TestBean . class , Integer . TYPE ) ;', 'Constructor < ? > ctor = ConstructorUtils . getAccessibleConstructor ( TestBean . class , Integer . TYPE ) ;', 'Constructor c1 = TestBean . class . getConstructor ( types ) ;', 'Constructor < ? > ctor = ConstructorUtils . getAccessibleConstructor ( c1 ) ;']","['HashMap mapProperty = new HashMap ( ) ;', 'Map < String , Object > origMap = new HashMap < String , Object > ( ) ;', 'List listIndexed = new ArrayList ( ) ;', 'protected void checkMap ( Map < ? , ? > actual , Map < ? , ? > expected ) {', 'Map map = null ;', 'Map < String , Object > map = null ;', 'checkMap ( ( Map ) bean . get ( ""mapProperty"" ) , origMap ) ;', 'HashMap < String , Object > mappedProperty = new HashMap < String , Object > ( ) ;', 'protected void checkMap ( Map actual , Map expected ) {', 'Map < String , Object > changedMap = new HashMap < String , Object > ( ) ;']","['HashMap mapProperty = new HashMap ( ) ;', 'HashMap < String , Object > mappedObjects = new HashMap < String , Object > ( ) ;', 'List listIndexed = new ArrayList ( ) ;', 'Map < String , Object > map = null ;', 'Map map = null ;', 'HashMap < String , Object > mappedProperty = new HashMap < String , Object > ( ) ;', 'Object value = null ;', 'import junit . framework . TestCase ;', 'import junit . framework . TestCase ;', 'PropertyUtils . getSimpleProperty ( bean ,']","['import junit . framework . TestCase ;', 'import junit . framework . TestCase ;', 'Iterator rows = dynaClass . iterator ( ) ;', 'Iterator < ? > rows = dynaClass . iterator ( ) ;', 'Iterator < DynaBean > rows = dynaClass . iterator ( ) ;']","['DynaBean row = ( DynaBean ) rows . get ( 2 ) ;', 'List < DynaBean > rows = limitedDynaClass . getRows ( ) ;', 'List rows = limitedDynaClass . getRows ( ) ;', 'DynaBean firstRow = inconsistentDynaClass . getRows ( ) . get ( 0 ) ;', 'List rows = dynaClass . getRows ( ) ;', 'DynaBean row = rows . get ( 2 ) ;', 'Class expectedType = null ;', 'List < DynaBean > rows = dynaClass . getRows ( ) ;', 'DynaBean firstRow = ( DynaBean ) inconsistentDynaClass . getRows ( ) . get ( 0 ) ;', 'Class < ? > expectedType = null ;']","['public class ExtendMapBean extends Hashtable {', 'public class ExtendMapBean extends Hashtable < Object , Object > {']","['import java . util . ArrayList ;', 'import java . util . ArrayList ;', 'private ArrayList arrayList ;', 'private List < Object > newList ;', 'private List testList ;', 'testList = new ArrayList < String > ( ) ;', 'testList = new ArrayList ( ) ;', 'private List < String > testList ;', 'newList = new ArrayList ( ) ;', 'private ArrayList < Object > arrayList ;']","['private final Map myMap = new HashMap ( ) ;', 'private final Map < Object , Object > myMap = new HashMap < Object , Object > ( ) ;', 'private final Map map = new HashMap ( ) ;', 'public Map < Object , Object > getMyMap ( ) {', 'public Map getMyMap ( ) {', 'private final Map < Object , Object > map = new HashMap < Object , Object > ( ) ;']","['String inKey = ( String ) inKeys . next ( ) ;', 'inMap = new HashMap < String , Object > ( ) ;', 'private Map inMap = null ;', 'inDyna = dynaClass . newInstance ( ) ;', 'import java . util . Iterator ;', 'inDyna . set ( e . getKey ( ) , e . getValue ( ) ) ;', 'while ( outKeys . hasNext ( ) ) {', 'import junit . framework . TestCase ;', 'outDyna . set ( outKey , inMap . get ( outKey ) ) ;', 'for ( Map . Entry < String , Object > e : inMap . entrySet ( ) ) {']","['protected Object getPropertyOfMapBean ( Map bean , String propertyName )', 'protected void setPropertyOfMapBean ( Map < String , Object > bean , String propertyName , Object value )', 'protected void setPropertyOfMapBean ( Map bean , String propertyName , Object value )', 'protected Object getPropertyOfMapBean ( Map < ? , ? > bean , String propertyName )', 'import java . util . Map ;', 'import java . util . Map ;']","['public Object getObject ( String columnName , Map map ) throws SQLException {', 'Class < ? > [ ] interfaces = new Class [ ] { ResultSet . class } ;', 'Class [ ] interfaces = new Class [ ] { ResultSet . class } ;', 'public Object getObject ( String columnName , Map < ? , ? > map ) throws SQLException {', 'public Object getObject ( int columnIndex , Map map ) throws SQLException {', 'public Object getObject ( int columnIndex , Map < ? , ? > map ) throws SQLException {', 'Class [ ] interfaces = new Class [ ] { ResultSetMetaData . class } ;', 'Class < ? > [ ] interfaces = new Class [ ] { ResultSetMetaData . class } ;']","['public Object convert ( Class type , Object value ) {', 'public < T > T convert ( Class < T > type , Object value ) {']","['assertEquals ( new Integer ( 12345 ) , LocaleConvertUtils . convert ( bean . toString ( ) , beanClass , Locale . US , ""# , ###"" ) ) ;', 'assertEquals ( new Integer ( 12345 ) , LocaleConvertUtils . convert ( bean . toString ( ) , Integer . class , Locale . US , ""# , ###"" ) ) ;']","['import org . apache . commons . collections . set . UnmodifiableSet ;', '@ SuppressWarnings ( { ""unchecked"" , ""rawtypes"" } )', 'return UnmodifiableSet . decorate ( readMethods . keySet ( ) ) ;', 'return Collections . unmodifiableSet ( ( Set ) readMethods . keySet ( ) ) ;', '@ SuppressWarnings ( ""unchecked"" )']","['void introspect ( IntrospectionContext icontext )', 'throws IntrospectionException ;', '}', 'public interface BeanIntrospector {', 'package org . apache . commons . beanutils ;', 'import java . beans . IntrospectionException ;', 'beanInfo = Introspector . getBeanInfo ( icontext . getTargetClass ( ) ) ;', 'IndexedPropertyDescriptor descriptor = ( IndexedPropertyDescriptor ) pd ;', '""Error setting indexed property read method"" ,', 'try {']","['public String getWriteMethodPrefix ( ) {', 'public FluentPropertyBeanIntrospector ( ) {', 'try {', '+ ""! Ignoring this property . "" , e ) ;', '}', 'public void introspect ( IntrospectionContext icontext )', 'String methodName = m . getName ( ) . substring (', '. toLowerCase ( Locale . ENGLISH ) ;', 'String propertyName ) throws IntrospectionException {', 'package org . apache . commons . beanutils ;']","['import java . lang . reflect . InvocationTargetException ;', 'import java . lang . reflect . InvocationTargetException ;']","['public class BeanComparator < B > implements Comparator < B > , Serializable {', 'public int compare ( T o1 , T o2 ) {', 'public int compare ( B o1 , B o2 ) {', 'public class BeanComparator < T > implements Comparator < T > , Serializable {']","['private static final Map < Class < ? extends Object > , Transformer > typeTransformers = Collections . unmodifiableMap ( createTypeTransformers ( ) ) ;', 'Collections . unmodifiableMap ( createTypeTransformers ( ) ) ;', 'Map < Class < ? extends Object > , Transformer > defaultTransformers = new HashMap < Class < ? extends Object > , Transformer > ( ) ;', 'new HashMap < Class < ? extends Object > , Transformer > ( ) ;', 'private static final Map < Class < ? extends Object > , Transformer > typeTransformers =', 'Map < Class < ? extends Object > , Transformer > defaultTransformers =', 'import org . apache . commons . beanutils . ConversionException ;']","['value = convert ( value , type ) ;', 'return ( value ! = null ) ? convert ( value , type ) : value ;', 'value = convert ( value , type . getComponentType ( ) ) ;', 'value = convertForCopy ( value , type . getComponentType ( ) ) ;', '}', 'private Object convertForCopy ( Object value , Class < ? > type ) {', 'value = convertForCopy ( value , type ) ;', 'public Date getCreatedAt ( ) {', 'public class Jira454TestCase extends TestCase {', 'this . createdAt = createdAt ;']","['StringBuffer sb = new StringBuffer ( "" copyProperty ( "" ) ;', 'StringBuilder sb = new StringBuilder ( "" setProperty ( "" ) ;', 'StringBuffer sb = new StringBuffer ( "" setProperty ( "" ) ;', 'StringBuilder sb = new StringBuilder ( "" copyProperty ( "" ) ;', 'StringBuffer sb = new StringBuffer ( ""DynaProperty [ name = "" ) ;', 'StringBuilder sb = new StringBuilder ( ""DynaProperty [ name = "" ) ;', 'StringBuffer buffer = new StringBuffer ( ) ;', 'StringBuilder buffer = new StringBuilder ( 45 ) ;', 'StringBuffer buffer = new StringBuffer ( 45 ) ;', 'StringBuilder buffer = new StringBuilder ( ) ;']","['public static void resetBeanIntrospectors ( ) {', 'PropertyUtilsBean . getInstance ( ) . resetBeanIntrospectors ( ) ;', '}', 'introspectors . add ( DefaultBeanIntrospector . INSTANCE ) ;', 'introspectors . clear ( ) ;', 'public final void resetBeanIntrospectors ( ) {', '}', 'introspectors . add ( DefaultBeanIntrospector . INSTANCE ) ;', 'resetBeanIntrospectors ( ) ;', 'String propName = ( String ) it . next ( ) ;']","['this . instance = instance ;', 'this . dynaClass = ( cls ! = null ) ? cls : ( WrapDynaClass ) getDynaClass ( ) ;', 'this . dynaClass = ( WrapDynaClass ) getDynaClass ( ) ;', '}', 'super ( ) ;', 'public WrapDynaBean ( Object instance , WrapDynaClass cls ) {', 'this . instance = instance ;', 'this ( instance , null ) ;', 'checkSimplePropertyAccess ( ) ;', 'assertSame ( ""Wrong DynaClass"" , clazz , bean . getDynaClass ( ) ) ;']","['value = PropertyUtils . getMappedProperty ( instance , name , key ) ;', 'propUtils = dynaClass . getPropertyUtilsBean ( ) ;', 'PropertyUtils . setMappedProperty ( instance , name , key , value ) ;', 'return ( propUtils ! = null ) ? propUtils : PropertyUtilsBean . getInstance ( ) ;', 'PropertyUtils . setIndexedProperty ( instance , name , index , value ) ;', 'getPropertyUtils ( ) . setIndexedProperty ( instance , name , index , value ) ;', 'PropertyUtils . setSimpleProperty ( instance , name , value ) ;', 'getPropertyUtils ( ) . setSimpleProperty ( instance , name , value ) ;', 'value = PropertyUtils . getIndexedProperty ( instance , name , index ) ;', '}']","['descriptors = descs ;', 'class BeanIntrospectionData {', 'import java . beans . PropertyDescriptor ;', 'public PropertyDescriptor [ ] getDescriptors ( ) {', '}', 'public BeanIntrospectionData ( PropertyDescriptor [ ] descs ) {', 'return descriptors ;', 'package org . apache . commons . beanutils ;', 'private final PropertyDescriptor [ ] descriptors ;']","['private PropertyDescriptor [ ] fetchPropertyDescriptors ( Class < ? > beanClass ) {', 'return data ;', 'return ictx . getPropertyDescriptors ( ) ;', 'private BeanIntrospectionData fetchIntrospectionData ( Class < ? > beanClass ) {', 'private WeakFastHashMap < Class < ? > , PropertyDescriptor [ ] > descriptorsCache = null ;', 'descriptorsCache = new WeakFastHashMap < Class < ? > , BeanIntrospectionData > ( ) ;', 'descriptorsCache . get ( beanClass ) ;', 'private WeakFastHashMap < Class < ? > , BeanIntrospectionData > descriptorsCache = null ;', 'if ( descriptors ! = null ) {', 'return new BeanIntrospectionData ( ictx . getPropertyDescriptors ( ) ) ;']","['public PropertyDescriptor getDescriptor ( String name ) {', 'return null ;', '}', 'return pd ;', 'for ( PropertyDescriptor pd : getDescriptors ( ) ) {', 'if ( name . equals ( pd . getName ( ) ) ) {', 'return ( descriptors [ i ] ) ;', 'return result ;', 'if ( descriptors ! = null ) {', 'BeanIntrospectionData data = getIntrospectionData ( bean . getClass ( ) ) ;']","['for ( PropertyDescriptor pd : descs ) {', 'if ( method = = null ) {', 'if ( method ! = null ) {', 'try {', '}', 'desc . setWriteMethod ( method ) ;', 'import java . lang . reflect . Method ;', 'private static Map < String , String > setUpWriteMethodNames ( PropertyDescriptor [ ] descs ) {', 'import java . util . Map ;', 'Method method = desc . getWriteMethod ( ) ;']","['return ( MethodUtils . getAccessibleMethod ( clazz , descriptor . getWriteMethod ( ) ) ) ;', 'data . getWriteMethod ( clazz , descriptor ) ) ) ;', 'return ( MethodUtils . getAccessibleMethod ( clazz ,', 'BeanIntrospectionData data = getIntrospectionData ( clazz ) ;', '}', 'import junit . framework . TestCase ;', '@ Override', 'protected void setUp ( ) throws Exception {', 'import org . apache . commons . beanutils . FluentIntrospectionTestBean ;', 'private PropertyUtilsBean pub ;']","['Method getWriteMethod ( Class < ? > clazz , PropertyDescriptor descriptor ) {', 'public Method getWriteMethod ( Class < ? > clazz , PropertyDescriptor descriptor ) {']","['public SuppressPropertiesBeanIntrospector ( Collection < String > propertiesToSuppress ) {', '}', 'return propertyNames ;', 'if ( propertiesToSuppress = = null ) {', 'package org . apache . commons . beanutils ;', 'public void introspect ( IntrospectionContext icontext ) throws IntrospectionException {', 'private final Set < String > propertyNames ;', 'public class SuppressPropertiesBeanIntrospector implements BeanIntrospector {', 'throw new IllegalArgumentException ( ""Property names must not be null!"" ) ;', 'propertyNames = Collections . unmodifiableSet ( new HashSet < String > (']","['public static final SuppressPropertiesBeanIntrospector SUPPRESS CLASS =', 'new SuppressPropertiesBeanIntrospector ( Collections . singleton ( ""class"" ) ) ;', 'try {', 'AlphaBean bean = new AlphaBean ( ) ;', 'import org . apache . commons . beanutils . SuppressPropertiesBeanIntrospector ;', '}', 'bub . getProperty ( bean , ""class"" ) ;', 'import org . apache . commons . beanutils . BeanUtilsBean ;', 'import org . apache . commons . beanutils . AlphaBean ;', 'import junit . framework . TestCase ;']","['return null ;', 'if ( result = = null ) {', '}', 'public class Jira458TestCase extends TestCase {', 'import org . apache . commons . beanutils . locale . converters . IntegerLocaleConverter ;', 'private void checkConversionWithNullDefault ( String input ) {', 'checkConversionWithNullDefault ( """" ) ;', 'Converter converter = new IntegerLocaleConverter ( null , Locale . US ) ;', 'checkConversionWithNullDefault ( null ) ;', 'import java . util . Locale ;']","['return targetType . cast ( new BigDecimal ( value . toString ( ) ) ) ;', '} else if ( value instanceof BigDecimal ) {', 'new Double ( ""12 . 2"" )', 'new Double ( ""12 . 2"" ) ,', '""from Double""', 'new BigDecimal ( ""3200 . 11"" ) ,', 'new BigDecimal ( ""12 . 2"" )', 'private class ExtendingBigDecimal extends BigDecimal {', 'super ( val ) ;', 'private ExtendingBigDecimal ( String val ) {']","['} else if ( index > = 0 & & List . class . isAssignableFrom ( descriptor . getPropertyType ( ) ) ) {', 'import java . util . List ;', 'type = Object . class ;', 'this . foo [ i ] = value ;', 'public void testListProperty ( ) {', 'try {', 'ArrayProp bean = new ArrayProp ( ) ;', 'this . foo . set ( i , value ) ;', 'public void testArrayIndexedProperty ( ) {', 'changeValue ( bean ) ;']","['if ( name . equals ( properties [ j ] ) )', '} else if ( count [ j ] > 1 ) {', 'else if ( count [ j ] > 1 )', 'if ( count [ j ] < 0 ) {', 'if ( count [ j ] < 0 )', '}', 'if ( name . equals ( properties [ j ] ) ) {', 'if ( minorVersion . equals ( ""0"" ) ) return true ;', 'return true ;', 'if ( minorVersion . equals ( ""1"" ) ) return true ;']","['System . out . println ( ""Count "" + count ) ;']","['System . out . println ( ""Count "" + count ) ;', 'System . out . println ( ""Caught "" + ignored ) ;', 'System . out . println ( ""Count "" + count ) ;']","['System . out . println ( ""Count "" + count + "" : "" + getMemoryStats ( ) ) ;', 'System . gc ( ) ;', 'System . out . println ( ""After GC : "" + getMemoryStats ( ) ) ;']","['System . out . println ( ""Count "" + count + "" : "" + getMemoryStats ( ) ) ;', 'System . out . println ( ""After GC1 : "" + getMemoryStats ( ) ) ;', '} catch ( final Throwable ignored ) {', 'System . out . println ( ""Count ( 1 ) "" + count + "" : "" + getMemoryStats ( ) ) ;', 'System . out . println ( ""Caught "" + ignored ) ;', '} catch ( final OutOfMemoryError ignored ) {', 'System . out . println ( ""After GC : "" + getMemoryStats ( ) ) ;', 'System . out . println ( ""Count ( 2 ) "" + count + "" : "" + getMemoryStats ( ) ) ;', 'System . out . println ( ""After GC2 : "" + getMemoryStats ( ) ) ;']","['if ( ref . get ( ) ! = null ) {', 'System . out . println ( ""After GC2 : "" + getMemoryStats ( ) + "" Count "" + count ) ;', 'System . out . println ( ""After GC2 : "" + getMemoryStats ( ) ) ;', 'final boolean isNotNull = ref . get ( ) ! = null ;', 'System . out . println ( ""Count "" + count ) ;', 'if ( isNotNull ) {', 'System . out . println ( ""Count "" + count + "" "" + isNotNull ) ;']","['final String key = properties [ i ] . getName ( ) ;', 'for ( DynaProperty propertie : properties ) {', 'final K key = convertKey ( properties [ i ] . getName ( ) ) ;', 'set . add ( convertKey ( propertie . getName ( ) ) ) ;', 'for ( int i = 0 ; i < properties . length ; i + + ) {', 'final Object value = getDynaBean ( ) . get ( propertie . getName ( ) ) ;', 'final Object value = getDynaBean ( ) . get ( properties [ i ] . getName ( ) ) ;', 'final K key = convertKey ( propertie . getName ( ) ) ;', 'set . add ( convertKey ( properties [ i ] . getName ( ) ) ) ;', 'final String key = propertie . getName ( ) ;']","['final DynaBean row = ( DynaBean ) rows . next ( ) ;', 'final DynaBean row = rows . next ( ) ;', 'final LazyDynaBean [ ] array = ( LazyDynaBean [ ] ) list . toArray ( new LazyDynaBean [ 0 ] ) ;', 'final LazyDynaBean [ ] array = list . toArray ( new LazyDynaBean [ 0 ] ) ;']","['import junit . framework . TestCase ;', 'import junit . framework . TestCase ;', 'import java . util . StringTokenizer ;']","['LocaleBeanUtilsBean . getInstance ( ) . getPropertyUtils ( ) . clearDescriptors ( ) ;', 'BeanUtilsBean . getInstance ( ) . getPropertyUtils ( ) . clearDescriptors ( ) ;']","['BeanUtilsBean . getInstance ( ) . getPropertyUtils ( ) . clearDescriptors ( ) ;', 'LocaleBeanUtilsBean . getLocaleBeanUtilsInstance ( ) . getPropertyUtils ( ) . clearDescriptors ( ) ;']","['return ( methodName . length ( ) > 1 ) ? Character . toLowerCase ( methodName', 'return ( methodName . length ( ) > 1 ) ? Introspector . decapitalize ( methodName ) : methodName', '. charAt ( 0 ) ) + methodName . substring ( 1 ) : methodName', 'import java . beans . Introspector ;', 'assertNotNull ( ""No read method for uri"" , aDescriptor . getReadMethod ( ) ) ;', '}', 'assertNotNull ( ""missing property"" , aDescriptor ) ;', 'assertNotNull ( ""No write method for uri"" , aDescriptor . getWriteMethod ( ) ) ;', 'assertNull ( ""Should not find mis - capitalized property"" , props . get ( ""uRI"" ) ) ;', 'private URI mURI ;']","['log . warn ( ""Error when creating PropertyDescriptor for "" + m', '+ ""! Ignoring this property . "" ) ;', '+ ""! Ignoring this property . "" , e ) ;', 'log . info ( ""Error when creating PropertyDescriptor for "" + m', 'log . debug ( ""Exception is : "" , e ) ;']","['( IndexedPropertyDescriptor ) propertyUtilsBean . getPropertyDescriptor ( bean , ""arrayList"" ) ;', 'final PropertyDescriptor descriptor =', 'assertEquals ( ""Not IndexedPropertyDescriptor"" ,', 'private static final String BEANUTILS 492 = ""BEANUTILS - 492 : IndexedPropertyDescriptor not supported for List in Java 8"" ;', 'private static final Log log = LogFactory . getLog ( IndexedPropertyTestCase . class ) ;', 'private static final Log log = LogFactory . getLog ( IndexedPropertyTestCase . class ) ;', 'try {', '( PropertyDescriptor ) propertyUtilsBean . getPropertyDescriptor ( bean , ""arrayList"" ) ;', 'import org . apache . commons . logging . LogFactory ;', 'import org . apache . commons . logging . LogFactory ;']","['final List < ? > list = ( List < ? > ) value ;', 'final List < ? > list = ( List < ? > ) value ;', 'beanUtilsBean . getProperty ( bean , ""stringList"" ) ) ;', 'public void testArrayListReadMethod ( ) throws Exception {', 'public void testSetArray ( ) {', 'beanUtilsBean . getProperty ( bean , ""stringList"" ) ) ;', 'final PropertyDescriptor descriptor = propertyUtilsBean . getPropertyDescriptor ( bean , ""stringList"" ) ;', 'final PropertyDescriptor descriptor = propertyUtilsBean . getPropertyDescriptor ( bean , ""stringList"" ) ;', 'assertNotNull ( ""No ArrayList Read Method"" , descriptor . getReadMethod ( ) ) ;', 'assertNotNull ( ""No ArrayList Read Method"" , descriptor . getReadMethod ( ) ) ;']","['import org . apache . commons . beanutils . PropertyUtils ;', '@ Test', '}', 'final RootBeanB bean = new SecondChildBeanB ( ) ;', 'final Class < ? > propertyType = PropertyUtils . getPropertyType ( bean , ""file [ 0 ] "" ) ;', 'class RootBeanB {', 'final RootBeanB bean = new FirstChildBeanB ( ) ;', 'assertEquals ( String . class . getName ( ) , propertyType . getName ( ) ) ;', 'public void testRootBean ( ) throws Exception {', 'public String getFile ( final int i ) {']","['public class Jira422TestCase extends TestCase {', '@ Test', 'final RootBean bean = new SecondChildBean ( ) ;', '}', 'import junit . framework . TestCase ;', 'final RootBean bean = new SecondChildBean ( ) ;', 'import java . util . List ;', 'import java . beans . IndexedPropertyDescriptor ;', 'public void testRootBean ( ) throws Exception {', 'public static void assumeSupportsIndexedLists ( ) throws IntrospectionException {']","['import junit . framework . Test ;', '@ Test', 'private static final String BEANUTILS 492 = ""BEANUTILS - 492 : IndexedPropertyDescriptor not supported for List in Java 8"" ;', 'assumeSupportsIndexedLists ( ) ;', 'private static final Log log = LogFactory . getLog ( IndexedPropertyTestCase . class ) ;', '}', 'import org . apache . commons . logging . LogFactory ;', 'public static void assumeSupportsIndexedLists ( ) throws IntrospectionException {', 'super ( name ) ;', 'import java . beans . BeanInfo ;']","['public void setIndexedProperty ( ) throws Exception {', 'public void makeBean ( ) {', 'public static boolean supportsIndexedLists ( ) throws IntrospectionException {', '@ Test', 'assertEquals ( ""item0"" , arr [ 0 ] ) ;', '}', 'import java . beans . IndexedPropertyDescriptor ;', 'import org . apache . commons . beanutils . BeanUtilsBean ;', 'public void setSomeList ( List < String > someList ) {', 'assertEquals ( ""item1"" , beanUtils . getIndexedProperty ( bean , ""someList [ 1 ] "" ) ) ;']","['for ( PropertyDescriptor pd : beanInfo . getPropertyDescriptors ( ) ) {', 'for ( PropertyDescriptor pd : beanInfo . getPropertyDescriptors ( ) ) {', 'assumeSupportsIndexedLists ( ) ;', 'assumeSupportsIndexedLists ( ) ;', 'Assert . fail ( ""Could not find PropertyDescriptor for \'stringList\'"" ) ;', 'Assert . fail ( ""Could not find PropertyDescriptor for \'stringList\'"" ) ;', '}', '}', 'public static void assumeSupportsIndexedLists ( ) throws IntrospectionException {', 'public static void assumeSupportsIndexedLists ( ) throws IntrospectionException {']","['return ;', 'return ;']","['""isInvalidBoolean"" . equals ( pd . getReadMethod ( ) . getName ( ) ) ) ;', 'Arrays . asList ( ""isInvalidBoolean"" , ""getInvalidBoolean"" )', 'assertTrue ( ""invalidBoolean getter method is isInvalidBoolean"" ,', '. contains ( pd . getReadMethod ( ) . getName ( ) ) ) ;', 'assertTrue ( ""invalidBoolean getter method is isInvalidBoolean or getInvalidBoolean"" ,']","['final String testString = ""3 / 21 / 06 3 : 06 pm"" ;', 'import java . text . DateFormat ;', '}', 'String testString ;', 'final String pattern = ""M / d / yy h : mm a"" ;', 'testString = ""3 / 21 / 06 3 : 06 PM"" ;', 'String pattern ;', 'import java . util . Date ;', 'if ( isUSFormatWithComma ( ) ) {', 'return loc . format ( new Date ( ) ) . contains ( "" , "" ) ;']","['for ( PropertyDescriptor pd : beanInfo . getPropertyDescriptors ( ) ) {', 'assertEquals ( ""Not IndexedPropertyDescriptor"" ,', 'import java . beans . Introspector ;', 'import org . apache . commons . beanutils . bugs . other . Jira492IndexedListsSupport ;', 'import org . junit . Assert ;', 'import static org . junit . Assume . assumeTrue ;', 'return ;', 'if ( Jira492IndexedListsSupport . supportsIndexedLists ( ) ) {', 'assumeSupportsIndexedLists ( ) ;', 'IndexedPropertyDescriptor . class , descriptor . getClass ( ) ) ;']","['type = Object . class ;', 'if ( index > = 0 & & List . class . isAssignableFrom ( type ) ) {', '}', 'import org . apache . commons . beanutils . LazyDynaBean ;', 'BeanUtilsBean beanUtilsBean = BeanUtilsBean . getInstance ( ) ;', '@ Test', 'Object x = lazyDynaBean . get ( ""x"" ) ;', 'beanUtilsBean . setProperty ( lazyDynaBean , ""x [ 1 ] "" , ""x2"" ) ;', 'public class Jira493TestCase {', '}']","['import junit . framework . TestCase ;', 'import org . junit . Test ;', 'public class MemoryTestCase extends TestCase {', 'import static org . junit . Assert . * ;', 'public class MemoryTestCase {', '@ Test', 'public class MemoryLeakTestCase extends TestCase {', '@ Test', '}', 'public class MemoryLeakTestCase {']","['@ SuppressWarnings ( ""deprecation"" )']",['private static final long serialVersionUID = - 3084907613499830175L ;'],"['}', '}']","['this . comparator = ComparableComparator . getInstance ( ) ;', 'this ( property , ComparableComparator . INSTANCE ) ;', 'this ( property , ComparableComparator . getInstance ( ) ) ;', 'this . comparator = ComparableComparator . INSTANCE ;', 'import org . apache . commons . collections . comparators . ComparableComparator ;', 'import org . apache . commons . collections4 . comparators . ComparableComparator ;', 'import org . apache . commons . collections . keyvalue . AbstractMapEntry ;', 'import org . apache . commons . collections4 . Transformer ;', 'import org . apache . commons . collections . Transformer ;', 'import org . apache . commons . collections4 . keyvalue . AbstractMapEntry ;']","['final Iterator < ? > readableKeys = map . readMethods . keySet ( ) . iterator ( ) ;', 'for ( Object key : readMethods . keySet ( ) ) {', 'while ( readableKeys . hasNext ( ) ) {', 'for ( Object key : map . readMethods . keySet ( ) ) {', 'final Object key = readableKeys . next ( ) ;', 'final Iterator < ? > readableKeys = readMethods . keySet ( ) . iterator ( ) ;', 'while ( readableKeys . hasNext ( ) ) {', 'while ( entries . hasNext ( ) ) {', 'for ( Map . Entry < ? , ? > entry : ( ( Map < ? , ? > ) orig ) . entrySet ( ) ) {', 'final Map . Entry < ? , ? > entry = ( Entry < ? , ? > ) entries . next ( ) ;']","['private final Log log = LogFactory . getLog ( BeanUtils . class ) ;', 'private final Log log = LogFactory . getLog ( BeanUtilsBean . class ) ;', 'private final Log log = LogFactory . getLog ( ConvertUtils . class ) ;', 'private final Log log = LogFactory . getLog ( ConvertUtilsBean . class ) ;', 'private final Log log = LogFactory . getLog ( PropertyUtils . class ) ;', 'private final Log log = LogFactory . getLog ( PropertyUtilsBean . class ) ;', 'private final Log log = LogFactory . getLog ( LocaleConvertUtils . class ) ;', 'private final Log log = LogFactory . getLog ( LocaleConvertUtilsBean . class ) ;']","['return ( new Byte ( ( byte ) 0 ) ) ;', 'return ( Double . valueOf ( 0 . 0 ) ) ;', 'return ( new Float ( ( float ) 0 . 0 ) ) ;', 'return ( Character . valueOf ( ( char ) 0 ) ) ;', 'return ( new Character ( ( char ) 0 ) ) ;', 'return ( Integer . valueOf ( 0 ) ) ;', 'return ( new Long ( 0 ) ) ;', 'return ( Long . valueOf ( 0 ) ) ;', 'return ( new Double ( 0 . 0 ) ) ;', 'return ( Float . valueOf ( ( float ) 0 . 0 ) ) ;']","['final ArrayList < DynaProperty > list = new ArrayList < DynaProperty > ( ) ;', 'import java . util . List ;', 'final List < DynaProperty > list = new ArrayList < DynaProperty > ( ) ;', 'final ArrayList list = new ArrayList ( ) ;', 'final List < String > list = new ArrayList < String > ( ) ;', 'protected List parseElements ( String svalue ) {', 'protected List < String > parseElements ( String svalue ) {', 'final String stringValue = ( String ) list . get ( i ) ;', 'final List < String > list = parseElements ( value . toString ( ) ) ;', 'final List list = parseElements ( value . toString ( ) ) ;']","['for ( DynaProperty propertie : properties ) {', 'for ( final DynaProperty propertie : properties ) {', 'for ( DynaProperty propertie : properties ) {', 'for ( final DynaProperty propertie : properties ) {', 'for ( Object key : readMethods . keySet ( ) ) {', 'for ( final Object key : map . readMethods . keySet ( ) ) {', 'for ( Object key : map . readMethods . keySet ( ) ) {', 'for ( final Object key : readMethods . keySet ( ) ) {', 'for ( DynaProperty descriptor : descriptors ) {', 'for ( final DynaProperty origDescriptor : origDescriptors ) {']","['( PropertyDescriptor ) propertyUtilsBean . getPropertyDescriptor ( bean , ""stringList"" ) ;', 'propertyUtilsBean . getPropertyDescriptor ( bean , ""stringArray"" ) ;', '( PropertyDescriptor ) propertyUtilsBean . getPropertyDescriptor ( bean , ""stringArray"" ) ;', 'propertyUtilsBean . getPropertyDescriptor ( bean , ""stringList"" ) ;', '( PropertyDescriptor ) propertyUtilsBean . getPropertyDescriptor ( bean , ""arrayList"" ) ;', 'propertyUtilsBean . getPropertyDescriptor ( bean , ""arrayList"" ) ;']","['@ Override', '@ Override', '@ Override', '@ Override', '@ Override', '@ Override', '@ Override', '@ Override', '@ Override', '@ Override']","['final Set < Map . Entry < K , Object > > set = new HashSet < Map . Entry < K , Object > > ( properties . length ) ;', 'final Set < Map . Entry < K , Object > > set = new HashSet < > ( properties . length ) ;', 'set . add ( new MapEntry < K > ( key , value ) ) ;', 'Set < K > set = new HashSet < > ( properties . length ) ;', 'Set < K > set = new HashSet < K > ( properties . length ) ;', 'final List < Object > values = new ArrayList < > ( properties . length ) ;', 'final List < Object > values = new ArrayList < Object > ( properties . length ) ;', 'set . add ( new MapEntry < > ( key , value ) ) ;', 'protected HashMap < String , Object > values = new HashMap < String , Object > ( ) ;', 'protected HashMap < String , Object > values = new HashMap < > ( ) ;']","['} else {', 'return ( false ) ;', 'return ( false ) ;', '} else {', 'return value ;', 'return value ;', '} else {', 'final Converter converter = lookup ( String . class ) ;', 'final Converter converter = lookup ( String . class ) ;', 'return ( converter . convert ( String . class , value ) ) ;']","['public class ResultSetDynaClass extends JDBCDynaClass implements DynaClass {', 'public class ResultSetDynaClass extends JDBCDynaClass {', 'public class RowSetDynaClass extends JDBCDynaClass implements DynaClass , Serializable {', 'public class RowSetDynaClass extends JDBCDynaClass {']","['final DecimalFormat formatter = ( DecimalFormat ) DecimalFormat . getInstance ( locale ) ;', 'final DecimalFormat formatter = ( DecimalFormat ) NumberFormat . getInstance ( locale ) ;', 'import java . text . NumberFormat ;']","['sameClass = clazz . equals ( method . getDeclaringClass ( ) ) ;', 'sameClass = clazz . equals ( method . getDeclaringClass ( ) ) ;']","['final Class < ? extends Object > [ ] types = method . getParameterTypes ( ) ;', 'defTransformers . put (', 'final Class < ? > [ ] types = { value . getClass ( ) } ;', 'final Map < Class < ? extends Object > , Transformer > defTransformers =', 'protected static class Entry extends AbstractMapEntry {', 'final Constructor < ? > constructor = newType . getConstructor ( value . getClass ( ) ) ;', 'defaultTransformers . put (', 'if ( parmTypes ! = null & & parmTypes . length > 0 ) {', 'final Map < Class < ? extends Object > , Transformer > defaultTransformers =', 'protected static class Entry extends AbstractMapEntry < Object , Object > {']","['private static final long serialVersionUID = 1L ;', 'private static final long serialVersionUID = 1L ;', 'private static final long serialVersionUID = 1L ;', 'private static final long serialVersionUID = 1L ;', 'private static final long serialVersionUID = 1L ;', 'private static final long serialVersionUID = 1L ;', 'private static final long serialVersionUID = 1L ;', 'private static final long serialVersionUID = 1L ;', 'private static final long serialVersionUID = 1L ;', 'private static final long serialVersionUID = 1L ;']","['bc , BooleanArrayConverter . NO DEFAULT ) ;', 'bc , AbstractArrayConverter . NO DEFAULT ) ;', 'LocaleBeanUtilsBean . getInstance ( ) ! = signal . getBean ( ) ) ;', 'BeanUtilsBean . getInstance ( ) ! = signal . getBean ( ) ) ;', 'import org . apache . commons . beanutils2 . BeanUtilsBean ;', 'final NumberFormat nf = DecimalFormat . getNumberInstance ( ) ;', 'final NumberFormat nf = NumberFormat . getNumberInstance ( ) ;']","['package org . apache . commons . beanutils2 . bugs ;', 'import java . util . concurrent . ExecutorService ;', '} ) ;', 'executor . submit ( new Runnable ( ) {', '}', 'assert w ! = null ;', '@ Override', 'import java . util . Arrays ;', 'protected int random ( final int max ) {', 'executor . awaitTermination ( 3500 , TimeUnit . MILLISECONDS ) ;']","['} ) ;', '@ Ignore ( ""https : / / issues . apache . org / jira / browse / BEANUTILS - 509 . "" )', 'public void run ( ) {', 'try {', 'for ( int i = 1 ; i < 100 000 000 ; i + + ) {', '} ) ;', 'executor . submit ( new Runnable ( ) {', 'public void run ( ) {', 'executor . awaitTermination ( 3500 , TimeUnit . MILLISECONDS ) ;', 'executor . submit ( new Runnable ( ) {']","['Map cache = CLASSLOADER CACHE . get ( ) ;', 'return descriptorsMap . get ( name ) ;', 'protected Map < CacheKey , WrapDynaClass > initialValue ( ) {', 'final Map cache = CLASSLOADER CACHE . get ( ) ;', 'return new WeakHashMap < > ( ) ;', 'protected Map < CacheKey , WrapDynaClass > initialValue ( ) {', 'final PropertyUtilsBean propUtils = ( pu ! = null ) ? pu : PropertyUtilsBean . getInstance ( ) ;', 'final PropertyUtilsBean propUtils = pu ! = null ? pu : PropertyUtilsBean . getInstance ( ) ;', 'return ( dynaClass ) ;', 'return dynaClass ;']","['@ Deprecated', 'super ( defaultValue ) ;', '}', 'setDefaultValue ( defaultValue ) ;', 'public static final Object NO DEFAULT = new Object ( ) ;', 'if ( defaultValue ! = NO DEFAULT ) {', 'super ( ) ;', 'trueStrings , falseStrings , BooleanConverter . NO DEFAULT ) ;', 'trueStrings , falseStrings ) ;']","['} else if ( value instanceof Collection ) {', 'parameters [ 0 ] = ConvertUtils . convert ( ( String ) value ,', 'continue ;', 'setter = ( ( IndexedPropertyDescriptor ) descriptor ) .', 'if ( value = = null ) {', 'sb . append ( index ) ;', 'values . add ( ( String ) null ) ;', 'import java . util . ArrayList ;', 'import java . lang . reflect . Array ;', 'while ( items . hasNext ( ) ) {']","['fail ( ""InvocationTargetException"" ) ;', 'public void testGetDescriptorBoolean ( ) {', 'public void testGetDescriptorString ( ) {', 'double oldValue = bean . getDoubleProperty ( ) ;', 'public static Test suite ( ) {', 'count [ j ] + + ;', 'fail ( ""Duplicate property "" + properties [ j ] ) ;', 'public void testGetSimpleWriteOnly ( ) {', 'value = PropertyUtils . getSimpleProperty ( bean ,', '""stringProperty"" ,']","['bean . getBooleanProperty ( ) ) ;', 'fail ( ""InvocationTargetException"" ) ;', '( ( Boolean ) value ) . booleanValue ( ) ,', 'public void testGetNestedLong ( ) {', 'assertEquals ( ""Got correct value"" ,', 'assert ( ""Got correct type"" , ( value instanceof Long ) ) ;', 'assertEquals ( ""Matched new value"" ,', 'int newValue = oldValue + 1 ;', 'newValue ,', 'long oldValue = bean . getNested ( ) . getLongProperty ( ) ;']","['}', 'public void testGetDescriptorSecond ( ) {', '""setBooleanSecond"" ) ;', '""booleanSecond"" ,', 'testGetDescriptorBase ( ""booleanSecond"" , ""isBooleanSecond"" ,', 'this . booleanSecond = booleanSecond ;', '}', 'public void setBooleanSecond ( boolean booleanSecond ) {', 'public boolean isBooleanSecond ( ) {', 'private boolean booleanSecond = true ;']","['Object value = PropertyUtils . getIndexedProperty ( bean , name ) ;', 'Object value = PropertyUtils . getIndexedProperty ( bean , sb . toString ( ) ) ;']","['fail ( ""InvocationTargetException"" ) ;', 'public static Test suite ( )', 'val = BeanUtils . getIndexedProperty ( bean , ""stringIndexed"" , 3 ) ;', 'String val = BeanUtils . getNestedProperty ( bean , ""nested . stringProperty"" ) ;', 'catch ( NoSuchMethodException e )', 'String arr [ ] = BeanUtils . getArrayProperty ( bean , ""stringArray"" ) ;', 'try', '( iarr . length = = arr . length ) ) ;', '}', 'public BeanUtilsTestCase ( String name )']","['String name = descriptors [ i ] . getName ( ) ;', 'PropertyDescriptor descriptors [ ] =', 'if ( bean = = null )', 'import java . util . Collections ;', 'PropertyUtils . getPropertyDescriptors ( bean ) ;', 'return ( description ) ;', 'Map description = new HashMap ( descriptors . length ) ;', '}', 'for ( int i = 0 ; i < descriptors . length ; i + + ) {', 'return ( Collections . EMPTY MAP ) ;']","['( PropertyDescriptor [ ] ) descriptorsCache . get ( beanClassName ) ;', '( PropertyDescriptor [ ] ) descriptorsCache . get ( beanClassName ) ;', '}', 'import org . apache . commons . collections . FastHashMap ;', 'descriptors =', '}', 'descriptorsCache . put ( beanClassName , descriptors ) ;', 'descriptorsCache = new FastHashMap ( ) ;', 'private static HashMap descriptorsCache = new HashMap ( ) ;', 'descriptors =']","['private static Method getWriteMethod ( PropertyDescriptor descriptor ) {', '}', 'private static Method getReadMethod ( PropertyDescriptor descriptor ) {', 'public static Method getWriteMethod ( PropertyDescriptor descriptor ) {', '}', 'return ( getAccessibleMethod ( descriptor . getReadMethod ( ) ) ) ;', 'return ( getAccessibleMethod ( descriptor . getReadMethod ( ) ) ) ;', 'return ( getAccessibleMethod ( descriptor . getWriteMethod ( ) ) ) ;', 'return ( getAccessibleMethod ( descriptor . getWriteMethod ( ) ) ) ;', 'public static Method getReadMethod ( PropertyDescriptor descriptor ) {']","['for ( int i = 0 ; i < interfaces . length ; i + + ) {', 'if ( !Modifier . isPublic ( interfaces [ i ] . getModifiers ( ) ) )', '( Class clazz , String methodName , Class parameterTypes [ ] ) {', 'try {', 'method . getParameterTypes ( ) ) ;', '}', 'private static Method getAccessibleMethodFromInterfaceNest', 'Class interfaces [ ] = clazz . getInterfaces ( ) ;', 'parameterTypes ) ;', 'getAccessibleMethodFromInterfaceNest ( clazz ,']","['return ( new PropertyDescriptor [ 0 ] ) ;', 'throw new IllegalArgumentException ( ""No name specified"" ) ;', 'name + "" , "" + index + "" , "" + value + "" ) "" ) ;', 'if ( bean = = null )', 'System . out . println ( ""setSimpleProperty ( \'"" + bean + "" , "" +', 'if ( name = = null )', 'return ( Collections . EMPTY MAP ) ;', '( ""No destination bean specified"" ) ;', 'if ( debug > = 1 )', 'if ( orig = = null )']","['return ( Collections . EMPTY MAP ) ;', 'return ( new java . util . HashMap ( ) ) ;']","['assert ( ""intIndexed [ 3 ] = = "" + comp , val . equals ( comp ) ) ;', 'assertTrue ( ""String array length = "" + comp . length ,', 'assert ( ""stringIndexed [ 3 ] = = "" + comp , val . equals ( comp ) ) ;', 'assertTrue ( ""String array length = "" + iarr . length ,', 'assert ( ""nested . intIndexed [ 2 ] = = "" + comp ,', 'assertTrue ( ""intIndexed , 3 = = "" + comp , val . equals ( comp ) ) ;', 'assert ( ""String array length = "" + iarr . length ,', 'assertTrue ( ""intIndexed [ 3 ] = = "" + comp , val . equals ( comp ) ) ;', 'assert ( ""String array length = "" + comp . length ,', 'assertTrue ( ""stringIndexed , 3 = = "" + comp , val . equals ( comp ) ) ;']","['parameterType = parameterTypes [ 1 ] ;', 'else if ( descriptor instanceof MappedPropertyDescriptor )', 'parameterType = parameterTypes [ 1 ] ;', 'setter = ( ( MappedPropertyDescriptor ) descriptor ) . getMappedWriteMethod ( ) ;', 'int argCount , Class args [ ] ) {', 'Class ifcs [ ] = start . getInterfaces ( ) ;', 'return true ;', 'if ( methodName = = null ) {', 'Class interfaces [ ] = x . getInterfaces ( ) ;', 'chars [ 0 ] = Character . toUpperCase ( chars [ 0 ] ) ;']","['return ( readMethod . invoke ( bean , subscript ) ) ;', 'throw e ;', 'writeMethod . invoke ( bean , subscript ) ;', 'throw ( ArrayIndexOutOfBoundsException )', 'try {', 'e . getTargetException ( ) ;', '} catch ( InvocationTargetException e ) {', '}', 'return ( readMethod . invoke ( bean , subscript ) ) ;', 'ArrayIndexOutOfBoundsException )']","['public void setDefaultByte ( byte defaultByte ) {', 'public static float getDefaultFloat ( ) {', 'public void setDefaultInteger ( int defaultInteger ) {', 'public static double getDefaultDouble ( ) {', 'public int getDefaultInteger ( ) {', 'defaultInteger = new Integer ( newDefaultInteger ) ;', 'public boolean getDefaultBoolean ( ) {', 'defaultLong = new Long ( newDefaultLong ) ;', 'public float getDefaultFloat ( ) {', 'defaultByte = new Byte ( newDefaultByte ) ;']","['mappedPropertyType = params [ 0 ] ;', 'mappedPropertyType = params [ 1 ] ;', 'public void testMappedPropertyType ( ) throws Exception {', 'PropertyUtils . getPropertyDescriptor ( bean ,', '""mappedIntProperty"" ) ;', '}', 'desc = ( MappedPropertyDescriptor )', '""mappedProperty"" ) ;', 'assertEquals ( String . class , desc . getMappedPropertyType ( ) ) ;', 'assertEquals ( Integer . TYPE , desc . getMappedPropertyType ( ) ) ;']","['( PropertyDescriptor [ ] ) descriptorsCache . get ( beanClassName ) ;', 'FastHashMap map =', 'return null ;', 'public static void clearDescriptors ( ClassLoader classLoader ) {', 'descriptorsCache . put ( beanClassName , descriptors ) ;', 'descriptorsCache . clear ( ) ;', 'return ( FastHashMap ) mappedDescriptorsCache . get ( beanClassName ) ;', 'map = new FastHashMap ( ) ;', '( bean . getClass ( ) . getName ( ) , mappedDescriptors ) ;', '}']","['private int handleC ( String value ,', 'return doubleMetaphone ( value1 , alternate ) . equals ( doubleMetaphone ( value2 , alternate ) ) ;', 'if ( ( contains ( value , 0 , 4 , ""VAN "" , ""VON "" ) | | contains ( value , 0 , 3 , ""SCH"" ) ) | | contains ( value , index + 1 , 2 , ""ET"" ) ) {', 'public boolean isDoubleMetaphoneEqual ( String value1 , String value2 , boolean alternate ) {', 'index + 2 , 2 , ""ER"" ) ) ;', 'private int handleP ( String value , DoubleMetaphoneResult result , int index ) {', 'String criteria ) {', 'private int handleG ( String value , DoubleMetaphoneResult result , int index , boolean slavoGermanic ) {', 'private int handleAEIOUY ( DoubleMetaphoneResult result , int', 'if ( contains ( value , index + 3 , 2 , ""OO"" , ""ER"" , ""EN"" , ""UY"" , ""ED"" , ""EM"" ) ) {']","['public Soundex ( String mapping ) {', 'final char preHWChar = str . charAt ( index - 2 ) ;', 'char hwChar = str . charAt ( index - 1 ) ;', 'private char getMappingCode ( final String str , final int index ) {', 'char preHWChar = str . charAt ( index - 2 ) ;', 'final char hwChar = str . charAt ( index - 1 ) ;', 'char mappedChar = this . map ( str . charAt ( index ) ) ;', 'final char firstCode = this . map ( preHWChar ) ;', 'public Soundex ( char [ ] mapping ) {', 'final char mappedChar = this . map ( str . charAt ( index ) ) ;']","['return CharSequenceUtils . regionMatches ( cs1 , false , 0 , cs2 , 0 , Math . max ( cs1 . length ( ) , cs2 . length ( ) ) ) ;', '}', 'if ( cs1 instanceof String & & cs2 instanceof String ) {', 'return cs1 . equals ( cs2 ) ;', 'public static boolean equals ( final CharSequence cs1 , final CharSequence cs2 ) {', 'if ( cs1 = = cs2 ) {', 'if ( cs1 = = null | | cs2 = = null ) {', 'return true ;', 'return false ;']","['parseRules ( scanner , RESOURCE FILE , RULES , FOLDINGS ) ;', 'scanner . close ( ) ;', 'asciiFoldings . put ( leftCharacter . charAt ( 0 ) , rightCharacter . charAt ( 0 ) ) ;', '} ) ;', 'if ( folding & & FOLDINGS . containsKey ( ch ) ) {', 'this . replacementAtStart = replacementAtStart . split ( "" \\ \\ | "" ) ;', 'sb . append ( branch ) ;', 'final char patternKey = r . pattern . charAt ( 0 ) ;', 'final int cmtI = line . indexOf ( COMMENT ) ;', 'boolean inMultilineComment = false ;']","[""if ( firstCode = = mappedChar | | 'H' = = preHWChar | | 'W' = = preHWChar ) {"", '}', 'final char preHWChar = str . charAt ( index - 2 ) ;', 'final char prevChar = str . charAt ( i ) ;', 'final char hwChar = str . charAt ( index - 1 ) ;', 'if ( this . map ( prevChar ) = = mappedChar ) {', 'final char firstCode = this . map ( preHWChar ) ;', 'for ( int i = index - 1 ; i > = 0 ; i - - ) {', ""if ( 'H' = = hwChar | | 'W' = = hwChar ) {"", ""if ( 'H'! = prevChar & & 'W'! = prevChar ) {""]","['}', 'mapped = this . map ( str . charAt ( incount + + ) ) ;', 'if ( mapped ! = 0 ) {', 'last = this . map ( str . charAt ( 0 ) ) ;', 'public static final String US ENGLISH MAPPING STRING = ""01230120022455012623010202"" ;', 'public static final String US ENGLISH MAPPING STRING = ""0123012#02245501262301#202"" ;', 'final char prevChar = str . charAt ( i ) ;', ""} else if ( mapped ! = '#' & & mapped ! = last ) {"", 'if ( this . map ( prevChar ) = = mappedChar ) {', 'last = mapped ;']","['private final String loc = location ;', 'lines . putAll ( parseRules ( createScanner ( incl ) , location + "" - > "" + incl ) ) ;', 'lines . putAll ( parseRules ( createScanner ( incl ) , location + "" - > "" + incl ) ) ;', 'private final String loc = location ;', 'rules = new ArrayList < Rule > ( ) ;', 'rules = new ArrayList < Rule > ( ) ;', 'if ( rules = = null ) {', 'if ( rules = = null ) {', 'final String pat = stripQuotes ( parts [ 0 ] ) ;', 'final String pat = stripQuotes ( parts [ 0 ] ) ;']","[""char lastChar = ' - ' ;"", 'if ( lastCode = = CHAR FIRST POS ) {', 'continue ;', 'code = CHAR IGNORE ;', ""if ( code ! = ' - ' & & ( lastCode ! = code & & ( code ! = '0' | | lastCode = = ' / ' ) | | code < '0' | | code > '8' ) ) {"", 'char lastCode = CHAR FIRST POS ;', ""if ( lastCode = = ' / ' ) {"", ""final char CHAR IGNORE = ' - ' ;"", ""code = ' - ' ;"", 'continue ;']","['throw new EncoderException ( e . getMessage ( ) , e ) ;', 'try {', 'try {', 'public static String encodeHexString ( final ByteBuffer data ) {', 'final char [ ] charArray = object instanceof String ? ( ( String ) object ) . toCharArray ( ) : ( char [ ] ) object ;', 'return encodeHex ( data , true ) ;', '( ( String ) object ) . getBytes ( this . getCharset ( ) ) : ( byte [ ] ) object ;', '}', 'throw new DecoderException ( e . getMessage ( ) , e ) ;', '} else if ( object instanceof byte [ ] ) {']","['assertTrue ( Arrays . equals ( new char [ 0 ] , ( char [ ] ) new Hex ( ) . encode ( ( Object ) ByteBuffer . allocate ( 0 ) ) ) ) ;', 'assertTrue ( Arrays . equals ( new char [ 0 ] , ( char [ ] ) new Hex ( ) . encode ( ( Object ) ByteBuffer . allocate ( 0 ) ) ) ) ;', '@ Test', '@ Test', 'public void testDecodeByteBufferEmpty ( ) throws DecoderException {', 'public void testDecodeByteBufferEmpty ( ) throws DecoderException {', '}', '}', 'actual = Hex . encodeHex ( b , false ) ;', 'public void testEncodeByteBufferObjectEmpty ( ) throws EncoderException {']","['return Hex . encodeHexString ( sha1 ( data ) ) ;', '}', 'public static byte [ ] md2 ( final ByteBuffer data ) {', 'public static byte [ ] sha256 ( final ByteBuffer data ) {', 'public static String md2Hex ( final ByteBuffer data ) {', 'return digest ( getMd2Digest ( ) , data ) ;', 'return Hex . encodeHexString ( sha384 ( data ) ) ;', 'return Hex . encodeHexString ( md2 ( data ) ) ;', 'return digest ( getSha1Digest ( ) , data ) ;', 'return Hex . encodeHexString ( sha512 ( data ) ) ;']","['}', '}', 'public static byte [ ] md2 ( final ByteBuffer data ) {', 'public static byte [ ] md2 ( final ByteBuffer data ) {', 'public static byte [ ] sha256 ( final ByteBuffer data ) {', 'public static byte [ ] sha256 ( final ByteBuffer data ) {', 'return digest ( getMd2Digest ( ) , data ) ;', 'return digest ( getMd2Digest ( ) , data ) ;', 'public static byte [ ] sha ( final String data ) {', 'return sha1 ( data ) ;']","['public static byte [ ] sha224 ( final ByteBuffer data ) {', 'public static byte [ ] sha224 ( final String data ) {', 'return Hex . encodeHexString ( sha224 ( data ) ) ;', 'public static byte [ ] sha224 ( final InputStream data ) throws IOException {', 'public static String sha224Hex ( final byte [ ] data ) {', '}', 'return sha224 ( StringUtils . getBytesUtf8 ( data ) ) ;', 'public static MessageDigest getSha224Digest ( ) {', 'return getDigest ( MessageDigestAlgorithms . SHA 224 ) ;', 'public static String sha224Hex ( final String data ) {']","['flush ( ) ;', '}', 'out . close ( ) ;', 'flush ( ) ;', 'eof ( ) ;', 'public void eof ( ) throws IOException {', 'out . close ( ) ;']","['Assert . assertEquals ( ""A261"" , this . getStringEncoder ( ) . encode ( ""Ashcroft"" ) ) ;']","['- 1 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 ,', '- 1 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 ,', '15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 ,', '15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 ,', '- 1 , 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 ,', '25 , 26 , 27 , 28 , 29 , 30 , 31 ,', '25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 ,', '- 1 , 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 ,', '@ Test', '}']","['@ SuppressWarnings ( ""deprecation"" )', 'assertEquals ( element [ 1 ] , codec . encodeAsString ( element [ 0 ] . getBytes ( Charsets . UTF 8 ) ) ) ;', '@ SuppressWarnings ( ""deprecation"" )', 'import java . nio . charset . Charset ;', 'assertEquals ( element [ 1 ] , codec . encodeAsString ( element [ 0 ] . getBytes ( CHARSET UTF8 ) ) ) ;', 'private static final Charset CHARSET UTF8 = Charsets . UTF 8 ;', '@ SuppressWarnings ( ""deprecation"" )', 'assertEquals ( ""AAA"" , new String ( Base64 . decodeBase64 ( ""QUFB"" . getBytes ( Charsets . UTF 8 ) ) ) ) ;', 'assertEquals ( 0 , Base64 . decodeBase64 ( """" . getBytes ( CHARSET UTF8 ) ) . length ) ;', 'assertEquals ( 0 , Base64 . decodeBase64 ( "" = = = \\ n"" . getBytes ( Charsets . UTF 8 ) ) . length ) ;']","['- 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , 62 , - 1 , 62 , - 1 , 63 , 52 , 53 , 54 ,', '41 , 42 , 43 , 44 , 45 , 46 , 47 , 48 , 49 , 50 , 51', '- 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 ,', '- 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , 62 , - 1 , 62 , - 1 , 63 , /', '5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 ,', '- 1 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 ,', '55 , 56 , 57 , 58 , 59 , 60 , 61 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , 0 , 1 , 2 , 3 , 4 ,', '15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , - 1 , - 1 , - 1 , - 1 , 63 ,', '24 , 25 , - 1 , - 1 , - 1 , - 1 , 63 , - 1 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 ,', '52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 ,']","['char c2 = substring . charAt ( index2 + + ) ;', 'final char c1 = cs . charAt ( index1 + + ) ;', 'char c1 = cs . charAt ( index1 + + ) ;', 'final char c2 = substring . charAt ( index2 + + ) ;', 'for ( String lang : sl . languages ) {', 'for ( final String lang : sl . languages ) {', 'for ( String lang : languages ) {', 'for ( final String lang : languages ) {', 'private PhonemeBuilder phonemeBuilder ;', 'private final PhonemeBuilder phonemeBuilder ;']","['@ Test', '@ Test', 'final Base32 codec = new Base32 ( ( byte ) 0x25 ) ;', 'final Base32 codec = new Base32 ( ( byte ) 0x25 ) ;', '}', '}', 'assertNotNull ( codec ) ;', 'assertNotNull ( codec ) ;', 'public void testBase32Samples ( ) throws Exception {', 'public void testBase32Samples ( ) throws Exception {']","['encode ( pArray , 0 , EOF , context ) ;', 'encode ( pArray , offset , length , context ) ;', 'encode ( pArray , 0 , pArray . length , context ) ;', 'if ( pArray = = null | | pArray . length = = 0 ) {', '}', 'encode ( pArray , offset , EOF , context ) ;', 'return pArray ;', 'return encode ( pArray , 0 , pArray . length ) ;', 'public byte [ ] encode ( final byte [ ] pArray , int offset , int length ) {', 'testBase64InBuffer ( 0 , 100 ) ;']","['}', 'public static byte [ ] decodeHex ( String data ) throws DecoderException {', 'return decodeHex ( data . toCharArray ( ) ) ;', 'ids [ 0 ] = Hex . decodeHex ( ""94ed8d0319e4493399560fb67404d370"" . toCharArray ( ) ) ;', 'ids [ 0 ] = Hex . decodeHex ( ""94ed8d0319e4493399560fb67404d370"" ) ;', 'ids [ 1 ] = Hex . decodeHex ( ""2bf7cc2701fe4397b49ebeed5acc7090"" . toCharArray ( ) ) ;', 'ids [ 3 ] = Hex . decodeHex ( ""ff7f8fc01cdb471a8c8b5a9306183fe8"" ) ;', 'ids [ 3 ] = Hex . decodeHex ( ""ff7f8fc01cdb471a8c8b5a9306183fe8"" . toCharArray ( ) ) ;', 'ids [ 1 ] = Hex . decodeHex ( ""2bf7cc2701fe4397b49ebeed5acc7090"" ) ;', 'ids [ 2 ] = Hex . decodeHex ( ""64be154b6ffa40258d1a01288e7c31ca"" . toCharArray ( ) ) ;']","['final byte [ ] b4 = Hex . decodeHex ( ""2bf7cc2701fe4397b49ebeed5acc7090"" . toCharArray ( ) ) ;', 'final byte [ ] b4 = Hex . decodeHex ( ""2bf7cc2701fe4397b49ebeed5acc7090"" ) ;']","['0x89F57F59 , 0xB49556E9 , 0xF3352C39 , 0xCE550589 ,', '0xF44F2413 , 0x52382FA7 , 0x63D0353A , 0xC5A73E8E ,', '0xD1C2E785 , 0x697E80E0 , 0x7BCB2F0E , 0xC377486B ,', '0x782FA1BE , 0xB485A120 , 0x3A0AA6C3 , 0xF6A0A65D ,', '0xED242ADE , 0xD044036E , 0x97E479BE , 0xAA84500E ,', '0xC2098E52 , 0x7AB5E937 , 0x680046D9 , 0xD0BC21BC ,', '0x0BBDF5FF , 0xADCAFE4B , 0x9C22E4D6 , 0x3A55EF62 ,', '0x58F35849 , 0x659371F9 , 0x22330B29 , 0x1F532299 ,', '0x70279F96 , 0x4D47B626 , 0x0AE7CCF6 , 0x3787E546 ,', '0x33EF4E67 , 0x959845D3 , 0xA4705F4E , 0x020754FA ,']","['private final byte [ ] testData = new byte [ 1024 * 1024 ] ;', 'private final byte [ ] testData = new byte [ 1024 * 1024 ] ;']","['public void testMd5HexLengthForBytes ( ) {', 'public void testMd5HexLengthForBytes ( ) {', 'String hash = DigestUtils . md5Hex ( getByteBufferUtf8 ( hashMe ) ) ;', 'String hash = DigestUtils . md5Hex ( getByteBufferUtf8 ( hashMe ) ) ;', 'hash = DigestUtils . md5 ( getByteBufferUtf8 ( hashMe ) ) ;', 'hash = DigestUtils . md5 ( getByteBufferUtf8 ( hashMe ) ) ;', 'hash = DigestUtils . md5Hex ( getBytesUtf8 ( hashMe ) ) ;', 'hash = DigestUtils . md5Hex ( getBytesUtf8 ( hashMe ) ) ;', 'hash = DigestUtils . md5Hex ( getByteBufferUtf8 ( hashMe ) ) ;', 'hash = DigestUtils . md5Hex ( getByteBufferUtf8 ( hashMe ) ) ;']","['}', '}']","['return sha1 ( data ) ;', 'public static byte [ ] sha224 ( final File data ) throws IOException {', 'public static String md5Hex ( final InputStream data ) throws IOException {', 'public static String sha1Hex ( final File data ) throws IOException {', '@ Deprecated', 'return Hex . encodeHexString ( sha224 ( data ) ) ;', '}', 'private static byte [ ] digest ( final MessageDigest digest , final File data ) throws IOException {', 'public static byte [ ] sha ( final byte [ ] data ) {', 'return Hex . encodeHexString ( sha1 ( data ) ) ;']","['private static byte [ ] digest ( final MessageDigest messageDigest , final ByteBuffer data ) {', 'return MessageDigest . getInstance ( algorithm ) ;', 'return updateDigest ( digest , data ) . digest ( ) ;', '} catch ( final Exception e ) {', 'private static byte [ ] digest ( final MessageDigest digest , final InputStream data ) throws IOException {', 'return updateDigest ( messageDigest , data ) . digest ( ) ;', 'private static byte [ ] digest ( final MessageDigest digest , final File data ) throws IOException {', 'try {', '}', 'public static MessageDigest getDigest ( final String algorithm , MessageDigest defaultMessageDigest ) {']","['return getDigest ( MessageDigestAlgorithms . SHA 1 ) ;', 'return messageDigest . digest ( data ) ;', 'return getDigest ( MessageDigestAlgorithms . SHA 512 ) ;', 'return MessageDigestAlgorithm . SHA 512 . getMessageDigest ( ) ;', 'return getDigest ( MessageDigestAlgorithms . SHA 224 ) ;', 'return MessageDigestAlgorithm . SHA 384 . getMessageDigest ( ) ;', 'return getDigest ( MessageDigestAlgorithms . MD5 ) ;', 'return MessageDigestAlgorithm . MD5 . getMessageDigest ( ) ;', 'return getDigest ( MessageDigestAlgorithms . SHA 256 ) ;', 'return MessageDigestAlgorithm . SHA 1 . getMessageDigest ( ) ;']","['import java . security . MessageDigest ;', 'String . format ( ""Usage : java % s [ algorithm ] [ FILE | DIRECTORY ] "" , Digest . class . getName ( ) ) ) ;', 'public String toString ( ) {', '}', 'final File file = new File ( source ) ;', 'run ( """" , messageDigest ) ;', 'private final String source ;', 'run ( prefix , messageDigestAlgorithm . getMessageDigest ( ) ) ;', 'run ( prefix , messageDigest , file . listFiles ( ) ) ;', 'System . out . println ( prefix + Hex . encodeHexString ( digest ) + "" "" + sourceDesc ) ;']","['run ( """" , MessageDigestAlgorithm . valueOf ( algorithm ) . getMessageDigest ( ) ) ;', 'run ( """" , MessageDigestAlgorithm . valueOf ( algorithm . toUpperCase ( Locale . ROOT ) ) . getMessageDigest ( ) ) ;', 'import java . util . Locale ;']","['return String . format ( "" % s [ % s ] "" , super . toString ( ) , args ) ;', 'import java . util . Arrays ;', 'return String . format ( "" % s % s"" , super . toString ( ) , Arrays . toString ( args ) ) ;']","['}', '+ StringUtils . newStringUtf8 ( standard [ i ] ) + "" ] "" ) ;', 'System . out . println ( ""safe2 : [ "" + Hex . encodeHexString ( decodedUrlSafe2 ) + "" ] From : [ ""', '+ StringUtils . newStringUtf8 ( urlSafe3 [ i ] ) + "" ] "" ) ;', 'if ( false ) {', 'System . out . println ( ""standard : [ "" + Hex . encodeHexString ( decodedStandard ) + "" ] From : [ ""', '+ StringUtils . newStringUtf8 ( urlSafe2 [ i ] ) + "" ] "" ) ;', 'System . out . println ( ""safe1 : [ "" + Hex . encodeHexString ( decodedUrlSafe1 ) + "" ] From : [ ""', 'System . out . println ( ""reference : [ "" + Hex . encodeHexString ( ids [ i ] ) + "" ] "" ) ;', 'System . out . println ( ""safe3 : [ "" + Hex . encodeHexString ( decodedUrlSafe3 ) + "" ] From : [ ""']","['Collections . sort ( testList , sCompare ) ;', 'Collections . sort ( testList , sCompare ) ;', '@ SuppressWarnings ( ""unchecked"" )']","['return sha2Crypt ( keyBytes , salt , SHA512 PREFIX , SHA512 BLOCKSIZE , MessageDigestAlgorithms . SHA 512 ) ;', 'return sha2Crypt ( keyBytes , salt , SHA512 PREFIX , SHA512 BLOCKSIZE , MessageDigestAlgorithm . SHA 512 . getAlgorithm ( ) ) ;', 'return sha2Crypt ( keyBytes , salt , SHA256 PREFIX , SHA256 BLOCKSIZE , MessageDigestAlgorithms . SHA 256 ) ;', 'return sha2Crypt ( keyBytes , salt , SHA256 PREFIX , SHA256 BLOCKSIZE , MessageDigestAlgorithm . SHA 256 . getAlgorithm ( ) ) ;']","['SHA 512 ( ""SHA - 512"" ) ;', 'SHA3 224 ( ""SHA3 - 224"" ) ,', 'SHA3 256 ( ""SHA3 - 256"" ) ,', 'SHA3 512 ( ""SHA3 - 512"" ) ;', 'SHA3 384 ( ""SHA3 - 384"" ) ,', 'SHA 512 ( ""SHA - 512"" ) ,']","['run ( messageDigestAlgorithm . getAlgorithm ( ) + "" "" , messageDigestAlgorithm ) ;', 'run ( messageDigestAlgorithm . getName ( ) + "" "" , messageDigestAlgorithm ) ;', 'public String getAlgorithm ( ) {', 'public String getName ( ) {', 'return sha2Crypt ( keyBytes , salt , SHA512 PREFIX , SHA512 BLOCKSIZE , MessageDigestAlgorithm . SHA 512 . getAlgorithm ( ) ) ;', 'return sha2Crypt ( keyBytes , salt , SHA256 PREFIX , SHA256 BLOCKSIZE , MessageDigestAlgorithm . SHA 256 . getName ( ) ) ;', 'return sha2Crypt ( keyBytes , salt , SHA256 PREFIX , SHA256 BLOCKSIZE , MessageDigestAlgorithm . SHA 256 . getAlgorithm ( ) ) ;', 'return sha2Crypt ( keyBytes , salt , SHA512 PREFIX , SHA512 BLOCKSIZE , MessageDigestAlgorithm . SHA 512 . getName ( ) ) ;', 'Assert . assertEquals ( messageDigestAlgorithm . getAlgorithm ( ) , messageDigest . getAlgorithm ( ) ) ;', 'Assert . assertEquals ( messageDigestAlgorithm . getName ( ) , messageDigest . getAlgorithm ( ) ) ;']","['HMAC SHA 224 ( ""HmacSHA224"" ) ,']","['for ( int i = 0 ; i < digestAlgorithms . length ; i + + ) {', 'println ( prefix , DigestUtils . digest ( messageDigest , file ) ) ;', 'for ( int i = 0 ; i < files . length ; i + + ) {', 'for ( File file : files ) {', 'println ( prefix , DigestUtils . digest ( messageDigest , files [ i ] ) ) ;', 'for ( MessageDigestAlgorithm messageDigestAlgorithm : digestAlgorithms ) {', 'final MessageDigestAlgorithm messageDigestAlgorithm = digestAlgorithms [ i ] ;']","['( !allowWSPad | | ( arrayOctet [ i ] ! = pad ) & & !isWhiteSpace ( arrayOctet [ i ] ) ) ) {', 'for ( byte octet : arrayOctet ) {', 'if ( !isInAlphabet ( arrayOctet [ i ] ) & &', 'if ( !isInAlphabet ( octet ) & &', 'for ( int i = 0 ; i < arrayOctet . length ; i + + ) {', '( !allowWSPad | | ( octet ! = pad ) & & !isWhiteSpace ( octet ) ) ) {']","['} else {', 'System . err . println ( ""Parameter is file nor directory : \'"" + file + ""\'"" ) ;']","['System . out . println ( prefix + Hex . encodeHexString ( digest ) + "" "" + sourceDesc ) ;', 'System . out . println ( prefix + Hex . encodeHexString ( digest ) + "" "" + sourceDesc ) ;']","['private final String algorithm ;', 'public String getName ( ) {', 'this . algorithm = algorithm ;', 'return true ;', 'return algorithm ;', 'import javax . crypto . Mac ;', 'try {', 'public boolean isAvailable ( ) {', 'import org . apache . commons . codec . binary . StringUtils ;', '}']","['public String digestHex ( ByteBuffer data ) throws IOException {', '}', 'return Hex . encodeHexString ( digest ( data ) ) ;', 'public String digestHex ( File data ) throws IOException {', 'import org . apache . commons . codec . binary . Hex ;', 'public String digestHex ( byte [ ] data ) throws IOException {', 'public String digestHex ( InputStream data ) throws IOException {', '0x38513EC5 , 0x9D10ACBB , 0x773E6CC8 , 0xD27FFEB6 ,', '0xBE2DA0A5 , 0x4C4623A6 , 0x5F16D052 , 0xAD7D5351 ,', '0xC0FFC355 , 0x2FCFA84C , 0x1B736396 , 0xF443088F ,']",['@ Deprecated'],"['@ SuppressWarnings ( ""deprecation"" )', '@ SuppressWarnings ( ""deprecation"" )', '@ SuppressWarnings ( ""deprecation"" )', '@ SuppressWarnings ( ""deprecation"" )', '@ SuppressWarnings ( ""deprecation"" )', '@ SuppressWarnings ( ""deprecation"" )']","['@ Deprecated', 'return new String [ ] {', 'public static final String SHA 224 = ""SHA 224"" ;', '}', 'public static String [ ] values ( ) {', 'MD2 , MD5 , SHA 1 , SHA 224 , SHA 256 , SHA 384 , SHA 512 } ;']","['return sha2Crypt ( keyBytes , salt , SHA256 PREFIX , SHA256 BLOCKSIZE , MessageDigestAlgorithm . SHA 256 . getName ( ) ) ;', 'return sha2Crypt ( keyBytes , salt , SHA512 PREFIX , SHA512 BLOCKSIZE , MessageDigestAlgorithms . SHA 512 ) ;', 'return sha2Crypt ( keyBytes , salt , SHA512 PREFIX , SHA512 BLOCKSIZE , MessageDigestAlgorithm . SHA 512 . getName ( ) ) ;', 'return sha2Crypt ( keyBytes , salt , SHA256 PREFIX , SHA256 BLOCKSIZE , MessageDigestAlgorithms . SHA 256 ) ;']","['run ( """" , MessageDigestAlgorithm . valueOf ( algorithm . toUpperCase ( Locale . ROOT ) ) . getMessageDigest ( ) ) ;', 'run ( MessageDigestAlgorithms . values ( ) ) ;', 'for ( MessageDigestAlgorithm messageDigestAlgorithm : digestAlgorithms ) {', 'private void run ( String [ ] digestAlgorithms ) throws IOException {', 'private void run ( String prefix , final MessageDigestAlgorithm messageDigestAlgorithm ) throws IOException {', 'run ( messageDigestAlgorithm + "" "" , messageDigestAlgorithm ) ;', 'private void run ( MessageDigestAlgorithm [ ] digestAlgorithms ) throws IOException {', 'run ( prefix , DigestUtils . getDigest ( messageDigestAlgorithm ) ) ;', 'if ( messageDigestAlgorithm . isAvailable ( ) ) {', 'private void run ( String prefix , final String messageDigestAlgorithm ) throws IOException {']","['return HmacUtils . getInitializedMac ( name , key ) ;', 'public Mac getInitializedMac ( final byte [ ] key ) {', '}', 'return algorithm . getInitializedMac ( key ) ;', 'return algorithm . getHmac ( key ) ;']","['public static final String SHA 224 = ""SHA 224"" ;', 'private MessageDigestAlgorithms ( ) {', 'private MessageDigestAlgorithms ( ) {', 'public static final String SHA 224 = ""SHA 224"" ;', '}', '}']","['MD2 , MD5 , SHA 1 , SHA 224 , SHA 256 , SHA 384 , SHA 512 } ;', 'return new String [ ] { MD2 , MD5 , SHA 1 , SHA 224 , SHA 256 , SHA 384 , SHA 512 } ;', 'return new String [ ] {']","['println ( prefix , DigestUtils . digest ( messageDigest , file ) ) ;', 'if ( file . isFile ( ) ) {', 'println ( prefix , DigestUtils . digest ( messageDigest , file ) ) ;', '}']","['return new String [ ] { MD2 , MD5 , SHA 1 , SHA 224 , SHA 256 , SHA 384 , SHA 512 } ;', 'public static final String SHA3 384 = ""SHA3 - 384"" ;', 'public static final String SHA3 256 = ""SHA3 - 256"" ;', 'return new String [ ] { MD2 , MD5 , SHA 1 , SHA 224 , SHA 256 , SHA 384 , SHA 512 , SHA3 224 , SHA3 256 , SHA3 384 , SHA3 512 } ;', 'public static final String SHA3 224 = ""SHA3 224"" ;', 'public static final String SHA3 512 = ""SHA3 - 512"" ;']","['public static final String SHA 224 = ""SHA 224"" ;', 'public static final String SHA 224 = ""SHA - 224"" ;']","['public static final String SHA3 224 = ""SHA3 224"" ;', 'public static final String SHA3 224 = ""SHA3 - 224"" ;']","['Mac mac = getInitializedMac ( algo , key ) ;', 'return with ( algo . getName ( ) , key ) ;', 'return mac . doFinal ( ) ;', '}', 'this . mac = mac ;', 'mac . update ( valueToDigest ) ;', 'public byte [ ] doFinal ( ) {', 'return new HmacUtils ( mac ) ;', 'public Mac getMac ( ) {', 'return this ;']","['public MessageDigestAlgorithmTest ( String messageDigestAlgorithm ) {', 'public class MessageDigestAlgorithmsTest {', 'public class MessageDigestAlgorithmTest {', 'public MessageDigestAlgorithmsTest ( String messageDigestAlgorithm ) {']","['import java . lang . reflect . Modifier ;', 'if ( !ok ) {', 'return true ;', '}', 'for ( Field f : fields ) {', 'ok = false ;', 'System . out . println ( ""Not found in MessageDigestAlgorithms . values ( ) : "" + f . getName ( ) ) ;', 'if ( Modifier . isPublic ( modifiers ) & & Modifier . isStatic ( modifiers ) & & Modifier . isFinal ( modifiers ) ) {', 'if ( !contains ( ( String ) f . get ( null ) ) ) {', 'Assert . fail ( ""One or more entries are missing from the MessageDigestAlgorithms . values ( ) array"" ) ;']","['@ SuppressWarnings ( ""deprecation"" )']","['return getSha224Digest ( ) . digest ( data ) ;', 'return digest ( getSha224Digest ( ) , data ) ;']","['public static String sha224Hex ( final File data ) throws IOException {', 'public static byte [ ] digest ( final String digestName , final ByteBuffer data ) {', 'public static byte [ ] sha224 ( final ByteBuffer data ) {', 'messageDigest . update ( data ) ;', 'public static byte [ ] sha224 ( final String data ) {', 'public static byte [ ] digest ( final String digestName , final byte [ ] data ) {', 'public static byte [ ] sha224 ( final File data ) throws IOException {', 'public static byte [ ] digest ( final String digestName , final InputStream data ) throws IOException {', 'return Hex . encodeHexString ( sha224 ( data ) ) ;', 'return messageDigest . digest ( ) ;']","['return digest ( getMd5Digest ( ) , data ) ;', 'public static String sha1Hex ( final File data ) throws IOException {', 'return Hex . encodeHexString ( sha1 ( data ) ) ;', '}', 'public static String md5Hex ( final File data ) throws IOException {', 'public static byte [ ] sha512 ( final File data ) throws IOException {', 'return digest ( getMd2Digest ( ) , data ) ;', 'return Hex . encodeHexString ( sha384 ( data ) ) ;', 'return Hex . encodeHexString ( md2 ( data ) ) ;', 'public static byte [ ] sha384 ( final File data ) throws IOException {']","['assertEquals ( DigestUtils . sha256Hex ( testData ) ,', 'DigestUtils . digest ( MessageDigestAlgorithms . SHA 224 , StringUtils . getBytesUtf8 ( ""The quick brown fox jumps over the lazy dog"" ) ) ) ;', 'String hash = DigestUtils . md5Hex ( getByteBufferUtf8 ( hashMe ) ) ;', 'assertEquals ( ""d14a028c2a3a2bc9476102bb288234c415a2b01f828ea62ac5b3e42f"" ,', 'import static org . apache . commons . codec . binary . StringUtils . getByteBufferUtf8 ;', 'DigestUtils . digest ( MessageDigestAlgorithms . SHA 224 , StringUtils . getBytesUtf8 ( """" ) ) ) ;', '@ Test', 'hashMe = ""length < 32"" ;', 'DigestUtils . md5Hex ( ByteBuffer . wrap ( testData ) ) ) ;', '}']","['assumeJava8 ( ) ;', 'Hex . encodeHexString ( DigestUtils . digest ( MessageDigestAlgorithms . SHA 224 , StringUtils . getBytesUtf8 ( ""The quick brown fox jumps over the lazy dog"" ) ) ) ) ;', 'DigestUtils . digest ( MessageDigestAlgorithms . SHA 224 , StringUtils . getBytesUtf8 ( ""The quick brown fox jumps over the lazy dog"" ) ) ) ;', 'Hex . encodeHexString ( DigestUtils . digest ( MessageDigestAlgorithms . SHA 224 , StringUtils . getBytesUtf8 ( """" ) ) ) ) ;', 'assertEquals ( ""d14a028c2a3a2bc9476102bb288234c415a2b01f828ea62ac5b3e42f"" ,', 'assumeJava8 ( ) ; assertEquals ( ""d14a028c2a3a2bc9476102bb288234c415a2b01f828ea62ac5b3e42f"" ,', 'DigestUtils . digest ( MessageDigestAlgorithms . SHA 224 , StringUtils . getBytesUtf8 ( """" ) ) ) ;']","['public static byte [ ] digest ( final String digestName , final ByteBuffer data ) {', 'try {', 'messageDigest . update ( data ) ;', 'read = data . read ( buffer , 0 , STREAM BUFFER LENGTH ) ;', 'public static byte [ ] digest ( final String digestName , final byte [ ] data ) {', 'private DigestUtils ( MessageDigest digest ) {', 'public static byte [ ] digest ( final String digestName , final InputStream data ) throws IOException {', '}', 'return messageDigest . digest ( ) ;', 'return Hex . encodeHexString ( messageDigest . digest ( ) ) ;']","['public HmacUtils key ( byte [ ] key ) {', 'try {', 'mac . update ( buffer , 0 , read ) ;', 'public static HmacUtils use ( final Mac mac ) {', '}', 'mac . update ( valueToDigest ) ;', 'final BufferedInputStream stream = new BufferedInputStream ( new FileInputStream ( valueToDigest ) ) ;', '} finally {', 'return this ;', 'public static HmacUtils use ( final String algorithm ) {']","['DigestUtils ( ) {', 'private DigestUtils ( ) {', 'HmacUtils ( ) {', 'private HmacUtils ( ) {']","['reset ( ) ;', 'reset ( ) ;', 'private void reset ( ) {', '}']","['package org . apache . commons . codec . digest ;', 'import org . apache . commons . codec . digest . MessageDigestAlgorithms ;', 'package org . apache . commons . codec . cli ;', 'import org . apache . commons . codec . digest . DigestUtils ;']","['public DigestUtils update ( final String data ) throws IOException {', 'public DigestUtils update ( final byte [ ] data ) {', 'public DigestUtils update ( final ByteBuffer data ) throws IOException {', 'public DigestUtils update ( final String data ) {', 'public DigestUtils update ( final byte [ ] data ) throws IOException {', 'public DigestUtils update ( final ByteBuffer data ) {']","['0x38513EC5 , 0x9D10ACBB , 0x773E6CC8 , 0xD27FFEB6 ,', '0xBE2DA0A5 , 0x4C4623A6 , 0x5F16D052 , 0xAD7D5351 ,', '0xC0FFC355 , 0x2FCFA84C , 0x1B736396 , 0xF443088F ,', '0xBB43F3A7 , 0xD340DF6F , 0x6B45AA37 , 0x034686FF ,', '0xDE517CFE , 0x976D01D9 , 0x4C2986B0 , 0x0515FB97 ,', '0xF1D3B55B , 0xE2712D2C , 0xD69685B5 , 0xC5341DC2 ,', '0x959A8332 , 0xFD99AFFA , 0x459CDAA2 , 0x2D9FF66A ,', '0xA8C1008F , 0xC0C22C47 , 0x78C7591F , 0x10C475D7 ,', '0xE144FB14 , 0x4405696A , 0xAE2BA919 , 0x0B6A3B67 ,', '0xD714D41E , 0xEF05BBB2 , 0xA7360B46 , 0x9F2764EA ,']","['System . err . println ( ""Parameter is file nor directory : \'"" + file + ""\'"" ) ;', 'private void println ( final String prefix , final byte [ ] digest , String fileName ) {', 'private void println ( String prefix , final byte [ ] digest ) {', 'println ( prefix , DigestUtils . digest ( messageDigest , file ) , source ) ;', 'final String sourceDesc = source = = null ? "" - "" : source ;', 'println ( prefix , digest , null ) ;', 'System . out . println ( prefix + Hex . encodeHexString ( digest ) + "" "" + sourceDesc ) ;', 'println ( prefix , DigestUtils . digest ( messageDigest , bytes ) ) ;', 'println ( prefix , DigestUtils . digest ( messageDigest , file ) ) ;', '}']","['String . format ( ""Usage : java % s [ algorithm ] [ FILE | DIRECTORY ] "" , Digest . class . getName ( ) ) ) ;', 'String . format ( ""Usage : java % s [ algorithm ] [ FILE | DIRECTORY | string ] "" , Digest . class . getName ( ) ) ) ;']","['if ( source = = null ) {', 'inputs = null ;', '} else if ( file . isDirectory ( ) ) {', 'String . format ( ""Usage : java % s [ algorithm ] [ FILE | DIRECTORY | string ] . . . "" , Digest . class . getName ( ) ) ) ;', 'println ( prefix , DigestUtils . digest ( messageDigest , file ) , source ) ;', 'System . arraycopy ( args , 1 , inputs , 0 , inputs . length ) ;', 'if ( file . isFile ( ) ) {', 'if ( file . isFile ( ) ) {', 'println ( prefix , DigestUtils . digest ( messageDigest , bytes ) ) ;', 'println ( prefix , DigestUtils . digest ( messageDigest , file ) , source ) ;']","['testBase64InBuffer ( 0 , 100 ) ;', 'testBase64InBuffer ( 0 , 100 ) ;', 'final byte [ ] bytes = element [ 0 ] . getBytes ( CHARSET UTF8 ) ;', 'final byte [ ] bytes = element [ 0 ] . getBytes ( CHARSET UTF8 ) ;', '@ Test', '@ Test', 'public void testBase64AtBufferStart ( ) {', 'public void testBase64AtBufferStart ( ) {', 'testBase64InBuffer ( 100 , 100 ) ;', 'testBase64InBuffer ( 100 , 100 ) ;']","['System . arraycopy ( args , 1 , inputs , 0 , inputs . length ) ;', 'System . arraycopy ( args , 1 , inputs , 0 , inputs . length ) ;', '0x89F57F59 , 0xB49556E9 , 0xF3352C39 , 0xCE550589 ,', '0x89F57F59 , 0xB49556E9 , 0xF3352C39 , 0xCE550589 ,', '0xF44F2413 , 0x52382FA7 , 0x63D0353A , 0xC5A73E8E ,', '0xF44F2413 , 0x52382FA7 , 0x63D0353A , 0xC5A73E8E ,', '0xD1C2E785 , 0x697E80E0 , 0x7BCB2F0E , 0xC377486B ,', '0xD1C2E785 , 0x697E80E0 , 0x7BCB2F0E , 0xC377486B ,', '0x782FA1BE , 0xB485A120 , 0x3A0AA6C3 , 0xF6A0A65D ,', '0x782FA1BE , 0xB485A120 , 0x3A0AA6C3 , 0xF6A0A65D ,']","['return new String [ ] { MD2 , MD5 , SHA 1 , SHA 224 , SHA 256 , SHA 384 , SHA 512 , SHA3 224 , SHA3 256 , SHA3 384 , SHA3 512 } ;', 'return new String [ ] {', 'MD2 , MD5 , SHA 1 , SHA 224 , SHA 256 , SHA 384 , SHA 512 , SHA3 224 , SHA3 256 , SHA3 384 , SHA3 512', '} ;', '^ ( ( T [ ( ( b [ i + 4 ] < < 24 ) > > > 24 ) + 0x300 ] ^ T [ ( ( b [ i + 5 ] < < 24 ) > > > 24 ) + 0x200 ] )', '( ( ( ( b [ i ] < < 24 ) > > > 24 ) + ( ( b [ i + 1 ] < < 24 ) > > > 16 ) ) +', 'localCrc = ( ( T [ ( ( x < < 24 ) > > > 24 ) + 0x700 ] ^ T [ ( ( x < < 16 ) > > > 24 ) + 0x600 ] )', '( ( T [ ( ( b [ i + 4 ] < < 24 ) > > > 24 ) + 0x300 ] ^ T [ ( ( b [ i + 5 ] < < 24 ) > > > 24 ) + 0x200 ] ) ^', '^ ( T [ ( ( b [ i + 6 ] < < 24 ) > > > 24 ) + 0x100 ] ^ T [ ( ( b [ i + 7 ] < < 24 ) > > > 24 ) ] ) ) ;', '( ( ( b [ i + 2 ] < < 24 ) > > > 8 ) + ( b [ i + 3 ] < < 24 ) ) ) ;']","['private DigestUtils ( ) {', 'public DigestUtils ( ) {', 'private HmacUtils ( ) {', 'public HmacUtils ( ) {']","['run ( prefix , messageDigest , file . listFiles ( ) ) ;', 'run ( prefix , messageDigest , listFiles ) ;', 'if ( listFiles ! = null ) {', 'final File [ ] listFiles = file . listFiles ( ) ;', '}', 'if ( m = = null | | !m . find ( ) ) {', 'if ( !m . find ( ) ) {', 'break ;', 'if ( m = = null | | !m . find ( ) ) {', 'if ( !m . find ( ) ) {']","['private static final int ONE = 1 , TWO = 2 , THREE = 3 , FOUR = 4 , FIVE = 5 , SIX = 6 , SEVEN = 7 , EIGHT = 8 ,', 'private static final int ONE = 1 , TWO = 2 , THREE = 3 , FOUR = 4 , FIVE = 5 , SIX = 6 , SEVEN = 7 ,']","['String replacedName = name . toUpperCase ( ) ;', 'String replacedName = name . toUpperCase ( Locale . ENGLISH ) ;']","['} catch ( NoSuchAlgorithmException e ) {', '@ Deprecated', '} catch ( InvalidKeyException e ) {', 'private HmacUtils ( final String algorithm , final byte [ ] key ) {', 'mac . init ( keySpec ) ;', 'public static HmacUtils use ( final HmacAlgorithms algorithm , final byte [ ] key ) {', 'public HmacUtils key ( byte [ ] key ) {', 'return new HmacUtils ( algorithm , key ) ;', 'try {', 'public static HmacUtils use ( final String algorithm , final byte [ ] key ) {']","['return HmacAlgorithms . HMAC MD5 . getHmac ( key ) ;', 'return getInitializedMac ( HmacAlgorithms . HMAC SHA 256 , key ) ;', 'return HmacAlgorithms . HMAC SHA 256 . getHmac ( key ) ;', 'return getInitializedMac ( HmacAlgorithms . HMAC SHA 512 , key ) ;', '@ Deprecated', 'return getInitializedMac ( HmacAlgorithms . HMAC SHA 384 , key ) ;', 'return algorithm . getHmac ( key ) ;', 'return getInitializedMac ( HmacAlgorithms . HMAC SHA 1 , key ) ;', 'return HmacAlgorithms . HMAC SHA 384 . getHmac ( key ) ;', 'return getInitializedMac ( algorithm , key ) ;']","['stream . close ( ) ;', 'return mac . doFinal ( StringUtils . getBytesUtf8 ( valueToDigest ) ) ;', 'return update ( stream ) ;', 'try {', 'public HmacUtils update ( final String valueToDigest ) {', 'public String hmacHex ( byte [ ] valueToDigest ) {', 'try {', '}', 'public String doFinalHex ( ) {', 'final BufferedInputStream stream = new BufferedInputStream ( new FileInputStream ( valueToDigest ) ) ;']","['return HmacAlgorithms . HMAC SHA 1 . hmacHex ( key , valueToDigest ) ;', 'return HmacUtils . use ( HmacAlgorithms . HMAC SHA 1 , key ) . hmac ( valueToDigest ) ;', 'return HmacAlgorithms . HMAC SHA 1 . hmac ( key , valueToDigest ) ;', 'public static HmacUtils use ( final String algorithm , final String key ) {', 'return HmacAlgorithms . HMAC SHA 384 . hmac ( key , valueToDigest ) ;', 'return HmacUtils . use ( HmacAlgorithms . HMAC SHA 512 , key ) . hmacHex ( valueToDigest ) ;', 'return HmacAlgorithms . HMAC SHA 384 . hmacHex ( key , valueToDigest ) ;', 'return HmacUtils . use ( HmacAlgorithms . HMAC SHA 512 , key ) . hmac ( valueToDigest ) ;', 'return HmacAlgorithms . HMAC SHA 256 . hmacHex ( key , valueToDigest ) ;', 'return HmacUtils . use ( HmacAlgorithms . HMAC MD5 , key ) . hmacHex ( valueToDigest ) ;']","['try {', 'public String digestAsHex ( final String data ) {', 'read = data . read ( buffer , 0 , STREAM BUFFER LENGTH ) ;', 'public DigestUtils ( MessageDigest digest ) {', 'private DigestUtils ( MessageDigest digest ) {', 'public byte [ ] digest ( final ByteBuffer data ) {', '}', 'public String digestAsHex ( final ByteBuffer data ) {', 'return Hex . encodeHexString ( messageDigest . digest ( ) ) ;', 'this ( getDigest ( name ) ) ;']",['@ Deprecated'],"['return getInitializedMac ( algorithm , key ) ;', 'return getInitializedMac ( algorithm . getName ( ) , key ) ;']","['return HmacUtils . use ( HmacAlgorithms . HMAC SHA 1 , key ) . hmac ( valueToDigest ) ;', 'return new HmacUtils ( HmacAlgorithms . HMAC SHA 256 , key ) . hmac ( valueToDigest ) ;', 'return HmacUtils . use ( HmacAlgorithms . HMAC SHA 512 , key ) . hmacHex ( valueToDigest ) ;', 'public HmacUtils ( final String algorithm , final String key ) {', '}', 'return new HmacUtils ( HmacAlgorithms . HMAC SHA 1 , key ) . hmac ( valueToDigest ) ;', 'private HmacUtils ( final String algorithm , final byte [ ] key ) {', 'this ( algorithm . getName ( ) , StringUtils . getBytesUtf8 ( key ) ) ;', 'return use ( algorithm . getName ( ) , key ) ;', 'return new HmacUtils ( HmacAlgorithms . HMAC SHA 512 , key ) . hmacHex ( valueToDigest ) ;']","['Mac . getInstance ( name ) ;', '} catch ( NoSuchAlgorithmException e ) {', 'return true ;', 'public static boolean isAvailable ( String name ) {', 'try {', '}', 'public static boolean isAvailable ( HmacAlgorithms name ) {', 'return false ;', 'Mac . getInstance ( name . getName ( ) ) ;']","['hmacAlgorithm . hmacHex ( ( byte [ ] ) null , STANDARD PHRASE BYTES ) ;', 'Assert . assertArrayEquals ( standardResultBytes , new HmacUtils ( hmacAlgorithm , STANDARD KEY BYTES ) . hmac ( STANDARD PHRASE STRING ) ) ;', 'Assume . assumeTrue ( hmacAlgorithm . isAvailable ( ) ) ;', 'HmacUtils . getInitializedMac ( hmacAlgorithm , EMPTY BYTE ARRAY ) ;', 'hmacAlgorithm . hmacHex ( ( String ) null , STANDARD PHRASE STRING ) ;', 'Assert . assertEquals ( standardResultString , new HmacUtils ( hmacAlgorithm , STANDARD KEY BYTES ) . hmacHex ( STANDARD PHRASE STRING ) ) ;', 'Assert . assertArrayEquals ( standardResultBytes , hmacAlgorithm . hmac ( STANDARD KEY BYTES , STANDARD PHRASE BYTES ) ) ;', 'new HmacUtils ( hmacAlgorithm , ( byte [ ] ) null ) . hmac ( STANDARD PHRASE BYTES ) ;', 'hmacAlgorithm . hmac ( ( byte [ ] ) null , new ByteArrayInputStream ( STANDARD PHRASE BYTES ) ) ;', 'new HmacUtils ( hmacAlgorithm , ( String ) null ) . hmac ( STANDARD PHRASE STRING ) ;']","['public LanguageGuessingTest ( final String name , final String language , final String exactness ) {', 'public LanguageGuessingTest ( final String name , final String language ) {', 'this . exactness = exactness ;', 'private final String exactness ;']","['public void testEncodeHexByteBufferEmpty ( ) throws EncoderException {', 'public void testGetCharsetName ( ) {', 'public void testEncodeHexByteArrayEmpty ( ) throws EncoderException {', 'public void testEncodeHexByteArrayEmpty ( ) {', 'public void testGetCharsetName ( ) throws UnsupportedEncodingException , DecoderException {', 'public void testGetCharset ( ) {', 'public void testEncodeByteBufferEmpty ( ) throws EncoderException {', 'public void testEncodeByteBufferEmpty ( ) {', 'public void testGetCharset ( ) throws UnsupportedEncodingException , DecoderException {', 'public void testEncodeByteArrayEmpty ( ) {']","['{ "" \\ u0391 \\ u03b3 \\ u03b3 \\ u03b5 \\ u03bb \\ u03cc \\ u03c0 \\ u03bf \\ u03c5 \\ u03bb \\ u03bf \\ u03c2"" , ""greek"" , EXACT } ,', '{ ""Klausewitz"" , ""german"" } ,', '{ ""Carvalho"" , ""portuguese"" , EXACT } ,', '{ ""Nagy"" , ""hungarian"" } ,', '{ ""K \\ u00fc \\ u00e7 \\ u00fck"" , ""turkish"" , EXACT } ,', '{ ""Carvalho"" , ""portuguese"" } ,', '{ "" \\ u00e1cz"" , ""any"" , EXACT } ,', '{ ""Giacometti"" , ""italian"" } ,', '{ ""Nagy"" , ""hungarian"" , EXACT } ,', '{ ""Thompson"" , ""english"" } ,']","['public void testEncodeHexByteBufferZeroes ( ) {', 'public void testEncodeHexByteString ByteBufferOfZeroes ( ) {', '@ Test', 'public void testEncodeHexByteString ByteArrayOfZeroes ( ) {', 'final String c = Hex . encodeHexString ( ByteBuffer . allocate ( 36 ) ) ;', 'assertEquals ( ""000000000000000000000000000000000000000000000000000000000000000000000000"" , c ) ;', '}', 'public void testEncodeHex ByteBufferOfZeroes ( ) {', 'final String c = Hex . encodeHexString ( new byte [ 36 ] ) ;']","['public static String encodeHexString ( final byte [ ] data , boolean toLowerCase ) {', 'return new String ( encodeHex ( data , toLowerCase ) ) ;', 'public static String encodeHexString ( final ByteBuffer data , boolean toLowerCase ) {', '}', 'public void testEncodeHexByteString ByteBufferBoolean ToLowerCase ( ) {', 'assertEquals ( ""0a"" , Hex . encodeHexString ( ByteBuffer . wrap ( new byte [ ] { 10 } ) , true ) ) ;', 'public void testEncodeHexByteString ByteArrayBoolean ToLowerCase ( ) {', 'assertEquals ( ""0A"" , Hex . encodeHexString ( new byte [ ] { 10 } , false ) ) ;', '@ Test', 'assertEquals ( ""0A"" , Hex . encodeHexString ( ByteBuffer . wrap ( new byte [ ] { 10 } ) , false ) ) ;']","['parseRules ( scanner , RESOURCE FILE , RULES , FOLDINGS ) ;', 'try {', 'scanner . close ( ) ;', '}', '} finally {', 'parseRules ( scanner , RESOURCE FILE , RULES , FOLDINGS ) ;', 'scanner . close ( ) ;', 'rs . put ( l , parseRules ( createScanner ( s , rt , l ) , createResourceName ( s , rt , l ) ) ) ;', 'try {', 'lines . putAll ( parseRules ( createScanner ( incl ) , location + "" - > "" + incl ) ) ;']","['return new String ( bytes , Charsets . UTF 16BE ) ;', 'return newString ( bytes , Charsets . ISO 8859 1 ) ;', 'return new String ( bytes , Charsets . UTF 16LE ) ;', 'return newString ( bytes , Charsets . UTF 16 ) ;', 'return new String ( bytes , Charsets . UTF 16 ) ;', 'return newString ( bytes , Charsets . US ASCII ) ;', 'return new String ( bytes , Charsets . US ASCII ) ;', 'return newString ( bytes , Charsets . UTF 16BE ) ;', 'return new String ( bytes , Charsets . ISO 8859 1 ) ;', 'return newString ( bytes , Charsets . UTF 16LE ) ;']","[""WWW FORM URL . set ( ' ' ) ;"", ""WWW FORM URL SAFE . set ( ' - ' ) ;"", 'protected static final BitSet WWW FORM URL = new BitSet ( 256 ) ;', ""WWW FORM URL SAFE . set ( ' . ' ) ;"", ""WWW FORM URL . set ( ' . ' ) ;"", 'private static final BitSet WWW FORM URL SAFE = new BitSet ( 256 ) ;', ""WWW FORM URL . set ( ' * ' ) ;"", ""WWW FORM URL SAFE . set ( ' ' ) ;"", ""WWW FORM URL . set ( ' - ' ) ;"", ""WWW FORM URL SAFE . set ( ' * ' ) ;""]","['return CharSequenceUtils . regionMatches ( cs1 , false , 0 , cs2 , 0 , Math . max ( cs1 . length ( ) , cs2 . length ( ) ) ) ;', 'return cs1 . length ( ) = = cs2 . length ( ) & & CharSequenceUtils . regionMatches ( cs1 , false , 0 , cs2 , 0 , cs1 . length ( ) ) ;', 'public void testEqualsCS2 ( ) {', 'Assert . assertTrue ( StringUtils . equals ( ""abc"" , new StringBuilder ( ""abc"" ) ) ) ;', 'Assert . assertFalse ( StringUtils . equals ( ""abcd"" , new StringBuilder ( ""abc"" ) ) ) ;', '@ Test', 'Assert . assertTrue ( StringUtils . equals ( null , null ) ) ;', '}', 'Assert . assertFalse ( StringUtils . equals ( ""abc"" , ""abcd"" ) ) ;', 'Assert . assertFalse ( StringUtils . equals ( null , new StringBuilder ( ""abc"" ) ) ) ;']","['final char hex2 = Character . toUpperCase ( Character . forDigit ( b & 0xF , 16 ) ) ;', 'final char hex1 = Utils . hexDigit ( b > > 4 ) ;', 'final char hex1 = Character . toUpperCase ( Character . forDigit ( ( b > > 4 ) & 0xF , 16 ) ) ;', 'final char hex2 = Utils . hexDigit ( b ) ;', 'final char hex1 = Character . toUpperCase ( Character . forDigit ( ( b > > 4 ) & 0xF , RADIX ) ) ;', 'final char hex1 = Utils . hexDigit ( b > > 4 ) ;', 'static final int RADIX = 16 ;', 'final char hex2 = Utils . hexDigit ( b ) ;', 'final char hex2 = Character . toUpperCase ( Character . forDigit ( b & 0xF , RADIX ) ) ;', 'throw new DecoderException ( ""Invalid URL encoding : not a valid digit ( radix "" + URLCodec . RADIX + "" ) : "" + b ) ;']","['new Random ( ) . nextBytes ( randomBytes ) ;', 'random2 . nextBytes ( randomBytes ) ;', 'byte randomBytes [ ] = new byte [ new Random ( ) . nextInt ( 2048 ) ] ;', 'byte randomBytes [ ] = new byte [ random1 . nextInt ( 2048 ) ] ;', 'final Random random1 = new Random ( ) ;', 'final Random random2 = new Random ( ) ;']","['protected String charset ;', 'protected volatile String charset ;']","['return StringUtils . newStringUtf8 ( encodeBase64 ( binaryData , false ) ) ;', 'return StringUtils . newStringUsAscii ( encodeBase64 ( binaryData , false , true ) ) ;', 'return StringUtils . newStringUtf8 ( encodeBase64 ( binaryData , false , true ) ) ;', 'return StringUtils . newStringUsAscii ( encodeBase64 ( binaryData , false ) ) ;']","['last = this . map ( str . charAt ( 0 ) ) ;', 'continue ;', 'out [ count + + ] = mapped ;', 'char digit = map ( ch ) ;', 'if ( index < 0 | | index > = this . getSoundexMapping ( ) . length ) {', 'if ( index < 0 | | index > = this . soundexMapping . length ) {', 'return this . getSoundexMapping ( ) [ index ] ;', ""if ( digit ! = '0' & & digit ! = lastDigit ) {"", 'while ( incount < str . length ( ) & & count < out . length ) {', '}']","['throw new IllegalArgumentException ( ""The character is not mapped : "" + ch ) ;', 'return true ;', ""if ( ch = = 'H' | | ch = = 'W' ) {"", 'throw new IllegalArgumentException ( ""The character is not mapped : "" + ch + "" ( index = "" + index + "" ) "" ) ;', 'this . soundexMapping = mapping . toCharArray ( ) ;', '}', 'if ( digit = = SILENT MARKER ) {', 'continue ;', 'private final boolean specialCaseHW ;', 'public Soundex ( final String mapping , boolean specialCaseHW ) {']","['public static byte [ ] sha ( final byte [ ] data ) {', 'public static byte [ ] sha ( final byte [ ] data ) {', '@ Deprecated', '@ Deprecated', '}', '}', 'return sha1 ( data ) ;', 'return sha1 ( data ) ;']","['25 , 26 , 27 , 28 , 29 , 30 , 31 ,', '25 , 26 , 27 , 28 , 29 , 30 , 31', '- 1 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 ,', '15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , / * * /', '25 , 26 , 27 , 28 , 29 , 30 , 31 ,', '- 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 ,', '- 1 , 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 ,', '- 1 , - 1 , - 1 , - 1 , - 1 ,', 'try {', '@ Test']","['public void update ( int b ) {', 'rotateLeft ( state [ 0 ] , 1 ) +', 'while ( off < = limit ) {', 'state [ 3 ] = seed - PRIME1 ;', '@ Override', 'import static java . lang . Integer . rotateLeft ;', 'final int size = BUF SIZE - pos ;', 'private static long fromLittleEndian ( byte [ ] bytes , final int off , final int length ) {', 'if ( totalLen > BUF SIZE ) {', 'l | = ( bytes [ off + i ] & 0xffl ) < < ( 8 * i ) ;']","['private byte [ ] data = new byte [ 32 ] ;', 'private final byte [ ] data = new byte [ 32 ] ;']","['for ( byte octet : arrayOctet ) {', 'for ( final byte octet : arrayOctet ) {', 'for ( String messageDigestAlgorithm : digestAlgorithms ) {', 'for ( final String source : inputs ) {', 'for ( String source : inputs ) {', 'for ( final File file : files ) {', 'for ( File file : files ) {', 'for ( final String messageDigestAlgorithm : digestAlgorithms ) {', '} catch ( NoSuchAlgorithmException e ) {', '} catch ( final NoSuchAlgorithmException e ) {']","['public byte [ ] encode ( final byte [ ] pArray , int offset , int length ) {', 'public byte [ ] encode ( final byte [ ] pArray , final int offset , final int length ) {', 'public static String encodeHexString ( final byte [ ] data , boolean toLowerCase ) {', 'public static String encodeHexString ( final byte [ ] data , final boolean toLowerCase ) {', 'public static String encodeHexString ( final ByteBuffer data , boolean toLowerCase ) {', 'public static byte [ ] decodeHex ( final String data ) throws DecoderException {', 'public static byte [ ] decodeHex ( String data ) throws DecoderException {', 'public static String encodeHexString ( final ByteBuffer data , final boolean toLowerCase ) {', 'private void run ( String prefix , MessageDigest messageDigest , File [ ] files ) throws IOException {', 'private void println ( final String prefix , final byte [ ] digest , final String fileName ) {']","['for ( int i = 0 ; i < threads . length ; i + + ) {', 'thread . join ( ) ;', 'threads [ i ] . join ( ) ;', 'thread . start ( ) ;', 'for ( int i = 0 ; i < bytes . length ; i + + ) {', 'theirs . update ( b ) ;', 'ours . update ( bytes [ i ] ) ;', 'for ( Thread thread : threads ) {', 'threads [ i ] . start ( ) ;', 'for ( byte b : bytes ) {']","['else', '} else {', 'if ( element . length > 2 )', 'if ( element . length > 2 ) {', '}']","['for ( Thread thread : threads ) {', 'for ( final byte b : bytes ) {', 'for ( byte b : bytes ) {', 'for ( final Thread thread : threads ) {']","['return Arrays . asList (', 'import org . apache . commons . lang3 . JavaVersion ;', 'import java . util . ArrayList ;', 'return list ;', '}', 'static final byte [ ] STANDARD SHA224 RESULT BYTES = new byte [ ] { - 120 , - 1 , - 117 , 84 , 103 , 93 , 57 , - 72 , - 9 , 35 , 34 ,', 'import java . util . List ;', 'static final String STANDARD SHA224 RESULT STRING = ""88ff8b54675d39b8f72322e65ff945c52d96379988ada25639747e69"" ;', 'if ( SystemUtils . isJavaVersionAtLeast ( JavaVersion . JAVA 1 8 ) ) {', 'list = new ArrayList < Object [ ] > ( list ) ;']","['private static final Map < Character , Character > FOLDINGS = new HashMap < Character , Character > ( ) ;', 'private static final Map < Character , Character > FOLDINGS = new HashMap < > ( ) ;', 'final Set < Branch > currentBranches = new LinkedHashSet < Branch > ( ) ;', 'rules = new ArrayList < > ( ) ;', 'private static final Map < Character , List < Rule > > RULES = new HashMap < Character , List < Rule > > ( ) ;', 'private static final Map < Character , List < Rule > > RULES = new HashMap < > ( ) ;', 'rules = new ArrayList < Rule > ( ) ;', 'final Set < Branch > currentBranches = new LinkedHashSet < > ( ) ;', 'final List < LangRule > rules = new ArrayList < LangRule > ( ) ;', 'private static final Map < NameType , Lang > Langs = new EnumMap < > ( NameType . class ) ;']","['final BufferedInputStream stream = new BufferedInputStream ( new FileInputStream ( data ) ) ;', 'try ( final BufferedInputStream stream = new BufferedInputStream ( new FileInputStream ( data ) ) ) {', 'stream . close ( ) ;', '} finally {', 'try {', 'stream . close ( ) ;', 'try ( final BufferedInputStream stream = new BufferedInputStream ( new FileInputStream ( valueToDigest ) ) ) {', '} finally {', 'try {', 'final BufferedInputStream stream = new BufferedInputStream ( new FileInputStream ( valueToDigest ) ) ;']","['public void testSha512 ( ) throws IOException {', 'public void testSha512 ( ) {', 'public void testSha224 ( ) throws IOException {', 'public void testSha224 ( ) {', 'public void testMacString ( ) throws IOException {', 'public void testHmacFailString ( ) {', 'public void testMacByteArary ( ) throws IOException {', 'public void testMacByteArary ( ) {', 'public void testHmacFailString ( ) throws IOException {', 'public void testMacHexString ( ) {']","['for ( int i = 0 ; i < trials ; i + + ) {', 'for ( int trialIndex = 0 ; trialIndex < trials ; trialIndex + + ) {']","['fail ( ""EncoderException exptected"" ) ;', 'import static org . junit . Assert . fail ;']","['final String cr = System . getProperty ( ""line . separator"" ) ;', 'final String cr = System . lineSeparator ( ) ;']","['return new String ( decode ( StringUtils . getBytesUsAscii ( str ) ) , charset ) ;', 'public String encode ( final String str , final String charsetName ) throws UnsupportedEncodingException {', 'return StringUtils . newStringUsAscii ( encode ( str . getBytes ( charset ) ) ) ;', 'return new String ( decode ( StringUtils . getBytesUsAscii ( str ) ) , charsetName ) ;', 'public String decode ( final String str , final String charset ) throws DecoderException , UnsupportedEncodingException {', 'return StringUtils . newStringUsAscii ( encode ( str . getBytes ( charsetName ) ) ) ;', 'public String encode ( final String str , final String charset ) throws UnsupportedEncodingException {', 'public String decode ( final String str , final String charsetName ) throws DecoderException , UnsupportedEncodingException {']","['public String decode ( final String str , final String charsetName ) throws DecoderException , UnsupportedEncodingException {', 'public String decode ( final String str , final String charsetName )', 'throws DecoderException , UnsupportedEncodingException {']","[""if ( b = = ' ' ) {"", 'this . alwaysEncodeChars . set ( b ) ;', 'return true ;', 'if ( b > alwaysEncodeCharsMax ) {', 'buffer . put ( ESCAPE CHAR ) ;', 'private final BitSet alwaysEncodeChars = new BitSet ( ) ;', 'i + = b = = ESCAPE CHAR ? 3 : 1 ;', 'if ( b = = ESCAPE CHAR ) {', '@ Override', 'if ( alwaysEncodeChars ! = null ) {']","['} else {', 'return bytes ;', 'return bytes ;']","['for ( byte b : alwaysEncodeChars ) {', 'if ( alwaysEncodeCharsArray ! = null ) {', 'if ( alwaysEncodeChars ! = null ) {', 'private void insertAlwaysEncodeChars ( final byte [ ] alwaysEncodeCharsArray ) {', 'private void insertAlwaysEncodeChars ( final byte [ ] alwaysEncodeChars ) {', 'for ( byte b : alwaysEncodeCharsArray ) {']","['return new String ( decode ( StringUtils . getBytesUsAscii ( str ) ) , charset ) ;', 'return new String ( decode ( StringUtils . getBytesUsAscii ( str ) ) , sourceCharset ) ;', 'return StringUtils . newStringUsAscii ( this . encode ( str . getBytes ( charset ) ) ) ;', 'public String decode ( final String str , final String sourceCharset ) throws DecoderException , UnsupportedEncodingException {', 'public String encode ( final String str , final String charset ) throws UnsupportedEncodingException {', 'return StringUtils . newStringUsAscii ( encode ( str . getBytes ( sourceCharset ) ) ) ;', 'public String decode ( final String str , final Charset charset ) throws DecoderException {', 'return new String ( this . decode ( StringUtils . getBytesUsAscii ( str ) ) , sourceCharset ) ;', 'public String encode ( final String str , final Charset charset ) {', 'public String decode ( final String str , final Charset sourceCharset ) throws DecoderException {']","['return this . decode ( str , this . getCharset ( ) ) ;', 'return StringUtils . newStringUsAscii ( encode ( sourceStr . getBytes ( sourceCharset ) ) ) ;', 'return this . encode ( str , getCharset ( ) ) ;', 'public String decode ( final String sourceStr , final Charset sourceCharset ) throws DecoderException {', 'return new String ( decode ( StringUtils . getBytesUsAscii ( str ) ) , sourceCharset ) ;', 'return this . encode ( sourceStr , getCharset ( ) ) ;', 'public String decode ( final String str , final String sourceCharset ) throws DecoderException , UnsupportedEncodingException {', 'public String decode ( final String sourceStr ) throws DecoderException {', 'return StringUtils . newStringUsAscii ( encode ( str . getBytes ( sourceCharset ) ) ) ;', 'if ( sourceStr = = null ) {']","['private static final byte BLANK = 32 ;', 'if ( data [ i ] = = SPACE ) {', 'if ( data [ i ] = = BLANK ) {', 'tmp [ i ] = SPACE ;', 'tmp [ i ] = BLANK ;', 'private static final byte SPACE = 32 ;']","['import static org . junit . Assert . assertTrue ;', 'import org . junit . Ignore ;', 'import static org . junit . Assert . assertEquals ;', 'import org . junit . Assert ;', '@ Test', 'PercentCodec percentCodec = new PercentCodec ( ) ;', '}', 'import static org . junit . Assert . assertTrue ;', 'import static org . junit . Assert . assertEquals ;', 'public void testBasicSpace ( ) throws Exception {']","['public void testUnsafeCharEncodeDecode ( ) throws Exception {', 'public void testUnsafeCharEncodeDecode ( ) throws Exception {', 'assertEquals ( percentCodec . decode ( ( Object ) null ) , null ) ;', 'try {', '@ Test', 'PercentCodec percentCodec = new PercentCodec ( ) ;', 'final String input = ""abc123 - . * "" ;', '@ Test', 'PercentCodec percentCodec = new PercentCodec ( ) ;', 'assertEquals ( percentCodec . decode ( ( Object ) null ) , null ) ;']","['byte [ ] encoded = percentCodec . encode ( input . getBytes ( Charset . forName ( ""UTF - 8"" ) ) ) ;', 'Assert . assertArrayEquals ( "" % 20"" . getBytes ( StandardCharsets . UTF 8 ) , encoded ) ;', 'import java . nio . charset . Charset ;', 'byte [ ] encoded = percentCodec . encode ( input . getBytes ( StandardCharsets . UTF 8 ) ) ;', 'Object encoded = percentCodec . encode ( ( Object ) input . getBytes ( Charset . forName ( ""UTF - 8"" ) ) ) ;', 'import java . nio . charset . StandardCharsets ;', 'Assert . assertArrayEquals ( "" % 20"" . getBytes ( Charset . forName ( ""UTF - 8"" ) ) , encoded ) ;', 'Object encoded = percentCodec . encode ( ( Object ) input . getBytes ( StandardCharsets . UTF 8 ) ) ;']","['public String encode ( final String value , final Charset charset ) throws EncoderException {', 'public String encode ( final String strSource ) throws EncoderException {', 'if ( value = = null ) {', 'public String encode ( final String strSource , final String sourceCharset ) throws EncoderException {', 'public String encode ( final String value , final String charset ) throws EncoderException {', 'public String encode ( final String strSource , final Charset sourceCharset ) throws EncoderException {', 'public String encode ( final String value ) throws EncoderException {', 'return encodeText ( strSource , sourceCharset ) ;', 'return encodeText ( value , charset ) ;', 'return this . encodeText ( strSource , sourceCharset ) ;']","['return encodeText ( str , charset ) ;', 'return encodeText ( str , sourceCharset ) ;', 'public String encode ( final String str , final String charset ) throws EncoderException {', 'public String encode ( final String str , final Charset sourceCharset ) throws EncoderException {', 'public String encode ( final String str , final Charset charset ) throws EncoderException {', 'public String encode ( final String str , final String sourceCharset ) throws EncoderException {']","['public String encode ( final String str , final String sourceCharset ) throws EncoderException {', 'public String encode ( final String sourceStr , final Charset sourceCharset ) throws EncoderException {', 'if ( str = = null ) {', 'return encode ( sourceStr , getCharset ( ) ) ;', 'return encode ( str , getCharset ( ) ) ;', 'public String encode ( final String sourceStr , final String sourceCharset ) throws EncoderException {', 'public String encode ( final String str ) throws EncoderException {', 'if ( sourceStr = = null ) {', 'public String encode ( final String str , final Charset sourceCharset ) throws EncoderException {', 'public String encode ( final String sourceStr ) throws EncoderException {']","['import java . util . Random ;', 'saltString . append ( B64T . charAt ( current . nextInt ( B64T . length ( ) ) ) ) ;', 'final StringBuilder saltString = new StringBuilder ( ) ;', 'import java . util . concurrent . ThreadLocalRandom ;', 'saltString . append ( B64T . charAt ( new Random ( ) . nextInt ( B64T . length ( ) ) ) ) ;', 'final ThreadLocalRandom current = ThreadLocalRandom . current ( ) ;', 'final StringBuilder saltString = new StringBuilder ( num ) ;']","['import java . util . Random ;', 'import java . util . concurrent . ThreadLocalRandom ;', 'final Random randomGenerator = new Random ( ) ;', 'import java . security . SecureRandom ;', 'final ThreadLocalRandom randomGenerator = ThreadLocalRandom . current ( ) ;']","['import java . util . concurrent . ThreadLocalRandom ;', 'import java . security . SecureRandom ;', 'import java . util . concurrent . ThreadLocalRandom ;', 'import java . security . SecureRandom ;']","['import java . util . concurrent . ThreadLocalRandom ;', 'import java . security . SecureRandom ;']","['this . getStringEncoder ( ) . isEncodeEqual ( element [ 1 ] , element [ 0 ] ) ;', 'final boolean encodeEqual = this . getStringEncoder ( ) . isEncodeEqual ( element [ 1 ] , element [ 0 ] ) ;', 'import org . junit . Assert ;']","['{ ""Meyer"" , ""M \\ u00fcller"" } ,', 'public void testIsEncodeEqualsCodec246 ( ) {', 'import org . junit . Ignore ;', 'for ( final String [ ] element : data ) {', 'final String [ ] [ ] data = {', '@ Test', '@ Ignore ( ""https : / / issues . apache . org / jira / browse / CODEC - 246"" )', '} ;', '}', '{ ""Meyer"" , ""M \\ u00fcller"" } ,']","['public void testIsEncodeEqualsCodec246 ( ) {', '{ ""Muller"" , ""M \\ u00fcller"" } ,', 'for ( final String [ ] element : data ) {', 'final String [ ] [ ] data = {', '@ Ignore ( ""https : / / issues . apache . org / jira / browse / CODEC - 246"" )', '@ Test', '} ;', '{ ""Meyer"" , ""M \\ u00fcller"" } ,', '}', 'final boolean encodeEqual = this . getStringEncoder ( ) . isEncodeEqual ( element [ 1 ] , element [ 0 ] ) ;']","['{ ""sch \\ u00e4fer"" , ""837"" } ,', '{ "" \\ u00DF"" , ""8"" } ,', '{ ""m \\ u00FCller"" , ""657"" } ,']","['"" . * [ ^ CKQ ] X . * "" ,', '"" . * [ SZ ] C . * "" ,', 'return true ;', 'super . checkEncoding ( expected , source ) ;', '"" . * L . * "" ,', 'System . out . println ( m + "" has no test case"" ) ;', '"" . * [ FVW ] . * "" ,', '{ ""Celsius"" , ""8588"" } ,', '}', 'errors + + ;']","['}', 'break ;', 'if ( chrs [ index ] = = element [ 0 ] ) {', ""case ' \\ u00D6' :"", ""{ ' \\ u00C4' , 'A' } ,"", ""chrs [ index ] = 'O' ;"", ""{ ' \\ u00DC' , 'U' } ,"", 'switch ( chrs [ index ] ) {', 'break ;', ""case ' \\ u00DC' :""]","['rightLength + + ;', 'while ( input . length ( ) > 0 ) {', 'int rightLength = input . length ( ) ;', 'if ( input . length ( ) > 0 ) {', 'if ( ( rightLength = input . length ( ) ) > 0 ) {', 'while ( rightLength > 0 ) {']","['ColognePhonetic coder = new ColognePhonetic ( ) ;', 'public static void main ( String args [ ] ) {', '}', 'String code = coder . encode ( arg ) ;', 'System . out . println ( ""\'"" + arg + ""\' = \'"" + code + ""\'"" ) ;', 'for ( String arg : args ) {']","['{ "" { mn } "" , ""6"" } ,']","['continue ;', 'code = chr ;', 'code = CHAR IGNORE ;', 'continue ;', '}', ""if ( chr = = 'H' | | chr < 'A' | | chr > 'Z' ) {"", ""} else if ( chr = = 'H' | | chr < 'A' | | chr > 'Z' ) {"", '}', 'code = chr ;', 'if ( lastCode = = CHAR FIRST POS ) {']","['@ SuppressWarnings ( ""deprecation"" )', '@ SuppressWarnings ( ""deprecation"" )']","['putLong ( ze . getSize ( ) , buf , LFH COMPRESSED SIZE OFFSET ) ;', 'if ( phased & & !isZip64Required ( entry . entry , zip64Mode ) ) {', 'closeCopiedEntry ( ) ;', 'putShort ( INITIAL VERSION , buf , LFH VERSION NEEDED OFFSET ) ;', 'System . arraycopy ( LZERO , 0 , buf , LFH ORIGINAL SIZE OFFSET , WORD ) ;', '}', 'private void closeEntry ( boolean actuallyNeedsZip64 ) throws IOException {', '} else {', 'final Zip64Mode effectiveMode = getEffectiveZip64Mode ( entry . entry ) ;', 'boolean is2PhaseSource = ae . getCrc ( ) ! = - 1']","['writeCentralFileHeader ( ze ) ;', 'return createCentralFileHeader ( ze , getName ( ze ) , lfhOffset , needsZip64Extra ) ;', '}', 'import java . util . Iterator ;', '. ARCHIVE TOO BIG MESSAGE ) ;', 'writeCentralDirectoryInChunks ( ) ;', 'byte [ ] centralFileHeader = createCentralFileHeader ( ze , getName ( ze ) , lfhOffset , needsZip64Extra ) ;', 'ze = iterator . next ( ) ;', 'System . arraycopy ( ZERO , 0 , buf , CFH DISK NUMBER OFFSET , SHORT ) ;', 'byteArrayOutputStream . reset ( ) ;']","['if ( includeUnparseable & & unparseableExtra ! = null ) {', 'zipExtraFields [ zipExtraFields . length ] = unparseableExtra ;', 'return ExtraFieldUtils . mergeCentralDirectoryData ( getExtraFields ( true ) ) ;', 'private ZipExtraField [ ] getMergedFields ( ) {', '& & name . indexOf ( "" / "" ) = = - 1 ) {', 'getParseableExtraFields ( ) ;', 'return !includeUnparseable | | unparseableExtra = = null', 'extraFields [ 0 ] = ze ;', 'copy . remove ( ze . getHeaderId ( ) ) ;', 'return getUnparseableOnly ( ) ;']","['final long lfhOffset = offsets . get ( ze ) . longValue ( ) ;', 'final long lfhOffset = offsets . get ( ze ) ;']","['+ ""\' is too big ( > ""', 'failForBigNumberWithPosixMessage ( ""group id"" , entry . getGroupId ( ) , TarConstants . MAXID ) ;', '+ maxValue + "" ) "" ) ;', '}', 'failForBigNumber ( ""group id"" , entry . getGroupId ( ) , TarConstants . MAXID ) ;', '+ maxValue + "" ) . "" + additionalMsg ) ;', 'private void failForBigNumber ( String field , long value , long maxValue , String additionalMsg ) {', 'private void failForBigNumberWithPosixMessage ( String field , long value , long maxValue ) {', '+ ""\' is too big ( > ""', 'failForBigNumber ( field , value , maxValue , "" Use STAR or POSIX extensions to overcome this limit"" ) ;']","['private final ZipEncoding encoding ;', 'currEntry = new TarArchiveEntry ( headerBuf , zipEncoding ) ;', 'this . encoding = ZipEncodingHelper . getZipEncoding ( encoding ) ;', 'currEntry . setName ( zipEncoding . decode ( longNameData ) ) ;', 'currEntry . setName ( encoding . decode ( longNameData ) ) ;', 'currEntry . setLinkName ( zipEncoding . decode ( longLinkData ) ) ;', 'currEntry . setLinkName ( encoding . decode ( longLinkData ) ) ;', 'private final ZipEncoding zipEncoding ;', 'currEntry = new TarArchiveEntry ( headerBuf , encoding ) ;', 'this . zipEncoding = ZipEncodingHelper . getZipEncoding ( encoding ) ;']","['}', 'return new LZMACompressorInputStream ( in ) ;', 'if ( LZMAUtils . matches ( signature , signatureLength ) & &', 'LZMAUtils . isLZMACompressionAvailable ( ) ) {', 'import org . apache . commons . compress . compressors . lzma . LZMAUtils ;']","['}', 'if ( DeflateCompressorInputStream . matches ( signature , signatureLength ) ) {', 'return new DeflateCompressorInputStream ( in ) ;']","['for ( int i = 0 ; i < this . rcount ; i + + ) {', 'this . algId = EncryptionAlgorithm . getAlgorithmByCode ( ZipShort . getValue ( data , offset + ivSize + 8 ) ) ;', 'return getLocalFileDataLength ( ) ;', 'int vSize = ZipShort . getValue ( data , offset + ivSize + 26 + erdSize + resize ) ;', 'return hashAlg ;', 'private byte [ ] localData ;', 'private int bitlen ;', 'public HashAlgorithm getHashAlgorithm ( ) {', 'return new ZipShort ( localData ! = null ? localData . length : 0 ) ;', 'System . arraycopy ( data , offset , tmp , 0 , length ) ;']","['}', 'return createArchiveInputStream ( AR , in ) ;', 'if ( entryEncoding ! = null ) {', 'return createArchiveInputStream ( CPIO , in ) ;', '} else {', 'return createArchiveInputStream ( DUMP , in ) ;', 'return new ArArchiveInputStream ( in ) ;', 'return createArchiveInputStream ( ZIP , in ) ;', 'return new DumpArchiveInputStream ( in , entryEncoding ) ;', 'return createArchiveInputStream ( JAR , in ) ;']",['offset + = read > 0 ? read : 0 ;'],"['| | ze . getSize ( ) > = ZIP64 MAGIC ) {', '| | lfhOffset > = ZIP64 MAGIC', '| | lfhOffset > = ZIP64 MAGIC ;', 'if ( lfhOffset > = ZIP64 MAGIC | | zip64Mode = = Zip64Mode . Always ) {', 'putLong ( Math . min ( lfhOffset , ZIP64 MAGIC ) , buf , CFH LFH OFFSET ) ;', '}', 'if ( lfhOffset > = ZIP64 MAGIC ) {', 'putLong ( Math . min ( lfhOffset , ZIP64 MAGIC ) , buf , CFH LFH OFFSET ) ;', 'if ( lfhOffset > = ZIP64 MAGIC | | zip64Mode = = Zip64Mode . Always ) {', 'else {']","['new Inflater ( true ) ) ;', 'inflater . end ( ) ;', 'return new InflaterInputStream ( new DummyByteAddingInputStream ( in ) ,', 'inflaterInputStream . close ( ) ;', 'return new DeflaterOutputStream ( out , new Deflater ( level , true ) ) ;', 'deflater . end ( ) ;', 'deflaterOutputStream . close ( ) ;', 'public int read ( ) throws IOException {', 'public void write ( byte [ ] b ) throws IOException {', 'final InflaterInputStream inflaterInputStream = new InflaterInputStream ( new DummyByteAddingInputStream ( in ) ,']","['public void finish ( ) throws IOException {', 'public synchronized void finish ( ) throws IOException {']","['if ( closed ) {', 'if ( out ! = null ) {', 'closed = true ;', 'if ( this . out ! = null ) {', 'public void finish ( ) throws IOException {', 'public synchronized void finish ( ) throws IOException {', 'if ( !closed ) {', 'if ( this . out = = null ) {', 'private volatile boolean closed ;']","['} finally {', 'private final Object outLock = new Object ( ) ;', 'this . out = null ;', 'this . blockSorter = null ;', 'try {', 'synchronized ( outLock ) {', 'writeRun ( ) ;', 'this . data = null ;', 'this . currentChar = - 1 ;', '}']","['IOUtils . closeQuietly ( raf ) ;', 'if ( ze . getMethod ( ) ! = DEFLATED | | channel ! = null ) {', '& & raf ! = null & & mode ! = Zip64Mode . Never ) ;', 'return zipMethod = = DEFLATED & & channel = = null ;', 'import java . io . RandomAccessFile ;', 'if ( channel ! = null ) {', 'raf . setLength ( 0 ) ;', 'streamCompressor = StreamCompressor . create ( channel , def ) ;', 'raf . seek ( entry . localDataStart ) ;', 'this . channel = channel ;']","['this . decompressUntilEOF = null ;', 'if ( XZUtils . matches ( signature , signatureLength ) & & XZUtils . isXZCompressionAvailable ( ) ) {', 'public class CompressorStreamFactory {', 'if ( LZMAUtils . matches ( signature , signatureLength ) & & LZMAUtils . isLZMACompressionAvailable ( ) ) {', 'XZUtils . isXZCompressionAvailable ( ) ) {', 'public CompressorInputStream createCompressorInputStream ( final InputStream in ) throws CompressorException {', 'throws CompressorException {', '} ) ;', 'if ( LZMAUtils . matches ( signature , signatureLength ) & &', 'public CompressorOutputStream createCompressorOutputStream ( final String name , final OutputStream out )']","['TreeMap < String , CompressorStreamProvider > map = new TreeMap < > ( ) ;', 'return new XZCompressorInputStream ( in , actualDecompressConcatenated ) ;', 'return compressorStreamProvider . createCompressorInputStream ( name , in ) ;', '}', 'static void putAll ( Set < String > names , CompressorStreamProvider provider ,', 'final boolean actualDecompressConcatenated ) throws CompressorException {', 'return new BZip2CompressorInputStream ( in , decompressConcatenated ) ;', 'return compressorStreamProvider . createCompressorInputStream ( name , in , actualDecompressConcatenated ) ;', 'return new GzipCompressorInputStream ( in , decompressConcatenated ) ;', 'return new BZip2CompressorInputStream ( in , actualDecompressConcatenated ) ;']","['out . flush ( ) ;', 'out . finish ( ) ;', 'import java . io . IOException ;', 'public void write ( final byte [ ] buf , final int off , final int len ) throws IOException {', 'out = new LZMAOutputStream ( outputStream , new LZMA2Options ( ) , - 1 ) ;', 'public void close ( ) throws IOException {', 'private final LZMAOutputStream out ;', 'public LZMACompressorOutputStream ( final OutputStream outputStream )', 'package org . apache . commons . compress . compressors . lzma ;', 'public void finish ( ) throws IOException {']","['final byte [ ] dumpsig = new byte [ 32 ] ;', 'final byte [ ] dumpsig = new byte [ DUMP SIGNATURE SIZE ] ;', 'private static final int DUMP SIGNATURE SIZE = 32 ;']","['if ( signatureLength > = 512 ) {', 'if ( signatureLength > = TAR HEADER SIZE ) {', 'final byte [ ] tarheader = new byte [ 512 ] ;', 'private static final int TAR HEADER SIZE = 512 ;', 'final byte [ ] tarheader = new byte [ TAR HEADER SIZE ] ;']","['tais = new TarArchiveInputStream ( new ByteArrayInputStream ( tarheader ) ) ;', 'if ( TarArchiveInputStream . matches ( tarHeader , signatureLength ) ) {', 'if ( TarArchiveInputStream . matches ( tarheader , signatureLength ) ) {', 'in . mark ( tarHeader . length ) ;', 'signatureLength = IOUtils . readFully ( in , tarheader ) ;', 'tais = new TarArchiveInputStream ( new ByteArrayInputStream ( tarHeader ) ) ;', 'final byte [ ] tarheader = new byte [ TAR HEADER SIZE ] ;', 'final byte [ ] tarHeader = new byte [ TAR HEADER SIZE ] ;', 'in . mark ( tarheader . length ) ;', 'signatureLength = IOUtils . readFully ( in , tarHeader ) ;']","['private int asInt ( final byte [ ] input , final int base , final boolean treatBlankAsZero ) {', 'private int asInt ( final byte [ ] byteArray , final int base ) {', 'private int asInt ( final byte [ ] input , final boolean treatBlankAsZero ) {', 'return asInt ( byteArray , base , false ) ;', 'return asInt ( input , 10 , treatBlankAsZero ) ;', 'private long asLong ( final byte [ ] byteArray ) {', 'return asInt ( input , 10 , false ) ;', 'return asInt ( byteArray , 10 , treatBlankAsZero ) ;', 'final String string = ArchiveUtils . toAsciiString ( input ) . trim ( ) ;', 'private int asInt ( final byte [ ] byteArray , final boolean treatBlankAsZero ) {']","['originalOutput ) ;', 'ji = new JarInputStream ( streamBridge . getInput ( ) ) ;', 'p . pack ( ji = new JarInputStream ( streamBridge . getInput ( ) ) ,', 'p . pack ( ji , originalOutput ) ;']","['IOUtils . readFully ( this , LAST MODIFIED BUF ) ;', 'private final byte [ ] lengthBuf = new byte [ 10 ] ;', 'IOUtils . readFully ( this , LENGTH BUF ) ;', 'final int userId = asInt ( idBuf , true ) ;', 'IOUtils . readFully ( this , ID BUF ) ;', 'long len = asLong ( lengthBuf ) ;', 'private final byte [ ] LAST MODIFIED BUF = new byte [ 12 ] ;', 'asLong ( lastModifiedBuf ) ) ;', 'private final byte [ ] NAME BUF = new byte [ 16 ] ;', 'String temp = ArchiveUtils . toAsciiString ( nameBuf ) . trim ( ) ;']","['return Sets . newHashSet ( GZIP , BZIP2 , XZ , LZMA , PACK200 , DEFLATE , SNAPPY FRAMED , LZ4 BLOCK ) ;', '}', 'return Sets . newHashSet ( GZIP , BZIP2 , XZ , LZMA , PACK200 , SNAPPY RAW , SNAPPY FRAMED , Z , DEFLATE , LZ4 BLOCK ) ;', 'return new FramedLZ4CompressorInputStream ( in ) ;', 'if ( FramedLZ4CompressorInputStream . matches ( signature , signatureLength ) ) {', 'public static String getLZ4Framed ( ) {', 'public static String getLZ4Block ( ) {', 'LZ4 FRAMED ) ;', 'import org . apache . commons . compress . compressors . lz4 . FramedLZ4CompressorInputStream ;', 'if ( LZ4 FRAMED . equalsIgnoreCase ( name ) ) {']","['in = new LZMAInputStream ( inputStream ) ;', '}', 'public LZMACompressorInputStream ( final InputStream inputStream )', 'throws IOException {', 'in = new LZMAInputStream ( inputStream , - 1 ) ;', 'public LZMACompressorInputStream ( final InputStream inputStream )', 'in = new LZMAInputStream ( inputStream , memoryLimitKb ) ;', 'public LZMACompressorInputStream ( final InputStream inputStream , int memoryLimitKb )', 'return new LZMACompressorInputStream ( in ) ;', '}']","['public CompressorStreamFactory ( final boolean decompressUntilEOF ) {', '}', 'return new ZCompressorInputStream ( in ) ;', 'this ( decompressUntilEOF , - 1 ) ;', 'return new LZMACompressorInputStream ( in ) ;', 'throw new CompressorMemoryLimitException ( ""exceeded calculated memory limit"" , e ) ;', 'return new LZMACompressorInputStream ( in , memoryLimitInKb ) ;', 'try {', '} catch ( MemoryLimitException e ) {', 'return new ZCompressorInputStream ( in , memoryLimitInKb ) ;']","['public int read ( ) throws IOException {', 'int read = read ( loc + + , singleByteBuffer ) ;', 'buffer . rewind ( ) . limit ( len ) ;', 'private long loc ;', 'archive . position ( pos ) ;', 'throw new IllegalArgumentException ( ""Invalid length of stream at offset = "" + start + "" , length = "" + remaining ) ;', 'int ret = - 1 ;', 'private final long end ;', 'loc = start ;', 'loc = start ;']","['package org . apache . commons . compress . compressors ;', 'public MemoryLimitException ( String message , Exception e ) {', 'public CompressorMemoryLimitException ( String message ) {', 'public MemoryLimitException ( String message ) {', 'public CompressorMemoryLimitException ( String message , Exception e ) {', 'public class MemoryLimitException extends IOException {', 'public class CompressorMemoryLimitException extends CompressorException {', 'import java . io . IOException ;', 'package org . apache . commons . compress ;', 'in = new LZMAInputStream ( inputStream , memoryLimitInKb ) ;']","['}', 'import org . apache . commons . compress . MemoryLimit ;', 'initializeTables ( maxCodeSize , memoryLimitInKb ) ;', 'initializeTables ( maxCodeSize , MemoryLimit . getMemoryLimitInKb ( ) ) ;', 'throws IOException {', 'public ZCompressorInputStream ( final InputStream inputStream ) throws IOException {', 'public ZCompressorInputStream ( final InputStream inputStream , int memoryLimitInKb )', 'this ( inputStream , - 1 ) ;', 'public ZCompressorInputStream ( final InputStream inputStream ) throws IOException {']","['putShort ( INITIAL VERSION , buf , LFH VERSION NEEDED OFFSET ) ;', 'return isDeflatedToOutputStream ( zipMethod )', 'writeOut ( ZipShort . getBytes ( INITIAL VERSION ) ) ;', '? DATA DESCRIPTOR MIN VERSION', 'INITIAL VERSION ;', 'putShort ( versionNeededToExtractMethod ( zipMethod ) , buf , LFH VERSION NEEDED OFFSET ) ;', 'DATA DESCRIPTOR MIN VERSION :', 'writeOut ( ZipShort . getBytes ( versionNeededToExtractMethod ( entry . entry . getMethod ( ) ) ) ) ;', 'return ( isDeflatedToOutputStream ( zipMethod ) ) ?', ': versionNeededToExtractMethod ( zipMethod ) ;']","['writeAsciiLong ( entry . getName ( ) . length ( ) + 1l , 8 , 16 ) ;', 'writeAsciiLong ( entry . getName ( ) . length ( ) + 1L , 8 , 16 ) ;', 'writeAsciiLong ( entry . getName ( ) . length ( ) + 1l , 6 , 8 ) ;', 'writeAsciiLong ( entry . getName ( ) . length ( ) + 1L , 6 , 8 ) ;', 'writeBinaryLong ( entry . getName ( ) . length ( ) + 1l , 2 , swapHalfWord ) ;', 'writeBinaryLong ( entry . getName ( ) . length ( ) + 1L , 2 , swapHalfWord ) ;']","['long namesize = name ! = null ? name . length ( ) : 0 ;', 'import java . nio . charset . Charset ;', 'return getHeaderPadCount ( namesize ) ;', 'return getHeaderPadCount ( name . getBytes ( charset ) . length ) ;', '}', 'if ( name = = null ) {', 'return getHeaderPadCount ( name . length ( ) ) ;', 'return getHeaderPadCount ( null ) ;', 'return 0 ;', '@ Deprecated']","['return getHeaderPadCount ( name . getBytes ( charset ) . length ) ;', 'if ( encoding = = null ) {', 'public int getHeaderPadCount ( Charset charset ) {', '}', 'import java . nio . charset . Charset ;', 'import java . io . IOException ;', 'if ( charset = = null ) {', 'throw new RuntimeException ( ""cannot encode "" + name , ex ) ;', 'try {', '} catch ( IOException ex ) {']","['} else {', '} else {', 'while ( len > wSize ) {', 'while ( len > wSize ) {']","['buf . length - writeIndex ) ;', 'final int reallyTryToRead = Math . min ( ( int ) Math . min ( bytesToRead , bytesRemaining ) ,', 'final int reallyTryToRead = ( int ) Math . min ( Math . min ( bytesToRead , bytesRemaining ) ,', 'buf . length - writeIndex ) ;', 'int copy = ( int ) Math . min ( Math . min ( bytesToCopy , bytesRemaining ) ,', 'int copy = Math . min ( ( int ) Math . min ( bytesToCopy , bytesRemaining ) ,']","['byte [ ] checksum = new byte [ 4 ] ;', 'capped = new ChecksumCalculatingInputStream ( blockHash , capped ) ;', 'if ( 4 ! = skipped ) {', 'if ( expectBlockChecksum ) {', 'count ( read ) ;', 'byte [ ] checksum = new byte [ 4 ] ;', '}', 'private void verifyChecksum ( XXHash32 hash , String kind ) throws IOException {', 'int read = IOUtils . readFully ( in , checksum ) ;', 'count ( read ) ;']","['appendToBlockDependencyBuffer ( b , off , r ) ;', 'if ( expectContentChecksum ) {', '}', 'appendToBlockDependencyBuffer ( b , off , r ) ;', 'if ( expectBlockDependency ) {', 'if ( r ! = - 1 ) {', 'contentHash . update ( b , off , r ) ;', '}', 'if ( expectContentChecksum & & r ! = - 1 ) {', 'if ( expectBlockDependency ) {']","['buffer . clear ( ) ;', 'return ( int ) ( fromLittleEndian ( buffer , idx , 4 ) & 0xffffffffl ) ;', 'idx + + ;', 'System . arraycopy ( b , off , buffer , 0 , BUF SIZE ) ;', 'buffer . flip ( ) ;', 'private int getInt ( int idx ) {', 's2 = rotateLeft ( s2 + buffer . getInt ( ) * PRIME2 , ROTATE BITS ) * PRIME1 ;', 'import static org . apache . commons . compress . utils . ByteUtils . fromLittleEndian ;', 'import java . nio . ByteBuffer ;', 'hash = rotateLeft ( hash + getInt ( idx ) * PRIME3 , 17 ) * PRIME4 ;']","['System . arraycopy ( b , off , buffer , 0 , BUF SIZE ) ;', 'process ( b , off ) ;', 'hash = rotateLeft ( hash + getInt ( idx ) * PRIME3 , 17 ) * PRIME4 ;', 's1 = rotateLeft ( s1 + getInt ( b , offset + 4 ) * PRIME2 , ROTATE BITS ) * PRIME1 ;', 's2 = rotateLeft ( s2 + getInt ( 8 ) * PRIME2 , ROTATE BITS ) * PRIME1 ;', 's2 = rotateLeft ( s2 + getInt ( b , offset + 8 ) * PRIME2 , ROTATE BITS ) * PRIME1 ;', 'private void process ( ) {', 'private void process ( byte [ ] b , int offset ) {', 's3 = rotateLeft ( s3 + getInt ( 12 ) * PRIME2 , ROTATE BITS ) * PRIME1 ;', 's3 = rotateLeft ( s3 + getInt ( b , offset + 12 ) * PRIME2 , ROTATE BITS ) * PRIME1 ;']",['private static final long serialVersionUID = 4112582948775420359L ;'],['c . close ( ) ;'],"['new DumpArchiveInputStream ( is ) ;', 'new DumpArchiveInputStream ( is ) . close ( ) ;', 'new SevenZFile ( getFile ( ""bla . encrypted . 7z"" ) ) ;', 'new SevenZFile ( getFile ( ""bla . encrypted . 7z"" ) ) . close ( ) ;', 'new ZipFile ( file ) ;', 'ZipFile zf = new ZipFile ( file ) ;', 'zf . close ( ) ;', 'new BZip2CompressorInputStream ( in ) ;', 'BZip2CompressorInputStream bis = new BZip2CompressorInputStream ( in ) ;', 'bis . close ( ) ;']",['finishTest . close ( ) ;'],"['@ SuppressWarnings ( ""resource"" )']","['int maxLen = BlockLZ4CompressorInputStream . WINDOW SIZE - 1 ;', 'compressor = new LZ77Compressor ( params ,', 'compressor = new LZ77Compressor ( new Parameters ( BlockLZ4CompressorInputStream . WINDOW SIZE ,', '. withMinBackReferenceLength ( MIN BACK REFERENCE LENGTH )', 'MIN BACK REFERENCE LENGTH , maxLen , maxLen , maxLen ) ,', 'return Parameters . builder ( BlockLZ4CompressorInputStream . WINDOW SIZE )', '. withMaxLiteralLength ( maxLen ) ;', '}', 'this ( os , createParameterBuilder ( ) . build ( ) ) ;', 'int maxLen = BlockLZ4CompressorInputStream . WINDOW SIZE - 1 ;']","['while ( matchHead > = minIndex ) {', 'if ( currentLength > = niceBackReferenceLength ) {', 'if ( currentLength = = maxPossibleLength ) {', 'final int maxCandidates = params . getMaxCandidates ( ) ;', 'for ( int candidates = 0 ; candidates < maxCandidates & & matchHead > = minIndex ; candidates + + ) {', 'final int niceBackReferenceLength = Math . min ( maxPossibleLength , params . getNiceBackReferenceLength ( ) ) ;', 'maxOffset , maxLiteralLength ) ;', '}', 'int maxLiteralLength ) {', 'private final int windowSize , minBackReferenceLength , maxBackReferenceLength , maxOffset , maxLiteralLength ,']","['try ( BlockLZ4CompressorOutputStream o = new BlockLZ4CompressorOutputStream ( baos ) ) {', 'public Parameters ( BlockSize blockSize , boolean withContentChecksum , boolean withBlockChecksum ,', 'public Parameters ( BlockSize blockSize ,', 'this . lz77params = lz77params ;', 'boolean withBlockDependency ,', 'private final org . apache . commons . compress . compressors . lz77support . Parameters lz77params ;', 'this ( blockSize , withContentChecksum , withBlockChecksum , withBlockDependency ,', '}', 'this ( blockSize , true , false , false , lz77params ) ;', 'try ( BlockLZ4CompressorOutputStream o = new BlockLZ4CompressorOutputStream ( baos , params . lz77params ) ) {']",['this . crc & = 0xFFFFFFFFL ;'],"['return this . chksum ;', 'this . chksum = chksum & 0xFFFFFFFFL ;', 'this . chksum = chksum ;', 'return this . chksum & 0xFFFFFFFFL ;', 'this . crc & = 0xFFFFFFFFL ;']","['public void windowSizeMustNotBeAPowerOfTwo ( ) {', 'public void windowSizeMustBeAPowerOfTwo ( ) {']","['head [ insertHash ] = prevHashHead ;', 'currentPosition + + ;', 'currentPosition - - ;', '}', 'final int prevMatchStart = matchStart ;', 'return matchLength ;', 'final int prevInsertHash = insertHash ;', 'matchStart = prevMatchStart ;', 'if ( lazy & & matchLength < = lazyThreshold & & lookahead > minMatch ) {', 'int hashHead = insertString ( currentPosition ) ;']","['M4 ( 1024 * 1024 , 7 ) ;', 'M4 ( 4096 * 1024 , 7 ) ;']","['while ( litsBackwards . hasNext ( ) ) {', 'while ( listBackwards . hasNext ( ) ) {', 'pairs . add ( splitCandidate . splitWithNewBackReferenceLengthOf ( splitCandidate . backReferenceLength ( )', 'pairs . add ( splitCandidate . splitWithNewBackReferenceLengthOf ( brLen - stillNeeded ) ) ;', 'other . prependLiteral ( litsBackwards . next ( ) ) ;', 'if ( splitCandidate . hasBackReference ( ) & & brLen > = MIN BACK REFERENCE LENGTH + stillNeeded ) {', 'if ( splitCandidate . hasBackReference ( )', 'Iterator < byte [ ] > listBackwards = literals . descendingIterator ( ) ;', 'int brLen = splitCandidate . backReferenceLength ( ) ;', 'int brLen = splitCandidate . hasBackReference ( ) ? splitCandidate . backReferenceLength ( ) : 0 ;']","['expected [ 2 ] = 1 ;', 'byte [ ] expected = prepareExpected ( i + 1 ) ;', 'byte [ ] expected = new byte [ i + 1 ] ;', 'expected [ 2 ] = 1 ;', 'byte [ ] expected = new byte [ i + 5 ] ;', 'byte [ ] b = prepareExpected ( lengthBeforeTrailer ) ;', 'byte [ ] expected = i < 15 ? new byte [ i + 1 ] : new byte [ i + 2 ] ;', 'private byte [ ] prepareExpected ( int length ) {', 'byte [ ] expected = new byte [ 17 ] ;', 'byte [ ] expected = prepareExpected ( 17 ) ;']","['copyOffset = writeOffset + offsetRemaining ;', 'copyOffset = - offsetRemaining ;', 'byte [ ] expected = prepareExpected ( 1 + 4 + 2 + 1 + 12 ) ;', 'expected [ 7 ] = ( byte ) ( 12 < < 4 ) ;', '@ Test', 'expected [ 0 ] = ( byte ) ( ( 4 < < 4 ) | 5 ) ;', 'for ( int i = 0 ; i < toCompress . length ; i + = 4 ) {', '}', 'expected [ i ] = 1 ;', 'expected [ 5 ] = 4 ;']","['try ( final InputStream fis = new BufferedInputStream ( new FileInputStream ( f ) ) ;', 'import java . nio . file . Files ;', 'import java . io . FileInputStream ;', 'try ( final InputStream fis = new BufferedInputStream ( Files . newInputStream ( f . toPath ( ) ) ) ;', '}', '}', 'import java . io . FileOutputStream ;', 'out = Files . newOutputStream ( f . toPath ( ) ) ;', 'import java . io . FileInputStream ;', 'import java . nio . file . Files ;']","['throw new CompressorException ( ""Failed to detect Compressor from InputStream . "" , e ) ;', '}', 'return new DeflateCompressorInputStream ( in ) ;', 'return GZIP ;', 'final int signatureLength = IOUtils . readFully ( in , signature ) ;', 'throw new CompressorException ( ""Failed while reading signature from InputStream . "" , e ) ;', '}', 'return DEFLATE ;', 'return new XZCompressorInputStream ( in , decompressConcatenated ) ;', 'if ( ! XZUtils . isXZCompressionAvailable ( ) ) {']","['try {', '} else if ( ZipArchiveInputStream . matches ( signature , signatureLength ) ) {', '}', 'try {', 'return createArchiveInputStream ( DUMP , in ) ;', '}', '} else if ( JarArchiveInputStream . matches ( signature , signatureLength ) ) {', 'throw new ArchiveException ( ""IOException while reading tar signature"" ) ;', 'if ( TarArchiveInputStream . matches ( tarHeader , signatureLength ) ) {', 'if ( TarArchiveInputStream . matches ( tarHeader , signatureLength ) ) {']","['} else if ( ZipArchiveInputStream . matches ( signature , signatureLength ) ) {', '} else if ( JarArchiveInputStream . matches ( signature , signatureLength ) ) {', 'if ( JarArchiveInputStream . matches ( signature , signatureLength ) ) {', 'return JAR ;', 'return JAR ;', '} if ( ArArchiveInputStream . matches ( signature , signatureLength ) ) {', '} else if ( ArArchiveInputStream . matches ( signature , signatureLength ) ) {', 'if ( ZipArchiveInputStream . matches ( signature , signatureLength ) ) {', 'ArchiveStreamFactory . JAR ,', 'ArchiveStreamFactory . ZIP']","['private static final File ARCDIR = new File ( CLASSLOADER . getResource ( ""archives"" ) . getFile ( ) ) ;', 'import java . net . URISyntaxException ;', 'ARCDIR = new File ( CLASSLOADER . getResource ( ""archives"" ) . toURI ( ) . getPath ( ) ) ;', 'try {', 'private static final File ARCDIR ;', '} catch ( URISyntaxException e ) {', '}', 'throw new RuntimeException ( e ) ;', 'static {', 'import org . apache . commons . compress . archivers . ArchiveEntry ;']","['throw new StreamingNotSupportedException ( SEVEN Z ) ;', 'return SEVEN Z ;', 'if ( ! XZUtils . isXZCompressionAvailable ( ) ) {', 'if ( !XZUtils . isXZCompressionAvailable ( ) ) {', 'if ( ! LZMAUtils . isLZMACompressionAvailable ( ) ) {', 'if ( !LZMAUtils . isLZMACompressionAvailable ( ) ) {', '* Unless required by applicable law or agreed to in writing , software', 'package org . apache . commons . compress ;', '* limitations under the License .', 'package org . apache . commons . compress ; / *']","['private static File ARCDIR ;', 'private static final File ARCDIR ;']","['try {', 'try ( JarInputStream ji = new JarInputStream ( streamBridge . getInput ( ) ) ) {', 'JarInputStream ji = null ;', '}', 'ji = new JarInputStream ( streamBridge . getInput ( ) ) ;', 'IOUtils . closeQuietly ( ji ) ;', 'boolean success = false ;', 'success = true ;', '} finally {', 'if ( !success ) {']","['ARCDIR = new File ( CLASSLOADER . getResource ( ""archives"" ) . toURI ( ) . getPath ( ) ) ;', 'ARCDIR = new File ( CLASSLOADER . getResource ( ""archives"" ) . toURI ( ) ) ;', 'ARCDIR = new File ( CLASSLOADER . getResource ( ""longpath"" ) . toURI ( ) . getPath ( ) ) ;', 'ARCDIR = new File ( CLASSLOADER . getResource ( ""longpath"" ) . toURI ( ) ) ;', 'ARCDIR = new File ( CLASSLOADER . getResource ( ""longsymlink"" ) . toURI ( ) . getPath ( ) ) ;', 'ARCDIR = new File ( CLASSLOADER . getResource ( ""longsymlink"" ) . toURI ( ) ) ;']","['buf = buffer ;', 'buf = buffer ;', 'buf = ByteBuffer . allocate ( len ) ;', 'buf = ByteBuffer . allocate ( len ) ;', '}', 'return createBoundedInputStream ( start , ze . getCompressedSize ( ) ) ;', 'return read ;', 'int read = archive . read ( buffer , position ) ;', 'return buffer . get ( ) & 0xff ;', '}']","['throw new MemoryLimitException ( memoryNeeded , MEMORY LIMIT IN KB ) ;', 'if ( memoryNeeded < 0 ) {', 'if ( memoryNeeded > > 10 > Integer . MAX VALUE ) {', '}', 'if ( MEMORY LIMIT IN KB > - 1 & & memoryNeeded > MEMORY LIMIT IN KB ) {', 'throw new IllegalArgumentException ( ""MemoryLimit must be > - 1"" ) ;', '( MEMORY LIMIT IN KB < 0 ) ? Integer . MAX VALUE : MEMORY LIMIT IN KB ) ;', 'throw new MemoryLimitException ( memoryNeeded ,', 'public static void checkLimitInKb ( long memoryNeeded ) throws MemoryLimitException {', 'super ( message , e ) ;']","['super ( message ) ;', 'super ( buildMessage ( memoryNeededInKb , memoryLimitInKb ) ) ;', 'super ( message , e ) ;', 'return """" + memoryNeededInKb + "" kb of memory would be needed ; limit was ""', 'public MemoryLimitException ( String message ) {', 'private final long memoryNeededInKb ;', 'public MemoryLimitException ( String message , Exception e ) {', 'private static String buildMessage ( long memoryNeededInKb , int memoryLimitInKb ) {', 'super ( buildMessage ( memoryNeededInKb , memoryLimitInKb ) , e ) ;', 'this . memoryNeededInKb = memoryNeededInKb ;']","['return new ZCompressorInputStream ( in ) ;', 'this . memoryLimitInKb = - 1 ;', 'return new LZMACompressorInputStream ( in ) ;', 'this ( decompressUntilEOF , - 1 ) ;', 'return new XZCompressorInputStream ( in , actualDecompressConcatenated ) ;', '}', 'public CompressorStreamFactory ( final boolean decompressUntilEOF ) {', 'this . memoryLimitInKb = memoryLimitInKb ;', 'return new ZCompressorInputStream ( in , memoryLimitInKb ) ;', 'public CompressorStreamFactory ( final boolean decompressUntilEOF , final int memoryLimitInKb ) {']","['int read = read ( loc + + , singleByteBuffer ) ;', 'loc + + ;', 'int read = read ( loc , singleByteBuffer ) ;']","['+ + loc ;', 'addDummy = false ;']","['package org . apache . commons . compress . archivers ;', 'public interface EntryStreamOffsets {', '}', 'boolean isStreamContiguous ( ) ;', 'long OFFSET UNKNOWN = - 1 ;', 'long getDataOffset ( ) ;', 'public class TarArchiveEntry implements TarConstants , ArchiveEntry {', 'public class TarArchiveEntry implements ArchiveEntry , TarConstants {', 'implements ArchiveEntry {', 'implements ArchiveEntry , EntryStreamOffsets']",['private static final long serialVersionUID = 1L ;'],"['bitsCachedSize - = count ;', 'bitsCachedSize - = count ;', 'return bitsOut ;', 'return bitsOut ;', 'bitsOut = ( bitsCached > > ( bitsCachedSize - count ) ) & MASKS [ count ] ;', 'bitsOut = ( bitsCached > > ( bitsCachedSize - count ) ) & MASKS [ count ] ;', 'final long bitsOut ;', 'final long bitsOut ;', '}', '}']","['return cnt ;', 'return cnt ;', '} else {', 'count ( l . getBytesRead ( ) - before ) ;', 'count ( l . getBytesRead ( ) - before ) ;', 'BlockLZ4CompressorInputStream l = ( BlockLZ4CompressorInputStream ) currentBlock ;', 'BlockLZ4CompressorInputStream l = ( BlockLZ4CompressorInputStream ) currentBlock ;', 'long before = l . getBytesRead ( ) ;', 'long before = l . getBytesRead ( ) ;', 'int cnt = currentBlock . read ( b , off , len ) ;']","['@ Override', '@ Override', '@ Override']","['n = ( long ) len - bytes ;', 'n = len - bytes ;', 'return ( int ) bsR ( bin , 32 ) ;', 'return bsR ( bin , 32 ) ;', 'zvec = ( zvec < < 1 ) | ( int ) bsR ( bin , 1 ) ;', 'int zvec = bsR ( bin , zn ) ;', 'int zvec = ( int ) bsR ( bin , zn ) ;', 'zvec = ( zvec < < 1 ) | bsR ( bin , 1 ) ;', 'int skipped = ( int ) IOUtils . readFully ( in , contentSize ) ;', 'int skipped = IOUtils . readFully ( in , contentSize ) ;']","['return Sets . newHashSet ( GZIP , BZIP2 , XZ , LZMA , PACK200 , DEFLATE , SNAPPY RAW , SNAPPY FRAMED , Z , LZ4 BLOCK ,', 'if ( BROTLI . equalsIgnoreCase ( name ) ) {', 'return new BrotliCompressorInputStream ( in ) ;', 'import org . apache . commons . compress . compressors . brotli . BrotliCompressorInputStream ;', 'throw new CompressorException ( ""Brotli compression is not available . "" ) ;', '}', 'return Sets . newHashSet ( GZIP , BROTLI , BZIP2 , XZ , LZMA , PACK200 , DEFLATE , SNAPPY RAW , SNAPPY FRAMED , Z , LZ4 BLOCK ,', 'if ( !BrotliUtils . isBrotliCompressionAvailable ( ) ) {', 'public static final String BROTLI = ""br"" ;', 'import org . apache . commons . compress . compressors . brotli . BrotliUtils ;']","['return true ;', 'decIS . mark ( readlimit ) ;', 'final int ret = decIS . read ( buf , off , len ) ;', 'static boolean matches ( final byte [ ] signature , final int length ) {', 'public String toString ( ) {', '}', 'public boolean equals ( Object obj ) {', 'import org . apache . commons . compress . compressors . CompressorInputStream ;', 'public int read ( ) throws IOException {', 'return decIS . hashCode ( ) ;']",['@ Override'],"['public int read ( byte [ ] buf , int off , int len ) throws IOException {', 'public BrotliCompressorInputStream ( final InputStream in ) throws IOException {', 'public int read ( byte [ ] b ) throws IOException {', 'public boolean equals ( final Object obj ) {', 'public void mark ( int readlimit ) {', 'private final org . brotli . dec . BrotliInputStream decIS ;', 'private org . brotli . dec . BrotliInputStream decIS ;', 'public long skip ( final long n ) throws IOException {', 'public boolean equals ( Object obj ) {', 'public void mark ( final int readlimit ) {']","['final boolean hasXz = internalIsBrotliCompressionAvailable ( ) ;', 'final boolean hasBrotli = internalIsBrotliCompressionAvailable ( ) ;', 'cachedBrotliAvailability = hasXz ? CachedAvailability . CACHED AVAILABLE', 'cachedBrotliAvailability = hasBrotli ? CachedAvailability . CACHED AVAILABLE']","['public class BrotliCompressorInputStreamTest {', 'import org . apache . commons . compress . compressors . CompressorStreamFactory ;', 'FileOutputStream out = null ;', 'try {', '@ Test', '}', 'import org . apache . commons . compress . compressors . CompressorInputStream ;', '} finally {', 'final File input = getFile ( ""bla . tar . br"" ) ;', 'try ( InputStream is = new FileInputStream ( input ) ) {']","['final File expected = AbstractTestCase . getFile ( ""brotli . testdata . uncompressed"" ) ;', 'final File input = getFile ( ""brotli . testdata . compressed"" ) ;', 'public void testCachingIsEnabledByDefaultAndXZIsPresent ( ) {', 'final File expected = getFile ( ""brotli . testdata . uncompressed"" ) ;', 'final File input = AbstractTestCase . getFile ( ""brotli . testdata . compressed"" ) ;', 'public void testCachingIsEnabledByDefaultAndBrotliIsPresent ( ) {']","['return BrotliCompressorInputStream . matches ( null , 0 ) ;', 'Class . forName ( ""org . brotli . dec . BrotliInputStream"" ) ;', '} catch ( final NoClassDefFoundError error ) {', '} catch ( NoClassDefFoundError | Exception error ) {', 'return true ;']","['return this . alignment ;', 'if ( ( alignment & ( alignment - 1 ) ) ! = 0 ) {', 'public void setAlignment ( int alignment ) {', 'this . alignment = alignment ;', '}', 'private int alignment = 0 ;', 'protected int getAlignment ( ) {', 'throw new IllegalArgumentException ( ""Invalid value for alignment , must be power of two : "" + alignment ) ;', 'putShort ( extra . length , buf , LFH EXTRA LENGTH OFFSET ) ;', 'putShort ( padding , buf , LFH FILENAME OFFSET + nameLen + extra . length + 2 ) ;']",['out . flush ( ) ;'],"['return litLen ;', 'return litLen > 0 ? litLen : read ( b , off , len ) ;', 'return backReferenceLen ;', 'return backReferenceLen > 0 ? backReferenceLen : read ( b , off , len ) ;', 'return litLen ;', 'return litLen > 0 ? litLen : read ( b , off , len ) ;', 'return backReferenceLen ;', 'return backReferenceLen > 0 ? backReferenceLen : read ( b , off , len ) ;']","['register ( PaddingExtraField . class ) ;', 'return new byte [ 0 ] ;', 'public byte [ ] getCentralDirectoryData ( ) {', '}', 'len = length ;', 'public ZipShort getCentralDirectoryLength ( ) {', '@ Override', 'import java . util . zip . ZipException ;', 'public PaddingExtraField ( ) {', 'public byte [ ] getLocalFileDataData ( ) {']","['private static final ZipShort ID = new ZipShort ( 0xffff ) ;', 'public static final ZipShort ID = new ZipShort ( 0xffff ) ;', 'len + = EXTRAFIELD HEADER SIZE + padding ;', 'len = LFH FILENAME OFFSET + nameLen + extra . length ;', 'int len = LFH FILENAME OFFSET + nameLen + extra . length ;', 'if ( pex ! = null ) {', '}', 'ZipExtraField pex = ( PaddingExtraField ) ze . getExtraField ( PaddingExtraField . ID ) ;', 'padding + = pex . getLocalFileDataLength ( ) . getValue ( ) + EXTRAFIELD HEADER SIZE ;', 'int len = LFH FILENAME OFFSET + nameLen + extra . length ;']","['boolean success = true ;', 'readFully ( blockBuffer , 0 , 4 ) ;', 'return true ;', 'try {', '!readBlock ( ( len - bytes ) < blockSize ) ) {', 'readBlock ( true ) ;', 'return null ;', '} catch ( ShortFileException sfe ) {', 'if ( ( readOffset = = blockSize ) & &', 'return null ;']","['return """" + memoryNeededInKb + "" kb of memory would be needed ; limit was ""', 'return memoryNeededInKb + "" kb of memory would be needed ; limit was ""', '} catch ( final Exception e ) {', '} catch ( final Exception e ) {', 'throw new ArchiveException ( ""IOException while reading signature . "" ) ;', 'throw new ArchiveException ( ""IOException while reading dump signature"" , e ) ;', 'throw new ArchiveException ( ""IOException while reading tar signature"" ) ;', 'throw new ArchiveException ( ""IOException while reading tar signature"" , e ) ;', 'throw new ArchiveException ( ""IOException while reading dump signature"" ) ;', 'throw new ArchiveException ( ""IOException while reading signature . "" , e ) ;']","['register ( PaddingExtraField . class ) ;', 'register ( ResourceAlignmentExtraField . class ) ;', 'return new byte [ 0 ] ;', 'public byte [ ] getCentralDirectoryData ( ) {', '}', 'len = length ;', 'public ZipShort getCentralDirectoryLength ( ) {', '@ Override', 'import java . util . zip . ZipException ;', 'public PaddingExtraField ( ) {']","['ZipShort . putShort ( alignment | ( allowMethodChange ? 0x8000 : 0 ) , content , 0 ) ;', 'ZipShort . putShort ( alignment | ( allowMethodChange ? ALLOW METHOD MESSAGE CHANGE FLAG : 0 ) ,', 'this . alignment = ( short ) ( alignmentValue & 0x7fff ) ;', 'this . allowMethodChange = ( alignmentValue & ALLOW METHOD MESSAGE CHANGE FLAG ) ! = 0 ;', 'return ZipShort . getBytes ( alignment | ( allowMethodChange ? 0x8000 : 0 ) ) ;', '}', 'this . allowMethodChange = ( alignmentValue & 0x8000 ) ! = 0 ;', 'private static final int ALLOW METHOD MESSAGE CHANGE FLAG = 0x8000 ;', 'if ( length < 2 )', 'this . alignment = ( short ) ( alignmentValue & ( ALLOW METHOD MESSAGE CHANGE FLAG - 1 ) ) ;']","['files [ i ] . setAntiItem ( isAnti = = null ? false : isAnti . get ( emptyFileCounter ) ) ;', 'files [ i ] . setAntiItem ( isAnti ! = null & & isAnti . get ( emptyFileCounter ) ) ;', 'files [ i ] . setHasStream ( isEmptyStream = = null ? true : !isEmptyStream . get ( i ) ) ;', 'files [ i ] . setHasStream ( isEmptyStream = = null | | !isEmptyStream . get ( i ) ) ;', 'files [ i ] . setDirectory ( isEmptyFile = = null ? true : !isEmptyFile . get ( emptyFileCounter ) ) ;', 'files [ i ] . setDirectory ( isEmptyFile = = null | | !isEmptyFile . get ( emptyFileCounter ) ) ;', 'if ( alignment < 0 | | alignment > 0x7fff )', 'if ( alignment < 0 | | alignment > 0x7fff ) {', '}', 'oldAlignmentEx ! = null ? oldAlignmentEx . allowMethodChange ( ) : false , padding ) ) ;']","['void addDummy ( ) {', 'synchronized void addDummy ( ) {', 'public boolean equals ( final Object obj ) {', '}', 'return decIS . equals ( obj ) ;', 'return decIS . hashCode ( ) ;', 'public int hashCode ( ) {', '@ Override']","['byte [ ] rest = new byte [ 31 ] ;', 'a . readFully ( originalSize ) ;', 'extra = new byte [ 20 ] ;', 'dd = new byte [ 8 ] ;', 'byte [ ] extra = new byte [ 20 ] ;', 'extra = new byte [ 20 ] ;', 'final byte [ ] extra = new byte [ 20 ] ;', 'assertArrayEquals ( ""LFH start"" , new byte [ ] {', 'dd = new byte [ 16 ] ;', 'assertArrayEquals ( ""DD"" , new byte [ ] {']","['compressedSize = size ;', 'compressedSize = size = new ZipEightByteInteger ( entry . entry . getSize ( ) ) ;', 'ZipEightByteInteger size = ZipEightByteInteger . ZERO ;', 'ZipEightByteInteger size , compressedSize ;', 'size = new ZipEightByteInteger ( entry . entry . getSize ( ) ) ;', 'if ( phased ) {', 'if ( phased ) {', '} else {', 'ZipEightByteInteger compressedSize = ZipEightByteInteger . ZERO ;', 'compressedSize = size = ZipEightByteInteger . ZERO ;']","['10 , 0 ,', '20 , 0 ,']","['offsets . clear ( ) ;', 'private byte [ ] createCentralFileHeader ( final ZipArchiveEntry ze , final ByteBuffer name ,', '| | lfhOffset > = ZIP64 MAGIC', 'return DATA DESCRIPTOR MIN VERSION ;', 'if ( isDeflatedToOutputStream ( zipMethod ) ) {', 'putLong ( Math . min ( entryMetaData . offset , ZIP64 MAGIC ) , buf , CFH LFH OFFSET ) ;', '}', 'this . offset = offset ;', 'putLong ( Math . min ( lfhOffset , ZIP64 MAGIC ) , buf , CFH LFH OFFSET ) ;', 'private boolean usesDataDescriptor ( final int zipMethod , boolean phased ) {']","['assert buffer . hasArray ( ) :', 'maybeFlush ( ) ;', '""direct buffer somehow written to BufferAtATimeOutputChannel"" ;', 'public int write ( ByteBuffer buffer ) throws IOException {', '@ Override', 'off + = n ;', 'srcLeft - = blockSize ;', 'if ( align ! = 0 ) {', 'buffer . flip ( ) ;', 'int i = out . write ( buffer ) ;']","['+ ""\' is too long ( > ""', 'private long currSize ;', 'final TarArchiveEntry longLinkEntry = new TarArchiveEntry ( TarConstants . GNU LONGLINK , linkType ) ;', 'private static final int RECORD SIZE = 512 ;', 'private final byte [ ] assemBuf ;', 'final long maxValue ) {', 'this ( os , blockSize , TarConstants . DEFAULT RCDSIZE , encoding ) ;', 'TarConstants . MAXSIZE ) ;', 'failForBigNumber ( field , value , maxValue , "" Use STAR or POSIX extensions to overcome this limit"" ) ;', 'if ( recordSize ! = RECORD SIZE ) {']","['import static org . junit . Assert . * ;', 'byte [ ] byteArray = new byte [ 8 ] ;', '@ Test', '}', 'byte [ ] byteArray = ArchiveUtils . toAsciiBytes ( ""SOCKET"" ) ;', 'ArchiveUtils . toAsciiString ( byteArray , 940 , 2730 ) ;', 'assertFalse ( ArchiveUtils . isEqualWithNull ( byteArray , 0 , ( byte ) 0 , byteArray , ( byte ) 0 , ( byte ) 80 ) ) ;', 'public void testIsEqual ( ) {', 'assertEquals ( "" - 0 null"" , string ) ;', 'assertFalse ( ArchiveUtils . isEqualWithNull ( byteArray , 0 , 46 , byteArray , 63 , 0 ) ) ;']","['public interface HasCharset {', '}', 'Charset getCharset ( ) ;', 'package org . apache . commons . compress . internal . charset ;', 'import java . nio . charset . Charset ;']","['AutoCloseable {', 'public class FixedLengthBlockOutputStream extends OutputStream implements WritableByteChannel {', 'public class FixedLengthBlockOutputStream extends OutputStream implements WritableByteChannel ,']","['ChecksumCalculatingInputStream checksumCalculatingInputStream = new ChecksumCalculatingInputStream ( adler32 , byteArrayInputStream ) ;', 'ChecksumCalculatingInputStream checksumCalculatingInputStream = new ChecksumCalculatingInputStream ( adler32 , byteArrayInputStream ) ;', 'Adler32 adler32 = new Adler32 ( ) ;', 'Adler32 adler32 = new Adler32 ( ) ;', 'ChecksumVerifyingInputStream checksumVerifyingInputStream = new ChecksumVerifyingInputStream ( adler32 , byteArrayInputStream , ( - 1859L ) , ( byte ) ( - 68 ) ) ;', 'ChecksumVerifyingInputStream checksumVerifyingInputStream = new ChecksumVerifyingInputStream ( adler32 , byteArrayInputStream , ( - 1859L ) , ( byte ) ( - 68 ) ) ;', 'Adler32 adler32 = new Adler32 ( ) ;', 'Adler32 adler32 = new Adler32 ( ) ;']","['throw new NullPointerException ( ""Parameter in must not be null"" ) ;', 'if ( in = = null ) {', '}', 'if ( checksum = = null ) {', 'throw new NullPointerException ( ""Parameter checksum must not be null"" ) ;', 'public void testClassInstantiationWithParameterBeingNullThrowsNullPointerExceptionOne ( ) {', 'ChecksumCalculatingInputStream checksumCalculatingInputStream = new ChecksumCalculatingInputStream ( null , new ByteArrayInputStream ( new byte [ 1 ] ) ) ;', '}', '@ Test ( expected = NullPointerException . class )', 'public void testClassInstantiationWithParameterBeingNullThrowsNullPointerExceptionThree ( ) {']","['import org . junit . Test ;', 'CpioUtil . byteArray2long ( byteArray , true ) ;', 'public void testLong2byteArrayWithPositiveThrowsUnsupportedOperationException ( ) {', 'CpioUtil . long2byteArray ( 0L , 1021 , false ) ;', '}', 'public void testByteArray2longThrowsUnsupportedOperationException ( ) {', 'import org . junit . Test ;', 'byte [ ] byteArray = new byte [ 1 ] ;', 'public void testLong2byteArrayWithZeroThrowsUnsupportedOperationException ( ) {', '@ Test ( expected = UnsupportedOperationException . class )']","['return true ;', 'private final String charsetName ;', '}', 'public ByteBuffer encode ( final String name ) throws IOException {', '@ Override', 'return new String ( data ) ;', 'public boolean canEncode ( final String name ) {', 'return ByteBuffer . wrap ( name . getBytes ( this . charsetName ) ) ;', 'package org . apache . commons . compress . archivers . zip ;', 'public String decode ( final byte [ ] data ) throws IOException {']","['public NioZipEncoding ( final Charset charset ) {', 'return charset ;', '. onUnmappableCharacter ( CodingErrorAction . REPORT )', '. onUnmappableCharacter ( CodingErrorAction . REPORT ) ;', 'class NioZipEncoding implements ZipEncoding {', '}', '+ ( name . length ( ) + 1 ) / 2 ) ;', 'private CharsetDecoder newDecoder ( ) {', 'enc . onMalformedInput ( CodingErrorAction . REPORT ) ;', '. onMalformedInput ( CodingErrorAction . REPORT )']","['assertEquals ( "" \\ uFFFD7zXZ \\ u0000 \\ u0000 \\ u0004 \\ uFFFD \\ u05B4F \\ u0002 \\ u0000! \\ u0001 \\ u0016 \\ u0000 \\ u0000 \\ u0000t / \\ uFFFD"" , byteArrayOutputStream . toString ( ) ) ;', 'import java . io . ByteArrayInputStream ;', '}', 'new XZCompressorInputStream ( new ByteArrayInputStream ( byteArrayOutputStream . toByteArray ( ) ) ) ) {', 'XZCompressorOutputStream xZCompressorOutputStream = new XZCompressorOutputStream ( byteArrayOutputStream ) ;', 'try ( XZCompressorOutputStream xZCompressorOutputStream = new XZCompressorOutputStream ( byteArrayOutputStream ) ) {', 'assertEquals ( 24 , byteArrayOutputStream . size ( ) ) ;', 'assertEquals ( - 1 , xZCompressorInputStream . read ( ) ) ;', 'xZCompressorOutputStream . write ( 4590 ) ;', '}']","['val | = 0xff < < bits ;', 'val | = 0xffl < < bits ;']","['long val = Math . abs ( value ) ;', 'long val = Math . abs ( value ) ;', 'if ( val > = max ) {', 'if ( val < 0 | | val > = max ) {']","['"" is too large for "" + length + "" byte field . "" ) ;', 'if ( len > length - 1 ) {', 'throw new IllegalArgumentException ( ""Value "" + value +', '}']","['formatBigIntegerBinary ( value , buf , offset , length , negative ) ;', '} else {', 'formatBigIntegerBinary ( value , buf , offset , length , negative ) ;']","['checkRoundTripOctalOrBinary ( 0xff00000000000001l , length ) ;', 'checkRoundTripOctalOrBinary ( - 0xffffffffffffffl , length ) ;', 'checkRoundTripOctalOrBinary ( 0xffffffffffffffl , length ) ;']","['if ( res . length ( ) * 6 > out . remaining ( ) ) {', 'return out ;', '} else if ( res . isUnderflow ( ) ) {', 'cb . put ( HEX CHARS [ c & 0x0f ] ) ;', 'this . charset = charset ;', 'float first = enc . maxBytesPerChar ( ) ;', 'out = ZipEncodingHelper . growBuffer ( out , 0 ) ;', 'if ( !coderResult . isUnderflow ( ) ) {', '+ res . length ( ) * 6 ) ;', 'out . limit ( out . position ( ) ) ;']","['byte [ ] expected = BAD STRING ENC . getBytes ( CharsetNames . US ASCII ) ;', 'assertEquals ( "" % U2016"" . getBytes ( name ) , enc . encode ( UNENC STRING ) ) ;', 'import org . apache . commons . compress . utils . CharsetNames ;', '@ Test', 'assertEquals ( expected , actual ) ;', 'doSimpleEncodingTest ( ""IBM1047"" , null ) ;', 'assertEquals ( "" % U2016"" . getBytes ( CharsetNames . US ASCII ) , enc . encode ( UNENC STRING ) ) ;', '}', 'ByteBuffer actual = enc . encode ( BAD STRING ) ;', 'public void testEbcidic ( ) throws IOException {']","['break ;', 'assert coderResult . isUnderflow ( ) : ""unexpected coder result : "" + coderResult ;', 'if ( !coderResult . isUnderflow ( ) ) {', '}', 'NioZipEncoding ( final Charset charset ) {', '}', 'throw new RuntimeException ( ""unexpected coder result : "" + coderResult ) ;', '} else {', 'this ( charset , false ) ;', 'bb . put ( HEX DIGITS [ ( c > > 12 ) & 0x0f ] ) ;']","['if ( realBlockSize < = 0 | | realBlockSize % RECORD SIZE ! = 0 ) {', 'if ( realBlockSize < = 0 | | realBlockSize % RECORD SIZE ! = 0 ) {', 'private static int BLOCK SIZE UNSPECIFIED = - 511 ;', 'private static final int BLOCK SIZE UNSPECIFIED = - 511 ;']","['ZipEightByteInteger size , compressedSize ;', 'ZipEightByteInteger size ;', 'ZipEightByteInteger compressedSize ;', 'private ZipConstants ( ) { }', 'private ZipConstants ( ) { }', 'int align = ( buffer . position ( ) & 7 ) ;', 'throw e ;', 'throw e ;', 'if ( !isOpen ( ) ) {', 'try {']","['if ( ( header = = null ) | | ( rhs . header = = null ) ) {', 'if ( rhs . header = = null ) {', 'System . arraycopy ( gidBytes , 0 , data , pos , gidBytes . length ) ;', 'if ( uidBytes ! = null ) {', 'reverse ( gidBytes ) ;', 'if ( gidBytes ! = null ) {', 'final int gidSize = trimLeadingZeroesForceMinLength ( gid . toByteArray ( ) ) . length ;', 'pos + = uidBytesLen ;', 'final int uidSize = trimLeadingZeroesForceMinLength ( uid . toByteArray ( ) ) . length ;', 'final byte [ ] data = new byte [ 3 + uidBytesLen + gidBytesLen ] ;']","['cachedLZMAAvailability = hasLzma ? CachedAvailability . CACHED AVAILABLE', 'cachedLZMAAvailability = hasLzma ? CachedAvailability . CACHED AVAILABLE', 'cachedXZAvailability = hasXz ? CachedAvailability . CACHED AVAILABLE', 'cachedXZAvailability = hasXz ? CachedAvailability . CACHED AVAILABLE']","['if ( ( summary = = null & & rhs . summary ! = null )', 'if ( ( summary = = null & & rhs . summary ! = null )', '| | ( summary ! = null & & !summary . equals ( rhs . summary ) ) ) {', '| | ( summary ! = null & & !summary . equals ( rhs . summary ) ) ) {', '} catch ( ShortFileException sfe ) {', '} catch ( ShortFileException sfe ) {', 'if ( certificates ! = null ) {', 'if ( certificates ! = null ) {', 'offset + = REALSIZELEN GNU ;', 'offset + = REALSIZELEN GNU ;']","['private static final byte [ ] BUF = new byte [ 8192 ] ;', 'private final byte [ ] BUF = new byte [ 8192 ] ;', '} catch ( final CloneNotSupportedException cnfe ) {', 'cloned . crc = new CRC32 ( ) ;', 'cloned . crc = new CRC32 ( ) ;', 'cloned . link = link ;', 'try {', 'return cloned ;', 'throw new RuntimeException ( cnfe ) ;', 'AsiExtraField cloned = new AsiExtraField ( ) ;']","['public void testCallLFHToString ( ) {', '@ Test', 'LocalFileHeader lfh = new LocalFileHeader ( ) ;', '}', 'assertNotNull ( lfh . toString ( ) ) ;']","['XZ BCJ IS BUGGY = version . equals ( ""1 . 4"" ) ;', 'XZ BCJ IS BUGGY = version ! = null & & version . equals ( ""1 . 4"" ) ;']","['FramedLZ4CompressorOutputStream los = new FramedLZ4CompressorOutputStream ( os , params ) ) {', 'expected = IOUtils . toByteArray ( is ) ;', 'IOUtils . copy ( is , los ) ;', 'import java . io . ByteArrayInputStream ;', 'import org . junit . runner . RunWith ;', 'try ( FileInputStream is = new FileInputStream ( input ) ) {', 'import java . io . FileOutputStream ;', 'try ( FramedLZ4CompressorInputStream sis = new FramedLZ4CompressorInputStream (', 'FramedLZ4CompressorInputStream sis = new FramedLZ4CompressorInputStream ( new FileInputStream ( outputSz ) ) ) {', 'import org . junit . runner . RunWith ;']","['roundTripTest ( f , newParameters ( 1 < < 17 , 4 , 64 , 1 < < 17 - 1 , 1 < < 17 - 1 ) ) ;', '}', 'try ( FileOutputStream fs = new FileOutputStream ( f ) ) {', 'SnappyCompressorOutputStream sos = new SnappyCompressorOutputStream ( os , input . length , params ) ) {', '}', 'SnappyCompressorInputStream sis = new SnappyCompressorInputStream ( new ByteArrayInputStream ( os . toByteArray ( ) ) ,', 'sos . write ( input ) ;', 'roundTripTest ( fs . toByteArray ( ) , newParameters ( 1 < < 17 , 4 , 64 , 1 < < 17 - 1 , 1 < < 17 - 1 ) ) ;', '+ "" , compressed bytes : "" + os . size ( ) + "" after "" + ( System . currentTimeMillis ( ) - start ) + ""ms"" ) ;', 'import java . io . ByteArrayInputStream ;']","['private final Map < String , String > extraPaxHeaders = new HashMap < > ( ) ;', 'setSize ( Long . parseLong ( val ) ) ;', 'processPaxHeader ( key , val , headers ) ;', 'fillGNUSparse0xData ( headers ) ;', '}', 'case ""size"" :', 'public String getExtraPaxHeader ( String name ) {', 'void updateEntryFromPaxHeaders ( Map < String , String > headers ) {', 'break ;', 'public void clearExtraPaxHeaders ( ) {']","['writeRecord ( recordBuf ) ;', 'final boolean paxHeaderContainsLinkPath = linkName ! = null & & linkName . length ( ) > 0', 'final boolean paxHeaderContainsLinkPath = linkName ! = null & & linkName . length ( ) > 0', 'final Map < String , String > paxHeaders = new HashMap < > ( ) ;', 'bigNumberMode = = BIGNUMBER STAR ) ;', '& & handleLongName ( entry , linkName , paxHeaders , ""linkpath"" ,', '& & handleLongName ( entry , linkName , paxHeaders , ""linkpath"" ,', 'TarConstants . LF GNUTYPE LONGLINK , ""link name"" ) ;', 'TarConstants . LF GNUTYPE LONGLINK , ""link name"" ) ;', '} else {']","['byte [ ] byteArray = new byte [ 2 ] ;', 'byte [ ] byteArray = new byte [ 8 ] ;', 'try {', '@ Test', 'public void testDecodeWithNonEmptyString ( ) throws IOException {', 'fail ( ""Expecting exception : IOException"" ) ;', '}', 'assertEquals ( ""org . apache . commons . compress . archivers . sevenz . AES256SHA256Decoder$1"" , e . getStackTrace ( ) [ 0 ] . getClassName ( ) ) ;', 'assertEquals ( ""Decryption error ( do you have the JCE Unlimited Strength Jurisdiction Policy Files installed ? ) "" , e . getMessage ( ) ) ;', 'BufferedInputStream bufferedInputStream = new BufferedInputStream ( null , 3138 ) ;']","['return new InputStream ( ) {', 'try {', 'try {', 'public void write ( final int b ) throws IOException {', 'public void write ( final int b ) throws IOException {', 'this . inflater = inflater ;', 'return inflaterInputStream . read ( b ) ;', 'return inflaterInputStream . read ( b ) ;', '}', 'static class DeflateDecoderOutputStream extends OutputStream {']","['final ZipEntry entry = zf . getEntry ( ""COMPRESS - 210 unix time zip test / 2105"" ) ;', 'import java . util . zip . ZipEntry ;', '@ Test', 'public class Java9ZipEntryTimeTest {', '}', 'Assert . assertEquals ( 2105 , year ) ;', 'public void testJUZTimes ( ) throws Exception {', 'import java . util . Calendar ;', 'final Calendar girl = Calendar . getInstance ( TimeZone . getTimeZone ( ""GMT"" ) ) ;', 'import java . util . Date ;']","['import java . io . Serializable ;', 'public ZipLong ( int value ) {', '}', 'import java . io . Serializable ;', 'public int getIntValue ( ) { return ( int ) value ; }', 'this . value = value ;', 'import static org . junit . Assert . * ;', 'assertEquals ( 0xFFFF FFFF FFFF FFFFL , zl . getValue ( ) ) ;', 'final ZipLong zl = new ZipLong ( new byte [ ] { ( byte ) 0xFF , ( byte ) 0xFF , ( byte ) 0xFF , ( byte ) 0xFF } ) ;', 'zl = new ZipLong ( 0xFFFF FFFFL ) ;']","['return createTime ! = null ? new Date ( createTime . getValue ( ) * 1000 ) : null ;', 'private static ZipLong unixTimeToZipLong ( long l ) {', 'throw new IllegalArgumentException ( ""Cannot set an X5455 timestamp larger than 2 ^ 32 : "" + l ) ;', 'return unixTime ! = null ? new Date ( unixTime . getIntValue ( ) * 1000L ) : null ;', 'return accessTime ! = null ? new Date ( accessTime . getValue ( ) * 1000 ) : null ;', 'if ( l < Integer . MIN VALUE | | l > Integer . MAX VALUE ) {', 'if ( l > = TWO TO 32 ) {', '}', 'final long l = d . getTime ( ) / 1000 ;', 'return zipLongToDate ( modifyTime ) ;']","['private static ZipLong unixTimeToZipLong ( long l ) {', 'private static ZipLong unixTimeToZipLong ( long l ) {', 'return unixTime ! = null ? new Date ( unixTime . getIntValue ( ) * 1000L ) : null ;', 'return unixTime ! = null ? new Date ( unixTime . getIntValue ( ) * 1000L ) : null ;', 'if ( l < Integer . MIN VALUE | | l > Integer . MAX VALUE ) {', 'if ( l < Integer . MIN VALUE | | l > Integer . MAX VALUE ) {', '}', '}', 'throw new IllegalArgumentException ( ""X5455 timestamps must fit in a signed 32 bit integer : "" + l ) ;', 'throw new IllegalArgumentException ( ""X5455 timestamps must fit in a signed 32 bit integer : "" + l ) ;']","['try {', 'try {', 'if ( !zipTimeUsesExtendedTimestamp ) {', 'if ( !zipTimeUsesExtendedTimestamp ) {', '}', '}', 'switch ( year ) {', 'switch ( year ) {', '} catch ( final NumberFormatException nfe ) {', '} catch ( final NumberFormatException nfe ) {']","['}', 'Class . forName ( ""java . lang . module . ModuleDescriptor"" ) ;', 'try {', '}', 'org . junit . Assume . assumeFalse ( ""can\'t use PowerMock with Java9"" , java9 ) ;', 'java9 = true ;', '} catch ( Exception ex ) {', 'boolean java9 = false ;']","['class NioZipEncoding implements ZipEncoding , HasCharset {', 'private final boolean useReplacement ;', 'assert coderResult . isUnderflow ( ) : ""unexpected coder result : "" + coderResult ;', 'CharBuffer tmp = null ;', ""private static final byte [ ] REPLACEMENT BYTES = new byte [ ] { ' ? ' } ;"", 'out = ZipEncodingHelper . growBufferBy ( out , totalExtraSpace - out . remaining ( ) ) ;', 'private static final String REPLACEMENT STRING = "" ? "" ;', 'private static final String REPLACEMENT STRING = String . valueOf ( REPLACEMENT ) ;', 'CharBuffer tmp = null ;', 'out = encodeFully ( enc , encodeSurrogate ( tmp , cb . get ( ) ) , out ) ;']","['. decode ( ByteBuffer . wrap ( data ) ) . toString ( ) ;', '. decode ( ByteBuffer . wrap ( data ) ) . toString ( ) ;', '. onUnmappableCharacter ( CodingErrorAction . REPORT ) ;', '. onUnmappableCharacter ( CodingErrorAction . REPORT ) ;', '}', '}', 'private CharsetDecoder newDecoder ( ) {', 'private CharsetDecoder newDecoder ( ) {', '. onMalformedInput ( CodingErrorAction . REPORT )', '. onMalformedInput ( CodingErrorAction . REPORT )']","['byte [ ] byteArray = new byte [ 2 ] ;', '}', 'InputStream inputStream = aES256SHA256Decoder . decode ( """" , bufferedInputStream , 1801 , coder , byteArray ) ;', '@ Test', 'assertArrayEquals ( new byte [ ] { ( byte ) 0 , ( byte ) 0 } , byteArray ) ;', 'try {', 'fail ( ""Expecting exception : IOException"" ) ;', 'AES256SHA256Decoder aES256SHA256Decoder = new AES256SHA256Decoder ( ) ;', 'coder . properties = byteArray ;', 'ObjectInputStream objectInputStream = null ;']","['cloned . crc = new CRC32 ( ) ;', '} catch ( final CloneNotSupportedException cnfe ) {', 'cloned . link = link ;', 'cloned . crc = new CRC32 ( ) ;', 'return cloned ;', 'try {', 'AsiExtraField cloned = new AsiExtraField ( ) ;', 'throw new RuntimeException ( cnfe ) ;', 'cloned . uid = uid ;', 'return cloned ;']","['CoderResult coderResult = enc . encode ( cb , out , true ) ;', 'enc . encode ( cb , out , true ) ;']","['return out ;', 'CoderResult result = enc . encode ( cb , o , false ) ;', 'out = ZipEncodingHelper . growBufferBy ( out , increment ) ;', 'return o ;', 'CoderResult result = enc . encode ( cb , out , false ) ;', 'o = ZipEncodingHelper . growBufferBy ( o , increment ) ;', 'ByteBuffer o = out ;']","['fos . write ( BUF , 0 , bytesRead ) ;', 'private final byte [ ] buf = new byte [ 8192 ] ;', 'private final byte [ ] BUF = new byte [ 8192 ] ;', 'fos . write ( buf , 0 , bytesRead ) ;', 'final int bytesRead = archive . read ( BUF , 0 , toRead ) ;', 'final int toRead = ( int ) Math . min ( total - off , buf . length ) ;', 'final int toRead = ( int ) Math . min ( total - off , BUF . length ) ;', 'final int bytesRead = archive . read ( buf , 0 , toRead ) ;', 'charCount + + ;', '} ;']","['public interface HasCharset {', 'public interface CharsetAccessor {', 'class NioZipEncoding implements ZipEncoding , HasCharset {', 'class NioZipEncoding implements ZipEncoding , CharsetAccessor {', 'if ( ze instanceof HasCharset ) {', 'if ( ze instanceof CharsetAccessor ) {', 'HasCharset hasCharset = ( HasCharset ) ze ;', 'CharsetAccessor hasCharset = ( CharsetAccessor ) ze ;']","['} else {', 'if ( linkFlag = = LF CHR | | linkFlag = = LF BLK ) {', '}', 'offset + = 2 * DEVLEN ;']","['devMinor = ( int ) TarUtils . parseOctalOrBinary ( header , offset , DEVLEN ) ;', 'devMinor = ( int ) TarUtils . parseOctalOrBinary ( header , offset , DEVLEN ) ;', 'devMajor = ( int ) TarUtils . parseOctalOrBinary ( header , offset , DEVLEN ) ;', 'devMajor = ( int ) TarUtils . parseOctalOrBinary ( header , offset , DEVLEN ) ;', 'offset + = DEVLEN ;', 'offset + = DEVLEN ;']","['assertEquals ( ""test1 . xml"" , is . getNextTarEntry ( ) . getName ( ) ) ;', 'try ( TarArchiveInputStream is = getTestStream ( "" / COMPRESS - 417 . tar"" ) ) {', '@ Test', 'assertNull ( is . getNextTarEntry ( ) ) ;', '}', 'public void skipsDevNumbersWhenEntryIsNoDevice ( ) throws Exception {', 'assertEquals ( ""test2 . xml"" , is . getNextTarEntry ( ) . getName ( ) ) ;']","['checkRoundTripOctalOrBinary ( Long . MAX VALUE , 8 ) ;', 'assertEquals ( ""Value 9223372036854775807 is too large for 8 byte field . "" , e . getMessage ( ) ) ;', 'try {', 'public void testRoundTripOctalOrBinary8 ValueTooBigForBinary ( ) {', '@ Test', 'fail ( ""Should throw exception - value is too long to fit buffer of this len"" ) ;', '}', '} catch ( IllegalArgumentException e ) {']","['checkRoundTripOctalOrBinary ( Long . MAX VALUE , 8 ) ;', 'checkRoundTripOctalOrBinary ( Long . MAX VALUE , 8 ) ;']","['} else if ( Change . TYPE DELETE DIR = = pChange . type ( ) & &', '( Change . TYPE DELETE DIR = = pChange . type ( ) & & target . matches ( source + "" / . * "" ) ) ) {', 'target . matches ( source + "" / . * "" ) ) {', 'if ( Change . TYPE DELETE = = pChange . type ( ) & & source . equals ( target ) | |', 'it . remove ( ) ;', 'if ( Change . TYPE DELETE = = pChange . type ( ) & & source . equals ( target ) ) {', 'if ( addedFromChangeSet . contains ( filename ) | | addedFromStream . contains ( filename ) ) {', 'return addedFromChangeSet . contains ( filename ) | | addedFromStream . contains ( filename ) ;', 'return true ;', '}']","['throw new IOException ( ""This archives contains unclosed entries . "" ) ;', 'throw new IOException ( ""This archive contains unclosed entries . "" ) ;']","['break ;', 'int len = 0 ;', 'for ( ; len > 0 ; len - - ) {', 'for ( int i = offset ; len < length & & buffer [ i ] ! = 0 ; i + + , len + + ) ;', 'int len = length ;', 'if ( buffer [ offset + len - 1 ] ! = 0 ) {', '}']","['assertEquals ( """" , sb2 ) ;', 'buff = new byte [ ] { 0 , 1 , 0 } ;', 'sb2 = TarUtils . parseName ( buff , 0 , 3 ) ;']","['writeBlock ( ) ;', 'public void flushBlock ( ) throws IOException {', 'if ( buffer . position ( ) ! = 0 ) {', 'writeBlock ( ) ;', '}', 'if ( buffer . position ( ) ! = 0 ) {', 'private void padLastBlock ( ) {', '}', 'padLastBlock ( ) ;', 'padBlock ( ) ;']","['if ( blockSize ! = - 2 ) {', 'if ( blockSize ! = - 2 ) {', 'int paddedSize = ( int ) Math . ceil ( ( double ) unpaddedSize / blockSize ) * blockSize ;', 'int paddedSize = ( int ) Math . ceil ( ( double ) unpaddedSize / blockSize ) * blockSize ;', '}', '}', 'int fileRecordsSize = ( int ) Math . ceil ( ( double ) contents . length / 512 ) * 512 ;', 'int fileRecordsSize = ( int ) Math . ceil ( ( double ) contents . length / 512 ) * 512 ;']","['/ /', 'out . flushBlock ( ) ;', 'wOffset + = aLen ;', 'if ( 0 ! = currSize % RECORD SIZE ) {', 'recordsWritten + + ;', 'currBytes + = numToWrite ;', 'System . arraycopy ( assemBuf , 0 , recordBuf , 0 ,', 'out = new FixedLengthBlockOutputStream ( countingOut = new CountingOutputStream ( os ) ,', 'for ( int i = assemLen ; i < assemBuf . length ; + + i ) {', 'recordsWritten + + ;']","['LZ4 FRAMED ) ;', 'public static String getZstandard ( ) {', 'if ( ZSTANDARD . equalsIgnoreCase ( name ) ) {', 'public static final String ZSTANDARD = ""zst"" ;', 'import org . apache . commons . compress . compressors . zstandard . ZstdCompressorInputStream ;', '}', 'LZ4 FRAMED , ZSTANDARD ) ;', 'return ZSTANDARD ;', 'if ( !ZstdUtils . isZstdCompressionAvailable ( ) ) {', 'throw new CompressorException ( ""XZ compression is not available . "" ) ;']","['throw new CompressorException ( ""XZ compression is not available . "" ) ;', 'throw new CompressorException ( ""ZStandard compression is not available . "" ) ;', '}', '}']","['throw new CompressorException ( ""ZStandard compression is not available . "" ) ;', 'throw new CompressorException ( ""Zstandard compression is not available . "" ) ;']","['return ZSTANDARD ;', 'if ( ZstdUtils . matches ( signature , signatureLength ) ) {', '}', 'return true ;', 'private static final byte [ ] ZSTANDARD FRAME MAGIC = {', 'for ( int i = 0 ; i < ZSTANDARD FRAME MAGIC . length ; + + i ) {', '}', 'if ( signature [ i ] ! = ZSTANDARD FRAME MAGIC [ i ] ) {', 'break ;', 'boolean isZstandard = true ;']","['public boolean hasUnicodeComment ( ) {', 'public boolean hasUnicodeName ( ) {', 'public void setHasUnicodeComment ( boolean hasUnicodeComment ) {', 'public void setHasUnicodeName ( boolean hasUnicodeName ) {', '}', 'return hasUnicodeComment ;', 'private boolean hasUnicodeComment = false ;', 'this . hasUnicodeName = hasUnicodeName ;', 'this . hasUnicodeComment = hasUnicodeComment ;', 'private boolean hasUnicodeName = false ;']","['for ( final ScatterZipOutputStream scatterStream : streams ) {', 'for ( final ScatterZipOutputStream scatterStream : streams ) {', 'scatterStream . close ( ) ;', '}', 'scatterStream . writeTo ( targetStream ) ;', 'scatterStream . close ( ) ;', 'synchronized ( streams ) {', 'scatterStream . writeTo ( targetStream ) ;']","['public boolean hasUnicodeComment ( ) {', 'private NameSource nameSource = NameSource . NAME ;', 'public boolean hasUnicodeName ( ) {', 'public void setNameSource ( NameSource nameSource ) {', 'public void setHasUnicodeComment ( boolean hasUnicodeComment ) {', 'NAME WITH EFS FLAG ,', 'public void setHasUnicodeName ( boolean hasUnicodeName ) {', 'this . commentSource = commentSource ;', 'return hasUnicodeComment ;', 'UNICODE EXTRA FIELD']","['for ( int i = 0 ; i < this . rcount ; i + + ) {', 'for ( long i = 0 ; i < this . rcount ; i + + ) {']","['if ( block instanceof LZ77Compressor . LiteralBlock ) {', 'break ;', '} else if ( block instanceof LZ77Compressor . EOD ) {', 'case LITERAL :', '} else if ( block instanceof LZ77Compressor . BackReference ) {', 'case BACK REFERENCE :', 'case EOD :', 'switch ( block . getType ( ) ) {', 'public static abstract class Block { }', 'return BlockType . LITERAL ;']","['public static final String ZSTANDARD = ""zst"" ;', 'public static final String ZSTANDARD = ""zstd"" ;', '. createCompressorInputStream ( ""zst"" , is ) ;', '. createCompressorInputStream ( ""zstd"" , is ) ;']","['return Sets . newHashSet ( GZIP , BZIP2 , XZ , LZMA , PACK200 , DEFLATE , SNAPPY FRAMED , LZ4 BLOCK , LZ4 FRAMED ) ;', 'if ( ZSTANDARD . equalsIgnoreCase ( name ) ) {', 'return Sets . newHashSet ( GZIP , BZIP2 , XZ , LZMA , PACK200 , DEFLATE , SNAPPY FRAMED , LZ4 BLOCK , LZ4 FRAMED , ZSTANDARD ) ;', 'return new ZstdCompressorOutputStream ( out ) ;', '}', 'if ( !ZstdUtils . isZstdCompressionAvailable ( ) ) {', 'throw new CompressorException ( ""Zstandard compression is not available . "" ) ;', 'import org . apache . commons . compress . compressors . zstandard . ZstdCompressorOutputStream ;', 'encOS . close ( ) ;', 'this . encOS = new ZstdOutputStream ( out ) ;']","['int nextSym = getAndMoveToFrontDecode0 ( 0 ) ;', 'checkBounds ( yy 0 , 255 , ""yy"" ) ;', 'zt = selector [ + + groupNo ] & 0xff ;', 'nextSym = perm zt [ tmp ] ;', 'final int nGroups ) {', 'final int minLen , final int maxLen , final int alphaSize )', 'zn + + ;', 'if ( checkVal > limitInclusive ) {', 'private int getAndMoveToFrontDecode0 ( final int groupNo ) throws IOException {', 'throws IOException {']","['checkBounds ( yy 0 , 255 , ""yy"" ) ;', 'checkBounds ( zt , N GROUPS , ""zt"" ) ;', 'checkBounds ( nGroups , N GROUPS , ""nGroups"" ) ;', 'checkBounds ( tmp , ttLen , ""tt index"" ) ;', 'if ( checkVal > limitInclusive ) {', 'checkBounds ( nSelectors , MAX SELECTORS + 1 , ""nSelectors"" ) ;', 'checkBounds ( tmp , this . last , ""tt index"" ) ;', 'final int ttLen = this . last + 1 ;', 'checkBounds ( + + groupNo , MAX SELECTORS - 1 , ""groupNo"" ) ;', 'checkBounds ( + + groupNo , MAX SELECTORS , ""groupNo"" ) ;']","['throw new CompressorException ( ""Brotli compression is not available . "" ) ;', 'private static final String YOU NEED XZ JAVA = youNeed ( ""XZ for Java"" , ""https : / / tukaani . org / xz / java . html"" ) ;', 'throw new CompressorException ( ""LZMA compression is not available"" ) ;', 'throw new CompressorException ( ""XZ compression is not available . "" + YOU NEED XZ JAVA ) ;', 'throw new CompressorException ( ""XZ compression is not available . "" ) ;', 'private static final String YOU NEED BROTLI DEC = youNeed ( ""Google Brotli Dec"" , ""https : / / github . com / google / brotli / "" ) ;', 'throw new CompressorException ( ""Zstandard compression is not available . "" ) ;', 'private static final String YOU NEED ZSTD JNI = youNeed ( ""Zstd JNI"" , ""https : / / github . com / luben / zstd - jni"" ) ;', '}', 'private static String youNeed ( String name , String url ) {']","['case AES ENCRYPTED :', 'return new Deflate64InputStream ( bis , ze . getSize ( ) ) ;', 'case AES ENCRYPTED :', 'import org . apache . commons . compress . compressors . zip . Deflate64InputStream ;', '| | entry . getMethod ( ) = = ZipMethod . ENHANCED DEFLATED . getCode ( )', 'import static org . apache . commons . compress . utils . IOUtils . closeQuietly ;', 'throw new IllegalStateException ( ""Invalid return value from read : "" + r ) ;', 'int r = read ( b ) ;', 'public Deflate64InputStream ( InputStream in , long uncompressedSize ) {', 'available = uncompressedSize - totalRead ;']","['}', '}', '}', '}']","['import org . apache . commons . compress . compressors . zip . Deflate64InputStream ;', 'import org . apache . commons . compress . compressors . deflate64 . Deflate64InputStream ;', 'package org . apache . commons . compress . compressors . zip ;', 'package org . apache . commons . compress . compressors . deflate64 ;', 'import static org . apache . commons . compress . compressors . zip . HuffmanState . * ;', 'package org . apache . commons . compress . compressors . deflate64 ;', 'package org . apache . commons . compress . compressors . zip ;', 'import static org . apache . commons . compress . compressors . deflate64 . HuffmanState . * ;', 'package org . apache . commons . compress . compressors . zip ;', 'package org . apache . commons . compress . compressors . deflate64 ;']","['} } ;', 'public static final class EOD extends Block {', 'private static final Block THE EOD = new Block ( ) {', '}', 'private static final Block THE EOD = new EOD ( ) ;']","['byte [ ] fromZip = IOUtils . toByteArray ( s ) ;', 'try ( FileInputStream in = new FileInputStream ( input ) ;', '@ Test', 'final File archive = getFile ( ""COMPRESS - 380 . zip"" ) ;', 'ZipFile zf = new ZipFile ( archive ) ) {', 'ZipArchiveEntry e = zf . getEntry ( ""input2"" ) ;', 'assertArrayEquals ( orig , fromZip ) ;', 'byte [ ] orig = IOUtils . toByteArray ( in ) ;', '}', 'public void readDeflate64CompressedStream ( ) throws Exception {']","['return new Deflate64InputStream ( bis , ze . getSize ( ) ) ;', 'return new Deflate64CompressorInputStream ( bis , ze . getSize ( ) ) ;', 'import org . apache . commons . compress . compressors . deflate64 . Deflate64InputStream ;', 'import org . apache . commons . compress . compressors . deflate64 . Deflate64CompressorInputStream ;', 'Deflate64InputStream ( HuffmanDecoder decoder , long uncompressedSize ) {', 'count ( read ) ;', 'public class Deflate64InputStream extends InputStream {', 'public class Deflate64CompressorInputStream extends CompressorInputStream {', 'public Deflate64InputStream ( InputStream in , long uncompressedSize ) {', 'import org . apache . commons . compress . compressors . CompressorInputStream ;']","['return new Deflate64CompressorInputStream ( bis , ze . getSize ( ) ) ;', 'return new Deflate64CompressorInputStream ( bis ) ;', 'if ( decoder ! = null ) {', 'public Deflate64CompressorInputStream ( InputStream in ) {', 'available = uncompressedSize - totalRead ;', 'this ( new HuffmanDecoder ( in ) ) ;', 'private long totalRead = 0 ;', 'return decoder ! = null ? decoder . available ( ) : 0 ;', 'this ( new HuffmanDecoder ( in ) , uncompressedSize ) ;', 'Deflate64CompressorInputStream ( HuffmanDecoder decoder ) {']","['private final com . github . luben . zstd . ZstdInputStream decIS ;', 'private final ZstdInputStream decIS ;', 'private final com . github . luben . zstd . ZstdOutputStream encOS ;', 'private final ZstdOutputStream encOS ;']","['case XZ :', 'XZ ( 95 ) ,']","['new BoundedInputStream ( in , current . entry . getCompressedSize ( ) ) ) ;', 'current . in = new BZip2CompressorInputStream ( bis ) ;', 'current . in = new BZip2CompressorInputStream ( new BoundedInputStream ( in , current . entry . getCompressedSize ( ) ) ) ;', 'current . in = new UnshrinkingInputStream ( bis ) ;', 'current . in = new UnshrinkingInputStream ( new BoundedInputStream ( in , current . entry . getCompressedSize ( ) ) ) ;', 'current . in = new Deflate64CompressorInputStream ( bis ) ;', '| | current . entry . getMethod ( ) = = ZipMethod . ENHANCED DEFLATED . getCode ( )', 'bis ) ;', '} else if ( current . entry . getMethod ( ) = = ZipMethod . ENHANCED DEFLATED . getCode ( ) ) {', 'InputStream bis = new BoundedInputStream ( in , current . entry . getCompressedSize ( ) ) ;']","['LZ4 FRAMED , ZSTANDARD ) ;', 'LZ4 FRAMED , ZSTANDARD , DEFLATE64 ) ;', 'return DEFLATE64 ;', '}', 'if ( DEFLATE64 . equalsIgnoreCase ( name ) ) {', 'return new Deflate64CompressorInputStream ( in ) ;', 'public static String getDeflate64 ( ) {', 'public static final String DEFLATE64 = ""deflate64"" ;', 'import org . apache . commons . compress . compressors . deflate64 . Deflate64CompressorInputStream ;', 'import org . apache . commons . compress . compressors . CompressorStreamFactory ;']","['return state = = null ? 0 : state . available ( ) ;', 'return state . available ( ) ;']","['long bNLen = reader . readBits ( 16 ) ;', 'throw new EOFException ( ) ;', 'long bLen = reader . readBits ( 16 ) ;', 'return r ;', 'byte next = ( byte ) ( reader . readBits ( Byte . SIZE ) & 0xFF ) ;', '}', 'length = ( int ) ( reader . readBits ( 2 ) + 3 ) ;', 'if ( r = = - 1 ) {', 'length = ( int ) ( reader . readBits ( 7 ) + 11 ) ;', 'length = ( int ) ( readBits ( reader , 3 ) + 3 ) ;']","['throw new EOFException ( ) ;', 'throw new EOFException ( ""Truncated Deflate64 Stream"" ) ;', '1 , 11 , 0 , - 12 , - 1 ,', 'assertEquals ( ""Hello World"" , br . readLine ( ) ) ;', '@ Test', '} ;', ""'H' , 'e' , 'l' , 'l' , 'o' , ' ' , 'W' , 'o' , 'r' , 'l' , 'd' , 'X'"", 'byte [ ] data = {', '}', 'BufferedReader br = new BufferedReader ( new InputStreamReader ( input ) ) )']","['@ Test', '@ Test', ""'H' , 'e' , 'l' , 'l' , 'o' , ' ' , 'W' , 'o' , 'r' , 'l' , 'd' , 'X'"", 'BufferedReader br = new BufferedReader ( new InputStreamReader ( input ) ) ) {', 'private final HuffmanDecoder nullDecoder = null ;', ""'H' , 'e' , 'l' , 'l' , 'o' , ' ' , 'W' , 'o' , 'r' , 'l' , 'd' , 'X'"", 'assertEquals ( - 1 , input . read ( new byte [ 1 ] , 0 , 1 ) ) ;', 'private final HuffmanDecoder nullDecoder = null ;', '}', 'assertEquals ( - 1 , input . read ( new byte [ 1 ] , 0 , 1 ) ) ;']","['close ( ) ;', 'private InputStream originalStream ;', 'closeDecoder ( ) ;', 'private void closeDecoder ( ) throws IOException {', '}', 'originalStream . close ( ) ;', 'if ( originalStream ! = null ) {', 'originalStream = null ;', 'originalStream = in ;', 'import static org . apache . commons . compress . utils . IOUtils . closeQuietly ;']","['current . in = new ExplodingInputStream (', '}', 'current . in = new UnshrinkingInputStream ( bis ) ;', 'InputStream bis = new BoundedInputStream ( in , current . entry . getCompressedSize ( ) ) ;', 'current . in = new BZip2CompressorInputStream ( bis ) ;', 'switch ( m ) {', 'current . in = new Deflate64CompressorInputStream ( bis ) ;', 'if ( ZipUtil . canHandleEntryData ( current . entry ) & & m ! = ZipMethod . STORED & & m ! = ZipMethod . DEFLATED ) {', '} else if ( current . entry . getMethod ( ) = = ZipMethod . ENHANCED DEFLATED . getCode ( ) ) {', 'break ;']","['import java . util . * ;', 'import java . util . Comparator ;', 'import static org . apache . commons . compress . archivers . zip . ZipConstants . * ;', 'import static org . apache . commons . compress . archivers . zip . ZipConstants . DWORD ;', 'import java . io . * ;', 'import java . util . Arrays ;', 'import org . apache . commons . compress . compressors . bzip2 . BZip2CompressorInputStream ;', 'import java . util . EnumSet ;', 'import org . apache . commons . compress . utils . IOUtils ;', 'import java . util . Enumeration ;']","['if ( hasUTF8Flag ) {', 'current . entry . setNameSource ( ZipArchiveEntry . NameSource . NAME WITH EFS FLAG ) ;', '}']","['@ Test', 'nameSource ( ""utf8 - winzip - test . zip"" , "" \\ u20AC for Dollar . txt"" ,', '} while ( - - entryNo > 0 ) ;', '}', 'public void nameSourceIsSetToEFS ( ) throws Exception {', 'ze = zis . getNextZipEntry ( ) ;', 'private static void nameSource ( String archive , String entry , int entryNo , ZipArchiveEntry . NameSource expected )', 'nameSource ( ""bla . zip"" , ""test1 . xml"" , ZipArchiveEntry . NameSource . NAME ) ;', 'public void nameSourceDefaultsToName ( ) throws Exception {', 'assertEquals ( entry , ze . getName ( ) ) ;']","['byte [ ] buf = new byte [ 1024 * 8 ] ;', 'ZipArchiveEntry e = entries . nextElement ( ) ;', '@ Test', 'import static org . apache . commons . compress . AbstractTestCase . getFile ;', 'import org . apache . commons . compress . archivers . zip . ZipFile ;', 'try ( ZipFile zfile = new ZipFile ( getFile ( ""COMPRESS - 380 - deflatebug . zip"" ) ) ) {', 'Enumeration < ZipArchiveEntry > entries = zfile . getEntries ( ) ;', '}', 'break ;', 'while ( true ) {']","['if ( newName ! = null & & !originalName . equals ( newName ) ) {', 'if ( newName ! = null ) {', 'ze . setName ( newName ) ;', 'if ( !originalName . equals ( newName ) ) {', '}', 'ze . setName ( newName ) ;']","['if ( !originalName . equals ( newName ) ) {', 'ze . setName ( newName ) ;', '}', 'ze . setName ( newName ) ;']","['if ( memory [ start ] = = - 1 ) {', 'final int newCounter = ( counter + 1 ) & mask ;', 'return ( counter + 1 ) & mask ;', 'if ( !wrappedAround & & start > = wHead ) {', 'Arrays . fill ( memory , ( byte ) - 1 ) ;', 'return newCounter ;', '}', 'private boolean wrappedAround ;', 'wrappedAround = true ;', 'if ( !wrappedAround & & newCounter < counter ) {']","['break ;', 'break ;', 'byte [ ] buf = new byte [ 1024 * 8 ] ;', 'byte [ ] buf = new byte [ 1024 * 8 ] ;', 'while ( true ) {', 'while ( true ) {', 'ZipArchiveEntry e = entries . nextElement ( ) ;', 'ZipArchiveEntry e = entries . nextElement ( ) ;', '@ Test', '@ Test']","['final File archive = getFile ( ""COMPRESS - 380 - dd . zip"" ) ;', 'final File archive = getFile ( ""COMPRESS - 380 / COMPRESS - 380 . zip"" ) ;', 'final File input = getFile ( ""COMPRESS - 380 - input"" ) ;', 'final File archive = getFile ( ""COMPRESS - 380 / COMPRESS - 380 - dd . zip"" ) ;', 'final File archive = getFile ( ""COMPRESS - 380 . zip"" ) ;', 'final File input = getFile ( ""COMPRESS - 380 / COMPRESS - 380 - input"" ) ;', 'final File input = getFile ( ""COMPRESS - 380 - input"" ) ;', 'final File archive = getFile ( ""COMPRESS - 380 / COMPRESS - 380 . zip"" ) ;', 'final File archive = getFile ( ""COMPRESS - 380 . zip"" ) ;', 'final File input = getFile ( ""COMPRESS - 380 / COMPRESS - 380 - input"" ) ;']","['readBits ( Byte . SIZE - 3 ) ;', 'reader . alignWithByteBoundary ( ) ;', '}', 'public void alignWithByteBoundary ( ) throws IOException {', 'if ( toSkip > 0 ) {', 'readBits ( toSkip ) ;', 'int toSkip = bitsCachedSize % 8 ;']","['int max = Math . min ( blockLength - read , len ) ;', 'private UncompressedState ( long blockLength ) {', 'private final int blockLength ;', 'private long read ;', 'state = new UncompressedState ( ( int ) bLen ) ;', 'private final long blockLength ;', 'private int read ;', 'state = new UncompressedState ( bLen ) ;', 'private UncompressedState ( int blockLength ) {', 'int max = ( int ) Math . min ( blockLength - read , len ) ;']","['this . reader = reader ;', 'void add ( byte [ ] b , int off , int len ) {', 'b [ off + i ] = memory . add ( next ) ;', 'b [ off + i ] = memory . add ( next ) ;', '}', 'if ( reader . bitsCached ( ) > 0 ) {', 'read + + ;', 'i + = readNow ;', 'private HuffmanDecoder ( BitInputStream reader ) {', 'throw new EOFException ( ""Truncated Deflate64 Stream"" ) ;']","['private void closeDecoder ( ) throws IOException {', 'private void closeDecoder ( ) {']","['final boolean phased , long archiveOffset ) throws IOException {', 'final boolean phased , long archiveOffset ) {']","['final ZipFile expected = new ZipFile ( expectedFile ) ;', 'final InputStream expectedIs = expected . getInputStream ( expectedElement ) ;', 'assertEquals ( expectedElement . getExternalAttributes ( ) , actualElement . getExternalAttributes ( ) ) ;', 'throws IOException {', 'assertEquals ( expectedElement . getCompressedSize ( ) , actualElement . getCompressedSize ( ) ) ;', 'IOUtils . readFully ( actualIs , actualBuf ) ;', 'final InputStream expectedIs = expected . getInputStream ( expectedElement ) ;', '}', 'SeekableInMemoryByteChannel c = new SeekableInMemoryByteChannel ( ) ;', 'final Enumeration < ZipArchiveEntry > actualInOrder = actual . getEntriesInPhysicalOrder ( ) ;']","['return new BZip2CompressorInputStream ( bis ) ;', 'final InputStream buf = new BufferedInputStream ( bis ) ;', 'return new Deflate64CompressorInputStream ( bis ) ;', 'return new Deflate64CompressorInputStream ( buf ) ;', 'ze . getGeneralPurposeBit ( ) . getNumberOfShannonFanoTrees ( ) , new BufferedInputStream ( bis ) ) ;', 'return new InflaterInputStream ( buf , inflater ) {', 'return new UnshrinkingInputStream ( bis ) ;', 'ze . getGeneralPurposeBit ( ) . getNumberOfShannonFanoTrees ( ) , buf ) ;', 'return new InflaterInputStream ( bis , inflater ) {', 'return new BZip2CompressorInputStream ( buf ) ;']","['return runBuffer . length - runBufferPos ;', 'b [ off + result + + ] = memory . add ( ( byte ) symbol ) ;', 'runBuffer = new byte [ run ] ;', 'byte next = ( byte ) readBits ( Byte . SIZE ) ;', 'int bytesInBuffer = runBuffer . length - runBufferPos ;', 'private int runBufferLength = 0 ;', 'byte next = ( byte ) ( readBits ( Byte . SIZE ) & 0xFF ) ;', '}', 'b [ off + result + + ] = memory . add ( ( byte ) ( symbol & 0xFF ) ) ;', 'return runBufferLength - runBufferPos ;']","['runBuffer = new byte [ run ] ;', 'runBuffer = new byte [ run ] ;']","['final Coder coder , final byte [ ] password )', '@ SuppressWarnings ( ""resource"" )', 'super ( Number . class ) ;', 'static class Deflate64Decoder extends CoderBase {', 'InputStream decode ( final String archiveName , final InputStream in , final long uncompressedLength ,', 'throws IOException {', '}', 'put ( SevenZMethod . DEFLATE64 , new Deflate64Decoder ( ) ) ;', 'Deflate64Decoder ( ) {', 'return new Deflate64CompressorInputStream ( in ) ;']","['public static final Feature UNKNOWN COMPRESSED SIZE = new Feature ( ""unknown compressed size"" ) ;', '& & supportsDataDescriptorFor ( ze ) ;', '& & supportsCompressedSizeFor ( ze ) ;', 'throw new UnsupportedZipFeatureException ( UnsupportedZipFeatureException . Feature . UNKNOWN COMPRESSED SIZE ,', '| | entry . getMethod ( ) = = ZipMethod . ENHANCED DEFLATED . getCode ( )', '& & entry . getMethod ( ) = = ZipEntry . STORED ) ;', '}', 'if ( !supportsCompressedSizeFor ( current . entry ) ) {', '| | entry . getMethod ( ) = = ZipEntry . DEFLATED', '& & allowStoredEntriesWithDataDescriptor']","['super ( in ) ;', 'import java . io . ByteArrayInputStream ;', 'final int result = super . read ( b , off , len ) ;', 'private static final byte [ ] ONE ZERO BYTE = new byte [ 1 ] ;', '@ Override', 'final InflaterInputStream inflaterInputStream = new InflaterInputStream ( new SequenceInputStream ( in ,', 'if ( result = = - 1 & & addDummyByte ) {', 'import java . io . SequenceInputStream ;', 'private DummyByteAddingInputStream ( final InputStream in ) {', 'new ByteArrayInputStream ( ONE ZERO BYTE ) ) , inflater ) ;']","['return new InflaterInputStream ( new SequenceInputStream ( buf , new ByteArrayInputStream ( ONE ZERO BYTE ) ) ,', 'return new InflaterInputStream ( new SequenceInputStream ( is , new ByteArrayInputStream ( ONE ZERO BYTE ) ) ,', 'final BoundedInputStream bis =', 'final InputStream is =', 'final InputStream buf = new BufferedInputStream ( bis ) ;', 'return is ;', 'return bis ;', 'ze . getGeneralPurposeBit ( ) . getNumberOfShannonFanoTrees ( ) , is ) ;', 'return new Deflate64CompressorInputStream ( buf ) ;', 'return new BZip2CompressorInputStream ( is ) ;']","['private SEGMENT TYPE ( final int code ) {', 'COMPRESSION TYPE ( final int code ) {', 'private COMPRESSION TYPE ( final int code ) {', 'SEGMENT TYPE ( final int code ) {', 'private PERMISSION ( final int code ) {', 'TYPE ( final int code ) {', 'private TYPE ( final int code ) {', 'PERMISSION ( final int code ) {', 'private Mode ( final String message ) {', 'Mode ( final String message ) {']","['private static enum Mode {', 'private enum Mode {', 'static enum CachedAvailability {', 'enum CachedAvailability {', 'public static enum BlockType {', 'public enum BlockType {', 'static enum CachedAvailability {', 'enum CachedAvailability {', 'static enum CachedAvailability {', 'enum CachedAvailability {']","['return true ;', 'signature [ 7 ] = = 0x0a ;', 'if ( signature [ 2 ] ! = 0x61 ) {', 'signature [ 5 ] = = 0x68 & & signature [ 6 ] = = 0x3e & &', '}', 'signature [ 1 ] = = 0x3c & & signature [ 2 ] = = 0x61 & &', 'if ( signature [ 4 ] ! = 0x63 ) {', 'signature [ 3 ] = = 0x72 & & signature [ 4 ] = = 0x63 & &', 'if ( signature [ 7 ] ! = 0x0a ) {', 'return length > = 8 & & signature [ 0 ] = = 0x21 & &']","['return true ;', '} else return name . equals ( other . name ) ;', '} else if ( !name . equals ( other . name ) ) {', 'return other . name = = null ;', '}', 'return false ;', 'if ( other . name ! = null ) {', 'return true ;', '} else return name . equals ( other . name ) ;', '} else if ( !name . equals ( other . name ) ) {']","['final String s = ""Invalid byte "" + currentByte + "" at offset "" + ( current - offset ) + "" in \'"" + string + ""\' len = "" + length ;', 'return ""Invalid byte "" + currentByte + "" at offset "" + ( current - offset ) + "" in \'"" + string + ""\' len = "" + length ;', 'return s ;', 'return c ;', 'return ( destOffs = = offs ) ? - 1 : ( destOffs - offs ) ;', 'final int c = ( destOffs = = offs ) ? - 1 : ( destOffs - offs ) ;']","['throws IOException , ZipException {', 'throws IOException {']","['cte . put ( Integer . valueOf ( method . getCode ( ) ) , method ) ;', 'cte . put ( method . getCode ( ) , method ) ;', 'return codeToEnum . get ( Integer . valueOf ( code ) ) ;', 'return codeToEnum . get ( code ) ;', 'this . decompressUntilEOF = Boolean . valueOf ( decompressUntilEOF ) ;', 'this . decompressUntilEOF = decompressUntilEOF ;']","['} else return name . equals ( other . name ) ;', '} else {', '}', 'return name . equals ( other . name ) ;', '} else return name . equals ( other . name ) ;', '} else {', '}', 'return name . equals ( other . name ) ;']","['return ( summary ! = null | | rhs . summary = = null )', 'return true ;', '& & ( summary = = null | | summary . equals ( rhs . summary ) ) ;', '}', 'if ( ( summary = = null & & rhs . summary ! = null )', 'return false ;', '| | ( summary ! = null & & !summary . equals ( rhs . summary ) ) ) {']","['assertEquals ( 0 , bis . bitsCached ( ) ) ;', 'assertEquals ( 0xF8 , bis . readBits ( 8 ) ) ;', 'public void alignWithByteBoundaryWhenAtBoundary ( ) throws Exception {', '@ Test', 'bis . alignWithByteBoundary ( ) ;', 'public void availableWithCache ( ) throws Exception {', 'try ( final BitInputStream bis = new BitInputStream ( getStream ( ) , ByteOrder . LITTLE ENDIAN ) ) {', '}', 'assertEquals ( 4 , bis . bitsCached ( ) ) ;', 'public void alignWithByteBoundaryWhenNotAtBoundary ( ) throws Exception {']","['bitsCachedSize - = count ;', 'bitsCachedSize - = count ;', 'return bitsOut ;', 'return bitsOut ;', 'bitsOut = ( bitsCached > > ( bitsCachedSize - count ) ) & MASKS [ count ] ;', 'public void alignWithByteBoundary ( ) {', 'final long bitsOut ;', 'bitsOut = ( bitsCached > > ( bitsCachedSize - count ) ) & MASKS [ count ] ;', '}', 'final long bitsOut ;']","['final int yy 0 = yy [ 0 ] ;', 'final byte ch = seqToUnseq [ yy0 ] ;', 'final byte ch = seqToUnseq [ yy 0 ] ;', 'final int yy0 = yy [ 0 ] ;', 'checkBounds ( yy 0 , 256 , ""yy"" ) ;', 'checkBounds ( yy0 , 256 , ""yy"" ) ;', 'private static abstract class DecoderState {', 'private abstract static class DecoderState {', 'auxBuffer [ i + + ] = value ;', 'node = bit = = 0 ? node . leftNode : node . rightNode ;']","['finalBlock = readBits ( 1 ) = = 1 ;', 'finalBlock = readBits ( 1 ) = = 1 ;', 'break ;', 'break ;', 'switchToUncompressedState ( ) ;', 'switchToUncompressedState ( ) ;', 'return state . read ( b , off , len ) ;', 'return state . read ( b , off , len ) ;', 'switch ( mode ) {', 'switch ( mode ) {']","['overflowBits = 8 - bitsToAddCount ;', 'bitsCached < < = Byte . SIZE ;', 'bitsCachedSize + = 8 ;', 'overflowBits = Byte . SIZE - bitsToAddCount ;', 'bitsCached < < = 8 ;', 'bitsCachedSize + = Byte . SIZE ;', 'return bitsCachedSize + 8L * in . available ( ) ;', 'int toSkip = bitsCachedSize % Byte . SIZE ;', 'int toSkip = bitsCachedSize % 8 ;', 'return bitsCachedSize + ( ( long ) Byte . SIZE ) * in . available ( ) ;']","['return b [ 0 ] & 0xFF ;', 'return ONE BYTE [ 0 ] & 0xFF ;', 'int r = read ( b ) ;', 'int r = read ( ONE BYTE ) ;', 'byte [ ] b = new byte [ 1 ] ;', 'private final byte [ ] ONE BYTE = new byte [ 1 ] ;']","['return ONE BYTE [ 0 ] & 0xFF ;', 'private final byte [ ] oneByte = new byte [ 1 ] ;', 'int r = read ( ONE BYTE ) ;', 'int r = read ( oneByte ) ;', 'private final byte [ ] ONE BYTE = new byte [ 1 ] ;', 'return oneByte [ 0 ] & 0xFF ;']","['for ( int i = offset ; len < length & & buffer [ i ] ! = 0 ; i + + , len + + ) ;', 'for ( int i = offset ; len < length & & buffer [ i ] ! = 0 ; i + + ) {', '}', 'len + + ;', 'if ( state . state ( ) = = HuffmanState . INITIAL ) {', 'if ( state . state ( ) = = INITIAL ) {']","['final boolean preserveLeadingSlashes ) {', 'if ( !preserveAbsolutePath ) {', 'this ( name , preserveLeadingSlashes ) ;', 'final boolean preserveAbsolutePath ) {', 'this . name = normalizeFileName ( name , this . preserveLeadingSlashes ) ;', 'private boolean preserveAbsolutePath ;', 'name = normalizeFileName ( name , preserveLeadingSlashes ) ;', 'this . preserveAbsolutePath = preserveAbsolutePath ;', 'while ( !preserveLeadingSlashes & & fileName . startsWith ( "" / "" ) ) {', 'this ( name , preserveAbsolutePath ) ;']","[""& & ( ch1 > = 'a' & & ch1 < = 'z'"", ""& & ( ch1 > = 'a' & & ch1 < = 'z'"", 'fileName = fileName . substring ( 2 ) ;', 'fileName = fileName . substring ( 2 ) ;', 'if ( osname ! = null ) {', 'if ( osname ! = null ) {', 'final char ch2 = fileName . charAt ( 1 ) ;', 'final char ch2 = fileName . charAt ( 1 ) ;', 'if ( fileName . length ( ) > 2 ) {', 'if ( fileName . length ( ) > 2 ) {']","['this ( ) ;', 'private TarArchiveEntry ( boolean preserveAbsolutePath ) {', 'this . preserveAbsolutePath = preserveAbsolutePath ;', 'this ( false ) ;', 'private TarArchiveEntry ( ) {', 'this . preserveAbsolutePath = preserveAbsolutePath ;', 'private boolean preserveAbsolutePath ;', 'preserveAbsolutePath = false ;', 'this ( preserveAbsolutePath ) ;', 'private final boolean preserveAbsolutePath ;']","['TarArchiveEntry t = new TarArchiveEntry ( ROOT + ""bar . txt"" , true ) ;', 'TarArchiveEntry t = new TarArchiveEntry ( ROOT + ""foo . txt"" , true ) ;']","['t = new TarArchiveEntry ( ROOT + "" / foo . txt"" , LF GNUTYPE LONGNAME , true ) ;', 't = new TarArchiveEntry ( ROOT + ""foo . txt"" , LF GNUTYPE LONGNAME , true ) ;']","['+ ""http : / / commons . apache . org / proper / commons - compress / limitations . html#7Z"" ,', '+ ""https : / / commons . apache . org / proper / commons - compress / limitations . html#7Z"" ,']","['} finally {', 'try {', '}']","['for ( final Future < ? > future : futures ) {', 'for ( final Future < ? > future : futures ) {', 'future . get ( ) ;', 'future . get ( ) ;', '}', '}', 'es . shutdown ( ) ;', 'es . shutdown ( ) ;']","['for ( final String alias : Charsets . UTF 8 . aliases ( ) ) {', 'for ( final String alias : StandardCharsets . UTF 8 . aliases ( ) ) {', 'if ( Charsets . UTF 8 . name ( ) . equalsIgnoreCase ( charsetName ) ) {', 'import java . nio . charset . StandardCharsets ;', 'import org . apache . commons . compress . utils . Charsets ;', 'if ( StandardCharsets . UTF 8 . name ( ) . equalsIgnoreCase ( charsetName ) ) {', 'public static final Charset UTF 16LE = Charset . forName ( CharsetNames . UTF 16LE ) ;', 'public static final Charset UTF 8 = StandardCharsets . UTF 8 ;', 'public static final Charset UTF 16BE = Charset . forName ( CharsetNames . UTF 16BE ) ;', 'public static final Charset US ASCII = StandardCharsets . US ASCII ;']","['final long skipped = is . skip ( Math . min ( n , available ) ) ;', 'final long skipped = IOUtils . skip ( is , Math . min ( n , available ) ) ;']","['final long skippedBytes = in . skip ( toSkip ) ;', 'final long skippedBytes = IOUtils . skip ( in , toSkip ) ;', 'return decIS . skip ( n ) ;', 'import org . apache . commons . compress . utils . IOUtils ;', 'return IOUtils . skip ( decIS , n ) ;', 'return in . skip ( n ) ;', 'import org . apache . commons . compress . utils . IOUtils ;', 'return IOUtils . skip ( in , n ) ;', 'if ( in . skip ( skipAmount ) ! = skipAmount ) {', 'import org . apache . commons . compress . utils . IOUtils ;']","['+ Integer . toHexString ( headerId . getValue ( ) ) ) . initCause ( aiobe ) ;', 'try {', '}', 'throw ( ZipException ) new ZipException ( ""Failed to parse corrupt ZIP extra field of type ""', '} catch ( ArrayIndexOutOfBoundsException aiobe ) {', 'try {', '@ Test', 'public void parseTurnsArrayIndexOutOfBoundsIntoZipException ( ) throws Exception {', '}', 'byte [ ] d = new byte [ 4 + l . length ] ;']","['length ) ;', 'ze . parseFromCentralDirectoryData ( data , start + WORD , length ) ;', 'if ( local ) {', 'if ( local ) {', '}', '}', 'ze . parseFromLocalFileData ( data , start + WORD , length ) ;', 'ze . parseFromLocalFileData ( data , start + WORD , length ) ;', '} else {', '} else {']","['return buffer . get ( ) ;', 'return bits . getBytesRead ( ) ;', 'class ExplodingInputStream extends InputStream {', 'public long getCompressedCount ( ) {', 'uncompressedCount + + ;', 'public long getUncompressedCount ( ) {', 'import org . apache . commons . compress . utils . CountingInputStream ;', 'import org . apache . commons . compress . utils . InputStreamStatistics ;', 'if ( ret > - 1 ) {', '}']","['implements BZip2Constants , InputStreamStatistics {', 'implements BZip2Constants , InputStreamStatistics {', 'public long getBytesRead ( ) {', 'long getBytesRead ( ) {', '@ Override', '}', '}', 'return in . getBytesRead ( ) ;', 'return in . getBytesRead ( ) ;', 'public long getBytesRead ( ) {']","['return ( infBytes > 0 ) ? infBytes : current . bytesReadFromStream ;', '} else if ( current . entry . getMethod ( ) = = ZipArchiveOutputStream . DEFLATED ) {', 'final long infBytes = inf . getBytesRead ( ) ;', '} else if ( current . entry . getMethod ( ) = = ZipMethod . UNSHRINKING . getCode ( ) ) {', 'return ( ( Deflate64CompressorInputStream ) current . in ) . getCompressedCount ( ) ;', 'return getBytesInflated ( ) ;', 'if ( current . entry . getMethod ( ) = = ZipArchiveOutputStream . STORED ) {', '} else if ( current . entry . getMethod ( ) = = ZipMethod . ENHANCED DEFLATED . getCode ( ) ) {', '}', '} else if ( current . entry . getMethod ( ) = = ZipMethod . BZIP2 . getCode ( ) ) {']","['readStream ( in , entry , map ) ;', 'final File input = getFile ( fileName ) ;', 'readStream ( in , zae , map ) ;', '}', 'public void testInputStreamStatistics ( ) throws IOException , ArchiveException {', 'assertEquals ( ""Mismatch of stats for : "" + me . getKey ( ) ,', 'assertEquals ( Arrays . asList ( 8390036L , 8600L ) , map . get ( "" [ Content Types ] . xml"" ) . get ( 0 ) ) ;', 'private void testInputStreamStatistics ( String fileName , Map < String , List < Long > > expectedStatistics )', 'final File input = getFile ( ""zipbomb . xlsx"" ) ;', 'Map < String , List < Long > > expected = new HashMap < String , List < Long > > ( ) { {']","['return decoder . getBytesRead ( ) ;', 'private long compressedBytesRead ;', 'return compressedBytesRead ;', 'compressedBytesRead = decoder . getBytesRead ( ) ;']","['return is ;', 'return new StoredStatisticsStream ( is ) ;', 'super ( in ) ;', 'return getCompressedCount ( ) ;', 'private static class StoredStatisticsStream extends CountingInputStream implements InputStreamStatistics {', 'public long getCompressedCount ( ) {', 'public long getUncompressedCount ( ) {', 'StoredStatisticsStream ( InputStream in ) {', 'import org . apache . commons . compress . utils . CountingInputStream ;', 'import org . apache . commons . compress . utils . InputStreamStatistics ;']","['me . getValue ( ) , actualStatistics . get ( me . getKey ( ) ) . get ( 0 ) ) ;', 'public void inputStreamStatisticsForShrunkEntry ( ) throws IOException , ArchiveException {', 'for ( Map . Entry < String , List < Long > > me : expectedStatistics . entrySet ( ) ) {', 'public void inputStreamStatisticsForStoredEntry ( ) throws IOException , ArchiveException {', '}', '@ Test', 'assertEquals ( ""Mismatch of stats with expected value for : "" + me . getKey ( ) ,', 'testInputStreamStatistics ( ""SHRUNK . ZIP"" , expected ) ;', '}', 'put ( ""test . txt"" , Arrays . asList ( 5L , 5L ) ) ;']","['return current . bytesReadFromStream ;', 'return current . bytesRead ;', '@ org . junit . Ignore ( ""result from ZipArchiveInputStream is wrong"" )']","['@ Override', '}', 'in . close ( ) ;', 'public void close ( ) throws IOException {']","['literalTree = BinaryTree . decode ( in , 256 ) ;', 'literalTree = BinaryTree . decode ( i , 256 ) ;', 'if ( numberOfTrees = = 3 ) {', 'if ( numberOfTrees = = 3 ) {', 'distanceTree = BinaryTree . decode ( in , 64 ) ;', 'treeSizes + = i . getBytesRead ( ) ;', 'lengthTree = BinaryTree . decode ( in , 64 ) ;', 'public void close ( ) {', 'return bits . getBytesRead ( ) ;', 'distanceTree = BinaryTree . decode ( i , 64 ) ;']","['return true ;', 'void finish ( ) throws IOException ;', 'try ( SeekableByteChannel c = FileChannel . open ( target . toPath ( ) , StandardOpenOption . WRITE ,', 'if ( !e . isDirectory ( ) ) {', '@ Override', 'private interface ArchiveEntryConsumer {', 'return target . createArchiveEntry ( f , entryName ) ;', 'long count = 0 ;', 'create ( prefix + f . getName ( ) + "" / "" , f , filter , creator , consumer ) ;', 'import java . io . OutputStream ;']","['try ( OutputStream o = Channels . newOutputStream ( target ) ) {', 'create ( format , Channels . newOutputStream ( target ) , directory , filter ) ;', '}', 'create ( format , o , directory , filter ) ;']","['create ( prefix + f . getName ( ) + "" / "" , f , filter , creator , consumer ) ;', 'consumer . accept ( f , creator . create ( f , entryName ) ) ;', 'consumer . accept ( f , creator . create ( f , prefix + f . getName ( ) ) ) ;', 'create ( entryName , f , filter , creator , consumer ) ;', 'String entryName = prefix + f . getName ( ) + ( f . isDirectory ( ) ? "" / "" : """" ) ;']","['out . putArchiveEntry ( e ) ;', 'target . closeArchiveEntry ( ) ;', 'out . finish ( ) ;', 'public void create ( final SevenZOutputFile target , File directory , FileFilter filter ) throws IOException {', 'final SevenZOutputFile out = new SevenZOutputFile ( target ) ;', 'create ( new SevenZOutputFile ( target ) , directory , filter ) ;', 'out . closeArchiveEntry ( ) ;', 'return target . createArchiveEntry ( f , entryName ) ;', 'out . write ( buffer , 0 , n ) ;', '}']","['create ( format , new ZipArchiveOutputStream ( target ) , directory , filter ) ;', 'create ( new ZipArchiveOutputStream ( target ) , directory , filter ) ;']","['return true ;', 'f . mkdirs ( ) ;', 'if ( !filter . accept ( nextEntry ) ) {', '@ Override', 'IOUtils . copy ( archive , out ) ;', '} , targetDirectory , filter ) ;', 'final Enumeration < ZipArchiveEntry > entries = archive . getEntries ( ) ;', 'ArchiveEntry next = archive . getNextEntry ( ) ;', 'continue ;', 'public void expand ( String format , InputStream archive , File targetDirectory )']","['karafDistributionConfiguration ( )', 'configureConsole ( ) . ignoreLocalConsole ( ) ,', '@ Test', 'features ( karafStandardRepo , ""scr"" ) ,', 'public Option [ ] config ( ) {', '}', '. artifactId ( ""commons - compress"" )', 'public static String commonsCompressVersion ( ) {', '. artifactId ( ""apache - karaf"" )', '. groupId ( ""org . apache . karaf . features"" )']","['karafDistributionConfiguration ( )', 'mavenBundle ( ) . groupId ( ""org . apache . servicemix . bundles"" )', 'configureConsole ( ) . ignoreLocalConsole ( ) ,', 'systemProperty ( ""pax . exam . osgi . unresolved . fail"" ) . value ( ""true"" ) ,', 'features ( karafStandardRepo , ""scr"" ) ,', '. version ( ""1 . 8 . 16"" ) ,', '}', '. version ( ""2 . 0 . 14"" ) ,', '. artifactId ( ""commons - compress"" )', 'import static org . ops4j . pax . exam . CoreOptions . bundle ;']","['public long getUncompressedCount ( ) {', 'return getBytesRead ( ) ;', '}', 'this . decIS = new org . brotli . dec . BrotliInputStream ( in ) ;', 'public class BrotliCompressorInputStream extends CompressorInputStream', 'public class BrotliCompressorInputStream extends CompressorInputStream {', 'public long getCompressedCount ( ) {', 'private final org . brotli . dec . BrotliInputStream decIS ;', 'import org . brotli . dec . BrotliInputStream ;', 'decIS = new BrotliInputStream ( countingStream = new CountingInputStream ( in ) ) ;']","['ChainBuilder filter ( Filter < File > filter ) ;', 'this . chainDef = chainDef ;', '} ) ;', 'void to ( Sink < File > sink ) throws IOException , ArchiveException ;', '}', 'ChainBuilder filter ( FileFilter filter ) ;', 'return this ;', 'this . sink = sink ;', '@ Override', 'sink . finish ( ) ;']","['public void remove ( ) {', '@ Override', 'throw new UnsupportedOperationException ( ) ;', '}']","['public ChainBuilder map ( Transformer transformer ) {', 'ChainBuilder map ( Transformer transformer ) ;', '}', 'return this ;', 'chainDef . add ( transformer ) ;', 'import org . apache . commons . compress . archivers . ArchiveException ;', 'import java . io . IOException ;', 'package org . apache . commons . compress . archivers . examples ;', 'public abstract class Transformer < T > implements ChainStep < T > {', '}']","['ChainBuilder map ( Transformer transformer ) ;', 'ChainBuilder map ( Transformer < File > transformer ) ;']","['public ChainBuilder map ( Transformer transformer ) {', 'public ChainBuilder map ( Transformer < File > transformer ) {']","['files = fs = = null', 'import java . util . Collections ;', 'throw new NoSuchElementException ( ) ;', 'files = fs = = null ? Collections . < File > emptyIterator ( ) : Arrays . asList ( fs ) . iterator ( ) ;', '? new Iterator < File > ( ) {', '}', 'public File next ( ) {', ': Arrays . asList ( fs ) . iterator ( ) ;', 'public void remove ( ) {', 'public boolean hasNext ( ) {']","['private class DirectoryIterator implements ThrowingIterator < ChainPayload < File > > {', 'private static class DirectoryIterator implements ThrowingIterator < ChainPayload < File > > {']","['try ( Sink < File > sink = FileToArchiveSink . forFile ( args [ 1 ] , new File ( args [ 2 ] ) ) ) {', 'try ( Sink < File > sink = ArchiveSinks . forFile ( args [ 1 ] , new File ( args [ 2 ] ) ) ) {', 'public static Sink < File > forStream ( ArchiveOutputStream os ) {', 'import java . nio . channels . Channels ;', 'import org . apache . commons . compress . archivers . ArchiveOutputStream ;', '}', 'public static Sink < File > forChannel ( String format , SeekableByteChannel c ) throws IOException , ArchiveException {', 'import org . apache . commons . compress . archivers . ArchiveStreamFactory ;', '. createArchiveOutputStream ( format , new FileOutputStream ( target ) ) ) ;', 'public class ArchiveSinks {']","['private Archive ( Supplier < ThrowingIterator < ChainPayload < File > > > supplier , ChainDefinition < File > chainDef ,', 'this . source = source ;', 'return source ( new DirectoryBasedSupplier ( f ) ) ;', 'return source ( new DirectoryBasedSource ( f ) ) ;', 'return new Builder ( supplier ) ;', 'private final Source < File > source ;', 'Sink < File > sink ) {', 'private Archive ( Source < File > source , ChainDefinition < File > chainDef , Sink < File > sink ) {', 'ThrowingIterator < ChainPayload < File > > iter = supplier . get ( ) ;', 'Builder ( Source < File > source ) {']","['chainDef . add ( transformer ) ;', 'ChainBuilder withStep ( ChainStep < File > step ) ;', 'chainDef . add ( filter ) ;', 'return withStep ( filter ) ;', 'return this ;', 'return withStep ( transformer ) ;', '}', 'chainDef . add ( step ) ;', '@ Override', 'public ChainBuilder withStep ( ChainStep < File > step ) {']","['return forStream ( new ZipArchiveOutputStream ( c ) ) ;', 'return new FileToArchiveSink ( new ZipArchiveOutputStream ( c ) ) ;', 'public static Sink < File > forStream ( ArchiveOutputStream os ) {', 'return new FileToArchiveSink ( os ) ;', 'import org . apache . commons . compress . archivers . ArchiveOutputStream ;', '}']","['sink . finish ( ) ;', 'new ChainRunner < File > ( source , chainDef , sink ) . run ( ) ;', 'this . source = source ;', 'this . chainDef = chainDef ;', 'private final ChainDefinition < File > chainDef ;', 'private final Source < File > source ;', 'private final Sink < File > sink ;', 'private Archive ( Source < File > source , ChainDefinition < File > chainDef , Sink < File > sink ) {', '}', 'private void run ( ) throws IOException , ArchiveException {']","['} else if ( args . length = = 1 ) {', '}', 'System . err . println ( f + "" doesn\'t exist or is a directory"" ) ;', '@ Override', 'System . out . println ( ""Analysing "" + args [ 0 ] ) ;', 'System . out . println ( ""Parameters : archive - name [ archive - type ] "" ) ;', 'private static void usage ( ) {', 'import org . apache . commons . compress . archivers . ArchiveEntry ;', 'public void close ( ) {', 'try ( ArchiveEntrySource source = ArchiveSources . forFile ( f ) . detectFormat ( ) ) {']","['return getCurrentStream ( ) . read ( b , off , len ) ;', 'return uncompressedBytesReadFromCurrentEntry ;', 'InputStream inputStreamStack =', 'if ( cnt > 0 ) {', 'archive . packSizes [ firstPackStreamIndex ] ) ) ;', 'return compressedBytesReadFromCurrentEntry ;', 'new BufferedInputStream (', 'uncompressedBytesReadFromCurrentEntry = compressedBytesReadFromCurrentEntry = 0 ;', 'return getCurrentStream ( ) . read ( ) ;', 'if ( r > = 0 ) {']","['import java . io . InputStream ;', 'super ( in ) ;', 'import java . io . IOException ;', 'public SkipShieldingInputStream ( InputStream in ) {', '}', 'private static final int SKIP BUFFER SIZE = 8192 ;', 'public class SkipShieldingInputStream extends FilterInputStream {', 'package org . apache . commons . compress . utils ;', 'public long skip ( long n ) throws IOException {', 'private static final byte [ ] SKIP BUFFER = new byte [ SKIP BUFFER SIZE ] ;']","['if ( buffersize < 1 ) {', 'throw new IllegalArgumentException ( ""buffersize must be bigger than 0"" ) ;', '}', '@ Test ( expected = IllegalArgumentException . class )', '}', 'IOUtils . copy ( new ByteArrayInputStream ( new byte [ 0 ] ) , new ByteArrayOutputStream ( ) , 0 ) ;', 'import java . io . ByteArrayOutputStream ;', 'public void copyThrowsOnZeroBufferSize ( ) throws IOException {']","['private static void listStream ( File f , String [ ] args ) throws ArchiveException , IOException {', 'System . out . println ( ae . getName ( ) ) ;', 'import java . io . IOException ;', 'list7z ( f ) ;', 'private static String detectFormat ( File f ) throws ArchiveException , IOException {', 'return factory . detect ( fis ) ;', 'listStream ( f , args ) ;', 'private static void list7z ( File f ) throws ArchiveException , IOException {', 'ArchiveEntry ae ;', 'import org . apache . commons . compress . archivers . sevenz . SevenZFile ;']","['this . password = new byte [ password . length ] ;', 'this . password = Arrays . copyOf ( password , password . length ) ;', 'System . arraycopy ( password , 0 , this . password , 0 , password . length ) ;']","['this ( channel , ""unknown archive"" , null ) ;', 'this ( Files . newByteChannel ( filename . toPath ( ) , EnumSet . of ( StandardOpenOption . READ ) ) ,', 'this ( filename , null ) ;', '}', 'public SevenZFile ( final SeekableByteChannel channel ,', 'filename . getAbsolutePath ( ) , utf16Decode ( password ) , true ) ;', 'this ( channel , filename , utf16Decode ( password ) , false ) ;', 'import java . nio . charset . CharsetEncoder ;', 'if ( encoded . hasArray ( ) ) {', 'private static byte [ ] utf16Decode ( char [ ] chars ) throws IOException {']","['assertEquals ( TEST2 CONTENT , new String ( contents , ""UTF - 8"" ) ) ;', 'assertEquals ( TEST2 CONTENT , new String ( contents , ""UTF - 8"" ) ) ;', 'assertNull ( sevenZFile . getNextEntry ( ) ) ;', 'assertNull ( sevenZFile . getNextEntry ( ) ) ;', 'assert ( bytesRead > = 0 ) ;', 'assert ( bytesRead > = 0 ) ;', 'assertEquals ( m , entry . getContentMethods ( ) . iterator ( ) . next ( ) . getMethod ( ) ) ;', 'assertEquals ( m , entry . getContentMethods ( ) . iterator ( ) . next ( ) . getMethod ( ) ) ;', '}', '}']","['public InflaterInputStream ( InputStream in , Inflater inf ) {', 'public InflaterInputStreamWithStatistics ( InputStream in , Inflater inf ) {', 'public InflaterInputStream ( InputStream in ) {', 'import java . util . zip . InflaterInputStream ;', 'public InflaterInputStream ( InputStream in , Inflater inf , int size ) {', 'public InflaterInputStreamWithStatistics ( InputStream in ) {', 'public InflaterInputStreamWithStatistics ( InputStream in , Inflater inf , int size ) {', 'return new InflaterInputStream ( new SequenceInputStream ( is , new ByteArrayInputStream ( ONE ZERO BYTE ) ) ,', 'return new InflaterInputStreamWithStatistics ( new SequenceInputStream ( is , new ByteArrayInputStream ( ONE ZERO BYTE ) ) ,']","['try ( OutputStream o = new FileOutputStream ( target ) ) {', 'try ( InputStream in = new BufferedInputStream ( Files . newInputStream ( source . toPath ( ) ) ) ) {', 'try ( InputStream in = new BufferedInputStream ( new FileInputStream ( source ) ) ) {', 'import java . nio . file . Files ;', 'try ( OutputStream o = Files . newOutputStream ( target . toPath ( ) ) ) {', 'try ( InputStream i = new BufferedInputStream ( new FileInputStream ( archive ) ) ) {', 'import java . nio . file . Files ;', 'try ( OutputStream o = new FileOutputStream ( f ) ) {', 'try ( InputStream i = new BufferedInputStream ( Files . newInputStream ( archive . toPath ( ) ) ) ) {', 'try ( OutputStream o = Files . newOutputStream ( f . toPath ( ) ) ) {']","['throws IOException {', '}', 'this ( channel , filename , null , false ) ;', 'public SevenZFile ( final SeekableByteChannel channel , String filename )']","['create ( new ArchiveStreamFactory ( ) . createArchiveOutputStream ( format , target ) , directory , filter ) ;', 'File [ ] children = directory . listFiles ( ) ;', 'return true ;', 'create ( format , c , directory ) ;', 'public void create ( ArchiveOutputStream target , File directory ) throws IOException , ArchiveException {', 'create ( new SevenZOutputFile ( target ) , directory ) ;', 'public void create ( String format , OutputStream target , File directory , FileFilter filter )', 'private void create ( String prefix , File directory , ArchiveEntryCreator creator , ArchiveEntryConsumer consumer )', 'create ( format , target , directory , ACCEPT ALL ) ;', 'create ( directory , new ArchiveEntryCreator ( ) {']","['ChainBuilder withStep ( ChainStep < File > step ) ;', 'ChainBuilder filter ( Filter < File > filter ) ;', '} ) ;', 'void to ( Sink < File > sink ) throws IOException , ArchiveException ;', '}', 'Builder ( Source < File > source ) {', 'ChainBuilder filter ( FileFilter filter ) ;', 'new ChainRunner < File > ( source , chainDef , sink ) . run ( ) ;', 'return this ;', 'chainDef . add ( step ) ;']","['f . getParentFile ( ) . mkdirs ( ) ;', 'throw new IOException ( ""failed to create directory "" + parent ) ;', 'f . mkdirs ( ) ;', 'if ( !f . isDirectory ( ) & & !f . mkdirs ( ) ) {', 'throw new IOException ( ""failed to create directory "" + f ) ;', '}', 'File parent = f . getParentFile ( ) ;', 'if ( !parent . isDirectory ( ) & & !parent . mkdirs ( ) ) {']","['new SevenZFile ( new SeekableInMemoryByteChannel ( output . array ( ) ) , ""in memory"" ,', 'new SevenZFile ( new SeekableInMemoryByteChannel ( output . array ( ) ) , ""in memory"" ) ) {', '( char [ ] ) null ) ) {']","['new Archiver ( ) . create ( format , c , dir ) ;', 'try ( SeekableByteChannel c = FileChannel . open ( target . toPath ( ) , StandardOpenOption . WRITE ,', '@ Override', 'import java . util . Arrays ;', 'byte [ ] expected = ( ""Hello , world "" + suffix ) . getBytes ( StandardCharsets . UTF 8 ) ;', 'import org . apache . commons . compress . archivers . ArchiveEntry ;', 'Assert . assertEquals ( expectedName + "" / "" , entry . getName ( ) ) ;', 'assertDir ( ""a"" , ais . getNextEntry ( ) ) ;', 'public void channelVersion ( ) throws IOException , ArchiveException {', 'Assert . assertTrue ( expectedName + "" is not a directory"" , entry . isDirectory ( ) ) ;']","['private File archive ;', 'public void sevenZChannelVersion ( ) throws IOException , ArchiveException {', 'public void sevenZInputStreamVersion ( ) throws IOException , ArchiveException {', 'aos . putArchiveEntry ( aos . createArchiveEntry ( dir , ""a / b / c"" ) ) ;', 'byte [ ] expected = ( ""Hello , world "" + suffix ) . getBytes ( StandardCharsets . UTF 8 ) ;', 'import java . util . Arrays ;', 'import org . apache . commons . compress . archivers . ArchiveEntry ;', 'Assert . assertTrue ( fileName + "" does not exist"" , new File ( resultDir , fileName ) . isFile ( ) ) ;', '. createArchiveOutputStream ( ""zip"" , Files . newOutputStream ( archive . toPath ( ) ) ) ) {', 'import java . io . OutputStream ;']","['+ "" would craete file outside of "" + targetDirectory ) ;', '+ "" would create file outside of "" + targetDirectory ) ;']","['new Expander ( ) . expand ( new ZipFile ( archive ) , resultDir ) ;', 'new Expander ( ) . expand ( f , resultDir ) ;', 'new Expander ( ) . expand ( new SevenZFile ( archive ) , resultDir ) ;', 'try ( SevenZFile f = new SevenZFile ( archive ) ) {', '}', 'try ( ZipFile f = new ZipFile ( archive ) ) {']","['import org . junit . Before ;', 'try ( ArchiveOutputStream aos = new ArchiveStreamFactory ( )', 'import org . junit . Rule ;', 'setupZip ( "" . . / foo"" ) ;', '@ Test', 'aos . closeArchiveEntry ( ) ;', '}', 'private void setupZip ( String entry ) throws IOException , ArchiveException {', 'try ( ZipFile f = new ZipFile ( archive ) ) {', 'o . write ( new byte [ 14 ] ) ;']","['throw new IOException ( ""block overrun"" ) ;', '+ lastShadow + "" exceeds "" + limitLast ) ;', 'throw new IOException ( ""block overrun while expanding RLE in MTF , ""', 'throw new IOException ( ""block overrun in MTF , ""']","['ll8 [ + + lastShadow ] = ch ;', 'lastShadow + = s ;', '}', 'Arrays . fill ( ll8 , from , lastShadow + 1 , ch ) ;', 'while ( s - - > = 0 ) {', 'final int from = + + lastShadow ;']","['for ( int i = 0 ; !done & & i < lastRead - 4 ; i + + ) {', 'for ( int i = 0 ; !done & & i < offset + lastRead - 4 ; i + + ) {']","['String targetDirPath = targetDirectory . getCanonicalPath ( ) ;', 'String targetDirPath = targetDirectory . getCanonicalPath ( ) + File . separatorChar ;', 'tryHardToDelete ( s ) ;', 'String sibling = resultDir . getName ( ) + ""x"" ;', 'public void fileCantEscapeDoubleDotPathWithSimilarSibling ( ) throws IOException , ArchiveException {', 'Assume . assumeTrue ( s . exists ( ) ) ;', '@ Test', 's . mkdirs ( ) ;', 'try {', 'setupZip ( "" . . / "" + sibling + "" / a"" ) ;']","['String targetDirPath = targetDirectory . getCanonicalPath ( ) + File . separatorChar ;', 'if ( !targetDirPath . endsWith ( File . separator ) ) {', 'targetDirPath + = File . separatorChar ;', '}', 'String targetDirPath = targetDirectory . getCanonicalPath ( ) ;']","['} finally {', 'try {', '}', '} finally {', 'try {', '}', '} finally {', 'try {', '}', '} finally {']","['}', '}', 'prevEntry = null ;', 'if ( !finished ) {', 'finish ( ) ;', 'prevEntry = null ;', 'out . close ( ) ;', 'finish ( ) ;', 'if ( !finished ) {', 'out . close ( ) ;']","['if ( sig . equals ( ZipLong . CFH SIG ) | | sig . equals ( ZipLong . AED SIG ) ) {', '} catch ( EOFException ex ) {', 'if ( !sig . equals ( ZipLong . LFH SIG ) ) {', 'if ( toSkip . signum ( ) < 0 ) {', 'final int count = IOUtils . readFully ( in , b ) ;', 'System . arraycopy ( suspectLocalFileHeader , off , magic , 0 , Math . min ( bytesInBuffer , magic . length ) ) ;', 'if ( count < b . length ) {', 'private boolean isApkSigningBlock ( byte [ ] suspectLocalFileHeader ) throws IOException {', 'try {', ""'A' , 'P' , 'K' , ' ' , 'S' , 'i' , 'g' , ' ' , 'B' , 'l' , 'o' , 'c' , 'k' , ' ' , '4' , '2' ,""]","['return null ;', 'return null ;', 'hitCentralDirectory = true ;', 'hitCentralDirectory = true ;', '}', '}', 'skipRemainderOfArchive ( ) ;', 'skipRemainderOfArchive ( ) ;']","['size + = name . length ( ) ;', 'return getHeaderPadCount ( namesize ) ;', '}', 'long namesize = name ! = null ? name . length ( ) : 0 ;', 'public int getHeaderPadCount ( long namesize ) {', 'size + = namesize ;', 'skip ( ret . getHeaderPadCount ( ) ) ;', 'skip ( ret . getHeaderPadCount ( namesize - 1 ) ) ;', 'final CpioArchiveInputStream in =', 'new CpioArchiveInputStream ( new FileInputStream ( getFile ( ""COMPRESS - 459 . cpio"" ) ) , ""UTF - 8"" ) ;']","['if ( remain > 0 ) {', 'if ( charset = = null ) {', 'if ( name = = null ) {', 'if ( name = = null ) {', 'if ( charset = = null ) {', 'public int getHeaderPadCount ( long namesize ) {', 'public int getHeaderPadCount ( long namesize ) {', 'if ( remain > 0 ) {', 'public int getHeaderPadCount ( Charset charset ) {', 'public int getHeaderPadCount ( Charset charset ) {']","['private void writeCString ( final String str ) throws IOException {', 'private void writeCString ( byte [ ] str ) throws IOException {', 'writeAsciiLong ( entry . getName ( ) . length ( ) + 1L , 8 , 16 ) ;', 'writeAsciiLong ( name . length + 1L , 8 , 16 ) ;', 'writeAsciiLong ( entry . getName ( ) . length ( ) + 1L , 6 , 8 ) ;', 'writeAsciiLong ( name . length + 1L , 6 , 8 ) ;', 'count ( len + 1 ) ;', 'count ( str . length + 1 ) ;', 'writeBinaryLong ( entry . getName ( ) . length ( ) + 1L , 2 , swapHalfWord ) ;', 'writeCString ( name ) ;']","['throw new RuntimeException ( ""cannot encode "" + name , ex ) ;', 'if ( charset = = null ) {', 'import java . io . IOException ;', 'import java . nio . charset . Charset ;', 'try {', 'return getHeaderPadCount ( name . getBytes ( charset ) . length ) ;', 'return getHeaderPadCount ( buf . limit ( ) - buf . position ( ) ) ;', 'public int getHeaderPadCount ( Charset charset ) {', 'import java . nio . ByteBuffer ;', '} catch ( IOException ex ) {']","['this . encOS = new ZstdOutputStream ( out ) ;', 'this . encOS = new ZstdOutputStream ( outStream , level ) ;', 'public ZstdCompressorOutputStream ( final OutputStream out ) throws IOException {', 'this . encOS = new ZstdOutputStream ( outStream , level , closeFrameOnFlush ) ;', 'public ZstdCompressorOutputStream ( final OutputStream outStream ) throws IOException {', 'this . encOS = new ZstdOutputStream ( outStream , level , closeFrameOnFlush , useChecksum ) ;', '}', 'public ZstdCompressorOutputStream ( final OutputStream outStream , int level , boolean closeFrameOnFlush ) throws IOException {', 'public ZstdCompressorOutputStream ( final OutputStream outStream , int level , boolean closeFrameOnFlush , boolean useChecksum ) throws IOException {', 'public ZstdCompressorOutputStream ( final OutputStream outStream , int level ) throws IOException {']","['public ZstdCompressorOutputStream ( final OutputStream outStream , int level , boolean closeFrameOnFlush , boolean useChecksum ) throws IOException {', 'boolean useChecksum ) throws IOException {', 'public ZstdCompressorOutputStream ( final OutputStream outStream , int level , boolean closeFrameOnFlush ) throws IOException {', 'public ZstdCompressorOutputStream ( final OutputStream outStream , int level , boolean closeFrameOnFlush ,', 'throws IOException {', 'public ZstdCompressorOutputStream ( final OutputStream outStream , int level , boolean closeFrameOnFlush )', 'ZstdCompressorOutputStream zos = new ZstdCompressorOutputStream ( os ) ) {', 'roundtrip ( new OutputStreamCreator ( ) {', 'ZstdCompressorOutputStream zos = oc . wrap ( os ) ) {', 'public ZstdCompressorOutputStream wrap ( FileOutputStream os ) throws IOException {']","['try ( InputStream is = new FileInputStream ( input ) ) {', 'Assert . assertEquals ( - 1 , in . read ( ) ) ;', 'in . close ( ) ;', '@ Test', 'final GzipCompressorInputStream in =', '}', 'public void singleByteReadConsistentlyReturnsMinusOneAtEof ( ) throws IOException {', 'IOUtils . toByteArray ( in ) ;', 'new GzipCompressorInputStream ( is ) ;', 'byte [ ] buf = new byte [ 2 ] ;']","['this . entryBytesRead + = tmpread ;', 'if ( tmpread > 0 ) {', 'this . entryBytesRead + = tmpread ;', '}', 'final File file1 = getFile ( ""test1 . xml"" ) ;', 'private void singleByteReadConsistentlyReturnsMinusOneAtEof ( final SevenZMethod method ) throws Exception {', 'SevenZArchiveEntry entry ;', 'private void singleByteReadConsistentlyReturnsMinusOneAtEof ( SevenZFile archive ) throws Exception {', 'assert ( archive . getNextEntry ( ) = = null ) ;', '@ Test']","['return - 1 ;', 'throw new IOException ( ""Truncated ZIP file"" ) ;', 'buf . limit ( 0 ) ;', 'fail ( ""shouldn\'t be able to read from truncated entry after exception"" ) ;', 'try {', '}', '} catch ( final IOException e ) {', 'zi . read ( buffer ) ;', 'assertEquals ( ""Truncated ZIP file"" , e . getMessage ( ) ) ;', 'ArchiveEntry e = archive . getNextEntry ( ) ;']","['final int read = IOUtils . readFully ( this , realized ) ;', 'private static final int USER ID LEN = 6 ;', 'IOUtils . skip ( this , entryEnd - offset ) ;', 'asInt ( metaData , GROUP ID OFFSET , GROUP ID LEN , true ) ,', 'long len = asLong ( lengthBuf ) ;', 'final String string = ArchiveUtils . toAsciiString ( byteArray , offset , len ) . trim ( ) ;', 'private int asInt ( final byte [ ] byteArray , final int base , final boolean treatBlankAsZero ) {', 'private long asLong ( final byte [ ] byteArray , int offset , int len ) {', 'IOUtils . readFully ( this , idBuf ) ;', 'trackReadBytes ( 1 ) ;']","['public static < E > HashSet < E > newHashSet ( @ SuppressWarnings ( ""unchecked"" ) E . . . elements ) {', 'public static < E > HashSet < E > newHashSet ( E . . . elements ) {', '@ SafeVarargs']","['toRead = ( int ) Math . min ( len , entryEnd - offset ) ;', 'if ( len < 0 | | offset > = entryEnd ) {', '} else {', 'final int toRead = ( int ) Math . min ( len , entryEnd - offset ) ;', 'int toRead = len ;', 'if ( len > 0 & & entryEnd > offset ) {', 'count + = n ;', 'targetDirPath + = File . separator ;', 'long count = 0 ;', 'int n ;']","['hasCompressionLevelChanged = ( this . level ! = level ) ;', 'hasCompressionLevelChanged = true ;', 'if ( this . level = = level ) {', '}', 'return ;']","['System . out . println ( ""Parameters : archive - name [ archive - type ] "" ) ;', 'try ( ZipFile z = new ZipFile ( f ) ) {', 'import java . util . Enumeration ;', 'for ( Enumeration < ZipArchiveEntry > en = z . getEntries ( ) ; en . hasMoreElements ( ) ; ) {', 'System . out . println ( en . nextElement ( ) . getName ( ) ) ;', 'System . out . println ( ""Parameters : archive - name [ archive - type ] \\ n"" ) ;', 'System . out . println ( ""the magic archive - type \'zipfile\' prefers ZipFile over ZipArchiveInputStream"" ) ;', '} else if ( ""zipfile"" . equals ( format ) ) {', 'import org . apache . commons . compress . archivers . zip . ZipArchiveEntry ;', 'import org . apache . commons . compress . archivers . zip . ZipFile ;']","['final File f = File . createTempFile ( name , """" ) ;', 'import java . nio . file . Files ;', 'f . mkdir ( ) ;', 'return Files . createTempDirectory ( name ) . toFile ( ) ;', 'f . delete ( ) ;', 'return f ;']","['archive . position ( offset + LFH OFFSET FOR FILENAME LENGTH ) ;', 'archive . position ( offset + LFH OFFSET FOR FILENAME LENGTH ) ;', 'final int extraFieldLen = ZipShort . getValue ( shortBuf ) ;', 'final long offset = ze . getLocalHeaderOffset ( ) ;', 'final long offset = ze . getLocalHeaderOffset ( ) ;', 'return s ;', 'wordBbuf . get ( shortBuf ) ;', 'if ( s = = EntryStreamOffsets . OFFSET UNKNOWN ) {', 'ze . setDataOffset ( offset + LFH OFFSET FOR FILENAME LENGTH', '}']","['ze . setStreamContiguous ( true ) ;', 'ze . setStreamContiguous ( true ) ;']","['private void fillNameMap ( ) {', 'for ( final ZipArchiveEntry ze : entries ) {', 'fillNameMap ( ) ;', '}']","['f . getAbsolutePath ( ) , encoding , useUnicodeExtraFields , true ) ;', 'if ( !ignoreLocalFileHeader ) {', 'final boolean closeOnError )', 'final boolean closeOnError , final boolean ignoreLocalFileHeader )', 'resolveLocalFileHeaderData ( entriesWithoutUTF8Flag ) ;', 'final boolean ignoreLocalFileHeader )', 'this ( channel , archiveName , encoding , useUnicodeExtraFields , false ) ;', 'this ( channel , archiveName , encoding , useUnicodeExtraFields , false , ignoreLocalFileHeader ) ;', 'resolveLocalFileHeaderData ( entriesWithoutUTF8Flag ) ;', 'throws IOException {']","['} catch ( final Exception e ) {', '} catch ( final Exception e ) {', 'while ( skip ( ( long ) Integer . MAX VALUE ) = = Integer . MAX VALUE ) {', 'while ( skip ( ( long ) Integer . MAX VALUE ) = = Integer . MAX VALUE ) {', '} catch ( final UnsupportedOptionsException ex ) {', '} catch ( final UnsupportedOptionsException ex ) {', '} catch ( final IllegalArgumentException ex ) {', '} catch ( final IllegalArgumentException ex ) {', '} catch ( final IOException ex ) {', '} catch ( final IOException ex ) {']","['final boolean oldStyle )', 'userId = ( int ) parseOctalOrBinary ( header , offset , UIDLEN , lenient ) ;', 'userId = ( int ) TarUtils . parseOctalOrBinary ( header , offset , UIDLEN ) ;', 'try {', 'devMajor = ( int ) TarUtils . parseOctalOrBinary ( header , offset , DEVLEN ) ;', 'devMajor = ( int ) parseOctalOrBinary ( header , offset , DEVLEN , lenient ) ;', 'parseTarHeader ( header , encoding , false ) ;', 'throws IOException {', 'devMinor = ( int ) TarUtils . parseOctalOrBinary ( header , offset , DEVLEN ) ;', '}']","['private static final long UNKNOWN = - 1l ;', 'public static final long UNKNOWN = - 1l ;']","['final InputStream is = new FileInputStream ( input ) ;', 'final ArchiveInputStream in = new TarArchiveInputStream ( is , true ) ) {', 'try ( final ArchiveInputStream in = new TarArchiveInputStream ( is , true ) ) {', 'try ( final InputStream is = new FileInputStream ( input ) ;']","['List < Object > getList ( String key , List < Object > defaultValue ) ;', 'import java . util . Iterator ;', 'BigInteger getBigInteger ( String key ) ;', 'float getFloat ( String key ) ;', 'BigInteger getBigInteger ( String key , BigInteger defaultValue ) ;', 'int getInt ( String key ) ;', 'Byte getByte ( String key , Byte defaultValue ) ;', 'boolean getBoolean ( String key ) ;', 'String [ ] getStringArray ( String key ) ;', 'Float getFloat ( String key , Float defaultValue ) ;']","['unionBuilders =', 'return unionBuilders ;', 'return overrideBuilders ;', 'namedBuilders =', 'overrideBuilders =', 'private static final String FILE PARAMS =', 'CombinedConfiguration addConfig =', 'static final String KEY COMBINER = KEY RESULT + "" . nodeCombiner"" ;', 'if ( cbParams ! = null )', 'protected CombinedConfiguration createAdditionalsConfiguration (']","['lookup = StrLookup . noneLookup ( ) ;', 'return substitutor . replace ( ( String ) value ) ;', 'return localLookups . remove ( prefix ) ! = null ;', '} ) ;', 'private StrLookup defaultLookup ;', 'import org . apache . commons . lang3 . text . StrSubstitutor ;', 'value = getParentInterpolator ( ) . lookup ( name ) ;', 'defaultLookups = new CopyOnWriteArrayList < Lookup > ( ) ;', 'public void setParentInterpolator ( ConfigurationInterpolator parentInterpolator )', 'Lookup lookup = prefixLookups . get ( prefix ) ;']","['return interpolator ;', 'private final AtomicReference < ConfigurationInterpolator > interpolator ;', 'interpolator = ci ;', 'ConfigurationInterpolator ciNew =', 'private volatile ConfigurationInterpolator interpolator ;', 'success = interpolator . compareAndSet ( ciOld , ciNew ) ;', 'ConfigurationInterpolator ciOld = getInterpolator ( ) ;', '} while ( !success ) ;', 'return null ;', '( ciOld ! = null ) ? ciOld : new ConfigurationInterpolator ( ) ;']","['public Collection < ConfigurationBuilder < ? extends Configuration > > getUnionBuilders ( )', 'ConfigurationBuilder < ? extends Configuration > builder =', 'fetchTopLevelOverrideConfigs ( config ) ) ;', 'new ConfigurationDeclaration (', 'return declarations . get ( builder ) ;', 'CombinedConfigurationBuilder . this , src ) ;', '( AbstractConfiguration ) builder . getConfiguration ( ) ,', 'addChildConfiguration ( ccResult , decl , builder ) ;', 'private final Collection < ConfigurationBuilder < ? extends Configuration > > overrideBuilders ;', 'ConfigurationDeclaration decl =']","['return false ;', 'return true ;', '""Collection with sub controllers contains a null entry!"" ) ;', 'ReloadingDetector', 'for ( ReloadingController rc : ctrls )', 'controllers = ctrls ;', 'Collection < ? extends ReloadingController > subCtrls )', 'for ( ReloadingController rc : controllers )', 'Collection < ReloadingController > ctrls )', 'import java . util . ArrayList ;']","['}', 'allBuilders =', 'return new FileBasedConfigurationBuilder < XMLConfiguration > (', '}', 'private static ConfigurationBuilder < ? extends HierarchicalConfiguration > createXMLDefinitionBuilder (', 'return new FileBasedConfigurationBuilder < XMLConfiguration > (', '{', 'for ( ConfigurationBuilder < ? > b : getChildBuilders ( ) )', 'for ( ConfigurationBuilder < ? > b : namedBuilders . values ( ) )', 'protected Collection < ConfigurationBuilder < ? extends Configuration > > getChildBuilders ( )']","['reloadingController = createReloadingController ( ) ;', 'obtainReloadingController ( subControllers , defBuilder ) ;', 'return reloadingController ;', 'super ( params ) ;', 'public ReloadingCombinedConfigurationBuilder ( Map < String , Object > params )', 'import org . apache . commons . configuration . XMLConfiguration ;', 'import org . apache . commons . configuration . HierarchicalConfiguration ;', 'BuilderParameters builderParams )', 'public class ReloadingCombinedConfigurationBuilder extends', 'import org . apache . commons . configuration . CombinedConfiguration ;']","['}', 'fh . load ( url ) ;', '+ fileName ) ;', 'if ( url = = null )', 'URL url = ConfigurationUtils . locate ( getFileSystem ( ) , getBasePath ( ) , fileName ) ;', 'throw new ConfigurationException ( ""Cannot resolve include file ""', 'if ( url = = null )', 'URL baseURL = locator . getSourceURL ( ) ;', '{', '{']","['params . getReloadingRefreshDelay ( ) ) ;', 'return ( refreshDelay ! = null ) ? new FileHandlerReloadingDetector (', 'return new FileHandlerReloadingDetector ( handler ,', 'handler ) ;', 'handler , refreshDelay ) : new FileHandlerReloadingDetector (', 'Long refreshDelay = params . getReloadingRefreshDelay ( ) ;']","['}', 'if ( !event . isBeforeUpdate ( ) )', 'else', 'if ( event . isBeforeUpdate ( ) )', '{', 'if ( AbstractFileConfiguration . EVENT RELOAD = = event . getType ( ) )', 'clear ( ) ;']","['}', 'assert locator ! = null : ""Locator has not been set!"" ;', '+ fileName ) ;', '}', 'fh . load ( url ) ;', '+ fileName ) ;', 'baseURL . toString ( ) , fileName ) ;', 'fh . load ( url ) ;', 'URL baseURL = locator . getSourceURL ( ) ;', 'baseURL . toString ( ) , fileName ) ;']","['query . append ( "" AND "" + nameColumn + "" = ? "" ) ;', 'return keys ;', 'results . add ( it . next ( ) ) ;', 'ps . executeUpdate ( ) ;', 'StringBuilder query = new StringBuilder ( ""INSERT INTO "" + table ) ;', 'return null ;', 'if ( isDoCommits ( ) )', 'return rs . next ( ) ? Integer . valueOf ( rs . getInt ( 1 ) ) : null ;', 'query . append ( "" ( "" + nameColumn + "" , "" + keyColumn + "" , "" + valueColumn + "" ) VALUES ( ? , ? , ? ) "" ) ;', 'false , key , String . valueOf ( obj ) ) ;']","['private final String table ;', 'if ( configurationNameColumn ! = null )', 'if ( nameCol & & nameColumn ! = null )', 'pstmt . setString ( 3 , configurationName ) ;', 'String name , boolean commits )', 'private String configurationNameColumn ;', 'if ( isDoCommits ( ) )', 'return dataSource ;', 'addErrorLogListener ( ) ;', 'return configurationNameColumn ;']","['}', 'String newValue =', 'isDelimiterParsingDisabled ( ) ? ( char ) 0 : getListDelimiter ( ) ) ;', 'ListDelimiterHandler . NOOP TRANSFORMER ) ) ;', 'List < String > values ;', 'String txt =', 'XMLBuilderVisitor builder = new XMLBuilderVisitor ( document ,', 'private final ListDelimiterHandler listDelimiterHandler ;', 'String newValue = isDelimiterParsingDisabled ( ) ? value . toString ( )', 'String . valueOf ( getListDelimiterHandler ( ) . escape ( value ,']","['values = PropertyConverter . split ( value , getListDelimiter ( ) , false ) ;', 'out . print ( escapeValue ( value . toString ( ) ) ) ;', 'private String formatValue ( String value )', '}', 'out . print ( formatValue ( value . toString ( ) ) ) ;', 'escapeComments ( value ) , ListDelimiterHandler . NOOP TRANSFORMER ) ) ;', '{', 'values = getListDelimiterHandler ( ) . split ( value , false ) ;', 'return String . valueOf ( getListDelimiterHandler ( ) . escape (', 'private String escapeValue ( String value )']","['}', 'table , keyColumn ) , true , key ) ;', 'if ( value instanceof String )', 'openResultSet ( String . format ( SQL GET PROPERTY ,', 'else', 'setListDelimiterHandler ( oldHandler ) ;', 'results . add ( it . next ( ) ) ;', 'results . add ( it . next ( ) ) ;', 'ResultSet rs = openResultSet ( String . format (', 'return ( results . size ( ) > 1 ) ? results : results']","['return fileLocator ( src ) . sourceURL ( url ) . fileName ( getFileName ( url ) )', '. basePath ( getBasePath ( url ) ) . create ( ) ;', 'FileLocator locator )', 'if ( url = = null )', 'return fullyInitializedLocatorFromPathAndName ( locator ) ;', 'if ( !isLocationDefined ( locator ) )', 'return fullyInitializedLocatorFromURL ( locator ) ;', 'private static FileLocator fullyInitializedLocatorFromURL (', 'return null ;', '& & locator . getSourceURL ( ) ! = null )']","['}', 'attrmap = new HashMap < String , Collection < String > > ( ) ;', 'private void handleDelimiters ( Node parent , Node child , boolean trim )', 'attrmap = Collections . emptyMap ( ) ;', 'constructHierarchy ( childNode , child , elemRefs , trimFlag ) ;', 'if ( attributes . getLength ( ) > 0 )', 'for ( String value : values )', '{', ': null ) ;', 'Map < String , Collection < String > > attrmap ;']","['name ) ) ;', 'addAttributeData ( parent , result , name . getName ( ) ) ;', 'result . addAll ( node . getAttributes ( name . getName ( ) ) ) ;', 'addAttributeData ( parent , result , n ) ;', 'initSubNodeList ( createSubNodeList ( ( ConfigurationNode ) parent . getNode ( ) ,', 'parentPointer = parent ;', 'class ConfigurationNodeIteratorAttribute extends', 'private ConfigurationNodePointer < T > parentPointer ;', 'import org . apache . commons . configuration . tree . ConfigurationNode ;', 'ConfigurationNodePointer < T > parent , QName name )']","['while ( it . hasNext ( ) )', 'results . add ( o ) ;', 'results . add ( it . next ( ) ) ;', 'import javax . sql . DataSource ;', 'import javax . sql . DataSource ;', 'for ( Object o : getListDelimiterHandler ( ) . parse ( value ) )', 'Iterator < ? > it = getListDelimiterHandler ( ) . parse ( value ) ;']","['catch ( IllegalArgumentException iex )', 'return !node . getChildren ( ) . isEmpty ( ) ;', 'return node ;', 'Configuration subset = getSection ( section ) ;', 'sections . add ( node . getName ( ) ) ;', 'for ( String section : getSections ( ) )', 'Collection < String > values = getListDelimiterHandler ( ) . split ( value , false ) ;', 'import org . apache . commons . configuration . tree . ImmutableNode ;', 'Configuration subset ;', 'if ( sectionBuilder = = null )']","['import javax . xml . parsers . ParserConfigurationException ;', 'if ( elemRefs ! = null )', 'constructHierarchy ( childNode , child , elemRefs , trimFlag ) ;', 'updateElement ( element , refHandler . getValue ( node ) ) ;', 'Document newDocument = builder . newDocument ( ) ;', 'createChildNodeWithValue ( node , childNode ,', 'public void processDocument ( ConfigurationNode rootNode )', 'String value , boolean trim , Map < String , String > attrmap )', 'transformer . transform ( source , result ) ;', 'ImmutableNode . Builder parent , ImmutableNode . Builder child ,']","['return new TrackedNodeModel ( parentModel , getRootSelector ( ) , true ) ;', 'return getParent ( ) . getNodeModel ( ) ;', '}', '{', '@ Override', 'public InMemoryNodeModel getNodeModel ( )', 'return new TrackedNodeModel ( getParent ( ) , getRootSelector ( ) , true ) ;']","['catch ( IllegalArgumentException iex )', '. configurationsAt ( node . nodeName ( ) ) )', 'import java . util . Iterator ;', 'private final HierarchicalConfiguration < ? > configuration ;', 'return node ;', 'return node ;', 'return getConfiguration ( ) . getString ( ATTR BEAN FACTORY ) ;', 'return handler . getAttributeValue ( node , key ) ;', 'public XMLBeanDeclaration ( HierarchicalConfiguration config , String key ,', 'private final T node ;']","['private HierarchicalConfiguration definitionConfiguration ;', 'private final Collection < HierarchicalConfiguration < ? > > overrideBuilders ;', '. hasNext ( ) ; )', 'for ( HierarchicalConfiguration < ? > src : srcDecl )', 'public synchronized ConfigurationBuilder < ? extends HierarchicalConfiguration > getDefinitionBuilder ( )', 'public Collection < HierarchicalConfiguration < ? > > getUnionSources ( )', 'protected HierarchicalConfiguration getDefinitionConfiguration ( )', 'HierarchicalConfiguration < ? > src , ConfigurationDeclaration decl )', 'private ConfigurationBuilder < ? extends HierarchicalConfiguration > definitionBuilder ;', 'private final Collection < HierarchicalConfiguration < ? > > unionBuilders ;']","['changeListener = new BuilderListener ( )', 'private EventListener < ConfigurationBuilderEvent > changeListener ;', 'ConfigurationBuilder < ? extends Configuration > builder )', 'changeListener = new EventListener < ConfigurationBuilderEvent > ( )', 'synchronized ( CombinedConfigurationBuilder . this )', 'public void onEvent ( ConfigurationBuilderEvent event ) {', 'b . removeBuilderListener ( changeListener ) ;', 'import org . apache . commons . configuration . event . EventListener ;', 'defBuilder . addBuilderListener ( new BuilderListener ( )', 'new EventListener < ConfigurationBuilderEvent > ( )']","['config . addConfigurationListener ( this ) ;', 'config . removeEventListener ( ConfigurationEvent . ANY , this ) ;', 'switch ( event . getType ( ) )', 'config . addEventListener ( ConfigurationEvent . ANY , this ) ;', 'public class PropertiesConfigurationLayout implements ConfigurationListener', '}', 'case AbstractConfiguration . EVENT ADD PROPERTY :', 'import org . apache . commons . configuration . event . EventListener ;', 'case AbstractConfiguration . EVENT CLEAR :', 'layoutData . containsKey ( event . getPropertyName ( ) ) ;']","['ResultSet rs = pstmt . executeQuery ( ) ;', 'String . format ( SQL GET PROPERTY , table , keyColumn ) , true , key ) ;', 'PreparedStatement pstmt = initStatement ( String . format (', 'ResultSet rs = openResultSet (', 'SQL GET PROPERTY , table , keyColumn ) , true , key ) ;']","['if ( loadCounter = = 1 & & getHeaderComment ( ) = = null', 'if ( loadCounter = = 1 & & layoutData . isEmpty ( ) )', 'setHeaderComment ( extractComment ( commentLines , 0 , index - 1 ) ) ;', '}', '& & layoutData . isEmpty ( ) )', '{', 'if ( getHeaderComment ( ) = = null )', 'setHeaderComment ( extractComment ( commentLines , 0 , index - 1 ) ) ;']","['private EventListener < ConfigurationBuilderEvent > changeListener ;', 'for ( ConfigurationDeclaration cd : unionDeclarations )', 'ConfigurationBuilder < ? extends Configuration > builder =', 'addChildConfiguration ( ccResult , srcDecl . get ( i ) , builders . get ( i ) ) ;', 'new ConfigurationDeclaration (', '{', 'CombinedConfigurationBuilder . this , src ) ;', 'data . unionBuilders ) ;', 'private final Collection < HierarchicalConfiguration < ? > > overrideBuilders ;', 'for ( ConfigurationDeclaration cd : overrideDeclarations )']","['ReloadingBuilderSupportListener . connect ( this , controller ) ;', 'public final void connectToReloadingController (', '""ReloadingController must not be null!"" ) ;', '}', 'if ( controller = = null )', 'throw new IllegalArgumentException (', 'ReloadingController controller )', '{', 'import org . apache . commons . configuration . reloading . ReloadingController ;', 'ReloadingDetector detector =']","['public < T1 extends ConfigurationBuilderEvent > void addEventListener (', 'public final < T1 extends ConfigurationBuilderEvent > void removeEventListener (', 'public < T1 extends ConfigurationBuilderEvent > void removeEventListener (', 'public final < T1 extends ConfigurationBuilderEvent > void addEventListener (']","['ReloadingBuilderSupportListener . connect ( this , ctrl ) ;', 'connectToReloadingController ( ctrl ) ;']","['public InputSource resolveEntity ( String publicId , String systemId )', 'InputStreamSupport {', 'EntityResolver , EntityRegistry , FileBasedConfiguration ,', 'EntityRegistry , FileBasedConfiguration , FileLocatorAware ,', 'try', 'return entityResolver . resolveEntity ( publicId , systemId ) ;', '@ Deprecated', '}', 'catch ( IOException e )', 'throw new SAXException ( e ) ;']","['( ( EntityRegistry ) entityResolver ) . registerEntityId ( publicId , entityURL ) ;', 'FileBasedConfiguration , FileLocatorAware , InputStreamSupport {', 'EntityRegistry , FileBasedConfiguration , FileLocatorAware ,', 'InputStreamSupport {', 'import org . apache . commons . configuration . resolver . EntityRegistry ;', '}', 'public Map < String , URL > getRegisteredEntities ( )', 'public void registerEntityId ( String publicId , URL entityURL )', '{', 'return ( ( EntityRegistry ) entityResolver ) . getRegisteredEntities ( ) ;']","['PropertiesConfiguration . class , null , true ) . configure ( parameters', 'FileBasedConfigurationBuilder < PropertiesConfiguration > builder = new FileBasedConfigurationBuilder < PropertiesConfiguration > (', 'public void testCreateConfigurationNonExistingFileAndThenSave ( )', 'File outFile = ConfigurationAssert . getOutFile ( ""save . properties"" ) ;', 'throws ConfigurationException {', '@ Test', 'assertTrue ( ""Could not remove test file"" , outFile . delete ( ) ) ;', '. properties ( ) . setFile ( outFile ) ) ;', 'Parameters parameters = new Parameters ( ) ;', '}']","['return beanUtilsBean . getPropertyUtils ( ) . isWriteable ( bean , propName ) ;', 'private final Map < String , BeanFactory > beanFactories = Collections', 'BeanFactory factory = BEAN FACTORIES . get ( factoryName ) ;', 'beanFactories . put ( name , factory ) ;', 'private final Map < String , BeanFactory > BEAN FACTORIES = Collections', 'BEAN UTILS BEAN . setProperty ( bean , propName , value ) ;', 'beanUtilsBean . getPropertyUtils ( ) . getPropertyDescriptor (', 'BEAN UTILS BEAN . getPropertyUtils ( ) ) ;', 'beanUtilsBean . getPropertyUtils ( ) ) ;', 'return beanFactories . remove ( name ) ;']","['public CombinedConfigurationBuilder configure ( BuilderParameters . . . params )', '}', 'super . configure ( params ) ;', '{', 'return this ;', '@ Override', '@ Test', 'CombinedConfigurationBuilder configuredBuilder =', 'public void testConfigureResult ( )', '}']","['public ReloadingCombinedConfigurationBuilder configure ( BuilderParameters . . . params )', '}', 'super . configure ( params ) ;', '{', 'return this ;', '@ Override', '. setFile ( testFile ) ) ;', 'ReloadingCombinedConfigurationBuilder confBuilder =', 'builder . configure ( new FileBasedBuilderParametersImpl ( )', '. setFile ( testFile ) ) ;']","['""ini"" , ""system"" , ""env"" , ""jndi"" , ""configuration"" , ""multiXml""', '""ini"" , ""system"" , ""env"" , ""jndi"" , ""configuration"" , ""multiFile""']","['}', 'super . configure ( params ) ;', 'public MultiFileConfigurationBuilder < T > configure ( BuilderParameters . . . params )', '{', 'return this ;', '@ Override', 'return builder ;', 'XMLConfiguration . class )', 'builder . configure ( createTestBuilderParameters ( managedParams ) ) ;', '. configure ( createTestBuilderParameters ( managedParams ) ) ;']","['return builder . create ( ) ;', '. sourceURL ( ( URL ) map . get ( PROP SOURCE URL ) ) ;', '. fileSystem ( ( FileSystem ) map . get ( PROP FILE SYSTEM ) )', '}', 'private static final String PROP SOURCE URL = ""sourceURL"" ;', 'map . put ( PROP FILE NAME , locator . getFileName ( ) ) ;', 'private static final String PROP ENCODING = ""encoding"" ;', 'private static final String PROP STRATEGY = ""locationStrategy"" ;', 'throw new IllegalArgumentException ( ""Map must not be null!"" ) ;', 'map . put ( PROP FILE SYSTEM , locator . getFileSystem ( ) ) ;']","['boolean result = false ;', 'this ( obj , checkSourceHandler ( c ) . getFileLocator ( ) ) ;', 'fileLocator = initFileLocator ( ) ;', 'if ( c = = null )', 'fileLocator = new AtomicReference < FileLocator > ( c . getFileLocator ( ) ) ;', 'private FileHandler ( FileBased obj , FileLocator locator )', 'if ( c = = null )', 'fileLocator = new AtomicReference < FileLocator > ( locator ) ;', 'return new AtomicReference < FileLocator > ( FileLocatorUtils . fileLocator ( )', '}']","['private static final String PROP REFRESH DELAY = ""reloadingRefreshDelay"" ;', 'FileBasedBuilderParametersImpl params =', 'if ( map ! = null )', 'params . setReloadingDetectorFactory ( ( ReloadingDetectorFactory ) map', 'public static FileBasedBuilderParametersImpl fromMap ( Map < String , Object > map )', 'private static final String PROP DETECTOR FACTORY =', 'return params ;', '}', 'new FileBasedBuilderParametersImpl ( FileHandler . fromMap ( map ) ) ;', 'params . setReloadingRefreshDelay ( ( Long ) map . get ( PROP REFRESH DELAY ) ) ;']","['}', 'if ( params = = null )', '""Parameters map must not be null!"" ) ;', 'throw new IllegalArgumentException (', '{', '@ Test ( expected = IllegalArgumentException . class )', '}', '{', 'public void testFromParametersNull ( )', 'FileBasedBuilderParametersImpl . fromParameters ( null ) ;']","['+ FileBasedBuilderParametersImpl . class . getName ( ) ;', '+ ""fileBased"" ;']","['import java . util . EventObject ;', 'super ( source , ANY ) ;', 'public class ReloadingEvent extends EventObject', 'public static final EventType < ReloadingEvent > ANY =', 'super ( source ) ;', 'import org . apache . commons . configuration . event . Event ;', 'private static final long serialVersionUID = 20121006L ;', 'import org . apache . commons . configuration . event . EventType ;', 'public class ReloadingEvent extends Event', 'new EventType < ReloadingEvent > ( Event . ANY , ""RELOAD"" ) ;']","['public final < T1 extends ConfigurationBuilderEvent > void removeEventListener (', 'public final < E extends ConfigurationBuilderEvent > void removeEventListener (', 'public final < T1 extends ConfigurationBuilderEvent > void addEventListener (', 'EventType < E > eventType , EventListener < ? super E > listener )', 'EventType < T1 > eventType , EventListener < ? super T1 > listener )', 'public final < E extends ConfigurationBuilderEvent > void addEventListener (', 'EventType < T > eventType , EventListener < ? super T > listener ) ;', '< E extends ConfigurationBuilderEvent > void addEventListener (', '< T extends ConfigurationBuilderEvent > void addEventListener (', '< E extends ConfigurationBuilderEvent > void removeEventListener (']","['listeners = EventListenerSupport . create ( ReloadingListener . class ) ;', 'EventType < T > eventType , EventListener < ? super T > listener )', 'listeners . fire ( ) . reloadingRequired ( new ReloadingEvent ( this , data ) ) ;', 'listeners . removeEventListener ( eventType , listener ) ;', 'listeners . removeListener ( l ) ;', 'import org . apache . commons . configuration . event . EventListener ;', 'listeners . addListener ( l ) ;', 'deprecatedListeners . removeListener ( l ) ;', 'private final EventListenerSupport < ReloadingListener > listeners ;', 'public < T extends ReloadingEvent > void addEventListener (']","['public void onEvent ( ConfigurationBuilderEvent event )', '. getEventType ( ) ) )', 'reloadingController . resetReloadingState ( ) ;', 'reloadingController . resetReloadingState ( ) ;', 'EventListener < ConfigurationBuilderEvent >', 'import org . apache . commons . configuration . event . Event ;', 'public void reloadingRequired ( ReloadingEvent event )', 'controller . addEventListener ( ReloadingEvent . ANY , listener ) ;', '}', '}']","['void reloadingRequired ( ReloadingEvent event ) ;', 'public interface ReloadingListener extends EventListener', '}', '{', 'package org . apache . commons . configuration . reloading ;', 'import java . util . EventListener ;']","['super ( source ) ;', 'public ConfigurationEvent ( Object source ,', 'return type ;', 'super ( source , ANY ) ;', 'this . type = type ;', 'EventType < ? extends ConfigurationEvent > type , String propertyName ,', '}', 'super ( source , type ) ;', 'private static final long serialVersionUID = 3277238219073504136L ;', 'return type ;']","['new EventType < ConfigurationEvent > ( ANY , ""CLEAR PROPERTY"" ) ;', 'public static final EventType < ConfigurationEvent > CLEAR =', 'public static final EventType < ConfigurationEvent > ADD PROPERTY =', 'new EventType < ConfigurationEvent > ( ANY , ""CLEAR"" ) ;', 'new EventType < ConfigurationEvent > ( ANY , ""ADD PROPERTY"" ) ;', 'public static final EventType < ConfigurationEvent > SET PROPERTY =', 'new EventType < ConfigurationEvent > ( ANY , ""SET PROPERTY"" ) ;', 'public static final EventType < ConfigurationEvent > CLEAR PROPERTY =', 'checkUpdateEvent ( ConfigurationEvent . ADD PROPERTY ) ;', 'public void testClearPropertyEventType ( )']","['listener . onEvent ( event ) ;', 'private EventListener < ? super T > castListener (', 'fetchSuperEventTypes ( event . getEventType ( ) ) ;', 'public static class EventListenerIterator < T extends Event > implements', 'EventListenerRegistrationData < ? > listenerData , Event event )', 'invokeNextListenerUnchecked ( event ) ;', '}', 'public void remove ( )', 'for ( EventListenerRegistrationData < ? > listenerData : listeners )', 'EventListener < ? super T > result = nextElement ;']","['EventType < T > eventType , EventListener < ? super T > listener )', 'import org . apache . commons . configuration . event . EventListener ;', 'import org . apache . commons . configuration . event . Event ;', 'public < T extends Event > void addEventListener ( EventType < T > eventType ,', '}', 'import org . apache . commons . configuration . event . EventType ;', 'EventListener < ? super T > listener )', '{', 'return false ;', '@ Override']","['fireEvent ( EVENT ADD PROPERTY , key , value , true ) ;', 'fireEvent ( ConfigurationEvent . SET PROPERTY , key , value , true ) ;', 'fireEvent ( EVENT CLEAR , null , null , false ) ;', 'fireEvent ( ConfigurationEvent . CLEAR , null , null , false ) ;', 'fireEvent ( EVENT CLEAR PROPERTY , key , null , false ) ;', 'fireEvent ( ConfigurationEvent . ADD PROPERTY , key , value , false ) ;', 'fireEvent ( EVENT SET PROPERTY , key , value , false ) ;', 'fireEvent ( ConfigurationEvent . CLEAR PROPERTY , key , null , false ) ;', 'fireEvent ( EVENT CLEAR PROPERTY , key , null , true ) ;', 'fireEvent ( ConfigurationEvent . SET PROPERTY , key , value , false ) ;']","['return result ;', 'new LinkedList < EventListener < ? super T > > ( ) ;', '@ Deprecated', '. getEventListeners ( eventType ) )', '}', 'List < EventListener < ? super T > > result =', 'result . add ( l ) ;', 'import java . util . List ;', '{', 'for ( EventListener < ? super T > l : eventListeners']","['assertTrue ( ""Value not found : "" + s , s . indexOf ( PROP NAME', 'assertSame ( ""Wrong event listener for original"" , conf . getLayout ( ) , conf', 'assertSame ( ""Wrong event listener for original"" , conf . getLayout ( ) , conf . getConfigurationListeners ( ) . iterator ( ) . next ( ) ) ;', 'assertSame ( ""Wrong event listener for clone"" , copy . getLayout ( ) , copy', 'assertEquals ( ""Wrong number of event listeners for original"" , 1 , conf . getConfigurationListeners ( ) . size ( ) ) ;', '+ "" = http : / / www . apache . org"" ) ) ;', 'out . toString ( ) . indexOf ( text ) > = 0 ) ;', '. getEventListeners ( ConfigurationEvent . ANY ) . iterator ( ) . next ( ) ) ;', 'assertSame ( ""Wrong event listener for clone"" , copy . getLayout ( ) , copy . getConfigurationListeners ( ) . iterator ( ) . next ( ) ) ;', 'assertEquals ( ""Wrong number of event listeners for original"" , 1 , conf']","['l . checkEvent ( AbstractConfiguration . EVENT SET PROPERTY , TEST PROPBYTE ,', 'listener . checkEvent ( ConfigurationEvent . SET PROPERTY , TEST PROPBYTE ,', 'l . checkEvent ( AbstractConfiguration . EVENT ADD PROPERTY , TEST PROPBYTE ,', 'listener . done ( ) ;', 'l . done ( ) ;', 'import org . apache . commons . configuration . event . ConfigurationEvent ;', 'import org . apache . commons . configuration . AbstractConfiguration ;', 'listener . checkEvent ( ConfigurationEvent . ADD PROPERTY , TEST PROPBYTE ,']","['@ Deprecated', 'public static final EventType < ConfigurationEvent > SUBNODE CHANGED =', 'new EventType < ConfigurationEvent > ( ANY HIERARCHICAL , ""CLEAR TREE"" ) ;', 'public static final EventType < ConfigurationEvent > ANY HIERARCHICAL =', 'new EventType < ConfigurationEvent > ( ANY HIERARCHICAL , ""ADD NODES"" ) ;', 'public static final EventType < ConfigurationEvent > CLEAR TREE =', '""SUBNODE CHANGED"" ) ;', 'new EventType < ConfigurationEvent > ( ANY HIERARCHICAL ,', 'public static final EventType < ConfigurationEvent > ADD NODES =', 'new EventType < ConfigurationEvent > ( ANY , ""HIERARCHICAL"" ) ;']","['fireEvent ( EVENT ADD NODES , key , nodes , true ) ;', 'fireEvent ( ConfigurationEvent . ADD NODES , key , nodes , true ) ;', 'fireEvent ( EVENT CLEAR TREE , key , nodes , false ) ;', 'fireEvent ( ConfigurationEvent . CLEAR TREE , key , nodes , false ) ;', 'fireEvent ( EVENT CLEAR TREE , key , null , true ) ;', 'fireEvent ( ConfigurationEvent . CLEAR TREE , key , null , true ) ;', 'fireEvent ( EVENT ADD NODES , key , nodes , false ) ;', 'fireEvent ( ConfigurationEvent . ADD NODES , key , nodes , false ) ;', 'import org . apache . commons . configuration . event . ConfigurationEvent ;', 'return new ConfigurationListener ( )']","['AbstractTestConfigurationEvents', 'TestHierarchicalConfigurationEvents']","['assertTrue ( nsee . getMessage ( ) . indexOf ( ""bogus . property"" ) > - 1 ) ;', 'listener . checkEvent ( ConfigurationEvent . ADD PROPERTY , ""test"" , ""value"" , false ) ;', 'int eventCount ;', '. getBoolean ( key ) ) ;', '. getBoolean ( ""configuration . loaded"" ) ) ;', 'listener . checkEvent ( ConfigurationEvent . CLEAR PROPERTY , key , null , false ) ;', '}', '. getEventListeners ( ConfigurationEvent . ANY ) . isEmpty ( ) ) ;', '@ Override', 'cc . addEventListener ( ConfigurationEvent . ANY , new EventListenerTestImpl ( null ) ) ;']","['public void configurationChanged ( ConfigurationEvent event )', 'new EventType < ConfigurationEvent > ( ConfigurationEvent . ANY ,', 'import org . apache . commons . configuration . event . ConfigurationListener ;', 'EventListener < ConfigurationEvent > , Cloneable', 'ConfigurationListener , Cloneable', 'ConfigurationEvent . ANY , this ) ;', 'public static final int EVENT COMBINED INVALIDATE = 40 ;', 'import org . apache . commons . configuration . event . EventListener ;', '( ( EventSource ) configuration ) . removeConfigurationListener ( this ) ;', 'public void onEvent ( ConfigurationEvent event )']","['config . addConfigurationListener ( l ) ;', 'assertEquals ( ""Wrong event type"" , eventType , e . getEventType ( ) ) ;', 'checkCopyEvents ( l , srcConfig , AbstractConfiguration . EVENT SET PROPERTY ) ;', 'import org . apache . commons . configuration . event . EventListener ;', 'static class CollectingConfigurationListener implements', 'public void onEvent ( ConfigurationEvent event )', 'public void configurationChanged ( ConfigurationEvent event )', 'config . addEventListener ( ConfigurationEvent . ANY , l ) ;', 'import org . apache . commons . configuration . event . ConfigurationListener ;', 'final List < ConfigurationEvent > events = new ArrayList < ConfigurationEvent > ( ) ;']","['import java . util . Collections ;', '}', '{', 'public List < EventListenerRegistrationData < ? > > getRegistrations ( )', 'return Collections . unmodifiableList ( listeners ) ;', '@ Test', '}', 'new EventListenerRegistrationData < EventBase > ( typeBase ,', 'new EventListenerRegistrationData < EventSub2 > ( typeSub2 ,', 'List < EventListenerRegistrationData < ? > > registrations =']","['{', '}', 'public void clear ( )', 'listeners . clear ( ) ;', 'public void testClear ( )', '@ Test', 'list . addEventListener ( typeSub2 , new ListenerTestImpl ( ) ) ;', 'list . addEventListener ( typeSub1 , new ListenerTestImpl ( ) ) ;', 'assertTrue ( ""Got listeners"" , list . getRegistrations ( ) . isEmpty ( ) ) ;', '}']","['addEventListener ( regData ) ;', 'public void addAll ( EventListenerList c )', 'if ( c = = null )', '}', 'throw new IllegalArgumentException (', '{', 'for ( EventListenerRegistrationData < ? > regData : c . getRegistrations ( ) )', '""List to be copied must not be null!"" ) ;', 'list2 . addEventListener ( typeSub1 , l2 ) ;', 'EventListener < EventBase > l3 = new ListenerTestImpl ( ) ;']","['target . addConfigurationListener ( l ) ;', '}', 'target . addErrorListener ( l ) ;', 'configListeners . removeEventListener ( eventType , listener ) ;', '}', 'return this ;', 'configListeners = new ArrayList < ConfigurationListener > ( ) ;', 'configListeners = new EventListenerList ( ) ;', 'private final Collection < ConfigurationErrorListener > errorListeners ;', 'fetchEventSource ( ) . removeEventListener ( eventType , listener ) ;']","['EasyMock . createNiceMock ( ConfigurationListener . class ) ;', 'assertTrue ( ""Wrong listener"" , eventListeners . contains ( l1 ) ) ;', 'EasyMock . replay ( cl , el ) ;', 'EasyMock . createNiceMock ( EventListener . class ) ;', 'import org . apache . commons . configuration . event . ConfigurationListener ;', 'Collection < EventListener < ? super Event > > eventListeners =', 'assertTrue ( ""Configuration listener not found"" , cc2', 'EasyMock . replay ( l1 , l2 ) ;', '. addConfigurationListener ( cl ) . addErrorListener ( el ) ;', 'EventListener < Event > l1 = EasyMock . createNiceMock ( EventListener . class ) ;']","['}', 'super . removeConfigurationListener ( eventType , l ) ;', 'return this ;', 'super . addConfigurationListener ( eventType , l ) ;', '@ Override', 'import org . apache . commons . configuration . event . Event ;', 'super . addConfigurationListener ( l ) ;', 'b . addConfigurationListener ( eventType , l ) ;', 'ConfigurationErrorListener l )', 'import org . apache . commons . configuration . event . EventType ;']","['import org . apache . commons . configuration . event . ConfigurationListener ;', 'EventListener < ConfigurationEvent >', 'ConfigurationListener', 'import org . apache . commons . configuration . event . EventListener ;', 'public void configurationChanged ( ConfigurationEvent event )', 'public void onEvent ( ConfigurationEvent event )', 'addConfigurationListener ( autoSaveListener ) ;', 'removeConfigurationListener ( ConfigurationEvent . ANY , autoSaveListener ) ;', 'removeConfigurationListener ( autoSaveListener ) ;', 'addConfigurationListener ( ConfigurationEvent . ANY , autoSaveListener ) ;']","['return result ;', 'return Collections . unmodifiableCollection ( result ) ;', 'protected ConfigurationEvent createEvent ( int type , String propName ,', 'assertEquals ( ""Listener was not removed"" , 1 ,', 'source . addConfigurationListener ( null ) ;', 'EventListenerTestImpl l = new EventListenerTestImpl ( source ) ;', 'assertEquals ( ""Listener was called"" , 0 , l . numberOfCalls ) ;', 'public void onEvent ( ConfigurationEvent event )', '. removeConfigurationListener ( null ) ) ;', 'source . fireEvent ( ConfigurationEvent . ADD PROPERTY , TEST PROPNAME ,']","['public void clearEventListeners ( )', '@ Deprecated', '}', '{', 'eventListeners . clear ( ) ;', 'assertTrue ( ""Got HIERARCHICAL listeners"" ,', '@ Test', 'source . clearEventListeners ( ) ;', '}', 'new EventListenerTestImpl ( source ) ) ;']","['public void copyEventListeners ( BaseEventSource source )', '}', 'throw new IllegalArgumentException (', '{', '""Target event source must not be null!"" ) ;', 'source . eventListeners . addAll ( eventListeners ) ;', 'if ( source = = null )', '@ Test ( expected = IllegalArgumentException . class )', '@ Test', 'assertTrue ( ""Wrong listener"" , listeners . contains ( l1 ) ) ;']","['for ( ConfigurationListener listener : getConfigurationListeners ( ) )', 'copyEventListeners ( config ) ;', 'public boolean removeConfigurationListener ( ConfigurationListener l )', 'cc . clearEventListeners ( ) ;', 'public void addConfigurationListener ( ConfigurationListener l )', 'public void clearEventListeners ( )', 'cc . addConfigurationListener ( l ) ;', 'super . clearEventListeners ( ) ;', 'import org . apache . commons . configuration . event . ConfigurationListener ;', 'cc . removeConfigurationListener ( l ) ;']","['public void addConfigurationListener ( ConfigurationListener l )', 'EventType < T > eventType , EventListener < ? super T > listener )', 'getConfig ( ) . clearConfigurationListeners ( ) ;', 'import org . apache . commons . configuration . event . EventListener ;', 'import org . apache . commons . configuration . event . ConfigurationListener ;', 'return getConfig ( ) . getEventListeners ( eventType ) ;', 'public void clearConfigurationListeners ( )', 'import org . apache . commons . configuration . event . Event ;', 'public Collection < ConfigurationListener > getConfigurationListeners ( )', 'getConfig ( ) . addEventListener ( eventType , listener ) ;']","['config . addConfigurationListener ( l ) ;', 'import org . apache . commons . configuration . event . EventListener ;', 'public void configurationChanged ( ConfigurationEvent event )', 'config . addEventListener ( ConfigurationEvent . ANY , l ) ;', '. getConfigurationListeners ( ) . contains ( l ) ) ;', '. getEventListeners ( ConfigurationEvent . ANY ) . contains ( l ) ) ;', '} ;', 'EventListener < ConfigurationEvent > l = new EventListenerTestImpl ( null ) ;', 'import org . apache . commons . configuration . event . ConfigurationListener ;', 'import org . apache . commons . configuration . event . EventListenerTestImpl ;']","['config . addConfigurationListener ( l ) ;', 'import org . apache . commons . configuration . event . EventListener ;', 'public void configurationChanged ( ConfigurationEvent event )', 'config . addEventListener ( ConfigurationEvent . ANY , l ) ;', '} ;', '. getEventListeners ( ConfigurationEvent . ANY ) . isEmpty ( ) ) ;', 'import org . apache . commons . configuration . event . ConfigurationListener ;', 'EventListener < ConfigurationEvent > l = new EventListenerTestImpl ( config ) ;', '}', 'assertTrue ( ""Event listener was copied"" , config2']","['config . addConfigurationListener ( new ConfigurationListener ( )', '. getEventListeners ( ConfigurationEvent . ANY ) . isEmpty ( ) ) ;', '. getConfigurationListeners ( ) . isEmpty ( ) ) ;', 'import org . apache . commons . configuration . event . EventListenerTestImpl ;', 'public void configurationChanged ( ConfigurationEvent event )', 'config . addEventListener ( ConfigurationEvent . ANY , new EventListenerTestImpl ( config ) ) ;', '} ) ;', 'import org . apache . commons . configuration . event . ConfigurationListener ;', '}', '{']","['assertFalse ( ""Wrong result ( 1 ) "" , source . removeConfigurationListener ( cl ) ) ;', 'import org . apache . commons . configuration . event . EventListener ;', 'source . addConfigurationListener ( null ) ;', 'EventListener < ConfigurationEvent > cl = EasyMock . createMock ( EventListener . class ) ;', 'import org . apache . commons . configuration . event . ConfigurationListener ;', '@ SuppressWarnings ( ""unchecked"" )', 'ConfigurationListener cl = EasyMock . createMock ( ConfigurationListener . class ) ;', 'import org . apache . commons . configuration . event . ConfigurationEvent ;', 'source . addConfigurationListener ( cl ) ;', 'source . addEventListener ( ConfigurationEvent . ANY , cl ) ;']","['public void addConfigurationListener ( ConfigurationListener l )', 'import org . apache . commons . configuration . event . ConfigurationListener ;', '}', '{', '@ Override', 'src = builder ;', 'private static final String METHOD BUILDER ADD =', 'Object src ;', 'Object methodResult )', 'EventSourceSupport . BUILDER OPTIONAL = = eventSourceSupport ;']","['ConfigurationEvent event =', 'return Collections . unmodifiableCollection ( new ArrayList < ConfigurationListener > ( listeners ) ) ;', 'listeners = new CopyOnWriteArrayList < ConfigurationListener > ( ) ;', 'private Collection < ConfigurationListener > listeners ;', 'if ( it . hasNext ( ) )', '@ Deprecated', 'public Collection < ConfigurationListener > getConfigurationListeners ( )', '}', 'protected void fireEvent ( int type , String propName , Object propValue , boolean before )', 'Iterator < ConfigurationListener > it = listeners . iterator ( ) ;']","['private static < T extends Event > List < EventListener < ? super T > > fetchListeners (', 'private static < T > List < T > fetchElements ( Iterable < ? extends T > iterable )', 'List < ? > listeners = fetchListeners ( list . getEventListeners ( eventType ) ) ;', 'fetchElements ( list . getEventListeners ( null ) ) . isEmpty ( ) ) ;', 'listeners . add ( listener ) ;', 'List < T > elems = new LinkedList < T > ( ) ;', 'new LinkedList < EventListener < ? super T > > ( ) ;', 'List < ? > listeners = fetchElements ( list . getEventListeners ( eventType ) ) ;', 'fetchListeners ( list . getEventListeners ( null ) ) . isEmpty ( ) ) ;', 'return elems ;']","['public class ConfigurationErrorEvent extends ConfigurationEvent', 'private final EventType < ? > errorOperationType ;', 'private static final long serialVersionUID = - 7433184493062648409L ;', 'super ( source , eventType ) ;', 'super ( source , type , propertyName , propertyValue , true ) ;', 'public static final EventType < ConfigurationErrorEvent > READ =', 'private final Object propertyValue ;', '}', 'private final String propertyName ;', 'public ConfigurationErrorEvent ( Object source ,']","['@ Deprecated', '@ Deprecated', 'void configurationChanged ( ConfigurationEvent event ) ;', 'public interface ConfigurationListener', '}', 'package org . apache . commons . configuration . event ;', '{', 'protected ConfigurationListenerTestImpl l ;', 'l = new ConfigurationListenerTestImpl ( config ) ;', 'events = new LinkedList < ConfigurationEvent > ( ) ;']","['}', 'private final List < T > events ;', 'public void onEvent ( T event )', '@ Override', 'if ( expectedSource ! = null )', 'public void checkEventCount ( int minEvents )', 'while ( events . size ( ) > 1 )', 'private final Object expectedSource ;', 'import java . util . List ;', '{']","['Set < EventType < ? > > base = superTypes . get ( reg . getEventType ( ) ) ;', 'new HashMap < EventType < ? > , Set < EventType < ? > > > ( ) ;', '}', 'if ( base = = null )', '( EventListenerRegistrationData < ? extends T > ) reg ;', 'EventListenerRegistrationData < ? extends T > result =', 'import java . util . Map ;', '{', 'results . add ( result ) ;', 'if ( base . contains ( eventType ) )']","['errorListeners . clear ( ) ;', 'return eventListeners . getRegistrations ( ) ;', '}', 'eventListeners . removeEventListener ( reg ) ;', '{', 'for ( EventListenerRegistrationData < ? extends ConfigurationErrorEvent > reg : eventListeners', 'public List < EventListenerRegistrationData < ? > > getEventListenerRegistrations ( )', '. getRegistrationsForSuperType ( ConfigurationErrorEvent . ANY ) )', 'String propName , Object propValue )', 'super ( source ) ;']","['}', 'propValue , ex ) ;', 'iterator . invokeNext ( event ) ;', '{', 'EventType < T > eventType , EventType < ? > operationType ,', 'public < T extends ConfigurationErrorEvent > void fireError (', 'propertyValue , cause ) ;', 'if ( iterator . hasNext ( ) )', 'String propertyName , Object propertyValue , Throwable cause )', 'return new ConfigurationErrorEvent ( this , type , opType , propName ,']","['@ Test ( expected = IllegalArgumentException . class )', 'public void testGetEventListenersUpdate ( )', '@ Test', 'public void testRemoveNullEventListener ( )', 'assertFalse ( ""Listener can be removed ? "" , source . removeErrorListener ( l ) ) ;', 'private static final Object TEST PROPVALUE = ""a test property value"" ;', 'assertTrue ( ""Error listeners registered for clone"" , copy', 'source . fireEvent ( ConfigurationEvent . ADD NODES , TEST PROPNAME ,', 'assertEquals ( ""Wrong number of listeners"" , 1 , listeners . size ( ) ) ;', 'TEST PROPVALUE , false ) ;']","['public void configurationError ( ConfigurationErrorEvent event )', 'new EventListener < ConfigurationErrorEvent > ( )', '} ) ;', '} ) ;', '}', '}', '( ( EventSource ) src ) . addErrorListener ( new ConfigurationErrorListener ( )', '. getCause ( ) ) ;', 'throw new ConfigurationRuntimeException ( event . getCause ( ) ) ;', 'public void onEvent ( ConfigurationErrorEvent event )']","['HierarchicalConfiguration hc = ( HierarchicalConfiguration ) conf ;', 'HierarchicalConfiguration < ? > hc = ( HierarchicalConfiguration < ? > ) conf ;', 'static final String PROTOCOL FILE = ""file"" ;', 'public static HierarchicalConfiguration < ? > convertToHierarchical (', 'public static HierarchicalConfiguration convertToHierarchical (', 'HierarchicalConfiguration < ? > c )', 'HierarchicalConfiguration c )', 'static final String RESOURCE PATH SEPARATOR = "" / "" ;', 'source . addErrorListener ( el ) ;', 'HierarchicalConfiguration < ? > hc = ConfigurationUtils']","['getLogger ( ) . warn ( ""Internal error"" , event . getCause ( ) ) ;', 'new EventListener < ConfigurationErrorEvent > ( )', 'public void configurationError ( ConfigurationErrorEvent event )', 'public final void addErrorLogListener ( )', 'addErrorListener ( new ConfigurationErrorListener ( )', 'import org . apache . commons . configuration . event . EventListener ;', '} ) ;', 'getLogger ( ) . warn ( ""Internal error"" , event . getCause ( ) ) ;', 'public void addErrorLogListener ( )', '} ) ;']","['JdbcOperation < Boolean > op = new JdbcOperation < Boolean > ( EVENT READ PROPERTY , key , null )', 'protected JdbcOperation (', 'protected JdbcOperation ( int errEvType , String errPropName ,', 'JdbcOperation < Boolean > op =', 'return initStatement ( sql , nameCol , params ) . executeQuery ( ) ;', 'new JdbcOperation < Object > ( ConfigurationErrorEvent . READ ,', 'new JdbcOperation < Void > ( EVENT CLEAR PROPERTY , key , null )', 'EventType < ? > opType , String errPropName , Object errPropVal )', 'private final int errorEventType ;', 'import org . apache . commons . configuration . event . EventType ;']","['import java . util . Set ;', 'import java . util . Set ;', 'import java . util . ArrayList ;', 'import java . util . ArrayList ;', 'import java . util . Iterator ;', 'import java . util . Iterator ;', 'fireError ( EVENT READ PROPERTY , key , null , e ) ;', 'ConfigurationErrorEvent . READ , key , null , e ) ;', 'import java . util . List ;', 'import java . util . List ;']","['fetchEventSource ( ) . removeErrorListener ( l ) ;', 'ConfigurationErrorListener l )', 'fetchEventSource ( ) . addErrorListener ( l ) ;', '}', 'import org . apache . commons . configuration . event . ConfigurationErrorListener ;', '{', 'return this ;', 'public synchronized BasicConfigurationBuilder < T > removeErrorListener (', 'public synchronized BasicConfigurationBuilder < T > addErrorListener (', '. getErrorListeners ( ) . contains ( l1 ) ) ;']","['config . addErrorListener ( listener ) ;', 'EventType < T > eventType , EventListener < ? super T > listener )', 'public boolean removeErrorListener ( ConfigurationErrorListener l )', 'import org . apache . commons . configuration . event . EventListener ;', 'return super . removeErrorListener ( l ) ;', 'import org . apache . commons . configuration . event . Event ;', 'public Collection < ConfigurationErrorListener > getErrorListeners ( )', 'cc . addEventListener ( eventType , listener ) ;', 'cc . removeErrorListener ( l ) ;', 'public < T extends Event > void addEventListener ( EventType < T > eventType ,']","['public boolean removeErrorListener ( ConfigurationErrorListener l )', '}', 'import org . apache . commons . configuration . event . ConfigurationErrorListener ;', '{', 'return false ;', '@ Override', 'public void addErrorListener ( ConfigurationErrorListener l )', '}', 'return errorListeners . remove ( l ) ;', 'it . next ( ) . configurationError ( event ) ;']","['public synchronized < E extends Event > BasicConfigurationBuilder < T > addConfigurationListener (', 'return configListeners . removeEventListener ( eventType , listener ) ;', 'configListeners . removeEventListener ( eventType , listener ) ;', 'public synchronized < E extends Event > void addConfigurationListener (', 'return this ;', 'public synchronized < E extends Event > boolean removeConfigurationListener (', 'public synchronized < E extends Event > BasicConfigurationBuilder < T > removeConfigurationListener (', 'public synchronized < E extends Event > BasicConfigurationBuilder < T > addConfigurationListener (', 'return result ;', 'super . removeConfigurationListener ( eventType , l ) ;']","['methodToInvoke . invoke ( target , args ) ) ;', 'return methodToInvoke . invoke ( target , args ) ;', 'Object methodResult )', '& & !Boolean . class . isInstance ( methodResult ) )', '}', 'if ( Boolean . TYPE . equals ( returnType )', 'return convertResult ( method . getReturnType ( ) ,', 'return methodResult ;', '{', 'return Boolean . FALSE ;']","['EventListenerList getListeners ( ) ;', '}', 'public interface EventListenerProvider', '{', 'import org . apache . commons . configuration . event . EventListenerList ;', 'package org . apache . commons . configuration . builder ;']","['EventType < T > eventType , EventListener < ? super T > listener )', '}', 'import org . apache . commons . configuration . event . EventType ;', 'return this ;', 'public EventListenerList getListeners ( )', '@ Override', 'package org . apache . commons . configuration . builder ;', 'import org . apache . commons . configuration . event . EventListener ;', 'EventListenerRegistrationData < T > registrationData )', 'public EventListenerParameters ( )']","['handleEventListenerProviders ( p ) ;', '. getListeners ( ) ) ;', 'if ( params instanceof EventListenerProvider )', 'configListeners . addAll ( ( ( EventListenerProvider ) params )', '}', '{', 'private void handleEventListenerProviders ( BuilderParameters params )', 'config . getEventListeners ( regData . getEventType ( ) ) . contains (', '@ Test', '}']","['eventListeners . removeEventListener ( eventType , listener ) ;', 'return eventListeners . removeEventListener ( eventType , listener ) ;', 'public final < E extends ConfigurationBuilderEvent > void removeEventListener (', 'public final < E extends ConfigurationBuilderEvent > boolean removeEventListener (', '< E extends ConfigurationBuilderEvent > void removeEventListener (', '< E extends ConfigurationBuilderEvent > boolean removeEventListener (', 'public < T extends ConfigurationBuilderEvent > void removeEventListener (', 'public < T extends ConfigurationBuilderEvent > boolean removeEventListener (', 'builder . removeEventListener ( eventType , listener ) ;', 'return builder . removeEventListener ( eventType , listener ) ;']","['public final < E extends ConfigurationBuilderEvent > boolean removeEventListener (', 'public final < E extends Event > boolean removeEventListener (', 'public final < E extends ConfigurationBuilderEvent > void addEventListener (', 'public final < E extends Event > void addEventListener (', 'EventSourceSupport . BUILDER OPTIONAL = = eventSourceSupport ) ;', 'throw new ConfigurationRuntimeException (', '. asEventSource (', '}', 'builder ,', '""Could not delegate event source operation to builder!"" ) ;']","['public class ReloadingController', 'public < T extends Event > void addEventListener (', 'public < T extends ReloadingEvent > void removeEventListener (', 'import org . apache . commons . configuration . event . EventSource ;', 'listeners . removeEventListener ( eventType , listener ) ;', 'import org . apache . commons . configuration . event . Event ;', 'public < T extends ReloadingEvent > void addEventListener (', 'return listeners . removeEventListener ( eventType , listener ) ;', 'public class ReloadingController implements EventSource', '@ Override']","['private static final String FIELD = ""EVENT READ PROPERTY"" ;', 'assertNull ( ""Non null return value for non existing constant"" ,', 'assertNull ( ""Non null return value for non existing constant"" , lookup', '. lookup ( variable ( ""PRIVATE FIELD"" ) ) ) ;', '. lookup ( CLS NAME + ""DISABLED DELIMITER"" ) ) ;', 'assertNull ( ""Non null return value for non accessible field"" , lookup', 'assertEquals ( ""Wrong value of constant"" ,', 'lookup . lookup ( variable ( ""NO FIELD"" ) ) ) ;', '. lookup ( VARNAME ) ) ;', '}']","['protected static final String START TOKEN = ""$ { "" ;', 'public static final int EVENT CLEAR = 4 ;', 'public static final int EVENT READ PROPERTY = 5 ;', 'public static final int EVENT CLEAR PROPERTY = 2 ;', 'public static final int EVENT SET PROPERTY = 3 ;', 'protected static final String END TOKEN = "" } "" ;', 'public static final int EVENT ADD PROPERTY = 1 ;']","['public static final int EVENT ADD NODES = 11 ;', 'public static final int EVENT CLEAR TREE = 10 ;', '@ Deprecated', 'public static final int EVENT SUBNODE CHANGED = 12 ;', 'public static final int EVENT SUBNODE CHANGED = 12 ;']","['import java . io . File ;', 'public InputSource resolveEntity ( String publicId , String systemId )', 'import java . net . URL ;', 'return new InputSource ( getClass ( ) . getClassLoader ( )', '} ) ;', '. getResourceAsStream ( ""properties . dtd"" ) ) ;', 'import java . net . URL ;', '}', 'import java . io . File ;', 'dBuilder . setEntityResolver ( new EntityResolver ( )']","['fetchEventSource ( ) . removeEventListener ( eventType , listener ) ;', 'fetchEventSource ( ) . addEventListener ( eventType , listener ) ;', 'public final < E extends Event > boolean removeEventListener (', 'public < E extends Event > void addEventListener (', 'fetchEventSource ( ) . addEventListener ( eventType , listener ) ;', '@ Deprecated', 'private final EventListenerList configListeners ;', '}', 'target . configListeners . addAll ( configListeners ) ;', 'return removeEventListener ( eventType , listener ) ;']","['while ( currentType ! = null )', 'acceptedTypes = EventType . fetchSuperEventTypes ( base ) ;', 'return types ;', 'baseEventType ) )', 'private static Set < EventType < ? > > fetchSuperEventTypes ( EventType < ? > eventType )', 'base = EventType . fetchSuperEventTypes ( reg . getEventType ( ) ) ;', 'acceptedTypes = fetchSuperEventTypes ( base ) ;', '| | !EventType . fetchSuperEventTypes ( event . getEventType ( ) ) . contains (', 'Set < EventType < ? > > types = new HashSet < EventType < ? > > ( ) ;', 'types . add ( currentType ) ;']","['while ( currentType ! = null )', 'EventType < ? > baseType )', 'return true ;', 'public static boolean isInstanceOf ( EventType < ? > derivedType ,', 'EventType < ? > currentType = derivedType ;', 'if ( currentType = = baseType )', '}', '{', 'return false ;', 'currentType = currentType . getSuperType ( ) ;']","['target . eventListeners . addAll ( eventListeners ) ;', 'EventListenerList listeners )', '}', 'target . eventListeners . addAll ( listeners ) ;', 'protected void copyEventListeners ( BasicConfigurationBuilder < ? > target ,', '{', 'copyEventListeners ( target , eventListeners ) ;', 'for ( FileBasedConfigurationBuilder < T > b : getManagedBuilders ( ) . values ( ) )', 'for ( FileBasedConfigurationBuilder < T > b : getManagedBuilders ( )', 'b . addEventListener ( eventType , l ) ;']","['eventListeners . fire ( new ConfigurationBuilderEvent ( this ,', 'eventListeners . fire ( event ) ;', 'this ,', 'fireBuilderEvent ( new ConfigurationBuilderResultCreatedEvent ( this ,', 'eventListeners . fire ( new ConfigurationBuilderResultCreatedEvent (', 'fireBuilderEvent ( new ConfigurationBuilderEvent ( this ,', '}', '{', 'protected void fireBuilderEvent ( ConfigurationBuilderEvent event )']","['b . removeEventListener ( ConfigurationBuilderEvent . RESET ,', '. getConfiguration ( ) ) ;', 'resetResult ( ) ;', '}', 'newBuilder . addEventListener ( ConfigurationBuilderEvent . RESET ,', '( ( ConfigurationBuilderResultCreatedEvent ) event )', '. getEventType ( ) ) )', 'private ConfigurationBuilderEvent createEventWithChangedSource (', 'ConfigurationBuilderResultCreatedEvent . RESULT CREATED ,', '. getEventType ( ) ;']","['private static final String METHOD BUILDER ADD =', '. asEventSource ( this , true ) : builder ;', 'method . getParameterTypes ( ) ) ;', 'BUILDER', 'try', 'Object target =', ': METHOD BUILDER ADD ;', 'return method . invoke ( target , args ) ;', '}', '( EventSourceSupport . DUMMY = = eventSourceSupport ) ? ConfigurationUtils']","['EventListenerRegistrationData < E > regData )', 'private void removeEventListeners ( T obj )', 'T oldResult ;', 'evSrc . removeEventListener ( regData . getEventType ( ) , regData . getListener ( ) ) ;', 'EventSource evSrc = ConfigurationUtils . asEventSource ( obj , true ) ;', 'removeEventListeners ( oldResult ) ;', '}', 'for ( EventListenerRegistrationData < ? > regData : eventListeners', '{', 'if ( oldResult ! = null )']","['builder . addConfigurationListener ( ConfigurationEvent . ANY , l2 ) ;', 'builder . addEventListener ( Event . ANY , l1 ) ;', 'builder . addConfigurationListener ( Event . ANY , l1 ) ;', 'builder . addEventListener ( ConfigurationEvent . ANY , l2 ) ;']","['removeConfigurationListener ( ConfigurationEvent . ANY , autoSaveListener ) ;', 'addEventListener ( ConfigurationEvent . ANY , autoSaveListener ) ;', 'addConfigurationListener ( ConfigurationEvent . ANY , autoSaveListener ) ;', 'removeEventListener ( ConfigurationEvent . ANY , autoSaveListener ) ;']","['List < ? extends HierarchicalConfiguration > subs )', 'List < ? extends HierarchicalConfiguration < ? > > subs )', 'for ( HierarchicalConfiguration sub : subs )', 'for ( HierarchicalConfiguration < ? > sub : subs )']","['result . setRootNode ( createSubsetRootNode ( results ) ) ;', 'result . getModel ( ) . setRootNode ( createSubsetRootNode ( results ) ) ;']","['setRootNode ( config . getRootNode ( ) ) ;', 'getModel ( ) . setRootNode ( config . getRootNode ( ) ) ;']","['result . setRootNode ( cn ) ;', 'result . getNodeModel ( ) . setRootNode ( cn ) ;']","['config . setRootNode ( root ) ;', 'config . getNodeModel ( ) . setRootNode ( root ) ;']","['return !nodeDefined ( getRootNode ( ) ) ;', 'return resolveKey ( nodeHandler . getRootNode ( ) , key , nodeHandler ) ;', 'NodeTreeWalker . INSTANCE . walkDFS ( getRootNode ( ) , visitor ,', 'NodeHandler < T > nodeHandler = getModel ( ) . getNodeHandler ( ) ;', 'return getModel ( ) . getNodeHandler ( ) . nodeName ( getRootNode ( ) ) ;', 'nodeHandler ) ;', 'return resolveKey ( getRootNode ( ) , key , getModel ( ) . getNodeHandler ( ) ) ;', 'NodeTreeWalker . INSTANCE . walkDFS ( nodeHandler . getRootNode ( ) , visitor ,', 'getModel ( ) . getNodeHandler ( ) ) ;', 'return nodeHandler . nodeName ( nodeHandler . getRootNode ( ) ) ;']","['return new InMemoryNodeModel ( getRootNode ( ) ) ;', 'return new InMemoryNodeModel ( getModel ( ) . getNodeHandler ( ) . getRootNode ( ) ) ;']","['for ( ImmutableNode node : getRootNode ( ) . getChildren ( ) )', '. getChildren ( ) )', 'for ( ImmutableNode node : getModel ( ) . getNodeHandler ( ) . getRootNode ( )']","['. getNodeName ( ) ;', '. getNodeHandler ( ) . getRootNode ( ) . getValue ( ) ) ;', 'initRootElementText ( newHelper . getDocument ( ) , getRootNode ( ) . getValue ( ) ) ;', '( c ! = null ) ? c . getRootElementName ( ) : null ;', '( c ! = null ) ? c . getRootElementName ( ) : getRootNode ( )', 'initRootElementText ( newHelper . getDocument ( ) , getModel ( )', 'conf . addNodes ( ""copiedProperties"" , c2 . getRootNode ( ) . getChildren ( ) ) ;', '. getRootNode ( ) . getChildren ( ) ) ;', 'conf . addNodes ( ""copiedProperties"" , c2 . getModel ( ) . getNodeHandler ( )']","['assertEquals ( ""Wrong result"" , key , config . nodeKey ( config . getRootNode ( ) ,', 'config . resolveNodeKey ( getRootNode ( ) , attrKey ,', 'config . resolveNodeKey ( config . getRootNode ( ) , attrKey ,', 'Collection < ImmutableNode > nodes = getRootNode ( ) . getChildren ( ) ;', 'config . nodeKey ( config . getRootNode ( ) , cache , config . getModel ( )', 'config . nodeKey ( getRootNode ( ) , cache , config . getModel ( )', 'cache . put ( config . getRootNode ( ) , key ) ;', 'NodeStructureHelper . nodeForKey ( getRootNode ( ) ,', 'config . resolveNodeKey ( config . getRootNode ( ) ,', '}']","['assertSame ( ""Wrong root node"" , conf . getRootNode ( ) , wrapper . getRootNode ( ) ) ;', '. getRootNode ( ) ) ;', '. getRootNode ( ) , wrapper . getNodeModel ( ) . getNodeHandler ( )', 'assertSame ( ""Wrong root node"" , conf . getNodeModel ( ) . getNodeHandler ( )', 'assertNotNull ( ""Root node not initialized"" , cc . getRootNode ( ) ) ;', '. getNodeHandler ( ) . getRootNode ( ) ) ;', 'assertNotNull ( ""Root node not initialized"" , cc . getNodeModel ( )']","['. query ( hc . getRootNode ( ) , key , hc . getNodeModel ( ) . getNodeHandler ( ) ) ;', '. query ( nodeHandler . getRootNode ( ) , key , nodeHandler ) ;', 'NodeHandler < ImmutableNode > nodeHandler = hc . getNodeModel ( ) . getNodeHandler ( ) ;', 'import org . apache . commons . configuration . tree . NodeHandler ;']","['getModel ( ) . setRootNode ( config . getRootNode ( ) ) ;', 'config . getNodeModel ( ) . getNodeHandler ( ) . getRootNode ( ) ) ;', 'getModel ( ) . setRootNode (']","['printNode ( writer , 1 , getRootNode ( ) ) ;', 'printNode ( writer , 1 , getNodeModel ( ) . getNodeHandler ( ) . getRootNode ( ) ) ;']","['ImmutableNode cn = combiner . combine ( conf1 . getRootNode ( ) , conf2', 'combiner . combine ( conf1 . getNodeModel ( ) . getNodeHandler ( )', '. getRootNode ( ) ) ;', '. getRootNode ( ) ) ;', 'ImmutableNode cn =', '. getRootNode ( ) , conf2 . getNodeModel ( ) . getNodeHandler ( )', 'config . getExpressionEngine ( ) . query ( config . getRootNode ( ) ,', 'nodeHandler ) ;', 'config . getNodeModel ( ) . getNodeHandler ( ) ) ;', 'config . getExpressionEngine ( ) . query ( nodeHandler . getRootNode ( ) ,']","['public T getRootNode ( )', '{', '}', 'return getModel ( ) . getNodeHandler ( ) . getRootNode ( ) ;', 'public ImmutableNode getRootNode ( )', '}', '{', 'return getCurrentConfig ( ) . getRootNode ( ) ;', '@ Override', 'T getRootNode ( ) ;']","['setRootName ( DEFAULT ROOT NAME ) ;', 'rootName = DEFAULT ROOT NAME ;']","['@ SuppressWarnings ( ""unchecked , rawtypes"" )', '@ SuppressWarnings ( ""rawtypes"" )', '@ SuppressWarnings ( ""unchecked"" )']","['import junit . framework . Assert ;', 'import org . junit . Assert ;']","['traceLevel = Priority . DEBUG ;', 'getLogger ( ) . log ( FQCN , Level . DEBUG , message , t ) ;', 'getLogger ( ) . log ( FQCN , Priority . INFO , message , null ) ;', 'getLogger ( ) . log ( FQCN , Level . WARN , message , null ) ;', 'getLogger ( ) . log ( FQCN , Priority . WARN , message , t ) ;', 'getLogger ( ) . log ( FQCN , Level . ERROR , message , null ) ;', 'private static Priority traceLevel ;', 'getLogger ( ) . log ( FQCN , Level . ERROR , message , t ) ;', 'getLogger ( ) . log ( FQCN , Priority . ERROR , message , null ) ;', 'traceLevel = Level . DEBUG ;']","['( HierarchicalConfiguration ) null ) ;', '( HierarchicalConfiguration < ImmutableNode > ) null ) ;', 'HierarchicalConfiguration config2 = setUpConfig ( writer . toString ( ) ) ;', 'HierarchicalConfiguration < ? > config2 = setUpConfig ( writer . toString ( ) ) ;', 'HierarchicalConfiguration conf = new BaseHierarchicalConfiguration ( ) ;', 'HierarchicalConfiguration < ? > conf = new BaseHierarchicalConfiguration ( ) ;', 'HierarchicalConfiguration hc = new BaseHierarchicalConfiguration ( ) ;', 'import org . apache . commons . configuration . tree . ImmutableNode ;', 'HierarchicalConfiguration < ImmutableNode > hc = new BaseHierarchicalConfiguration ( ) ;', 'HierarchicalConfiguration declConfig )']",['private static final long serialVersionUID = 1L ;'],"['return combinedBuilder ( path ) . getConfiguration ( ) ;', 'return xmlBuilder ( url ) . getConfiguration ( ) ;', 'return fileBasedBuilder ( INIConfiguration . class , path ) ;', 'return propertiesBuilder ( path ) . getConfiguration ( ) ;', 'return new CombinedConfigurationBuilder ( ) . configure ( fileParams ( path ) ) ;', 'import org . apache . commons . configuration . builder . combined . CombinedConfigurationBuilder ;', 'public CombinedConfigurationBuilder combinedBuilder ( File file )', 'return fileParams ( ) . setFile ( file ) ;', 'return createFileBasedBuilder ( configClass , fileParams ( file ) ) ;', 'public XMLConfiguration xml ( URL url ) throws ConfigurationException']","['implements Serializable , Cloneable , InMemoryNodeModelSupport', 'implements Cloneable , InMemoryNodeModelSupport', 'private static final long serialVersionUID = 3373812230395363192L ;', 'import java . io . Serializable ;', 'private static final long serialVersionUID = 8338574525528692307L ;', 'private static final long serialVersionUID = - 69011336405718640L ;', 'public class DataConfiguration extends AbstractConfiguration', 'public class DataConfiguration extends AbstractConfiguration implements Serializable', 'private static final long serialVersionUID = 680097981171908142L ;', 'private static final long serialVersionUID = 2548006161386850670L ;']","['addProperty ( key , value ) ;', 'finally', 'Object value = encodeForCopy ( c . getProperty ( key ) ) ;', 'addProperty ( key , value ) ;', 'String key = it . next ( ) ;', 'Object value = encodeForCopy ( c . getProperty ( key ) ) ;', 'setProperty ( key , value ) ;', 'String key = it . next ( ) ;', 'for ( Iterator < String > it = c . getKeys ( ) ; it . hasNext ( ) ; )', 'try']","['@ Override', 'protected Iterator < String > getKeysInternal ( ) {', '}', 'return System . getProperties ( ) . stringPropertyNames ( ) . iterator ( ) ;', '@ Test', 'try', 'if ( !property . equals ( key ) )', 'setValue = !setValue ;', '}', 't . start ( ) ;']","['if ( s . length ( ) < 1 | | ( isCommentLine ( s ) = = comment ) )', 'if ( StringUtils . isBlank ( s ) | | ( isCommentLine ( s ) = = comment ) )', 'builder . addProperty ( TEST KEY , TEST VALUE ) ;', 'buf . append ( s ) . append ( CR ) ;', 'builder . addComment ( TEST COMMENT ) ;', '@ Test', 'layout . getCanonicalComment ( TEST KEY , false ) ) ;', 'public void addLine ( String s )', 'assertEquals ( ""Wrong comment"" , TEST COMMENT + CRNORM + "" "" ,', 'layout . load ( config , builder . getReader ( ) ) ;']","['Arrays . asList ( ""org . apache . commons . configuration . builder . XMLBuilderParametersImpl"" ) ) ;', '""org . apache . commons . configuration2 . plist . PropertyListConfiguration"" ,', '""org . apache . commons . configuration . plist . XMLPropertyListConfiguration"" ,', '""org . apache . commons . configuration2 . XMLPropertiesConfiguration"" ,', '""org . apache . commons . configuration . JNDIConfiguration"" ,', '""org . apache . commons . configuration2 . builder . FileBasedBuilderParametersImpl"" ;', '""org . apache . commons . configuration . builder . ReloadingFileBasedConfigurationBuilder"" ;', '""org . apache . commons . configuration2 . XMLConfiguration"" ,', '""org . apache . commons . configuration . builder . FileBasedConfigurationBuilder"" ;', '""org . apache . commons . configuration2 . builder . BasicConfigurationBuilder"" ;']","['Set < String > keySet = new HashSet < String > ( ) ;', 'for ( Iterator < String > it = config . getKeys ( ) ; it . hasNext ( ) ; )', '}', 'public static List < String > keysToList ( Configuration config )', 'return keyList ;', 'appendKeys ( config , keySet ) ;', 'public static Set < String > keysToSet ( Configuration config )', 'return keySet ;', 'import java . util . List ;', '{']","['import org . apache . commons . collections . CollectionUtils ;', 'ConfigurationAssert . appendKeys ( getUnderlyingConfiguration ( ) , keyCol ) ;', 'CollectionUtils . addAll ( keyCol , getUnderlyingConfiguration ( )', '. getKeys ( ) ) ;', 'Set < String > keys = new HashSet < String > ( ) ;', 'Set < String > keys = ConfigurationAssert . keysToSet ( config ) ;', 'import org . apache . commons . collections . CollectionUtils ;', 'CollectionUtils . addAll ( keys , config . getKeys ( ) ) ;', 'List < ? > keysCompositeConfiguration = IteratorUtils . toList ( b . getKeys ( ) ) ;', 'List < String > keysCompositeConfiguration = ConfigurationAssert . keysToList ( b ) ;']","['if ( value instanceof byte [ ] )', 'if ( value instanceof byte [ ] | | value instanceof List )', 'else if ( value instanceof Object [ ] )', '}', '{', 'import java . util . Arrays ;', 'addPropertyDirect ( key , Arrays . asList ( ( Object [ ] ) value ) ) ;', 'private void checkArrayProperty ( List < ? > expectedValues )', 'checkArrayProperty ( Arrays . asList ( elems ) ) ;', 'StringWriter out = new StringWriter ( ) ;']","['< T > boolean matches ( T node , NodeHandler < T > handler , C criterion ) ;', 'public interface NodeMatcher < C >', '}', '{', 'package org . apache . commons . configuration2 . tree ;']","['public < C > int getMatchingChildrenCount ( ImmutableNode node , NodeMatcher < C > matcher , C criterion ) {', 'throw new UnsupportedOperationException ( ""Not yet implemented!"" ) ;', '}', 'public < C > List < ImmutableNode > getMatchingChildren ( ImmutableNode node , NodeMatcher < C > matcher , C criterion ) {', '@ Override', '< C > List < T > getMatchingChildren ( T node , NodeMatcher < C > matcher , C criterion ) ;', '< C > int getMatchingChildrenCount ( T node , NodeMatcher < C > matcher , C criterion ) ;', 'public < C > int getMatchingChildrenCount ( T node , NodeMatcher < C > matcher , C criterion ) {', 'throw new UnsupportedOperationException ( ""Not yet implemented!"" ) ;', '}']","['throw new UnsupportedOperationException ( ""Not yet implemented!"" ) ;', 'result . add ( c ) ;', 'public < C > int getMatchingChildrenCount ( ImmutableNode node , NodeMatcher < C > matcher , C criterion ) {', 'if ( matcher . matches ( c , this , criterion ) )', 'public < C > List < ImmutableNode > getMatchingChildren ( ImmutableNode node , NodeMatcher < C > matcher , C criterion ) {', 'List < ImmutableNode > result =', 'public < C > List < ImmutableNode > getMatchingChildren ( ImmutableNode node ,', 'new ArrayList < ImmutableNode > ( node . getChildren ( ) . size ( ) ) ;', '}', 'for ( ImmutableNode c : node . getChildren ( ) )']",['@ Override'],"['return StringUtils . equals ( criterion , handler . nodeName ( node ) ) ;', '}', 'EQUALS', '{', 'import org . apache . commons . lang3 . StringUtils ;', 'public enum NodeNameMatchers implements NodeMatcher < String >', 'String criterion )', 'public < T > boolean matches ( T node , NodeHandler < T > handler ,', '@ Override', 'package org . apache . commons . configuration2 . tree ;']","['return handler . getChildren ( parent , nodeName ) . indexOf ( node ) ;', 'keyPart ) - 1 ;', 'private static < T > int determineIndex ( T node , T parent , String nodeName ,', '}', 'if ( idx < 0 | | idx > = handler . getChildrenCount ( node , keyPart ) )', 'private < T > int determineIndex ( T node , T parent , String nodeName ,', '. getChildrenCount ( node , keyPart ) - 1 ;', 'String nodeName )', 'handler . getChildren ( node , keyPart ) . get ( idx ) , handler ) ;', 'NodeMatcher < String > nodeNameMatcher )']",['@ Override'],"['result . add ( c ) ;', 'return getMatchingChildrenCount ( node , NodeNameMatchers . EQUALS , name ) ;', 'return getChildren ( node , name ) . size ( ) ;', 'return getMatchingChildren ( node , NodeNameMatchers . EQUALS , name ) ;', 'new ArrayList < ImmutableNode > ( node . getChildren ( ) . size ( ) ) ;', '}', 'for ( ImmutableNode c : node . getChildren ( ) )', '{', 'import org . apache . commons . lang3 . StringUtils ;', 'if ( StringUtils . equals ( name , c . getNodeName ( ) ) )']","['handler . nodeName ( node ) ) ;', '} ,', '}', 'return StringUtils . equalsIgnoreCase ( criterion ,', 'EQUALS IGNORE CASE', '{', 'String criterion )', 'public < T > boolean matches ( T node , NodeHandler < T > handler ,', '@ Override', 'assertFalse ( ""Match ( 2 ) "" , NodeNameMatchers . EQUALS . matches (']","['assertTrue ( instance . getString ( ""section2 . var2"" ) . equals ( ""bar"" ) ) ;', 'assertEquals ( ""section2 . var1"" , 123 . 45 ,', 'assertTrue ( instance . getString ( ""section1 . var1"" ) . equals ( ""foo"" ) ) ;', '@ Test', 'assertTrue ( instance . getBoolean ( ""section3 . var1"" ) ) ;', 'throws ConfigurationException', 'assertTrue ( instance . getSections ( ) . size ( ) = = 3 ) ;', '}', 'assertTrue ( instance . getDouble ( ""section2 . var1"" ) = = 123 . 45 ) ;', 'config . getString ( ""Section1 . var1"" ) ) ;']","['public interface ConfigurationDecoder', 'String decode ( String s ) ;', '}', '{', 'package org . apache . commons . configuration2 ;']","['throw new UnsupportedOperationException ( ""Not yet implemented!"" ) ;', 'public String getEncodedString ( String key ) {', '}', 'public String getEncodedString ( String key , ConfigurationDecoder decoder ) {', '@ Override', 'String getEncodedString ( String key , ConfigurationDecoder decoder ) ;', 'String getEncodedString ( String key ) ;']","['public String getEncodedString ( String key , ConfigurationDecoder decoder ) {', 'return ( value ! = null ) ? decoder . decode ( value ) : null ;', 'throw new UnsupportedOperationException ( ""Not yet implemented!"" ) ;', 'String value = getString ( key ) ;', '}', 'throw new IllegalArgumentException (', '""ConfigurationDecoder must not be null!"" ) ;', '{', 'if ( decoder = = null )', 'public String getEncodedString ( String key , ConfigurationDecoder decoder )']","['throw new UnsupportedOperationException ( ""Not yet implemented!"" ) ;', 'ConfigurationDecoder configurationDecoder )', 'public String getEncodedString ( String key ) {', 'throw new IllegalStateException (', '""No default ConfigurationDecoder defined!"" ) ;', 'ConfigurationDecoder decoder = getConfigurationDecoder ( ) ;', 'public ConfigurationDecoder getConfigurationDecoder ( )', 'return configurationDecoder ;', 'private ConfigurationDecoder configurationDecoder ;', '}']","['ConfigurationDecoder decoder )', 'private static final String PROP CONFIGURATION DECODER = ""configurationDecoder"" ;', 'import org . apache . commons . configuration2 . ConfigurationDecoder ;', 'public BasicBuilderParameters setConfigurationDecoder (', 'return setProperty ( PROP CONFIGURATION DECODER , decoder ) ;', '}', '{', '@ Override', 'import org . apache . commons . configuration2 . ConfigurationDecoder ;', 'T setConfigurationDecoder ( ConfigurationDecoder decoder ) ;']","['. setThrowExceptionOnMissing ( config . isThrowExceptionOnMissing ( ) ) ;', '. setThrowExceptionOnMissing ( config . isThrowExceptionOnMissing ( ) )', '. setConfigurationDecoder ( config . getConfigurationDecoder ( ) ) ;', '. setListDelimiterHandler ( listHandler ) ) ;', 'assertEquals ( ""Wrong decoder"" , decoder , cc2 . getConfigurationDecoder ( ) ) ;', '. setListDelimiterHandler ( listHandler )', 'import org . apache . commons . configuration2 . ConfigurationDecoder ;', 'ConfigurationDecoder decoder = EasyMock . createMock ( ConfigurationDecoder . class ) ;', '. setConfigurationDecoder ( decoder ) ) ;']","[': getCurrentSeparator ( ) ;', ': StringUtils . defaultString ( getCurrentSeparator ( ) ) ;', '+ "" ] ) \\ \\ s * ) ( . * ) "" ) ;', '+ "" ] ) \\ \\ s * ) ? ( . * ) "" ) ;', 'assertEquals ( """" , empty ) ;', 'checkEmpty ( ""test . empty2"" ) ;', 'String empty = conf . getString ( ""test . empty"" ) ;', 'checkEmpty ( ""test . empty"" ) ;', 'assertNotNull ( empty ) ;', '@ Test']","['public int size ( )', 'return 0 ;', '}', '{', '@ Override', 'int size ( ) ;']","['public int size ( )', 'endRead ( ) ;', 'return 0 ;', 'finally', '}', 'protected int sizeInternal ( )', '{', 'beginRead ( false ) ;', '@ Override', 'try']","['return 1 ;', 'int size = 0 ;', 'for ( Iterator < String > keyIt = getKeysInternal ( ) ; keyIt . hasNext ( ) ; size + + )', '}', '{', 'keyIt . next ( ) ;', 'return size ;', 'public void testSizeInternal ( )', '@ Test', 'assertEquals ( ""Wrong size"" , PROP COUNT , config . size ( ) ) ;']","['@ Test', '}', 'assertEquals ( ""Wrong size"" , 4 , getConfiguration ( ) . size ( ) ) ;', 'public void testSizeEmpty ( )', '{', 'public void testSize ( )', 'assertEquals ( ""Wrong size of empty configuration"" , 0 , getEmptyConfiguration ( ) . size ( ) ) ;']","['protected int sizeInternal ( )', '}', 'return map . size ( ) ;', '{', '@ Override']","['protected int sizeInternal ( )', 'return store . size ( ) ;', '}', '{', '@ Override', 'config . addProperty ( ""key"" + i , ""value"" + i ) ;', 'final int count = 16 ;', '@ Test', 'assertEquals ( ""Wrong size"" , count , config . size ( ) ) ;', '}']","['@ Override', '}', 'protected int sizeInternal ( ) {', 'return this . getCurrentConfig ( ) . size ( ) ;', 'assertEquals ( ""Wrong size"" , 18 , config . size ( ) ) ;']","['return visitor . getKeyList ( ) . iterator ( ) ;', 'protected int sizeInternal ( )', '}', 'return visitDefinedKeys ( ) . getKeyList ( ) . iterator ( ) ;', '{', 'return visitDefinedKeys ( ) . getKeyList ( ) . size ( ) ;', 'return visitor ;', 'private DefinedKeysVisitor visitDefinedKeys ( )', '@ Override', '@ Test']","['@ Override', '@ Override']","['import org . apache . commons . configuration2 . ex . ConfigurationRuntimeException ;', 'import org . apache . commons . configuration2 . convert . DefaultListDelimiterHandler ;']","['import org . apache . commons . configuration2 . sync . LockMode ;', 'public String nodeKey ( T node , Map < T , String > cache , NodeHandler < T > handler )', 'import org . apache . commons . configuration2 . sync . Synchronizer ;', '{', 'public String nodeKey ( T node , Map < T , String > cache , NodeHandler < T > handler ) {']","['if ( optimize )', 'if ( optimize )', 'if ( config instanceof AbstractConfiguration )', 'if ( config instanceof AbstractConfiguration )']","['protected Collection < ConfigurationBuilder < ? extends Configuration > > getChildBuilders ( )', 'protected synchronized Collection < ConfigurationBuilder < ? extends Configuration > > getChildBuilders ( )']","['Arrays . asList ( ""org . apache . commons . configuration2 . builder . JndiBuilderParametersImpl"" ) ) ;', 'EXT XML , Collections . singletonList ( FILE PARAMS ) ) ;', 'Arrays . asList ( ""org . apache . commons . configuration2 . builder . BasicBuilderParameters"" ) ) ;', 'Collections . singletonList ( ""org . apache . commons . configuration2 . builder . BasicBuilderParameters"" ) ) ;', 'static final String ATTR FILENAME = DefaultExpressionEngineSymbols . DEFAULT ATTRIBUTE START', 'Collections . singletonList ( ""org . apache . commons . configuration2 . builder . XMLBuilderParametersImpl"" ) ) ;', 'public static final int EVENT ERR LOAD OPTIONAL = 51 ;', 'Collections . singletonList ( FILE PARAMS ) ) ;', 'Arrays . asList ( FILE PARAMS ) ) ;', 'Collections . singletonList ( ""org . apache . commons . configuration2 . builder . JndiBuilderParametersImpl"" ) ) ;']","['return ctor . newInstance ( new Object [ ] { value } ) ;', 'return ( Number ) constr . newInstance ( str ) ;', 'return new Byte ( n . byteValue ( ) ) ;', 'return n . longValue ( ) ;', 'return new Long ( n . longValue ( ) ) ;', '. getConstructor ( String . class ) ;', 'return ( Number ) constr . newInstance ( new Object [ ] { str } ) ;', 'return n . shortValue ( ) ;', 'return new Short ( n . shortValue ( ) ) ;', 'return ctor . newInstance ( value ) ;']","['String base64 = new String ( Base64 . encodeBase64 ( ( byte [ ] ) value ) ) ;', 'import java . io . UnsupportedEncodingException ;', 'addValue ( Base64 . decodeBase64 ( value . getBytes ( ) ) ) ;', 'catch ( UnsupportedEncodingException e )', 'try', 'String base64 = null ;', '}', 'private static final String DATA ENCODING = ""UTF - 8"" ;', '{', 'throw new AssertionError ( e ) ;']","['peek ( ) . addList ( array ) ;', 'ArrayNodeBuilder node = ( ArrayNodeBuilder ) peekNE ( ) ;', 'peek ( ) . addValue ( buffer . toString ( ) ) ;', 'return result ;', 'peek ( ) . addDataValue ( buffer . toString ( ) ) ;', '}', 'peek ( ) . addDateValue ( buffer . toString ( ) ) ;', 'peekNE ( ) . addFalseValue ( ) ;', 'String base64 = null ;', 'peekNE ( ) . addDataValue ( buffer . toString ( ) ) ;']","['out . println ( padding + "" < data > "" + StringEscapeUtils . escapeXml ( base64 ) + "" < / data > "" ) ;', 'out . println ( padding + "" < key > "" + StringEscapeUtils . escapeXml10 ( node . getNodeName ( ) ) + "" < / key > "" ) ;', 'out . println ( padding + "" < key > "" + StringEscapeUtils . escapeXml ( node . getNodeName ( ) ) + "" < / key > "" ) ;', 'out . println ( padding + "" < string > "" + StringEscapeUtils . escapeXml10 ( String . valueOf ( value ) ) + "" < / string > "" ) ;', 'out . println ( padding + "" < string > "" + StringEscapeUtils . escapeXml ( String . valueOf ( value ) ) + "" < / string > "" ) ;', 'out . println ( padding + "" < data > "" + StringEscapeUtils . escapeXml10 ( base64 ) + "" < / data > "" ) ;']","['assert builder ! = null : ""Stack was empty!"" ;']","['public class EventType < T extends Event >', 'private static final long serialVersionUID = 20150416L ;', 'import java . io . Serializable ;', 'public class EventType < T extends Event > implements Serializable']","['parent . mkdirs ( ) ;', 'private void createPath ( File file ) throws ConfigurationException', 'private void createPath ( File file )', '}', 'throw new ConfigurationException ( ""Cannot create path : "" + parent ) ;', '{', 'if ( !parent . mkdirs ( ) )', 'public void testGetOutputStreamInvalidPath ( ) throws ConfigurationException', '}', 'fileSystem . getOutputStream ( new File ( ""this is / < certainly > \\ \\ an#invalid# * path!"" ) ) ;']","['return ;', 'import org . apache . commons . logging . Log ;', 'private final Log log = LogFactory . getLog ( getClass ( ) ) ;', 'log . warn ( ""Cannot access property \'"" + key + ""\'! Ignoring . "" , ex ) ;', 'import org . apache . commons . logging . LogFactory ;']","['if ( StringUtils . isEmpty ( basePath ) | | ( absolute ! = null & & absolute . isAbsolute ( ) ) )', 'file = absolute ;', 'file = new File ( fileName ) ;', 'File absolute = new File ( fileName ) ;', 'if ( fileName ! = null )', 'if ( StringUtils . isEmpty ( basePath ) | | absolute . isAbsolute ( ) )', '}', 'File absolute = null ;', '{', 'absolute = new File ( fileName ) ;']","['String name = ( url = = null ) ? fileName : url . toString ( ) ;', 'String name = url . toString ( ) ;']","['} . execute ( ) ;', '. execute ( ) ;', '}']","['ConfigurationInterpolator ci = new ConfigurationInterpolator ( )', 'CurrentConfigHolder cch = CURRENT CONFIG . get ( ) ;', 'return ci ;', 'protected int sizeInternal ( )', 'beginWrite ( optimize ) ;', 'private static final ThreadLocal < CurrentConfigHolder > CURRENT CONFIG =', 'private static final ThreadLocal < CurrentConfigHolder > currentConfig =', 'CURRENT CONFIG . remove ( ) ;', 'if ( cch . decrementLockCountAndCheckRelease ( ) )', '{']","['import java . util . NoSuchElementException ;', 'import org . apache . commons . configuration2 . ex . ConversionException ;']","['import org . apache . commons . configuration2 . convert . ListDelimiterHandler ;', 'import org . apache . commons . configuration2 . convert . DefaultListDelimiterHandler ;']","['protected Iterator < String > getKeysInternal ( ) {', '{', 'protected Iterator < String > getKeysInternal ( )']","['{ "" \\ \\ "" , "" \\ \\ \\ \\ "" } } ) ,', '{ "" \\ \\ "" , "" \\ \\ \\ \\ "" } } ) ,', 'new AggregateTranslator ( new LookupTranslator ( new String [ ] [ ] {', 'new AggregateTranslator ( new LookupTranslator ( new String [ ] [ ] {', 'import org . apache . commons . configuration2 . convert . DefaultListDelimiterHandler ;']","['pubID = sysID = null ;', 'pubID = null ;', 'sysID = null ;']","['private static class BeanCreationContextImpl implements BeanCreationContext', 'private static final class BeanCreationContextImpl implements BeanCreationContext']","['""Wrong number of constructor arguments!"" ;', 'assert types . length = = nullSafeConstructorArgs ( bcc . getBeanDeclaration ( ) ) . size ( )', 'assert types . length = = nullSafeConstructorArgs ( bcc . getBeanDeclaration ( ) ) . size ( ) :', ': ""Wrong number of constructor arguments!"" ;']",['import org . apache . commons . configuration2 . AbstractConfiguration ;'],['import org . apache . commons . configuration2 . AbstractConfiguration ;'],"['protected synchronized final Map < String , Object > getParameters ( )', 'protected final synchronized Map < String , Object > getParameters ( )', 'protected synchronized final BeanDeclaration getResultDeclaration ( )', 'protected final synchronized BeanDeclaration getResultDeclaration ( )']","['import org . apache . commons . configuration2 . ex . ConfigurationRuntimeException ;', 'public enum EventSourceSupport', 'public static enum EventSourceSupport']",['import org . apache . commons . configuration2 . builder . fluent . Parameters ;'],"['import org . apache . commons . configuration2 . builder . fluent . XMLBuilderParameters ;', 'import org . apache . commons . configuration2 . builder . fluent . PropertiesBuilderParameters ;', 'import org . apache . commons . configuration2 . builder . fluent . FileBasedBuilderParameters ;']","['class ReloadingBuilderSupportListener implements EventListener < Event >', 'final class ReloadingBuilderSupportListener implements EventListener < Event >']",['import org . apache . commons . configuration2 . reloading . FileHandlerReloadingDetector ;'],"['import org . apache . commons . configuration2 . ex . ConfigurationRuntimeException ;', 'public void onEvent ( ConfigurationBuilderEvent event )', 'if ( params instanceof FileBasedBuilderProperties < ? > )', '{', 'synchronized ( CombinedConfigurationBuilder . this ) {', 'synchronized ( CombinedConfigurationBuilder . this )', 'import org . apache . commons . configuration2 . builder . DefaultParametersManager ;', 'if ( params instanceof FileBasedBuilderProperties < ? > )', 'public void onEvent ( ConfigurationBuilderEvent event ) {']",['import org . apache . commons . configuration2 . interpol . ConfigurationInterpolator ;'],"['public void onEvent ( ConfigurationBuilderEvent event ) {', 'public void onEvent ( ConfigurationBuilderEvent event )', '{']","['private static final long serialVersionUID = 20140712L ;', 'private static final long serialVersionUID = 20140712L ;']","['private static final long serialVersionUID = 20140703L ;', 'private static final long serialVersionUID = 20140703L ;']","['public static class EventListenerIterator < T extends Event > implements', 'public static final class EventListenerIterator < T extends Event > implements']","['result = 31 * result + listener . hashCode ( ) ;', 'private static final int HASH FACTOR = 31 ;', 'result = HASH FACTOR * result + listener . hashCode ( ) ;']","['if ( substitutor = = null )', 'if ( substitutor = = null )']","['if ( out instanceof VerifiableOutputStream )', 'import org . apache . commons . logging . LogFactory ;', '} . update ( ) ;', 'if ( out instanceof VerifiableOutputStream )', 'LogFactory . getLog ( FileHandler . class ) . warn ( ""Exception when closing "" + cl , e ) ;', '}', '. update ( ) ;']","['for ( DateComponentParser element : DATE PARSERS ) {', '{', 'for ( DateComponentParser element : DATE PARSERS )']","['public static final EventType < ReloadingEvent > ANY =', 'public static final EventType < ReloadingEvent > ANY =', 'new EventType < ReloadingEvent > ( Event . ANY , ""RELOAD"" ) ;', 'new EventType < ReloadingEvent > ( Event . ANY , ""RELOAD"" ) ;']",['import org . apache . commons . configuration2 . AbstractConfiguration ;'],"['public class ImmutableNode', 'public final class ImmutableNode']","['public boolean initTransaction ( ModelTransaction tx ) {', 'public boolean initTransaction ( ModelTransaction tx )', 'updateModel ( new TransactionInitializer ( ) {', '{', 'private static interface TransactionInitializer', 'private interface TransactionInitializer', 'updateModel ( new TransactionInitializer ( )', '@ Override']","['public TreeData getCurrentData ( ) {', '{', 'public TreeData getCurrentData ( )']","['if ( child = = startNode )', 'if ( child = = startNode )', 'for ( T child : children )', 'for ( T child : children )']",['@ Override'],"['import javax . servlet . ServletRequest ;', '{', 'for ( String value : values ) {', 'import javax . servlet . ServletRequest ;', 'for ( String value : values )']","['import javax . xml . parsers . SAXParser ;', 'import javax . xml . parsers . SAXParser ;', 'import javax . xml . parsers . SAXParserFactory ;', 'import javax . xml . parsers . SAXParserFactory ;']","['ImmutableNode node = EasyMock . createMock ( ImmutableNode . class ) ;', 'ImmutableNode parent = new ImmutableNode . Builder ( ) . name ( ""parent"" ) . create ( ) ;', 'ImmutableNode parent = EasyMock . createMock ( ImmutableNode . class ) ;', 'EasyMock . replay ( parentHandler ) ;', 'EasyMock . replay ( parentHandler , parent , node ) ;', 'ImmutableNode node = new ImmutableNode . Builder ( ) . name ( ""node"" ) . create ( ) ;']","['. toExternalForm ( ) , url . toExternalForm ( ) ) ;', 'Configurations configurations = new Configurations ( ) ;', 'assertEquals ( ""Wrong URL"" , ConfigurationAssert . getTestURL ( FILE NAME )', 'public void testLocateSuccess ( ) throws ConfigurationException', 'public void testLocateSuccess ( )', 'XMLConfiguration config2 = configurations . xml ( ConfigurationAssert . getTestURL ( FILE NAME ) ) ;', 'import static org . junit . Assert . assertEquals ;', 'import org . apache . commons . configuration2 . XMLConfiguration ;', 'XMLConfiguration config1 = configurations . xml ( url ) ;', 'import org . apache . commons . configuration2 . builder . fluent . Configurations ;']","['fileSystem . getOutputStream ( new File ( ""this is / < certainly > \\ \\ an#invalid# * path!"" ) ) ;', 'fileSystem . getOutputStream ( new File ( """" ) ) ;']","['hc . append ( conf ) ;', 'hc . copy ( conf ) ;', 'assertEquals ( ""String representation of a configuration"" , ""two = 2"" + lineSeparator + ""one = 1"" , ConfigurationUtils . toString ( config ) ) ;', 'ConfigurationUtils . convertToHierarchical ( config ) ;', 'public void testConvertToHierarchicalOrderOfProperties ( )', 'import org . apache . commons . configuration2 . tree . ImmutableNode ;', '@ Test', '@ SuppressWarnings ( ""unchecked"" )', '}', 'assertEquals ( ""String representation of a configuration"" , ""two = 2"" + lineSeparator + ""one = 1"" , ConfigurationUtils . toString ( config ) ) ;']","['sourceBuilder . append ( "" < key0 > < / key0 > "" ) ;', 'assertTrue ( ""Configuration has key key1"" , config . containsKey ( ""key1"" ) ) ;', 'String source = "" < configuration > < key0 > < / key0 > < key1 > , < / key1 > A < key2 > < / key2 > < key3 > < / key3 > < / configuration > "" ;', 'import org . apache . commons . configuration2 . convert . LegacyListDelimiterHandler ;', 'public void testWithOnlyComma ( ) throws Exception', '@ Test', 'import org . apache . commons . configuration2 . io . FileHandler ;', 'throws ConfigurationException', 'checkConfiguration ( create ( sourceBuilder . toString ( ) , DisabledListDelimiterHandler . INSTANCE ) ) ;', '}']","['fh . setFileLocator ( locator ) ;', '@ Test', 'import org . apache . commons . configuration2 . builder . fluent . Parameters ;', 'throws ConfigurationException', 'FileSystem fs = new DefaultFileSystem ( )', 'try', 'PropertiesConfiguration configuration = builder . getConfiguration ( ) ;', '}', '@ Override', 'import org . apache . commons . configuration2 . io . DefaultFileSystem ;']","['public FileBasedConfigurationBuilder < T > configure (', 'public ReloadingFileBasedConfigurationBuilder < T > configure (']","['import org . apache . commons . configuration2 . Configuration ;', 'import org . apache . commons . configuration2 . ImmutableConfiguration ;', 'public class BasicConfigurationBuilder < T extends Configuration > implements', 'public class BasicConfigurationBuilder < T extends ImmutableConfiguration > implements', 'ConfigurationBuilder < ? extends Configuration > wrappedBuilder ,', 'import org . apache . commons . configuration2 . ImmutableConfiguration ;', 'public static < T extends Configuration > T createBuilderConfigurationWrapper (', 'public < T extends ImmutableConfiguration > T createBuilderConfigurationWrapper (', 'private final ConfigurationBuilder < ? extends Configuration > builder ;', 'private final ConfigurationBuilder < ? extends ImmutableConfiguration > builder ;']","['getLog ( ) . warn ( msg ) ;', 'public void debug ( String msg )', 'public void warn ( String msg )', 'public void warn ( String msg , Throwable ex )', 'if ( cls = = null )', 'return getLog ( ) . isDebugEnabled ( ) ;', '}', 'getLog ( ) . info ( msg ) ;', 'return LogFactory . getLog ( cls ) ;', 'package org . apache . commons . configuration2 ;']","['private Log log ;', 'public ConfigurationLogger getLogger ( )', 'import org . apache . commons . logging . impl . NoOpLog ;', 'protected final void initLogger ( ConfigurationLogger log )', 'this . log = ( log ! = null ) ? log : new NoOpLog ( ) ;', 'this . log = ( log ! = null ) ? log : ConfigurationLogger . newDummyLogger ( ) ;', 'setLogger ( null ) ;', '}', 'public Log getLogger ( )', 'private ConfigurationLogger log ;']","['public BasicBuilderParameters setLogger ( Log log )', 'public BasicBuilderParameters setLogger ( ConfigurationLogger log )', 'import org . apache . commons . logging . Log ;', 'import org . apache . commons . configuration2 . ConfigurationLogger ;', 'T setLogger ( Log log ) ;', 'T setLogger ( ConfigurationLogger log ) ;', 'import org . apache . commons . logging . Log ;', 'import org . apache . commons . configuration2 . ConfigurationLogger ;', '. setLogger ( config . getLogger ( ) )', 'import org . apache . commons . logging . Log ;']","['private Log log ;', 'private void initLogger ( ConfigurationLogger log )', 'import org . apache . commons . logging . LogFactory ;', 'public ConfigurationLogger getLogger ( )', 'this . log = ( log ! = null ) ? log : LogFactory . getLog ( CatalogResolver . class ) ;', 'this . log = ( log ! = null ) ? log : ConfigurationLogger . newDummyLogger ( ) ;', 'setLogger ( null ) ;', '}', 'public Log getLogger ( )', 'private ConfigurationLogger log ;']","['public void setLogger ( Log logger )', 'ConfigurationLogger l = getLogger ( ) ;', 'private Log logger ;', 'public void setLogger ( ConfigurationLogger logger )', 'l . debug ( ""Error encountered evaluating "" + result , e ) ;', 'l . debug ( ""Error encountered evaluating "" + result + "" : "" + e ) ;', 'Log l = getLogger ( ) ;', 'public ConfigurationLogger getLogger ( )', 'public Log getLogger ( )', 'import org . apache . commons . configuration2 . ConfigurationLogger ;']","['fileName ) , e ) ;', '+ ""basePath = % s , fileName = % s : % s"" , basePath ,', '+ ""basePath = % s , fileName = % s . "" , basePath ,', 'fileName , e ) ) ;', 'private static final Log DEFAULT LOG = new NoOpLog ( ) ;', 'ConfigurationLogger result = log ;', 'Log result = log ;', 'public void setLogger ( ConfigurationLogger log )', 'private volatile Log log ;', 'public ConfigurationLogger getLogger ( )']","['@ Override', '@ Override', '@ Override', '@ Override', '@ Override', '@ Override', '@ Override', '@ Override', '@ Override', '@ Override']","['this . map = map ;', 'public MapConfiguration ( Map < String , ? > map )', 'public MapConfiguration ( Map < String , Object > map )', 'this . map = ( Map < String , Object > ) map ;']","['public List < Object > getList ( String key , List < Object > defaultValue )', 'list = resultList ;', 'list = defaultValue ;', 'List < Object > resultList = ( List < Object > ) defaultValue ;', 'public List < Object > getList ( String key , List < ? > defaultValue )', '@ SuppressWarnings ( ""unchecked"" )', 'return defaultValue ;', 'return resultList ;', 'public List < Object > getList ( String key , List < Object > defaultValue )', 'List < Object > resultList = ( List < Object > ) defaultValue ;']","['return handleResult ( method . invoke ( wrappedConfiguration , args ) ) ;', 'try', '}', 'catch ( InvocationTargetException e )', '{', 'import java . lang . reflect . InvocationTargetException ;', 'return handleResult ( method . invoke ( wrappedConfiguration , args ) ) ;', 'throw e . getCause ( ) ;', '@ Test', 'final String property = ""nonExistingProperty"" ;']","['inheritSettings = true ;', 'return inheritSettings ;', '}', 'boolean inheritSettings )', 'public CombinedBuilderParametersImpl setInheritSettings (', '{', 'this . inheritSettings = inheritSettings ;', 'return this ;', 'public boolean isInheritSettings ( )', '@ Override']","['public void inheritFrom ( Map < String , ? > source )', 'PROP CONVERSION HANDLER , PROP LIST DELIMITER HANDLER ,', 'protected void copyPropertiesFrom ( Map < String , ? > source , String . . . keys )', 'PROP LOGGER , PROP SYNCHRONIZER ,', 'PROP THROW EXCEPTION ON MISSING ) ;', 'for ( String key : keys )', '}', 'copyPropertiesFrom ( source , PROP BEAN HELPER , PROP CONFIGURATION DECODER ,', '""Source properties must not be null!"" ) ;', 'throw new IllegalArgumentException (']","['assertSame ( ""Wrong manager"" , manager , params . getChildDefaultParametersManager ( ) ) ;', 'params . registerChildDefaultsHandler ( BuilderParameters . class ,', 'public void testGetChildDefaultParametersManagerUndefined ( ) {', 'DefaultParametersManager manager =', 'DefaultParametersManager manager = EasyMock . createMock ( DefaultParametersManager . class ) ;', 'params . getChildDefaultParametersManager ( ) ) ;', 'manager . registerDefaultsHandler ( BuilderParameters . class , handler , FileBasedBuilderParameters . class ) ;', 'handler , FileBasedBuilderParameters . class ) ) ;', '. createMock ( DefaultParametersManager . class ) ;', 'createDefaultsHandlerMock ( ) ;']","['Map < String , Object > params )', 'public void inheritFrom ( Map < String , ? > source )', 'Map < String , Object > params , boolean createIfMissing )', 'Map < String , ? > params , boolean createIfMissing )', 'Map < String , ? > params )', 'super . inheritFrom ( source ) ;', '}', 'srcParams . getChildDefaultParametersManager ( ) ) ;', '{', 'CombinedBuilderParametersImpl srcParams = fromParameters ( source ) ;']","['Map < String , Object > params )', 'Map < String , ? > params , boolean createIfMissing )', 'Map < String , Object > params , boolean createIfMissing )', 'Map < String , ? > params )', 'public static FileBasedBuilderParametersImpl fromMap ( Map < String , Object > map )', 'public static FileBasedBuilderParametersImpl fromMap ( Map < String , ? > map )', 'public static FileHandler fromMap ( Map < String , Object > map )', 'public static FileHandler fromMap ( Map < String , ? > map )', 'public static FileLocator fromMap ( Map < String , Object > map )', 'public static FileLocator fromMap ( Map < String , ? > map )']","['if ( srcParams . getFileHandler ( ) . getEncoding ( ) ! = null )', 'srcParams . getReloadingDetectorFactory ( ) ) ;', 'public void inheritFrom ( Map < String , ? > source )', 'super . inheritFrom ( source ) ;', '}', 'if ( srcParams . getReloadingDetectorFactory ( ) ! = null )', '{', 'FileBasedBuilderParametersImpl srcParams = fromParameters ( source ) ;', 'setFileSystem ( srcParams . getFileHandler ( ) . getFileSystem ( ) ) ;', 'setLocationStrategy (']","['public void inheritFrom ( Map < String , ? > source )', 'super . inheritFrom ( source ) ;', 'import java . util . Map ;', '}', '{', '@ Override', 'copyPropertiesFrom ( source , PROP EXPRESSION ENGINE ) ;', 'parameters . get ( ""expressionEngine"" ) ) ;', 'params . setExpressionEngine ( engine ) ;', '@ Test']","['public void inheritFrom ( Map < String , ? > source )', 'super . inheritFrom ( source ) ;', 'import java . util . Map ;', '}', '{', '@ Override', 'copyPropertiesFrom ( source , PROP INCLUDES ALLOWED , PROP IO FACTORY ) ;', 'PropertiesBuilderParametersImpl params2 =', 'parameters . get ( ""includesAllowed"" ) ) ;', 'PropertiesConfiguration . IOFactory factory =']","['public void inheritFrom ( Map < String , ? > source )', 'PROP SCHEMA VALIDATION , PROP VALIDATING ) ;', 'super . inheritFrom ( source ) ;', 'import java . util . Map ;', 'copyPropertiesFrom ( source , PROP DOCUMENT BUILDER , PROP ENTITY RESOLVER ,', '}', '{', '@ Override', 'import java . util . Map ;', 'EntityResolver resolver = EasyMock . createMock ( EntityResolver . class ) ;']","['{', 'if ( currentParameters . isInheritSettings ( ) )', '}', 'params . inheritFrom ( getParameters ( ) ) ;', '. setListDelimiterHandler ( listDelimiterHandler ) . setFile ( TEST FILE ) ;', '@ Test', 'List < String > list = config . getList ( String . class , ""test / mixed / array"" ) ;', 'throws ConfigurationException', 'builder . configure ( combinedParams ,', '}']","['import org . apache . commons . configuration2 . io . ConfigurationLogger ;', 'import org . apache . commons . configuration2 . io . ConfigurationLogger ;', 'import org . apache . commons . configuration2 . io . ConfigurationLogger ;', 'import org . apache . commons . configuration2 . io . ConfigurationLogger ;', 'import org . apache . commons . configuration2 . io . ConfigurationLogger ;', 'import org . apache . commons . configuration2 . ConfigurationLogger ;', 'import org . apache . commons . configuration2 . io . ConfigurationLogger ;', 'import org . apache . commons . configuration2 . ConfigurationLogger ;', 'import org . apache . commons . configuration2 . io . ConfigurationLogger ;', 'import org . apache . commons . configuration2 . ConfigurationLogger ;']","['out . print ( "" = "" ) ;', 'for ( ImmutableNode node : getModel ( ) . getNodeHandler ( ) . getRootNode ( )', '}', 'out . print ( "" = "" ) ;', 'String key = keys . next ( ) ;', 'try', 'if ( value instanceof Collection )', '}', 'Object value = subset . getProperty ( key ) ;', 'out . flush ( ) ;']","['keys . add ( keysIterator . next ( ) ) ;', 'import org . springframework . core . env . EnumerablePropertySource ;', '}', 'public ConfigPropertySource ( String name , Configuration source ) {', 'while ( keysIterator . hasNext ( ) ) {', '@ Override', 'protected ConfigPropertySource ( String name ) {', 'import java . util . List ;', 'public Object getProperty ( String name ) {', 'package org . apache . commons . configuration2 . spring ;']","['protected ConfigPropertySource ( String name ) {', 'public ConfigPropertySource ( String name , Configuration source )', 'public String [ ] getPropertyNames ( ) {', 'public class ConfigPropertySource extends EnumerablePropertySource < Configuration >', 'public ConfigPropertySource ( String name , Configuration source ) {', 'while ( keysIterator . hasNext ( ) )', 'while ( keysIterator . hasNext ( ) ) {', 'public Object getProperty ( String name )', 'public Object getProperty ( String name ) {', 'public String [ ] getPropertyNames ( )']","['return ( compositeConfiguration ! = null ) ? ConfigurationConverter . getProperties ( compositeConfiguration ) : null ;', 'return true ;', 'return configurations ;', 'Assert . notNull ( configuration ) ;', 'public ConfigFactoryBean ( )', 'import java . net . URL ;', '}', 'public Resource [ ] getLocations ( )', 'import org . apache . commons . configuration2 . builder . fluent . Configurations ;', 'public boolean isSingleton ( )']","['public class ConfigFactoryBeanTest {', 'public class TestConfigFactoryBean {', 'public class ConfigPropertySourceTest {', 'public class TestConfigPropertySource {']","['public ConfigFactoryBean ( )', 'public ConfigurationPropertiesFactoryBean ( Configuration configuration )', 'public class ConfigFactoryBean implements InitializingBean , FactoryBean < Properties >', 'public class ConfigurationPropertiesFactoryBean implements InitializingBean , FactoryBean < Properties >', 'public ConfigFactoryBean ( Configuration configuration )', 'public ConfigurationPropertiesFactoryBean ( )', 'public class ConfigPropertySource extends EnumerablePropertySource < Configuration >', 'public ConfigurationPropertySource ( String name , Configuration source )', 'protected ConfigPropertySource ( String name )', 'public class ConfigurationPropertySource extends EnumerablePropertySource < Configuration >']","['getInterpolator ( ) ) , defaultValue ) ;', 'return convertToArray ( cls , key , defaultValue ) ;', 'getConversionHandler ( ) . toArray ( getProperty ( key ) , cls ,', 'return cls . cast ( convertToArray ( cls . getComponentType ( ) , key , defValue ) ) ;', 'return ObjectUtils . defaultIfNull (', 'getProperty ( key ) , cls , getInterpolator ( ) ) , defaultValue ) ;', 'checkDefaultValueArray ( cls , defaultValue ) ;', '}', 'checkDefaultValueArray ( cls , defaultValue ) ;', 'if ( cls . isArray ( ) )']","['return ( Color [ ] ) getArray ( Color . class , key , defaultValue ) ;', 'return get ( Calendar [ ] . class , key , defaultValue ) ;', 'return ( boolean [ ] ) getArray ( Boolean . TYPE , key , defaultValue ) ;', 'return get ( boolean [ ] . class , key , defaultValue ) ;', 'return ( Date [ ] ) getArray ( Date . class , key , defaultValue ) ;', 'return get ( Locale [ ] . class , key , defaultValue ) ;', 'return ( long [ ] ) getArray ( Long . TYPE , key , defaultValue ) ;', 'return get ( short [ ] . class , key , defaultValue ) ;', 'return ( BigDecimal [ ] ) getArray ( BigDecimal . class , key , defaultValue ) ;', 'return get ( Date [ ] . class , key , defaultValue ) ;']",['@ Deprecated'],"['return substitutor . replace ( ( String ) value ) ;', 'private static String extractVariableName ( String strValue )', 'Object resolvedValue = resolveSingleVariable ( strValue ) ;', 'private static final String VAR END = "" } "" ;', 'private Object resolveSingleVariable ( String strValue )', 'strValue . length ( ) - VAR END . length ( ) ) ;', 'return strValue . startsWith ( VAR START ) & & strValue . endsWith ( VAR END ) ;', 'private static final String VAR START = ""$ { "" ;', '}', 'if ( looksLikeSingleVariable ( strValue ) )']","['Object value = config . getProperty ( key ) ;', 'private void appendListProperty ( List < Object > dest , Configuration config ,', 'private static void appendListProperty ( List < Object > dest , Configuration config ,', 'Object value = interpolate ( config . getProperty ( key ) ) ;', 'Configuration props = new PropertiesConfiguration ( ) ;', '@ Test', 'String [ ] values = { ""a"" , ""property"" , ""with"" , ""multiple"" , ""values"" } ;', 'props . addProperty ( ""keyMultiValues"" , values ) ;', 'import static org . junit . Assert . assertArrayEquals ;', '}']","['. basePath ( getBasePath ( url ) ) . create ( ) ;', 'if ( StringUtils . isBlank ( src . getBasePath ( ) ) )', 'return fileLocator ( src ) . sourceURL ( url ) . fileName ( getFileName ( url ) )', 'fileLocatorBuilder . basePath ( getBasePath ( url ) ) ;', '}', 'if ( src . getSourceURL ( ) = = null )', 'if ( StringUtils . isBlank ( src . getFileName ( ) ) )', 'fileLocatorBuilder . fileName ( getFileName ( url ) ) ;', '{', 'fileLocatorBuilder . sourceURL ( url ) ;']","['import java . net . URL ;', 'import java . net . URL ;', 'import java . util . Properties ;', 'import java . util . Properties ;']","['for ( String key : layoutData . keySet ( ) )', 'for ( String key : getKeys ( ) )']","['import java . util . Properties ;', 'import java . util . Properties ;', 'import java . io . StringReader ;', 'import java . io . StringReader ;']","['configurationFactory . setLocations ( new Resource [ ] { new ClassPathResource ( ""testConfigurationFactoryBean . file"" ) } ) ;', 'configurationFactory . setLocations ( new Resource [ ] {', 'public void setUp ( ) {', '} ) ;', 'public void testMergeConfigurations ( ) throws Exception {', 'configurationFactory . setConfigurations ( new Configuration [ ] {', 'public void testLoadResources ( ) throws Exception {', 'public void setUp ( )', 'configurationFactory . setConfigurations ( new Configuration [ ] { one , two } ) ;', 'public void testAfterPropertiesSet ( ) throws Exception']","['return locations ;', 'return ( src ! = null ) ? src . clone ( ) : null ;', 'return configurations ;', 'this . configurations = defensiveCopy ( configurations ) ;', 'this . configurations = configurations ;', '}', 'this . locations = locations ;', '{', 'private static < T > T [ ] defensiveCopy ( T [ ] src )', 'this . locations = defensiveCopy ( locations ) ;']","['File output = new File ( ""target / test - classes / testwrite / testMultiDynamic default . xml"" ) ;', 'import org . junit . Rule ;', 'import org . junit . rules . TemporaryFolder ;', 'System . setProperty ( ""TemporaryFolder"" , folder . getRoot ( ) . getAbsolutePath ( ) ) ;', '@ Rule', 'File output = folder . newFile ( ""testMultiDynamic default . xml"" ) ;', 'public TemporaryFolder folder = new TemporaryFolder ( ) ;', 'file . createNewFile ( ) ;', 'import org . junit . Rule ;', 'URL url = new URL ( ""foo"" , """" , 0 , "" . / target / testsave - custom - url . properties"" , new FileURLStreamHandler ( ) ) ;']","['BeanHelper . setProperty ( params , ""iOFactory"" , factory ) ;', 'BeanHelper . setProperty ( params , ""IOFactory"" , factory ) ;']","[""if ( ch = = ' \\ \\ ' )"", 'private static boolean needsUnescape ( char ch )', 'out . append ( \'""\' ) ;', ""if ( ch = = 'r' )"", 'else if ( ch = = \' \\ ""\' )', 'return UNESCAPE CHARACTERS . indexOf ( ch ) > = 0 ;', ""out . append ( ' \\ '' ) ;"", 'private static final String UNESCAPE CHARACTERS = "" : # = ! \\ \\ \\ \' \\ """" ;', '}', 'out . append ( ch ) ;']","['+ ""initialized! Do not call read ( InputStream ) directly , ""', 'if ( locator = = null )', '}', '{', 'throw new ConfigurationException ( ""Load operation not properly ""', '+ "" but use a FileHandler to load a configuration . "" ) ;', 'fail ( ""No exception thrown!"" ) ;', 'assertThat ( e . getMessage ( ) , containsString ( ""FileHandler"" ) ) ;', '@ Test', 'ByteArrayInputStream bis = new ByteArrayInputStream ( content . getBytes ( ) ) ;']","['assert locator ! = null : ""Locator has not been set!"" ;', '+ ""initialized! Do not call read ( InputStream ) directly , ""', 'if ( locator = = null )', '}', '{', 'throw new ConfigurationException ( ""Load operation not properly ""', '+ "" but use a FileHandler to load a configuration . "" ) ;', 'import java . io . Reader ;', 'fail ( ""No exception thrown!"" ) ;', 'import java . io . StringWriter ;']","['if ( locator = = null )', '}', '{', '+ "" but use a FileHandler to save a configuration . "" ) ;', 'throw new ConfigurationException ( ""Save operation not properly ""', '+ ""initialized! Do not call write ( Writer ) directly , ""', 'import junitx . framework . ArrayAssert ;', '@ Test', 'import junitx . framework . ListAssert ;', 'try']","['if ( + + loadCounter = = 1 )', 'if ( !event . isBeforeUpdate ( ) & & loadCounter . get ( ) = = 0 )', 'if ( !event . isBeforeUpdate ( ) )', 'loadCounter . incrementAndGet ( ) ;', '}', 'import java . util . concurrent . atomic . AtomicInteger ;', 'if ( - - loadCounter = = 0 )', 'private final AtomicInteger loadCounter ;', 'private int loadCounter ;', 'if ( loadCounter . get ( ) = = 1 & & layoutData . isEmpty ( ) )']","['private static final String PROP IO FACTORY = ""iOFactory"" ;', 'private static final String PROP IO FACTORY = ""IOFactory"" ;', 'params . getParameters ( ) . get ( ""iOFactory"" ) ) ;', 'new FileBasedConfigurationBuilder < PropertiesConfiguration > (', 'assertEquals ( ""IOFactory not set"" , factory , parameters . get ( ""iOFactory"" ) ) ;', '. configure ( params . setIOFactory ( factory ) ) ;', '@ Test', 'PropertiesConfiguration . IOFactory factory =', 'assertEquals ( ""Wrong IO factory"" , factory , config . getIOFactory ( ) ) ;', 'ConfigurationBuilder < PropertiesConfiguration > builder =']","['childTrim . booleanValue ( ) , attrmap ) ;', 'Node removedElem = ( Node ) ref ;', 'Node removedElem = ( Node ) ref ;', 'boolean trim , Map < String , String > attrmap ,', 'private ImmutableNode createChildNodeWithValue (', 'childTrim . booleanValue ( ) , attrmap , elemRefs ) ;', 'updateElement ( element , refHandler . getValue ( node ) ) ;', 'Map < ImmutableNode , Object > refs = isSingleElementList ( elem ) ? elemRefs : null ;', 'if ( elemRefs ! = null )', 'if ( XMLListReference . isListNode ( node , refHandler ) )']","['out . print ( "" = "" ) ;', 'private void writeProperty ( PrintWriter out , String key , Object value , String separator )', 'private void writeProperty ( PrintWriter out , String key , Object value )', 'endRead ( ) ;', 'writeProperty ( out , node . getNodeName ( ) , node . getValue ( ) ) ;', 'finally', 'child . getValue ( ) ) ;', 'this . separatorUsedInOutput = separator ;', 'beginRead ( false ) ;', 'try']","['public static Properties getProperties ( Configuration config )', 'return getProperties ( ( ImmutableConfiguration ) config ) ;', '}', 'public static Properties getProperties ( Configuration config )', 'public static Properties getProperties ( ImmutableConfiguration config )', '{', 'public static void append ( Configuration source , Configuration target )', 'public static void append ( Configuration source , Configuration target )', 'public static void dump ( Configuration configuration , PrintStream out )', 'public static void dump ( Configuration configuration , PrintStream out )']","['public URI getURI ( String key )', 'return convert ( URI . class , key , null , true ) ;', '}', 'import java . net . URI ;', '{', 'return convert ( URI . class , key , defaultValue , false ) ;', '@ Override', 'public URI getURI ( String key , URI defaultValue )', 'import java . net . URI ;', 'URI getURI ( String key ) ;']","['public URL getURL ( String key )', 'public URL getURL ( String key , URL defaultValue )', 'import java . net . URL ;', '}', 'return convert ( URL . class , key , null , true ) ;', '{', '@ Override', 'return convert ( URL . class , key , defaultValue , false ) ;', 'URL getURL ( String key ) ;', 'import java . net . URL ;']","['public String toString ( ) {', 'return super . toString ( ) + "" ( "" + nodeName + "" ) "" ;', '@ Override', '}']","['return Collections . unmodifiableList ( children ) ;', 'return Collections . unmodifiableList ( children ) ;', 'return Collections . unmodifiableMap ( attributes ) ;', 'return Collections . unmodifiableMap ( attributes ) ;', '}', 'return Collections . emptyList ( ) ;', '{', 'if ( children ! = null )', 'return Collections . emptyList ( ) ;', 'if ( attributes ! = null )']","['private List < String > attributeNames ;', 'private final List < String > attributeNames ;', 'private ConfigurationNodePointer < T > parentPointer ;', 'private final ConfigurationNodePointer < T > parentPointer ;']",['@ Override'],"['return get ( URI . class , key , defaultValue ) ;', 'public URI getURI ( String key )', 'return get ( URI [ ] . class , key , defaultValue ) ;', 'return getURIList ( key , new ArrayList < URI > ( ) ) ;', '}', 'return getURIArray ( key , new URI [ 0 ] ) ;', 'import java . net . URI ;', 'public URI [ ] getURIArray ( String key )', 'public List < URI > getURIList ( String key )', '{']","['public String toString ( ) {', '{', 'public String toString ( )']","['} ;', '}']","['public List < ImmutableNode > getChildren ( final String name )', 'list . add ( node ) ;', 'return list ;', 'final List < ImmutableNode > list = new ArrayList < > ( ) ;', '}', 'if ( name = = null ) {', 'if ( name . equals ( node . getNodeName ( ) ) )', '{', 'for ( final ImmutableNode node : children )', 'ImmutableNode node = createDefaultNode ( VALUE ) ;']","['public String toString ( ) {', '@ Override', 'return super . toString ( ) + "" ( "" + getRootElementName ( ) + "" ) "" ;', '}']","['return super . toString ( ) + "" ( "" + getRootElementName ( ) + "" ) "" ;', 'return super . toString ( ) + "" ( "" + getRootElementNameInternal ( ) + "" ) "" ;']","['if ( targetNodes . size ( ) ! = 1 )', '""Passed in key must select exactly one node ( found % , d ) : % s"" , size , key ) ;', '""Passed in key must select exactly one node : "" + key ) ;', 'if ( size ! = 1 )', 'int size = targetNodes . size ( ) ;', 'super ( String . format ( message , args ) ) ;', 'public ConfigurationRuntimeException ( String message , Object . . . args )', '{', '}']","['return new ConfigurationRuntimeException ( String . format ( FMT CTOR ERROR ,', 'return new ConfigurationRuntimeException ( FMT CTOR ERROR ,', 'msg , beanClass . getName ( ) , getConstructorArgs ( data ) . toString ( ) ) ) ;', 'msg , beanClass . getName ( ) , getConstructorArgs ( data ) . toString ( ) ) ;']","['ImmutableNode leaf = new ImmutableNode . Builder ( )', 'for ( Map . Entry < String , Object > entry : map . entrySet ( ) )', '}', 'package org . apache . commons . configuration2 ;', 'String key = entry . getKey ( ) ;', 'throw new ConfigurationException ( ""Unable to load the configuration"" , e ) ;', 'Map < String , Object > map = new HashMap < String , Object > ( node . getChildren ( ) . size ( ) ) ;', 'parent . addChild ( children ) ;', 'import org . apache . commons . configuration2 . tree . ImmutableNode ;', 'if ( cNode . getChildren ( ) . isEmpty ( ) )']","['public AbstractMapBasedConfiguration ( ) {', 'new HashMap < > ( node . getChildren ( ) . size ( ) ) ;', 'Map < String , Object > map = new HashMap < String , Object > ( node . getChildren ( ) . size ( ) ) ;', 'if ( e instanceof ClassCastException )', 'ImmutableNode leaf = new ImmutableNode . Builder ( )', 'ImmutableNode . Builder subtree =', 'static void rethrowException ( Exception e ) throws ConfigurationException {', 'ImmutableNode children =', '. create ( ) ;', 'protected void load ( Map < String , Object > map )']","['protected AbstractMapBasedConfiguration ( )', 'protected AbstractYAMLBasedConfiguration ( )', 'public class AbstractMapBasedConfiguration extends BaseHierarchicalConfiguration', 'public class AbstractYAMLBasedConfiguration extends BaseHierarchicalConfiguration', 'public class JSONConfiguration extends AbstractMapBasedConfiguration', 'public class JSONConfiguration extends AbstractYAMLBasedConfiguration', 'public class YAMLConfiguration extends AbstractMapBasedConfiguration', 'public class YAMLConfiguration extends AbstractYAMLBasedConfiguration']","['if ( testSaveConf . exists ( ) )', 'import static org . junit . Assert . assertTrue ;', 'assertTrue ( testSaveConf . delete ( ) ) ;', 'import static org . junit . Assert . assertEquals ;', 'import static org . junit . Assert . * ;', 'private File testSaveConf = ConfigurationAssert . getOutFile ( ""testsave . json"" ) ;', '}', 'removeTestFile ( ) ;', 'import java . io . File ;', '{']","['initLogger ( new ConfigurationLogger ( getClass ( ) ) ) ;', '}', 'super ( c ) ;', '{', 'HierarchicalConfiguration < ImmutableNode > c )', 'protected AbstractYAMLBasedConfiguration (', 'import org . apache . commons . configuration2 . tree . ImmutableNode ;', 'public JSONConfiguration ( HierarchicalConfiguration < ImmutableNode > c )', '}', 'super ( c ) ;']","['import org . apache . commons . dbcp . BasicDataSource ;', 'import org . apache . commons . dbcp2 . BasicDataSource ;']","['public String toString ( ) {', '{', 'public String toString ( )', 'if ( XMLListReference . isListNode ( node , refHandler ) )', 'if ( XMLListReference . isFirstListItem ( node , refHandler ) )', 'if ( XMLListReference . isListNode ( newNode , refHandler ) )', 'if ( XMLListReference . isListNode ( newNode , refHandler ) )', 'if ( XMLListReference . isFirstListItem ( node , refHandler ) )', 'if ( XMLListReference . isListNode ( node , refHandler ) )', 'else if ( reference instanceof XMLListReference )']","['return !node . getChildren ( ) . isEmpty ( ) ;', 'return node . getValue ( ) = = null ;', 'section + LINE SEPARATOR + LINE SEPARATOR , writer . toString ( ) ) ;', 'final String section = "" [ EmptySection ] "" ;', 'assertEquals ( ""Wrong saved configuration"" ,', '@ Test', 'StringWriter writer = new StringWriter ( ) ;', 'throws ConfigurationException , IOException', '}', 'config . write ( writer ) ;']","['return getParent ( ) . getNodeModel ( ) ;', 'getParent ( ) . getNodeModel ( ) . getTrackedNode ( getRootSelector ( ) ) ;', 'NodeSelector selector , InMemoryNodeModelSupport parentModelSupport )', 'return super . createSubConfigurationForTrackedNode ( selector , getParent ( ) ) ;', 'ImmutableNode root =', '}', 'public InMemoryNodeModel getRootNodeModel ( )', 'return ( ( SubnodeConfiguration ) getParent ( ) ) . getRootNodeModel ( ) ;', 'return new InMemoryNodeModel ( root ) ;', '{']","['}', 'Object value )', 'new ImmutableNode . Builder ( ) . name ( key ) ;', '}', 'String key = entry . getKey ( ) ;', 'Collection < Object > values = new ArrayList < > ( ) ;', 'parent . addChild ( children ) ;', 'if ( elem instanceof Map )', 'if ( cNode . getChildren ( ) . isEmpty ( ) )', 'ImmutableNode . Builder subtree = new ImmutableNode . Builder ( ) . name ( key ) ;']","['fh . load ( url ) ;', 'finally', 'try', '}', 'locator = orgLocator ;', 'FileLocator orgLocator = locator ;', '{', 'fh . load ( url ) ;', 'public void testMultipleIncludeFiles ( ) throws ConfigurationException', 'conf . getInt ( ""property . c"" ) ) ;']","['return null ;', 'return new Variables ( variables ) ;', '@ Test', 'assertEquals ( ""Wrong variables"" , vars , lookup . getVariables ( ) ) ;', 'assertEquals ( ""Modified variables"" , vars , lookup . getVariables ( ) ) ;', 'ExprLookup . Variables vars = new ExprLookup . Variables ( ) ;', 'public void testGetVariablesDefensiveCopy ( )', '}', 'ExprLookup . Variables vars2 = lookup . getVariables ( ) ;', '{']","['result = ( String ) exp . evaluate ( createContext ( ) ) ;', 'result = ( exprResult ! = null ) ? String . valueOf ( exprResult ) : null ;', 'Object exprResult = exp . evaluate ( createContext ( ) ) ;', 'handler . load ( TEST FILE ) ;', 'lookup . lookup ( ""System . getProperty ( \'undefined . property\' ) "" ) ) ;', 'XMLConfiguration config = new XMLConfiguration ( ) ;', 'String pattern = ""System . currentTimeMillis ( ) "" ;', 'FileHandler handler = new FileHandler ( config ) ;', '@ Test', '}']","['key , cls . getName ( ) , String . valueOf ( value ) ) ) ;', 'key , cls . getName ( ) , String . valueOf ( value ) ) , cex . getCause ( ) ) ;', 'fail ( ""No conversion exception thrown!"" ) ;', '@ Test', 'public void testConversionExceptionCause ( )', 'try', 'cex . getCause ( ) instanceof NumberFormatException ) ;', '}', 'conf . get ( Integer . TYPE , ""uri . string"" ) ;', '{']","['else if ( Path . class . equals ( cls ) )', 'return ( Path ) value ;', 'return Paths . get ( ( String ) value ) ;', 'public static File toFile ( Object value ) throws ConversionException', '}', 'public static Path toPath ( Object value ) throws ConversionException', 'import java . nio . file . Paths ;', 'import java . nio . file . Path ;', '{', 'import java . io . File ;']","['import org . dbunit . dataset . csv . handlers . NoHandler ;', 'import org . dbunit . dataset . common . handlers . NoHandler ;']","['public String toString ( ) {', '@ Override', '}', 'return getClass ( ) . getSimpleName ( ) + "" [ map = "" + map + "" , trimmingDisabled = "" + trimmingDisabled + "" ] "" ;']","['updateAttributes ( refHandler . getRootNode ( ) , document . getDocumentElement ( ) ) ;', 'assertThat ( ""Encoding was not written to file"" , out . toString ( ) ,', 'checkConf . setProperty ( "" [ @ xmlns : foo ] "" , ""http : / / example . net / "" ) ;', '@ Test', 'StringWriter out = new StringWriter ( ) ;', '}', 'public void testSaveWithRootAttributes ( ) throws ConfigurationException', '. getString ( "" [ @ xmlns : ex ] "" ) ) ;', 'assertEquals ( ""Root attribute not set"" , ""http : / / example . com / "" , conf', 'containsString ( ""configuration xmlns : foo = \\ ""http : / / example . com / \\ """" ) ) ;']","['reloadingController = createReloadingController ( ) ;', 'reloadingController . resetReloadingState ( ) ;', 'return result ;', '}', 'CombinedConfiguration result = super . getConfiguration ( ) ;', '{', 'public CombinedConfiguration getConfiguration ( ) throws ConfigurationException', 'if ( reloadingController = = null )', 'reloadingController = createReloadingController ( ) ;', '@ Override']","['data . overrideBuilders ) ;', 'addChildConfiguration ( ccResult , srcDecl . get ( i ) , b ) ;', 'unionBuilders . add ( createConfigurationBuilder ( cd ) ) ;', 'ConfigurationBuilder < ? extends Configuration > b ;', 'data . unionBuilders ) ;', '}', 'overrideBuilders . add ( createConfigurationBuilder ( cd ) ) ;', 'List < ConfigurationBuilder < ? extends Configuration > > newBuilders =', '}', 'boolean createBuilders = builders . isEmpty ( ) ;']","['finally', 'if ( asInMemory )', 'public void addConfigurationFirst ( Configuration config )', 'try', 'inMemoryConfigIsChild = true ;', 'if ( !configList . contains ( config ) )', '}', '. setThrowExceptionOnMissing ( isThrowExceptionOnMissing ( ) ) ;', 'configList . add ( 0 , config ) ;', 'replaceInMemoryConfiguration ( config ) ;']","['boolean childrenFlag = hasChildren | | attributes . size ( ) > 1 ;', '}', '{', 'boolean childrenFlag = false ;', 'if ( hasChildren | | trimFlag )', 'childrenFlag = hasChildren | | attributes . size ( ) > 1 ;', 'assertEquals ( ""Wrong value"" , "" preserved "" , conf . getString ( ""spaceElement"" ) ) ;', 'assertEquals ( ""Wrong value spaceElement"" ,', '"" "" , conf . getString ( ""spaceBlankElement"" ) ) ;', '"" preserved "" , conf . getString ( ""spaceElement"" ) ) ;']","['createBuilders ? new ArrayList < > ( srcDecl . size ( ) ) : builders ;', 'List < ConfigurationBuilder < ? extends Configuration > > newBuilders ;', 'List < ConfigurationBuilder < ? extends Configuration > > newBuilders =', 'newBuilders = new ArrayList < > ( srcDecl . size ( ) ) ;', 'newBuilders = builders ;', '}', '{', 'if ( createBuilders )', 'else']","['public String toString ( ) {', '{', 'public String toString ( )', 'updateAttributes ( refHandler . getRootNode ( ) , document . getDocumentElement ( ) ) ;', 'updateAttributes ( refHandler . getRootNode ( ) , document . getDocumentElement ( ) ) ;']","['throw new ConversionException ( ""The value "" + value + "" can\'t be converted to a Pattern"" ) ;', 'else if ( value instanceof String )', 'return ( Pattern ) value ;', 'else if ( Pattern . class . equals ( cls ) )', 'return Pattern . compile ( ( String ) value ) ;', 'catch ( PatternSyntaxException e )', 'try', '}', 'if ( value instanceof Pattern )', '{']","['return ( refreshDelay ! = null ) ? new FileHandlerReloadingDetector (', 'return fileHandlerReloadingDetector ;', '( refreshDelay ! = null ) ? new FileHandlerReloadingDetector (', 'FileHandlerReloadingDetector fileHandlerReloadingDetector =', 'fileHandlerReloadingDetector . refresh ( ) ;', 'updateLastModified ( getLastModificationDate ( ) ) ;', 'public void refresh ( )', '{', '}', 'detector . isReloadingRequired ( ) ) ;']","['public void tearDown ( ) throws Exception', 'public void tearDown ( )']","['implements Cloneable , InMemoryNodeModelSupport', 'implements InMemoryNodeModelSupport']","['EventListener < ConfigurationEvent > , Cloneable', 'EventListener < ConfigurationEvent >']","['list . add ( value ) ;', 'list . add ( value ) ;', 'Object value = valueFromResult ( result , handler ) ;', 'Object value = valueFromResult ( result , handler ) ;', 'return null ;', 'return null ;', '}', '}', 'if ( value ! = null )', 'if ( value ! = null )']","['else', 'return getMatchingChildrenCount ( node , NodeNameMatchers . EQUALS , name ) ;', '{', 'return getMatchingChildrenCount ( node , NodeNameMatchers . EQUALS , name ) ;', '}', 'result = result . substring ( getSymbols ( )', 'result = result . substring ( getSymbols ( )', 'return result ;', 'return nextKeyPart ( ) ;', '}']","['}', 'e ) ;', '{', 'throw new ConfigurationException ( ""Unable to load the configuration"" ,', 'throw new ConfigurationException ( ""Unable to load the configuration"" ,', 'else', 'e ) ;', 'return result ;', 'return result ;', '}']","['import org . apache . commons . lang3 . text . StrSubstitutor ;', 'import org . apache . commons . text . lookup . StringLookup ;', 'return new StrSubstitutor ( new StrLookup < Object > ( )', 'private final StringSubstitutor substitutor ;', 'private StrSubstitutor initSubstitutor ( )', 'import org . apache . commons . text . StringSubstitutor ;', 'private final StrSubstitutor substitutor ;', 'return new StringSubstitutor ( new StringLookup ( )', 'import org . apache . commons . lang3 . text . StrLookup ;', 'private StringSubstitutor initSubstitutor ( )']","['public static void testMultipleInterpolation ( Configuration config )', 'public static void testMultipleInterpolation ( Configuration config )', 'public static Configuration testInterpolatedConfiguration (', 'public static Configuration testInterpolatedConfiguration (', 'expectedValue ) ;', 'public static void testInterpolationEscaped ( Configuration config )', 'String expectedValue = "" / base - level / first - level / second - level / third - level"" ;', 'String expectedValue = "" / base - level / first - level / second - level / third - level"" ;', 'public static void testInterpolationEscaped ( Configuration config )', '} ) ;']","['public void testInterpolationSysProperties ( )', 'public void testInterpolationSystemProperties ( )']","['import org . apache . commons . lang3 . StringEscapeUtils ;', 'import org . apache . commons . text . StringEscapeUtils ;', 'String k = StringEscapeUtils . escapeXml ( key ) ;', 'writer . println ( "" < comment > "" + StringEscapeUtils . escapeXml10 ( getHeader ( ) ) + "" < / comment > "" ) ;', 'import javax . xml . parsers . SAXParser ;', 'String v = StringEscapeUtils . escapeXml10 ( String . valueOf ( value ) ) ;', 'comment . setTextContent ( StringEscapeUtils . escapeXml ( getHeader ( ) ) ) ;', 'String k = StringEscapeUtils . escapeXml10 ( key ) ;', 'import javax . xml . parsers . SAXParserFactory ;', 'import javax . xml . parsers . SAXParser ;']","['( target ! = null ) ? target : new ArrayList < T > ( ) ;', '( target ! = null ) ? target : new ArrayList < > ( ) ;', 'elemRefs ? new HashMap < ImmutableNode , Object > ( ) : null ;', 'elemRefs ? new HashMap < > ( ) : null ;', 'Set < E > result = ( set1 ! = null ) ? set1 : new HashSet < E > ( ) ;', 'Map < K , V > result = ( map1 ! = null ) ? map1 : new HashMap < > ( ) ;', 'Collection < E > result = ( col ! = null ) ? col : new LinkedList < E > ( ) ;', '( col1 ! = null ) ? col1 : new ArrayList < > ( col2 . size ( ) ) ;', '( col1 ! = null ) ? col1 : new ArrayList < E > ( col2 . size ( ) ) ;', 'Map < K , V > result = ( map ! = null ) ? map : new HashMap < > ( ) ;']","['} ;', '}']","['new LookupTranslator ( EntityArrays . JAVA CTRL CHARS ESCAPE ( ) ) ,', 'import org . apache . commons . text . translate . AggregateTranslator ;', 'new AggregateTranslator ( new LookupTranslator ( new String [ ] [ ] {', 'import org . apache . commons . text . translate . EntityArrays ;', 'import org . apache . commons . lang3 . text . translate . UnicodeEscaper ;', 'import org . apache . commons . text . translate . CharSequenceTranslator ;', 'import org . apache . commons . lang3 . text . translate . LookupTranslator ;', 'initialMap . put ( "" \\ \\ "" , "" \\ \\ \\ \\ "" ) ;', 'import org . apache . commons . lang3 . text . translate . AggregateTranslator ;', 'import java . util . Collections ;']","['Assert . notNull ( configuration ) ;', 'Assert . notNull ( configuration , ""configuration"" ) ;', 'import org . apache . commons . lang3 . ObjectUtils ;', 'import java . util . Objects ;', '& & !ObjectUtils', '& & !Objects']","['import java . util . ArrayList ;', 'ListDelimiterHandler . NOOP TRANSFORMER ) ) ;', 'DefaultListDelimiterHandler . NOOP TRANSFORMER ) ) ;', 'import java . util . ArrayList ;', 'import java . util . Map ;', 'import java . util . List ;', 'import org . apache . commons . configuration2 . convert . DefaultListDelimiterHandler ;', 'import java . util . Map ;', 'import java . util . List ;']","['throws NamingException', 'IOException', 'public void testLoadIncludeFromClassPath ( )', 'public void testLoadIncludeFromReader ( ) throws ConfigurationException ,', 'public void testLoadIncludeFromReader ( ) throws ConfigurationException', 'public void testLoadIncludeFromClassPath ( ) throws ConfigurationException', 'public void testReadCalledDirectly ( ) throws IOException , ConfigurationException', 'public void testReadCalledDirectly ( ) throws IOException', 'throws TransformerConfigurationException , ConfigurationException', 'throws TransformerConfigurationException']","['static {', 'static', '{']","['return ( ci ! = null ) ? ci . interpolate ( value ) : value ;', 'return ci ! = null ? ci . interpolate ( value ) : value ;']","['return ( value ! = null ) ? value . toString ( ) : null ;', 'return value ! = null ? value . toString ( ) : null ;']","['return value ! = null ? value . toString ( ) : null ;', 'return Objects . toString ( getInterpolator ( ) . interpolate ( pattern ) , null ) ;', 'Object value = getInterpolator ( ) . interpolate ( pattern ) ;', 'import java . util . Objects ;']","['return ( interpolator ! = null ) ? interpolator . interpolate ( value ) : value ;', 'return interpolator ! = null ? interpolator . interpolate ( value ) : value ;']","['String resolved = ( ci ! = null ) ? String . valueOf ( ci . interpolate ( uriref ) ) : uriref ;', 'String resolved = ci ! = null ? String . valueOf ( ci . interpolate ( uriref ) ) : uriref ;']","['return ( result ! = null ) ? result . toString ( ) : null ;', 'return result ! = null ? result . toString ( ) : null ;']","['return strValue . substring ( VAR START . length ( ) ,', 'private static final int VAR END LENGTH = VAR END . length ( ) ;', 'strValue . length ( ) - VAR END . length ( ) ) ;', 'private static final int VAR START LENGTH = VAR START . length ( ) ;', 'strValue . length ( ) - VAR END LENGTH ) ;', 'return strValue . substring ( VAR START LENGTH ,']","['Object value = l . lookup ( var ) ;', 'for ( Lookup lookup : defaultLookups )', 'for ( Lookup l : defaultLookups )', 'Object value = lookup . lookup ( var ) ;']","['return ( value ! = null ) ? value . toString ( ) : null ;', 'return value ! = null ? value . toString ( ) : null ;']","['public Map < String , Lookup > getLookups ( )', 'public Map < String , Lookup > getLookups ( )', 'final InterpolatorSpecification spec )', 'final InterpolatorSpecification spec )', '} ) ;', '} ) ;', 'return Collections . unmodifiableSet ( prefixLookups . keySet ( ) ) ;', 'public void addDefaultLookup ( final Lookup defaultLookup )', 'prefixLookups . put ( prefix , lookup ) ;', 'return Collections . unmodifiableSet ( prefixLookups . keySet ( ) ) ;']","['prefix = prfx ;', 'this . lookup = lookup ;', 'lookup = look ;', 'private DefaultLookups ( final String prefix , final Lookup lookup )', 'private DefaultLookups ( final String prfx , final Lookup look )', 'this . prefix = prefix ;']","['public String getPrefix ( )', 'import org . apache . commons . text . lookup . StringLookupFactory ;', '{', 'LOCAL HOST ( ""localhost"" , new StringLookupAdapter ( StringLookupFactory . INSTANCE . localHostStringLookup ( ) ) ) ,', 'public Lookup getLookup ( )', 'public String getPrefix ( ) {', 'public Lookup getLookup ( ) {', 'this . stringLookup = Objects . requireNonNull ( stringLookup , ""stringLookup"" ) ;', 'import org . apache . commons . text . lookup . StringLookup ;', 'import java . util . Objects ;']","['return ( value = = null ) ? null : String . valueOf ( interpolate ( value ) ) ;', 'return value = = null ? null : String . valueOf ( interpolate ( value ) ) ;']","['return ( result = = null ) ? null : result . toString ( ) ;', 'return result = = null ? null : result . toString ( ) ;']","['propertyName = StringEscapeUtils . unescapeJava ( name ) ;', 'CharSequenceTranslator translator ;', 'private static String [ ] doParseProperty ( final String line )', 'private static final Map < CharSequence , CharSequence > JUP CHARS ESCAPE ;', ""else if ( ch = = 'b' )"", 'if ( buffer . length ( ) > 0 )', 'final String [ ] property = doParseProperty ( line ) ;', 'public static class JupPropertiesReader extends PropertiesReader', 'propertyValue = unescapeJava ( value ) ;', '@ Override']","['private final String prefix ;', 'public enum DefaultLookups {', 'private DefaultLookups ( final String prefix , final Lookup lookup )', 'JAVA ( ""java"" , new StringLookupAdapter ( StringLookupFactory . INSTANCE . javaPlatformStringLookup ( ) ) ) ,', 'return lookup ;', 'PROPERTIES ( ""properties"" , new StringLookupAdapter ( StringLookupFactory . INSTANCE . propertiesStringLookup ( ) ) ) ,', 'SYSTEM PROPERTIES ( ""sys"" , new SystemPropertiesLookup ( ) ) ,', 'private DefaultLookups ( final String prefix , final Lookup lookup ) {', 'ENVIRONMENT ( ""env"" , new EnvironmentLookup ( ) ) ,', 'URL ( ""url"" , new StringLookupAdapter ( StringLookupFactory . INSTANCE . urlStringLookup ( ) ) ) ,']","['BASE64 ( ""base64"" , new StringLookupAdapter ( StringLookupFactory . INSTANCE . base64StringLookup ( ) ) ) ,', 'BASE64 DECODER ( ""base64Decoder"" , new StringLookupAdapter ( StringLookupFactory . INSTANCE . base64StringLookup ( ) ) ) ,']","['@ Deprecated', '@ Deprecated', 'private EnvironmentLookup lookup ;', 'lookup = DefaultLookups . ENVIRONMENT . getLookup ( ) ;', 'lookup = new EnvironmentLookup ( ) ;', 'private Lookup lookup ;', 'lookup = new SystemPropertiesLookup ( ) ;', 'private Lookup lookup ;', 'private SystemPropertiesLookup lookup ;', 'lookup = DefaultLookups . SYSTEM PROPERTIES . getLookup ( ) ;']","['public Class getObjectType ( )', 'public Class < ? > getObjectType ( )']","['return resultSet ;', 'return resultSet = initStatement ( sql , nameCol , params ) . executeQuery ( ) ;', 'resultSet = initStatement ( sql , nameCol , params ) . executeQuery ( ) ;']","['openResultSet ( String . format ( SQL GET PROPERTY ,', 'openResultSet ( String . format ( SQL GET PROPERTY ,', 'return keys ;', 'return keys ;', 'return rs . next ( ) ? Integer . valueOf ( rs . getInt ( 1 ) ) : null ;', 'return rs . next ( ) ? Integer . valueOf ( rs . getInt ( 1 ) ) : null ;', 'final ResultSet rs =', 'try ( final ResultSet rs = openResultSet (', 'final ResultSet rs = openResultSet ( String . format (', 'SQL GET KEYS , keyColumn , table ) , true ) )']","['if ( configurationNameColumn ! = null )', 'if ( configurationNameColumn ! = null )', 'final PreparedStatement ps = initStatement ( String . format (', 'return null ;', 'return null ;', 'pstmt . executeUpdate ( ) ;', 'pstmt . executeUpdate ( ) ;', 'ps . executeUpdate ( ) ;', 'SQL CLEAR PROPERTY , table , keyColumn ) , true , key ) ;', '}']","['int res = - 1 ;', 'int res = - 1 ;', 'finally', 'final StringBuffer sb = new StringBuffer ( 1000 ) ;', 'final StringBuffer sb = new StringBuffer ( 1000 ) ;', 'try ( Statement statement = connection . createStatement ( ) )', 'statement . close ( ) ;', 'try ( final FileReader fr = new FileReader ( fileName ) ) {', 'try', 'sb . append ( fileBuf , 0 , res ) ;']","['final Map < String , Lookup > lookups = new HashMap < > ( ) ;', 'final Map < String , Lookup > lookups = new HashMap < > ( DefaultLookups . values ( ) . length ) ;', 'LOCAL HOST ( ""localhost"" , new StringLookupAdapter ( StringLookupFactory . INSTANCE . localHostStringLookup ( ) ) ) ,', 'CONST ( StringLookupFactory . KEY CONST , new StringLookupAdapter ( StringLookupFactory . INSTANCE . constantStringLookup ( ) ) ) ,', 'JAVA ( ""java"" , new StringLookupAdapter ( StringLookupFactory . INSTANCE . javaPlatformStringLookup ( ) ) ) ,', 'ENVIRONMENT ( StringLookupFactory . KEY ENV ,', 'PROPERTIES ( ""properties"" , new StringLookupAdapter ( StringLookupFactory . INSTANCE . propertiesStringLookup ( ) ) ) ,', 'new StringLookupAdapter ( StringLookupFactory . INSTANCE . base64EncoderStringLookup ( ) ) ) ,', 'FILE ( ""file"" , new StringLookupAdapter ( StringLookupFactory . INSTANCE . fileStringLookup ( ) ) ) ,', 'DATE ( StringLookupFactory . KEY DATE , new StringLookupAdapter ( StringLookupFactory . INSTANCE . dateStringLookup ( ) ) ) ,']","['}', 'paramTypes [ i ] = PRIMITIVE TYPES . get ( paramTypeNames [ i ] ) ;', 'if ( paramTypeNames ! = null )', 'primitiveTypes . put ( ""double"" , double . class ) ;', 'catch ( ClassNotFoundException e )', 'primitiveTypes . put ( ""long"" , long . class ) ;', 'format ( ""class \' % s\' cannot be load"" , paramTypeNames [ i ] ) ) ;', 'PRIMITIVE TYPES = Collections . unmodifiableMap ( primitiveTypes ) ;', 'reportError ( ""createObject ( ) . usingConstructor ( Class < ? > [ ] ) "" , ""NULL parametersTypes not allowed"" ) ;', 'if ( PRIMITIVE TYPES . containsKey ( paramTypeNames [ i ] ) )']","['this . adaptedClassLoader = adaptedClassLoader ;', 'private final ClassLoader adaptedClassLoader ;', 'return adaptedClassLoader . loadClass ( name ) ;', 'return adaptedClassLoader ;', 'public BinderClassLoader ( ClassLoader adaptedClassLoader )', 'PRIMITIVE TYPES = Collections . unmodifiableMap ( primitiveTypes ) ;', 'protected synchronized Class < ? > loadClass ( String name , boolean resolve )', '{', 'primitiveTypes . put ( ""float"" , float . class ) ;', 'return PRIMITIVE TYPES . get ( name ) ;']","['result = stackAction . onPop ( this , stackName , result ) ;', '}', 'return result ;', 'popped = stackAction . onPop ( this , stackName , popped ) ;', 'T result = null ;', 'catch ( EmptyStackException e )', 'result = this . < T > npeSafeCast ( namedStack . pop ( ) ) ;', '{', 'if ( stackAction ! = null )', 'log . warn ( ""Empty stack ( returning null ) "" ) ;']","['String realClassName = className ;', 'realClassName = value ;', 'Class clazz = null ;', 'clazz = ctxLoader . loadClass ( realClassName ) ;', 'digester . log ( ""Pop "" + top . getClass ( ) . getName ( ) ) ;', 'if ( attributeName ! = null ) {', 'import org . xml . sax . AttributeList ;', 'digester . log ( ""New "" + realClassName ) ;', 'className = null ;', 'public void end ( ) throws Exception {']","['digester . push ( new Row ( ) ) ;', 'getDigester ( ) . push ( new Row ( ) ) ;', 'Row row = ( Row ) digester . pop ( ) ;', 'Row row = getDigester ( ) . pop ( ) ;', 'Table table = ( Table ) digester . peek ( ) ;', 'Table table = getDigester ( ) . peek ( ) ;']",['@ Override'],"['private java . sql . Connection conn ;', 'import java . sql . Connection ;', 'public RowInserterRule ( java . sql . Connection conn ) {', 'private Connection conn ;', 'public RowInserterRule ( Connection conn ) {']","['public class RowInserterRule extends org . apache . commons . digester3 . Rule {', 'public class RowInserterRule extends Rule {', 'import org . apache . commons . digester3 . Rule ;']","['if ( args . length ! = 1 ) {', 'System . out . println ( ""Error parsing input file : "" + se . getMessage ( ) ) ;', 'public class Main {', 'catch ( java . io . IOException ioe )', 'try {', 'public static void main ( String [ ] args )', 'System . exit ( - 1 ) ;', 'try', 'System . out . println ( ""Usage : java Main example . xml"" ) ;', '}']","['private LinkedList columns = new LinkedList ( ) ;', 'private LinkedList < Column > columns = new LinkedList < Column > ( ) ;', 'public List getColumns ( )', 'public List < Column > getColumns ( )', 'for ( Iterator i = row . getColumns ( ) . iterator ( ) ; i . hasNext ( ) ; )', 'Column column = i . next ( ) ;', 'Row . Column column = ( Row . Column ) i . next ( ) ;', 'for ( Iterator < Column > i = row . getColumns ( ) . iterator ( ) ; i . hasNext ( ) ; )', 'import org . apache . commons . digester3 . examples . api . dbinsert . Row . Column ;']","['java . io . File srcfile = new java . io . File ( filename ) ;', 'import java . sql . Connection ;', 'java . sql . Connection connection = null ;', 'import org . xml . sax . SAXException ;', 'catch ( java . io . IOException ioe )', 'import java . io . IOException ;', 'catch ( org . xml . sax . SAXException se )', 'Connection connection = null ;', 'catch ( IOException ioe )', 'import java . io . File ;']","['package org . apache . commons . digester3 . examples . api . documentmarkup ;', 'package org . apache . commons . digester3 . examples . api . documentmarkup ;', 'package org . apache . commons . digester3 . examples . api . documentmarkup ;', 'package org . apache . commons . digester3 . examples . api . documentmarkup ;']",['@ Override'],"['Object target = digester . peek ( 0 ) ;', 'Object target = getDigester ( ) . peek ( 0 ) ;']","['public class Main {', 'System . out . println ( ""Started . "" ) ;', 'public void addItalic ( String text ) {', 'public static void main ( String [ ] args )', 'public void run ( ) throws Exception {', 'System . out . println ( ""And the merged text for the p element is [ "" + text + "" ] "" ) ;', 'SetTextSegmentRule r = new SetTextSegmentRule ( ""addSegment"" ) ;', 'public void addItalic ( String text )', 'public void addAllText ( String text ) {', 'System . out . println ( ""Text segment : [ "" + text + "" ] "" ) ;']","['d . parse ( new java . io . StringReader ( in ) ) ;', 'd . parse ( new StringReader ( in ) ) ;', 'import java . io . StringReader ;']","['Class paramTypes [ ] = new Class [ ] { String . class } ;', 'Class < ? > paramTypes [ ] = new Class [ ] { String . class } ;']","['{', 'public Stack < List < Rule > > getMatches ( )', '}', 'return matches ;']","['Rule r = ( Rule ) parentMatches . get ( i ) ;', 'List < Rule > parentMatches = getMatches ( ) . peek ( ) ;', 'List parentMatches = ( List ) matches . peek ( ) ;', 'Rule r = parentMatches . get ( i ) ;']","['package org . apache . commons . digester3 . examples . plugins . pipeline ;', 'package org . apache . commons . digester3 . examples . plugins . pipeline ;', 'package org . apache . commons . digester3 . examples . plugins . pipeline ;', 'package org . apache . commons . digester3 . examples . plugins . pipeline ;', 'package org . apache . commons . digester3 . examples . plugins . pipeline ;']","['if ( caseType . equalsIgnoreCase ( ""upper"" ) )', 'implements Transform', 'public class CaseTransform implements Transform {', 'if ( caseType . equalsIgnoreCase ( ""upper"" ) )', 'public String transform ( String s ) {', 'if ( toLower )', 'public void setCase ( String caseType ) {', 'else', 'else', '{']","['else', '{', 'return s . toUpperCase ( ) ;', '}', 'return s . toUpperCase ( ) ;']","['private LinkedList transforms = new LinkedList ( ) ;', 'Transform t = i . next ( ) ;', 'for ( Iterator i = transforms . iterator ( ) ; i . hasNext ( ) ; )', 'private LinkedList < Transform > transforms = new LinkedList < Transform > ( ) ;', 'Transform t = ( Transform ) i . next ( ) ;', 'for ( Iterator < Transform > i = transforms . iterator ( ) ; i . hasNext ( ) ; )']","['{', '}']","['StringBuilder buf2 = buf . replace ( idx , idx + from . length ( ) , to ) ;', 'buf . replace ( idx , idx + from . length ( ) , to ) ;']","['pipeline = ( Pipeline ) digester . parse ( configFile ) ;', 'pipeline = digester . parse ( configFile ) ;']","['package org . apache . commons . digester3 . rss ;', 'package org . apache . commons . digester3 . rss ;', 'package org . apache . commons . digester3 . rss ;', 'package org . apache . commons . digester3 . rss ;', 'package org . apache . commons . digester3 . rss ;', 'package org . apache . commons . digester3 . rss ;', 'package org . apache . commons . digester3 . rss ;', 'package org . apache . commons . digester3 . rss ;', 'package org . apache . commons . digester3 . rss ;', 'package org . apache . commons . digester3 . rss ;']","['protected ArrayList items = new ArrayList ( ) ;', 'protected ArrayList < String > skipHours = new ArrayList < String > ( ) ;', 'protected ArrayList skipHours = new ArrayList ( ) ;', 'protected ArrayList < Item > items = new ArrayList < Item > ( ) ;', 'protected ArrayList skipDays = new ArrayList ( ) ;', 'protected ArrayList < String > skipDays = new ArrayList < String > ( ) ;']","['public Object parse ( InputStream input ) throws IOException , SAXException {', 'public < T > T parse ( String uri ) throws IOException , SAXException {', 'public Object parse ( String uri ) throws IOException , SAXException {', '@ Override', 'public Object parse ( InputSource input ) throws IOException , SAXException {', 'public < T > T parse ( InputSource input ) throws IOException , SAXException {', 'public < T > T parse ( InputStream input ) throws IOException , SAXException {']","['public Object parse ( File file ) throws IOException , SAXException {', 'public < T > T parse ( File file ) throws IOException , SAXException {']","['private static final long serialVersionUID = - 7358941908590407568L ;', 'private static final long serialVersionUID = 7651966908064015194L ;', 'private static final long serialVersionUID = - 2535241576243936839L ;', 'private static final long serialVersionUID = - 147615076863607237L ;']","['return ( ( Item [ ] ) this . items . toArray ( items ) ) ;', 'return this . skipHours . toArray ( skipHours ) ;', ';', 'return this . items . toArray ( items ) ;', 'return ( ( String [ ] ) this . skipDays . toArray ( skipDays ) ) ;', 'return this . skipDays . toArray ( skipDays ) ;', 'return ( ( String [ ] ) this . skipHours . toArray ( skipHours ) ) ;']","['public void render ( Writer writer ) {', 'public void setLanguage ( String language )', 'writer . println ( "" < / rss > "" ) ;', 'if ( image ! = null )', 'public void render ( PrintWriter writer ) {', 'return this . skipHours . toArray ( skipHours ) ;', 'public Item [ ] findItems ( ) {', 'for ( int i = 0 ; i < skipDays . length ; i + + )', 'return ( this . docs ) ;', 'writer . print ( "" encoding = \\ """" ) ;']","['return ( super . parse ( uri ) ) ;', 'return ( super . < T > parse ( file ) ) ;', 'return ( super . parse ( input ) ) ;', 'return ( super . < T > parse ( uri ) ) ;', 'return ( super . parse ( file ) ) ;', 'return ( super . < T > parse ( input ) ) ;']","['package org . apache . commons . digester3 . examples . xmlrules . addressbook ;', 'package org . apache . commons . digester3 . examples . xmlrules . addressbook ;', 'package org . apache . commons . digester3 . examples . xmlrules . addressbook ;', 'package org . apache . commons . digester3 . examples . xmlrules . addressbook ;']",['@ Override'],"['public void print ( java . io . PrintStream out , int indentAmount ) {', 'import java . io . PrintStream ;', 'public void print ( PrintStream out , int indentAmount ) {']","['for ( Iterator i = people . iterator ( ) ; i . hasNext ( ) ; ) {', 'LinkedList < Person > people = new LinkedList < Person > ( ) ;', 'Person p = ( Person ) i . next ( ) ;', 'Person p = i . next ( ) ;', 'LinkedList people = new LinkedList ( ) ;', 'for ( Iterator < Person > i = people . iterator ( ) ; i . hasNext ( ) ; ) {', 'String type = ( String ) i . next ( ) ;', 'String address = emails . get ( type ) ;', 'for ( Iterator i = addresses . iterator ( ) ; i . hasNext ( ) ; ) {', 'for ( Iterator < String > i = emails . keySet ( ) . iterator ( ) ; i . hasNext ( ) ; ) {']","['return zip ;', 'return zip ;', 'return city ;', 'for ( ; indentAmount > 0 ; - - indentAmount )', 'public String toString ( ) {', 'public void setType ( String type )', 'out . println ( type ) ;', 'return city ;', '}', 'sb . append ( "" "" + city + "" "" + state + "" "" + zip + "" \\ n"" ) ;']","['System . out . println ( ""Unable to find rules file . "" ) ;', 'protected void loadRules ( )', 'import org . apache . commons . digester3 . Digester ;', 'loadXMLRules ( rulesfileName ) ;', '}', 'final String rulesfileName = args [ 0 ] ;', 'import org . apache . commons . digester3 . xmlrules . DigesterLoader ;', 'import org . apache . commons . digester3 . Digester ;', 'String rulesfileName = args [ 0 ] ;', '}']","['import java . net . URL ;', 'import org . xml . sax . SAXException ;', 'catch ( org . xml . sax . SAXException se )', 'import java . io . IOException ;', 'catch ( java . io . IOException ioe )', 'catch ( IOException ioe )', 'java . io . File srcfile = new java . io . File ( datafileName ) ;', 'import java . io . File ;', 'catch ( SAXException se )', 'File srcfile = new java . io . File ( datafileName ) ;']","['public String getContent ( )', 'import java . net . URL ;', '}', 'public void setUpdated ( Date updated )', 'this . content = content ;', 'public void setContent ( String content )', 'public void setId ( String id )', '@ Override', 'public String getTitle ( )', 'package org . apache . commons . digester3 . edsl . atom ;']","['return authors ;', 'import java . net . URL ;', '}', 'public void setUpdated ( Date updated )', 'return entries ;', 'public void setId ( String id )', '@ Override', 'public String getTitle ( )', 'package org . apache . commons . digester3 . edsl . atom ;', 'public List < String > getAuthors ( )']","['extends AbstractRulesModule', '}', 'forPattern ( ""feed / author / name"" ) . callMethod ( ""addAuthor"" ) . usingElementBodyAsArgument ( ) ;', '. setNext ( ""addEntry"" ) ;', 'forPattern ( ""feed / entry / updated"" ) . setBeanProperty ( ) ;', '@ Override', 'package org . apache . commons . digester3 . edsl . atom ;', 'protected void configure ( )', 'import org . apache . commons . digester3 . binder . AbstractRulesModule ;', 'public final class AtomRulesModule']","['System . out . println ( ""Error parsing input file : "" + se . getMessage ( ) ) ;', 'public final class Main', 'public static void main ( String [ ] args )', 'try', '}', 'System . exit ( - 1 ) ;', 'package org . apache . commons . digester3 . edsl . atom ;', 'String filename = args [ 0 ] ;', 'if ( args . length ! = 1 )', 'catch ( IOException ioe )']","['dateConverter . setPatterns ( new String [ ] { ""yyyy - MM - dd\'T\'HH : mm"" } ) ;', 'import java . util . Date ;', 'import org . apache . commons . beanutils . ConvertUtils ;', 'import org . apache . commons . beanutils . converters . DateConverter ;', 'DateConverter dateConverter = new DateConverter ( ) ;', 'ConvertUtils . register ( dateConverter , Date . class ) ;']","['+ content + "" ] "" ;', '+ content + "" ] \\ n"" ;']","['forPattern ( ""feed / entry / content"" ) . setBeanProperty ( ) ;']","['public String getContent ( )', '@ ObjectCreate ( pattern = ""feed / entry"" )', 'import java . net . URL ;', '}', '+ content + "" ] \\ n"" ;', 'public void setUpdated ( Date updated )', 'this . content = content ;', 'import org . apache . commons . digester3 . annotations . rules . SetProperty ;', 'public void setContent ( String content )', 'public void setId ( String id )']","['System . out . println ( ""Error parsing input file : "" + se . getMessage ( ) ) ;', 'bindRulesFrom ( Feed . class ) ;', 'public final class Main', 'public static void main ( String [ ] args )', 'try', '}', 'System . exit ( - 1 ) ;', 'import org . apache . commons . beanutils . ConvertUtils ;', '@ Override', 'String filename = args [ 0 ] ;']","['package org . apache . commons . digester3 . binder ;', 'protected LinkedRuleBuilder forPattern ( String pattern )', 'extends AbstractRulesModule', 'return super . forPattern ( pattern ) . withNamespaceURI ( namespaceURI ) ;', '}', 'public AbstractNamespaceUIRIBasedRulesModule ( / * @ Nullable * / String namespaceURI )', 'public abstract class AbstractNamespaceUIRIBasedRulesModule', '{', 'private final String namespaceURI ;', '@ Override']","['return o ;', 'return o ;', 'else', '{', '}']","['assertFalse ( obj4 = = d . peek ( 0 ) ) ;', 'assertNotSame ( obj4 , d . peek ( 0 ) ) ;', 'import static org . junit . Assert . assertNotSame ;']","['if ( rulesModules = = null | | rulesModules . isEmpty ( ) )', 'private DigesterLoader ( Iterable < RulesModule > rulesModules )', 'private final Collection < RulesModule > rulesModules ;', 'private final Iterable < RulesModule > rulesModules ;', 'import java . util . Collection ;', 'if ( rulesModules = = null )', 'throw new DigesterLoadingException ( ""At least one RulesModule has to be specified"" ) ;', 'throw new DigesterLoadingException ( ""RulesModule has to be specified"" ) ;', 'public static DigesterLoader newLoader ( Collection < RulesModule > rulesModules )', 'public static DigesterLoader newLoader ( Iterable < RulesModule > rulesModules )']","['String fileName = attributes . getValue ( ""path"" ) ;', 'String fileName = attributes . getValue ( ""url"" ) ;']","['this . mainBinder ,', 'return addProvider ( new BeanPropertySetterBuilder ( keyPattern , namespaceURI , mainBinder , this ) ) ;', 'this ) ) ;', 'return addProvider ( new BeanPropertySetterBuilder ( this . keyPattern ,', 'this . namespaceURI ,']","['String realClassName = className ;', 'String realClassName = className ;', 'String value = attributes . getValue ( attributeName ) ;', 'String value = attributes . getValue ( attributeName ) ;', '}', 'this . clazz = clazz ;', 'getDigester ( ) . getLogger ( ) . debug ( "" [ ObjectCreateRule ] { "" + getDigester ( ) . getMatch ( ) + "" } New ""', 'Class < ? > clazz = this . clazz ;', 'Class < ? > clazz = getDigester ( ) . getClassLoader ( ) . loadClass ( realClassName ) ;', 'protected Class < ? > clazz = null ;']","[""while ( ( parentLastIndex = tempParentPattern . lastIndexOf ( ' / ' ) ) > - 1 & & recList = = null )"", 'recList = this . cache . get ( tempParentPattern + "" / * / "" + pattern . substring ( lastIndex + 1 ) ) ;', 'String tempParentPattern = parentPattern ;', '}', 'if ( recList ! = null )', 'int parentLastIndex = - 1 ;', 'List < Rule > recList = null ;', '{', 'else', 'universalList . addAll ( recList ) ;']","['nodeProvider . ofType ( NodeType . ELEMENT ) ;', 'nodeType ) ) ;', 'import org . apache . commons . digester3 . binder . LinkedRuleBuilder ;', '}', 'String nodeType = attributes . getValue ( ""type"" ) ;', '@ Override', 'import org . xml . sax . Attributes ;', 'import org . apache . commons . digester3 . binder . NodeCreateRuleProvider . NodeType ;', 'final class NodeCreateRule', 'else if ( ""fragment"" . equals ( nodeType ) )']","['private final Substitutor a ;', 'public CompoundSubstitutor ( Substitutor a , Substitutor b )', 'return b . substitute ( a . substitute ( attributes ) ) ;', 'return b . substitute ( a . substitute ( bodyText ) ) ;', 'private final Substitutor b ;', 'this . a = a ;', '}', '@ Override', 'import org . xml . sax . Attributes ;', 'if ( b = = null )']","['getXMLReader ( ) . parse ( input ) ;', 'return ( this . < T > parse ( createInputSourceFromURL ( uri ) ) ) ;', 'InputSource is = new InputSource ( reader ) ;', 'return ( this . < T > parse ( input ) ) ;', 'configure ( ) ;', 'return ( this . < T > parse ( new InputSource ( reader ) ) ) ;', 'InputSource is = new InputSource ( input ) ;', 'return ( this . < T > parse ( new InputSource ( input ) ) ) ;', 'getXMLReader ( ) . parse ( is ) ;', 'return ( this . < T > parse ( createInputSourceFromURL ( url ) ) ) ;']","['sb . append ( propertyName ) ;', 'text ) ) ;', 'getDigester ( ) . getLogger ( ) . debug ( "" [ BeanPropertySetterRule ] { "" + getDigester ( ) . getMatch ( ) + "" } Set ""', 'getDigester ( ) . getMatch ( ) ,', '+ top . getClass ( ) . getName ( ) + "" property "" + property + "" with text ""', 'getDigester ( ) . getLogger ( ) . debug ( format ( "" [ BeanPropertySetterRule ] { % s } Set % s property % s with text % s"" ,', 'sb . append ( ""propertyName = "" ) ;', 'return format ( ""BeanPropertySetterRule [ propertyName = % s ] "" , propertyName ) ;', '+ "" } Called with text \'"" + text + ""\'"" ) ;', 'import static java . lang . String . format ;']","['List < Rule > rules = getRules ( ) . match ( namespaceURI , match ) ;', 'List < Rule > rules = getRules ( ) . match ( namespaceURI , match , localName , list ) ;', 'if ( namespace ! = null )', 'import org . xml . sax . Attributes ;', 'if ( nsUri ! = null & & !nsUri . equals ( namespace ) )', 'if ( namespaceURI ! = null )', 'public List < Rule > match ( String namespace , String pattern )', 'if ( nsUri ! = null & & !nsUri . equals ( namespaceURI ) )', 'public List < Rule > match ( String namespaceURI , String pattern , String name , Attributes attributes )', 'return true ;']","['assertEquals ( ""Peeked first item value"" , ""First Item"" , ( String ) value ) ;', 'assertEquals ( ""Remaining item value"" , ""First Item"" , value ) ;', 'assertEquals ( ""Remaining item value"" , ""First Item"" , ( String ) value ) ;', 'assertEquals ( ""Popped second item value"" , ""Second Item"" , value ) ;', 'assertEquals ( ""Popped second item value"" , ""Second Item"" , ( String ) value ) ;', 'assertEquals ( ""Peeked first item value"" , ""First Item"" , value ) ;', 'assertEquals ( ""Peeked second item value"" , ""Second Item"" , ( String ) value ) ;', 'assertEquals ( ""Peeked second item value"" , ""Second Item"" , value ) ;']","['protected String namespaceURI = null ;', 'extends AbstractRulesImpl', 'implements Rules', 'super . setDigester ( digester ) ;', 'return ( this . digester ) ;', '@ Override', 'return ( this . namespaceURI ) ;', 'protected void registerRule ( String pattern , Rule rule )', 'this . digester = digester ;', 'if ( this . digester ! = null )']","['public void add ( String pattern , Rule rule )', 'public final void add ( String pattern , Rule rule )', 'super . add ( pattern , rule ) ;', 'protected void registerRule ( String pattern , Rule rule )', 'public void add ( String pattern , Rule rule )']","['super . registerRule ( pattern , rule ) ;']","['attributeName ) ) ;', 'attributeName ) ) ;']","['public abstract class AbstractNamespaceUIRIBasedRulesModule', 'public abstract class AbstractNamespaceURIBasedRulesModule', 'public AbstractNamespaceUIRIBasedRulesModule ( / * @ Nullable * / String namespaceURI )', 'public AbstractNamespaceURIBasedRulesModule ( / * @ Nullable * / String namespaceURI )']","['getXMLReader ( ) . parse ( input ) ;', 'getXMLReader ( ) . parse ( input ) ;', 'throw e ;', 'String systemId = input . getSystemId ( ) ;', 'try', 'catch ( SAXException e )', '}', 'import static java . lang . String . format ;', '{', 'log . error ( format ( ""An error occurred while parsing XML from \' % s\' , see nested exceptions"" , systemId ) ,']","['this ( ( String ) null ) ;', 'import org . xml . sax . Attributes ;', 'private final String propertyName ;', 'this . propertyNameFromAttribute = propertyNameFromAttribute ;', 'private String propertyNameFromAttribute ;', 'getDigester ( ) . getLogger ( ) . warn ( format ( "" [ BeanPropertySetterRule ] { % s } Attribute \' % s\' not found in matching element \' % s\'"" ,', 'public void setPropertyNameFromAttribute ( String propertyNameFromAttribute )', 'public void begin ( String namespace , String name , Attributes attributes )', 'if ( propertyNameFromAttribute ! = null )', 'getDigester ( ) . getMatch ( ) , propertyNameFromAttribute , name ) ) ;']","['public boolean isFlag ( )', '@ Test', 'throws IllegalArgumentException , IllegalAccessException , InvocationTargetException , NoSuchMethodException', '}', 'import org . apache . commons . beanutils . BeanUtilsBean ;', 'import org . apache . commons . beanutils . ConvertUtils ;', 'public static class MyPropertyUtilsBean extends PropertyUtilsBean', 'digester . addObjectCreate ( ""myclass"" , MyClass . class ) ;', 'final String xml = "" < myclass flag = \'true\' / > "" ;', 'final Digester digester = new Digester ( ) ;']","['bindRule ( linkedRuleBuilder , methodName , paramType ) ;', 'protected abstract void bindRule ( LinkedRuleBuilder linkedRuleBuilder , String methodName , String paramType ,', 'protected abstract void bindRule ( LinkedRuleBuilder linkedRuleBuilder , String methodName , String paramType ) ;', 'boolean exactMatch ) ;', 'String exactMatch = attributes . getValue ( ""exactMatch"" ) ;', 'bindRule ( linkedRuleBuilder , methodName , paramType , ""true"" . equals ( exactMatch ) ) ;', 'protected void bindRule ( LinkedRuleBuilder linkedRuleBuilder , String methodName , String paramType )', 'protected void bindRule ( LinkedRuleBuilder linkedRuleBuilder , String methodName , String paramType ,', 'boolean exactMatch )', 'builder . useExactMatch ( exactMatch ) ;']","['this . fireOnBegin = fireOnBegin ;', 'if ( useExactMatch )', 'public void begin ( String namespace , String name , Attributes attributes )', 'protected abstract Object getParent ( ) ;', '}', 'public void setExactMatch ( boolean useExactMatch )', 'protected boolean useExactMatch = false ;', 'return fireOnBegin ;', 'if ( getDigester ( ) . getLogger ( ) . isDebugEnabled ( ) )', 'public AbstractMethodRule ( String methodName )']","['import org . xml . sax . Attributes ;', 'import org . xml . sax . Attributes ;', 'import org . apache . commons . digester3 . annotations . rules . SetTop ;', 'import org . apache . commons . digester3 . annotations . rules . SetTop ;', 'import org . apache . commons . beanutils . MethodUtils ;', 'import org . apache . commons . beanutils . MethodUtils ;', 'import static java . lang . String . format ;', 'import static java . lang . String . format ;', 'import org . apache . commons . digester3 . annotations . rules . SetNext ;', 'import org . apache . commons . digester3 . annotations . rules . SetNext ;']","['import org . apache . commons . digester3 . annotations . rules . SetTop ;', 'import org . apache . commons . digester3 . annotations . rules . SetNext ;', 'import org . apache . commons . digester3 . annotations . rules . SetRoot ;']","['private void doHandle ( A methodAnnotation , Method method , Class < ? > type , boolean fireOnBegin , RulesBinder rulesBinder )', 'RulesBinder rulesBinder )', 'private void doHandle ( A methodAnnotation , Method method , Class < ? > type , boolean fireOnBegin ,']","['int propertyNameFromAttributeIndex = - 1 ;', 'int propertyNameFromAttributeIndex = attributes . getIndex ( ""propertynameFromAttribute"" ) ;', 'if ( ( propertyNameFromAttributeIndex = attributes . getIndex ( ""propertynameFromAttribute"" ) ) > = 0 )', 'if ( propertyNameFromAttributeIndex > = 0 )']","['private class RegisteredRule', 'private static class RegisteredRule']","['this . annotations = annotations ;', 'import static java . lang . System . arraycopy ;', 'this . annotations = new Annotation [ annotations . length ] ;', 'if ( parameterType = = null )', '}', 'arraycopy ( annotations , 0 , this . annotations , 0 , annotations . length ) ;', '{', 'if ( annotations = = null )', 'throw new IllegalArgumentException ( ""Argument \'annotations\' must be not null"" ) ;', 'throw new IllegalArgumentException ( ""Argument \'parameterType\' must be not null"" ) ;']","['import org . xml . sax . Attributes ;', 'import org . xml . sax . Attributes ;']","['getDigester ( ) . getMatch ( ) ,', 'getDigester ( )', 'param ) ) ;', '. getLogger ( ) . debug ( format ( "" [ CallParamRule ] { % s } Save from stack ; from stack ? % s ; object = % s"" ,', 'getDigester ( ) . getLogger ( ) . debug ( format ( "" [ CallParamRule ] { % s } Save from stack ; from stack ? % s ; object = % s"" ,', 'getDigester ( ) . getMatch ( ) , fromStack , param ) ) ;', 'fromStack ,']","['int parentLastIndex = - 1 ;', 'while ( parentLastIndex > - 1 & & recList = = null )', ""while ( ( parentLastIndex = tempParentPattern . lastIndexOf ( ' / ' ) ) > - 1 & & recList = = null )"", ""parentLastIndex = tempParentPattern . lastIndexOf ( ' / ' ) ;"", ""int parentLastIndex = tempParentPattern . lastIndexOf ( ' / ' ) ;""]","['Object paramValues [ ] = new Object [ paramTypes . length ] ;', 'Object [ ] paramValues = new Object [ paramTypes . length ] ;']","['this . paramClassNames [ i ] ) , e ) ;', 'digester . getLogger ( ) . error ( errorMessage , e ) ;', 'digester . getLogger ( ) . error ( format ( "" [ CallMethodRule ] Cannot load class % s"" ,', 'String errorMessage = format ( "" [ CallMethodRule ] Cannot load class % s at position % s"" ,', 'this . paramTypes [ i ] = null ;', 'throw new RuntimeException ( errorMessage , e ) ;', 'this . paramClassNames [ i ] , i ) ;']","['MethodUtils . invokeExactMethod ( parent , methodName , new Object [ ] { child } , paramTypes ) ;', 'invokeExactMethod ( parent , methodName , new Object [ ] { child } , paramTypes ) ;', 'MethodUtils . invokeMethod ( parent , methodName , new Object [ ] { child } , paramTypes ) ;', 'import static org . apache . commons . beanutils . MethodUtils . invokeExactMethod ;', 'import org . apache . commons . beanutils . MethodUtils ;', 'import static org . apache . commons . beanutils . MethodUtils . invokeMethod ;', 'invokeMethod ( parent , methodName , new Object [ ] { child } , paramTypes ) ;', 'import org . apache . commons . beanutils . BeanUtils ;', 'import static org . apache . commons . beanutils . PropertyUtils . getPropertyDescriptor ;', 'BeanUtils . setProperty ( top , property , bodyText ) ;']","['paramTypes [ 0 ] = String . class ;', 'parameters = new Object [ ] { bodyText } ;', 'paramTypes = new Class [ 1 ] ;', 'paramTypes = new Class [ ] { String . class } ;', 'parameters [ 0 ] = bodyText ;', 'parameters = new Object [ 1 ] ;']","['Object parameters [ ] = null ;', 'parameters = new Object [ 0 ] ;', 'Object [ ] parameters ;']","['import org . apache . commons . beanutils . BeanUtils ;', 'import static org . apache . commons . beanutils . PropertyUtils . getPropertyDescriptor ;', 'PropertyDescriptor desc = PropertyUtils . getPropertyDescriptor ( top , propName ) ;', 'PropertyDescriptor desc = getPropertyDescriptor ( top , propName ) ;', 'import org . apache . commons . beanutils . PropertyUtils ;', 'import static org . apache . commons . beanutils . BeanUtils . setProperty ;', 'BeanUtils . setProperty ( top , propName , text ) ;', 'setProperty ( top , propName , text ) ;', 'import org . apache . commons . beanutils . BeanUtils ;', 'boolean test = isWriteable ( top , attributeName ) ;']","['this . paramTypes [ i ] = String . class ;', 'import static java . util . Arrays . fill ;', 'for ( int i = 0 ; i < this . paramTypes . length ; i + + )', 'fill ( this . paramTypes , String . class ) ;', '{', '}']","['for ( int i = 0 ; i < this . paramTypes . length ; i + + )', 'arraycopy ( paramTypes , 0 , this . paramTypes , 0 , paramTypes . length ) ;', '}', 'import static java . lang . System . arraycopy ;', 'this . paramTypes [ i ] = paramTypes [ i ] ;', 'arraycopy ( paramTypes , 0 , this . paramClassNames , 0 , paramTypes . length ) ;', 'for ( int i = 0 ; i < this . paramClassNames . length ; i + + )', '{', 'this . paramClassNames [ i ] = paramTypes [ i ] ;']","['parameters [ i ] = null ;', 'fill ( parameters , null ) ;', '{', 'for ( int i = 0 ; i < parameters . length ; i + + )', '}']",['paramTypes = new Class < ? > [ 0 ] ;'],"['private String paramClassNames [ ] = null ;', 'public CallMethodRule ( String methodName , int paramCount , String [ ] paramTypes )', 'public CallMethodRule ( String methodName , int paramCount , String paramTypes [ ] )', 'public CallMethodRule ( int targetOffset , String methodName , int paramCount , String [ ] paramTypes )', 'public CallMethodRule ( int targetOffset , String methodName , int paramCount , Class < ? > paramTypes [ ] )', 'public CallMethodRule ( int targetOffset , String methodName , int paramCount , Class < ? > [ ] paramTypes )', 'protected Class < ? > paramTypes [ ] = null ;', 'private String [ ] paramClassNames = null ;', 'public CallMethodRule ( int targetOffset , String methodName , int paramCount , String paramTypes [ ] )', 'protected Class < ? > [ ] paramTypes = null ;']","['this . paramTypes = new Class [ paramClassNames . length ] ;', 'this . paramTypes = new Class < ? > [ paramCount ] ;', 'this . paramTypes = new Class [ paramTypes . length ] ;', 'this . paramTypes = new Class < ? > [ paramClassNames . length ] ;', 'this . paramTypes = new Class [ paramCount ] ;', 'this . paramTypes = new Class < ? > [ paramTypes . length ] ;']","['digester . getLogger ( ) . error ( errorMessage , e ) ;', 'this . paramClassNames [ i ] , i ) , e ) ;', 'String errorMessage = format ( "" [ CallMethodRule ] Cannot load class % s at position % s"" ,', 'throw new RuntimeException ( format ( "" [ CallMethodRule ] Cannot load class % s at position % s"" ,', 'throw new RuntimeException ( errorMessage , e ) ;', 'this . paramClassNames [ i ] , i ) ;']","['import java . util . concurrent . ExecutorService ;', 'throw new IllegalStateException ( ""ExecutorService not set"" ) ;', 'import java . util . concurrent . Callable ;', 'private ExecutorService executorService ;', '}', 'private < T > Future < T > asyncParse ( Callable < T > callable )', 'return Digester . this . < T > parse ( input ) ;', 'return Digester . this . < T > parse ( reader ) ;', 'public ExecutorService getExecutorService ( )', '} ) ;']","['*', '*', 'import org . apache . commons . beanutils . MethodUtils ;']","['if ( log . isWarnEnabled ( ) )', 'source . getPublicId ( ) ,', '}', 'source . getSystemId ( ) ) , e ) ;', 'log . warn ( format ( ""An error occurred while closing resource % s ( % s ) "" ,', '{']","['private boolean parentMatch ( String key , String pattern , String parentPattern )', 'parentMatched = parentMatch ( key , parentPattern ) ;', 'parentMatched = parentMatch ( key , pattern , parentPattern ) ;', 'private boolean parentMatch ( String key , String parentPattern )']","['if ( getDigester ( ) . getLogger ( ) . isTraceEnabled ( ) )', '& & exceptionIgnoredStack ! = null', 'if ( exceptionIgnoredStack . pop ( ) . booleanValue ( ) )', 'if ( getDigester ( ) . getLogger ( ) . isTraceEnabled ( ) )', '}', 'if ( ignoreCreateExceptions', '{', '& & exceptionIgnoredStack . pop ( ) . booleanValue ( ) )', 'if ( ignoreCreateExceptions & & exceptionIgnoredStack ! = null & & ! ( exceptionIgnoredStack . empty ( ) ) )', '& & !exceptionIgnoredStack . empty ( )']","['if ( pattern . equals ( key . substring ( 2 ) ) | | pattern . endsWith ( key . substring ( 1 ) ) )', 'rulesList = lookup ( namespaceURI , key ) ;', 'rulesList = lookup ( namespaceURI , key ) ;', 'if ( key . startsWith ( "" * / "" )', '}', '& & key . length ( ) > longKey . length ( ) ) )', '{', 'longKey = key ;', 'longKey = key ;', '& & ( pattern . equals ( key . substring ( 2 ) ) | | pattern . endsWith ( key . substring ( 1 ) )']","['Class < ? > moduleClass = null ;', 'moduleClass = null ;', 'Class < ? > moduleClass ;']","['}', 'if ( moduleClass ! = null & & RulesModule . class . isAssignableFrom ( moduleClass ) )', '{', 'element = stackTrace [ stackIndex ] ;', 'if ( moduleClass ! = null )', 'if ( RulesModule . class . isAssignableFrom ( moduleClass ) )', 'element = stackTrace [ stackIndex ] ;']","['}', 'addError ( ""XML rules file \' % s\' already bound"" , systemId ) ;', '{', 'if ( systemId ! = null & & !systemIds . add ( systemId ) )', 'if ( !systemIds . add ( systemId ) )', 'addError ( ""XML rules file \' % s\' already bound"" , systemId ) ;', 'if ( systemId ! = null )']","['import static org . apache . commons . beanutils . PropertyUtils . * ;', 'import static org . apache . commons . beanutils . PropertyUtils . isWriteable ;', 'import static org . apache . commons . beanutils . BeanUtils . * ;', 'import static org . apache . commons . beanutils . BeanUtils . populate ;']","['return ( this . errorHandler ) ;', 'public DigesterLoader setErrorHandler ( ErrorHandler errorHandler )', '}', 'this . errorHandler = errorHandler ;', 'digester . setErrorHandler ( errorHandler ) ;', 'if ( errorHandler ! = null )', '{', 'return this ;', 'import org . xml . sax . ErrorHandler ;', 'public ErrorHandler getErrorHandler ( )']","['Object instance = clazz . newInstance ( ) ;', 'import java . util . Formatter ;', 'Formatter formatter = new Formatter ( ) . format ( "" [ ObjectCreateRule ] { % s } New \' % s\' using constructor ( "" ,', 'Class < ? > [ ] parameterTypes = new Class < ? > [ constructorArguments . size ( ) ] ;', 'initargs [ counter ] = convert ( argumentValueAsString , parameterTypes [ counter ] ) ;', 'clazz . getName ( ) ) ;', 'formatter . format ( "" % s % s / % s"" , ( i > 0 ? "" , "" : """" ) , initargs [ i ] , parameterTypes [ i ] . getName ( ) ) ;', '}', 'parameterTypes [ counter ] = argEntry . getValue ( ) ;', 'constructorArguments . put ( attibuteName , type ) ;']","['if ( errorHandler ! = null )', 'digester . setErrorHandler ( errorHandler ) ;', '{', 'digester . setErrorHandler ( errorHandler ) ;', '}']","['digester . setDocumentLocator ( locator ) ;', '}', 'private Locator locator = null ;', 'public Locator getDocumentLocator ( )', '{', 'this . locator = locator ;', 'return this ;', 'import org . xml . sax . Locator ;', 'public DigesterLoader setDocumentLocator ( Locator locator )', 'return locator ;']","['builder . addAlias ( annotation . attributeName ( ) , element . getName ( ) ) ;', 'builder . addAlias ( annotation . attributeName ( ) ) . forProperty ( element . getName ( ) ) ;', 'addAlias ( elementName , null ) ;', 'return addAlias ( elementName ) . forProperty ( null ) ;', '}', 'reportError ( ""setProperties ( ) . addAlias ( String ) "" , ""empty \'elementName\' not allowed"" ) ;', 'reportError ( ""setNestedProperties ( ) . addAlias ( String , String ) "" , ""empty \'elementName\' not allowed"" ) ;', 'return addAlias ( elementName ) . forProperty ( propertyName ) ;', 'elementNames . put ( elementName , propertyName ) ;', '@ Deprecated']","['package org . apache . commons . digester3 . binder ;', 'private final Map < String , String > aliases ;', 'public B forProperty ( / * @ Nullable * / String propertyName )', 'this . aliases = aliases ;', 'this . alias = alias ;', 'import java . util . Map ;', '}', 'aliases . put ( alias , propertyName ) ;', 'private final B parentBuilder ;', '{']","['extends AbstractXmlRule', 'import org . apache . commons . digester3 . Rule ;', 'import org . apache . commons . digester3 . binder . LinkedRuleBuilder ;', 'builder . addAlias ( elementName ) . forProperty ( propertyName ) ;', '}', 'import org . apache . commons . digester3 . binder . NestedPropertiesBuilder ;', 'super ( targetRulesBinder , patternStack ) ;', 'public void begin ( String namespace , String name , Attributes attributes )', '{', 'extends Rule']","['import java . util . Formatter ;', 'Arrays . toString ( constructorArgumentsTypes ) ) ) ;', 'Formatter formatter = new Formatter ( ) . format ( "" [ ObjectCreateRule ] { % s } New \' % s\' using constructor ( "" ,', 'fill ( constructorArguments , null ) ;', 'Class < ? > [ ] parameterTypes = new Class < ? > [ constructorArguments . size ( ) ] ;', 'return proxyFactory . newInstance ( lazyLoader ) ;', 'initargs [ counter ] = convert ( argumentValueAsString , parameterTypes [ counter ] ) ;', 'Object [ ] constructorArguments = new Object [ constructorArgumentsTypes . length ] ;', 'clazz . getName ( ) ) ;', 'return result ;']","['import net . sf . cglib . proxy . Callback ;', 'constructorArgs [ i ] = convert ( ( String ) constructorArgs [ i ] , constructor . getParameterTypes ( ) [ i ] ) ;', 'return proxyFactory . newInstance ( lazyLoader ) ;', 'enhancer . setInterfaces ( new Class [ ] { DeferredConstructionProxy . class } ) ;', 'import static net . sf . cglib . proxy . Enhancer . isEnhanced ;', 'Object delegate ;', 'constructorArgumentsTypes ,', 'invocations . add ( new RecordedInvocation ( method , args ) ) ;', 'constructorArguments ) ;', 'constructor = null ;']","['rulesBinder . addError ( """" , element ) ;', 'rulesBinder . addError ( ""Misplaced @ ObjectCreate annotation to % s , Class and Constructor only supported"" ,', 'element ) ;']","['if ( element instanceof Method )', 'if ( element instanceof Constructor | | element instanceof Method )', 'Method method = ( Method ) element ;', 'parameterAnnotations = construcotr . getParameterAnnotations ( ) ;', 'Class < ? > [ ] parameterTypes = method . getParameterTypes ( ) ;', 'parameterAnnotations = method . getParameterAnnotations ( ) ;', 'Annotation [ ] [ ] parameterAnnotations = method . getParameterAnnotations ( ) ;', 'parameterTypes = method . getParameterTypes ( ) ;', 'Annotation [ ] [ ] parameterAnnotations ;', '}']","['import org . xml . sax . SAXParseException ;', '. callParam ( ) . fromAttribute ( ""boolean"" ) . ofIndex ( 0 )', 'import static org . junit . Assert . assertFalse ;', '. then ( )', 'import org . apache . commons . digester3 . xmlrules . FromXmlRulesModule ;', '. createObject ( ) . ofType ( TestBean . class ) . usingConstructor ( boolean . class , double . class )', '. callParam ( ) . fromAttribute ( ""double"" ) . ofIndex ( 1 ) ;']","['Class < ? > [ ] paramTypes = null ;', 'for ( int i = 0 ; i < paramTypeNames . length ; i + + )', 'if ( paramTypeNames ! = null )', 'public ObjectCreateBuilder usingConstructor ( String . . . paramTypeNames )', 'reportError ( ""createObject ( ) . usingConstructor ( String [ ] ) "" , ""NULL parametersTypes not allowed"" ) ;', 'try', 'this . reportError ( format ( ""createObject ( ) . usingConstructor ( % s ) "" ,', 'Arrays . toString ( paramTypeNames ) ) ,', '}', 'paramTypes [ i ] = classLoader . loadClass ( paramTypeNames [ i ] ) ;']","['String type = attributes . getValue ( ""type"" ) ;', 'import static java . lang . Integer . parseInt ;', 'builder . matchingAttribute ( attributeName ) ;', 'import org . apache . commons . digester3 . binder . LinkedRuleBuilder ;', '}', 'String value = attributes . getValue ( ""value"" ) ;', 'Class < ? > clazz = getDigester ( ) . getClassLoader ( ) . loadClass ( type ) ;', 'String paramNumber = attributes . getValue ( ""paramnumber"" ) ;', 'if ( value ! = null )', 'if ( attributeName ! = null )']","['createRule . setConstructorArgumentTypes ( boolean . class , double . class ) ;', 'digester . addCallParam ( ""toplevel / bean"" , 0 , ""boolean"" ) ;', 'digester . addCallParam ( ""toplevel / bean"" , 1 , ""double"" ) ;']","['import org . xml . sax . SAXParseException ;', 'createRule . setConstructorArgumentTypes ( boolean . class ) ;']","['createRule . setConstructorArgumentTypes ( boolean . class , double . class ) ;', '@ Test', 'digester . addCallParam ( ""toplevel / bean"" , 1 , ""notFound2"" ) ;', 'digester . addCallParam ( ""toplevel / bean"" , 0 , ""notFound1"" ) ;', 'import static org . junit . Assert . assertFalse ;']","['import java . util . Collections ;', 'import static java . security . AccessController . doPrivileged ;', 'import java . util . HashMap ;', 'if ( getSecurityManager ( ) ! = null )', 'public BinderClassLoader ( ClassLoader adaptedClassLoader )', 'import java . security . PrivilegedAction ;', 'import java . util . Map ;', 'public static BinderClassLoader createBinderClassLoader ( final ClassLoader adaptedClassLoader )', '} ;', 'import java . util . Collections ;']","['throw new SAXException ( format ( "" [ ObjectCreateRule ] { % s } Class \' % s\' does not have a construcor with types"" ,', 'throw new SAXException ( format ( "" [ ObjectCreateRule ] { % s } Class \' % s\' does not have a construcor with types % s"" ,']","['invocations . add ( new RecordedInvocation ( method , args ) ) ;', 'invocations . add ( new RecordedInvocation ( method , args ) ) ;', 'return result ;', 'return result ;', 'synchronized ( this ) {', 'void establishDelegate ( )', '}', '}', 'enhancer . setSuperclass ( clazz ) ;', 'enhancer . setSuperclass ( clazz ) ;']","['proxyManager . finalize ( top ) ;', '( ( DeferredConstructionCallback ) ( ( Factory ) proxy ) . getCallback ( 0 ) ) . establishDelegate ( ) ;', 'if ( argTypes [ i ] . equals ( boolean . class ) )', 'hasDefaultConstructor = getAccessibleConstructor ( clazz , new Class [ 0 ] ) ! = null ;', 'void finalize ( Object proxy ) throws Exception', 'new DeferredConstructionCallback ( constructor , constructorArguments ) ;', 'enhancer . setInterceptDuringConstruction ( false ) ;', 'DeferredConstructionCallback callback =', 'hasDefaultConstructor = getAccessibleConstructor ( clazz , new Class [ 0 ] ) ! = null ;', 'enhancer . setInterceptDuringConstruction ( false ) ;']","['public Method getInvokedMethod ( ) {', 'buffer . append ( "" ) "" ) ;', 'convert ( buffer , array [ i ] ) ;', 'for ( int i = 0 ; i < count ; i + + )', 'if ( ! ( input instanceof Object [ ] ) )', 'buffer . append ( "" , "" ) ;', 'buffer . append ( invokedMethod . getName ( ) ) ;', 'buffer . append ( "" ( "" ) ;', 'buffer . append ( "" ) { "" ) ;', 'buffer . append ( "" } "" ) ;']","['public class RecordedInvocation', 'final class RecordedInvocation']","['StringBuffer buffer = new StringBuffer ( ) ;', 'protected void convert ( StringBuilder buffer , Object input )', 'protected void convert ( StringBuffer buffer , Object input )', 'StringBuilder buffer = new StringBuilder ( ) ;']","['/ / * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *', '/ / * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *']","['clazz . getName ( ) ) ) ;', '. getLogger ( )', 'clazz . getName ( ) ,', 'clazz . getName ( ) ) ) ;', 'Arrays . toString ( constructorArgumentTypes ) ) ) ;', 'clazz . getName ( ) ,', 'getDigester ( ) . getMatch ( ) ,', 'getDigester ( )', 'throw new SAXException ( format ( "" [ ObjectCreateRule ] { % s } Class \' % s\' does not have a construcor with types % s"" ,', 'Arrays . toString ( constructorArgumentTypes ) ) ) ;']","['reportError ( ""createObject ( ) . usingDefaultConstructorArguments ( Object [ ] ) "" , ""NULL defaultConstructorArguments not allowed"" ) ;', 'reportError ( ""createObject ( ) . usingConstructor ( Class < ? > [ ] ) "" ,', 'reportError ( ""createObject ( ) . usingConstructor ( Class < ? > [ ] ) "" , ""NULL constructorArgumentTypes not allowed"" ) ;', 'reportError ( ""createObject ( ) . usingDefaultConstructorArguments ( Object [ ] ) "" ,', '""NULL constructorArgumentTypes not allowed"" ) ;', '""NULL defaultConstructorArguments not allowed"" ) ;']","['public ObjectCreateBuilder usingDefaultConstructorArguments ( Object . . . defaultConstructorArguments )', 'public ObjectCreateBuilder usingDefaultConstructorArguments ( Object . . . defaultConstructorArguments )']","['public void begin ( String namespace , String name , Attributes attributes )', 'public void begin ( String namespace , String name , Attributes attributes )']","['import static org . apache . commons . digester3 . binder . BinderClassLoader . createBinderClassLoader ;', 'Class < ? > actual = classLoader . loadClass ( name ) ;', 'public void loadFloat ( )', 'import static org . junit . Assert . assertSame ;', 'typeFound ( ""double"" , double . class ) ;', '@ Test', 'private void typeFound ( String name , Class < ? > expected )', '}', 'typeFound ( ""char"" , char . class ) ;', 'public void loadBoolean ( )']","['buffer . append ( "" ) "" ) ;', 'buffer . append ( "" ) "" ) ;', '/ / * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *', '/ / * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *', 'for ( int i = 0 ; i < count ; i + + )', 'for ( int i = 0 ; i < count ; i + + )', 'private final Method invokedMethod ;', 'private final Method invokedMethod ;', '}', '}']","['@ Override', '@ Override']","['throws SAXException , ParserConfigurationException , IOException', 'throws SAXException , IOException']","['throw e ;', 'assertEquals ( PluginInvalidInputException . class , e . getException ( ) . getClass ( ) ) ;', 'assertEquals ( PluginInvalidInputException . class , ( ( SAXParseException ) exception ) . getException ( ) . getClass ( ) ) ;', 'fail ( ""Expected SAXParseException"" ) ;', 'exception = e ;', 'assertEquals ( PluginConfigurationException . class , e . getException ( ) . getClass ( ) ) ;', 'assertNotNull ( exception ) ;', 'catch ( SAXParseException e )', 'try', 'digester . parse ( Utils . getInputStream ( this , ""test2 . xml"" ) ) ;']","['fail ( ""Digester threw Exception : "" + t ) ;', 'NamedBean root1 = digester . parse ( getInputStream ( ""Test8 . xml"" ) ) ;', 'try', 'NamedBean root1 = null ;', '}', 'catch ( Throwable t )', '{', 'root1 = digester . parse ( getInputStream ( ""Test8 . xml"" ) ) ;']","['import com . sun . mirror . util . DeclarationVisitor ;', '}', 'implements AnnotationProcessor', 'for ( TypeDeclaration declaration : declarations )', 'messager . printNotice ( "" + - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - + "" ) ;', 'public void process ( )', '{', 'import com . sun . mirror . apt . AnnotationProcessor ;', 'Collection < TypeDeclaration > declarations = environment . getTypeDeclarations ( ) ;', 'Messager messager = environment . getMessager ( ) ;']",['public abstract class Rule'],"['import org . apache . commons . digester3 . annotations . rules . CallMethod ;', 'return new HashSet < String > ( asList ( BeanPropertySetter . class . getName ( ) ,', 'public boolean process ( Set < ? extends TypeElement > annotations , RoundEnvironment environment )', 'ObjectCreate . class . getName ( ) ,', '}', 'import org . apache . commons . digester3 . annotations . rules . SetProperty ;', 'public class DigesterAnnotationsProcessor', 'SetTop . class . getName ( ) ) ) ;', 'import org . apache . commons . digester3 . annotations . rules . PathCallParam ;', '@ Override']","['return false ;', 'messager . printMessage ( OTHER , format ( ""Processing @ % s % s"" , annotation , element ) ) ;', 'return true ;', 'Messager messager = processingEnv . getMessager ( ) ;', 'for ( TypeElement annotation : annotations ) {', 'import javax . lang . model . element . Element ;', 'import static javax . tools . Diagnostic . Kind . * ;', '}', 'import static java . lang . String . format ;', '{']","['throws InterruptedException', '@ Test', 'if ( executor . getQueue ( ) . isEmpty ( ) )', 'try', 'loadXMLRules ( getClass ( ) . getResourceAsStream ( ""rules . xml"" ) ) ;', '}', 'public void setUp ( )', 'public class Digester163TestCase', 'catch ( Exception e )', 'assertEquals ( ""Author 1"" , et . getAuthor ( ) ) ;']","['in = this . getClass ( ) . getClassLoader ( ) . getResourceAsStream ( ""test . xml"" ) ;', 'private DigesterLoader loader = null ;', '}', 'dig = loader . newDigester ( ) ;', 'public void setUp ( )', 'fail ( ""Throwable caught - > "" + e . getMessage ( ) ! = null ? e . getMessage ( ) : """" ) ;', 'fail ( e . getMessage ( ) ) ;', 'exceptions . add ( e ) ;', 'ThreadPoolExecutor executor = new ThreadPoolExecutor ( MAX THREADS , MAX THREADS ,', 'final LinkedBlockingQueue < Exception > exceptions = new LinkedBlockingQueue < Exception > ( ) ;']","['import java . io . InputStream ;', '@ Test', 'finally', 'final URL url = Digester163TestCase . class . getResource ( ""test . xml"" ) ;', 'dig = loader . newDigester ( ) ;', 'import java . net . URL ;', 'in . close ( ) ;', '}', 'fail ( ""Throwable caught - > "" + e . getMessage ( ) ! = null ? e . getMessage ( ) : """" ) ;', 'assertEquals ( ""Author 1"" , et . getAuthor ( ) ) ;']","['this . rulesBinder = rulesBinder ;', 'rulesBinders . get ( ) . install ( rulesModule ) ;', 'return rulesBinder . forPattern ( pattern ) ;', 'rulesBinders . get ( ) . addError ( t ) ;', 'private RulesBinder rulesBinder ;', 'rulesBinders . get ( ) . addError ( messagePattern , arguments ) ;', 'rulesBinder . install ( rulesModule ) ;', 'return rulesBinders . get ( ) . forPattern ( pattern ) ;', 'rulesBinder . addError ( messagePattern , arguments ) ;', 'return rulesBinders . get ( ) ;']","['try', 'addError ( ""Impossible to load XML defined in the InputSource \' % s\' : % s"" , inputSource . getSystemId ( ) ,', 'XmlRulesModule xmlRulesModule = new XmlRulesModule ( new NameSpaceURIRulesBinder ( rulesBinder ( ) ) ,', 'e . getMessage ( ) ) ;', '}', '. setXIncludeAware ( true )', 'digester . parse ( source ) ;', 'try', 'if ( !inputSource . isEmpty ( ) )', 'XmlRulesModule xmlRulesModule = new XmlRulesModule ( new NameSpaceURIRulesBinder ( rulesBinder ( ) ) ,']","['return unmodifiableSet ( systemIds ) ;', 'systemIds . set ( new HashSet < String > ( ) ) ;', 'private final Set < String > systemIds = new HashSet < String > ( ) ;', 'systemIds . remove ( ) ;', 'if ( !systemIds . isEmpty ( ) )', 'private final ThreadLocal < Set < String > > systemIds = new ThreadLocal < Set < String > > ( ) ;', 'systemIds . clear ( ) ;', 'if ( systemId ! = null & & !systemIds . get ( ) . add ( systemId ) )', 'if ( systemId ! = null & & !systemIds . add ( systemId ) )', 'if ( systemIds . get ( ) ! = null )']","['rulesBinders . get ( ) . install ( rulesModule ) ;', 'this . rulesBinder = rulesBinder ;', 'rulesBinders . get ( ) . addError ( t ) ;', 'return rulesBinder . forPattern ( pattern ) ;', 'rulesBinders . get ( ) . addError ( messagePattern , arguments ) ;', 'private RulesBinder rulesBinder ;', 'return rulesBinders . get ( ) . forPattern ( pattern ) ;', 'rulesBinder . install ( rulesModule ) ;', 'return rulesBinders . get ( ) ;', 'rulesBinder . addError ( messagePattern , arguments ) ;']","['systemIds . set ( new HashSet < String > ( ) ) ;', 'return unmodifiableSet ( systemIds ) ;', 'systemIds . remove ( ) ;', 'private final Set < String > systemIds = new HashSet < String > ( ) ;', 'private final ThreadLocal < Set < String > > systemIds = new ThreadLocal < Set < String > > ( ) ;', 'if ( !systemIds . isEmpty ( ) )', 'if ( systemId ! = null & & !systemIds . get ( ) . add ( systemId ) )', 'systemIds . clear ( ) ;', 'if ( systemIds . get ( ) ! = null )', 'if ( systemId ! = null & & !systemIds . add ( systemId ) )']","['}', 'public OutputStream openBinary ( JPackage pkg , String fileName )', '@ Override', 'public void close ( )', 'this . filer = filer ;', '{', 'import javax . annotation . processing . Filer ;', 'extends CodeWriter', 'import java . io . OutputStream ;', 'import com . sun . codemodel . JPackage ;']","['messager . printMessage ( OTHER , format ( ""Processing @ % s % s"" , annotation , element ) ) ;', 'import static com . sun . codemodel . JMod . PROTECTED ;', 'return true ;', 'definedClass . javadoc ( ) . add ( format ( ""Generated by Apache Commons Digester at % s"" , new Date ( ) ) ) ;', 'for ( TypeElement annotation : annotations ) {', 'try', 'System . out . println ( format ( ""Processing @ % s % s"" , annotation , element ) ) ;', '}', 'for ( Element element : environment . getElementsAnnotatedWith ( annotation ) )', 'System . out . println ( format ( ""Processing @ % s % s"" , annotation , element ) ) ;']","['this . description = description ;', 'return true ;', 'else if ( !image . equals ( other . image ) )', 'public final class Channel', 'return ""Channel [ description = "" + description + "" , image = "" + image + "" , items = "" + items + "" , language = ""', '}', 'public void setLanguage ( String language )', 'if ( other . items ! = null )', '@ SetNext', '@ ObjectCreate ( pattern = ""rss / channel"" )']","['import org . kohsuke . MetaInfServices ;', '@ MetaInfServices ( Processor . class )', 'import javax . annotation . processing . Processor ;']","['import org . apache . commons . digester3 . binder . AbstractRulesModule ;', 'definedClass . extends ( AbstractRulesModule . class ) ;']","['JMethod method = definedClass . method ( PROTECTED , Void . class , ""configure"" ) ;', 'JMethod method = definedClass . method ( PROTECTED , parse ( codeModel , ""void"" ) , ""configure"" ) ;', 'import static com . sun . codemodel . JType . parse ;']","['String packageName = ""com . acme"" ;', 'String className = ""GeneratedRulesModule"" ;', 'String className = ""MyRules"" ;', 'String packageName = getClass ( ) . getPackage ( ) . getName ( ) ;']","['method . annotate ( Override . class ) ;', 'JDefinedClass rulesModuleClass = modulePackage . class ( FINAL | PUBLIC , className ) ;', 'JDefinedClass definedClass = modulePackage . class ( FINAL | PUBLIC , className ) ;', 'JBlock configureMethodBody = configureMethod . body ( ) ;', 'definedClass . javadoc ( ) . add ( format ( ""Generated by Apache Commons Digester at % s"" , new Date ( ) ) ) ;', 'JMethod configureMethod = rulesModuleClass . method ( PROTECTED , parse ( codeModel , ""void"" ) , ""configure"" ) ;', 'definedClass . extends ( AbstractRulesModule . class ) ;', 'import static javax . tools . Diagnostic . Kind . OTHER ;', 'import static javax . tools . Diagnostic . Kind . * ;', 'import static javax . tools . Diagnostic . Kind . ERROR ;']","['configureMethod . javadoc ( ) . add ( "" { @ inheritDoc } "" ) ;']","['message ( MANDATORY WARNING , pattern , args ) ;', 'final class FormattingMessager', '}', 'public void error ( String pattern , Object . . . args )', 'message ( NOTE , pattern , args ) ;', 'import static javax . tools . Diagnostic . Kind . WARNING ;', '{', 'public void note ( String pattern , Object . . . args )', 'import static javax . tools . Diagnostic . Kind . NOTE ;', 'private final Messager messager ;']","['}', 'public Void visitVariable ( VariableElement field , TypeElement annotation )', 'public DigesterElementVisitor ( FormattingMessager messager )', '@ Override', 'extends AbstractElementVisitor6 < Void , TypeElement >', 'messager . note ( ""visiting @ % s on class % s"" , annotation , clazz ) ;', 'messager . note ( ""visiting @ % s on methodArgument % s"" , annotation , methodArgument ) ;', 'import javax . lang . model . element . PackageElement ;', 'public Void visitType ( TypeElement clazz , TypeElement annotation )', 'messager . note ( ""visiting @ % s on class member % s"" , annotation , field ) ;']","['messager . printMessage ( OTHER , format ( ""Processing @ % s % s"" , annotation , element ) ) ;', 'messager . error ( ""Impossible to generate class % s . % s : % s"" , packageName , className , e . getMessage ( ) ) ;', 'packageName , className , e . getMessage ( ) ) ) ;', 'messager . error ( ""Processing @ % s % s"" , annotation , element ) ;', 'Messager messager = processingEnv . getMessager ( ) ;', 'messager . error ( ""Class % s . % s has been already defined"" , packageName , className ) ;', 'messager . printMessage ( ERROR , format ( ""Class % s . % s has been already defined"" , packageName , className ) ) ;', 'FormattingMessager messager = new FormattingMessager ( processingEnv . getMessager ( ) ) ;', 'import static javax . tools . Diagnostic . Kind . OTHER ;', 'import static javax . tools . Diagnostic . Kind . ERROR ;']","['JDefinedClass rulesModuleClass = modulePackage . class ( FINAL | PUBLIC , className ) ;', 'final FormattingMessager messager = new FormattingMessager ( processingEnv . getMessager ( ) ) ;', 'JBlock configureMethodBody = configureMethod . body ( ) ;', 'parse ( codeModel , ""void"" ) ,', 'JMethod configureMethod = rulesModuleClass . method ( PROTECTED , parse ( codeModel , ""void"" ) , ""configure"" ) ;', 'final JCodeModel codeModel = new JCodeModel ( ) ;', 'JPackage modulePackage = codeModel . package ( packageName ) ;', 'final JPackage modulePackage = codeModel . package ( packageName ) ;', 'JCodeModel codeModel = new JCodeModel ( ) ;', 'final JBlock configureMethodBody = configureMethod . body ( ) ;']","['for ( TypeElement annotation : annotations )', 'element . accept ( elementVisitor , null ) ;', '}', 'final DigesterElementVisitor elementVisitor = new DigesterElementVisitor ( messager ) ;', '}', 'for ( Element element : environment . getRootElements ( ) )', '{', 'System . out . println ( "" > > > > > > > > > "" + clazz . getAnnotationMirrors ( ) ) ;', 'rulesList = lookup ( namespaceURI , key ) ;', 'for ( String key : wildcardCache )']",['super ( adaptedClassLoader ) ;'],"['return adaptedClassLoader . loadClass ( name ) ;', 'return getParent ( ) . loadClass ( name ) ;', 'this . adaptedClassLoader = adaptedClassLoader ;', 'return getParent ( ) ;', 'private final ClassLoader adaptedClassLoader ;', 'return adaptedClassLoader ;', 'assertNotNull ( binderCl . getResource ( ""xxx"" ) ) ;', '@ Test', '} ;', 'if ( ""xxx"" . equals ( name ) )']","['return getAdaptedClassLoader ( ) . getResource ( name ) ;', 'public URL getResource ( String name )', 'import java . net . URL ;', '}', '{', '@ Override', 'import static org . junit . Assert . assertSame ;', 'String dummyClassName = Dummy . class . getName ( ) ;', 'private ClassLoader classLoader = createBinderClassLoader ( getClass ( ) . getClassLoader ( ) ) ;', 'if ( inputStream = = null )']","['install ( new FromXmlRulesModule ( )', 'install ( new FromXmlRulesModule ( )', 'protected void loadRules ( )', 'import java . util . Set ;', '} ) ;', 'if ( includedFiles . add ( xmlRulesResourceString ) )', 'if ( memoryRulesBinder . getIncludedFiles ( ) . add ( xmlRulesResource . toString ( ) ) )', 'protected void loadRules ( )', '}', '} ) ;']","['@ Target ( ElementType . TYPE )', '@ Target ( ElementType . FIELD )', '@ Target ( ElementType . TYPE )', '@ Target ( ElementType . METHOD )', '@ Target ( ElementType . TYPE )', '@ Target ( ElementType . PARAMETER )', '@ Target ( ElementType . TYPE )', '@ Target ( ElementType . PARAMETER )', '@ Target ( ElementType . TYPE )', '@ Target ( ElementType . FIELD )']","['throw e ;', 'reader . setErrorHandler ( this . errorHandler ) ;', 'catch ( SAXException e )', 'if ( this . errorHandler ! = null )', 'reader . setErrorHandler ( this ) ;', '}', '}', 'reader . setErrorHandler ( this ) ;', '+ exception . getColumnNumber ( ) + "" : "" + exception . getMessage ( ) , exception ) ;', '+ exception . getColumnNumber ( ) + "" : "" + exception . getMessage ( ) , exception ) ;']","['throws SAXNotRecognizedException , SAXNotSupportedException , ParserConfigurationException', '}', 'import org . xml . sax . SAXNotSupportedException ;', '{', 'import org . xml . sax . SAXNotRecognizedException ;', 'return this ;', 'public DigesterLoader setFeature ( String feature , boolean value )', 'factory . setFeature ( feature , value ) ;', 'import org . xml . sax . SAXParseException ;', '. parse ( new File ( ""src / test / resources / org / apache / commons / digester3 / document - with - relative - dtd - error . xml"" ) ) ;']","['return popped ;', 'throw new EmptyStackException ( ) ;', 'T popped = this . < T > npeSafeCast ( namedStack . pop ( ) ) ;', 'result = this . < T > npeSafeCast ( namedStack . pop ( ) ) ;', 'log . warn ( ""Empty stack ( returning null ) "" ) ;', 'return result ;', 'return null ;', 'T result = null ;', 'try', 'result = stackAction . onPop ( this , stackName , result ) ;']","['@ MetaInfServices ( Processor . class )', 'return new HashSet < String > ( asList ( BeanPropertySetter . class . getName ( ) ,', 'import org . apache . commons . digester3 . annotations . rules . SetProperty ;', 'SetTop . class . getName ( ) ) ) ;', 'configureMethod . annotate ( Override . class ) ;', '@ Override', 'return success ;', '{', 'SetNext . class . getName ( ) ,', 'String packageName = getClass ( ) . getPackage ( ) . getName ( ) ;']","['protected void configure ( )', '} )', '. setFeature ( ""http : / / xml . org / sax / features / external - parameter - entities"" , false )', '. parse ( new File ( ""src / test / resources / org / apache / commons / digester3 / document - with - relative - dtd - error . xml"" ) ) ;', 'public void testDigesterLoaderFeatureDisabled ( )', '@ Test', '. setFeature ( ""http : / / xml . org / sax / features / validation"" , false )', '}', 'newLoader ( new AbstractRulesModule ( )', '. setFeature ( ""http : / / apache . org / xml / features / nonvalidating / load - dtd - grammar"" , false )']","['import org . xml . sax . SAXParseException ;', 'import org . xml . sax . SAXException ;', 'throw e ;', 'public void fatalError ( SAXParseException e )', 'implements ErrorHandler', 'public void warning ( SAXParseException e )', '}', 'public void error ( SAXParseException e )', '{', 'public class DefaultThrowingErrorHandler']","['@ Override', '@ Override', '@ Override', '@ Override', '@ Override', '@ Override']","['if ( inStr = = null )', 'if ( inStr = = null ) {', '}']","['for ( int i = 0 ; i < n ; i + + )', 'for ( int i = 0 ; i < n ; i + + ) {', '}', 'if ( type . equals ( address . getType ( ) ) )', 'if ( type . equals ( address . getType ( ) ) ) {', '}', 'if ( nested = = null )', 'if ( nested = = null ) {', '}', 'if ( order ! = null )']","['for ( Iterator < Person > i = people . iterator ( ) ; i . hasNext ( ) ; )', 'for ( Person p : people ) {', 'Person p = i . next ( ) ;', '{', 'import java . util . Iterator ;', 'import java . util . Iterator ;', 'for ( Address addr : addresses ) {', 'for ( Iterator < Address > i = addresses . iterator ( ) ; i . hasNext ( ) ; )', 'for ( String type : emails . keySet ( ) ) {', 'for ( Iterator < String > i = emails . keySet ( ) . iterator ( ) ; i . hasNext ( ) ; )']","['private Map < Rule , Integer > order = new HashMap < Rule , Integer > ( ) ;', 'private final Map < Rule , Integer > order = new HashMap < Rule , Integer > ( ) ;', 'private boolean ignoreCreateExceptions ;', 'private final boolean ignoreCreateExceptions ;', 'private String namespaceURI ;', 'private final String namespaceURI ;', 'private ArrayList < RegisteredRule > registeredRules = new ArrayList < RegisteredRule > ( ) ;', 'private final ArrayList < RegisteredRule > registeredRules = new ArrayList < RegisteredRule > ( ) ;', 'private AnyChildRule rule ;', 'private final HashMap < String , String > elementNames = new HashMap < String , String > ( ) ;']","['public void begin ( AttributeList attributes ) throws Exception {', 'import org . xml . sax . Attributes ;', 'import org . xml . sax . AttributeList ;', 'public void begin ( Attributes attributes ) throws Exception {', 'public void begin ( AttributeList attributes ) throws Exception {', 'import org . xml . sax . Attributes ;', 'import org . xml . sax . AttributeList ;', 'public void begin ( Attributes attributes ) throws Exception {', 'public void endElement ( String name ) throws SAXException {', 'import org . xml . sax . Attributes ;']","['public void render ( Writer writer ) {', 'writer . println ( "" < / rss > "" ) ;', 'protected String pubDate = null ;', 'public void render ( PrintWriter writer ) {', 'public Item [ ] findItems ( ) {', 'return ( this . docs ) ;', 'protected String language = null ;', 'this . managingEditor = managingEditor ;', 'synchronized ( skipHours ) {', 'for ( int i = 0 ; i < items . length ; i + + ) {']","['protected List getRules ( String match ) {', 'List getRules ( String match ) {', '}', 'import java . util . Map ;', 'Map getRegistrations ( ) {', 'return ( dtds ) ;']","['digester . setErrorHandler ( null ) ;', 'assert ( ""Set error handler is digester"" ,', 'public static Test suite ( ) {', 'assertEquals ( ""Remaining item value"" , ""First Item"" , ( String ) value ) ;', 'protected Digester digester = null ;', 'assert ( ""Set namespace aware is true"" ,', 'assert ( ""Initial namespace aware is false"" ,', 'break ;', 'String key = ( String ) keys . next ( ) ;', 'Map map = digester . getRegistrations ( ) ;']","['System . out . println ( message ) ;', 'import java . io . PrintWriter ;', 'exception . printStackTrace ( System . out ) ;', 'public void setWriter ( PrintWriter writer ) {', 'this . writer = writer ;', 'System . out . println ( message ) ;', 'writer . println ( message ) ;', 'exception . printStackTrace ( System . out ) ;', 'exception . printStackTrace ( writer ) ;', 'public PrintWriter getWriter ( ) {']","['String value = ""This is line 1"" +', 'System . getProperty ( ""line . separator"" ) ;', 'import java . io . StringWriter ;', 'digester . setWriter ( pw ) ;', '1 , digester . getRules ( ""a"" ) . size ( ) ) ;', 'assertEquals ( ""Add a non - matching nested rule"" ,', 'public void testRules ( ) {', '}', 'digester . addSetProperties ( ""a"" ) ;', '2 , digester . getRules ( ""a / b"" ) . size ( ) ) ;']","['String bodyText = this . bodyText . toString ( ) ;', 'String bodyText = this . bodyText . toString ( ) . trim ( ) ;']","['public void startElement ( String namespaceURI , String localName ,', '}', 'public Digester ( SAXParser parser ) {', 'this . parser = parser ;', 'public void startElement ( String namespaceURI , String localName ,', 'super ( ) ;']","['this . paramTypes [ i ] = Class . forName ( paramTypes [ i ] ) ;', '} else {', 'if ( ctxLoader = = null ) {', 'if ( ctxLoader! = null & & digester . getUseContextClassLoader ( ) ) {', '} else {', 'this . paramTypes [ i ] = Class . forName ( paramTypes [ i ] ) ;', 'ClassLoader ctxLoader =', 'ClassLoader ctxLoader =', 'return useContextClassLoader ;', 'public void setUseContextClassLoader ( boolean use ) {']","['if ( !namespaceAware & &', '( ( localName = = null ) | | ( localName . length ( ) < 1 ) ) )', 'localName = qName ;']","['this . paramTypes [ i ] = Class . forName ( paramTypes [ i ] ) ;', 'this . paramTypes [ i ] =', 'if ( ctxLoader! = null & & digester . getUseContextClassLoader ( ) ) {', 'digester . getClassLoader ( ) . loadClass ( paramTypes [ i ] ) ;', 'this . paramTypes [ i ] = ctxLoader . loadClass ( paramTypes [ i ] ) ;', '}', 'ClassLoader ctxLoader =', '} else {', 'Thread . currentThread ( ) . getContextClassLoader ( ) ;', 'protected boolean useContextClassLoader = false ;']","['list = new ArrayList ( ) ;', 'try {', 'String longKey = """" ;', 'public Rules getRules ( ) {', 'try {', 'while ( rules . hasNext ( ) ) {', '}', '}', 'if ( key . startsWith ( "" * / "" ) ) {', 'getRules ( ) . clear ( ) ;']","['String attributeName ) {', 'public void addFactoryCreate ( String pattern , String className ) {', 'public void addFactoryCreate ( String pattern ,', 'new FactoryCreateRule ( this , creationFactory ) ) ;', '}', 'public void addFactoryCreate ( String pattern , String className ,', 'ObjectCreationFactory creationFactory ) {', 'addRule ( pattern ,', 'new FactoryCreateRule ( this , className ) ) ;', 'new FactoryCreateRule ( this , className , attributeName ) ) ;']",['this . rules . setDigester ( this ) ;'],"['digester . getRules ( ""a"" ) ) ;', '}', '1 , digester . getRules ( ""a"" ) . size ( ) ) ;', 'digester . setRules ( new RulesBase ( ) ) ;', '2 , digester . getRules ( ""a / b"" ) . size ( ) ) ;', '"" * / c / d"" ,', 'digester . addRule ( "" * / c / d"" , new TestRule ( digester , "" * / c / d"" ) ) ;', 'digester . getRules ( ) . match ( ""a"" ) ) ;', 'assertEquals ( ""Longest tail rule 1"" ,', '1 , digester . getRules ( ) . match ( ""a"" ) . size ( ) ) ;']","[""sb . append ( ' / ' ) ;"", 'if ( match . length ( ) > 0 )', 'sb . append ( qName ) ;', 'StringBuffer sb = new StringBuffer ( match ) ;', 'else if ( ( localName = = null ) | | ( localName . length ( ) < 1 ) )', 'sb . append ( localName ) ;', 'match = sb . toString ( ) ;', 'else', 'if ( namespaceAware )']","['digester . log ( ""Pop "" + top . getClass ( ) . getName ( ) ) ;', 'digester . log ( ""Pop "" + top . getClass ( ) . getName ( ) ) ;', 'if ( digester . getDebug ( ) > = 1 )', 'if ( digester . getDebug ( ) > = 1 )', 'Object top = digester . pop ( ) ;', 'Object top = digester . pop ( ) ;', 'creationFactory = null ;', 'creationFactory = null ;', 'super ( digester ) ;', 'creationFactory . setDigester ( digester ) ;']","['value + ""\'"" ) ;', 'digester . log ( "" Setting property \'"" + name + ""\' to \'"" +', 'name = attributes . getQName ( i ) ;', 'if ( """" . equals ( name ) )', 'if ( digester . getDebug ( ) > = 9 )', 'if ( """" . equals ( name ) )', 'name = attributes . getQName ( i ) ;']","['paramCount = 0 ;', 'methodName = null ;', 'paramTypes = null ;', 'attributeName = null ;', 'creationFactory = null ;', 'creationFactory = null ;', 'if ( attributeName ! = null )', 'className = null ;', 'public void finish ( ) throws Exception {', 'attributeName = null ;']","['import org . xml . sax . Attributes ;', 'import java . lang . ClassLoader ;', 'public void setDigester ( Digester digester ) {', '}', 'public Digester getDigester ( ) {', '{', 'abstract public class AbstractObjectCreationFactory', 'public abstract Object createObject ( Attributes attributes ) ;', 'protected Digester digester = null ;', 'return ( this . digester ) ;']","['sb . append ( "" } "" ) ;', 'if ( i > 0 )', 'sb . append ( ""methodName = "" ) ;', 'sb . append ( "" ] "" ) ;', 'return ( sb . toString ( ) ) ;', 'public String toString ( ) {', 'sb . append ( "" , "" ) ;', '}', 'sb . append ( methodName ) ;', 'StringBuffer sb = new StringBuffer ( ""CallMethodRule [ "" ) ;']","['parameters = ( String [ ] ) digester . pop ( ) ;', 'digester . pushParams ( parameters ) ;', 'digester . push ( parameters ) ;', 'parameters = ( String [ ] ) digester . popParams ( ) ;', 'String parameters [ ] = ( String [ ] ) digester . peek ( ) ;', 'String parameters [ ] = ( String [ ] ) digester . peekParams ( ) ;', '( ( Rule ) rules . get ( i ) ) . body ( bodyText ) ;', 'log ( ""endElement ( "" + match + "" ) "" ) ;', '( ( Rule ) rules . get ( j ) ) . end ( ) ;', 'try {']","['public void setCity ( String city ) {', 'public String getCity ( ) {', 'private String street = null ;', '}', 'public String toString ( ) {', 'private String zipCode = null ;', 'return ( this . zipCode ) ;', 'public void setZipCode ( String zipCode ) {', 'public Address ( String street , String city , String state , String zipCode ) {', 'return ( this . state ) ;']","['( "" / org / apache / commons / digester / "" + name ) ) ;', 'fail ( ""Digester threw IOException : "" + t ) ;', 'protected InputStream getInputStream ( String name ) throws IOException {', 'protected InputStream getInputStream ( String name ) throws IOException {', 'return ( this . getClass ( ) . getResourceAsStream', 'return ( this . getClass ( ) . getResourceAsStream', '}', '} catch ( Throwable t ) {', 'try {', '}']","['digester . addCallParam ( ""employee"" , 0 , ""firstName"" ) ;', 'try {', 'employee . getFirstName ( ) ) ;', '}', '""First Name"" ,', 'public void testObjectCreate4 ( ) {', 'root = digester . parse ( getInputStream ( ""Test1 . xml"" ) ) ;', 'fail ( ""Digester threw IOException : "" + t ) ;', '""setLastName"" , 1 ) ;', 'employee . getLastName ( ) ) ;']","['if ( paramCount > 0 )', 'if ( paramCount > 0 ) {', '}', 'if ( paramCount = = 1 & & parameters [ 0 ] = = null ) {', 'return ;']","['this . bodyText = bodyText ;', 'this . bodyText = bodyText . trim ( ) ;', 'parameters = ( String [ ] ) digester . popParams ( ) ;', 'if ( bodyText = = null ) {', '}', 'parameters = ( String [ ] ) digester . popParams ( ) ;', 'else {', '}', 'if ( paramCount = = 1 & & parameters [ 0 ] = = null ) {', '} else {']","['log ( ""endElement ( "" + match + "" ) "" ) ;', 'public void skippedEntity ( String name ) {', 'systemId + ""\' ) "" ) ;', '"" , "" + qName + "" ) "" ) ;', 'systemId + ""\' , \'"" + notation + ""\' ) "" ) ;', 'new String ( buffer , start , len ) + "" ) "" ) ;', 'if ( match . length ( ) > 0 )', 'try {', 'if ( debug > = 3 )', 'stack . pop ( ) ;']","['sb . append ( qName ) ;', 'setRuleNamespaceURI ( newNamespaceURI ) ;', 'if ( debug > = 3 )', 'if ( newNamespaceURI = = null )', 'else if ( ( localName = = null ) | | ( localName . length ( ) < 1 ) )', 'if ( debug > = 3 ) {', 'log ( ""startElement ( "" + match + "" ) "" ) ;', 'String newNamespaceURI = ruleSet . getNamespaceURI ( ) ;', 'if ( namespaceAware )', 'log ( ""addRuleSet ( ) with no namespace URI"" ) ;']","['rule . setNamespaceURI ( this . namespaceURI ) ;', 'if ( this . namespaceURI ! = null )', 'rule . setNamespaceURI ( this . namespaceURI ) ;']","['if ( namespaceURI . equals ( item . getNamespaceURI ( ) ) ) {', 'if ( ( namespaceURI . equals ( item . getNamespaceURI ( ) ) ) | |', '( item . getNamespaceURI ( ) = = null ) ) {']","['public void testRules ( ) {', 'Iterator it = list . iterator ( ) ;', 'public static Test suite ( ) {', 'digester . addSetProperties ( ""a"" ) ;', 'protected Digester digester = null ;', 'import java . io . PrintWriter ;', '{', 'import java . util . ArrayList ;', '""a / b / c / d"" ,', '2 , digester . getRules ( ) . match ( null , ""a / b"" ) . size ( ) ) ;']","['if ( rules ! = null ) {', 'if ( ( rules ! = null ) & & ( rules . size ( ) > 0 ) ) {', 'if ( rulesList = = null )', 'rulesList = new ArrayList ( ) ;', 'digester . getRules ( ) . match ( ""a"" ) ) ;', 'assertEquals ( ""Initial rules list is empty"" ,', 'assertNull ( ""Initial rules list is empty"" ,', '0 , digester . getRules ( ) . match ( ""a"" ) . size ( ) ) ;', 'assertNull ( ""Initial rules list is empty"" ,', 'assertEquals ( ""Initial rules list is empty"" ,']","['final V value = v ! = null & & v . getElement ( ) ! = null ? v . getElement ( ) : null ;', 'final Properties properties , final CompositeCache < K , V > cache )', 'final JCSElement < V > elt = delegate . get ( key ) ;', 'if ( expiryForAccess ! = null )', ': expiryPolicy . getExpiryForUpdate ( ) ) ;', 'final ICacheElement < K , V > elt = delegate . get ( key ) ;', 'final K copy = copy ( serializer , manager . getClassLoader ( ) , key . getKey ( ) ) ;', 'import org . apache . commons . jcs . engine . CacheElement ;', 'delegate . put ( new JCSKey < K > ( copy ) , elt ) ;', 'import java . io . IOException ;']","['log . info ( ""In DISPOSE , [ "" + this . cacheAttr . getCacheName ( ) + "" ] fromRemote [ "" + fromRemote + "" ] \\ n"" + this . getStats ( ) ) ;', 'log . info ( ""In DISPOSE , [ "" + this . cacheAttr . getCacheName ( ) + "" ] fromRemote [ "" + fromRemote + "" ] "" ) ;']","['}', 'final Object [ ] args = delegate . getParameters ( ) ;', 'parameters = new CacheInvocationParameter [ args . length ] ;', 'parameters = doGetAllParameters ( null ) ;', 'for ( int i = 0 ; i < args . length ; i + + )', 'final Annotation [ ] [ ] parameterAnnotations = getMethod ( ) . getParameterAnnotations ( ) ;', 'final Object [ ] args = delegate . getParameters ( ) ;', 'for ( int idx = 0 ; idx < indexes . length ; idx + + )', 'import java . lang . annotation . Annotation ;', 'protected CacheInvocationParameter [ ] doGetAllParameters ( final Integer [ ] indexes )']","['String attrName = AUXILIARY PREFIX + auxName + ATTRIBUTE PREFIX ;', 'compositeCacheManager . addAuxiliaryCache ( auxName , regName , auxCache ) ;', 'auxCache = auxFac . createCache ( auxAttr , compositeCacheManager , cacheEventLogger , elementSerializer ) ;', 'AuxiliaryCache < K , V > auxCache = ( AuxiliaryCache < K , V > ) compositeCacheManager . getAuxiliaryCache ( auxName , regName ) ;', 'PropertySetter . setProperties ( auxAttr , props , attrName + "" . "" ) ;', 'String attrName = AUXILIARY PREFIX + auxName + ATTRIBUTE PREFIX ;', 'log . error ( ""Could not instantiate auxFactory named \\ """" + auxName + "" \\ "" . "" ) ;', 'auxCache = auxFac . createCache ( auxAttr , compositeCacheManager , cacheEventLogger , elementSerializer ) ;', 'log . debug ( ""Parsing options for \'"" + attrName + ""\'"" ) ;', 'PropertySetter . setProperties ( auxAttr , props , attrName + "" . "" ) ;']","['public class LRUMap', 'contentSize . addAndGet ( ( int ) ( ( Math . ceil ( value . length * blockSize / 1024 . 0 ) ) * - 1 ) ) ;', 'keyHash = new LRUMap ( maxKeySize ) ;', 'contentSize . addAndGet ( ( int ) Math . ceil ( value . length * blockSize / 1024 . 0 ) ) ;', 'public LRUMap ( )', 'keyHash = new LRUMapCountLimited ( maxKeySize ) ;', 'public LRUMap ( int maxKeySize )', 'import java . util . concurrent . atomic . AtomicInteger ;', 'extends LRUMapJCS < K , int [ ] >', 'if ( log . isDebugEnabled ( ) )']","['import java . util . Iterator ;', 'import java . util . Iterator ;', 'import java . security . AccessControlException ;', 'import java . util . Set ;', 'import javax . management . MBeanServer ;', 'import java . security . AccessControlException ;', 'import java . io . IOException ;', 'import java . io . IOException ;', 'import java . util . ArrayList ;', 'import java . util . ArrayList ;']","['import java . io . IOException ;', '( ( IRequireScheduler ) auxFac ) . setScheduledExecutorService ( compositeCacheManager . getScheduledExecutorService ( ) ) ;', 'import java . util . ArrayList ;', '}', 'import java . util . Enumeration ;', 'import java . io . IOException ;', 'import java . util . Properties ;', 'import java . util . ArrayList ;', 'import java . util . StringTokenizer ;', 'if ( auxFac instanceof IRequireScheduler )']","['private int hitCountRam ;', 'if ( alive . compareAndSet ( true , false ) = = false )', '& & cacheAttr . getDiskUsagePattern ( ) = = DiskUsagePattern . UPDATE', '& & cacheAttr . getDiskUsagePattern ( ) = = DiskUsagePattern . UPDATE', 'return alive ? CacheStatus . ALIVE : CacheStatus . DISPOSED ;', 'elementEventQ = null ;', 'private boolean alive = true ;', 'import java . util . concurrent . atomic . AtomicInteger ;', 'elementEventQ = null ;', 'if ( log . isDebugEnabled ( ) )']","['ICache < K , V > cache ;', 'protected void parseSystemRegions ( Properties props )', 'protected < K , V > void parseSystemRegions ( Properties props )', 'protected void parseRegions ( Properties props )', 'protected < K , V > void parseRegions ( Properties props )', 'ICache < ? , ? > cache ;', 'cattr . setCacheName ( cattr . getCacheName ( ) ) ;', 'private ReentrantLock cacheLock = new ReentrantLock ( ) ;', 'if ( cache = = null )', 'private final ConcurrentMap < String , AuxiliaryCache < ? , ? > > auxiliaryCaches =']","['auxAttr = auxAttr . copy ( ) ;', 'ccAttr = ccAttr2 . clone ( ) ;', 'ccAttr = ccAttr2 . copy ( ) ;', 'eAttr = eAttr2 . clone ( ) ;', 'eAttr = eAttr2 . copy ( ) ;', 'auxAttr = auxAttr . clone ( ) ;']","['compositeCacheManager . addAuxiliaryCache ( auxName , regName , auxCache ) ;', 'ccm . getDefaultCacheAttributes ( ) , regionPrefix ) , ea )', 'catch ( IOException e )', '? new CompositeCache < K , V > ( parseCompositeCacheAttributes ( props , regName ,', 'setDefaultElementAttributes ( properties ) ;', 'eAttr = defaultEAttr ;', 'Enumeration < ? > en = props . propertyNames ( ) ;', 'protected IElementAttributes parseElementAttributes ( Properties props , String regName ,', 'props . load ( istream ) ;', 'ccm . registryFacPut ( auxFac ) ;']","['throws ServletException , IOException', '{', 'log . info ( ""Remote JCS Server started with properties from "" + fullPropsFileName ) ;', 'RemoteCacheServerFactory . startup ( registryHost , registryPort , props , propsFileName ) ;', 'import java . io . IOException ;', 'else', 'if ( log . isDebugEnabled ( ) )', 'RemoteCacheServerFactory . startup ( registryHost , registryPort , propsFileName ) ;', 'log . error ( ""Problem writing response . "" , e ) ;', 'log . error ( ""Problem starting remote cache server . "" , e ) ;']","['this . noWaits . add ( ( RemoteCacheNoWait < K , V > ) nw ) ;', 'RemoteCacheNoWait < K , V > rcnw = ( RemoteCacheNoWait < K , V > ) nw ;', '( ( RemoteCache < K , V > ) rcnw . getRemoteCache ( ) ) . setFacade ( this ) ;', 'this . noWaits . add ( rcnw ) ;', 'facades . put ( rca . getCacheName ( ) , rcnwf ) ;', 'new RemoteCacheNoWaitFacade < K , V > ( noWaits , rca , cacheMgr , cacheEventLogger , elementSerializer , this ) ;', 'private static ConcurrentMap < String , RemoteCacheNoWaitFacade < ? , ? > > facades ;', 'private ConcurrentMap < RemoteLocation , RemoteCacheManager > managers ;', '{', 'ins = managers . get ( cattr . getRemoteLocation ( ) ) ;']","['}', 'for ( RemoteCacheNoWait < K , V > rcnw : this . noWaits )', '{', 'this . noWaits . add ( rcnw ) ;', '( ( RemoteCache < K , V > ) rcnw . getRemoteCache ( ) ) . setFacade ( this ) ;']","['if ( expiryForAccess ! = null )', 'import org . apache . commons . jcs . engine . control . CompositeCache ;', 'import java . util . Iterator ;', 'import java . util . Iterator ;', 'import org . apache . commons . jcs . engine . CacheElement ;', 'if ( oldValue . equals ( v ) )', 'import java . io . IOException ;', 'import org . apache . commons . jcs . engine . CacheElement ;', 'final ICacheElement < K , V > element = updateElement ( key , v , duration ) ;', 'import java . io . IOException ;']","['if ( !isAlive ( ) )', 'while ( isAlive ( ) )', 'if ( log . isDebugEnabled ( ) )', 'log . info ( ""Destroy was called after queue was destroyed . Doing nothing . Stats = "" + getStatistics ( ) ) ;', 'log . debug ( ""QProcessor exiting for "" + queue ) ;', 'if ( event ! = null & & isWorking ( ) & & isAlive ( ) )', 'protected AbstractCacheEvent take ( )', 'import java . util . concurrent . LinkedBlockingQueue ;', 'this . listenerId = listenerId ;', 'if ( !isAlive ( ) )']","['for ( RemoteCacheNoWait < K , V > rcnw : this . noWaits )', 'for ( RemoteCacheNoWait < K , V > rcnw : new ArrayList < RemoteCacheNoWait < K , V > > ( this . noWaits ) )', 'import java . util . ArrayList ;']","['for ( RemoteCacheNoWait < K , V > rcnw : new ArrayList < RemoteCacheNoWait < K , V > > ( this . noWaits ) )', 'for ( RemoteCacheNoWait < K , V > rcnw : this . noWaits )', 'this . noWaits . add ( rcnw ) ;', 'import java . util . ArrayList ;']","['import java . util . Enumeration ;', 'System . out . println ( ""Found : "" + inetAddr +', 'boolean loopbackAddress = inetAddr . isLoopbackAddress ( ) ;', '"" isLoopback : "" + loopbackAddress +', '"" isSiteLocal : "" + siteLocalAddress +', '( ( !loopbackAddress & & siteLocalAddress ) ? "" * "" : """" ) ) ;', 'System . out . println ( ""InetAddress . getLocalHost ( ) = "" + ina ) ;', '}', '{', 'import java . net . NetworkInterface ;']","['System . out . println ( ""Found : "" + inetAddr +', '} catch ( Exception e ) {', 'boolean loopbackAddress = inetAddr . isLoopbackAddress ( ) ;', 'try {', '"" isLoopback : "" + loopbackAddress +', 'System . out . println ( ""Found : "" + inetAddr +', '"" isSiteLocal : "" + siteLocalAddress +', 'boolean loopbackAddress = inetAddr . isLoopbackAddress ( ) ;', '( ( !loopbackAddress & & siteLocalAddress ) ? "" * "" : """" ) ) ;', '"" isLoopback : "" + loopbackAddress +']","['remotePort = server . remoteCacheServerAttributes . getRemotePort ( ) ;', 'remotePort = server . remoteCacheServerAttributes . getRemotePort ( ) ;', 'String configFile = ""TestRemoteCacheClientServer . ccf"" ;', 'String configFile = ""TestRemoteCacheClientServer . ccf"" ;', 'server = RemoteCacheServerStartupUtil . startServerUsingProperties ( configFile ) ;', 'server = RemoteCacheServerStartupUtil . startServerUsingProperties ( configFile ) ;']","['server . shutdown ( ""localhost"" , remotePort ) ;', 'if ( server ! = null ) {', 'server . shutdown ( ""localhost"" , remotePort ) ;', '}']","['System . out . println ( ""localhost = "" + lh ) ;', 'InetAddress lh = InetAddress . getByName ( ""localhost"" ) ;']","['return "" / / [ "" + registryHost . replaceFirst ( "" % "" , "" % 25"" ) + "" ] : "" + registryPort + "" / "" + serviceName ;', 'if ( registryHost . contains ( "" : "" ) ) {', '}', 'assertEquals ( "" / / host : 1 / servicename"" , RemoteUtils . getNamingURL ( ""host"" , 1 , ""servicename"" ) ) ;', 'assertEquals ( "" / / [ 0 : 0 : 0 : 0 : 0 : 0 : 0 : 1 % 251 ] : 3 / servicename"" , RemoteUtils . getNamingURL ( ""0 : 0 : 0 : 0 : 0 : 0 : 0 : 1 % 1"" , 3 , ""servicename"" ) ) ;', '}', '{', 'public void testgetNamingURL ( )', 'assertEquals ( "" / / 127 . 0 . 0 . 1 : 2 / servicename"" , RemoteUtils . getNamingURL ( ""127 . 0 . 0 . 1"" , 2 , ""servicename"" ) ) ;']","['System . out . println ( ""Renamed log file ? "" + jcsLog . renameTo ( logSave ) ) ;', 'java . io . File jcsLog = new java . io . File ( ""target / jcs . log"" ) ;', 'java . io . File logSave = new java . io . File ( ""target / BasicRemoteCacheClientServerUnitTest jcs . log"" ) ;']","['decompressor . end ( ) ;', 'compressor . end ( ) ;']","['Map < String , String > cache2 = new org . apache . commons . collections . map . LRUMap ( tries ) ;', 'Map < String , String > cache2 = new org . apache . commons . collections4 . map . LRUMap < String , String > ( tries ) ;', 'Map < String , String > cache2 = new org . apache . commons . collections . map . LRUMap ( tries ) ;', 'Map < String , String > cache2 = new org . apache . commons . collections4 . map . LRUMap < String , String > ( tries ) ;']","['import org . apache . commons . logging . Log ;', 'import org . apache . commons . lang3 . builder . ToStringBuilder ;', 'import org . apache . commons . jcs . yajcache . lang . annotation . * ;', 'import org . apache . commons . jcs . yajcache . lang . annotation . NonNullable ;', 'import org . apache . commons . logging . LogFactory ;', 'import org . apache . commons . logging . Log ;', 'import org . apache . commons . logging . LogFactory ;', 'import org . apache . commons . jcs . yajcache . lang . annotation . * ;', 'import junit . framework . TestCase ;', 'import org . apache . commons . jcs . yajcache . lang . annotation . CopyRightApache ;']","['assertTrue ( iterator . hasNext ( ) ) ;', 'System . err . println ( ""Ignoring checkOWBProvider test failure on "" + System . getProperty ( ""java . version"" ) ) ;', 'final Iterator < BeanProvider > iterator = ServiceLoader . load ( BeanProvider . class ) . iterator ( ) ;', 'try {', 'assertThat ( iterator . next ( ) , instanceOf ( OWBBeanProvider . class ) ) ;', 'final Iterator < BeanProvider > iterator = ServiceLoader . load ( BeanProvider . class ) . iterator ( ) ;', '}', '} catch ( java . lang . UnsupportedClassVersionError e ) {', 'assertTrue ( iterator . hasNext ( ) ) ;', 'assertThat ( iterator . next ( ) , instanceOf ( OWBBeanProvider . class ) ) ;']","['else if ( type . isEnum ( ) )', '@ SuppressWarnings ( ""unchecked"" )', 'Enum < ? > en = Enum . valueOf ( type . asSubclass ( Enum . class ) , v ) ;', '}', '{', 'return en ;', 'public void testConvertArg ( )', '@ Test', 'Object b = ps . convertArg ( ""true"" , Boolean . TYPE ) ;', '}']","['String registry = "" / / "" + host + "" : "" + port + "" / "" + service ;', 'String registry = RemoteUtils . getNamingURL ( host , port , service ) ;']","['String registry = "" / / : "" + port + "" / "" + sz ;', 'String registry = RemoteUtils . getNamingURL ( """" , port , sz ) ;', 'Naming . unbind ( "" / / "" + host + "" : "" + port + "" / "" + getServiceName ( ) ) ;', 'Naming . unbind ( RemoteUtils . getNamingURL ( host , port , getServiceName ( ) ) ) ;', 'String registry = "" / / : "" + port + "" / "" + remoteServiceName ;', 'String registry = RemoteUtils . getNamingURL ( """" , port , remoteServiceName ) ;']","['import java . rmi . Remote ;', 'import java . rmi . server . UnicastRemoteObject ;', 'import java . rmi . server . UnicastRemoteObject ;', 'import java . util . Set ;', 'import java . rmi . server . RMISocketFactory ;', 'import java . util . Iterator ;', 'import java . util . Set ;', 'import java . io . IOException ;', 'import java . util . Iterator ;', 'implements IRemoteCacheServer < K , V > , Unreferenced']","['}', 'UnicastRemoteObject . exportObject ( this , irca . getLocalPort ( ) ) ;', 'UnicastRemoteObject . exportObject ( this , irca . getLocalPort ( ) ) ;', '{', 'UnicastRemoteObject . exportObject ( this ) ;', 'if ( irca . getLocalPort ( ) > 0 )', 'else']","['extends ICacheServiceNonLocal < K , V > , ICacheObserver , ICacheServiceAdmin , Remote', 'extends ICacheServiceNonLocal < K , V > , IRemoteCacheObserver , ICacheServiceAdmin , Remote', 'import org . apache . commons . jcs . engine . behavior . ICacheObserver ;', 'import org . apache . commons . jcs . auxiliary . remote . behavior . IRemoteCacheObserver ;']","['httpServletResponse . addIntHeader ( entry . getKey ( ) , Integer . class . cast ( entry . getValue ( ) ) ) ;', 'httpServletResponse . addIntHeader ( entry . getKey ( ) , Integer . class . cast ( value ) ) ;', 'httpServletResponse . addHeader ( entry . getKey ( ) , String . class . cast ( entry . getValue ( ) ) ) ;', 'httpServletResponse . addDateHeader ( entry . getKey ( ) , Long . class . cast ( value ) ) ;', 'httpServletResponse . addDateHeader ( entry . getKey ( ) , Long . class . cast ( entry . getValue ( ) ) ) ;', 'httpServletResponse . addHeader ( entry . getKey ( ) , String . class . cast ( value ) ) ;']","['import java . util . Set ;', 'import java . util . Set ;', 'import java . lang . annotation . Annotation ;', 'import java . lang . annotation . Annotation ;', 'import java . lang . reflect . Method ;', 'if ( CacheResolverFactory . class = = type ) {', 'import java . util . concurrent . ConcurrentHashMap ;', 'import java . lang . reflect . Method ;', 'import java . util . logging . Logger ;', 'import java . util . concurrent . ConcurrentHashMap ;']","['import javax . enterprise . inject . spi . BeanAttributes ;', 'public String getName ( ) {', 'import javax . enterprise . inject . spi . InjectionTargetFactory ;', 'bm . createAnnotatedType ( CDIJCacheHelper . class ) ;', 'public Set < Class < ? extends Annotation > > getStereotypes ( ) {', 'try {', 'this . qualifiers = new HashSet < Annotation > ( ) ;', 'import javax . enterprise . util . AnnotationLiteral ;', 'final Object instance = bm . getReference ( b , sc , bm . createCreationalContext ( null ) ) ;', 'return ""lib"" ;']","['if ( b ! = null ) {', 'try {', 'if ( beans ! = null & & !beans . isEmpty ( ) ) {', 'final Object instance = bm . getReference ( b , sc , bm . createCreationalContext ( null ) ) ;', 'final Object instance = bm . getReference ( b , sc , bm . createCreationalContext ( null ) ) ;', '}', 'final Bean < ? > b = bm . resolve ( beans ) ;', 'contextClassLoader . loadClass ( ""javax . enterprise . inject . spi . InjectionTargetFactory"" ) ;', 'final Class < ? > sc = Thread . currentThread ( ) . getContextClassLoader ( ) . loadClass ( ""javax . servlet . ServletContext"" ) ;', 'boolean useId = false ;']","['try {', 'return ""default"" ;', 'return ""lib"" ;', 'final HelperBean bean = new HelperBean ( annotatedType , injectionTarget , findIdSuffix ( ) ) ;', 'final Object instance = bm . getReference ( b , sc , bm . createCreationalContext ( null ) ) ;', 'if ( USE ID ) {', '}', 'private static final boolean USE ID = !Boolean . getBoolean ( ""org . apache . commons . jcs . cdi . skip - id"" ) ;', 'contextClassLoader . loadClass ( ""javax . enterprise . inject . spi . InjectionTargetFactory"" ) ;', 'private String findIdSuffix ( ) {']","['final CacheManager cacheManager = cachingProvider . getCacheManager (', 'cacheManager = cachingProvider . getCacheManager (', 'final CachingProvider cachingProvider = Caching . getCachingProvider ( ) ;', 'private CachingProvider cachingProvider ;', 'cacheManager . close ( ) ;', 'public void destroyIfCreated ( final @ Observes BeforeShutdown beforeShutdown )', 'cachingProvider . close ( ) ;', '}', 'private CacheManager cacheManager ;', '{']","['return ( T ) defaultCacheResolverFactory ;', 'return ( T ) defaultCacheResolverFactory ( ) ;', 'private final CacheResolverFactory defaultCacheResolverFactory = new CacheResolverFactoryImpl ( ) ;', 'private void release ( ) {', 'return defaultCacheResolverFactory ;', '}', 'private volatile CacheResolverFactoryImpl defaultCacheResolverFactory = null ;', 'synchronized ( this ) {', '{', 'private static final boolean CLOSE CACHE = !Boolean . getBoolean ( ""org . apache . commons . jcs . jcache . cdi . skip - close"" ) ;']","['buffer . limit ( chunkSize ) ;', 'cattr . setMaxKeySize ( removeCount * 3 ) ;', 'disk . optimizeFile ( ) ;', 'int numberToInsert = removeCount * 2 ;', 'cattr . setMaxKeySize ( removeCount * 2 ) ;', 'int numberToInsert = removeCount * 3 ;']","['storageLock . readLock ( ) . unlock ( ) ;', 'storageLock . readLock ( ) . unlock ( ) ;', 'finally', 'if ( ded ! = null )', 'if ( ded ! = null )', 'try {', '}', '}', 'int [ ] ded = this . keyStore . get ( key ) ;', 'int [ ] ded = this . keyStore . get ( key ) ;']","['boolean result = this . diskPath . mkdirs ( ) ;', 'if ( !result )', '}', 'result = this . diskPath . mkdirs ( ) ;', '{', 'boolean result = this . diskPath . isDirectory ( ) ;']","['public static void startup ( String host , int port , Properties props )', 'startup ( host , port , props , propFile ) ;', 'startup ( host , port , props ) ;', 'rcsa . setConfigFileName ( propFile ) ;', 'public static void startup ( String host , int port , Properties props , String propFile )']","['import javax . servlet . http . HttpServletResponse ;', 'import javax . servlet . http . Cookie ;', 'import javax . servlet . http . HttpServletResponseWrapper ;', 'import javax . servlet . http . HttpServletResponse ;', 'import javax . servlet . http . Cookie ;', 'import javax . servlet . ServletOutputStream ;', 'super . flushBuffer ( ) ;', 'import javax . servlet . http . HttpServletResponseWrapper ;', 'import javax . servlet . ServletOutputStream ;', 'if ( ""getCharacterEncoding"" . equals ( method . getName ( ) ) )']","['import org . apache . commons . logging . LogFactory ;', 'import org . apache . commons . logging . LogFactory ;', 'import org . apache . commons . jcs . utils . struct . SingleLinkedList ;', 'import org . apache . commons . jcs . utils . struct . SingleLinkedList ;', 'fc . force ( false ) ;', 'import org . apache . commons . jcs . engine . behavior . IElementSerializer ;', 'import org . apache . commons . jcs . engine . behavior . IElementSerializer ;', 'import org . apache . commons . jcs . utils . serialization . StandardSerializer ;', 'import org . apache . commons . jcs . utils . serialization . StandardSerializer ;', 'import org . apache . commons . logging . Log ;']","['log . info ( ""Received shutdown request . Shutting down server . "" ) ;', 'shutdown ( """" , Registry . REGISTRY PORT ) ;', 'RemoteCacheServerFactory . shutdownImpl ( """" , Registry . REGISTRY PORT ) ;', 'removeCacheListener ( cacheName , i ) ;', 'return ;', 'if ( log . isInfoEnabled ( ) )', 'clusterListenersMap . clear ( ) ;', 'synchronized ( listenerId )', '}', 'cacheListenersMap . clear ( ) ;']","['import java . util . Map . Entry ;', 'import java . util . Map . Entry ;', 'import java . util . ArrayList ;', 'import java . util . ArrayList ;', 'import java . util . Set ;', 'import java . util . Set ;', 'import java . util . Iterator ;', 'import java . util . Iterator ;', 'import java . io . IOException ;', 'import java . io . IOException ;']","['import java . util . StringTokenizer ;', 'import java . util . StringTokenizer ;', 'import java . util . ArrayList ;', 'import java . util . ArrayList ;', 'if ( ( !primayDefined & & fCnt = = 1 ) | | noWaits . size ( ) < = 0 )', 'String server = fit . nextToken ( ) ;', 'primayDefined = true ;', 'if ( ( !primaryDefined & & fCnt = = 1 ) | | noWaits . size ( ) < = 0 )', 'rca . setRemoteHost ( server . substring ( 0 , server . indexOf ( "" : "" ) ) ) ;', 'while ( fit . hasMoreTokens ( ) )']","['throw new RuntimeException ( ""Invalid server descriptor : "" + server ) ;', 'log . error ( ""Invalid server descriptor : "" + server ) ;', 'RemoteUtils . parseServerAndPort ( ""server2 : port"" , rca ) ;', 'assertEquals ( """" , rca . getRemoteHost ( ) ) ;', 'catch ( Exception e )', 'rca . setRemotePort ( 0 ) ;', 'try', 'RemoteUtils . parseServerAndPort ( ""server2 : port"" , rca ) ;', '}', 'assertEquals ( 0 , rca . getRemotePort ( ) ) ;']","['import java . util . Set ;', 'import java . util . Set ;', 'import java . util . ArrayList ;', 'import java . util . ArrayList ;', 'import java . util . Iterator ;', 'import java . util . Iterator ;', 'import java . io . IOException ;', 'import java . io . IOException ;', 'import org . apache . commons . jcs . auxiliary . disk . behavior . IDiskCacheAttributes . DiskLimitType ;', 'import java . util . Map ;']","['import org . apache . commons . jcs . auxiliary . disk . indexed . IndexedDiskCacheAttributes ;', 'import java . util . Map ;', 'import org . apache . commons . jcs . TestLogConfigurationUtil ;', 'import org . apache . log4j . Logger ;', 'import java . util . Map ;', 'import org . apache . commons . jcs . auxiliary . disk . indexed . IndexedDiskCache ;', 'import org . apache . log4j . Level ;', 'import org . apache . log4j . ConsoleAppender ;', 'import org . apache . commons . jcs . auxiliary . disk . indexed . IndexedDiskElementDescriptor ;', 'import org . apache . commons . jcs . auxiliary . disk . AbstractDiskCache ;']","['IElementEvent event = new ElementEvent ( element , eventType ) ;', 'IElementEvent < ICacheElement < K , V > > event = new ElementEvent < ICacheElement < K , V > > ( element , eventType ) ;', 'import java . util . EventObject ;', 'public class ElementEvent < T >', 'public ElementEvent ( Object source , ElementEventType elementEvent )', '@ SuppressWarnings ( ""unchecked"" )', 'public class ElementEvent', 'public ElementEvent ( T source , ElementEventType elementEvent )', 'implements IElementEvent', '}']","['if ( !CacheResolverFactory . class . equals ( defaultCacheKeyGenerator ) )', 'if ( !CacheKeyGenerator . class . equals ( defaultCacheKeyGenerator ) )']","['continue ;', 'try {', 'return props ;', 'if ( entry . getValue ( ) = = null )', 'if ( entry . getValue ( ) = = null )', 'try', 'InputStream inStream = null ;', 'import java . net . URL ;', 'try', '}']","['else if ( key instanceof GroupAttrName )', 'else if ( key instanceof GroupAttrName & & ( ( GroupAttrName < ? > ) key ) . attrName = = null )', 'for ( int i = 0 ; i < numToInsertGroup1 ; i + + )', 'import java . util . Set ;', 'String groupName2 = ""testgroup2"" ;', 'assertTrue ( ""Should have the word null in the error message . "" , e . getMessage ( ) . indexOf ( ""null"" ) ! = - 1 ) ;', '}', 'import java . util . Map ;', 'keys2 = access . getGroupKeys ( groupName2 ) ;', 'fail ( ""We should have received an exception since this key is already in the cache . "" ) ;']","['private static final long serialVersionUID = 1L ;', 'import org . apache . commons . jcs . engine . CacheStatus ;', 'import org . apache . commons . jcs . engine . CacheStatus ;', 'import org . apache . commons . jcs . engine . stats . behavior . IStats ;', 'import org . apache . commons . jcs . engine . stats . behavior . IStats ;', 'import org . apache . commons . jcs . engine . behavior . ICacheElement ;', 'import org . apache . commons . jcs . engine . behavior . ICacheElement ;', 'private static final long serialVersionUID = 1L ;', 'import java . io . IOException ;', 'import java . io . IOException ;']","['import java . util . Set ;', 'import java . util . Set ;', 'private static final long serialVersionUID = 1L ;', 'import java . io . IOException ;', 'import java . io . IOException ;', 'import java . util . Collections ;', 'import java . util . Collections ;', 'import java . util . Map ;', 'import java . util . Map ;', 'import java . util . HashMap ;']","['import java . util . Set ;', 'import java . util . Set ;', 'import java . io . StringWriter ;', 'import java . io . StringWriter ;', 'private static final long serialVersionUID = 1L ;', 'import java . io . IOException ;', 'import java . io . IOException ;', 'import java . util . Collections ;', 'import java . util . Collections ;', 'import java . util . Map ;']","['buf . append ( name + "" = "" + data ) ;', 'buf . append ( name ) . append ( "" = "" ) . append ( data ) ;']","['final JDBCDiskCachePoolAccess pool = getPoolAccess ( ) ;', 'elems . add ( new StatElement < AtomicInteger > ( ""Update Count"" , updateCount ) ) ;', 'exists = doesElementExist ( ce ) ;', 'getCount . incrementAndGet ( ) ;', 'poolAccess1 = JDBCDiskCachePoolAccessManager . createPoolAccess ( cattr ) ;', 'private AtomicInteger updateCount = new AtomicInteger ( 0 ) ;', 'incrementGetMatchingCount ( ) ;', 'elems . add ( new StatElement < AtomicInteger > ( ""Get Count"" , getCount ) ) ;', 'compositeCacheManager . getConfigurationProperties ( ) ) ;', 'import javax . sql . DataSource ;']","['BlockDiskCache < K , V > cache = new BlockDiskCache < K , V > ( idca ) ;', 'BlockDiskCache < K , V > cache = new BlockDiskCache < K , V > ( idca , elementSerializer ) ;', 'cache . setElementSerializer ( elementSerializer ) ;', 'cache . setElementSerializer ( elementSerializer ) ;', 'IndexedDiskCache < K , V > cache = new IndexedDiskCache < K , V > ( idca , elementSerializer ) ;', 'IndexedDiskCache < K , V > cache = new IndexedDiskCache < K , V > ( idca ) ;']","['this . blockDiskCacheAttributes . getBlockSizeBytes ( ) ) ;', 'getElementSerializer ( ) ) ;', 'this . dataFile = new BlockDisk ( new File ( rootDirectory , fileName + "" . data"" ) , getElementSerializer ( ) ) ;', 'this . dataFile = new BlockDisk ( new File ( rootDirectory , fileName + "" . data"" ) ,', 'this . blockDiskCacheAttributes . getBlockSizeBytes ( ) ,', 'this . keyFile = new File ( rootDirectory , fileName + "" . key"" ) ;', 'blockDiskCache . freeBlocks ( value ) ;', 'return maxSize > 0 & & contentSize . intValue ( ) > maxSize & & this . size ( ) > 1 ;', 'subLengthFromCacheSize ( oldValue ) ;', 'return super . put ( key , value ) ;']","['return Class . forName ( desc . getName ( ) , false , classLoader ) ;', 'public final String check ( final String name ) {', 'protected BlacklistClassResolver ( final String [ ] blacklist ) {', 'return Class . forName ( BLACKLIST CLASSES . check ( desc . getName ( ) ) , false , classLoader ) ;', 'if ( blacklist ! = null ) {', 'private static final BlacklistClassResolver BLACKLIST CLASSES = new BlacklistClassResolver ( System . getProperty (', 'private static final class BlacklistClassResolver {', '""org . codehaus . groovy . runtime . , org . apache . commons . collections . functors . , org . apache . xalan"" ) . split ( "" * , * "" ) ) ;', 'this . blacklist = blacklist ;', '}']","['try', 'for ( int i = 0 ; i < interfaces . length ; i + + ) {', '}', '""org . codehaus . groovy . runtime . , org . apache . commons . collections . functors . , org . apache . xalan"" ) ) ,', 'if ( blacklist ! = null ) {', 'private static final BlacklistClassResolver DEFAULT = new BlacklistClassResolver (', '""org . codehaus . groovy . runtime . , org . apache . commons . collections . functors . , org . apache . xalan"" ) . split ( "" * , * "" ) ) ;', 'return true ;', 'private static final class BlacklistClassResolver {', 'try {']","['public class MRUMemoryCache < K extends Serializable , V extends Serializable >', 'public class MRUMemoryCache < K , V >', 'import java . io . IOException ;', 'import java . io . IOException ;', 'import java . io . Serializable ;']","['import java . io . IOException ;', 'import java . io . IOException ;']","['allright . set ( !state ) ;', 'protected AtomicBoolean allright = new AtomicBoolean ( true ) ;', 'protected void setError ( boolean state )', '}', 'private AtomicBoolean allright = new AtomicBoolean ( true ) ;', '{', 'sStatement . executeQuery ( createSql . toString ( ) ) ;', 'finally', 'sStatement . executeQuery ( setupData [ i ] ) ;', 'iStatement . execute ( setupData [ i ] ) ;']","['import java . util . concurrent . ExecutorService ;', 'import java . util . concurrent . ExecutorService ;', 'import java . io . ObjectOutputStream ;', 'import java . io . ObjectOutputStream ;', 'terminated = true ;', 'catch ( SocketException e )', '}', 'import java . io . Serializable ;', 'import java . io . Serializable ;', 'catch ( IOException ex )']","['for ( int i = maxObjects ; i > 0 ; i - - )', 'for ( int i = maxObjects ; i > 1 ; i - - )', 'System . out . println ( cache . getKeySet ( ) ) ;']","['import java . util . Set ;', 'import java . util . Set ;', 'import java . util . ArrayList ;', 'import java . util . ArrayList ;', 'import java . io . IOException ;', 'throws IOException', 'import java . util . concurrent . Callable ;', 'ICacheServiceNonLocal < K , V > prevRemote = getRemoteCacheService ( ) ;', 'import java . util . concurrent . ThreadPoolExecutor ;', 'import java . io . IOException ;']","['final IElementAttributes copy = delegate . getElementAttributes ( ) . copy ( ) ;', 'final IElementAttributes copy = delegate . getElementAttributes ( ) . clone ( ) ;']","['String setupData [ ] = { ""create index iKEY on JCS STORE2 ( CACHE KEY , REGION ) "" } ;', 'finally', 'try', 'String setupData [ ] = { ""create index iKEY on JCS STORE2 ( CACHE KEY , REGION ) "" } ;', '}', 'iStatement . execute ( setupData [ i ] ) ;', 'catch ( SQLException e )', 'try', '{', '}']","['import java . util . Set ;', 'import java . util . Set ;', 'import java . util . HashMap ;', 'import java . util . HashMap ;', 'import java . io . IOException ;', 'import java . io . IOException ;', 'import java . util . Map ;', 'import java . util . Map ;', 'import java . io . BufferedReader ;', 'import java . io . BufferedReader ;']","['String setupData [ ] = { ""create index iKEY on JCS STORE2 ( CACHE KEY , REGION ) "" } ;', 'String setupData [ ] = { ""create index iKEY on "" + tableName + "" ( CACHE KEY , REGION ) "" } ;']","['if ( !alive )', 'setAlive ( initializeFileSystem ( cattr ) ) ;', 'import java . io . Serializable ;', 'private < T > boolean processRemove ( T key )', 'import org . apache . commons . jcs . auxiliary . disk . AbstractDiskCache ;', 'import org . apache . commons . jcs . auxiliary . AuxiliaryCacheAttributes ;', 'private static final long serialVersionUID = 1L ;', 'import org . apache . commons . logging . LogFactory ;', 'private < T extends Serializable > boolean processRemove ( T key )', 'public class FileDiskCache < K , V >']",['rca . setRemoteLocation ( location ) ;'],"['if ( doRecycle )', 'private void resetBytesFree ( )', 'return this . bytesFree ;', 'try', 'protected synchronized long getBytesFree ( )', '}', 'private synchronized void adjustBytesFree ( IndexedDiskElementDescriptor ded , boolean add )', 'this . bytesFree . addAndGet ( - amount ) ;', 'recycle . add ( ded ) ;', 'elems . add ( new StatElement < AtomicLong > ( ""Bytes Free"" , this . bytesFree ) ) ;']","['finally', 'pool = pool ;', 'PoolConfiguration config = loadConfig ( PROP NAME ROOT + "" . "" + name ) ;', 'PoolConfiguration config = loadConfig ( PROP NAME ROOT + "" . "" + name ) ;', 'try', 'ThreadPoolExecutor pool = pools . putIfAbsent ( name , pool ) ;', 'pool = pools . get ( name ) ;', 'if ( log . isDebugEnabled ( ) )', 'if ( log . isDebugEnabled ( ) )', '}']","['attributes . setLocalPort ( 1202 ) ;', 'private static final int LOCAL PORT = 12020 ;', 'attributes . setLocalPort ( LOCAL PORT ) ;']","['@ Test', '}', 'import org . junit . Test ;', '{', 'public void test ( )', 'assertEquals ( ""System property value is not reflected"" , testValue , jcs . getCacheAttributes ( ) . getMaxObjects ( ) ) ;', 'assertEquals ( ""System property value is not reflected . "" , testValue , jcs . getCacheAttributes ( ) . getMaxObjects ( ) ) ;', 'protected void setUp ( ) throws Exception', '}', 'super . setUp ( ) ;']","['import java . io . FileNotFoundException ;', 'this . numberOfBlocks . set ( ( int ) Math . ceil ( 1f * this . fc . size ( ) / blockSizeBytes ) ) ;', 'throws FileNotFoundException', 'throws IOException', 'public void testAppendToDisk ( ) throws Exception', '}', 'X value1 = new X ( ) ;', 'assertEquals ( value1 . string , diskCache . get ( ""1"" ) . getVal ( ) . string ) ;', 'String cacheName = ""testAppendToDisk"" ;', 'assertEquals ( 2 , diskCache . getKeySet ( ) . size ( ) ) ;']","['+ "" keys . Key file length [ "" + keyFile . length ( ) + "" ] "" ) ;', 'for ( int block : e . getValue ( ) )', '+ maxKeySize + "" will be available . "" ) ;', 'throw new IOException ( ""Inconsistent key file"" ) ;', '}', 'else if ( !log . isDebugEnabled ( ) )', 'for ( Entry < Integer , Set < K > > e : blockAllocationMap . entrySet ( ) )', 'Map < Integer , Set < K > > blockAllocationMap = new TreeMap < Integer , Set < K > > ( ) ;', 'keys . add ( e . getKey ( ) ) ;', 'ok = false ;']","['log . debug ( ""dumpCacheEntries > key = "" + me . ce . getKey ( ) + "" , val = "" + me . ce . getVal ( ) ) ;', 'elems . add ( new StatElement < AtomicLong > ( ""Put Count"" , putCnt ) ) ;', 'putCnt = new AtomicInteger ( 0 ) ;', 'if ( oldNode ! = null & & key . equals ( oldNode . getCacheElement ( ) . getKey ( ) ) )', 'missCnt = new AtomicInteger ( 0 ) ;', 'else if ( map . get ( key ) = = null )', 'log . error ( ""verifycache [ "" + getCacheName ( ) + "" ] : map does not contain key : "" + li . ce . getKey ( ) ) ;', '}', 'toSpool = last . ce ;', 'log . error ( ""verifycache [ "" + getCacheName ( ) + "" ] : linked list retrieval returned null for key : "" + key ) ;']","['ZombieEvent event = queue . take ( ) ;', 'queue . add ( event ) ;', 'import org . apache . commons . logging . LogFactory ;', 'import java . util . concurrent . ConcurrentLinkedQueue ;', 'private final BoundedQueue < ZombieEvent > queue ;', 'addQueue ( event ) ;', 'queue . add ( event ) ;', 'import org . apache . commons . logging . LogFactory ;', 'queue = new BoundedQueue < ZombieEvent > ( 0 ) ;', 'queue . poll ( ) ;']","['public class DefaultMemoryElementDescriptor < K , V >', 'public DefaultMemoryElementDescriptor ( ICacheElement < K , V > ce )', 'return ce ;', 'package org . apache . commons . jcs . engine . memory . util ;', 'private final ICacheElement < K , V > ce ;', 'this . ce = ce ;', 'public ICacheElement < K , V > getCacheElement ( )', '}', 'extends MemoryElementDescriptor < K , V >', '{']","['MemoryElementDescriptor < K , V > me = new MemoryElementDescriptor < K , V > ( ce ) ;', 'import org . apache . commons . jcs . engine . memory . util . DefaultMemoryElementDescriptor ;', 'MemoryElementDescriptor < K , V > me = new DefaultMemoryElementDescriptor < K , V > ( ce ) ;', 'map . put ( ce . getKey ( ) , new MemoryElementDescriptor < K , V > ( ce ) ) ;', 'import org . apache . commons . jcs . engine . memory . util . DefaultMemoryElementDescriptor ;', 'map . put ( ce . getKey ( ) , new DefaultMemoryElementDescriptor < K , V > ( ce ) ) ;', 'public class MemoryElementDescriptor < K , V >', 'public abstract class MemoryElementDescriptor < K , V >', 'return ce ;', 'public abstract ICacheElement < K , V > getCacheElement ( ) ;']","['assertEquals ( ""Values do not match"" , String . valueOf ( idx - 1 ) , res ) ;', 'assertEquals ( ""Value mismatch count should be 0"" , 0 , valueMismatchList . size ( ) ) ;', 'import java . util . ArrayList ;', 'if ( !String . valueOf ( idx - 1 ) . equals ( res ) )', 'import java . util . Collections ;', 'valueMismatchList = Collections . synchronizedList ( new ArrayList < String > ( ) ) ;', 'for ( String msg : valueMismatchList )', 'System . out . println ( msg ) ;', '}', 'valueMismatchList . add ( String . format ( ""Values do not match : % s - % s"" , String . valueOf ( idx - 1 ) , res ) ) ;']","['ICache < K , V > ic = rcm . getCache ( rca . getCacheName ( ) ) ;', 'ICache < K , V > ic = rcm . getCache ( rca ) ;', 'freeCache ( c ) ;', 'removeListenerFromCache ( c ) ;', 'if ( cache ! = null )', 'throw new IOException ( ""Problem finding server at [ "" + registry + "" ] "" , ex ) ;', 'log . info ( ""freeCache [ "" + cache . getCacheName ( ) + "" ] "" ) ;', 'try', '}', '}']","['protected void setCompositeCacheManager ( ICompositeCacheManager compositeCacheManager )', 'return noWaits . get ( 0 ) ;', 'noWaits [ i ] . removeAll ( ) ;', 'try', 'try', '}', 'if ( noWaits [ i ] . getStatus ( ) = = CacheStatus . ALIVE )', 'if ( nw . getStatus ( ) = = CacheStatus . ALIVE )', '}', 'nw . dispose ( ) ;']","['private static final long serialVersionUID = 32442324243243L ;', 'private IElementSerializer elementSerializer ;', 'private transient IElementSerializer elementSerializer = new StandardSerializer ( ) ;', 'getCacheManager ( ) . < K , V > getCache ( cacheName ) . localRemoveAll ( ) ;', '}', 'implements IRemoteCacheListener < K , V >', 'import java . io . Serializable ;', 'private ICompositeCacheManager cacheMgr ;', 'puts + + ;', 'public AbstractRemoteCacheListener ( IRemoteCacheAttributes irca , ICompositeCacheManager cacheMgr , IElementSerializer elementSerializer )']","['import java . util . Set ;', 'import java . util . Set ;', 'import java . util . Collections ;', 'import java . util . Collections ;', 'import java . util . Map ;', 'import java . util . Map ;', 'import java . util . HashMap ;', 'import java . util . HashMap ;', 'import java . io . Serializable ;', 'public class PartitionedCacheAccess < K , V >']","['scheduledExecutor . scheduleAtFixedRate (', 'future . cancel ( true ) ;', 'private ScheduledFuture < ? > future ;', 'if ( future ! = null )', '}', '{', 'import java . util . concurrent . ScheduledFuture ;', 'future = scheduledExecutor . scheduleAtFixedRate (', 'scheduledExecutor . scheduleAtFixedRate (', 'future . cancel ( true ) ;']","['int position = calculateByteOffsetForBlock ( block ) ;', 'long position = calculateByteOffsetForBlockAsLong ( block ) ;', 'long position = calculateByteOffsetForBlock ( blocks [ i ] ) ;', '@ Deprecated', '}', '{', 'long position = calculateByteOffsetForBlockAsLong ( blocks [ i ] ) ;', 'protected long calculateByteOffsetForBlockAsLong ( int block )', 'return block * blockSizeBytes ;']","['return block * blockSizeBytes ;', 'return ( long ) block * blockSizeBytes ;']","['File file = new File ( rafDir , fileName + "" . data"" ) ;', 'assertTrue ( ""Must not wrap round"" , offset > 0 ) ;', '}', 'public void testJCS156 ( ) throws Exception {', 'long offset = disk . calculateByteOffsetForBlockAsLong ( Integer . MAX VALUE ) ;', 'int blockSizeBytes = 4096 ;', 'assertEquals ( Integer . MAX VALUE * 4096L , offset ) ;', 'String fileName = ""testJCS156"" ;', 'BlockDisk disk = new BlockDisk ( file , blockSizeBytes , new StandardSerializer ( ) ) ;', 'file . delete ( ) ;']","['boolean isOptimizing = false ;', 'private boolean isRealTimeOptimizationEnabled = true ;', 'boolean isRealTimeOptimizationEnabled = true ;', 'private boolean doRecycle = true ;', 'boolean doRecycle = true ;', 'private boolean isShutdownOptimizationEnabled = true ;', 'boolean isShutdownOptimizationEnabled = true ;', 'private boolean isOptimizing = false ;']","['if ( k instanceof GroupAttrName & &', 'performSingleKeyRemoval ( fullKey ) ;', 'iter . remove ( ) ;', 'import org . apache . commons . jcs . engine . control . group . GroupId ;', 'if ( log . isDebugEnabled ( ) )', 'if ( log . isDebugEnabled ( ) )', '}', '}', 'int [ ] ded = this . keyStore . remove ( key ) ;', 'int [ ] ded = this . keyStore . remove ( key ) ;']","['public class RemoteHttpCacheDispatcherUniTest', 'public class RemoteHttpCacheDispatcherUnitTest']","['getHttpClient ( ) . getParams ( ) . setParameter ( ""http . protocol . version"" , HttpVersion . HTTP 1 0 ) ;', 'this . httpClient . executeMethod ( null , post , httpState ) ;', 'public void setConnectionManager ( MultiThreadedHttpConnectionManager connectionManager )', 'protected RemoteHttpCacheAttributes getRemoteHttpCacheAttributes ( )', 'setConnectionManager ( new MultiThreadedHttpConnectionManager ( ) ) ;', 'protected abstract void postProcessWebserviceCall ( HttpMethod post , HttpState httpState )', 'setRemoteHttpCacheAttributes ( remoteHttpCacheAttributes ) ;', '. setConnectionTimeout ( getRemoteHttpCacheAttributes ( ) . getConnectionTimeoutMillis ( ) ) ;', 'return httpClient ;', 'import java . io . IOException ;']","['boolean newT = true ;', 'protected void setupTable ( Connection cConn , String tableName ) throws SQLException', 'createSql . append ( ""CREATE TIME DATE , "" ) ;', 'createSql . append ( ""CREATE TIME TIMESTAMP , "" ) ;', 'try', 'setupTable ( cConn , attributes . getTableName ( ) ) ;', '}', 'if ( !""23000"" . equals ( e . getSQLState ( ) ) )', 'for ( int i = 0 ; i < setupData . length ; i + + )', 'createSql . append ( ""UPDATE TIME SECONDS BIGINT , "" ) ;']","['emptyBlocks . addLast ( Integer . valueOf ( blocksToFree [ i ] ) ) ;', 'emptyBlocks . offer ( Integer . valueOf ( blocksToFree [ i ] ) ) ;', 'import org . apache . commons . jcs . utils . struct . SingleLinkedList ;', 'Integer emptyBlock = emptyBlocks . poll ( ) ;', 'Integer emptyBlock = emptyBlocks . takeFirst ( ) ;', 'import java . util . concurrent . ConcurrentLinkedQueue ;', 'private final SingleLinkedList < Integer > emptyBlocks = new SingleLinkedList < Integer > ( ) ;', 'private final ConcurrentLinkedQueue < Integer > emptyBlocks = new ConcurrentLinkedQueue < Integer > ( ) ;', 'size - - ;', 'private Node < T > tail = head ;']","['if ( o instanceof IndexedDiskElementDescriptor )', 'if ( o = = null )', 'int oLen = o . len ;', 'return 0 ;', 'if ( oLen = = len )', '}', 'return 0 ;', 'IndexedDiskElementDescriptor ided = ( IndexedDiskElementDescriptor ) o ;', 'else if ( oLen < len )', '{']","['return getStatistics ( ) . toString ( ) ;', 'public String getStats ( )', '}', '{', '@ Override']","['log . error ( logCacheName + ""Failure getting matching from disk , pattern = "" + pattern , e ) ;', 'new ConcurrentSkipListSet < IndexedDiskElementDescriptor > ( new PositionComparator ( ) ) ;', 'private void initializeKeysAndData ( IndexedDiskCacheAttributes cattr ) throws IOException , InterruptedException', 'IndexedDiskElementDescriptor rep = recycle . ceiling ( ded ) ;', 'try', '}', 'private void initializeStoreFromPersistedData ( ) throws InterruptedException , IOException', 'protected void loadKeys ( )', '}', 'Set < K > keyArray = null ;']","['setMaxRecycleBinSize ( maxRecycleBinSize ) ;', 'return maxRecycleBinSize ;', 'private int maxRecycleBinSize = DEFAULT maxRecycleBinSize ;', 'private static final int DEFAULT maxRecycleBinSize = 5000 ;', '}', 'this . maxRecycleBinSize = maxRecycleBinSize ;', '{', 'public void setMaxRecycleBinSize ( int maxRecycleBinSize )', 'public int getMaxRecycleBinSize ( )', 'str . append ( "" \\ n maxRecycleBinSize = "" + maxRecycleBinSize ) ;']","['import org . apache . catalina . startup . Tomcat ;', 'import org . apache . catalina . startup . Tomcat ;', 'import org . apache . tomcat . util . descriptor . web . FilterMap ;', 'import org . apache . catalina . deploy . FilterMap ;', 'import org . apache . tomcat . util . descriptor . web . FilterDef ;', 'import org . apache . catalina . deploy . FilterDef ;', 'import org . apache . catalina . core . StandardContext ;', 'import org . apache . catalina . core . StandardContext ;', 'import org . apache . catalina . Context ;', 'import org . apache . catalina . Context ;']","['public static < K , V > CacheAccess < K , V > defineRegion ( String name )', 'public static < K , V > CacheAccess < K , V > getInstance ( String region , ICompositeCacheAttributes icca , IElementAttributes eattr )', 'public static < K , V > CacheAccess < K , V > defineRegion ( String name , ICompositeCacheAttributes cattr )', 'public static < K , V > CacheAccess < K , V > defineRegion ( String name )', 'import java . util . Properties ;', 'return new CacheAccess < K , V > ( cache ) ;', 'public static < K , V > CacheAccess < K , V > defineRegion ( String name , ICompositeCacheAttributes cattr , IElementAttributes attr )', 'import java . util . Properties ;', 'CompositeCache < K , V > cache = getCacheManager ( ) . getCache ( region , icca , eattr ) ;', 'throws CacheException']","['shutdownObservers . add ( observer ) ;', 'while ( ( observer = shutdownObservers . poll ( ) ) ! = null )', 'for ( IShutdownObserver observer : shutdownObservers )', 'import java . util . concurrent . LinkedBlockingDeque ;', 'cattr . setCacheName ( cattr . getCacheName ( ) ) ;', 'shutdownObservers . push ( observer ) ;', 'private final LinkedHashSet < IShutdownObserver > shutdownObservers = new LinkedHashSet < IShutdownObserver > ( ) ;', '}', 'import java . util . LinkedHashSet ;', 'if ( !shutdownObservers . contains ( observer ) )']","['void initialize ( ICacheListener < K , V > listener , long listenerId , String cacheName , int maxFailure ,', 'import java . io . IOException ;', 'int waitBeforeRetry , String threadPoolName ) ;', 'import java . io . IOException ;']","['log . debug ( ""Before removing [ "" + obj + "" ] the listenerSet = "" + listenerSet ) ;', 'log . debug ( ""Before removing [ "" + obj + "" ] the listenerSet = "" + listenerSet ) ;', 'for ( Map . Entry < String , Set < ICacheListener < ? , ? > > > entry : cacheMap . entrySet ( ) )', 'for ( Map . Entry < String , Set < ICacheListener < ? , ? > > > entry : cacheMap . entrySet ( ) )', 'new HashMap < String , Set < ICacheListener < ? , ? > > > ( ) ;', 'try', 'try', 'if ( log . isDebugEnabled ( ) )', 'log . info ( ""Adding listener to cache watch . ICacheListener = "" + listener', 'log . info ( ""Adding listener to cache watch . ICacheListener = "" + listener']","['log . debug ( cacheName + "" : MemoryCache quiet miss for "" + key ) ;', 'log . debug ( getCacheName ( ) + "" : MemoryCache quiet hit for "" + key ) ;', 'private String cacheName ;', 'return cache . getCacheName ( ) ;', 'this . cacheName = hub . getCacheName ( ) ;', 'log . debug ( getCacheName ( ) + "" : MemoryCache quiet miss for "" + key ) ;', 'log . debug ( cacheName + "" : MemoryCache quiet hit for "" + key ) ;', 'return cacheName ;']","['public synchronized ICacheElement < K , V > get ( K key )', 'public ICacheElement < K , V > get ( K key )', 'synchronized ( this )', 'return new LinkedHashSet < K > ( map . keySet ( ) ) ;', 'throws IOException', 'public boolean remove ( K key )', 'return null ;', 'public IStats getStatistics ( )', 'MemoryElementDescriptor < K , V > me = map . get ( key ) ;', 'return me . getCacheElement ( ) ;']","['public Map < K , MemoryElementDescriptor < K , V > > createMap ( )', 'public ConcurrentMap < K , MemoryElementDescriptor < K , V > > createMap ( )', 'import java . util . concurrent . ConcurrentMap ;', 'public Map < K , MemoryElementDescriptor < K , V > > createMap ( )', 'public ConcurrentMap < K , MemoryElementDescriptor < K , V > > createMap ( )', 'import java . util . concurrent . ConcurrentMap ;']","['throws IOException', 'private void trimStrongReferences ( ) throws IOException', 'private void trimStrongReferences ( )']","['log . debug ( getCacheName ( ) + ""Spooled element to disk : "" + element . getKey ( ) ) ;', 'waterfal ( element ) ;', 'if ( log . isDebugEnabled ( ) )', 'protected class LHMSpooler', '}', '{', 'public class LHMSpooler', 'spoolToDisk ( element ) ;', 'getCompositeCache ( ) . spoolToDisk ( element ) ;', '@ SuppressWarnings ( ""synthetic - access"" )']","['elems . add ( new StatElement < AtomicLong > ( ""Put Count"" , putCnt ) ) ;', 'elems . add ( new StatElement < Integer > ( ""List Size"" , Integer . valueOf ( list . size ( ) ) ) ) ;', 'try', 'log . info ( ""initialized MemoryCache for "" + getCacheName ( ) ) ;', '}', 'IStats stats = super . getStatistics ( ) ;', 'private AtomicLong hitCnt ;', 'import java . util . List ;', '@ Override', 'List < IStatElement < ? > > elems = stats . getStatElements ( ) ;']","['purgatory = new LRUMapJCS < K , PurgatoryElement < K , V > > ( diskCacheAttributes . getMaxPurgatorySize ( ) ) ;', 'purgatory = new LRUMap < K , PurgatoryElement < K , V > > ( diskCacheAttributes . getMaxPurgatorySize ( ) ) ;', 'import org . apache . commons . jcs . utils . struct . LRUMap ;', 'super ( ) ;', 'import org . apache . commons . logging . LogFactory ;', 'package org . apache . commons . jcs . auxiliary . disk ;', 'public class LRUMapJCS < K , V >', 'super ( maxKeySize ) ;', 'extends LRUMap < K , V >', 'public LRUMapJCS ( )']","['+ ""CacheManager = "" + mgrStr + "" , "" + ""Cache = "" + name ) ;', 'final String cacheStr = name . replaceAll ( "" , | : | = | \\ n"" , "" . "" ) ;', '+ ""CacheManager = "" + mgrStr + "" , "" + ""Cache = "" + cacheStr ) ;']","['int missCnt = 0 ;', 'elems . add ( new StatElement < Long > ( ""Miss Count"" , Long . valueOf ( missCnt ) ) ) ;', 'LRUElementDescriptor < K , V > first = list . getFirst ( ) ;', 'if ( log . isDebugEnabled ( ) )', '+ dumpCacheSize ( ) ) ;', 'if ( old ! = null & & key . equals ( old . getKey ( ) ) )', 'try', '}', 'public void setChunkSize ( int chunkSize )', 'old = map . put ( key , me ) ;']","['public Object getMaxCounter ( )', 'this ( ) ;', 'import java . util . concurrent . atomic . AtomicInteger ;', 'private int maxObjects = - 1 ;', 'int maxObjects = - 1 ;', '}', 'AtomicInteger counter = new AtomicInteger ( 0 ) ;', '{', 'super ( ) ;', 'return maxObjects ;']","['map . setChunkSize ( 1 ) ;', 'import java . util . Iterator ;', 'import java . util . Iterator ;', 'Map < String , String > cache = new LRUMap < String , String > ( tries ) ;', 'import org . apache . commons . jcs . JCSvsHashtablePerformanceTest ;', 'import java . util . Map ;', 'LRUMap < String , String > cache = new LRUMap < String , String > ( tries ) ;', 'cache2Name = ""LRUMapJCS ( commons ) "" ;', 'import java . util . Map ;', 'import org . apache . commons . jcs . JCSvsHashtablePerformanceTest ;']","['while ( isAlive ( ) )', 'while ( CacheEventQueue . this . isAlive ( ) )', 'if ( event ! = null & & isWorking ( ) & & isAlive ( ) )', 'if ( event ! = null & & isWorking ( ) & & CacheEventQueue . this . isAlive ( ) )']","['private static int minimumPoolSize DEFAULT = 4 ;', 'private static final int boundarySize DEFAULT = 2000 ;', 'private static int maximumPoolSize DEFAULT = 150 ;', 'private static final int startUpSize DEFAULT = minimumPoolSize DEFAULT ;', 'private static int keepAliveTime DEFAULT = 1000 * 60 * 5 ;', 'private static final int minimumPoolSize DEFAULT = Runtime . getRuntime ( ) . availableProcessors ( ) ;', 'private static int startUpSize DEFAULT = 4 ;', 'private static final int maximumPoolSize DEFAULT = 150 ;', 'private static WhenBlockedPolicy whenBlockedPolicy DEFAULT = WhenBlockedPolicy . RUN ;', 'private static final WhenBlockedPolicy whenBlockedPolicy DEFAULT = WhenBlockedPolicy . RUN ;']","['if ( processorThread ! = null )', 'TimeUnit . MILLISECONDS ,', '/ / / / / / / / / / / / / / / / / / / / / / / / / / / / /', 'getWaitToDieMillis ( ) ,', 'elems . add ( new StatElement < Boolean > ( ""Alive"" , Boolean . valueOf ( this . isAlive ( ) ) ) ) ;', 'super ( listener , listenerId , cacheName , maxFailure , waitBeforeRetry , null ) ;', 'try', 'LinkedBlockingQueue < Runnable > queue = new LinkedBlockingQueue < Runnable > ( ) ;', 'return queue . isEmpty ( ) ;', 'super . initialize ( listener , listenerId , cacheName , maxFailure , waitBeforeRetry ) ;']","['import org . apache . commons . jcs . auxiliary . remote . MockRemoteCacheListener ;', 'import org . apache . commons . jcs . auxiliary . remote . MockRemoteCacheListener ;', 'import org . apache . commons . jcs . engine . behavior . ICacheListener ;', 'import org . apache . commons . jcs . engine . behavior . ICacheListener ;', 'assertTrue ( ""Wrong type"" , result instanceof CacheEventQueue ) ;', 'import org . apache . commons . jcs . engine . behavior . ICacheEventQueue ;', 'import org . apache . commons . jcs . engine . behavior . ICacheEventQueue ;', 'assertTrue ( ""Wrong type"" , result . getQueueType ( ) = = QueueType . POOLED ) ;', 'assertTrue ( ""Wrong type"" , result instanceof PooledCacheEventQueue ) ;', 'import org . apache . commons . jcs . engine . behavior . ICacheEventQueue . QueueType ;']","['suite . addTest ( new EventQueueConcurrentLoadTest ( ""testStopProcessing1"" )', 'import org . apache . commons . jcs . engine . behavior . ICacheElement ;', '} ) ;', 'import org . apache . commons . jcs . engine . behavior . ICacheListener ;', 'suite . addTest ( new EventQueueConcurrentLoadTest ( ""testStopProcessing2"" )', 'public void runStopProcessingTest ( )', 'import org . apache . commons . jcs . engine . behavior . ICacheListener ;', 'queue . stopProcessing ( ) ;', 'public void runTest ( )', '}']","['private int minimumPoolSize = 4 ;', 'private int minimumPoolSize = DEFAULT MINIMUM POOL SIZE ;', 'private int keepAliveTime = 1000 * 60 * 5 ;', 'private WhenBlockedPolicy whenBlockedPolicy = DEFAULT WHEN BLOCKED POLICY ;', 'private int maximumPoolSize = 150 ;', 'private int startUpSize = DEFAULT MINIMUM POOL SIZE ;', 'private int boundarySize = 2000 ;', 'private int boundarySize = DEFAULT BOUNDARY SIZE ;', 'private WhenBlockedPolicy whenBlockedPolicy = WhenBlockedPolicy . RUN ;', 'private static final int DEFAULT BOUNDARY SIZE = 2000 ;']","['setAlive ( false ) ;', 'put ( new DisposeEvent ( ) ) ;', 'private final AtomicBoolean alive = new AtomicBoolean ( false ) ;', 'return true ;', '}', 'public void addPutEvent ( ICacheElement < K , V > ce )', 'log . warn ( ""Not enqueuing RemoveAll Event for [ "" + this + "" ] because it\'s non - functional . "" ) ;', 'public void addRemoveEvent ( K key )', 'else if ( log . isWarnEnabled ( ) )', 'destroy ( ) ;']","['import java . util . Set ;', 'import java . util . Set ;', 'ICacheEventQueue < String , String > originalQueue = noWait . getCacheEventQueue ( ) ;', 'import org . apache . commons . jcs . engine . behavior . ICacheEventQueue ;', 'import org . apache . commons . jcs . engine . behavior . ICacheEventQueue ;', 'import org . apache . commons . jcs . utils . timing . SleepUtil ;', 'import org . apache . commons . jcs . utils . timing . SleepUtil ;', 'import java . util . Map ;', 'import java . util . Map ;', 'import java . util . HashMap ;']","['private final ICacheElement < K , V > ce ;', 'return getPayload ( ) ;', 'this . ce = ce ;', 'return ce ;', 'super ( ce ) ;', 'super ( null ) ;']","['if ( k instanceof String & & ( ( String ) k ) . startsWith ( key . toString ( ) ) )', 'protected void lockedRemoveElement ( MemoryElementDescriptor < K , V > me )', 'public boolean remove ( K key ) throws IOException', 'return ce ;', 'public final ICacheElement < K , V > get ( K key ) throws IOException', 'protected abstract void adjustListForGet ( MemoryElementDescriptor < K , V > me ) ;', 'try', 'list . removeAll ( ) ;', 'if ( k instanceof GroupAttrName & & ( ( GroupAttrName < ? > ) k ) . groupId . equals ( ( ( GroupAttrName < ? > ) key ) . groupId ) )', 'public ICacheElement < K , V > get ( K key ) throws IOException']","['static final Log log = LogFactory . getLog ( AbstractDoubleLinkedListMemoryCache . class ) ;', 'private static final Log log = LogFactory . getLog ( AbstractDoubleLinkedListMemoryCache . class ) ;']","['import org . apache . commons . jcs . engine . memory . util . DefaultMemoryElementDescriptor ;', 'MemoryElementDescriptor < K , V > me = new MemoryElementDescriptor < K , V > ( ce ) ;', 'MemoryElementDescriptor < K , V > me = new DefaultMemoryElementDescriptor < K , V > ( ce ) ;', 'import org . apache . commons . jcs . engine . memory . util . DefaultMemoryElementDescriptor ;', 'map . put ( ce . getKey ( ) , new MemoryElementDescriptor < K , V > ( ce ) ) ;', 'map . put ( ce . getKey ( ) , new DefaultMemoryElementDescriptor < K , V > ( ce ) ) ;', 'return getPayload ( ) ;', '@ Deprecated', 'public ICacheElement < K , V > getCacheElement ( )', '}']","['log . info ( ""Exceeded maxIdle : "" + element . getKey ( ) ) ;', 'log . debug ( ""Exceeded maxIdle : "" + element . getKey ( ) ) ;']","['return ( IElementAttributes ) super . clone ( ) ;', 'return c ;', 'c . setCreateTime ( ) ;', 'ElementAttributes c = ( ElementAttributes ) super . clone ( ) ;']","['usePoolForGet = true ;', 'usePoolForGet = true ;', '}', 'catch ( IOException ex )', '{', 'catch ( Exception ex )', 'if ( pool ! = null )']","['import org . apache . commons . jcs . engine . control . event . behavior . IElementEvent ;', 'ElementAttributes elem1 = new ElementAttributes ( ) ;', 'import org . apache . commons . jcs . JCS ;', 'import org . apache . commons . jcs . engine . control . event . behavior . IElementEvent ;', 'import org . apache . commons . jcs . access . CacheAccess ;', 'import org . apache . commons . jcs . JCS ;', 'import org . apache . commons . jcs . engine . behavior . IElementAttributes ;', 'import org . apache . commons . jcs . access . CacheAccess ;', 'import org . apache . commons . jcs . engine . control . event . behavior . IElementEventHandler ;', 'Thread . sleep ( 10 ) ;']","['pool = ThreadPoolManager . getInstance ( ) . getPool ( getRemoteCacheAttributes ( ) . getThreadPoolName ( ) ) ;', 'import java . util . concurrent . ExecutorService ;', 'import java . util . concurrent . ThreadPoolExecutor ;', 'pool = ThreadPoolManager . getInstance ( ) . getExecutorService ( getRemoteCacheAttributes ( ) . getThreadPoolName ( ) ) ;', 'private ThreadPoolExecutor pool = null ;', 'elems . add ( new StatElement < ExecutorService > ( ""Pool"" , pool ) ) ;', 'elems . add ( new StatElement < Integer > ( ""Pool Size"" , Integer . valueOf ( pool . getPoolSize ( ) ) ) ) ;', 'private ExecutorService pool = null ;', 'elems . add ( new StatElement < Integer > ( ""Maximum Pool Size"" , Integer . valueOf ( pool . getMaximumPoolSize ( ) ) ) ) ;', '0 ,']","['new PoolConfiguration ( false , 0 , 1 , 0 , getWaitToDieMillis ( ) , WhenBlockedPolicy . BLOCK , 0 ) ,', 'new PoolConfiguration ( false , 0 , 1 , 0 , getWaitToDieMillis ( ) , WhenBlockedPolicy . RUN , 0 ) ,']","['System . out . println ( ""totalSize inserted "" + DiskTestObjectUtil . totalSize ( elements , numberToInsert ) ) ;', 'System . out . println ( ""file sizeBeforeRemove "" + sizeBeforeRemove ) ;']","['cacheMgr . shutDown ( ) ;', 'if ( cacheMgr ! = null & & cacheMgr . isInitialized ( ) )', 'cacheMgr = null ;', '}', 'public static void shutdown ( )', '{', 'synchronized ( JCS . class )']","['log . error ( ""Could not retrieve cache manager instance"" , e ) ;', 'log . debug ( ""contextInitialized"" ) ;', 'if ( log . isInfoEnabled ( ) )', 'import org . apache . commons . jcs . JCS ;', 'try', 'log . debug ( ""contextDestroyed , shutting down JCS . "" ) ;', 'CompositeCacheManager . getInstance ( ) . shutDown ( ) ;', 'if ( log . isDebugEnabled ( ) )', '}', 'JCS . shutdown ( ) ;']","['import java . util . Set ;', '}', 'import java . lang . annotation . Annotation ;', 'return extractDefaults ( type ) ;', 'import java . lang . reflect . Method ;', 'import java . lang . reflect . Proxy ;', 'import java . util . concurrent . ConcurrentHashMap ;', 'import java . util . concurrent . ConcurrentMap ;', 'import java . util . Collection ;', 'continue ;']","['public class ClassLoaderAwareCache < K extends Serializable , V extends Serializable > implements Cache < K , V >', 'public class ClassLoaderAwareCache < K , V > implements Cache < K , V >']","['return getCache ( cattr , this . defaultElementAttr ) ;', 'return getCache ( cattr , getDefaultElementAttributes ( ) ) ;', 'return getCache ( cacheName , this . defaultCacheAttr . clone ( ) ) ;', 'return getCache ( cacheName , getDefaultCacheAttributes ( ) ) ;']","['log . info ( ""In DISPOSE , [ "" + this . cacheAttr . getCacheName ( ) + "" ] fromRemote [ "" + fromRemote + "" ] "" ) ;', 'log . info ( ""In DISPOSE , [ "" + this . cacheAttr . getCacheName ( ) + "" ] fromRemote [ "" + fromRemote + "" ] "" ) ;', 'if ( log . isInfoEnabled ( ) )', 'cacheManager . freeCache ( getCacheName ( ) , fromRemote ) ;', 'return ;', 'if ( alive . compareAndSet ( true , false ) = = false )', 'if ( alive . compareAndSet ( true , false ) = = false )', 'if ( log . isInfoEnabled ( ) )', 'private CompositeCacheManager cacheManager = null ;', 'this . cacheManager = manager ;']","['setElementSerializer ( elementSerializer ) ;', 'this . noWaits = new ArrayList < RemoteCacheNoWait < K , V > > ( noWaits ) ;', 'setCacheEventLogger ( cacheEventLogger ) ;', 'this . remoteCacheAttributes = rca ;', 'RemoteCacheNoWait < K , V > rcnw = ( RemoteCacheNoWait < K , V > ) nw ;', '( ( RemoteCache < K , V > ) rcnw . getRemoteCache ( ) ) . setFacade ( this ) ;', 'this . remoteCacheAttributes = rca ;', '( ( RemoteCache < K , V > ) nw . getRemoteCache ( ) ) . setFacade ( this ) ;', 'if ( log . isDebugEnabled ( ) )', 'public AbstractRemoteCacheNoWaitFacade ( List < RemoteCacheNoWait < K , V > > noWaits , IRemoteCacheAttributes rca ,']","['if ( propFile ! = null & & !propFile . startsWith ( "" / "" ) )', 'if ( null = = is )', '}', 'is = RemoteUtils . class . getResourceAsStream ( "" / "" + propFile ) ;', '{', 'hub . configure ( prop ) ;', 'Properties prop = null ;', 'if ( prop = = null )', 'try', 'private void init ( String prop ) throws RemoteException']","['import java . lang . annotation . Annotation ;', 'import java . lang . annotation . Annotation ;', 'final Object [ ] args = delegate . getParameters ( ) ;', 'final Object [ ] parameters = delegate . getParameters ( ) ;', 'import java . util . HashSet ;', 'private static final Object [ ] EMPTY ARGS = new Object [ 0 ] ;', 'final Object [ ] args = parameters = = null ? EMPTY ARGS : parameters ;', 'import java . util . HashSet ;']","['if ( dependent )', 'return cachePutAfter ;', 'import javax . enterprise . context . Dependent ;', 'LOGGER . warning ( re . getMessage ( ) ) ;', 'public CacheDefaults findDefaults ( final InvocationContext ic )', 'set . addAll ( Arrays . asList ( parameterAnnotation ) ) ;', 'name . append ( "" ) "" ) ;', 'final CacheRemoveAll cacheRemoveAll = ic . getMethod ( ) . getAnnotation ( CacheRemoveAll . class ) ;', '}', 'null : cacheResolverFactoryFor ( defaults , cacheResult . cacheResolverFactory ( ) ) ;']","['methods . put ( key , methodMeta ) ;', 'parametersAsArray [ i ] = newCacheInvocationParameterImpl ( parameterTypes [ i ] , args [ i ] , parameterAnnotations . get ( i ) , i ) ;', 'parametersAsArray [ outIdx ] = newCacheInvocationParameterImpl ( parameterTypes [ i ] , args [ i ] , parameterAnnotations . get ( i ) , i ) ;', 'int outIdx = 0 ;', 'outIdx + + ;', 'final GeneratedCacheKey cacheKey = methodMeta . getCacheResultKeyGenerator ( ) . generateCacheKey ( context ) ;', 'final CacheResolverFactory cacheResolverFactory = methodMeta . getCachePutResolverFactory ( ) ;', 'final CacheResolverFactory cacheResolverFactory = methodMeta . getCacheResultResolverFactory ( ) ;', 'final String cacheName = methodMeta . getCachePutCacheName ( ) ;', 'final String cacheName = methodMeta . getCacheResultCacheName ( ) ;']","['log . debug ( cacheAttr . getCacheName ( ) + "" - Memory cache hit , but element expired"" ) ;', 'if ( debugEnabled )', 'if ( log . isDebugEnabled ( ) )', 'log . debug ( cacheAttr . getCacheName ( ) + "" - Memory cache hit , but element expired"" ) ;', '}', '}', 'log . debug ( cacheAttr . getCacheName ( ) + "" - Memory cache hit"" ) ;', 'if ( element = = null )', '{', 'log . debug ( cacheAttr . getCacheName ( ) + "" - Memory cache hit"" ) ;']","['return child ;', 'try {', '@ Test', '} ) ) ;', 'public Object getTimer ( )', '} ) ;', '}', 'import javax . cache . annotation . CacheResult ;', 'import java . lang . reflect . Proxy ;', '@ Override']","['private MethodKey ( final Method delegate )', 'final Class < ? > refType = findKeyType ( ic . getTarget ( ) ) ;', 'return delegate . equals ( classKey . delegate ) ;', 'if ( null = = target )', 'final MethodKey key = new MethodKey ( mtd ) ;', 'private Class < ? > findKeyType ( final Object target )', 'this . hash = delegate . hashCode ( ) ;', 'return target . getClass ( ) ;', 'this . hash = 31 * delegate . hashCode ( ) + ( base = = null ? 0 : base . hashCode ( ) ) ;', 'return null ;']","['return new CacheAccess < K , V > ( cache ) ;', 'public static < K , V > CacheAccess < K , V > defineRegion ( String name )', 'CompositeCache < K , V > cache = getCacheManager ( ) . getCache ( name ) ;', 'throws CacheException', '@ Deprecated', '}', 'CompositeCache < K , V > cache = getCacheManager ( ) . getCache ( name , cattr , attr ) ;', 'CompositeCache < K , V > cache = getCacheManager ( ) . getCache ( name , cattr ) ;', '{', 'public static < K , V > CacheAccess < K , V > defineRegion ( String name , ICompositeCacheAttributes cattr , IElementAttributes attr )']","['buf . append ( "" \\ n MaxActive [ "" + getMaxActive ( ) + "" ] "" ) ;', 'buf . append ( "" \\ n MaxActive [ "" + getMaxTotal ( ) + "" ] "" ) ;', 'public int getMaxActive ( )', 'public int getMaxTotal ( )', 'public static final int DEFAULT MAX ACTIVE = 10 ;', 'this . maxTotal = maxActive ;', 'this . maxActive = maxActive ;', 'public static final int DEFAULT MAX TOTAL = 10 ;', 'private int maxActive = DEFAULT MAX ACTIVE ;', 'return maxTotal ;']","['String httpVersion = getRemoteHttpCacheAttributes ( ) . getHttpVersion ( ) ;', '. setConnectTimeout ( getRemoteHttpCacheAttributes ( ) . getConnectionTimeoutMillis ( ) )', 'import org . apache . commons . httpclient . MultiThreadedHttpConnectionManager ;', 'builder . setMaxConnTotal ( getRemoteHttpCacheAttributes ( ) . getMaxConnectionsPerHost ( ) ) ;', 'this . connectionManager = new MultiThreadedHttpConnectionManager ( ) ;', 'String httpVersion = getRemoteHttpCacheAttributes ( ) . getHttpVersion ( ) ;', '}', '}', 'this . connectionManager . getParams ( ) . setSoTimeout ( getRemoteHttpCacheAttributes ( ) . getSocketTimeoutMillis ( ) ) ;', 'import org . apache . http . client . HttpClient ;']","['return ;', 'return ;', 'package org . apache . commons . jcs . engine . control ;', 'manager . addCache ( ""simple cache"" , cache ) ;', 'assertEquals ( ""The cache was NOT disposed during release!"" , CacheStatus . DISPOSED , cache . getStatus ( ) ) ;', 'extends TestCase', 'CompositeCacheAttributes cacheAttributes = new CompositeCacheAttributes ( ) ;', 'public void testRelease ( )', 'CompositeCacheManager manager = CompositeCacheManager . getInstance ( ) ;', '}']","['String message = ""Successfully rebound server to registry [ "" + registry + "" ] . "" ;', 'createAndRegister ( serviceName ) ;', 'registerServer ( registry ) ;', 'protected void registerServer ( String serviceName )', 'if ( reg ! = null )', '""Could not start registry [ "" + serviceName + "" ] . "" ) ;', '""Could not start registry [ "" + registry + "" ] . "" ) ;', '}', 'Registry reg = RemoteUtils . createRegistry ( registryPort ) ;', 'Remote server = RemoteCacheServerFactory . getRemoteCacheServer ( ) ;']","['remove ( key ) ;', 'remove ( element . getKey ( ) ) ;', 'remove ( element . getKey ( ) ) ;', '}', 'missCountExpired . incrementAndGet ( ) ;', 'doExpires ( element ) ;', 'protected void doExpires ( ICacheElement < K , V > element ) {', 'missCountExpired . incrementAndGet ( ) ;', ': new CompositeCache < K , V > ( cca , ea ) ;', 'protected < K , V > CompositeCache < K , V > newCache (']","['if ( debugEnabled )', 'log . debug ( cacheAttr . getCacheName ( ) + "" - Memory cache hit , but element expired"" ) ;', 'log . debug ( cacheAttr . getCacheName ( ) + "" - Memory cache hit , but element expired"" ) ;', 'if ( log . isDebugEnabled ( ) )', 'remove ( key ) ;', '}', '}', 'doExpires ( element ) ;', 'if ( element = = null )', 'log . debug ( cacheAttr . getCacheName ( ) + "" - Memory cache hit"" ) ;']","['ObjectOutputStream out = null ;', 'try ( ObjectOutputStream out = new ObjectOutputStream ( counter ) ; )', 'try', '}', 'catch ( IOException e )', 'out = new ObjectOutputStream ( counter ) ;', '{', 'if ( out ! = null )', 'out . close ( ) ;', 'ObjectOutputStream oos = new ObjectOutputStream ( bos ) ;']","['HashMap < K , V > unwrappedResults = new HashMap < K , V > ( ) ;', 'unwrappedResults = wrappedResults . entrySet ( )', 'if ( element ! = null )', '. collect ( Collectors . toMap (', 'for ( Map . Entry < K , ICacheElement < K , V > > entry : wrappedResults . entrySet ( ) )', '. stream ( )', '}', '}', 'ICacheElement < K , V > element = entry . getValue ( ) ;', '{']","['entry - > entry . getValue ( ) ) ) ;', '. filter ( element - > element ! = null )', '. collect ( Collectors . toMap (', '. map ( key - > {', 'return null ;', 'return null ;', 'try', 'try', 'return get ( key ) ;', '} )']","['return IOUtils . toByteArray ( in ) ;', 'return IOUtils . toByteArray ( in , file . length ( ) ) ;']","['line = reader . readLine ( ) ;', 'seenCR = false ;', 'return reader . getFilePointer ( ) ;', 'reader . seek ( pos ) ;', 'String line = reader . readLine ( ) ;', 'line = readLine ( reader ) ;', 'while ( ( ch = reader . read ( ) ) ! = - 1 ) {', 'return null ;', 'long pos = reader . getFilePointer ( ) ;', 'String line = readLine ( reader ) ;']","['public static final BigInteger ONE YB = ONE ZB . multiply ( BigInteger . valueOf ( ONE EB ) ) ;', 'public static final long ONE TB = ONE KB * ONE GB ;', 'public static final long ONE PB = ONE KB * ONE TB ;', 'public static final BigInteger ONE ZB = BigInteger . valueOf ( ONE KB ) . multiply ( BigInteger . valueOf ( ONE EB ) ) ;', 'import java . math . BigInteger ;', 'public static final long ONE EB = ONE KB * ONE PB ;']","['super . close ( ) ;', 'throw e ;', 'public TeeOutputStream ( OutputStream out , OutputStream branch ) {', '} catch ( IOException e ) {', 'public void close ( ) throws IOException {', '}', 'super . close ( ) ;', 'public TeeOutputStream ( OutputStream out , OutputStream branch ) {', 'this . branch . close ( ) ;', 'try {']","['return this . cbuf . remaining ( ) ;', 'this . cbuf . position ( this . mark ) ;', 'this . bbuf = ByteBuffer . allocate ( 124 ) ;', 'this . cbuf . get ( ) ;', 'while ( n > 0 & & this . cbuf . hasRemaining ( ) ) {', 'int chunk = Math . min ( this . bbuf . remaining ( ) , len ) ;', 'while ( len > 0 ) {', 'public class CharSequenceInputStream extends InputStream {', 'public void mark ( int readlimit ) {', 'this . bbuf . get ( b , off , chunk ) ;']","['encoding = ( m . find ( ) ) ? m . group ( 1 ) : null ;', 'encoding = encoding ! = null ? encoding . toUpperCase ( Locale . US ) : null ;', '( mime . startsWith ( ""application / "" ) & & mime . endsWith ( "" + xml"" ) ) ) ;', 'encoding = defaultEncoding = = null ? UTF 8 : defaultEncoding ;', '( mime . startsWith ( ""text / "" ) & & mime . endsWith ( "" + xml"" ) ) ) ;', 'mime . startsWith ( ""application / "" ) & & mime . endsWith ( "" + xml"" ) ) ;', 'encoding = ( defaultEncoding = = null ) ? UTF 8 : defaultEncoding ;', 'encoding = m . find ( ) ? m . group ( 1 ) : null ;', 'return ( defaultEncoding = = null ) ? US ASCII : defaultEncoding ;', 'return defaultEncoding = = null ? US ASCII : defaultEncoding ;']","['public static final ByteOrderMark UTF 32LE = new ByteOrderMark ( ""UTF - 32LE"" , 0xFE , 0xFF , 0x00 , 0x00 ) ;', 'public static final ByteOrderMark UTF 32BE = new ByteOrderMark ( ""UTF - 32BE"" , 0x00 , 0x00 , 0xFE , 0xFF ) ;']","['throw new IllegalArgumentException ( directory + "" does not exist"" ) ;', 'return sizeOfDirectoryAsBigInteger ( file ) ;', '}', 'throw new IllegalArgumentException ( directory + "" does not exist"" ) ;', 'long size = 0 ;', '} catch ( IOException ioe ) {', 'throw new IllegalArgumentException ( directory + "" is not a directory"" ) ;', 'BigInteger size = BigInteger . ZERO ;', 'if ( !directory . exists ( ) ) {', 'public static BigInteger sizeOfDirectoryAsBigInteger ( File directory ) {']","['reader . seek ( pos ) ;', 'sb = new StringBuilder ( ) ;', 'reader = new RandomAccessFile ( file , ""r"" ) ;', 'listener . handle ( sb . toString ( ) ) ;', 'line = readLine ( reader ) ;', 'rePos = pos + i + 1 ;', 'while ( ( ch = reader . read ( ) ) ! = - 1 ) {', 'StringBuilder sb = new StringBuilder ( ) ;', 'return null ;', 'return create ( file , listener , delay , end , DEFAULT BUFSIZE ) ;']","['sb = new StringBuilder ( ) ;', 'sb . setLength ( 0 ) ;', 'seenCR = false ;', 'listener . handle ( sb . toString ( ) ) ;', '}', 'rePos = pos + i + 1 ;', 'if ( seenCR ) {', 'seenCR = false ;']","['last = System . currentTimeMillis ( ) ;', 'last = System . currentTimeMillis ( ) ;', '} else if ( FileUtils . isFileNewer ( file , last ) ) {', '} else if ( newer ) {', 'boolean newer = FileUtils . isFileNewer ( file , last ) ;']","['if ( this . mark ! = - 1 ) {', 'this . mark = NO MARK ;', 'this . mark = - 1 ;', 'if ( this . mark ! = NO MARK ) {', 'private static final int NO MARK = - 1 ;']","['final StringBuilder sb = new StringBuilder ( ) ;', 'Charset cset = Charset . defaultCharset ( ) ;', 'sb . setLength ( 0 ) ;', 'import java . io . ByteArrayOutputStream ;', 'listener . handle ( sb . toString ( ) ) ;', 'import java . nio . charset . Charset ;', 'sb . append ( ( char ) ch ) ;', 'IOUtils . closeQuietly ( lineBuf ) ;', 'ByteArrayOutputStream lineBuf = new ByteArrayOutputStream ( 64 ) ;', 'lineBuf . reset ( ) ;']","['this . bbuf . limit ( 0 ) ;', 'this . encoder . reset ( ) ;']","['final OutputStream out = openOutputStream ( file ) ;', 'try ( InputStream in = source ;', 'in = new CheckedInputStream ( new FileInputStream ( file ) , checksum ) ;', 'IOUtils . copy ( in , out ) ;', 'FileChannel input = null ;', 'OutputStream out = openOutputStream ( destination ) ) {', 'IOUtils . copy ( source , output ) ;', '? new InputStreamReader ( new FileInputStream ( file1 ) , Charset . defaultCharset ( ) )', 'InputStream in = null ;', 'try ( InputStream input1 = new FileInputStream ( file1 ) ;']","['private static final int EOF = - 1 ;', 'public static final int EOF = - 1 ;']","['private static final int EOF = - 1 ;', 'import static org . apache . commons . io . IOUtils . EOF ;', 'private static final int EOF = - 1 ;', 'import static org . apache . commons . io . IOUtils . EOF ;']","['if ( - 1 = = value ) {', 'if ( EOF = = value ) {', 'import static org . apache . commons . io . IOUtils . EOF ;', 'if ( n = = - 1 ) {', 'if ( n = = EOF ) {', 'import static org . apache . commons . io . IOUtils . EOF ;', 'return bytesRead = = 0 & & !this . cbuf . hasRemaining ( ) ? EOS : bytesRead ;', 'return EOF ;', 'private static final int EOS = - 1 ;', 'return bytesRead = = 0 & & !this . cbuf . hasRemaining ( ) ? EOF : bytesRead ;']","['if ( charsetName = = null | | charsetName . length ( ) = = 0 ) {', 'if ( charsetName = = null | | charsetName . isEmpty ( ) ) {', 'if ( path . length ( ) = = 0 ) {', 'if ( path . isEmpty ( ) ) {', 'if ( extension = = null | | extension . length ( ) = = 0 ) {', 'if ( extension = = null | | extension . isEmpty ( ) ) {', 'if ( magicNumber . length ( ) = = 0 ) {', 'if ( magicNumber . isEmpty ( ) ) {']","['throw new IllegalArgumentException ( ""Path must not be empty"" ) ;', 'throw new IllegalArgumentException ( ""Path must not be null"" ) ;']","['fail ( ) ;', 'try {', 'public void testDeleteDirectoryWithNonDirectory ( ) throws Exception {', '}', '} catch ( final IllegalArgumentException ex ) {', 'FileUtils . deleteDirectory ( testFile1 ) ;']","['return IOUtils . toByteArray ( in , file . length ( ) ) ;', 'return IOUtils . toByteArray ( in ) ;']","['import java . io . Reader ;', 'target . reset ( ) ;', 'private static final int INVALID = - 1 ;', 'if ( markedAt > = 0 & & ( charsRead - markedAt ) > = readAheadLimit ) {', 'cbuf [ off + i ] = ( char ) c ;', 'this . maxCharsFromTargetReader = maxCharsFromTargetReader ;', '}', 'public int read ( ) throws IOException {', 'return - 1 ;', '@ Override']","['this . target = in ;', 'private int readWithUpdate ( ) throws IOException {', 'throws IOException {', 'throw new UnsupportedOperationException ( ""Mark notsupported"" ) ;', '}', 'if ( !ensureLineFeedAtEndOfFile ) {', 'return - 1 ;', 'public synchronized void mark ( int readlimit ) {', '@ Override', 'public void close ( )']","['target . reset ( ) ;', 'target . reset ( ) ;', 'if ( markedAt > = 0 & & ( charsRead - markedAt ) > = readAheadLimit ) {', 'cbuf [ off + i ] = ( char ) c ;', 'cbuf [ off + i ] = ( char ) c ;', '}', '}', 'public int read ( ) throws IOException {', 'public int read ( ) throws IOException {', 'return - 1 ;']","['package org . apache . commons . io . input ;', 'package org . apache . commons . io . input ;', 'package org . apache . commons . io . input ;', 'package org . apache . commons . io . input ;', 'package org . apache . commons . io . input ;', 'package org . apache . commons . io . input ;']","['@ Parameters', '@ Parameters ( name = ""BlockSize = { 0 } "" )']","['@ Parameters', '@ Parameters ( name = "" { 0 } , charset = { 1 } "" )']","['mr . close ( ) ;', 'lf . close ( ) ;', 'lf . close ( ) ;']",['private static final long serialVersionUID = 1L ;'],"['private static final long serialVersionUID = - 2224170307287243428L ;', 'private static final long serialVersionUID = 3260141861365313518L ;', 'private static final long serialVersionUID = 296132640160964395L ;', 'private static final long serialVersionUID = 1928235200184222815L ;', 'private static final long serialVersionUID = 7372168004395734046L ;', 'private static final long serialVersionUID = 8397947749814525798L ;', 'private static final long serialVersionUID = 6527501707585768673L ;', 'private static final long serialVersionUID = - 4808255005272229056L ;', 'private static final long serialVersionUID = - 1201561106411416190L ;', 'private static final long serialVersionUID = - 2132740084016138541L ;']","['@ SuppressWarnings ( ""deprecation"" )', '@ SuppressWarnings ( ""deprecation"" )', '@ SuppressWarnings ( ""deprecation"" )', '@ SuppressWarnings ( ""deprecation"" )', '@ SuppressWarnings ( ""deprecation"" )', '@ SuppressWarnings ( ""deprecation"" )', '@ SuppressWarnings ( ""deprecation"" )', '@ SuppressWarnings ( ""deprecation"" )', '@ SuppressWarnings ( ""deprecation"" )']",['@ Deprecated'],"['throw new IOExceptionWithCause (', 'throw new IOException (', 'public class TaggedIOException extends IOExceptionWithCause {', 'public class TaggedIOException extends IOException {', 'final IOExceptionWithCause exception = new IOExceptionWithCause ( ""message"" , cause ) ;', 'final IOException exception = new IOException ( cause ) ;', 'final IOExceptionWithCause exception = new IOExceptionWithCause ( cause ) ;', 'final IOException exception = new IOException ( ""message"" , cause ) ;', 'import java . io . IOException ;']","['}', '}']","['super ( message ) ;', 'super ( cause ) ;', 'super ( cause = = null ? null : cause . toString ( ) ) ;', 'super ( message , cause ) ;', 'this . initCause ( cause ) ;']","['throw new NullPointerException ( ""directorydirectory must not be null"" ) ;', 'throw new NullPointerException ( ""directory must not be null"" ) ;']","['return EOF ;', 'return EOF ;', '}', 'fillBuffer ( ) ;', '} else {', 'if ( endOfInput & & !encoderOut . hasRemaining ( ) ) {', 'if ( endOfInput & & !encoderOut . hasRemaining ( ) ) {', '}', 'fillBuffer ( ) ;']","['if ( !ensureLineFeedAtEndOfFile ) {', 'private boolean slashRSeen = false ;', 'return eofGame ( ) ;', 'boolean previousWasSlashR = slashRSeen ;', 'target = readWithUpdate ( ) ;', 'return read ( ) ;', 'private int eofGame ( ) {', '}', ""return ' \\ n' ;"", 'if ( slashRSeen )']","['private List < String > createLinesFile ( final File file , final int lineCount ) throws Exception {', 'private void doTestFileWithSpecifiedLines ( final int lineCount ) throws IOException {', 'private void doTestFileWithSpecifiedLines ( final int lineCount ) throws Exception {', 'private List < String > createLinesFile ( final File file , final int lineCount ) throws IOException {', 'private List < String > createLinesFile ( final File file , final String encoding , final int lineCount ) throws Exception {', 'private List < String > createLinesFile ( final File file , final String encoding , final int lineCount ) throws IOException {', 'protected void checkCollectionSizes ( String label , final int dirCreate , final int dirChange , final int dirDelete , final int fileCreate , final int fileChange , final int fileDelete ) {', 'final int fileChange ,', 'final int dirChange ,', 'final int dirDelete ,']","['public void assertFiltering ( final int testNumber , final IOFileFilter filter , final File file , final boolean expected )', 'public void assertFiltering ( final int testNumber , final IOFileFilter filter , final File file , final boolean expected )', 'return true ;', 'return true ;', 'public boolean isInvoked ( ) {', 'public boolean isInvoked ( ) {', 'public boolean assertFileFiltering ( final int testNumber , final IOFileFilter filter , final File file , final boolean expected )', 'public boolean assertFileFiltering ( final int testNumber , final IOFileFilter filter , final File file , final boolean expected )', 'expected , filter . accept ( file . getParentFile ( ) , file . getName ( ) ) ) ;', 'expected , filter . accept ( file . getParentFile ( ) , file . getName ( ) ) ) ;']","['public boolean assertFileFiltering ( final int testNumber , final IOFileFilter filter , final File file , final boolean expected )', 'public void assertFileFiltering ( final int testNumber , final IOFileFilter filter , final File file , final boolean expected )', 'return true ;', 'public void assertFilenameFiltering ( final int testNumber , final IOFileFilter filter , final File file , final boolean expected )', 'public boolean assertFilenameFiltering ( final int testNumber , final IOFileFilter filter , final File file , final boolean expected )']","['this . workingPath = this . determineWorkingDirectoryPath ( this . getWorkingPathNamePropertyKey ( ) , this . getDefaultWorkingPath ( ) ) ;', 'assertFilenameFiltering ( i , filter , this . file , filenameResults ) ;', 'this . assertTrueFiltersInvoked ( i , trueFilters , trueResults ) ;', 'assertFalseFiltersInvoked ( i , falseFilters , falseResults ) ;', 'this . resetTrueFilters ( this . trueFilters ) ;', 'resetTrueFilters ( this . trueFilters ) ;', 'this . assertFalseFiltersInvoked ( i , falseFilters , falseResults ) ;', 'assertTrueFiltersInvoked ( i , trueFilters , trueResults ) ;', 'this . resetFalseFilters ( this . falseFilters ) ;', 'this . workingPath = determineWorkingDirectoryPath ( this . getWorkingPathNamePropertyKey ( ) , this . getDefaultWorkingPath ( ) ) ;']","['for ( int i = 0 ; i < filters . size ( ) ; i + + ) {', 'assertTrue ( ""file filter removed"" , !fileFilter . getFileFilters ( ) . contains ( filter ) ) ;', 'fileFilter . removeFileFilter ( filters . get ( i ) ) ;', 'fileFilter . removeFileFilter ( filter ) ;', 'assertTrue ( ""file filter removed"" , !fileFilter . getFileFilters ( ) . contains ( filters . get ( i ) ) ) ;', 'for ( TesterTrueFileFilter filter : filters ) {']","['this . falseFilters [ 2 ] = new TesterFalseFileFilter ( ) ;', 'this . falseFilters [ 2 ] = new TesterFalseFileFilter ( ) ;', 'final ConditionalFileFilter fileFilter = this . getConditionalFileFilter ( ) ;', 'final ConditionalFileFilter fileFilter = this . getConditionalFileFilter ( ) ;', 'assertEquals ( ""file filters count"" , 0 , fileFilter . getFileFilters ( ) . size ( ) ) ;', 'assertEquals ( ""file filters count"" , 0 , fileFilter . getFileFilters ( ) . size ( ) ) ;', 'for ( int i = 1 ; i < testFilters . size ( ) ; i + + ) {', 'public void testFilterBuiltUsingAdd ( ) throws Exception {', 'public void testFilterBuiltUsingAdd ( ) throws Exception {', 'for ( final IOFileFilter filter : fileFilter . getFileFilters ( ) ) {']","['appendable . append ( ( char ) b ) ;', 'import java . io . IOException ;', 'public T getAppendable ( ) {', 'public class AppendableOutputStream < T extends Appendable > extends OutputStream {', '}', 'private final T appendable ;', 'return appendable ;', 'public void write ( int b ) throws IOException {', 'package org . apache . commons . io . output ;', 'public AppendableOutputStream ( T appendable ) {']","['public class TaggedIOException extends IOException {', '@ SuppressWarnings ( ""deprecation"" )', 'public class TaggedIOException extends IOExceptionWithCause {']","['track ( path , marker , ( FileDeleteStrategy ) null ) ;', 'track ( path , marker , null ) ;', 'track ( file , marker , ( FileDeleteStrategy ) null ) ;', 'track ( file , marker , null ) ;', 'osName . indexOf ( ""unix"" ) ! = - 1 | |', '} else if ( osName . contains ( ""linux"" ) | |', 'osName . indexOf ( ""sunos"" ) ! = - 1 | |', 'osName . contains ( ""unix"" ) | |', 'osName . indexOf ( ""mpe / ix"" ) ! = - 1 | |', 'if ( osName . contains ( ""windows"" ) ) {']","['( ( data [ offset + 3 ] & 0xff ) < < 24 ) ;', 'final long high = readSwappedInteger ( data , offset + 4 ) ;', 'final long low =', 'return ( high < < 32 ) + ( 0xffffffffL & low ) ;', '( ( data [ offset + 5 ] & 0xff ) < < 8 ) +', 'final long low = readSwappedInteger ( data , offset ) ;', 'return ( high < < 32 ) + ( 0xffffffffL & low ) ;', '( ( data [ offset + 7 ] & 0xff ) < < 24 ) ;', '( ( data [ offset + 4 ] & 0xff ) < < 0 ) +', '( ( data [ offset + 2 ] & 0xff ) < < 16 ) +']","['throw exception ;', 'throw new IOException ( exception . getMessage ( ) ) ;', 'throw exception ;', 'throw new IOException ( exception . getMessage ( ) ) ;', '@ SuppressWarnings ( ""ResultOfMethodCallIgnored"" )', '} catch ( IOException e ) {', 'try {', 'e1 . addSuppressed ( e ) ;', 'bis . read ( ) ;', '}']","['throw new IOException ( exception . getMessage ( ) ) ;', 'throw exception ;', 'throw new IOException ( exception . getMessage ( ) ) ;', 'throw exception ;', '@ SuppressWarnings ( ""ResultOfMethodCallIgnored"" )', '} catch ( IOException e ) {', 'try {', 'e1 . addSuppressed ( e ) ;', 'bis . read ( ) ;', '}']","['assertFalse ( FileUtils . directoryContains ( directory1 , fooFile ) ) ;', '@ Test', '}', 'File fooFile = new File ( directory1 . getParent ( ) , ""directory1 . txt"" ) ;', 'public void testIO466 ( ) throws IOException {']","['return false ;', 'private static boolean isBrokenSymlink ( final File file ) throws IOException {', 'if ( file . exists ( ) ) {', 'if ( parentDir = = null | | !parentDir . exists ( ) ) {', 'return fileInDir . length > 0 ;', ') ;', 'return Java7Support . isSymLink ( file ) ;', '}', 'final File canon = file . getCanonicalFile ( ) ;', 'if ( Java7Support . isAtLeastJava7 ( ) )']","['break ;', 'break ;', 'try {', 'try {', 'tick = 0 ;', 'boolean wasInterrupted = false ;', 'Thread . sleep ( 100 ) ;', 'tick = 0 ;', 'if ( tick + + > = 10 ) {', 'Thread . sleep ( 100 ) ;']","['protected void setByteCount ( final long count ) {', 'this . written = count ;', '}', '@ Test', 'setByteCount ( 2 ) ;', '}', 'package org . apache . commons . io . output ;', 'tos . write ( 12 ) ;', '@ Override', 'ThresholdingOutputStream tos = new ThresholdingOutputStream ( 3 ) {']","['protected OutputStream branch ;', 'protected OutputStream branch ;']","['ReferenceQueue < Object > q = new ReferenceQueue < Object > ( ) ;', 'private final List < String > deleteFailures = Collections . synchronizedList ( new ArrayList < String > ( ) ) ;', 'Thread reaper ;', 'private volatile boolean exitWhenFinished = false ;', 'final List < String > deleteFailures = Collections . synchronizedList ( new ArrayList < String > ( ) ) ;', 'private Thread reaper ;', 'volatile boolean exitWhenFinished = false ;', 'private final Collection < Tracker > trackers = Collections . synchronizedSet ( new HashSet < Tracker > ( ) ) ;', 'final Collection < Tracker > trackers = Collections . synchronizedSet ( new HashSet < Tracker > ( ) ) ;', 'private ReferenceQueue < Object > q = new ReferenceQueue < Object > ( ) ;']","['class Java7Support', 'try {', 'Object path = toPath . invoke ( symlink ) ;', 'throws IOException {', 'Object path = toPath . invoke ( file ) ;', 'Class < ? > path = cl . loadClass ( ""java . nio . file . Path"" ) ;', 'try', 'exists = files . getMethod ( ""exists"" , path , emptyLinkOpts . getClass ( ) ) ;', 'readSymlink = files . getMethod ( ""readSymbolicLink"" , path ) ;', 'delete . invoke ( null , path ) ;']","['return in . skip ( n ) ;', 'while ( ( n > skipped ) & & ( readFirstBytes ( ) > = 0 ) ) {', 'while ( n > 0 & & readFirstBytes ( ) > = 0 ) {', 'int skipped = 0 ;', 'n - - ;', 'skipped + + ;', 'return in . skip ( n - skipped ) + skipped ;', 'import static org . junit . Assert . assertNull ;', 'bb . put ( ( byte ) 0x32 ) ;', 'import static org . junit . Assert . assertTrue ;']","['private final List < String > deleteFailures = Collections . synchronizedList ( new ArrayList < String > ( ) ) ;', 'ReferenceQueue < Object > q = new ReferenceQueue < Object > ( ) ;', 'private volatile boolean exitWhenFinished = false ;', 'Thread reaper ;', 'private Thread reaper ;', 'final List < String > deleteFailures = Collections . synchronizedList ( new ArrayList < String > ( ) ) ;', 'private final Collection < Tracker > trackers = Collections . synchronizedSet ( new HashSet < Tracker > ( ) ) ;', 'volatile boolean exitWhenFinished = false ;', 'private ReferenceQueue < Object > q = new ReferenceQueue < Object > ( ) ;', 'final Collection < Tracker > trackers = Collections . synchronizedSet ( new HashSet < Tracker > ( ) ) ;']","['if ( addBOM ) {', 'public void skipReturnValueWithoutBom ( ) throws IOException {', 'bb . put ( new byte [ ] { ( byte ) 0xEF , ( byte ) 0xBB , ( byte ) 0xBF } ) ;', 'public void skipReturnValueWithBom ( ) throws IOException {', 'bb . put ( ( byte ) 0x32 ) ;', 'byte [ ] baseData = new byte [ ] { ( byte ) 0x31 , ( byte ) 0x32 , ( byte ) 0x33 } ;', '@ Test', 'BOMInputStream is2 = new BOMInputStream ( createUtf8DataStream ( baseData , false ) ) ;', 'private static InputStream createInputStream ( boolean addBOM ) {', '@ Test']","['return ( Boolean ) isSymbolicLink . invoke ( null , path ) ;', 'final Boolean result = ( Boolean ) exists . invoke ( null , path , emptyLinkOpts ) ;', 'final Object invoke = exists . invoke ( null , path , emptyLinkOpts ) ;', 'return result . booleanValue ( ) ;', 'return ( Boolean ) invoke ;', 'Boolean result = ( Boolean ) isSymbolicLink . invoke ( null , path ) ;']","['is1 . close ( ) ;', 'is2 . close ( ) ;', 'tos . close ( ) ;']","['} else if ( charset = = Charset . forName ( ""Shift JIS"" ) ) {', 'charset = = Charset . forName ( ""x - windows - 949"" ) | |', '}', 'charset = = Charset . forName ( ""windows - 31j"" ) | |', 'charset = = Charset . forName ( ""x - windows - 950"" ) ) {', '}', 'charset = = Charset . forName ( ""gbk"" ) | |', '} else if ( charset = = Charset . forName ( ""Shift JIS"" ) | |', 'final File testFileGBK = new File ( this . getClass ( ) . getResource ( "" / test - file - gbk . bin"" ) . toURI ( ) ) ;', 'private static final String TEST LINE WINDOWS 31J 1 = "" \\ u3041 \\ u3042 \\ u3043 \\ u3044 \\ u3045"" ;']","['import java . nio . charset . UnsupportedCharsetException ;', 'protected void handleDirectoryEnd ( final File directory , final int depth , final Collection < T > results ) throws IOException {', 'protected File [ ] filterDirectoryContents ( final File directory , final int depth , final File [ ] files ) throws', 'protected final void checkIfCancelled ( final File file , final int depth , final Collection < T > results ) throws IOException {', 'IOException {', 'protected void handleRestricted ( final File directory , final int depth , final Collection < T > results ) throws IOException {', 'protected void handleDirectoryStart ( final File directory , final int depth , final Collection < T > results ) throws', 'protected boolean handleDirectory ( final File directory , final int depth , final Collection < T > results ) throws IOException {', 'protected void handleRestricted ( final File directory , final int depth , final Collection < T > results ) throws', 'protected File [ ] filterDirectoryContents ( final File directory , final int depth , final File [ ] files ) throws IOException {']","['int tick = 0 ;', 'if ( remaining < 0 ) {', 'tick = 0 ;', 'Thread . sleep ( Math . min ( 100 , remaining ) ) ;', 'Thread . sleep ( 100 ) ;', 'long finishAt = System . currentTimeMillis ( ) + ( seconds * 1000 ) ;', '}', 'long remaining = finishAt - System . currentTimeMillis ( ) ;', 'int timeout = 0 ;', 'return false ;']","['@ Test ( expected = IllegalArgumentException . class )', '@ Test', 'public void write four chunks ( ) throws Exception {', 'ByteArrayOutputStream baos = new ByteArrayOutputStream ( ) {', '}', 'public class ChunkedOutputStreamTest {', 'package org . apache . commons . io . output ;', '@ Override', 'ChunkedOutputStream chunked = new ChunkedOutputStream ( baos , 10 ) ;', 'assertEquals ( 4 , numWrites . get ( ) ) ;']","['super . write ( b , off , len ) ;', 'private ByteArrayOutputStream getByteArrayOutputStream ( final AtomicInteger numWrites ) {', 'ByteArrayOutputStream baos = new ByteArrayOutputStream ( ) {', 'super . write ( b , off , len ) ;', '} ;', '@ Override', '}', 'import java . io . IOException ;', 'numWrites . incrementAndGet ( ) ;', '@ Test']","['fw2 . write ( 42 ) ;', 'fw2 . write ( 65 ) ;', 'fw1 . write ( 42 ) ;', 'fw1 . write ( 65 ) ;']","['arr [ i ] = ( char ) i ;', 'arr [ i ] = chars [ i % chars . length ] ;', 'final char [ ] chars = ""ABCEDEFGHIJKLMNOPQabcdefgihklmnopq"" . toCharArray ( ) ;']","['}', 'proxy . write ( 65 ) ;', 'proxy . write ( ( char [ ] ) null , 0 , 0 ) ;', 'public void exceptions in write string ( ) throws IOException {', 'public void testWriteCharArray ( ) throws Exception {', 'final StringBuilderWriter writer = new StringBuilderWriter ( ) ;', 'import junit . framework . TestCase ;', 'try {', 'public class ProxyWriterTest extends TestCase {', '@ Test']","['return fileInDir . length > 0 ;', 'return fileInDir ! = null & & fileInDir . length > 0 ;']","['final char [ ] chars = ""ABCEDEFGHIJKLMNOPQabcdefgihklmnopq"" . toCharArray ( ) ;', 'final char [ ] chars = ""ABCDEFGHIJKLMNOPQabcdefgihklmnopq"" . toCharArray ( ) ;']","['return filename ;', 'private static void failIfNullBytePresent ( String path ) {', 'final int index = indexOfExtension ( filename ) ;', '}', 'int size = filename . length ( ) ;', 'if ( path . charAt ( i ) = = 0 ) {', 'final int index = indexOfLastSeparator ( filename ) ;', 'for ( int i = 0 ; i < len ; i + + ) {', 'return filename . substring ( index + 1 ) ;', 'throw new IllegalArgumentException ( ""Null byte present in file / path name . There are no "" +']","['return filename + UNIX SEPARATOR ;', 'return filterNullBytes ( filename + UNIX SEPARATOR ) ;', 'return filename . substring ( prefix , endIndex ) ;', 'return filterNullBytes ( filename . substring ( 0 , len ) ) ;', 'return filename . substring ( 0 , len ) ;', 'return filterNullBytes ( filename . substring ( prefix , endIndex ) ) ;', 'assertEquals ( ""a / b / "" , FilenameUtils . getPath ( "" ~ user / a / \\ u0000b / c . txt"" ) ) ;', 'assertEquals ( "" ~ user \\ \\ "" , FilenameUtils . getPrefix ( "" ~ u \\ u0000ser \\ \\ a \\ \\ b \\ \\ c . txt"" ) ) ;', 'assertEquals ( ""a / b"" , FilenameUtils . getPathNoEndSeparator ( "" ~ user / a \\ u0000 / b / c . txt"" ) ) ;']","['new BOMInputStream ( createUtf8DataStream ( data , true ) , false , new ByteOrderMark [ 0 ] ) ;', '( new BOMInputStream ( createUtf8DataStream ( data , true ) , false , new ByteOrderMark [ 0 ] ) ) . close ( ) ; ;', 'new BOMInputStream ( createUtf8DataStream ( data , true ) , false , ( ByteOrderMark [ ] ) null ) ;', '( new BOMInputStream ( createUtf8DataStream ( data , true ) , false , ( ByteOrderMark [ ] ) null ) ) . close ( ) ; ;', 'new XmlStreamReader ( is , false ) ;', '( new XmlStreamReader ( is , cT , false ) ) . close ( ) ; ;', 'new XmlStreamReader ( is , cT , false ) ;', '( new XmlStreamReader ( is , false ) ) . close ( ) ; ;', 'public void negative chunksize not permitted ( ) {', 'chunked . close ( ) ;']","['final int index = indexOfExtension ( cleanFileName ) ;', 'return filename ;', 'return cleanFileName ;', 'failIfNullBytePresent ( filename ) ;', 'return cleanFileName . substring ( 0 , index ) ;', 'failIfNullBytePresent ( filename + UNIX SEPARATOR ) ;', 'return cleanFileName . substring ( index + 1 ) ;', 'String path = filename . substring ( 0 , len ) ;', 'int size = cleanFileName . length ( ) ;', 'return filename + UNIX SEPARATOR ;']","['return IOUtils . toByteArray ( in ) ;', 'return IOUtils . toByteArray ( in ) ;']","['listener . endOfFileReached ( ) ;', '( ( TailerListenerAdapter ) listener ) . endOfFileReached ( ) ;', 'if ( listener instanceof TailerListenerAdapter ) {', '}', 'void endOfFileReached ( ) ;']","['private static class TestTailerListener implements TailerListener {', 'private static class TestTailerListener extends TailerListenerAdapter {']","['boolean matches ( String className ) ;', 'package org . apache . commons . io . serialization ;', '}', 'public interface ClassNameMatcher {', 'import java . util . Set ;', 'package org . apache . commons . io . serialization ;', 'return classesSet . contains ( className ) ;', 'public boolean matches ( String className ) {', 'import java . util . Collections ;', '}']","['throw new InvalidClassException ( ""Class name not accepted"" ) ;', 'throw new InvalidClassException ( ""Class name not accepted : "" + className ) ;', 'try {', '@ Test', 'assertTrue ( ""Expecting message to contain "" + name , ice . getMessage ( ) . contains ( name ) ) ;', '}', 'import static org . junit . Assert . assertTrue ;', 'import static org . junit . Assert . fail ;', 'final String name = OurTestClass . class . getName ( ) ;', '} catch ( InvalidClassException ice ) {']","['if ( pattern = = null ) {', 'if ( pattern = = null ) {', 'public ValidatingObjectInputStream reject ( String . . . patterns ) {', 'if ( !ok ) {', 'for ( Class < ? > c : classes ) {', 'if ( m . matches ( name ) ) {', 'if ( !ok ) {', 'protected void invalidClassNameFound ( String className ) throws InvalidClassException {', 'for ( String pattern : patterns ) {', 'for ( String pattern : patterns ) {']","['try {', '}', 'return t ;', 'private final List < Closeable > toClose = new ArrayList < Closeable > ( ) ;', 'toClose . clear ( ) ;', 'public void cleanup ( ) {', 'public void setup ( ) throws IOException {', 'import java . util . List ;', 'c . close ( ) ;', 'import java . io . Closeable ;']","['OurTestClass ( String str ) {', 'public class MockSerializedClass implements Serializable {', 'if ( ! ( obj instanceof OurTestClass ) ) {', 'return str . equals ( ( ( MockSerializedClass ) obj ) . str ) ;', 'return str . equals ( ( ( OurTestClass ) obj ) . str ) ;', 'if ( ! ( obj instanceof MockSerializedClass ) ) {', 'public class OurTestClass implements Serializable {', 'MockSerializedClass ( String str ) {', '. accept ( OurTestClass . class )', '. accept ( "" * MockSerializedClass"" , "" * Integer"" )']","['final InputStream is = willClose ( new ByteArrayInputStream ( bos . toByteArray ( ) ) ) ;', '@ Test', 'final ObjectInputStream ois = willClose (', '}', '@ Test', '""org . codehaus . groovy . runtime . ConvertedClosure"" ,', ') ;', ') ) ;', '. accept ( MoreComplexObject . class , ArrayList . class , Integer [ ] . class , Random . class )', 'new ValidatingObjectInputStream ( inputStream )']","['public void specifyAllAccepts ( ) throws IOException , ClassNotFoundException {', 'public void trustJavaIncludingArrays ( ) throws IOException , ClassNotFoundException {', '. accept ( ""java . lang . * "" )', 'new ValidatingObjectInputStream ( inputStream )', '. accept ( MoreComplexObject . class , ArrayList . class , Integer [ ] . class , Random . class )', '. accept ( ""java . lang . * "" , "" [ Ljava . lang . * "" )', '@ Test', '. accept ( MoreComplexObject . class )', 'assertSerialization ( willClose (', '. accept ( MoreComplexObject . class , ArrayList . class , Random . class )']","['import java . io . InputStream ;', 'public int read ( ) {', 'public class InfiniteCircularInputStream extends InputStream {', 'final private byte [ ] repeatedContent ;', '}', 'private int position = - 1 ;', 'this . repeatedContent = repeatedContent ;', 'package org . apache . commons . io . input ;', 'return repeatedContent [ position ] & 0xff ;', 'position = ( position + 1 ) % repeatedContent . length ;']","['randomAccessFile = new RandomAccessFile ( file , ""r"" ) ;', 'randomAccessFile = new RandomAccessFile ( file , ""r"" ) ;', 'if ( lastBlockLength > 0 ) {', 'if ( lastBlockLength > 0 ) {', 'totalBlockCount = totalByteLength / blockSize ;', 'totalBlockCount = totalByteLength / blockSize ;', '}', '}', 'if ( totalByteLength > 0 ) {', 'if ( totalByteLength > 0 ) {']","['public void testErrors ( ) {', 'public void constantCharsetNames ( ) {', 'public class ByteOrderMarkTestCase extends FileBasedTestCase {', '@ Test', 'public void testConstantCharsetNames ( ) {', 'public void getBytes ( ) {', 'public void testGetBytes ( ) {', 'public class ByteOrderMarkTestCase {', 'super ( name ) ;', 'import static org . junit . Assert . assertTrue ;']","['Thread . sleep ( timeout ) ;', 'remaining = finishAt - System . currentTimeMillis ( ) ;', 'do {', 'Thread . sleep ( remaining ) ;', '}', 'long finishAt = System . currentTimeMillis ( ) + ms ;', 'private static void sleep ( long ms ) throws InterruptedException {', 'sleep ( timeout ) ;', 'long remaining = ms ;', '} while ( remaining > 0 ) ;']","['assertEquals ( ""EOF : offset should equal length"" , expected . length , offset ) ;', 'assertEquals ( ""EOF : offset should equal length for charset "" + charsetName , expected . length , offset ) ;']","['testAvailableRead ( csName ) ;', 'testAvailableRead ( csName ) ;', 'assertTrue ( ""offset "" + offset + "" < "" + expected . length , offset < expected . length ) ;', 'try {', 'assertEquals ( ""bytes should agree"" , expected [ offset ] , buffer [ bufferOffset ] ) ;', 'assertEquals ( ""bytes should agree for "" + charsetName , expected [ offset ] , buffer [ bufferOffset ] ) ;', 'return Charset . forName ( csName ) . canEncode ( ) & & ! ""COMPOUND TEXT"" . equalsIgnoreCase ( csName ) & & ! ""x - COMPOUND TEXT"" . equalsIgnoreCase ( csName ) ;', 'fail ( ""Operation not supported for "" + csName ) ;', 'if ( isAvailabilityTestableForCharset ( csName ) ) {', '""ISO - 2022 - CN"" . equalsIgnoreCase ( csName ) | |']","['Assume . assumeTrue ( Charset . isSupported ( ""UTF 32BE"" ) ) ;', 'import org . xml . sax . SAXParseException ;', 'final byte [ ] data = "" < ? xml version = \\ ""1 . 0 \\ "" encoding = \\ ""UTF - 32BE \\ "" ? > < X / > "" . getBytes ( ""UTF 32BE"" ) ;', '} catch ( SAXParseException e ) {', 'int bytes = 0 ;', '@ SuppressWarnings ( ""ResultOfMethodCallIgnored"" )', '( new BOMInputStream ( createUtf8DataStream ( data , true ) , false , ( ByteOrderMark [ ] ) null ) ) . close ( ) ; ;', 'return true ;', '( new BOMInputStream ( createUtf8DataStream ( data , true ) , false , new ByteOrderMark [ 0 ] ) ) . close ( ) ; ;', 'try {']","['try {', 'private static void checkIbmJdkWithBrokenUTF16 ( Charset charset ) {', '}', 'for ( int i = 0 ; i < len ; i + + ) {', 'byte [ ] bytes = TEST STRING 2 . getBytes ( charset ) ;', 'ByteBuffer bb2 = ByteBuffer . allocate ( 16 ) ;', 'if ( !""UTF - 16"" . equals ( charset . name ( ) ) ) return ;', 'if ( !TEST STRING 2 . equals ( cb2 . toString ( ) ) ) {', 'final String TEST STRING 2 = ""v \\ u00e9s"" ;', 'final int len = bytes . length ;']","['Assume . assumeFalse ( System . getProperty ( ""os . name"" ) . contains ( ""windows"" ) ) ;', 'import org . junit . Assume ;']","['Assume . assumeFalse ( System . getProperty ( ""os . name"" ) . contains ( ""windows"" ) ) ;', 'Assume . assumeFalse ( System . getProperty ( ""os . name"" ) . toLowerCase ( Locale . ENGLISH ) . contains ( ""windows"" ) ) ;', 'import java . util . Locale ;']","['tailer = null ;', 'tailer = null ;', 'tailer . stop ( ) ;', 'tailer . stop ( ) ;']","['assertEquals ( ""end of file reached 3 times"" , 3 , listener . reachedEndOfFile ) ;', 'assertTrue ( ""end of file reached at least 3 times"" , listener . reachedEndOfFile > = 3 ) ;']","['final File file = new File ( getTestDirectory ( ) , ""tailer1 - test . txt"" ) ;', 'final File file = new File ( getTestDirectory ( ) , ""tailer - eof - test . txt"" ) ;']","['""ISO - 2022 - JP"" . equalsIgnoreCase ( csName ) ;', '""ISO - 2022 - JP"" . equalsIgnoreCase ( csName ) | |', '""Shift JIS"" . equalsIgnoreCase ( csName ) ;']","['long finishAt = System . currentTimeMillis ( ) + ( seconds * 1000 ) ;', 'long finishAt = System . currentTimeMillis ( ) + ( seconds * 1000L ) ;']","['output . write ( ch ) ;', 'public void flush ( ) throws IOException {', 'throws IOException', 'public void close ( ) throws IOException {', 'extends OutputStream', 'public void write ( final int ch ) throws IOException {', 'if ( null ! = output )', 'output . write ( ch ) ;', 'public void flush ( )', 'public class DemuxOutputStream extends OutputStream {']","['final OutputStream output = m streams . get ( ) ;', 'private final InheritableThreadLocal < OutputStream > outputStreamThreadLocal = new InheritableThreadLocal < OutputStream > ( ) ;', 'm streams . set ( output ) ;', 'final OutputStream stream = outputStreamThreadLocal . get ( ) ;', 'private final InheritableThreadLocal < OutputStream > m streams = new InheritableThreadLocal < OutputStream > ( ) ;', 'final OutputStream output = outputStreamThreadLocal . get ( ) ;', 'final OutputStream stream = m streams . get ( ) ;', 'outputStreamThreadLocal . set ( output ) ;']","['@ SuppressWarnings ( ""resource"" )']","['return EOF ;', 'return EOF ;', '}', 'if ( !this . bbuf . hasRemaining ( ) & & !this . cbuf . hasRemaining ( ) ) {', '} else {', 'fillBuffer ( ) ;', 'fillBuffer ( ) ;', '}', 'if ( !this . bbuf . hasRemaining ( ) & & !this . cbuf . hasRemaining ( ) ) {']","['if ( !""UTF - 16"" . equals ( charset . name ( ) ) ) return ;', 'if ( !""UTF - 16"" . equals ( charset . name ( ) ) ) {', '}', 'return ;']","['in = null ;', 'in . close ( ) ;', 'inr = null ;', 'inr . close ( ) ;', 'err = null ;', '}', 'out . close ( ) ;', 'if ( err ! = null ) {', 'err . close ( ) ;', 'out = null ;']","['output = null ;', 'fis . close ( ) ;', 'fos . close ( ) ;', 'fis = null ;', 'output . close ( ) ;', 'fos = null ;', 'input . close ( ) ;', 'input = null ;']","['osName . contains ( ""openbsd"" ) | |']",['@ Deprecated'],"['iterator . close ( ) ;', 'ioe . addSuppressed ( e ) ;', 'public void close ( ) {', 'iterator . close ( ) ;', 'public class LineIterator implements Iterator < String > {', 'if ( this . bufferedReader ! = null ) {', 'IOUtils . closeQuietly ( bufferedReader ) ;', 'try {', 'if ( iterator ! = null ) {', 'this . bufferedReader . close ( ) ;']","['final String valueUp = value . toUpperCase ( ComparisonLocale ) ;', 'public static ByteOrder parseByteOrder ( final String value ) {', 'return ByteOrder . BIG ENDIAN ;', 'final String littleEndianUp = LITTLE ENDIAN . toUpperCase ( ComparisonLocale ) ;', 'if ( bigEndianUp . equals ( valueUp ) | | ByteOrder . BIG ENDIAN . toString ( ) . equals ( valueUp ) ) {', 'throw new IllegalArgumentException ( ""Unsupported byte order setting : "" + value + "" , expeced one of "" + ByteOrder . LITTLE ENDIAN + "" , "" +', 'package org . apache . commons . io ;', 'if ( littleEndianUp . equals ( valueUp ) | | ByteOrder . LITTLE ENDIAN . toString ( ) . equals ( valueUp ) ) {', 'import java . util . Locale ;', 'final String bigEndianUp = BIG ENDIAN . toUpperCase ( ComparisonLocale ) ;']","['return ByteOrderFactory . parseByteOrder ( value ) ;', 'private ByteOrder parseByteOrder ( final String value ) {', 'import org . junit . Assert ;', '@ Test', 'public class ByteOrderFactoryTest {', 'package org . apache . commons . io ;', 'public void testParseBig ( ) {', '}', 'Assert . assertEquals ( ByteOrder . BIG ENDIAN , parseByteOrder ( ""Big"" ) ) ;', 'import org . junit . Test ;']","['if ( e . getMessage ( ) . contains ( charSetName ) ) return false ;', 'if ( e . getMessage ( ) . contains ( charSetName ) ) {', 'return false ;', '}']","['final TreeMap < String , Charset > m = new TreeMap < String , Charset > ( String . CASE INSENSITIVE ORDER ) ;', 'final TreeMap < String , Charset > m = new TreeMap < > ( String . CASE INSENSITIVE ORDER ) ;', 'ReferenceQueue < Object > q = new ReferenceQueue < Object > ( ) ;', 'ReferenceQueue < Object > q = new ReferenceQueue < > ( ) ;', 'final List < String > lines = new ArrayList < String > ( 20 ) ;', 'final List < String > lines = new ArrayList < > ( 20 ) ;', 'try {', 'try ( FileInputStream fis = new FileInputStream ( input ) ) {', 'final FileInputStream fis = new FileInputStream ( input ) ;', 'final Collection < File > files = new java . util . LinkedList < > ( ) ;']","['return i ;', 'return i = = 0 ? - 1 : i ;', '}', '@ Test ( timeout = 5000 )', 'public void testReadBytesEOF ( ) throws IOException {', 'BufferedReader br = new BufferedReader ( mr ) ;', '}', 'br . readLine ( ) ;', 'BoundedReader mr = new BoundedReader ( sr , 3 ) ;']","['@ SuppressWarnings ( ""deprecation"" )', 'buffer . append ( StandardCharsets . UTF 8 . decode ( bytes ) . toString ( ) ) ;', 'buffer . append ( Charsets . UTF 8 . decode ( bytes ) . toString ( ) ) ;', 'import java . nio . charset . StandardCharsets ;']","['FileUtils . deleteDirectory ( getTestDirectory ( ) ) ;', 'public void tearDown ( ) throws Exception {', '}', 'import org . junit . After ;', '@ After', 'FileUtils . deleteDirectory ( getTestDirectory ( ) ) ;', 'FileUtils . deleteDirectory ( getTestDirectory ( ) ) ;', 'FileUtils . deleteDirectory ( getTestDirectory ( ) ) ;', 'public void tearDown ( ) {', 'FileUtils . deleteDirectory ( altLockDir ) ;']","['m . put ( UTF 16LE . name ( ) , UTF 16LE ) ;', 'm . put ( StandardCharsets . UTF 8 . name ( ) , StandardCharsets . UTF 8 ) ;', 'public static final Charset UTF 8 = Charset . forName ( ""UTF - 8"" ) ;', 'public static final Charset ISO 8859 1 = StandardCharsets . ISO 8859 1 ;', 'm . put ( ISO 8859 1 . name ( ) , ISO 8859 1 ) ;', 'm . put ( StandardCharsets . US ASCII . name ( ) , StandardCharsets . US ASCII ) ;', 'public static final Charset UTF 16LE = Charset . forName ( ""UTF - 16LE"" ) ;', 'public static final Charset US ASCII = StandardCharsets . US ASCII ;', 'public static final Charset ISO 8859 1 = Charset . forName ( ""ISO - 8859 - 1"" ) ;', 'm . put ( StandardCharsets . UTF 16LE . name ( ) , StandardCharsets . UTF 16LE ) ;']","['import java . security . MessageDigest ;', 'public MessageDigestMaintainingObserver ( MessageDigest pMd ) {', 'public MessageDigestCalculatingInputStream ( InputStream pStream ) throws NoSuchAlgorithmException {', '}', 'void data ( int pByte ) throws IOException {', '@ Override', 'md . update ( pBuffer , pOffset , pLength ) ;', 'import java . security . NoSuchAlgorithmException ;', 'public class MessageDigestCalculatingInputStream extends ObservableInputStream {', 'public MessageDigestCalculatingInputStream ( InputStream pStream , MessageDigest pDigest ) {']","['copy ( input , output , encoding ) ;', 'copy ( input , output , encoding ) ;', 'final StringBuilderWriter sw = new StringBuilderWriter ( ) ;', 'copy ( input , sw ) ;', 'copy ( input , sw ) ;', 'return sw . toString ( ) ;', 'return sw . toString ( ) ;', 'LINE SEPARATOR = buf . toString ( ) ;', 'LINE SEPARATOR = buf . toString ( ) ;', 'try ( final StringBuilderWriter sw = new StringBuilderWriter ( ) ) {']","['import org . apache . commons . io . FileUtils ;', 'FileUtils . forceMkdirParent ( outputFile ) ;']","['observers . clear ( ) ;', 'observers . clear ( ) ;', 'observer . data ( pDataByte ) ;', 'observer . data ( pDataByte ) ;', 'protected void noteFinished ( ) throws IOException {', 'protected void noteFinished ( ) throws IOException {', 'try {', 'try {', 'import java . security . MessageDigest ;', 'import java . security . MessageDigest ;']","['final String valueUp = value . toUpperCase ( ComparisonLocale ) ;', 'final String valueUp = value . toUpperCase ( ComparisonLocale ) ;', 'public static ByteOrder parseByteOrder ( final String value ) {', 'public static ByteOrder parseByteOrder ( final String value ) {', 'return ByteOrder . BIG ENDIAN ;', 'return ByteOrder . BIG ENDIAN ;', 'final String littleEndianUp = LITTLE ENDIAN . toUpperCase ( ComparisonLocale ) ;', 'final String littleEndianUp = LITTLE ENDIAN . toUpperCase ( ComparisonLocale ) ;', 'if ( bigEndianUp . equals ( valueUp ) | | ByteOrder . BIG ENDIAN . toString ( ) . equals ( valueUp ) ) {', 'if ( bigEndianUp . equals ( valueUp ) | | ByteOrder . BIG ENDIAN . toString ( ) . equals ( valueUp ) ) {']","['return 1 ;', '} else if ( ch0 = = UNIX SEPARATOR ) {', 'assertEquals ( 1 , FilenameUtils . getPrefixLength ( "" / : / "" ) ) ;', 'assertEquals ( 1 , FilenameUtils . getPrefixLength ( "" / : : : : : : : . txt"" ) ) ;', 'assertEquals ( 1 , FilenameUtils . getPrefixLength ( "" / : foo"" ) ) ;']","['this ( 1024 ) ;', 'static final int DEFAULT SIZE = 1024 ;', 'this ( DEFAULT SIZE ) ;', 'this ( threshold , null , prefix , suffix , directory ) ;', 'currentOutputStream = memoryOutputStream ;', 'this ( threshold , outputFile , null , null , null ) ;', 'final String suffix , final File directory , final int initialBufferSize ) {', 'memoryOutputStream = new ByteArrayOutputStream ( ) ;', 'this ( threshold , null , prefix , suffix , directory , initialBufferSize ) ;', 'final String suffix , final File directory ) {']","['return true ;', 'import java . nio . file . Files ;', 'return Java7Support . isSymLink ( file ) ;', 'return Files . isSymbolicLink ( file . toPath ( ) ) ;', '}', 'if ( FilenameUtils . isSystemWindows ( ) ) {', 'return isBrokenSymlink ( file ) ;', ') ;', '} else {', 'return aFile . equals ( canon ) ;']","['@ SuppressWarnings ( ""deprecation"" )', '} else if ( charset = = StandardCharsets . UTF 16BE | | charset = = StandardCharsets . UTF 16LE ) {', '} else if ( charset = = Charsets . UTF 8 ) {', '} else if ( charset = = StandardCharsets . UTF 8 ) {', '} else if ( charset = = Charsets . UTF 16 ) {', '} else if ( charset = = StandardCharsets . UTF 16 ) {', '} else if ( charset = = Charsets . UTF 16BE | | charset = = Charsets . UTF 16LE ) {', 'import java . nio . charset . StandardCharsets ;', '@ SuppressWarnings ( ""deprecation"" )', '@ SuppressWarnings ( ""deprecation"" )']","['@ SuppressWarnings ( ""deprecation"" )', '@ SuppressWarnings ( ""deprecation"" )', '@ SuppressWarnings ( ""javadoc"" )', 'import org . junit . Before ;', 'BufferedReader br = new BufferedReader ( mr ) ;', 'try ( BufferedReader br = new BufferedReader ( mr ) ) {', 'br . readLine ( ) ;', 'br . readLine ( ) ;', '}', 'md5InputStream . consume ( ) ;']","['try {', 'new BufferedOutputStream ( new FileOutputStream ( testFile ) ) ) {', 'final BufferedOutputStream output =', 'try ( final BufferedOutputStream output =', 'new BufferedOutputStream ( new FileOutputStream ( testFile ) ) ;', 'IOUtils . closeQuietly ( output ) ;', '} finally {', 'try {', 'new BufferedOutputStream ( new FileOutputStream ( subFile ) ) ) {', 'final BufferedOutputStream output =']","['@ SuppressWarnings ( ""deprecation"" )', '@ SuppressWarnings ( ""deprecation"" )', 'try {', 'final long bytes = FileSystemUtils . freeSpace ( """" ) ;', 'long bytes = FileSystemUtils . freeSpace ( """" ) ;', 'final long free = FileSystemUtils . freeSpace ( "" / "" ) ;', 'IOUtils . closeQuietly ( r ) ;', 'try ( BufferedReader r = new BufferedReader ( new InputStreamReader ( proc . getInputStream ( ) ) ) ) {', 'r = new BufferedReader ( new InputStreamReader ( proc . getInputStream ( ) ) ) ;', '} finally {']","['@ Override', '@ Override', '@ Override', '@ Override', '@ Override', '@ Override', '@ Override', '@ Override', '@ Override', '@ Override']","['try ( final StringBuilderWriter buf = new StringBuilderWriter ( 4 ) ;', 'public static URL resourceToURL ( final String name , final ClassLoader classLoader ) throws IOException {', 'return toString ( resourceToURL ( name , classLoader ) , encoding ) ;', 'if ( resource = = null ) {', 'public static byte [ ] resourceToByteArray ( final String name ) throws IOException {', 'public static byte [ ] resourceToByteArray ( final String name , final ClassLoader classLoader ) throws IOException {', 'final URL resource = classLoader = = null ? IOUtils . class . getResource ( name ) : classLoader . getResource ( name ) ;', 'throw new IOException ( ""Resource not found : "" + name ) ;', 'return toByteArray ( resourceToURL ( name , classLoader ) ) ;', '}']","['try {', 'try ( final PrintWriter output = new PrintWriter ( new OutputStreamWriter ( new FileOutputStream ( file ) , ""UTF - 8"" ) ) ) {', '} finally {', 'IOUtils . closeQuietly ( output ) ;', 'import org . apache . commons . io . IOUtils ;', 'final PrintWriter output = new PrintWriter ( new OutputStreamWriter ( new FileOutputStream ( file ) , ""UTF - 8"" ) ) ;']",['Thread . sleep ( delayMillis ) ;'],"['FileOutputStream out = null ;', 'try ( final BufferedOutputStream output1 =', 'try {', 'try ( FileOutputStream out = FileUtils . openOutputStream ( file ) ) {', 'in = FileUtils . openInputStream ( directory ) ;', 'try ( FileInputStream in = FileUtils . openInputStream ( directory ) ) {', '} finally {', 'try ( final BufferedOutputStream output2 =', 'IOUtils . closeQuietly ( output ) ;', 'try ( FileInputStream in = FileUtils . openInputStream ( file ) ) {']","['testParentDir . delete ( ) ;', 'testParentDir . delete ( ) ;', 'try {', 'assertFalse ( testParentDir . exists ( ) ) ;', 'file . deleteOnExit ( ) ;', 'assertTrue ( testParentDir . exists ( ) ) ;', 'assertFalse ( testParentDir . exists ( ) ) ;', 'assertFalse ( testFile . exists ( ) ) ;', '}', 'final File testFile = new File ( testParentDir , ""test . txt"" ) ;']","['new BufferedOutputStream ( new FileOutputStream ( file ) ) ;', 'BufferedReader reader = new BufferedReader ( new InputStreamReader ( new FileInputStream ( origin ) , charsetUTF8 ) ) ) {', 'BufferedReader reader = null ;', '} finally {', 'reader = new BufferedReader ( new InputStreamReader ( new FileInputStream ( origin ) , charsetUTF8 ) ) ;', 'try ( FileWriter writer = new FileWriter ( file , true ) ) {', 'final FileWriter writer = null ;', 'try ( Writer out = new OutputStreamWriter ( new FileOutputStream ( file ) , charsetUTF8 ) ;', 'try {', 'new BufferedOutputStream ( new FileOutputStream ( file ) ) ) {']","['final Tailer tailer = new Tailer ( file , listener , delay , false ) ;', 'writeString ( file , "" one \\ n"" ) ;', 'try {', 'tailer = new Tailer ( file , listener , delay , false , 4096 ) ;', '}', 'TestUtils . sleep ( delay * 2 ) ;', 'thread . interrupt ( ) ;', 'lines = listener . getLines ( ) ;', '} finally {', 'TestUtils . sleep ( testDelayMillis ) ;']","['assertTrue (', 'FileUtils . forceDelete ( testDirectory ) ;', '""Check No Exist"" ,', 'assertFalse ( ""TestDirectory must not exist"" , testDirectory . exists ( ) ) ;', 'FileUtils . forceDelete ( testDirectory . getParentFile ( ) ) ;', 'assertTrue ( ""TestDirectory must exist"" , testDirectory . exists ( ) ) ;', '!testDirectory . getParentFile ( ) . exists ( ) ) ;']","['testDir = new File ( ""test / io / "" ) . getAbsoluteFile ( ) ;', 'testDir = new File ( ""target / test io / "" ) . getAbsoluteFile ( ) ;', 'fail ( ""Could not create directory "" + testDir ) ;', '}', 'import static org . junit . Assert . fail ;', 'if ( !testDir . isDirectory ( ) ) {']",['import java . security . MessageDigest ;'],"['if ( src . isFile ( ) ) {', '} else if ( src . isDirectory ( ) ) {', 'public static void copyToDirectory ( final Iterable < File > srcs , final File destDir ) throws IOException {', 'copyDirectoryToDirectory ( src , destDir ) ;', 'throw new NullPointerException ( ""Source must not be null"" ) ;', 'throw new NullPointerException ( ""Sources must not be null"" ) ;', 'copyFileToDirectory ( src , destDir ) ;', 'if ( src = = null ) {', '}', '} else {']","['throw new IOException ( ""Unexpected readed size . current : "" + offset + "" , excepted : "" + size ) ;', 'throw new IOException ( ""Unexpected read size . current : "" + offset + "" , expected : "" + size ) ;', 'assertTrue ( ""Exception message does not start with \\ ""Unexpected readed size \\ """" ,', 'fail ( ""IOException expected"" ) ;', 'fail ( ""IOException excepted"" ) ;', 'assertTrue ( ""Exception message does not start with \\ ""Unexpected read size \\ """" ,', 'exc . getMessage ( ) . startsWith ( ""Unexpected readed size"" ) ) ;', 'exc . getMessage ( ) . startsWith ( ""Unexpected read size"" ) ) ;']","['offset + = readed ;', 'offset + = read ;', 'int readed ;', 'while ( offset < size & & ( read = input . read ( data , offset , size - offset ) ) ! = EOF ) {', 'while ( offset < size & & ( readed = input . read ( data , offset , size - offset ) ) ! = EOF ) {', 'int read ;']","['fail ( ""IllegalArgumentException excepted"" ) ;', 'fail ( ""IllegalArgumentException expected"" ) ;']","['fail ( ""Expected IllegalStateException"" ) ;']","['assertEquals ( ""Interval"" , interval , monitor . getInterval ( ) ) ;', 'assertEquals ( ""Interval"" , interval , monitor . getInterval ( ) ) ;', 'try {', 'try {', '}', '}', 'fail ( ""Threw "" + e ) ;', 'checkFile ( ""Delete"" , file2 , listener . getDeletedFiles ( ) ) ;', 'checkFile ( ""Delete"" , file2 , listener . getDeletedFiles ( ) ) ;', 'public void testThreadFactory ( ) throws Exception {']","['public void testCancel ( ) {', 'public void testCancel ( ) throws IOException {', 'final List results = walker . find ( javaDir ) ;', 'final List results = walker . find ( javaDir ) ;', 'fail ( ""IOException : "" + cancelName + "" "" + ex ) ;', 'final List results = new TestCancelWalker ( cancelName , true ) . find ( javaDir ) ;', 'try {', 'public void testMultiThreadCancel ( ) throws IOException {', 'final List results = new TestCancelWalker ( cancelName , true ) . find ( javaDir ) ;', 'final File lastFile = ( File ) results . get ( results . size ( ) - 1 ) ;']","['this . boms = Arrays . asList ( boms ) ;', 'import java . util . Collections ;', 'Arrays . sort ( boms , ByteOrderMarkLengthComparator ) ;', 'Collections . sort ( list , ByteOrderMarkLengthComparator ) ;', 'List < ByteOrderMark > list = Arrays . asList ( boms ) ;', 'this . boms = list ;']","['return IOUtils . toByteArray ( in ) ;', 'long fileLength = file . length ( ) ;', 'return fileLength > 0 ? IOUtils . toByteArray ( in , fileLength ) : IOUtils . toByteArray ( in ) ;']","['assertEquals ( 100 , IOUtils . copyLarge ( is , os , - 10 , 100 ) ) ;', 'IOUtils . closeQuietly ( is ) ;', 'IOUtils . closeQuietly ( os ) ;', 'assertEquals ( - 1 , oarr [ 80 ] ) ;', 'try {', '@ Test', 'os = new ByteArrayOutputStream ( ) ;', 'final byte [ ] oarr = os . toByteArray ( ) ;', 'assertEquals ( 1 , oarr [ 1 ] ) ;', 'assertEquals ( 79 , oarr [ 79 ] ) ;']","['public void flush ( ) throws IOException {', '@ Override', 'throw new IOException ( ""flush ( ) failed : stream is closed"" ) ;', '}', 'public void testFlush ( ) throws Exception {', 'fail ( ""flush ( ) "" ) ;', '@ Test', 'try ( ClosedOutputStream cos = new ClosedOutputStream ( ) ) {', '}', '} catch ( final IOException e ) {']","['final String [ ] cmdAttribs = new String [ ] { ""cmd . exe"" , "" / C"" , ""dir / a / - c "" + path } ;', 'normPath = "" \\ """" + normPath + "" \\ """" ;', 'path = FilenameUtils . normalize ( path , false ) ;', 'if ( normPath = = null ) {', 'path = "" \\ """" + path + "" \\ """" ;', 'final String [ ] cmdAttribs = new String [ ] { ""cmd . exe"" , "" / C"" , ""dir / a / - c "" + normPath } ;', 'return parseDir ( line , path ) ;', 'return parseDir ( line , normPath ) ;', 'if ( path . length ( ) > 0 & & path . charAt ( 0 ) ! = \'""\' ) {', '""for path \'"" + normPath + ""\'"" ) ;']","['return byteOrderMark ! = null & & getBOM ( ) . equals ( bom ) ;', 'getBOM ( ) ;', 'return byteOrderMark ! = null & & byteOrderMark . equals ( bom ) ;']","['final ObjectOutputStream oos = new ObjectOutputStream ( baos ) ;', 'assertTrue ( ""Assignable"" , Runnable . class . isAssignableFrom ( result ) ) ;', '}', 'final Class < ? > result = clois . resolveProxyClass ( interfaces ) ;', 'assertTrue ( ""Assignable"" , Serializable . class . isAssignableFrom ( result ) ) ;', 'final String [ ] interfaces = new String [ ] { Comparable . class . getName ( ) ,', 'public void testResolveProxyClassWithMultipleInterfaces ( ) throws Exception {', 'oos . writeObject ( Boolean . FALSE ) ;', 'assertFalse ( ""Not Assignable"" , Flushable . class . isAssignableFrom ( result ) ) ;', 'Runnable . class . getName ( ) } ;']","['private Object o ;', 'private final E e ;', 'private E e ;', 'private final int i ;', 'private int i ;', 'private final Object o ;', ""private char [ ] anotherTestContent = new char [ ] { 'f' , 'z' , 'x' } ;"", ""private final char [ ] anotherTestContent = new char [ ] { 'f' , 'z' , 'x' } ;""]","['testFile1 = new File ( getTestDirectory ( ) , ""file1 - test . txt"" ) ;', 'import org . junit . Rule ;', 'FileUtils . deleteDirectory ( getTestDirectory ( ) ) ;', '}', '}', 'private File testFile1 ;', 'testFile1Size = ( int ) testFile1 . length ( ) ;', 'public class FilenameUtilsTestCase {', 'testFile2 = new File ( getTestDirectory ( ) , ""file1a - test . txt"" ) ;', 'private File getTestDirectory ( ) {']","['public class FileCleaningTrackerTestCase extends FileBasedTestCase {', 'if ( theInstance ! = null ) {', 'FileUtils . deleteDirectory ( getTestDirectory ( ) ) ;', 'import org . junit . Rule ;', 'theInstance . q = new ReferenceQueue < > ( ) ;', 'theInstance . q = new ReferenceQueue < > ( ) ;', 'import java . io . * ;', '}', '}', 'private File getTestDirectory ( ) {']","['public class FileWriterWithEncodingTest extends FileBasedTestCase {', 'import org . junit . Rule ;', 'import static org . junit . Assert . assertTrue ;', 'import org . junit . rules . TemporaryFolder ;', 'import static org . junit . Assert . fail ;', 'private File getTestDirectory ( ) {', 'import static org . apache . commons . io . testtools . TestUtils . checkFile ;', 'return temporaryFolder . getRoot ( ) ;', 'import org . apache . commons . io . testtools . FileBasedTestCase ;', '@ Rule']","['import static org . junit . Assert . assertSame ;', 'import org . junit . Rule ;', 'import static org . junit . Assert . assertNull ;', 'import static org . junit . Assert . assertSame ;', 'public abstract class ComparatorAbstractTestCase extends FileBasedTestCase {', 'import org . junit . rules . TemporaryFolder ;', 'import static org . junit . Assert . assertTrue ;', 'import static org . junit . Assert . assertNull ;', 'import static org . junit . Assert . assertEquals ;', 'protected File getTestDirectory ( ) {']","['import org . junit . Test ;', 'import org . junit . Test ;', 'import org . junit . Before ;', 'import org . junit . Before ;', 'import static org . junit . Assert . fail ;', 'import static org . junit . Assert . fail ;', 'import static org . junit . Assert . assertEquals ;', 'import static org . junit . Assert . assertEquals ;', 'import static org . junit . Assert . assertSame ;', 'import static org . junit . Assert . assertSame ;']","['public class TailerTest extends FileBasedTestCase {', 'import org . junit . Rule ;', 'import static org . junit . Assert . assertNull ;', '}', 'import java . io . * ;', 'private File getTestDirectory ( ) {', 'import static org . junit . Assert . assertTrue ;', 'import java . io . BufferedReader ;', 'import static org . junit . Assert . assertEquals ;', 'import java . io . OutputStreamWriter ;']","['import org . junit . Before ;', 'import org . junit . Before ;', 'import static org . junit . Assert . assertTrue ;', 'import static org . junit . Assert . assertTrue ;', 'import static org . junit . Assert . assertEquals ;', 'import static org . junit . Assert . assertEquals ;', 'import org . junit . Test ;', 'import org . junit . Test ;', 'import static org . junit . Assert . assertFalse ;', 'import static org . junit . Assert . assertFalse ;']","['import static org . junit . Assert . assertSame ;', 'import org . junit . Rule ;', 'import java . util . * ;', 'import static org . junit . Assert . assertSame ;', 'import java . io . * ;', '}', 'import static org . junit . Assert . assertTrue ;', 'private File getTestDirectory ( ) {', 'import static org . junit . Assert . assertEquals ;', 'import java . util . Arrays ;']","['import org . junit . Before ;', 'import org . junit . Before ;', 'import org . junit . Test ;', 'import org . junit . Test ;', 'import org . junit . Before ;', 'import org . junit . Before ;', 'import static org . junit . Assert . assertTrue ;', 'import static org . junit . Assert . assertTrue ;', 'import static org . junit . Assert . assertEquals ;', 'import static org . junit . Assert . assertEquals ;']","['import static org . junit . Assert . assertTrue ;', 'import org . junit . Rule ;', 'import static org . junit . Assert . assertEquals ;', 'import org . junit . rules . TemporaryFolder ;', 'import org . junit . After ;', 'private File getTestDirectory ( ) {', 'import org . junit . Test ;', 'return temporaryFolder . getRoot ( ) ;', 'import org . apache . commons . io . testtools . FileBasedTestCase ;', '@ Rule']","['import java . nio . charset . Charset ;', 'import java . nio . charset . Charset ;', 'import java . util . Arrays ;', 'import java . util . Arrays ;', 'import org . junit . Test ;', 'import org . junit . Test ;', 'import org . apache . commons . io . testtools . FileBasedTestCase ;', '@ ClassRule', 'public class CopyUtilsTest extends FileBasedTestCase {', 'import org . junit . rules . TemporaryFolder ;']","['private final byte [ ] inData = TestUtils . generateTestData ( ( long ) FILE SIZE ) ;', 'private final byte [ ] inData = TestUtils . generateTestData ( FILE SIZE ) ;', 'TestUtils . generateTestData ( output , ( long ) 100 ) ;', 'TestUtils . generateTestData ( output , 100 ) ;', 'TestUtils . generateTestData ( output , ( long ) 16 ) ;', 'TestUtils . generateTestData ( output , 16 ) ;', 'TestUtils . generateTestData ( output , ( long ) FILE2 SIZE ) ;', 'TestUtils . generateTestData ( output , FILE2 SIZE ) ;', 'TestUtils . generateTestData ( output1 , ( long ) FILE1 SIZE ) ;', 'TestUtils . generateTestData ( output1 , FILE1 SIZE ) ;']","['long freeSpaceWindows ( String path , final long timeout ) throws IOException {', 'long freeSpaceWindows ( final String path , final long timeout ) throws IOException {', 'private static void checkFileRequirements ( File src , File dest ) throws FileNotFoundException {', 'private static void checkFileRequirements ( final File src , final File dest ) throws FileNotFoundException {', 'private static long sizeOf0 ( File file ) {', 'private static long sizeOf0 ( final File file ) {', 'private static File [ ] verifiedListFiles ( File directory ) throws IOException {', 'private static File [ ] verifiedListFiles ( final File directory ) throws IOException {', 'private static void failIfNullBytePresent ( String path ) {', 'private static void failIfNullBytePresent ( final String path ) {']","['private File getLocalTestDirectory ( ) {', 'import org . junit . Rule ;', '@ ClassRule', 'public TemporaryFolder temporaryFolder = new TemporaryFolder ( ) ;', 'chmod ( top , 775 , true ) ;', '@ Rule', 'FileUtils . deleteDirectory ( getTestDirectory ( ) ) ;', 'top = temporaryFolder . getRoot ( ) ;', 'public void tearDown ( ) throws Exception {', 'private File top ;']","['assertEquals ( free / 2d , kb , 256d ) ;', 'assertEquals ( free , kb , acceptableDelta ) ;', 'assertEquals ( free , kb , 256d ) ;', 'assertEquals ( ( double ) bytes / 1024 , kb , acceptableDelta ) ;', 'assertEquals ( ( double ) bytes / 1024 , kb , 256d ) ;', 'double acceptableDelta = kb * 0 . 01d ;', 'assertEquals ( free / 2d , kb , acceptableDelta ) ;']","['public void setUp ( ) {', 'try ( OutputStreamWriter out = new OutputStreamWriter ( new FileOutputStream ( encodingFinder ) ) ) {', 'OutputStreamWriter out = null ;', 'public void setUp ( ) throws Exception {', 'try {', 'throw new RuntimeException ( ex . getMessage ( ) ) ;', 'out = new OutputStreamWriter ( new FileOutputStream ( encodingFinder ) ) ;', 'IOUtils . closeQuietly ( out ) ;', '} finally {', '} catch ( final IOException ex ) {']","['long fileLength = file . length ( ) ;', 'final long fileLength = file . length ( ) ;', 'for ( File src : srcs ) {', 'final long finishAt = System . currentTimeMillis ( ) + ( seconds * 1000L ) ;', 'long finishAt = System . currentTimeMillis ( ) + ( seconds * 1000L ) ;', 'final long remaining = finishAt - System . currentTimeMillis ( ) ;', 'long remaining = finishAt - System . currentTimeMillis ( ) ;', 'for ( final File src : srcs ) {', 'String path = filename . substring ( prefix , endIndex ) ;', 'final String path = filename . substring ( 0 , len ) ;']","['public class ByteOrderFactory {', 'private ByteOrderFactory ( ) {', '}', 'public final class ByteOrderFactory {']",['@ Deprecated'],"['private ByteOrderFactory ( ) {', 'public final class ByteOrderUtils {', 'public final class ByteOrderFactory {', 'private ByteOrderUtils ( ) {', 'public class ByteOrderFactoryTest {', 'public class ByteOrderUtilsTest {', 'return ByteOrderFactory . parseByteOrder ( value ) ;', 'return ByteOrderUtils . parseByteOrder ( value ) ;']","['protected String testDirName = null ;', 'public abstract class AbstractMonitorTestCase {', '}', 'import org . junit . Rule ;', '} else {', 'import org . junit . rules . TemporaryFolder ;', 'FileUtils . cleanDirectory ( testDir ) ;', 'public TemporaryFolder temporaryFolder = new TemporaryFolder ( ) ;', 'if ( testDir . exists ( ) ) {', '@ Rule']","['final String valueUp = value . toUpperCase ( ComparisonLocale ) ;', 'if ( ByteOrder . BIG ENDIAN . toString ( ) . equals ( value ) ) {', 'public final class ByteOrderUtils {', 'throw new IllegalArgumentException ( ""Unsupported byte order setting : "" + value + "" , expeced one of "" + ByteOrder . LITTLE ENDIAN +', 'final String littleEndianUp = LITTLE ENDIAN . toUpperCase ( ComparisonLocale ) ;', 'public final class ByteOrderParser {', 'if ( bigEndianUp . equals ( valueUp ) | | ByteOrder . BIG ENDIAN . toString ( ) . equals ( valueUp ) ) {', 'if ( ByteOrder . LITTLE ENDIAN . toString ( ) . equals ( value ) ) {', 'throw new IllegalArgumentException ( ""Unsupported byte order setting : "" + value + "" , expeced one of "" + ByteOrder . LITTLE ENDIAN + "" , "" +', '"" , "" + ByteOrder . BIG ENDIAN ) ;']","['@ Test', '""17 / 08 / 2005 21 : 44 < DIR > Desktop \\ n"" +', '""19 / 08 / 2005 22 : 43 < DIR > . \\ n"" +', '"" \\ n"" +', '}', 'public void testGetFreeSpaceWindows String ParseCommaFormatBytes Big ( ) throws Exception {', 'assertEquals ( 141411551232L , fsu . freeSpaceWindows ( """" , - 1 ) ) ;', 'final String lines =', 'public void testGetFreeSpaceWindows String ParseCommaFormatBytes Small ( ) throws Exception {', '""11 / 08 / 2005 01 : 07 81 build . properties \\ n"" +']","['1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 ,', '0 ,', '} ;', '29 , 30 , 31 ,', 'public static final char [ ] WINDOWS ILLEGAL FILE NAME CHARS = {', '\' < \' , \' > \' , \' : \' , \'""\' , \' / \' , \' \\ \\ \' , \' | \' , \' ? \' , \' * \'']","['\' < \' , \' > \' , \' : \' , \'""\' , \' / \' , \' \\ \\ \' , \' | \' , \' ? \' , \' * \'', '}', 'public static final char [ ] WINDOWS ILLEGAL FILE NAME CHARS = {', 'private static final char [ ] WINDOWS ILLEGAL FILE NAME CHARS = {', '\'""\' , \' * \' , \' / \' , \' : \' , \' < \' , \' > \' , \' ? \' , \' \\ \\ \' , \' | \'', 'public static boolean isIllegalWindowsFileName ( final char c ) {', 'return Arrays . binarySearch ( WINDOWS ILLEGAL FILE NAME CHARS , c ) > = 0 ;', 'import java . util . Arrays ;', 'char [ ] illegal = new char [ ] { \' < \' , \' > \' , \' : \' , \'""\' , \' / \' , \' \\ \\ \' , \' | \' , \' ? \' , \' * \' } ;', 'Arrays . sort ( illegal ) ;']","['private static final String OS NAME = getSystemProperty ( ""os . name"" ) ;', 'if ( IS OS MAC ) {', 'try {', '} ) ;', '}', 'return FileSystem . MAC OSX ;', 'return maxFileNameLength ;', '\'""\' , \' * \' , \' / \' , \' : \' , \' < \' , \' > \' , \' ? \' , \' \\ \\ \' , \' | \'', 'return FileSystem . WINDOWS ;', 'for ( int i = 0 ; i < charArray . length ; i + + ) {']","['Arrays . sort ( illegal ) ;', 'char [ ] chars = fs . getIllegalFileNameChars ( ) ;', 'import java . util . Arrays ;', '@ Test', 'System . out . println ( Arrays . toString ( illegal ) ) ;', 'for ( FileSystem fs : FileSystem . values ( ) ) {', 'for ( int i = 0 ; i < chars . length - 1 ; i + + ) {', '}', 'public void testSorted ( ) {', 'Assert . assertTrue ( fs . name ( ) , chars [ i ] < chars [ i + 1 ] ) ;']","['return true ;', 'if ( candidate = = null | | candidate . length ( ) = = 0 | | candidate . length ( ) > maxFileNameLength ) {', 'public boolean isLegalFileName ( final CharSequence candidate ) {', 'if ( isIllegalFileNameChar ( candidate . charAt ( i ) ) ) {', '}', 'for ( int i = 0 ; i < candidate . length ( ) ; i + + ) {', 'return false ;', '@ Test', 'for ( FileSystem fs : FileSystem . values ( ) ) {', 'Assert . assertTrue ( fs . name ( ) , fs . isLegalFileName ( ""0"" ) ) ;']","['replacement , name ( ) , Arrays . toString ( illegalFileNameChars ) ) ) ;', 'replacement = = \' \\ 0\' ? "" \\ \\ 0"" : replacement , name ( ) , Arrays . toString ( illegalFileNameChars ) ) ) ;', '}', 'public void testReplacementWithNUL ( ) {', 'try {', '@ Test', 'for ( FileSystem fs : FileSystem . values ( ) ) {', 'Assert . assertTrue ( iae . getMessage ( ) , iae . getMessage ( ) . startsWith ( ""The replacement character \' \\ \\ 0\'"" ) ) ;', '}', 'fs . toLegalFileName ( ""Test"" , \' \\ 0\' ) ;']","['GENERIC ( Integer . MAX VALUE , Integer . MAX VALUE , new char [ ] { 0 } ) ,', 'GENERIC ( Integer . MAX VALUE , Integer . MAX VALUE , new char [ ] { 0 } , new String [ ] { } ) ,', '} ) ,', 'this . reservedFileNames = Objects . requireNonNull ( reservedFileNames , ""reservedFileNames"" ) ;', '} ) ;', '} , new String [ ] { } ) ,', 'private FileSystem ( final int maxFileLength , final int maxPathLength , final char [ ] illegalFileNameChars ) {', '} ,', '}', 'public String [ ] getReservedFileNames ( ) {']","['GENERIC ( Integer . MAX VALUE , Integer . MAX VALUE , new char [ ] { 0 } , new String [ ] { } ) ,', 'GENERIC ( Integer . MAX VALUE , Integer . MAX VALUE , new char [ ] { 0 } , new String [ ] { } ) ,', 'return true ;', 'return true ;', 'if ( candidate = = null | | candidate . length ( ) = = 0 | | candidate . length ( ) > maxFileNameLength ) {', 'if ( candidate = = null | | candidate . length ( ) = = 0 | | candidate . length ( ) > maxFileNameLength ) {', 'private static final boolean IS OS WINDOWS = getOsMatchesName ( OS NAME WINDOWS PREFIX ) ;', 'private static final boolean IS OS WINDOWS = getOsMatchesName ( OS NAME WINDOWS PREFIX ) ;', 'private static final String OS NAME WINDOWS PREFIX = ""Windows"" ;', 'private static final String OS NAME WINDOWS PREFIX = ""Windows"" ;']","['return reservedFileNames ;', 'return reservedFileNames . clone ( ) ;']","['builder . append ( Integer . toHexString ( 0xFF & bytes [ i ] ) . toUpperCase ( ) ) ;', 'builder . append ( Integer . toHexString ( 0xFF & bytes [ i ] ) . toUpperCase ( Locale . ROOT ) ) ;', 'import java . util . Locale ;', 'encoding = m . group ( 1 ) . toUpperCase ( ) ;', 'encoding = m . group ( 1 ) . toUpperCase ( Locale . ROOT ) ;', 'encoding = encoding ! = null ? encoding . toUpperCase ( Locale . US ) : null ;', 'encoding = encoding ! = null ? encoding . toUpperCase ( Locale . ROOT ) : null ;', 'encoding = m . group ( 1 ) . toUpperCase ( ) ;', 'import java . util . Locale ;', 'encoding = m . group ( 1 ) . toUpperCase ( Locale . ROOT ) ;']","['return Math . min ( posUnix , posWin ) + 1 ;', 'String octet = octets [ index ] ;', '} catch ( NumberFormatException e ) {', 'return isIPv4Address ( name ) | | isIPv6Address ( name ) | | isRFC3986HostName ( name ) ;', 'if ( !m . matches ( ) | | m . groupCount ( ) ! = 4 ) {', 'try {', 'private static final int IPV4 MAX OCTET VALUE = 255 ;', 'if ( ipSegment = = null | | ipSegment . length ( ) = = 0 ) {', 'return true ;', 'octetList . remove ( 0 ) ;']","['final String [ ] reservedFileNames ) {', 'FileSystem ( final int maxFileLength , final int maxPathLength , final char [ ] illegalFileNameChars ,', 'private FileSystem ( final int maxFileLength , final int maxPathLength , final char [ ] illegalFileNameChars ,', 'final String [ ] reservedFileNames ) {', 'private IOCase ( final String name , final boolean sensitive ) {', 'IOCase ( final String name , final boolean sensitive ) {']","['public void testLowerCaseEncoding ( ) throws Exception {', '@ SystemDefaults ( locale = ""tr"" )', 'import org . junit . Rule ;', '@ Rule', 'import org . apache . commons . io . testtools . SystemDefaultsSwitch ;', 'public void testLowerCaseEncodingWithTurkishLocale IO 557 ( ) throws Exception {', 'import org . apache . commons . io . testtools . SystemDefaults ;', 'public SystemDefaultsSwitch locale = new SystemDefaultsSwitch ( ) ;', 'public void testLowerCaseEncoding ( ) throws IOException {', '@ SystemDefaults ( locale = ""tr"" )']","['public void testLowerCaseEncoding IO 557 ( ) throws IOException {', 'public void testLowerCaseEncodingWithTurkishLocale IO 557 ( ) throws IOException {']","['public static String getExtension ( final String filename ) {', 'if ( isSystemWindows ( ) ) {', 'public static int indexOfExtension ( final String filename ) {', 'private static int getAdsCriticalOffset ( String filename ) {', 'public static int indexOfExtension ( final String filename ) throws NtfsAdsNameException {', 'return offset1 + 1 ;', 'int offset1 = filename . lastIndexOf ( SYSTEM SEPARATOR ) ;', 'return offset2 + 1 ;', 'return 0 ;', 'return Math . max ( offset1 , offset2 ) + 1 ;']","['public static String getExtension ( final String filename ) {', 'if ( isSystemWindows ( ) ) {', 'public static int indexOfExtension ( final String filename ) {', 'private static int getAdsCriticalOffset ( String filename ) {', 'public static int indexOfExtension ( final String filename ) throws NtfsAdsNameException {', 'return offset1 + 1 ;', 'int offset1 = filename . lastIndexOf ( SYSTEM SEPARATOR ) ;', 'return offset2 + 1 ;', 'return 0 ;', 'return Math . max ( offset1 , offset2 ) + 1 ;']","['return offset1 + 1 ;', 'int offset1 = filename . lastIndexOf ( SYSTEM SEPARATOR ) ;', 'int offset1 = filename . lastIndexOf ( SYSTEM SEPARATOR ) ;', 'throw new IllegalArgumentException ( ""NTFS ADS separator ( \' : \' ) in filename is forbidden . "" ) ;', 'throw new IllegalArgumentException ( ""NTFS ADS separator ( \' : \' ) in filename is forbidden . "" ) ;', 'return offset2 + 1 ;', 'return offset2 + 1 ;', 'return 0 ;', 'return 0 ;', '}']","['position = 0 ;', 'position = 0 ;', '} else if ( newer ) {', '} else if ( newer ) {', 'last = file . lastModified ( ) ;', 'last = file . lastModified ( ) ;', '}', '}', '} else {', 'if ( length > position ) {']","['private final Charset cset ;', 'private final Charset charset ;', 'public Tailer ( final File file , final Charset cset , final TailerListener listener , final long delayMillis ,', 'listener . handle ( new String ( lineBuf . toByteArray ( ) , charset ) ) ;', 'this . cset = cset ;', 'this . charset = charset ;', 'listener . handle ( new String ( lineBuf . toByteArray ( ) , cset ) ) ;', 'public Tailer ( final File file , final Charset charset , final TailerListener listener , final long delayMillis ,']","[""if ( ch0 > = 'A' & & ch0 < = 'Z' ) {"", ""if ( ch0 > = 'A' & & ch0 < = 'Z' ) {"", '}', '}', 'ch0 = Character . toUpperCase ( ch0 ) ;', 'ch0 = Character . toUpperCase ( ch0 ) ;', 'return Math . max ( offset1 , offset2 ) + 1 ;', 'return Math . max ( offset1 , offset2 ) + 1 ;', 'posUnix = posUnix = = NOT FOUND ? posWin : posUnix ;', 'posUnix = posUnix = = NOT FOUND ? posWin : posUnix ;']","['if ( isSystemWindows ( ) ) {', 'return isSystemWindows ( ) ? separatorsToWindows ( path ) : separatorsToUnix ( path ) ;', 'return separatorsToWindows ( path ) ;', 'return separatorsToUnix ( path ) ;', '}']","['return """" ;', 'private static final String EMPTY STRING = """" ;', 'return EMPTY STRING ;']","['return BigInteger . valueOf ( file . length ( ) ) ;', 'return BigInteger . valueOf ( file . length ( ) ) ;', '} else {', 'return BigInteger . valueOf ( fileOrDir . length ( ) ) ;', 'return BigInteger . valueOf ( fileOrDir . length ( ) ) ;', 'filename = decodeUrl ( filename ) ;', 'filename = decodeUrl ( filename ) ;', ""String filename = url . getFile ( ) . replace ( ' / ' , File . separatorChar ) ;"", ""String filename = url . getFile ( ) . replace ( ' / ' , File . separatorChar ) ;"", 'return new File ( filename ) ;']","['public enum IOCase implements Serializable {', 'public enum IOCase {']","['} ;', '}']","['this ( file , 4096 , Charset . defaultCharset ( ) ) ;', 'this ( file , DEFAULT BLOCK SIZE , Charset . defaultCharset ( ) ) ;', 'this ( file , 4096 , charset ) ;', 'private static final int DEFAULT BLOCK SIZE = 4096 ;', 'this ( file , DEFAULT BLOCK SIZE , charset ) ;']","['if ( """" . equals ( line ) & & !trailingNewlineOfFileSkipped ) {', 'if ( EMPTY STRING . equals ( line ) & & !trailingNewlineOfFileSkipped ) {', 'private static final String EMPTY STRING = """" ;']","['public static String getExtension ( final String filename ) throws IllegalArgumentException {', 'return equals ( fileName1 , fileName2 , true , IOCase . SENSITIVE ) ;', 'int offset2 = filename . lastIndexOf ( OTHER SEPARATOR ) ;', 'if ( prefix > = fileName . length ( ) | | index < 0 | | prefix > = endIndex ) {', 'return indexOfExtension ( filename ) = = NOT FOUND ;', 'return doGetFullPath ( fileName , false ) ;', 'public static boolean wildcardMatch ( final String filename , final String wildcardMatcher ) {', 'return getPrefix ( fileName ) ;', ""final int offset = filename . indexOf ( ' : ' , getAdsCriticalOffset ( filename ) ) ;"", 'return equals ( fileName1 , fileName2 , false , IOCase . SENSITIVE ) ;']","['return normalize ( fullFilenameToAdd ) ;', 'public static String concat ( final String basePath , final String fullFileNameToAdd ) {', 'return normalize ( basePath + fullFilenameToAdd ) ;', 'return normalize ( fullFileNameToAdd ) ;', 'public static String concat ( final String basePath , final String fullFilenameToAdd ) {', 'final int prefix = getPrefixLength ( fullFileNameToAdd ) ;', ""return normalize ( basePath + ' / ' + fullFilenameToAdd ) ;"", ""return normalize ( basePath + ' / ' + fullFileNameToAdd ) ;"", 'final int prefix = getPrefixLength ( fullFilenameToAdd ) ;', 'return normalize ( basePath + fullFileNameToAdd ) ;']","['}', 'files . add ( directory ) ;', 'files . add ( directory ) ;', 'if ( directory . isDirectory ( ) ) {']","['return files ;', '}', '}', 'validateMoveParameters ( srcDir , destDir ) ;', 'FileFilterUtils . or ( effFileFilter , effDirFilter ) , false ) ;', 'if ( src . isDirectory ( ) ) {', 'if ( src . isDirectory ( ) ) {', 'validateMoveParameters ( src , destDir ) ;', 'innerListFiles ( files , directory ,', 'if ( dest = = null ) {']","['return osName . startsWith ( osNamePrefix ) ;', 'return osName . toUpperCase ( Locale . ROOT ) . startsWith ( osNamePrefix . toUpperCase ( Locale . ROOT ) ) ;', 'private static final boolean IS OS LINUX = getOsMatchesName ( ""Linux"" ) | | getOsMatchesName ( ""LINUX"" ) ;', 'import java . util . Locale ;', 'private static final boolean IS OS LINUX = getOsMatchesName ( ""Linux"" ) ;']","['thread . interrupt ( ) ;', '@ Test', '}', 'final FileAlterationMonitor monitor = new FileAlterationMonitor ( 1 000 ) ;', 'public void testStopWhileWaitingForNextInterval ( ) throws Exception {', '@ Override', 'createdThreads . add ( thread ) ;', 'monitor . stop ( 100 ) ;', 'monitor . setThreadFactory ( threadFactory ) ;', 'final Collection < Thread > createdThreads = new ArrayList < > ( 1 ) ;']","['FilenameUtils . normalize ( "" \\ \\ \\ \\ 127 . 0 . 0 . 256 \\ \\ a \\ \\ b \\ \\ c . txt"" ) ) ;', 'FilenameUtils . normalize ( "" \\ \\ \\ \\ 1 : : 127 . 0 . 0 . 1 \\ \\ a \\ \\ b \\ \\ c . txt"" ) ) ;', 'assertEquals ( SEP + SEP + ""server . sub . example . org"" + SEP + ""a"" + SEP + ""b"" + SEP + ""c . txt"" , FilenameUtils . normalize ( "" \\ \\ \\ \\ server . sub . example . org \\ \\ a \\ \\ b \\ \\ c . txt"" ) ) ;', 'assertEquals ( null , FilenameUtils . normalize ( "" \\ \\ \\ \\ 1ffff : 2 : 3 : 4 : 5 : 6 : 7 : 8 \\ \\ a \\ \\ b \\ \\ c . txt"" ) ) ;', 'assertEquals ( null , FilenameUtils . normalize ( "" \\ \\ \\ \\ : 1 \\ \\ a \\ \\ b \\ \\ c . txt"" ) ) ;', 'assertEquals ( SEP + SEP + ""127 . 0 . 0 . 256"" + SEP + ""a"" + SEP + ""b"" + SEP + ""c . txt"" ,', 'assertEquals ( SEP + SEP + ""1 : : 127 . 0 . 0 . 1"" + SEP + ""a"" + SEP + ""b"" + SEP + ""c . txt"" ,', 'assertEquals ( null , FilenameUtils . normalize ( "" \\ \\ \\ \\ 1 : 2 : 3 : 4 : 5 : 6 : 7 : 8 : 9 \\ \\ a \\ \\ b \\ \\ c . txt"" ) ) ;', 'assertEquals ( null , FilenameUtils . normalize ( "" \\ \\ \\ \\ g : 2 : 3 : 4 : 5 : 6 : 7 : 8 \\ \\ a \\ \\ b \\ \\ c . txt"" ) ) ;', 'assertEquals ( SEP + SEP + ""127 . 0 . 0 . 01"" + SEP + ""a"" + SEP + ""b"" + SEP + ""c . txt"" ,']","['return isIPv4Address ( name ) | | isIPv6Address ( name ) | | isRFC3986HostName ( name ) ;', 'return isIPv6Address ( name ) | | isRFC3986HostName ( name ) ;']","['iIpSegment = Integer . parseInt ( ipSegment ) ;', 'for ( int i = 1 ; i < = 4 ; i + + ) {', '} catch ( NumberFormatException e ) {', 'int iIpSegment = Integer . parseInt ( ipSegment ) ;', 'try {', 'if ( ipSegment = = null | | ipSegment . length ( ) = = 0 ) {', 'int iIpSegment = 0 ;', '}', 'return false ;', 'for ( int i = 1 ; i < 5 ; i + + ) {']","['import java . io . Reader ;', 'public int read ( final char [ ] cbuf , final int off , final int len ) throws IOException {', '}', 'ch = in . read ( ) ;', 'import java . io . FilterReader ;', 'public int read ( ) throws IOException {', 'return - 1 ;', '} while ( filter ( ch ) ) ;', 'public abstract class AbstractCharacterFilterReader extends FilterReader {', 'int pos = off - 1 ;']","['assertByteArrayEquals ( ""TeeOutputStream . write ( byte [ ] ) "" , baos1 . toByteArray ( ) , baos2 . toByteArray ( ) ) ;', 'assertByteArrayEquals ( ""TeeOutputStream . write ( byte [ ] ) "" , expected . toByteArray ( ) , baos1 . toByteArray ( ) ) ;', 'assertByteArrayEquals ( ""TeeOutputStream . write ( byte [ ] , int , int ) "" , baos1 . toByteArray ( ) , baos2 . toByteArray ( ) ) ;', 'assertByteArrayEquals ( ""TeeOutputStream . write ( byte [ ] , int , int ) "" , expected . toByteArray ( ) , baos2 . toByteArray ( ) ) ;', 'assertByteArrayEquals ( ""TeeOutputStream . write ( int ) "" , baos1 . toByteArray ( ) , baos2 . toByteArray ( ) ) ;', 'expected . flush ( ) ;', 'assertByteArrayEquals ( ""TeeOutputStream . write ( int ) "" , expected . toByteArray ( ) , baos2 . toByteArray ( ) ) ;', 'final ByteArrayOutputStream expected = new ByteArrayOutputStream ( ) ;', 'assertByteArrayEquals ( ""TeeOutputStream . write ( int ) "" , expected . toByteArray ( ) , baos1 . toByteArray ( ) ) ;', 'expected . write ( i ) ;']","['GENERIC ( Integer . MAX VALUE , Integer . MAX VALUE , new char [ ] { 0 } , new String [ ] { } ) ,', 'return caseSensitive ;', '0 ,', 'FileSystem ( final boolean caseSensitive , final boolean casePreserving , final int maxFileLength ,', 'LINUX ( 255 , 4096 , new char [ ] {', '}', '1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 ,', 'public boolean isCasePreserving ( ) {', '} ,', '\'""\' , \' * \' , \' / \' , \' : \' , \' < \' , \' > \' , \' ? \' , \' \\ \\ \' , \' | \'']","['public static boolean isExtension ( final String fileName , final String [ ] extensions ) {', 'public static boolean isExtension ( final String fileName , final String . . . extensions ) {', '@ Test', 'assertTrue ( FilenameUtils . isExtension ( ""a \\ \\ b \\ \\ file . txt"" , ""rtf"" , ""txt"" ) ) ;', 'assertFalse ( FilenameUtils . isExtension ( ""a . b \\ \\ file . txt"" , ""rtf"" ) ) ;', '}', 'assertTrue ( FilenameUtils . isExtension ( ""a / b / file . txt"" , ""rtf"" , ""txt"" ) ) ;', 'assertFalse ( FilenameUtils . isExtension ( ""a . b \\ \\ file . txt"" , ""TXT"" , ""RTF"" ) ) ;', 'assertTrue ( FilenameUtils . isExtension ( ""file"" , ""rtf"" , """" ) ) ;', 'assertFalse ( FilenameUtils . isExtension ( ""a . b / file . txt"" , ""rtf"" ) ) ;']","['List < String > octetList = new ArrayList < String > ( Arrays . asList ( octets ) ) ;', 'List < String > octetList = new ArrayList < > ( Arrays . asList ( octets ) ) ;']","['OutputStream out = openOutputStream ( destination ) ) {', 'try ( OutputStream out = openOutputStream ( destination ) ) {', 'IOUtils . copy ( in , out ) ;', 'IOUtils . copy ( source , out ) ;', 'try ( InputStream in = source ;', 'import org . junit . Rule ;', 'Assert . assertFalse ( ""inputStream should NOT be closed"" , inputStream . isClosed ( ) ) ;', '@ Test', '}', 'private byte [ ] testData ;']","['boolean includeSubDirectories ) {', 'final boolean includeSubDirectories ) {', 'String octet = octets [ index ] ;', '} catch ( final NumberFormatException e ) {', 'private static boolean isIPv4Address ( String name ) {', 'final boolean containsCompressedZeroes = inet6Address . contains ( "" : : "" ) ;', 'private static boolean isValidHostName ( String name ) {', 'final String octet = octets [ index ] ;', 'int offset2 = fileName . lastIndexOf ( OTHER SEPARATOR ) ;', 'final Matcher m = IPV4 PATTERN . matcher ( name ) ;']","['throw new IOException ( ""Cannot create file "" + testFile +', 'throw new IOException ( ""Cannot create file "" + testFile +']","['public', 'void data ( final int pByte ) throws IOException { }', 'public void error ( final IOException pException ) throws IOException { throw pException ; }', 'void finished ( ) throws IOException { }', 'public void finished ( ) throws IOException { }', 'void closed ( ) throws IOException { }', 'public void closed ( ) throws IOException { }', 'void error ( final IOException pException ) throws IOException { throw pException ; }', 'public void data ( final int pByte ) throws IOException { }', 'void data ( final byte [ ] pBuffer , final int pOffset , final int pLength ) throws IOException { }']","['buffer . clear ( ) ;', 'in = pIn ;', 'space - = res ;', 'final byte [ ] buf = new byte [ space ] ;', 'return buffer . read ( ) ;', 'return result ;', 'final int res = in . read ( buf , 0 , space ) ;', 'protected void fillBuffer ( ) throws IOException {', 'if ( buffer . getCurrentNumberOfBytes ( ) < pNumber ) {', '}']","['final File crlf = new File ( urlCRLF . getPath ( ) ) ;', 'final File cr = new File ( urlCR . toURI ( ) ) ;', 'final File lf = new File ( urlLF . getPath ( ) ) ;', 'final File crlf = new File ( urlCRLF . toURI ( ) ) ;', 'final File cr = new File ( urlCR . getPath ( ) ) ;', 'final File lf = new File ( urlLF . toURI ( ) ) ;', 'final long fileSize = new File ( getClass ( ) . getResource ( "" / org / apache / commons / io / FileUtilsTestDataCR . dat"" ) . getFile ( ) ) . length ( ) ;', 'final long fileSize = new File ( getClass ( ) . getResource ( "" / test - file - utf8 . bin"" ) . toURI ( ) ) . length ( ) ;', 'final long fileSize = new File ( getClass ( ) . getResource ( "" / test - file - simple - utf8 . bin"" ) . getFile ( ) ) . length ( ) ;', 'final long fileSize = new File ( getClass ( ) . getResource ( "" / org / apache / commons / io / FileUtilsTestDataCR . dat"" ) . toURI ( ) ) . length ( ) ;']","['if ( lenient & xmlEnc ! = null ) {', 'if ( lenient & & ( xmlEnc ! = null ) ) {']","['ctx . setLocal ( item , Array . get ( arrayObject , currentIndex ) ) ;', 'ctx . setLocal ( item , value ) ;', 'finally {', 'public Foreach ( ) {', 'public String getIndex ( ) {', 'for ( Action aa : actions ) {', 'this . item = item ;', 'public void setItem ( final String item ) {', 'public void execute ( final EventDispatcher evtDispatcher ,', 'aa . execute ( evtDispatcher , errRep , scInstance , appLog , derivedEvents ) ;']","['private List < Transition > transitList ;', 'return defaultHistoryTransitionEntryMap ;', 'public List < Transition > getTransitList ( ) {', '}', 'import org . apache . commons . scxml2 . model . Transition ;', 'public Map < String , SimpleTransition > getDefaultHistoryTransitionEntryMap ( ) {', 'this . transitList = new ArrayList < Transition > ( ) ;', 'import java . util . HashMap ;', 'this . transitList = new ArrayList < SimpleTransition > ( ) ;', 'public List < SimpleTransition > getTransitList ( ) {']","['import org . apache . commons . logging . Log ;', 'exctx . getEventDispatcher ( ) . cancel ( sendid ) ;', 'throws ModelException , SCXMLExpressionException {', 'import org . apache . commons . scxml2 . ActionExecutionContext ;', 'import java . util . Collection ;', 'public void execute ( ActionExecutionContext exctx ) throws ModelException , SCXMLExpressionException {', 'import org . apache . commons . scxml2 . TriggerEvent ;', 'public void execute ( final EventDispatcher evtDispatcher ,', 'final ErrorReporter errRep , final SCInstance scInstance ,', 'import org . apache . commons . scxml2 . SCInstance ;']","['public final void addParam ( final Param param ) {', 'contentValue = eval . eval ( ctx , content . getExpr ( ) ) ;', 'public final List < Param > params ( ) {', 'invokeId = parentState . getId ( ) + "" . "" + ctx . get ( SCXMLSystemContext . SESSIONID KEY ) ;', 'public Invoke ( ) {', 'if ( content . getExpr ( ) ! = null ) {', 'paramsList . add ( param ) ;', 'this . typeexpr = typeexpr ;', 'import java . util . ArrayList ;', 'exctx . getInternalIOProcessor ( ) . addEvent ( new TriggerEvent ( TriggerEvent . ERROR EXECUTION , TriggerEvent . ERROR EVENT ) ) ;']","['this . context = context ;', 'return context . has ( NASHORN GLOBAL ) ;', 'return bindings . remove ( key ) ;', 'return ( Bindings ) context . get ( NASHORN GLOBAL ) ;', 'bindings . clear ( ) ;', 'if ( context . has ( NASHORN GLOBAL ) ) {', '}', '}', 'for ( String key : bindings . keySet ( ) )', 'return bindings . remove ( key ) ;']","['}', 'if ( datum . getExpr ( ) ! = null ) {', '} else {', '}', 'ctx . setLocal ( datum . getId ( ) , valueNode ) ;', 'else {', 'if ( datumNode ! = null ) {', 'ctx . setLocal ( datum . getId ( ) , evaluator . cloneData ( datum . getValue ( ) ) ) ;', 'Node datumNode = datum . getNode ( ) ;', 'valueNode = datumNode . cloneNode ( true ) ;']","['payload = makeEventPayload ( eval , payloadDataMap ) ;', 'payload = eval . cloneData ( eval . eval ( ctx , content . getExpr ( ) ) ) ;', 'payload = clonePayloadValue ( content . getBody ( ) ) ;', 'payload = payloadDataMap ;', 'Object delayValue = getTextContentIfNodeResult ( eval . eval ( ctx , delayexpr ) ) ;', 'eventValue = ( String ) eval . eval ( ctx , eventexpr ) ;', 'targetValue = ( String ) getTextContentIfNodeResult ( eval . eval ( ctx , targetexpr ) ) ;', 'typeValue = ( String ) eval . eval ( ctx , typeexpr ) ;', 'payload = clonePayloadValue ( eval . eval ( ctx , content . getExpr ( ) ) ) ;', 'Object delayValue = eval . eval ( ctx , delayexpr ) ;']","['for ( String key : globalBindings . keySet ( ) ) {', 'private static ScriptEngine engine ;', 'Bindings globalBindings = jsBindings . getGlobalBindings ( ) ;', 'protected synchronized static void initEngine ( ) {', 'Bindings bindings = engine . getBindings ( ScriptContext . ENGINE SCOPE ) ;', 'import java . io . IOException ;', 'jsContext . set ( key , globalBindings . get ( key ) ) ;', 'import javax . script . SimpleScriptContext ;', 'return factory ;', 'private transient ScriptContext scriptContext ;']","['}', 'private Object getSrcData ( final PathResolver pathResolver ) {', 'public class Assign extends Action implements PathResolverHolder {', 'public class Assign extends Action {', 'private Object getSrcData ( ) {', 'data = getSrcData ( exctx . getStateMachine ( ) . getPathResolver ( ) ) ;', 'public void setPathResolver ( final PathResolver pathResolver ) {', 'private PathResolver pathResolver ;', 'data = getSrcData ( ) ;', 'return pathResolver ;']","['result = eval . cloneData ( eval . eval ( ctx , content . getExpr ( ) ) ) ;', 'public Object processDoneData ( SCXMLExecutionContext exctx ) throws ModelException {', 'if ( content . getExpr ( ) ! = null ) {', 'this . doneData = doneData ;', 'Context ctx = exctx . getScInstance ( ) . getGlobalContext ( ) ;', '""Failed to process final donedata due to error : "" + e . getMessage ( ) , getParent ( ) ) ;', 'public void setDoneData ( final DoneData doneData ) {', 'PayloadBuilder . addParamsToPayload ( exctx . getScInstance ( ) . getGlobalContext ( ) ,', '} else if ( content . getValue ( ) ! = null ) {', 'import org . apache . commons . scxml2 . TriggerEvent ;']","['param . setName ( readAV ( reader , ATTR NAME ) ) ;', 'private static final String ERR INVALID VERSION = ""The < scxml > element defines""', 'throws XMLStreamException {', 'throw new ModelException ( errMsg ) ;', 'iff . setCond ( readAV ( reader , ATTR COND ) ) ;', '}', 'scxml . setVersion ( readAV ( reader , ATTR VERSION ) ) ;', 'private static final String SCXML REQUIRED VERSION = ""1 . 0"" ;', 'datum . setId ( readAV ( reader , ATTR ID ) ) ;', 'return value ;']","['scriptCache . setScriptPreProcessor ( scriptPreProcessor ) ;', 'scriptCache . setScriptPreProcessor ( getScriptPreProcessor ( ) ) ;']","['m . put ( ""foo"" , ""bar"" ) ;', 'GroovyContext ctx = new GroovyContext ( ) ;', 'GroovyContext ctx = new GroovyContext ( m , null ) ;', 'ctx . set ( ""foo"" , ""bar"" ) ;', 'Map < String , Object > m = new HashMap < String , Object > ( ) ;']","['scriptCache . isEmpty ( ) ;', 'groovyCtx . getScriptBaseClass ( ) = = null ;']","['throws XMLStreamException {', 'raise . setEvent ( readAV ( reader , ATTR EVENT ) ) ;', 'parent . addAction ( event ) ;', 'private static final String ELEM RAISE = ""raise"" ;', 'readEvent ( reader , configuration , tt , executable , parent ) ;', 'private static void readRaise ( final XMLStreamReader reader , final Configuration configuration ,', 'event . setName ( readAV ( reader , ATTR NAME ) ) ;', 'reportIgnoredElement ( reader , configuration , ELEM FINALIZE , XMLNS SCXML , ELEM RAISE ) ;', 'import org . apache . commons . scxml2 . model . Event ;', 'readNamespaces ( configuration , raise ) ;']","['private Parallel parallel ;', 'return children . isEmpty ( ) ;', 'return true ;', 'return !children . isEmpty ( ) ;', 'if ( parallel = = null & & children . isEmpty ( ) ) {', 'return getParent ( ) instanceof Parallel ;', '}', 'return false ;', 'if ( getParent ( ) instanceof Parallel ) {']","['invoke . setSrcexpr ( readAV ( reader , ATTR SRCEXPR ) ) ;', 'private static final String ATTR SRCEXPR = ""srcexpr"" ;', 'writeAV ( writer , ATTR SRCEXPR , invoke . getSrcexpr ( ) ) ;', 'private static final String ATTR SRCEXPR = ""srcexpr"" ;', 'Object varObj = null ;', 'Object varObj ;', 'Node newNode = null ;', 'Node newNode ;', 'this . log = LogFactory . getLog ( CustomAction . class ) ;', 'Log log = LogFactory . getLog ( CustomAction . class ) ;']","['public SessionContext ( final FacesContext fc , final Context parent ) {', 'package org . apache . commons . scxml2 . env . faces ;', '}', 'return value ;', 'public boolean has ( final String name ) {', 'this ( fc , null ) ;', 'super ( parent ) ;', '@ Override', 'public class SessionContext extends SimpleContext {', 'private static final long serialVersionUID = 1L ;']","['semantics . processInvokes ( evts , errorReporter , scInstance ) ;', 'import org . apache . commons . scxml2 . model . TransitionTarget ;', 'Object eventData = null ;', 'import org . apache . commons . scxml2 . model . State ;', 'return scInstance . getRootContext ( ) ;', 'public synchronized void reset ( ) throws ModelException {', 'import java . io . Serializable ;', 'this ( expEvaluator , evtDisp , errRep , null ) ;', 'eventData = evts [ 0 ] . getPayload ( ) ;', 'import java . util . Arrays ;']","['semantics . processInvokes ( evts , errorReporter , scInstance ) ;', 'private static final String ERR NO STATE MACHINE = ""SCXMLExecutor : State machine not set"" ;', 'public synchronized void reset ( ) throws ModelException {', 'semantics . processInvokes ( evts , errorReporter , scInstance ) ;', 'import java . io . Serializable ;', 'public synchronized void reset ( ) throws ModelException {', 'SCInstance getSCInstance ( ) {', 'SCInstance getSCInstance ( ) {', 'List < TriggerEvent > evs = new ArrayList < TriggerEvent > ( Arrays . asList ( evts ) ) ;', 'List < TriggerEvent > evs = new ArrayList < TriggerEvent > ( Arrays . asList ( evts ) ) ;']","['semantics . processInvokes ( evts , errorReporter , scInstance ) ;', 'private static final String ERR NO STATE MACHINE = ""SCXMLExecutor : State machine not set"" ;', 'Object eventData = null ;', 'semantics . processInvokes ( evts , errorReporter , scInstance ) ;', 'public synchronized void reset ( ) throws ModelException {', 'Object eventData = null ;', 'eventData = evts [ 0 ] . getPayload ( ) ;', 'public synchronized void reset ( ) throws ModelException {', 'SCInstance getSCInstance ( ) {', 'eventData = evts [ 0 ] . getPayload ( ) ;']","['listener ) ;', '@ SuppressWarnings ( ""deprecation"" )', 'StringBuffer sb = new StringBuffer ( ""Current States : [ "" ) ;', 'listener ) ;', 'this . stateMachine = sm ;', 'this . stateMachine = semantics . normalizeStateMachine ( stateMachine , errorReporter ) ;', 'setEventData ( currentStatus . getEvents ( ) . toArray ( new TriggerEvent [ 0 ] ) ) ;', 'Step step ;', 'Step step = null ;', 'StringBuilder sb = new StringBuilder ( ""Current States : [ "" ) ;']","['semantics . determineInitialStates ( stateMachine ,', 'semantics . enterStates ( step , stateMachine , eventdispatcher , errorReporter , scInstance ) ;', 'errorReporter , scInstance ) ;', 'semantics . determineInitialStates ( step , stateMachine , errorReporter , scInstance ) ;', 'step . getAfterStatus ( ) . getStates ( ) ,', 'semantics . executeGlobalScript ( step , stateMachine , eventdispatcher , errorReporter , scInstance ) ;', 'if ( stateMachine . getInitialScript ( ) ! = null ) {', '}', 'step . getEntryList ( ) , errorReporter , scInstance ) ;', 'semantics . executeActions ( step , stateMachine , eventdispatcher ,']","['if ( executor ! = null & & executor . getStateMachine ( ) . getInitialScript ( ) ! = null & &', 'context = evaluator . newContext ( getGlobalScriptContext ( ) ) ;', 'context = evaluator . newContext ( getInitialScriptContext ( ) ) ;', 'if ( globalScriptContext = = null ) {', 'initialScriptContext = evaluator . newContext ( getRootContext ( ) ) ;', 'globalScriptContext = evaluator . newContext ( getRootContext ( ) ) ;', 'return getInitialScriptContext ( ) ;', 'private Context globalScriptContext ;', '}', 'public Context getGlobalScriptContext ( ) {']","['private static final String ERR STATE BAD CONTENTS = "" { 0 } should ""', 'private static final String ERR STATE BAD CONTENTS = "" { 0 } should ""', 'private static final String ERR HISTORY NO DEFAULT =', 'private static final String ERR HISTORY NO DEFAULT =', 'private ModelUpdater ( ) {', 'private ModelUpdater ( ) {', '+ ""contain either one < invoke > or any number of < state > children . "" ;', '+ ""contain either one < invoke > or any number of < state > children . "" ;', 'private static final String ERR STATE NO INIT = ""No initial element ""', 'private static final String ERR STATE NO INIT = ""No initial element ""']","['TransitionTarget initialTarget = null ;', 'updateTransition ( initialTransition , scxml . getTargets ( ) ) ;', 'initialTarget = scxml . getFirstChild ( ) ;', 'initialTransition . getTargets ( ) . add ( scxml . getFirstChild ( ) ) ;', 'if ( initialTarget = = null ) {', 'initialTransition . getPaths ( ) ;', 'initialTarget = scxml . getTargets ( ) . get ( initial ) ;', 'if ( initialTransition . getTargets ( ) . size ( ) = = 0 ) {', 'scxml . setInitialTarget ( initialTarget ) ;', 'Transition initialTransition = new Transition ( ) ;']","['Map < String , TransitionTarget > targets = scxml . getTargets ( ) ;', 'Map < String , TransitionTarget > targets = scxml . getTargets ( ) ;', 'logAndThrowModelError ( ERR STATE NO HIST ,', 'logAndThrowModelError ( ERR STATE NO HIST ,', 'return true ;', 'initialTransition . getTargets ( ) . add ( scxml . getFirstChild ( ) ) ;', 'initialTransition . getTargets ( ) . add ( scxml . getFirstChild ( ) ) ;', 'if ( !SCXMLHelper . isDescendant ( historyState , parent ) ) {', 'if ( !SCXMLHelper . isDescendant ( historyState , parent ) ) {', 'Transition initialTransition = new Transition ( ) ;']","['if ( tt instanceof State ) {', 'if ( tt instanceof State ) {', 'private static final String ERR STATE BAD CONTENTS = "" { 0 } should ""', 'updateParallel ( ( Parallel ) tt , targets ) ;', '+ ""contain either one < invoke > or any number of < state > children . "" ;', 'for ( TransitionTarget tt : c . values ( ) ) {', 'logAndThrowModelError ( ERR STATE BAD CONTENTS , new Object [ ] { getName ( s ) } ) ;', '}', 'updateParallel ( ( Parallel ) tt , targets ) ;', '} else if ( tt instanceof Parallel ) {']","['final String namespaceURI , final String localName )', 'final String namespaceURI , final String localName )', 'final String encoding , final String systemId , final boolean validate , final PathResolver pathResolver ,', 'final String encoding , final String systemId , final boolean validate , final PathResolver pathResolver ,', 'final List < CustomAction > customActions , final ClassLoader customActionClassLoader ,', 'final List < CustomAction > customActions , final ClassLoader customActionClassLoader ,', '""http : / / commons . apache . org / scxml"" ;', 'throw new ModelException ( errMsg ) ;', 'final TransitionTarget tt , final Executable executable , final ActionsContainer parent )', 'end . setId ( readOrGeneratedTransitionTargetId ( reader , scxml , ELEM FINAL ) ) ;']","['scxml . addChild ( new State ( ) ) ;', 'scxml . addChild ( s ) ;', 'State s = new State ( ) ;', 's . setId ( scxml . generateTransitionTargetId ( ) ) ;']","['try {', 'String type = readAV ( reader , ATTR TYPE ) ;', 'throw new ModelException ( errMsg ) ;', 'if ( type ! = null ) {', 'MessageFormat msgFormat = new MessageFormat ( ERR UNSUPPORTED TRANSITION TYPE ) ;', '}', 'String errMsg = msgFormat . format ( new Object [ ] { type , reader . getLocation ( ) } ) ;', 't . setType ( TransitionType . valueOf ( type ) ) ;', 'catch ( IllegalArgumentException e ) {', '+ ""for < transition type = \\ "" { 0 } \\ "" > at { 1 } . "" ;']","['if ( externalEvents ! = null ) {', 'this . transitList = new ArrayList < Transition > ( ) ;', 'this . transitList = new ArrayList < Transition > ( ) ;', '}', 'this . externalEvents = new ArrayList < TriggerEvent > ( ) ;', 'this . externalEvents = externalEvents ;', '}', 'private List < TransitionTarget > defaultEntryList ;', 'if ( beforeStatus ! = null ) {', 'this . exitList = new ArrayList < TransitionTarget > ( ) ;']","['public final int hashCode ( ) {', 'return this = = other ;', '}', 'public final boolean equals ( final Object other ) {', 'return System . identityHashCode ( this ) ;', '@ Override']","['while ( tt . getParent ( ) ! = parallel ) {', 'while ( tt ! = null & & tt . getParent ( ) ! = parallel ) {', 'if ( tt = = null ) {', 'return false ;', '}']","['public EnterableState getParent ( ) {', 'return ( EnterableState ) super . getParent ( ) ;', 'public void setParent ( final TransitionTarget parent ) {', '}', 'super . setParent ( es ) ;', '@ Override', 'EnterableState es = ( EnterableState ) parent ;', 'public void setParent ( final TransitionTarget parent ) {', 'public void setParent ( final EnterableState parent ) {', 'private TransitionTarget [ ] ancestors = ZERO ANCESTORS ;']","['EnterableState state = new State ( ) ;', 'State state = new State ( ) ;', 'EnterableState parent = new State ( ) ;', 'State parent = new State ( ) ;', 'transition . setParent ( history ) ;', 'transition . setParent ( history . getParent ( ) ) ;']","['invokers . put ( state , invoker ) ;', 'private final Map < String , Invoker > invokers ;', 'return invokers ;', 'return invokeIds ;', 'final Invoker invoker ) {', 'import java . util . UUID ;', 'this . invokers = Collections . synchronizedMap ( new HashMap < TransitionalState , Invoker > ( ) ) ;', 'return invokers . get ( invokeIds . get ( invoke ) ) ;', 'public Map < TransitionalState , Invoker > getInvokers ( ) {', '}']","['this . event = event ;', 'public final List < String > getEvents ( ) {', 'this . cond = cond ;', 'return allEvents ;', '}', 'events = new ArrayList < String > ( ) ;', 'if ( token . endsWith ( "" . "" ) ) {', '}', 'if ( token . equals ( "" * "" ) ) {', 'events . add ( token ) ;']","['lst . onTransition ( from , to , transition ) ;', 'lst . onTransition ( from , to , transition ) ;', 'entries . add ( lst ) ;', 'if ( entries . size ( ) = = 0 ) {', 'if ( entries = = null ) {', 'entries . add ( lst ) ;', 'import java . io . Serializable ;', 'lst . onExit ( state ) ;', 'entries = new LinkedHashSet < SCXMLListener > ( ) ;', 'if ( entries = = null ) {']","['public SCInstance getScInstance ( ) {', 'public Context getGlobalContext ( ) {', 'return exctx . getScInstance ( ) ;', 'import org . apache . commons . scxml2 . model . EnterableState ;', '}', 'public Context getContext ( EnterableState state ) {', 'return exctx . getScInstance ( ) . getGlobalContext ( ) ;', 'return exctx . getScInstance ( ) . getContext ( state ) ;', 'boolean hasLocal ( String name ) ;', 'import java . util . Collections ;']","['public void addInternalEvent ( TriggerEvent event ) {', 'return exctx ;', 'exctx . addInternalEvent ( event ) ;', 'public SCXMLIOProcessor getInternalIOProcessor ( ) {', 'protected SCInstance ( final Evaluator evaluator , final ErrorReporter errorReporter ) {', 'private transient SCXMLIOProcessor internalIOProcessor ;', 'internalIOProcessor . addEvent ( new TriggerEvent ( TriggerEvent . ERROR EXECUTION , TriggerEvent . ERROR EVENT ) ) ;', 'protected SCInstance ( final SCXMLIOProcessor internalIOProcessor , final Evaluator evaluator ,', 'protected void setInternalIOProcessor ( SCXMLIOProcessor internalIOProcessor ) {', 'final ErrorReporter errorReporter ) {']","['throw new IllegalStateException ( ""The state machine is in a Final state and cannot be set running again"" ) ;', 'public boolean isRunning ( ) {', 'running = false ;', 'protected void setRunning ( final boolean running ) throws IllegalStateException {', '}', 'private boolean running ;', 'if ( !this . running & & running & & currentStatus . isFinal ( ) ) {', 'return running ;', 'this . running = running ;', 'this . running = false ;']","['public boolean isEmpty ( final History history ) {', 'histories . remove ( history ) ;', 'lastConfiguration . addAll ( lc ) ;', 'import java . util . Collections ;', 'return lastConfiguration = = null | | lastConfiguration . isEmpty ( ) ;', 'histories . put ( history , new HashSet < EnterableState > ( lc ) ) ;', '}', 'public void resetConfiguration ( final History history ) {', 'Set < EnterableState > lastConfiguration = getLastConfiguration ( history ) ;', 'lastConfiguration = Collections . emptySet ( ) ;']","['if ( parent = = null & & this instanceof Script & & ( ( Script ) this ) . isGlobalScript ( ) ) {', 'if ( parent = = null | | ( this instanceof Script & & ( ( Script ) this ) . isGlobalScript ( ) ) ) {']","['if ( parent = = null | | ( this instanceof Script & & ( ( Script ) this ) . isGlobalScript ( ) ) ) {', 'if ( parent = = null & & this instanceof Script & & ( ( Script ) this ) . isGlobalScript ( ) ) {', 'else if ( parent = = null ) {', '}', 'throw new ModelException ( ""Action ""', '+ this . getClass ( ) . getName ( ) + "" instance missing required parent TransitionTarget"" ) ;']","['externalEventQueue . add ( evt ) ;', 'addEvent ( evt ) ;', '}', '}', 'if ( evt ! = null ) {', 'try {', 'this . executor . addEvent ( new TriggerEvent ( EVENT ERR SEND TARGETUNAVAILABLE , TriggerEvent . ERROR EVENT ) ) ;', '} catch ( ModelException me ) {', 'executor . addEvent ( new TriggerEvent ( event , TriggerEvent . SIGNAL EVENT , payload ) ) ;', '}']","['else if ( !transition . isAllEventsTransition ( ) ) {', 'return false ;', '}']","['ctx . setLocal ( index , currentIndex ) ;', 'ctx . setLocal ( index , currentIndex ) ;', '}', 'if ( index ! = null ) {']","['private Log log = LogFactory . getLog ( Context . class ) ;', 'private Log log = DEFAULT LOG ;', 'return getVars ( ) . get ( name ) ;', 'Object localValue = getVars ( ) . get ( name ) ;', 'if ( getVars ( ) . containsKey ( name ) ) {', 'return localValue ;', 'if ( localValue ! = null ) {', 'private static final Log DEFAULT LOG = LogFactory . getLog ( Context . class ) ;']","['EnterableState parent = tt . getAncestor ( i ) ;', 'first = tt ;', 'return true ;', 'continue ;', 'boolean hasParallelParent = false ;', 'for ( i = Math . min ( i , tt . getNumberOfAncestors ( ) ) ; i > 0 & & first . getAncestor ( i - 1 ) ! = tt . getAncestor ( i - 1 ) ; i - - ) ;', 'if ( !hasParallelParent | | ! ( tt . getAncestor ( 0 ) instanceof Parallel ) ) {', 'if ( first = = null ) {', 'for ( int i = tt . getNumberOfAncestors ( ) - 1 ; i > - 1 ; i - - ) {', 'TransitionTarget first = null ;']","['void send ( String sendId , String target , String type ,', 'void send ( String id , String target , String type ,', 'public String generateSessionId ( ) {', 'return getContext ( ) . get ( SESSIONID KEY ) + "" - "" + nextSessionSequenceId + + ;', 'private long nextSessionSequenceId ;', '}', 'public void send ( final String sendId , final String target ,', 'public void send ( final String id , final String target ,', 'buf . append ( ""send ( sendId : "" ) . append ( sendId ) ;', 'buf . append ( ""send ( id : "" ) . append ( id ) ;']","['for ( TransitionTarget dtt : ( ( State ) es ) . getInitial ( ) . getTransition ( ) . getTargets ( ) ) {', 'for ( TransitionTarget dtt : lastConfiguration ) {', 'for ( TransitionTarget dtt : h . getTransition ( ) . getTargets ( ) ) {', '}']","['String getSupportedDatamodel ( ) ;', 'package org . apache . commons . scxml2 ;', 'public static EvaluatorProvider getDefaultProvider ( ) {', 'return INSTANCE . providers . get ( datamodelType = = null ? """" : datamodelType ) ;', 'providers . put ( ""groovy"" , new GroovyEvaluator . GroovyEvaluatorProvider ( ) ) ;', 'INSTANCE . providers . remove ( datamodelType = = null ? """" : datamodelType ) ;', '}', 'public static void unregisterEvaluatorProvider ( String datamodelType ) {', 'private final Map < String , EvaluatorProvider > providers = new ConcurrentHashMap < String , EvaluatorProvider > ( ) ;', 'providers . put ( ""jexl"" , new JexlEvaluator . JexlEvaluatorProvider ( ) ) ;']","['private static final long serialVersionUID = 8620558582288851315L ;', 'int length = result . size ( ) ;', 'if ( namespaces . containsValue ( value ) ) {', 'return ( Node ) result . get ( 0 ) ;', 'String v = entry . getValue ( ) ;', 'import org . apache . commons . jxpath . JXPathContext ;', '}', 'context . registerNamespace ( prefix , namespaces . get ( prefix ) ) ;', 'private Object getKeys ( final String value , final boolean one ) {', '}']","['return ( Node ) context . selectSingleNode ( evalExpr ) ;', 'return ( Node ) context . selectSingleNode ( expr ) ;', 'private static final Pattern dataFct = Pattern . compile ( ""Data \\ \\ ( "" ) ;', 'return context . getValue ( expr , String . class ) ;', 'String evalExpr = dataFct . matcher ( expr ) . replaceFirst ( ""DataNode ( "" ) ;', 'return context . getValue ( evalExpr , String . class ) ;', 'xpathFunctions . addFunctions ( new ClassFunctions ( XPathFunctions . class , ""cs"" ) ) ;', 'String evalExpr = dataFct . matcher ( expr ) .', 'import java . util . regex . Pattern ;', 'replaceFirst ( ""DataNode ( "" ) ;']","['providers . put ( MinimalEvaluator . SUPPORTED DATA MODEL , new MinimalEvaluator . MinimalEvaluatorProvider ( ) ) ;', 'import org . apache . commons . scxml2 . env . minimal . MinimalEvaluator ;', 'public boolean hasLocal ( final String name ) {', 'public void setLocal ( final String name , final Object value ) {', '}', 'private static Context getMinimalContextParent ( final Context parent ) {', 'super ( getMinimalContextParent ( parent ) ) ;', 'public boolean has ( final String name ) {', '@ Override', 'public void set ( final String name , final Object value ) {']","['"" \\ nTest results running "" +', 'private static final String TESTS SRC DIR = ""src / w3c / scxml - irp / "" ;', 'if ( depResources ! = null ) {', 'for ( String filename : results . failedTests ) {', 'new W3CTests ( ) . runTests ( testId , datamodel ) ;', 'public boolean isOptional ( ) {', 'public String value ( ) {', 'import org . apache . commons . scxml2 . model . SCXML ;', 'new W3CTests ( ) . getTests ( ) ;', 'processResource ( entry . getSpecId ( ) , resource , minimalTransformer , ecmaTransformer , xpathTransformer ) ;']","['import java . util . Set ;', 'return ( ( Status ) ctx . getSystemContext ( ) . getPlatformVariables ( ) . get ( SCXMLSystemContext . STATUS KEY ) ) . isInState ( state ) ;', 'import org . apache . commons . scxml2 . model . TransitionTarget ;', 'return true ;', 'public static boolean isMember ( final Set < ? extends TransitionTarget > allStates , final String state ) {', 'if ( allStates ! = null ) {', '}', 'for ( TransitionTarget tt : allStates ) {', 'if ( state . equals ( tt . getId ( ) ) ) {', 'return false ;']","['context = evaluator . newContext ( getContext ( parent ) ) ;', 'context = evaluator . newContext ( getContext ( parent ) ) ;', 'EnterableState parent = state . getParent ( ) ;', 'EnterableState parent = state . getParent ( ) ;', '} else {', 'if ( singleContext ) {', 'context = evaluator . newContext ( getGlobalContext ( ) ) ;', 'public boolean isSingleContext ( ) {', 'if ( parent = = null ) {', '}']","['import org . apache . commons . scxml2 . invoke . InvokerException ;', 'import org . apache . commons . scxml2 . invoke . Invoker ;', 'package org . apache . commons . scxml2 ;', 'void registerInvoker ( final Invoke invoke , final Invoker invoker ) throws InvokerException ;', '}', 'Invoker newInvoker ( final String type ) throws InvokerException ;', 'import org . apache . commons . scxml2 . model . Invoke ;', 'public interface InvokerManager {', 'this . externalIOProcessor = externalIOProcessor ;', 'if ( scxmlExecutor . getParentSCXMLExecutor ( ) ! = null ) {']","['initializeIOProcessors ( ) ;', 'ioProcessors . remove ( SCXMLIOProcessor . EVENT PROCESSOR ALIAS PREFIX + invoke . getId ( ) ) ;', 'ioProcessors . put ( SCXMLIOProcessor . EVENT PROCESSOR ALIAS PREFIX + invoke . getId ( ) , invoker . getChildIOProcessor ( ) ) ;', 'String PARENT EVENT PROCESSOR = ""# parent"" ;', 'String PARENT EVENT PROCESSOR = EVENT PROCESSOR ALIAS PREFIX + ""parent"" ;', 'String INTERNAL EVENT PROCESSOR = ""# internal"" ;', 'String EVENT PROCESSOR ALIAS PREFIX = ""# "" ;', 'String INTERNAL EVENT PROCESSOR = EVENT PROCESSOR ALIAS PREFIX + ""internal"" ;', 'import org . apache . commons . scxml2 . SCXMLIOProcessor ;', 'SCXMLIOProcessor getChildIOProcessor ( ) ;']","['return null ;', 'public SCXMLIOProcessor getChildIOProcessor ( ) {', '}', 'import org . apache . commons . scxml2 . SCXMLIOProcessor ;', '@ Override']","['cloneDatamodel ( rootdm , getRootContext ( ) , evaluator , errorReporter ) ;', 'cloneDatamodel ( rootdm , getGlobalContext ( ) , evaluator , errorReporter ) ;', 'public Context getGlobalContext ( ) {', '}', 'return exctx . getScInstance ( ) . getGlobalContext ( ) ;', 'Double retval = ( Double ) exec . getRootContext ( ) . get ( ""retval"" ) ;', 'String retvalstr = ( String ) exec . getGlobalContext ( ) . get ( ""retval"" ) ;', 'String retvalstr = ( String ) exec . getRootContext ( ) . get ( ""retval"" ) ;', 'Double retval = ( Double ) exec . getGlobalContext ( ) . get ( ""retval"" ) ;', 'context = fsm . getRootContext ( ) ;']","['if ( !ioProcessors . containsKey ( SCXMLIOProcessor . SCXML SESSION EVENT PROCESSOR PREFIX + sessionId ) ) {', 'private String sessionId ;', 'String currentSessionId = ( String ) getScInstance ( ) . getSystemContext ( ) . get ( SCXMLSystemContext . SESSIONID KEY ) ;', 'if ( sessionId ! = null & & !sessionId . equals ( currentSessionId ) ) {', 'ioProcessors . put ( SCXMLIOProcessor . SCXML SESSION EVENT PROCESSOR PREFIX + sessionId , getExternalIOProcessor ( ) ) ;', 'ioProcessors . remove ( SCXMLIOProcessor . SCXML SESSION EVENT PROCESSOR PREFIX + sessionId ) ;', '}', 'sessionId = currentSessionId ;', 'String SCXML SESSION EVENT PROCESSOR PREFIX = EVENT PROCESSOR ALIAS PREFIX + ""scxml "" ;']","['Map < String , Object > payloadDataMap = new HashMap < String , Object > ( ) ;', 'import java . util . LinkedHashMap ;', 'import java . util . HashMap ;', 'Map < String , Object > payloadDataMap = new LinkedHashMap < String , Object > ( ) ;', 'SCXMLExecutor exec = new SCXMLExecutor ( evaluator , new SimpleDispatcher ( ) , trc ) ;', 'return getExecutor ( scxml , evaluator , new SimpleDispatcher ( ) ) ;', 'public static SCXMLExecutor getExecutor ( String scxmlResource ) throws Exception {', '}', 'public static SCXMLExecutor getExecutor ( SCXML scxml ) throws Exception {', 'public static SCXMLExecutor getExecutor ( final SCXML scxml ) throws Exception {']","['import org . apache . commons . scxml2 . model . ParamsContainer ;', 'cancel . setSendid ( readAV ( reader , ATTR SENDID ) ) ;', 'import org . apache . commons . scxml2 . model . Raise ;', 'cancel . setSendidexpr ( attrValue ) ;', 'import org . apache . commons . scxml2 . model . TransitionalState ;', 'import org . apache . commons . scxml2 . model . ParamsContainer ;', 'throws XMLStreamException {', 'import org . apache . commons . scxml2 . model . TransitionalState ;', '}', 'throws XMLStreamException , ModelException {']","['public void before ( ) throws Exception {', '@ Test', 'package org . apache . commons . scxml2 . env . javascript ;', 'import org . junit . Before ;', 'public void testX ( ) throws Exception {', '}', 'import org . junit . Test ;', 'public class JavaScriptEngineTest {', '@ Before']","['private boolean hasGlobalBindings ( ) {', 'Bindings getGlobalBindings ( ) {', 'private Bindings getGlobalBindings ( ) {', 'boolean hasGlobalBindings ( ) {', 'public JSContext ( Context parent ) {', 'public JSContext ( final Context parent , final Map < String , Object > initialVars ) {', '}', 'import java . util . Map ;', 'super ( parent , initialVars ) ;', 'public JSContext ( final Context parent ) {']","['bindings . putAll ( list ) ;', 'if ( NASHORN GLOBAL . equals ( name ) ) {', '}', 'return bindings . get ( key ) ;', 'public void putAll ( Map < ? extends String , ? extends Object > list ) {', 'if ( NASHORN GLOBAL . equals ( key ) ) {', 'if ( context . has ( NASHORN GLOBAL ) ) {', '} else if ( context . has ( name ) ) {', 'return bindings . put ( name , value ) ;', 'public void putAll ( Map < ? extends String , ? extends Object > toMerge ) {']","['import groovy . lang . Closure ;', 'import groovy . lang . Closure ;', 'import groovy . lang . GroovyClassLoader ;', 'import groovy . lang . GroovyClassLoader ;', 'import groovy . lang . GroovyRuntimeException ;', 'import groovy . lang . GroovyRuntimeException ;', 'import groovy . lang . GroovyCodeSource ;', 'import groovy . lang . GroovyCodeSource ;', 'private void readObject ( ObjectInputStream in ) throws IOException , ClassNotFoundException {', 'private void readObject ( ObjectInputStream in ) throws IOException , ClassNotFoundException {']","['this . actions = new ArrayList < Action > ( ) ;', 'ArrayList < Object > arrayList = new ArrayList < > ( ) ;', 'for ( Object value : ( Iterable ) arrayObject ) {', 'if ( arrayObject ! = null & & ( arrayObject . getClass ( ) . isArray ( ) | | arrayObject instanceof Iterable | | arrayObject instanceof Map ) ) {', 'if ( arrayObject ! = null & & ( arrayObject instanceof Iterable | | arrayObject . getClass ( ) . isArray ( ) ) ) {', 'this . actions = new ArrayList < > ( ) ;', 'ArrayList < Object > arrayList = new ArrayList < Object > ( ) ;', 'import java . util . Map ;', 'Iterable iterable = arrayObject instanceof Iterable ? ( Iterable ) arrayObject : ( ( Map ) arrayObject ) . values ( ) ;', 'for ( Object value : iterable ) {']","['final Object result = eval ( context , expression ) ;', 'return ( Boolean ) eval ( context , ""Boolean ( "" + expression + "" ) "" ) ;', 'if ( result instanceof Boolean ) {', 'return ( Boolean ) result ;', '}', 'return Boolean . FALSE ;', 'if ( result = = null ) {', 'throw new SCXMLExpressionException ( ""Invalid boolean expression : "" + expression ) ;']","['datum . setValue ( node ) ;', 'datum . setValue ( node ) ;', 'if ( datum . getValue ( ) = = null ) {', 'if ( datum . getValue ( ) = = null ) {', '}', '}']","['Context current = leaf ;', 'Context current = ctx ;', 'current = current . getParent ( ) ;', 'mergeVars ( leaf , map ) ;', 'return entrySet ;', 'throw new IllegalArgumentException ( ""Context or parent Context already wrapped by EffectiveContextMap"" ) ;', 'import java . util . HashSet ;', 'return Collections . unmodifiableMap ( map ) . entrySet ( ) ;', 'while ( current ! = null ) {', 'import java . util . Collections ;']","['boolean requiresGlobalContext ( ) ;', 'singleContext = true ;', 'if ( evaluator . requiresGlobalContext ( ) ) {', '}', 'public boolean requiresGlobalContext ( ) {', '@ Override', 'return false ;', '}', '+ ""expression , Context must be a org . apache . commons . scxml2 . env . javascript . JSContext"" ;', 'return true ;']",['exctx . getScInstance ( ) . getContext ( es ) ;'],"['systemContext . setSystemContext ( evaluator . newContext ( rootContext ) ) ;', 'Context internalContext = new SimpleContext ( rootContext ) ;', 'if ( rootContext = = null & & evaluator ! = null ) {', 'if ( rootContext = = null ) {', 'Context internalContext = Evaluator . NULL DATA MODEL . equals ( evaluator . getSupportedDatamodel ( ) ) ?', 'rootContext = new SimpleContext ( ) ;', 'new SimpleContext ( ) : evaluator . newContext ( rootContext ) ;', 'systemContext . setSystemContext ( new SimpleContext ( rootContext ) ) ;', 'rootContext = Evaluator . NULL DATA MODEL . equals ( evaluator . getSupportedDatamodel ( ) )', '? new SimpleContext ( ) : evaluator . newContext ( null ) ;']","['super ( in ) ;', 'package org . apache . commons . scxml2 ;', 'return old ;', '}', 'public class SCInstanceObjectInputStream extends ObjectInputStream {', 'public interface ClassResolver {', 'public SCInstanceObjectInputStream ( final InputStream in ) throws IOException {', 'this . classResolver = classResolver ;', 'ClassResolver old = this . classResolver ;', 'if ( classResolver ! = null ) {']","['datum . setExpr ( readAV ( reader , ATTR EXPR ) ) ;', 'LogFactory . getLog ( SCXMLReader . class ) . error (', 'final String expr = readAV ( reader , ATTR EXPR ) ;', 'if ( src ! = null ) {', 'if ( expr ! = null ) {', 'final String src = readAV ( reader , ATTR SRC ) ;', 'datum . setExpr ( expr ) ;', '""Found src and expr attributes for data node \'"" + datum . getId ( ) + ""\' , which is not valid SCXML . "" ) ;', '}', 'if ( expr ! = null & & src ! = null ) {']","['LogFactory . getLog ( SCXMLReader . class ) . error (', 'if ( src ! = null ) {', 'if ( src ! = null ) {', '}', '""Found src and expr attributes for data node \'"" + datum . getId ( ) + ""\' , which is not valid SCXML . "" ) ;', '} else {', '}', 'reportConflictingAttribute ( reader , configuration , ELEM DATA , ATTR EXPR , ATTR SRC ) ;', 'if ( expr ! = null & & src ! = null ) {', 'datum . setSrc ( src ) ;']","['Assert . assertNotNull ( scxml ) ;', 'Assert . assertNotNull ( scxml ) ;', 'SCXML scxml = SCXMLTestHelper . parse ( ""org / apache / commons / scxml2 / io / data - with - expr . xml"" ) ;', 'SCXML scxml = SCXMLTestHelper . parse ( ""org / apache / commons / scxml2 / io / data - with - expr . xml"" ) ;', 'Assert . assertNotNull ( data ) ;', 'Assert . assertNotNull ( data ) ;', 'Assert . assertEquals ( ""Exactly one data element parsed . "" , 1 , scxml . getDatamodel ( ) . getData ( ) . size ( ) ) ;', 'Assert . assertEquals ( ""Exactly one data element parsed . "" , 1 , scxml . getDatamodel ( ) . getData ( ) . size ( ) ) ;', 'Assert . assertNotNull ( scxml . getDatamodel ( ) ) ;', 'Assert . assertNotNull ( scxml . getDatamodel ( ) ) ;']","['implements org . apache . commons . jexl2 . JexlContext {', 'implements org . apache . commons . jexl3 . JexlContext {', 'engine . setStrict ( strict ) ;', 'import org . apache . commons . jexl3 . JexlExpression ;', 'Map < String , Object > funcs = new HashMap < String , Object > ( ) ;', 'JexlExpression exp = getJexlEngine ( ) . createExpression ( expr ) ;', 'this . jexlEngineStrict = strict ;', 'import org . apache . commons . jexl3 . JexlEngine ;', '}', 'import org . apache . commons . jexl3 . JexlScript ;']","['final Transformer minimalTransformer , final Transformer ecmaTransformer )', 'if ( test . isManual ( ) & & e . getMessage ( ) ! = null & & e . getMessage ( ) . equals ( test . getFinalState ( ) ) ) {', 'final boolean singleTest , TestResults results ) throws Exception {', 'return true ;', 'for ( String filename : results . failedTests ) {', 'System . out . println ( "" "" + ( enabled ? ""failed"" : ""passed"" ) + "" tests : "" ) ;', 'File scxmlFile = new File ( scxmlDir , scxmlResource . getName ( ) + "" . scxml"" ) ;', 'if ( test . isImplemented ( ) ) {', 'ECMA ( ""ecma"" ) ;', 'System . out . println ( "" PASS : "" + e . getMessage ( ) ) ;']","['continue ;', 'public void start ( ) throws IllegalStateException {', 'Datamodel rootdm = stateMachine . getDatamodel ( ) ;', '}', 'ctx . setLocal ( datum . getId ( ) , evaluator . cloneData ( datum . getValue ( ) ) ) ;', 'ctx . setLocal ( datum . getId ( ) , value ) ;', 'protected void setRunning ( final boolean running ) throws IllegalStateException {', '} finally {', 'cloneDatamodel ( rootdm , getGlobalContext ( ) , evaluator , errorReporter ) ;', 'public void stop ( ) {']","['multiplier = MILLIS IN A MINUTE ;', 'wait * = multiplier ;', 'wait * = multiplier ;', 'throw new SCXMLExpressionException ( "" < send > : invalid "" + ( expression ? ""delayexpr = \\ """" : ""delay = \\ """" ) + delayStringSource + "" \\ """" ) ;', 'numericDelay = trimDelay . substring ( 0 , trimDelay . length ( ) - 1 ) ;', '}', 'String trimDelay = delayString . trim ( ) ;', 'wait + = Long . parseLong ( numericDelay ) * multiplier ;', 'multiplier = MILLIS IN A SECOND ;', 'if ( fractionIndex > - 1 ) {']","['try {', 'try ( InputStream in = new URL ( resourceURL ) . openStream ( ) ) {', '}', 'finally {', 'in = new URL ( resourceURL ) . openStream ( ) ;', 'InputStream in = null ;', 'IOUtils . closeQuietly ( in ) ;']","['PREVIOUS SIBLING ( ""previoussibling"" ) ,', 'void evalAssign ( Context ctx , String location , Object data )', 'FIRST CHILD ( ""firstchild"" ) ,', 'boolean isStrict ( ) ;', '}', 'NEXT SIBLING ( ""nextsibling"" ) ,', 'private final String value ;', 'return value ;', 'public String value ( ) {', 'if ( type . value ( ) . equals ( value ) ) {']","['public String getName ( ) {', 'package org . apache . commons . scxml2 ;', 'return new TriggerEvent ( name , type , sendId , origin , originType , invokeId , data ) ;', 'public class EventBuilder {', '}', 'this . invokeId = invokeId ;', 'return invokeId ;', 'this . name = name ;', 'return this ;', 'public TriggerEvent build ( ) {']","['} catch ( Exception x ) {', 'throw e ;', 'throw new SCXMLExpressionException ( ""Error evaluating [ \'"" + expression + ""\' ] "" + x ) ;', '} catch ( Exception e ) {', 'throw new SCXMLExpressionException ( ""Error evaluating assign to location = \\ """" + location + "" \\ "" : "" + e . getCause ( ) . getMessage ( ) ) ;', 'throw new SCXMLExpressionException ( ""eval ( \'"" + expression + ""\' ) : "" + exMessage , e ) ;', '}', '} catch ( SCXMLExpressionException e ) {', 'if ( e . getCause ( ) ! = null & & e . getCause ( ) ! = null & & e . getCause ( ) . getMessage ( ) ! = null ) {', 'String exMessage = e . getMessage ( ) ! = null ? e . getMessage ( ) : e . getClass ( ) . getCanonicalName ( ) ;']","['ctx . setLocal ( item , Array . get ( arrayObject , currentIndex ) ) ;', 'eval . evalAssign ( ctx , item , value ) ;', 'ctx . setLocal ( item , value ) ;', 'eval . evalAssign ( ctx , item , Array . get ( arrayObject , currentIndex ) ) ;']","['if ( token . equals ( "" * "" ) ) {', 'if ( token . equals ( "" * "" ) | | token . equals ( "" . * "" ) ) {', 'events . add ( token ) ;', 'events . add ( "" * "" ) ;']","['readNamespaces ( configuration , globalScript ) ;', 'if ( configuration . pathResolver ! = null ) {', 'globalScript . setBody ( readBody ( reader ) ) ;', 'String resolvedSrc = script . getSrc ( ) ;', 'script . setBody ( readBody ( reader ) ) ;', 'script . setScript ( readBody ( reader ) ) ;', 'throws XMLStreamException {', 'readNamespaces ( configuration , script ) ;', 'readNamespaces ( configuration , script ) ;', 'Script script = new Script ( ) ;']","['throw new RuntimeException ( ""Failed to load init global . js from classpath"" , ioe ) ;', 'throw new RuntimeException ( ""Failed to load init global . js from classpath"" , ioe ) ;', 'private static ScriptEngine engine ;', 'try {', 'try {', 'protected synchronized void initEngine ( ) {', 'protected synchronized static void initEngine ( ) {', 'private transient ScriptEngine engine ;', '}', '}']","['invoke . setNamelist ( readAV ( reader , ATTR NAMELIST ) ) ;', 'writeAV ( writer , ATTR NAMELIST , invoke . getNamelist ( ) ) ;', 'addNamelistDataToPayload ( axctx , payloadDataMap ) ;', 'public List < Param > getParams ( ) {', 'public class Invoke extends NamelistHolder implements ContentContainer {', 'import java . util . ArrayList ;', 'addParamsToPayload ( axctx , payloadDataMap ) ;', 'this . namelist = namelist ;', 'public class Invoke extends Action implements ContentContainer , ParamsContainer {', 'return paramsList ;']","['break ;', 'break ;', ""if ( eventName . length ( ) = = event . length ( ) | | eventName . charAt ( event . length ( ) ) = = ' . ' )"", ""if ( eventName . length ( ) = = event . length ( ) | | eventName . charAt ( event . length ( ) ) = = ' . ' ) {"", '}']","['if ( datum . getExpr ( ) ! = null ) {', 'import org . apache . commons . scxml2 . io . ContentParser ;', '} catch ( IOException e ) {', 'import java . io . IOException ;', 'try {', 'internalIOProcessor . addEvent ( new EventBuilder ( TriggerEvent . ERROR EXECUTION , TriggerEvent . ERROR EVENT ) . build ( ) ) ;', 'errorReporter . onError ( ErrorConstants . EXECUTION ERROR , e . getMessage ( ) , datum ) ;', 'String resolvedSrc = datum . getSrc ( ) ;', '}', 'if ( internalIOProcessor ! = null ) {']","['ctx . setLocal ( datum . getId ( ) , value ) ;', 'import org . apache . commons . scxml2 . env . javascript . JSEvaluator ;', 'if ( evaluator instanceof JSEvaluator ) {', 'try {', 'internalIOProcessor . addEvent ( new EventBuilder ( TriggerEvent . ERROR EXECUTION , TriggerEvent . ERROR EVENT ) . build ( ) ) ;', '}', 'if ( internalIOProcessor ! = null ) {', '( ( JSEvaluator ) evaluator ) . injectData ( ctx , datum . getId ( ) , value ) ;', '} else {', 'ctx . setLocal ( datum . getId ( ) , value ) ;']","['"" To only run test ( s ) for a specific datamodel , specify - Ddatamodel = < minimal | ecma | jexl > . \\ n"" +', 'private static final String SCXML IRP GROOVY XSL FILENAME = PACKAGE PATH + "" / confGroovy . xsl"" ;', 'JEXL ( ""jexl"" , ""jexl "" ) ;', 'return groovyStatus ;', 'transformers . put ( Datamodel . GROOVY , factory . newTransformer ( new StreamSource ( getClass ( ) . getResourceAsStream ( SCXML IRP GROOVY XSL FILENAME ) ) ) ) ;', 'GROOVY ( ""groovy"" , ""groovy "" ) ;', 'case GROOVY :', '"" To only run test ( s ) for a specific datamodel , specify - Ddatamodel = < minimal | ecma | jexl | groovy > . \\ n"" +', '@ XmlAttribute ( name = ""groovy"" )', 'private boolean groovyStatus ;']","['String NAMESPACES KEY = "" ALL NAMESPACES"" ;', 'ctx . setLocal ( Context . NAMESPACES KEY , null ) ;', '} finally {', 'ctx . setLocal ( Context . NAMESPACES KEY , datum . getNamespaces ( ) ) ;', 'public static final String ELEM PARALLEL = ""parallel"" ;', 'package org . apache . commons . scxml2 ;', 'public static final String ATTR LOCATION = ""location"" ;', 'public static final String ATTR DELAYEXPR = ""delayexpr"" ;', 'public static final String ATTR SENDIDEXPR = ""sendidexpr"" ;', 'public static final String ATTR HINTS = ""hints"" ;']","['result = eval . cloneData ( eval . eval ( ctx , content . getExpr ( ) ) ) ;', 'exctx . getErrorReporter ( ) . onError ( ErrorConstants . EXPRESSION ERROR ,', 'try {', 'Object evalResult = null ;', 'evalResult = eval . eval ( ctx , content . getExpr ( ) ) ;', 'TriggerEvent . ERROR EVENT ) . build ( ) ) ;', '}', '+ "" , Using empty value instead . "" , getParent ( ) ) ;', 'evalResult = """" ;', 'exctx . getInternalIOProcessor ( ) . addEvent ( new EventBuilder ( TriggerEvent . ERROR EXECUTION ,']","['value = evaluator . cloneData ( datum . getValue ( ) ) ;', 'datum . setParsedValue ( ContentParser . DEFAULT PARSER . parseResource ( resolvedSrc ) ) ;', 'value = ContentParser . DEFAULT PARSER . parseResource ( resolvedSrc ) ;', 'value = evaluator . cloneData ( datum . getParsedValue ( ) . getValue ( ) ) ;', '}', 'else if ( datum . getParsedValue ( ) ! = null ) {', 'setValue = true ;', 'outputProps . put ( OutputKeys . STANDALONE , ""no"" ) ;', 'try {', 'outputProps . put ( OutputKeys . OMIT XML DECLARATION , ""no"" ) ;']",['break ;'],"['valueContainer . setParsedValue ( new TextValue ( configuration . contentParser . spaceNormalizeContent ( text ) ,', 'valueContainer . setParsedValue ( new TextValue ( ContentParser . spaceNormalizeContent ( text ) ,', 'if ( configuration . contentParser . hasJsonSignature ( text ) ) {', 'if ( ContentParser . hasJsonSignature ( text ) ) {', 'String text = configuration . contentParser . trimContent ( child . getNodeValue ( ) ) ;', 'String text = ContentParser . trimContent ( child . getNodeValue ( ) ) ;']","['private static EvaluatorFactory INSTANCE = new EvaluatorFactory ( ) ;', 'private static final EvaluatorFactory INSTANCE = new EvaluatorFactory ( ) ;', 'private SCXMLIOProcessor processor ;', 'private final SCXMLIOProcessor processor ;', 'if ( entries = = null ) {', 'this . regs = new HashMap < > ( ) ;', 'this . regs = new HashMap < Integer , Set < SCXMLListener > > ( ) ;', 'Set < SCXMLListener > entries = regs . computeIfAbsent ( source . getObservableId ( ) , k - > new LinkedHashSet < > ( ) ) ;', '}', 'entries = new LinkedHashSet < SCXMLListener > ( ) ;']","['boolean isStrict ( ) ;', 'public static Evaluator getEvaluator ( final boolean strict , final SCXML document ) throws ModelException {', 'public static Evaluator getEvaluator ( final SCXML document ) throws ModelException {', 'return document ! = null ? provider . getEvaluator ( strict , document ) : provider . getEvaluator ( strict ) ;', 'return document ! = null ? provider . getEvaluator ( document ) : provider . getEvaluator ( ) ;', 'Evaluator getEvaluator ( final boolean strict ) ;', 'Evaluator getEvaluator ( final boolean strict , final SCXML document ) ;', 'public void setStrict ( final boolean strict ) throws ModelException {', 'if ( stateMachine . isLateBinding ( ) = = null | | Boolean . FALSE . equals ( stateMachine . isLateBinding ( ) ) ) {', 'evaluator = EvaluatorFactory . getEvaluator ( isStrict ( ) , stateMachine ) ;']","['Assert . assertEquals ( ""state0"" , currentStates . iterator ( ) . next ( ) . getId ( ) ) ;', 'import org . junit . jupiter . api . Test ;', 'import org . junit . Assert ;', 'Assertions . assertEquals ( ""state3"" , currentStates . iterator ( ) . next ( ) . getId ( ) ) ;', 'Assert . assertEquals ( ""state6"" , currentStates . iterator ( ) . next ( ) . getId ( ) ) ;', 'Assertions . assertEquals ( ""state7"" , currentStates . iterator ( ) . next ( ) . getId ( ) ) ;', 'Assert . assertEquals ( ""thirty"" , currentStates . iterator ( ) . next ( ) . getId ( ) ) ;', 'Assertions . assertEquals ( ""ten"" , currentStates . iterator ( ) . next ( ) . getId ( ) ) ;', 'Assert . assertEquals ( ""state4"" , currentStates . iterator ( ) . next ( ) . getId ( ) ) ;', 'Assertions . assertEquals ( ""state2"" , currentStates . iterator ( ) . next ( ) . getId ( ) ) ;']","['} catch ( Exception e ) {', 'SCXMLTestHelper . fireEvent ( exec , Application . QUEUE . remove ( ) ) ;', 'try {', '}', 'SCXMLTestHelper . fireEvent ( exec , Application . QUEUE . remove ( ) ) ;', 'e . printStackTrace ( ) ;']","['try {', '""Nested EffectiveContextMap wrapping should fail""', 'new EffectiveContextMap ( parentContext ) ;', ') ;', '}', 'Assertions . assertThrows (', 'Assertions . fail ( ""Nested EffectiveContextMap wrapping should fail"" ) ;', '( ) - > new EffectiveContextMap ( parentContext ) ,', 'catch ( IllegalArgumentException e ) {', 'IllegalArgumentException . class ,']","['public void setUp ( ) throws Exception {', 'public void setUp ( ) {', 'public void execute ( ActionExecutionContext exctx ) throws ModelException , SCXMLExpressionException {', 'public void execute ( ActionExecutionContext exctx ) {', 'public void before ( ) throws Exception {', 'public void before ( ) {', 'public void cancel ( ) throws InvokerException {', 'public void invokeContent ( String content , Map < String , Object > params ) {', 'throws InvokerException {', 'public void parentEvent ( TriggerEvent evt ) {']","['if ( step . getTransitList ( ) . isEmpty ( ) ) {', '} else {', 'else {', 'if ( !step . getTransitList ( ) . isEmpty ( ) ) {', '}', 'macroStepDone = true ;', 'macroStepDone = true ;', 'while ( exec . isRunning ( ) ) {', 'exec . setStateMachine ( scxml ) ;', '@ Test']","['return false ;', '}', 'Matcher httpMatcher = HTTP IDN PATTERN . matcher ( value ) ;', '+ DomainValidator . unicodeToASCII ( httpMatcher . group ( PARSE HTTP IDN AUTH ) )', '} else {', 'private static final Pattern HTTP IDN PATTERN = Pattern . compile ( "" ( https ? : / / ) ( [ ^ / ] + ) ( . * ) "" , Pattern . CASE INSENSITIVE ) ;', 'private static final int PARSE HTTP IDN SCHEME = 1 ;', 'value = httpMatcher . group ( PARSE HTTP IDN SCHEME )', 'if ( !ASCII PATTERN . matcher ( value ) . matches ( ) ) {', '+ httpMatcher . group ( PARSE HTTP IDN REST ) ;']","['return ( String ) m . invoke ( null , new String [ ] { line . toLowerCase ( Locale . ENGLISH ) } ) ;', 'return IDN . toASCII ( input ) ;', 'private static final Method JAVA NET IDN TO ASCII = getMethod ( ) ;', 'import java . net . IDN ;', 'Throwable t = e . getCause ( ) ;', 'private static class IDNHolder {', '} catch ( IllegalAccessException e ) {', 'if ( input = = null ) {', 'return null ;', 'return false ;']","['private final List dependencyList = Collections . synchronizedList ( new ArrayList ( ) ) ;', 'Iterator < String > dependencies = this . dependencyList . iterator ( ) ;', 'Iterator iter = argMap . entrySet ( ) . iterator ( ) ;', 'Entry < String , Arg > entry = iter . next ( ) ;', 'String key = ( String ) entry . getKey ( ) ;', 'Iterator < String > iter = dependentValidators . iterator ( ) ;', 'Msg msg = ( Msg ) i . next ( ) ;', 'for ( Iterator < ? > i = hVars . keySet ( ) . iterator ( ) ; i . hasNext ( ) ; ) {', 'Iterator iter = dependentValidators . iterator ( ) ;', 'Iterator < String > i = this . hVars . keySet ( ) . iterator ( ) ;']","['private static final EmailValidator EMAIL VALIDATOR WITH LOCAL = new EmailValidator ( true ) ;', 'return domainValidator . isValid ( domain ) | | domainValidator . isValidTld ( domain ) ;', 'return domainValidator . isValid ( domain ) | |', 'private static final EmailValidator EMAIL VALIDATOR = new EmailValidator ( false , false ) ;', 'private static final EmailValidator EMAIL VALIDATOR = new EmailValidator ( false ) ;', 'if ( allowTld ) {', 'public static EmailValidator getInstance ( boolean allowLocal ) {', 'this . allowLocal = allowLocal ;', 'return EMAIL VALIDATOR WITH LOCAL ;', 'return EMAIL VALIDATOR WITH TLD ;']","['private static final String AUTHORITY CHARS REGEX = "" \\ \\ p { Alnum } \\ \\ - \\ \\ . "" ;', 'private static final int PARSE AUTHORITY PORT = 3 ;', 'if ( !domainValidator . isValid ( hostLocation ) ) {', '"" ^ ( ? : \\ \\ [ ( "" + IPV6 REGEX + "" ) \\ \\ ] | ( [ "" + AUTHORITY CHARS REGEX + "" ] * ) ) ( : \\ \\ d * ) ? ( . * ) ? "" ;', 'if ( !inetAddressValidator . isValid ( hostLocation ) ) {', 'if ( !domainValidator . isValid ( hostLocation ) ) {', 'return false ;', 'InetAddressValidator inetAddressValidator = InetAddressValidator . getInstance ( ) ;', 'InetAddressValidator inetAddressValidator =', 'return false ;']","['private static final Pattern PORT PATTERN = Pattern . compile ( PORT REGEX ) ;', 'if ( !"""" . equals ( authority ) ) {', '}', '}', '} else {', 'return false ;', 'String port = authorityMatcher . group ( PARSE AUTHORITY PORT ) ;', '} else {', '"" ^ ( ? : \\ \\ [ ( "" + IPV6 REGEX + "" ) \\ \\ ] | ( ? : ( ? : "" + USERINFO FIELD REGEX + "" ) ? ( [ "" + AUTHORITY CHARS REGEX + "" ] * ) ) ) ( : \\ \\ d * ) ? ( . * ) ? "" ;', 'if ( ""file"" . equals ( scheme ) ) {']","['if ( validOctets < 8 & & !containsCompressedZeroes ) {', 'if ( validOctets < IPV6 MAX HEX GROUPS & & !containsCompressedZeroes ) {', 'octetInt = Integer . valueOf ( octet , 16 ) . intValue ( ) ;', 'private static final int BASE 16 = 16 ;', 'if ( octets . length > 8 ) {', 'if ( iIpSegment > IPV4 MAX OCTET VALUE ) {', 'if ( octet . length ( ) > 4 ) {', 'if ( octet . length ( ) > IPV6 MAX HEX DIGITS PER GROUP ) {', 'if ( iIpSegment > 255 ) {', 'private static final int IPV4 MAX OCTET VALUE = 255 ;']","['long iPort = Integer . parseInt ( port ) ;', '}', 'if ( iPort < 0 | | iPort > 0xFFFF ) {', 'if ( port ! = null & & port . length ( ) > 0 ) {', 'try {', 'String port = authorityMatcher . group ( PARSE AUTHORITY PORT ) ;', '} catch ( NumberFormatException nfe ) {', 'private static final int PARSE AUTHORITY PORT = 3 ;', 'return false ;']","['for ( Iterator i = hVars . keySet ( ) . iterator ( ) ; i . hasNext ( ) ; ) {', 'for ( Iterator < Msg > i = getMsgMap ( ) . values ( ) . iterator ( ) ; i . hasNext ( ) ; ) {', 'protected Map getVarMap ( ) {', 'protected FastHashMap hMsgs = new FastHashMap ( ) ; >', 'String key = ( String ) i . next ( ) ;', 'this . getVarMap ( ) . put ( v . getName ( ) , v ) ;', 'hMsgs . put ( msg . getName ( ) , msg ) ;', 'for ( Iterator < ? > i = getVarMap ( ) . keySet ( ) . iterator ( ) ; i . hasNext ( ) ; ) {', 'Object o = hVars . get ( mainKey ) ;', 'return ( Msg ) getMsgMap ( ) . get ( key ) ;']","['public ValidatorResults validate ( Map params , Map actions )', 'public ValidatorResults validate ( Map params , Map < String , ValidatorAction > actions )', 'hFields . putAll ( temphFields ) ;', 'return getFieldMap ( ) . get ( fieldName ) ;', 'ValidatorResults validate ( Map < String , ? super Object > params , Map actions , int page , String fieldName )', 'ValidatorResults validate ( Map params , Map < String , ValidatorAction > actions , int page )', 'this . hFields . put ( f . getKey ( ) , f ) ;', 'ValidatorResults validate ( Map < String , ? super Object > params , Map < String , ValidatorAction > actions , int page , String fieldName )', 'protected Map getFieldMap ( ) {', 'getFieldMap ( ) . put ( f . getKey ( ) , f ) ;']","['Iterator < String > keys = actionMap . keySet ( ) . iterator ( ) ;', 'Iterator < String > keys = result . getActions ( ) ;', 'import java . util . Map ;', 'Map < String , ? > actionMap = result . getActionMap ( ) ;']","['synchronized void process ( Map globalConstants ) {', 'Map < String , Form > dForms = depends . getForms ( ) ;', 'Map dForms = depends . getForms ( ) ;', 'Form pForm = pForms . get ( key ) ;', 'Entry entry = it . next ( ) ;', 'Entry < String , Form > entry = it . next ( ) ;', 'Object key = entry . getKey ( ) ;', 'Map < String , Form > pForms = getForms ( ) ;', 'Map pForms = getForms ( ) ;', 'pForm . merge ( entry . getValue ( ) ) ;']","['Map actions ,', 'public ValidatorResults validate ( Map < String , Object > params , Map < String , ValidatorAction > actions )', 'field . args = new Map [ this . args . length ] ;', '@ SuppressWarnings ( ""unchecked"" )', 'ValidatorAction action = ( ValidatorAction ) actions . get ( depend ) ;', 'field . args = tempMap ;', 'Map params ,', 'final Map < String , Arg > [ ] tempMap = new Map [ this . args . length ] ;', 'public ValidatorResults validate ( Map params , Map < String , ValidatorAction > actions )', 'Map < String , ValidatorAction > actions ,']","['Map < String , ? super Object > results = new HashMap < String , Object > ( ) ;', 'Entry < String , Object > entry = i . next ( ) ;', 'Iterator < Entry < String , ? > > i = map . entrySet ( ) . iterator ( ) ;', '@ SuppressWarnings ( ""unchecked"" )', 'Entry < String , ? > entry = i . next ( ) ;', 'Map < String , Object > results = new HashMap < String , Object > ( ) ;', 'public static Map copyMap ( Map map ) {', 'public static Map < String , Object > copyMap ( Map < String , Object > map ) {', 'Iterator < Entry < String , Object > > i = map . entrySet ( ) . iterator ( ) ;']","['if ( isString ( bean ) ) {', 'return true ;', 'return true ;', 'private static boolean isStringOrNull ( Object o ) {', 'return ( stringClass . isInstance ( o ) ) ;', 'if ( isStringOrNull ( bean ) ) {', 'private static boolean isString ( Object o ) {', 'return ( o instanceof String ) ;', 'private static Class < ? > stringClass = new String ( ) . getClass ( ) ;']","['private static final String DOMAIN LABEL REGEX = "" \\ \\ p { Alnum } ( ? > [ \\ \\ p { Alnum } - ] { 0 , 61 } \\ \\ p { Alnum } ) ? "" ;', 'private static final String DOMAIN LABEL REGEX = "" \\ \\ p { Alnum } ( ? > [ \\ \\ p { Alnum } - ] { 0 , 61 } \\ \\ p { Alnum } ) ? "" ;', 'private static final String AUTHORITY CHARS REGEX = "" \\ \\ p { Alnum } \\ \\ - \\ \\ . "" ;', 'private static final String AUTHORITY CHARS REGEX = "" \\ \\ p { Alnum } \\ \\ - \\ \\ . "" ;', 'assertFalse ( validator . isValid ( ""abc @ abc def . com"" ) ) ;', 'assertTrue ( validator . isValid ( ""abc @ abc def . com"" ) ) ;', 'new ResultPair ( ""my domain . s3 . amazonaws . com"" , true ) ,']","['private static final String DOMAIN LABEL REGEX = "" \\ \\ p { Alnum } ( ? > [ \\ \\ p { Alnum } - ] { 0 , 61 } \\ \\ p { Alnum } ) ? "" ;', 'private static final String DOMAIN LABEL REGEX = "" \\ \\ p { Alnum } ( ? > [ \\ \\ p { Alnum } - ] { 0 , 61 } \\ \\ p { Alnum } ) ? "" ;', 'private static final String AUTHORITY CHARS REGEX = "" \\ \\ p { Alnum } \\ \\ - \\ \\ . "" ;', 'private static final String AUTHORITY CHARS REGEX = "" \\ \\ p { Alnum } \\ \\ - \\ \\ . "" ;', 'assertTrue ( validator . isValid ( ""abc @ abc def . com"" ) ) ;', 'assertFalse ( validator . isValid ( ""abc @ abc def . com"" ) ) ;', 'new ResultPair ( ""my domain . s3 . amazonaws . com"" , true ) ,']","['if ( user = = null | | user . length ( ) > 64 ) {', 'return false ;', '}', 'assertFalse ( validator . isValid ( ""john56789 . john56789 . john56789 . john56789 . john56789 . john56789 . john5 @ example . com"" ) ) ;']","['assertTrue ( validator . isValid ( ""john56789 . john56789 . john56789 . john56789 . john56789 . john56789 . john @ example . com"" ) ) ;']","['""tp"" ,', '""xn - - 30rr7y"" ,', '""chat"" ,', '""cisco"" ,', '""goog"" ,', '""markets"" ,', '""page"" ,', '""one"" ,', '""honda"" ,', '""seat"" ,']","['assertFalse ( validator . isValid (', '""Namrutrummolestiediamidmattis . Cumsociisnatoquepenatibusetmagnisdisparturientmontesnasceturridiculusmus . "" +', '""Proinpharetrametusneclacuspulvinarsedvolutpatliberoornare . Sedligulanislpulvinarnonlectuseublanditfacilisisante . "" +', '""Donecnonsapieninmagnatristiquedictumaacturpis . Fusceorciduifacilisisutsapieneuconsequatpharetralectus . "" +', '}', '""Morbiposueresedmetusacconsectetur . Etiamquisipsumvitaejustotempusmaximus . Sedultriciesplaceratvolutpat . "" +', '""Aliquameteratsitametnibhcommodofinibus . Morbiefficiturodiovelpulvinariaculis . "" +', '""Etiamquiseleifendpurus . Nuncfelisnuncscelerisqueiddignissimnecfinibusalibero . "" +', '""Etiamconsequatligulanisisitametaliquamnibhtemporquis . Nuncinterdumdignissimnullaatsodalesarcusagittiseu . "" +', 'public void testValidator365 ( ) {']","['info . put ( dom . toLowerCase ( Locale . ENGLISH ) , new String [ ] { typ , com } ) ;', 'info . put ( dom . toLowerCase ( Locale . ENGLISH ) , new String [ ] { typ , com } ) ;', '}', '} else {', 'System . err . println ( ""Expected to find text entry for html : "" + key ) ;', 'for ( String key : ( new TreeMap < String , String [ ] > ( htmlInfo ) ) . keySet ( ) ) {', 'if ( com . contains ( ""Not assigned"" ) | | com . contains ( ""Retired"" ) | | typ . equals ( ""test"" ) ) {', 'if ( !ianaTlds . contains ( key ) ) {']","['""bing"" ,', '""jlc"" ,', '""montblanc"" ,', '""hotmail"" ,', '""xbox"" ,', '""homedepot"" ,', '""windows"" ,', '""lasalle"" ,', '""azure"" ,', '""microsoft"" ,']","['System . err . println ( ""Expected to find text entry for html : "" + key ) ;', 'return true ;', 'try {', '}', '} finally {', 'HttpURLConnection hc = null ;', 'BufferedReader in = null ;', 'private static void closeQuietly ( Closeable in ) {', 'if ( !isNotInRootZone ( key ) ) {', 'if ( in ! = null ) {']","['""oracle"" ,', '""bharti"" ,']","['""organic"" ,', '""organic"" ,', '""day"" ,', '""day"" ,', '""rip"" ,', '""starhub"" ,', '""lds"" ,', '""rip"" ,', '""vodka"" ,', '""lds"" ,']","['iTld = unicodeToASCII ( iTld ) ;', 'return Arrays . binarySearch ( INFRASTRUCTURE TLDS , key ) > = 0 ;', 'gTld = unicodeToASCII ( gTld ) ;', 'return Arrays . binarySearch ( GENERIC TLDS , key ) > = 0 ;', 'return Arrays . binarySearch ( GENERIC TLDS , chompLeadingDot ( gTld . toLowerCase ( Locale . ENGLISH ) ) ) > = 0 ;', 'final String key = chompLeadingDot ( unicodeToASCII ( gTld ) . toLowerCase ( Locale . ENGLISH ) ) ;', 'lTld = unicodeToASCII ( lTld ) ;', 'return Arrays . binarySearch ( COUNTRY CODE TLDS , key ) > = 0 ;', 'ccTld = unicodeToASCII ( ccTld ) ;', 'final String key = chompLeadingDot ( unicodeToASCII ( lTld ) . toLowerCase ( Locale . ENGLISH ) ) ;']","['""gdn"" ,', '""viva"" ,', '""mom"" ,', '""gea"" ,', '""aco"" ,', '""gdn"" ,', '""stcgroup"" ,', '""xn - - efvy88h"" ,', '""aaa"" ,']","['if ( modTime > timestamp ) {', 'line = br . readLine ( ) ;', 'if ( timestamp > 0 & & f . canRead ( ) ) {', 'if ( modTime > 0 ) {', 'long modTime = f . lastModified ( ) ;', 'System . err . println ( ""Expected to find HTML info for "" + asciiTld ) ;', 'if ( f . canRead ( ) ) {', 'modTime = f . lastModified ( ) ;', 'System . err . println ( ""Expected to find info for "" + asciiTld ) ;', 'if ( modTime > System . currentTimeMillis ( ) - HOUR ) {']","['private boolean isSortedLowerCase ( String arrayName ) throws Exception {', 'OK & = isSortedLowerCase ( list ) ;', 'return ;', 'for ( String list : new String [ ] { ""INFRASTRUCTURE TLDS"" , ""COUNTRY CODE TLDS"" , ""GENERIC TLDS"" , ""LOCAL TLDS"" } ) {', '}', 'System . out . println ( ""Fix arrays before retrying ; cannot continue"" ) ;', 'boolean OK = true ;', 'private static boolean isSortedLowerCase ( String arrayName ) throws Exception {', 'if ( !OK ) {']","['""bom"" ,', '""final"" ,', '""stada"" ,', '""ltd"" ,', '""csc"" ,', '""theatre"" ,', '""stockholm"" ,', '""linde"" ,', '""amica"" ,', '""car"" ,']","['Assert . assertTrue ( line , routine . isValid ( line . replaceAll ( "" "" , """" ) ) ) ;', 'Assert . assertFalse ( line , routine . isValid ( line . replaceAll ( "" "" , """" ) ) ) ;', '}', 'line = line . substring ( 1 ) ;', '} else {', 'Assert . assertTrue ( line , routine . isValid ( line . replaceAll ( "" "" , """" ) ) ) ;', 'if ( line . startsWith ( "" - "" ) ) {']","['""xn - - mgbtx2b"" ,', '""beats"" ,', '""mtr"" ,', '""rwe"" ,', '""dell"" ,', '""zara"" ,', '""mutuelle"" ,', '""arte"" ,', '""yamaxun"" ,', '""aarp"" ,']","['return Arrays . binarySearch ( INFRASTRUCTURE TLDS , key ) > = 0 ;', 'private static boolean arrayContains ( String [ ] sortedArray , String key ) {', 'return Arrays . binarySearch ( GENERIC TLDS , key ) > = 0 ;', 'return Arrays . binarySearch ( sortedArray , key ) > = 0 ;', 'return Arrays . binarySearch ( COUNTRY CODE TLDS , key ) > = 0 ;', 'return arrayContains ( INFRASTRUCTURE TLDS , key ) ;', 'return Arrays . binarySearch ( LOCAL TLDS , key ) > = 0 ;', 'return arrayContains ( GENERIC TLDS , key ) ;', '}', 'return arrayContains ( LOCAL TLDS , key ) ;']","['public void testValidator374 ( ) {', '}', 'assertTrue ( validator . isValid ( ""abc @ school . school"" ) ) ;']","['return arrayContains ( GENERIC TLDS , key ) ;', 'COUNTRY CODE PLUS ,', 'return arrayContains ( COUNTRY CODE TLDS , key ) ;', '& & !arrayContains ( COUNTRY CODE TLDS MINUS , key ) ;', 'private static volatile String [ ] COUNTRY CODE TLDS MINUS = EMPTY STRING ARRAY ;', 'GENERIC TLDS PLUS = EMPTY STRING ARRAY ;', 'for ( int i = 0 ; i < tlds . length ; i + + ) {', 'GENERIC MINUS ,', 'COUNTRY CODE MINUS ;', '}']","['public void testValidator361 ( ) {', 'UrlValidator validator = new UrlValidator ( ) ;', 'assertTrue ( validator . isValid ( ""http : / / hello . tokyo / "" ) ) ;', '}']","['public static DomainValidator getInstance ( ) {', 'public static synchronized DomainValidator getInstance ( ) {', 'public static void updateTLDOverride ( ArrayType table , String [ ] tlds ) {', 'if ( inUse ) {', 'static void clearTLDOverrides ( ) {', 'throw new IllegalStateException ( ""Can only invoke this method before calling getInstance"" ) ;', 'public static DomainValidator getInstance ( boolean allowLocal ) {', '}', 'static synchronized void clearTLDOverrides ( ) {', 'private static boolean inUse = false ;']","['}', 'if ( isOn ( options , VPAY ) ) {', 'public static final long VPAY = 1 < < 5 ;', 'this . cardTypes . add ( VPAY VALIDATOR ) ;', 'public static final CodeValidator VPAY VALIDATOR = new CodeValidator ( "" ^ ( 4 ) ( \\ \\ d { 12 , 18 } ) $"" , LUHN VALIDATOR ) ;', 'assertEquals ( VALID VPAY2 , validator . validate ( VALID VPAY2 ) ) ;', 'private static final String VALID VPAY = ""4370000000000061"" ;', 'private static final String VALID VPAY2 = ""4370000000000012"" ;', 'assertTrue ( ""Valid"" , validator . isValid ( VALID VPAY ) ) ;', 'assertFalse ( ""Invalid"" , validator . isValid ( ERROR VPAY ) ) ;']","['assertEquals ( ""week LT"" , - 1 , dateValidator . compareWeeks ( value , date20050830 , null ) ) ;', 'assertEquals ( ""week = 3"" , 0 , dateValidator . compareWeeks ( value , date20050822 , GMT ) ) ;', 'assertEquals ( ""qtrA < 1"" , - 1 , dateValidator . compareQuarters ( value , date20051101 , null ) ) ;', 'assertEquals ( ""qtrA = 1"" , 0 , dateValidator . compareQuarters ( value , date20050901 , GMT ) ) ;', 'assertEquals ( ""mnth GT"" , 1 , dateValidator . compareMonths ( value , date20050731 , null ) ) ;', 'assertEquals ( ""qtrB = 1"" , 0 , dateValidator . compareQuarters ( value , date20051001 , GMT , 2 ) ) ;', 'assertEquals ( ""week GT"" , 1 , dateValidator . compareWeeks ( value , date20050816 , null ) ) ;', 'assertEquals ( ""week = 2"" , 0 , dateValidator . compareWeeks ( value , date20050822 , GMT ) ) ;', 'assertEquals ( ""mnth LT"" , - 1 , dateValidator . compareMonths ( value , date20050901 , null ) ) ;', 'assertEquals ( ""qtrA = 2"" , 0 , dateValidator . compareQuarters ( value , date20050701 , GMT ) ) ;']","['""rocher"" ,', '""playstation"" ,', '""ferrero"" ,']","['new Validator ( ""DE"" , 22 , ""DE \\ \\ d { 20 } "" ) ,', 'new Validator ( ""QA"" , 29 , ""QA \\ \\ d { 2 } [ A - Z ] { 4 } [ a - zA - Z0 - 9 ] { 21 } "" ) ,', 'new Validator ( ""SE"" , 24 , ""SE \\ \\ d { 22 } "" ) ,', 'new Validator ( ""AE"" , 23 , ""AE \\ \\ d { 21 } "" ) ,', 'new Validator ( ""GI"" , 23 , ""GI \\ \\ d { 2 } [ A - Z ] { 4 } [ a - zA - Z0 - 9 ] { 15 } "" ) ,', 'new Validator ( ""SM"" , 27 , ""SM \\ \\ d { 2 } [ A - Z ] { 1 } \\ \\ d { 10 } [ a - zA - Z0 - 9 ] { 12 } "" ) ,', 'this . formatValidators = createValidators ( formatMap ) ;', 'new Validator ( ""PS"" , 29 , ""PS \\ \\ d { 2 } [ A - Z ] { 4 } [ a - zA - Z0 - 9 ] { 21 } "" ) ,', 'new Validator ( ""EE"" , 20 , ""EE \\ \\ d { 18 } "" ) ,', 'new Validator ( ""MK"" , 19 , ""MK \\ \\ d { 5 } [ a - zA - Z0 - 9 ] { 10 } \\ \\ d { 2 } "" ) ,']","['new Validator ( ""BR"" , 29 , ""BR \\ \\ d { 25 } [ A - Z ] { 1 } [ a - zA - Z0 - 9 ] { 1 } "" ) ,', 'new Validator ( ""GI"" , 23 , ""GI \\ \\ d { 2 } [ A - Z ] { 4 } [ A - Z0 - 9 ] { 15 } "" ) ,', 'new Validator ( ""JO"" , 30 , ""JO \\ \\ d { 2 } [ A - Z ] { 4 } \\ \\ d { 4 } [ a - zA - Z0 - 9 ] { 18 } "" ) ,', 'new Validator ( ""IT"" , 27 , ""IT \\ \\ d { 2 } [ A - Z ] { 1 } \\ \\ d { 10 } [ A - Z0 - 9 ] { 12 } "" ) ,', 'new Validator ( ""QA"" , 29 , ""QA \\ \\ d { 2 } [ A - Z ] { 4 } [ a - zA - Z0 - 9 ] { 21 } "" ) ,', 'new Validator ( ""LV"" , 21 , ""LV \\ \\ d { 2 } [ A - Z ] { 4 } [ A - Z0 - 9 ] { 13 } "" ) ,', 'new Validator ( ""DO"" , 28 , ""DO \\ \\ d { 2 } [ a - zA - Z0 - 9 ] { 4 } \\ \\ d { 20 } "" ) ,', 'new Validator ( ""BH"" , 22 , ""BH \\ \\ d { 2 } [ A - Z ] { 4 } [ A - Z0 - 9 ] { 14 } "" ) ,', 'new Validator ( ""PK"" , 24 , ""PK \\ \\ d { 2 } [ A - Z ] { 4 } [ a - zA - Z0 - 9 ] { 16 } "" ) ,', 'new Validator ( ""SM"" , 27 , ""SM \\ \\ d { 2 } [ A - Z ] { 1 } \\ \\ d { 10 } [ A - Z0 - 9 ] { 12 } "" ) ,']","['StringBuffer results = new StringBuffer ( ) ;', 'StringBuilder results = new StringBuilder ( ) ;', 'StringBuffer results = new StringBuffer ( ) ;', 'StringBuilder results = new StringBuilder ( ) ;', 'StringBuffer results = new StringBuffer ( ) ;', 'StringBuilder results = new StringBuilder ( ) ;', 'StringBuffer results = new StringBuffer ( ) ;', 'StringBuilder results = new StringBuilder ( ) ;', 'StringBuffer results = new StringBuffer ( ) ;', 'StringBuilder results = new StringBuilder ( ) ;']","['try {', 'Object result = validate ( issn ) ;', '}', 'private static final String ISSN REGEX = "" ( ? : ISSN ) ? ( \\ \\ d { 4 } ) - ( \\ \\ d { 3 } [ 0 - 9X ] ) $"" ;', 'return ISSN VALIDATOR ;', 'if ( suffix = = null | | !suffix . matches ( "" \\ \\ d \\ \\ d"" ) ) {', 'import java . io . Serializable ;', 'ean13 + = checkDigit ;', 'import org . apache . commons . validator . routines . checkdigit . CheckDigitException ;', '} catch ( CheckDigitException e ) {']","['""1144 - 875X"" ,', 'assertEquals ( ""9770264359008"" , VALIDATOR . convertToEAN13 ( ""0264 - 3596"" , ""00"" ) ) ;', 'assertEquals ( ""9771144875007"" , VALIDATOR . convertToEAN13 ( ""1144 - 875X"" , ""00"" ) ) ;', '""0264 - 3596"" ,', 'assertEquals ( ""9771234567003"" , VALIDATOR . convertToEAN13 ( ""1234 - 5679"" , ""00"" ) ) ;']","['import org . apache . commons . collections . FastHashMap ;', 'import org . apache . commons . collections . FastHashMap ;', 'import org . apache . commons . collections . FastHashMap ;', 'import org . apache . commons . collections . FastHashMap ;']","['assertTrue ( validator . isValid ( ""http : / / www . apache . org : 80 / path"" ) ) ;', 'public void testValidator380 ( ) {', 'assertTrue ( validator . isValid ( ""http : / / www . apache . org : 8 / path"" ) ) ;', 'UrlValidator validator = new UrlValidator ( ) ;', '}']","['code = code . substring ( 0 , 2 ) + ""00"" + code . substring ( 4 ) ;']","['this . valid = valid ;', 'public final boolean valid ;', 'public String item ;', 'public final String item ;', 'public boolean valid ;', 'this . valid = valid ;']","['String check = code . substring ( 2 , 4 ) ;', '}', 'return false ;', 'if ( ""00"" . equals ( check ) | | ""01"" . equals ( check ) | | ""99"" . equals ( check ) ) {', 'invalid = new String [ ] { ""510007 + 47061BE63"" } ;', '""510007 + 47061BE63"" ,', '} ;', '""IE01AIBK93118702569045"" ,', 'invalid = new String [ ] {', '""AA9900000000053"" ,']","['int slash2Count = countToken ( "" / / "" , path ) ;', 'if ( norm . startsWith ( "" / . . / "" )', 'if ( dot2Count > 0 & & ( slashCount - slash2Count - 1 ) < = dot2Count ) {', 'try {', 'int dot2Count = countToken ( "" . . "" , path ) ;', 'URI uri = new URI ( null , null , path , null ) ;', 'int slashCount = countToken ( "" / "" , path ) ;', 'int slash2Count = countToken ( "" / / "" , path ) ;', 'if ( isOff ( ALLOW 2 SLASHES ) & & ( slash2Count > 0 ) ) {', '} catch ( URISyntaxException e ) {']","['assertTrue ( urlValidator . isValid ( ""http : / / www . example . org / . . . / "" ) ) ;', 'assertFalse ( urlValidator . isValid ( ""http : / / www . example . org / . . / "" ) ) ;', 'assertTrue ( urlValidator . isValid ( ""http : / / www . example . org / . . . / . . "" ) ) ;', 'assertFalse ( urlValidator . isValid ( ""http : / / www . example . org / . / . / . . "" ) ) ;', 'assertFalse ( urlValidator . isValid ( ""http : / / www . example . org / . / . . "" ) ) ;', 'assertTrue ( urlValidator . isValid ( ""http : / / www . example . org / . . . "" ) ) ;', 'assertFalse ( urlValidator . isValid ( ""http : / / www . example . org / . . "" ) ) ;']","['assertTrue ( validator . isValid ( ""ftp : / / username : password @ example . com : 8042 / over / there / index . dtb ? type = animal & name = narwhal#nose"" ) ) ;', 'UrlValidator validator = new UrlValidator ( ) ;', '}', 'public void testValidator382 ( ) {']","['private static final String VALID CHARS = "" [ ^ \\ \\ s"" + SPECIAL CHARS + "" ] "" ;', 'private static final String VALID CHARS = "" ( \\ \\ \\ \\ . ) | [ ^ \\ \\ s"" + SPECIAL CHARS + "" ] "" ;', 'assertTrue ( validator . isValid ( "" \\ \\ > escape \\ \\ \\ \\ special \\ \\ ^ characters \\ \\ < @ example . com"" ) ) ;', 'assertTrue ( validator . isValid ( ""space \\ \\ monkey @ example . com"" ) ) ;', 'assertFalse ( validator . isValid ( ""Abc @ def @ example . com"" ) ) ;', 'assertTrue ( validator . isValid ( ""Abc \\ \\ @ def @ example . com"" ) ) ;']","['private static final CodeValidator issnValidator = new CodeValidator ( ISSN REGEX , 8 , ISSNCheckDigit . ISSN CHECK DIGIT ) ;', 'private static final CodeValidator VALIDATOR = new CodeValidator ( ISSN REGEX , 8 , ISSNCheckDigit . ISSN CHECK DIGIT ) ;', 'return issnValidator . validate ( code ) ;', 'return VALIDATOR . isValid ( code ) ;', 'return issnValidator . isValid ( code ) ;', 'return VALIDATOR . validate ( code ) ;']","['String ipSegment = groups [ i ] ;', 'for ( String ipSegment : groups ) {', 'for ( int i = 0 ; i < = 3 ; i + + ) {']","['if ( index > octets . length - 1 | | index > 6 ) {', 'if ( index > octets . length - 1 | | index > 6 ) {', 'if ( charValue < 0 | | charValue > 35 ) {', 'if ( charValue < 0 | | charValue > MAX ALPHANUMERIC VALUE ) {', 'if ( code = = null | | code . length ( ) < 5 ) {', 'if ( code = = null | | code . length ( ) < MIN CODE LEN ) {', 'private static final int MAX ALPHANUMERIC VALUE = 35 ;', 'if ( charValue < 0 | | charValue > 35 ) {', 'if ( charValue < 0 | | charValue > MAX ALPHANUMERIC VALUE ) {', 'private static final int MAX ALPHANUMERIC VALUE = 35 ;']","['private static volatile String [ ] COUNTRY CODE TLDS PLUS = EMPTY STRING ARRAY ; / /', 'countryCodeTLDsPlus = EMPTY STRING ARRAY ;', 'COUNTRY CODE TLDS MINUS = copy ;', '& & !arrayContains ( countryCodeTLDsMinus , key ) ;', '& & !arrayContains ( COUNTRY CODE TLDS MINUS , key ) ;', 'genericTLDsMinus = EMPTY STRING ARRAY ;', 'private static volatile String [ ] COUNTRY CODE TLDS MINUS = EMPTY STRING ARRAY ;', 'return ( arrayContains ( GENERIC TLDS , key ) | | arrayContains ( genericTLDsPlus , key ) )', 'GENERIC TLDS PLUS = EMPTY STRING ARRAY ;', '& & !arrayContains ( genericTLDsMinus , key ) ;']","['return new Long ( value ) ;', 'result = Short . valueOf ( num . shortValue ( ) ) ;', 'result = new Long ( num . longValue ( ) ) ;', 'result = Byte . valueOf ( num . byteValue ( ) ) ;', 'return new Integer ( value ) ;', 'return Long . valueOf ( value ) ;', 'return GenericValidator . isCreditCard ( value ) ? new Long ( value ) : null ;', 'return GenericValidator . isCreditCard ( value ) ? Long . valueOf ( value ) : null ;', 'result = new Byte ( num . byteValue ( ) ) ;', 'return Byte . valueOf ( value ) ;']","['BufferedReader reader = new BufferedReader ( new InputStreamReader ( is ) ) ;', 'BufferedReader reader = new BufferedReader ( new InputStreamReader ( is ) ) ;']","['enum ArrayType {', 'public enum ArrayType {', 'public void testEnumIsPublic ( ) {', 'assertTrue ( Modifier . isPublic ( DomainValidator . ArrayType . class . getModifiers ( ) ) ) ;', '}']","['""book"" ,', '""sfr"" ,', '""cityeats"" ,', '""fast"" ,', '""rexroth"" ,', '""verisign"" ,', '""symantec"" ,', '""xn - - mgbt3dhd"" ,', '""bugatti"" ,', '""contact"" ,']","['return domainValidator . isValid ( domain ) | | domainValidator . isValidTld ( domain ) ;', 'return domainValidator . isValid ( domain ) | | ( !domain . startsWith ( "" . "" ) & & domainValidator . isValidTld ( domain ) ) ;', 'public void testEmailAtTLD ( ) {', 'public void testValidator359 ( ) {', '}', 'assertTrue ( val . isValid ( ""test @ com"" ) ) ;', 'assertFalse ( val . isValid ( ""test @ . com"" ) ) ;', 'EmailValidator val = EmailValidator . getInstance ( false , true ) ;']","['private static final String QUOTED USER = "" ( \\ "" [ ^ \\ "" ] * \\ "" ) "" ;', 'private static final String QUOTED USER = "" ( \\ "" ( \\ \\ \\ \\ \\ "" | [ ^ \\ "" ] ) * \\ "" ) "" ;', 'assertTrue ( validator . isValid ( "" \\ ""john \\ \\ \\ ""doe \\ "" @ apache . org"" ) ) ;']","['COUNTRY CODE MINUS ;', 'array = LOCAL TLDS ;', 'array = genericTLDsMinus ;', '}', 'throw new IllegalArgumentException ( ""Cannot update the table : "" + table ) ;', 'case COUNTRY CODE RO :', 'case LOCAL RO :', 'case GENERIC MINUS :', 'return Arrays . copyOf ( array , array . length ) ;', 'INFRASTRUCTURE RO ,']","['return DOMAIN VALIDATOR WITH LOCAL ;', 'return DOMAIN VALIDATOR WITH LOCAL ;', 'return true ;', 'return true ;', 'this . allowLocal = allowLocal ;', 'this . allowLocal = allowLocal ;', '}', '}', 'if ( allowLocal ) {', 'if ( allowLocal ) {']","['""dubai"" ,']","['if ( !isNotInRootZone ( key ) ) {', 'System . err . println ( ""WARN : Expected to find text entry for html : "" + key ) ;', 'import java . io . InputStreamReader ;', 'File rootCheck = new File ( ""target"" , ""tld "" + domain + "" . html"" ) ;', 'if ( hc ! = null ) {', 'download ( rootCheck , tldurl , 0L ) ;', 'in = new BufferedReader (', '} else {', '} catch ( MalformedURLException e ) {', 'DomainValidator dv = DomainValidator . getInstance ( ) ;']","['""volkswagen"" ,', '""fresenius"" ,']","['""alipay"" ,', '""select"" ,', '""makeup"" ,', '""compare"" ,', '""skin"" ,', '""weather"" ,', '""xn - - g2xx48c"" ,', '""softbank"" ,', '""iselect"" ,', '""tube"" ,']","['if ( ( minLength > = 0 & & code . length ( ) < minLength ) | |', 'if ( ( minLength > = 0 & & code . length ( ) < minLength ) | |', '( maxLength > = 0 & & code . length ( ) > maxLength ) ) {', '( maxLength > = 0 & & code . length ( ) > maxLength ) ) {', '}', '}', 'return null ;', 'return null ;']","['if ( ( minLength > = 0 & & code . length ( ) < minLength ) | |', 'if ( ( minLength > = 0 & & code . length ( ) < minLength ) | |', '( maxLength > = 0 & & code . length ( ) > maxLength ) ) {', '( maxLength > = 0 & & code . length ( ) > maxLength ) ) {', '}', '}', 'return null ;', 'return null ;']","['""doosan"" ,', '""pamperedchef"" ,', '} ;', '""frontier"" ,', '""shaw"" ,', '""xn - - fct429k"" ,', '""weatherchannel"" ,', '""nissay"" ,', '""gallup"" ,', '""unicom"" ,']","['public static final CodeValidator MASTERCARD VALIDATOR = new CodeValidator ( "" ^ ( 5 [ 1 - 5 ] \\ \\ d { 14 } ) $"" , LUHN VALIDATOR ) ;', '"" ^ ( 2 [ 3 - 6 ] \\ \\ d { 14 } ) $"" ,', 'public static final CodeValidator MASTERCARD VALIDATOR PRE OCT2016 = new CodeValidator ( "" ^ ( 5 [ 1 - 5 ] \\ \\ d { 14 } ) $"" , LUHN VALIDATOR ) ;', '"" ^ ( 2221 \\ \\ d { 12 } ) $"" ,', '} ) ;', '"" ^ ( 22 [ 3 - 9 ] \\ \\ d { 13 } ) $"" ,', '"" ^ ( 27 [ 01 ] \\ \\ d { 13 } ) $"" ,', '@ Deprecated', '}', '"" ^ ( 5 [ 1 - 5 ] \\ \\ d { 14 } ) $"" ,']","['@ Override', '@ Override', '@ Override', '@ Override', '@ Override', '@ Override', '@ Override', '@ Override', '@ Override', '@ Override']","['@ Override', '@ Override', '@ Override', '@ Override', '@ Override', '@ Override']","['@ Deprecated', '@ Deprecated', '@ Deprecated', '@ Deprecated', '@ Deprecated', '@ Deprecated', '@ Deprecated', '@ Deprecated', '@ Deprecated', '@ Deprecated']","['assertEquals ( ""Format Type B"" , CurrencyValidator . CURRENCY FORMAT , CurrencyValidator . getInstance ( ) . getFormatType ( ) ) ;', 'assertEquals ( ""Format Type B"" , AbstractNumberValidator . CURRENCY FORMAT , CurrencyValidator . getInstance ( ) . getFormatType ( ) ) ;', 'assertEquals ( ""Format Type B"" , PercentValidator . PERCENT FORMAT , PercentValidator . getInstance ( ) . getFormatType ( ) ) ;', 'assertEquals ( ""Format Type B"" , AbstractNumberValidator . PERCENT FORMAT , PercentValidator . getInstance ( ) . getFormatType ( ) ) ;']","['return ( Msg ) getMsgMap ( ) . get ( key ) ;', 'return getVarMap ( ) . get ( mainKey ) ;', 'return ( Var ) getVarMap ( ) . get ( mainKey ) ;', 'Arg arg = args [ position ] . get ( key ) ;', 'Arg arg = ( Arg ) args [ position ] . get ( key ) ;', 'return getMsgMap ( ) . get ( key ) ;', 'Field defaultField = ( Field ) dependsIt . next ( ) ;', 'Field defaultField = dependsIt . next ( ) ;', 'return ( Form ) this . forms . get ( formName ) ;', 'return this . forms . get ( formName ) ;']","['""statebank"" ,', '""ismaili"" ,', '""ftr"" ,', '""sbi"" ,', '""mls"" ,', '""xn - - 5tzm5g"" ,', '""agakhan"" ,', '""imamat"" ,', '""progressive"" ,', '""akdn"" ,']","['if ( !"""" . equals ( authority ) ) {', 'if ( authority ! = null ) {', 'public void testValidator391OK ( ) {', 'UrlValidator urlValidator = new UrlValidator ( schemes ) ;', 'urlValidator . isValid ( ""file : / C : / path / to / dir / "" ) ;', 'String [ ] schemes = { ""file"" } ;', '}', 'public void testValidator391FAILS ( ) {', 'urlValidator . isValid ( ""file : /']","['urlValidator . isValid ( ""file : /', 'assertTrue ( urlValidator . isValid ( ""file : /', 'urlValidator . isValid ( ""file : / C : / path / to / dir / "" ) ;', 'assertTrue ( urlValidator . isValid ( ""file : / C : / path / to / dir / "" ) ) ;']","['if ( num < 0 ) {', 'return weightedValue ;', 'int pos = useRightPos ? rightPos : leftPos ;', 'int weightedValue = charValue * weight ;', 'public String toString ( ) {', '}', 'public ModulusTenCheckDigit ( int [ ] postitionWeight , boolean useRightPos , boolean sumWeightedDigits ) {', '@ Override', 'import org . apache . commons . validator . routines . CodeValidator ;', 'import java . util . Arrays ;']","['new Validator ( ""SC"" , 31 , ""SC \\ \\ d { 2 } [ A - Z ] { 4 } \\ \\ d { 20 } [ A - Z ] { 3 } "" ) ,', 'new Validator ( ""UA"" , 29 , ""UA \\ \\ d { 8 } [ A - Z0 - 9 ] { 19 } "" ) ,', '} ;', '""SC18SSCB11010000000000001497USD"" ,', '""UA213996220000026007233566001""', '} ;']","['""flsmidth"" ,', '""asda"" ,', '""beauty"" ,', '""mitsubishi"" ,', '""nab"" ,', '""nike"" ,', '""americanfamily"" ,', '""frontdoor"" ,', '""ladbrokes"" ,', '""banamex"" ,']","['""SC18SSCB11010000000000001497USD"" ,', '""SC18SSCB11010000000000001497USD"" ,', '""KZ86125KZT5004100100"" ,', '""CH9300762011623852957"" ,', '""CH9300762011623852957"" ,', '""KZ86125KZT5004100100"" ,', '""ME25505000012345678951"" ,', '""ME25505000012345678951"" ,', '""LV80BANK0000435195001"" ,', '""LV80BANK0000435195001"" ,']","['new Validator ( ""CR"" , 21 , ""CR \\ \\ d { 19 } "" ) ,', 'new Validator ( ""CR"" , 22 , ""CR \\ \\ d { 20 } "" ) ,', '""CR0515202001026284066"" ,', '""CR05015202001026284066"" ,', '""LC55HEMM000100010012001200023015"" ,', '""LC55HEMM000100010012001200023015"" ,']","['assertTrue ( validator . isValid ( ""http : / / www . apache . org : 8 / path"" ) ) ;', 'assertTrue ( validator . isValid ( ""http : / / www . apache . org : 8 / path"" ) ) ;', 'assertTrue ( validator . isValid ( ""http : / / www . apache . org : 80 / path"" ) ) ;', 'new ResultPair ( ""www . google . com . "" , true ) ,', 'assertTrue ( validator . isValid ( ""http : / / www . apache . org : 80 / path"" ) ) ;']","['new Validator ( ""LV"" , 21 , ""LV \\ \\ d { 2 } [ A - Z ] { 4 } [ A - Z0 - 9 ] { 13 } "" ) ,', 'new Validator ( ""LV"" , 21 , ""LV \\ \\ d { 2 } [ A - Z ] { 4 } [ A - Z0 - 9 ] { 13 } "" ) ,', 'new Validator ( ""BH"" , 22 , ""BH \\ \\ d { 2 } [ A - Z ] { 4 } [ A - Z0 - 9 ] { 14 } "" ) ,', 'new Validator ( ""BH"" , 22 , ""BH \\ \\ d { 2 } [ A - Z ] { 4 } [ A - Z0 - 9 ] { 14 } "" ) ,', 'new Validator ( ""DE"" , 22 , ""DE \\ \\ d { 20 } "" ) ,', 'new Validator ( ""DE"" , 22 , ""DE \\ \\ d { 20 } "" ) ,', 'new Validator ( ""ME"" , 22 , ""ME \\ \\ d { 20 } "" ) ,', 'new Validator ( ""ME"" , 22 , ""ME \\ \\ d { 20 } "" ) ,', 'new Validator ( ""SM"" , 27 , ""SM \\ \\ d { 2 } [ A - Z ] { 1 } \\ \\ d { 10 } [ A - Z0 - 9 ] { 12 } "" ) ,', 'new Validator ( ""SM"" , 27 , ""SM \\ \\ d { 2 } [ A - Z ] { 1 } \\ \\ d { 10 } [ A - Z0 - 9 ] { 12 } "" ) ,']","['new Validator ( ""ST"" , 25 , ""ST \\ \\ d { 23 } "" ) ,', 'new Validator ( ""MR"" , 27 , ""MR \\ \\ d { 25 } "" ) ,', 'new Validator ( ""TN"" , 24 , ""TN59 \\ \\ d { 20 } "" ) ,', 'new Validator ( ""ST"" , 25 , ""ST \\ \\ d { 23 } "" ) ,', 'new Validator ( ""MR"" , 27 , ""MR13 \\ \\ d { 23 } "" ) ,', 'new Validator ( ""LC"" , 32 , ""LC \\ \\ d { 2 } [ A - Z ] { 4 } [ A - Z0 - 9 ] { 24 } "" ) ,', 'new Validator ( ""LC"" , 32 , ""LC \\ \\ d { 2 } [ A - Z ] { 4 } \\ \\ d { 24 } "" ) ,', 'new Validator ( ""TN"" , 24 , ""TN \\ \\ d { 22 } "" ) ,']","['new Validator ( ""IQ"" , 23 , ""IQ \\ \\ d { 2 } [ A - Z ] { 4 } \\ \\ d { 15 } "" ) ,', 'new Validator ( ""BY"" , 28 , ""BY \\ \\ d { 2 } [ A - Z0 - 9 ] { 4 } \\ \\ d { 4 } [ A - Z0 - 9 ] { 16 } "" ) ,', '""IQ98NBIQ850123456789012"" ,', '""BY00NBRB3600000000000Z00AB00"" ,']","['""SV62CENR0000000000000700025"" ,', '""UA213223130000026007233566001"" ,', '""SI56263300012039086"" ,', '""ST68000200010192194210112"" ,', '""BR1800360305000010009795493C1"" ,']","['long timestamp = download ( txtFile , ""http : / / data . iana . org / TLD / tlds - alpha - by - domain . txt"" , 0L ) ;', 'download ( htmlFile , ""https : / / www . iana . org / domains / root / db"" , timestamp ) ;', 'download ( htmlFile , ""http : / / www . iana . org / domains / root / db"" , timestamp ) ;', 'long timestamp = download ( txtFile , ""https : / / data . iana . org / TLD / tlds - alpha - by - domain . txt"" , 0L ) ;']","['""iinet"" ,', '""box"" ,', '""mutuelle"" ,', '""diy"" ,', '""observer"" ,', '""caseih"" ,', '""free"" ,', '""vanguard"" ,', '""hair"" ,', '""rmit"" ,']","['assertTrue ( validator . isValid ( ""abc . pvt"" ) ) ;', 'assertFalse ( validator . isValid ( ""abc . pvt"" ) ) ;', 'assertFalse ( validator . isValidGenericTld ( ""local"" ) ) ;', '}', 'assertTrue ( validator . isValidGenericTld ( ""pvt"" ) ) ;', 'assertTrue ( validator . isValidGenericTld ( ""local"" ) ) ;', 'DomainValidator . updateTLDOverride ( ArrayType . GENERIC PLUS , new String [ ] { ""local"" , ""pvt"" } ) ;', 'public void testVALIDATOR 412 ( ) {', 'assertFalse ( validator . isValidGenericTld ( ""pvt"" ) ) ;', 'assertFalse ( validator . isValid ( ""abc . local"" ) ) ;']","['"" ( ? : \\ \\ [ ( "" + IPV6 REGEX + "" ) \\ \\ ] | ( ? : ( ? : "" + USERINFO FIELD REGEX + "" ) ? ( [ "" + AUTHORITY CHARS REGEX + "" ] * ) ) ) ( : \\ \\ d * ) ? ( . * ) ? "" ;', '"" ( ? : \\ \\ [ ( "" + IPV6 REGEX + "" ) \\ \\ ] | ( ? : ( ? : "" + USERINFO FIELD REGEX + "" ) ? ( [ "" + AUTHORITY CHARS REGEX + "" ] * ) ) ) ( ? : : ( \\ \\ d * ) ) ? ( . * ) ? "" ;']","['long iPort = Integer . parseInt ( port ) ;', 'int iPort = Integer . parseInt ( port ) ;']","['if ( iPort < 0 | | iPort > 0xFFFF ) {', 'if ( iPort < 0 | | iPort > MAX UNSIGNED 16 BIT INT ) {', 'private static final int MAX UNSIGNED 16 BIT INT = 0xFFFF ;']","['new ResultPair ( "" : 65536"" , false ) ,']","['USERINFO CHARS REGEX + "" * @ "" ;', 'USERINFO CHARS REGEX + "" + "" +', 'USERINFO CHARS REGEX + "" + : "" +', '"" ( ? : : "" + USERINFO CHARS REGEX + "" * ) ? @ "" ;', 'assertTrue ( validator . isValid ( ""http : / / user @ www . apache . org : 80 / path"" ) ) ;']","['return genericCreditCardValidator ( MIN CC LENGTH , MAX CC LENGTH ) ;', 'public static CreditCardValidator genericCreditCardValidator ( ) {', 'public static CreditCardValidator genericCreditCardValidator ( int minLen , int maxLen ) {', '}', 'private static final int MIN CC LENGTH = 12 ;', 'private static final int MAX CC LENGTH = 19 ;', 'public static CreditCardValidator genericCreditCardValidator ( int length ) {', 'return new CreditCardValidator ( new CodeValidator [ ] { new CodeValidator ( "" ( \\ \\ d + ) "" , minLen , maxLen , LuhnCheckDigit . LUHN CHECK DIGIT ) } ) ;', 'return genericCreditCardValidator ( length , length ) ;', 'assertTrue ( s , ccv . isValid ( s ) ) ;']","['return genericCreditCardValidator ( MIN CC LENGTH , MAX CC LENGTH ) ;', 'return genericCreditCardValidator ( MIN CC LENGTH , MAX CC LENGTH ) ;', 'return genericCreditCardValidator ( length , length ) ;', 'return genericCreditCardValidator ( length , length ) ;', 'return new CreditCardValidator ( new CodeValidator [ ] { new CodeValidator ( "" ( \\ \\ d + ) "" , minLen , maxLen , LuhnCheckDigit . LUHN CHECK DIGIT ) } ) ;', 'return new CreditCardValidator ( new CodeValidator [ ] { new CodeValidator ( "" ( \\ \\ d + ) "" , minLen , maxLen , LuhnCheckDigit . LUHN CHECK DIGIT ) } ) ;', 'private static final int MAX CC LENGTH = 19 ;', 'private static final int MAX CC LENGTH = 19 ;', 'try {', 'try {']","['return new CreditCardValidator ( new CodeValidator [ ] { new CodeValidator ( "" ( \\ \\ d + ) "" , minLen , maxLen , LuhnCheckDigit . LUHN CHECK DIGIT ) } ) ;', 'return new CreditCardValidator ( new CodeValidator [ ] { new CodeValidator ( "" ( \\ \\ d + ) "" , minLen , maxLen , LUHN VALIDATOR ) } ) ;']","['final int maxLen ;', 'public static class CreditCardRange {', 'final String high ;', '} else if ( range . low . compareTo ( value ) < = 0', 'final int minLen ;', '}', 'range . high . compareTo ( value . substring ( 0 , range . high . length ( ) ) ) > = 0 ) {', 'return value ;', 'public CreditCardRange ( String low , String high , int minLen , int maxLen ) {', 'return validate ( value ) ! = null ;']","['final int maxLen ;', 'final int maxLen ;', 'if ( length > = range . minLen & & length < = range . maxLen ) {', 'this . minLen = - 1 ;', 'final int minLen ;', 'return true ;', 'final int minLen ;', '}', 'public CreditCardRange ( String low , String high , int [ ] lengths ) {', 'if ( valueLength = = length ) {']","['return new Integer ( ( int ) longValue ) ;', 'return Integer . valueOf ( ( int ) longValue ) ;']","['maxIndex & = ( index = = ( part . length - 1 ) ) ;', 'maxIndex & = ( index = = ( part . length - 1 ) ) ;', 'new ResultPair ( """" , true ) } ;', 'new ResultPair ( "" : / / "" , false ) } ;', 'new ResultPair ( "" : / / "" , false ) ,']","['if ( validOctets < IPV6 MAX HEX GROUPS & & !containsCompressedZeroes ) {', 'int emptyOctets = 0 ;', 'if ( index > octets . length - 1 | | index > 6 ) {', 'octetInt = Integer . parseInt ( octet , BASE 16 ) ;', 'if ( octet . contains ( "" . "" ) ) {', 'if ( index = = octets . length - 1 & & octet . contains ( "" . "" ) ) {', 'int emptyOctets = 0 ;', 'if ( validOctets > IPV6 MAX HEX GROUPS | | ( validOctets < IPV6 MAX HEX GROUPS & & !containsCompressedZeroes ) ) {', '}', 'return false ;']","['private static final String QUERY REGEX = "" ^ ( . * ) $"" ;', 'private static final String QUERY REGEX = "" ^ ( \\ \\ S * ) $"" ;', 'public void testValidator420 ( ) {', 'assertTrue ( validator . isValid ( ""http : / / example . com / serach ? address = Main + Avenue"" ) ) ;', 'assertTrue ( validator . isValid ( ""http : / / example . com / serach ? address = Main % 20Avenue"" ) ) ;', 'UrlValidator validator = new UrlValidator ( ) ;', '}', 'assertFalse ( validator . isValid ( ""http : / / example . com / serach ? address = Main Avenue"" ) ) ;']","['""3133EHHF3"" ,']","['""DK0009763344""', '""DK0009763344"" ,', '""dk0009763344"" ,', '""AU0000xvgza3"" ,']","['| |', '}', 'private ISINValidator ( boolean checkCountryCode ) {', 'private static final String [ ] SPECIALS = {', 'import java . io . Serializable ;', 'import java . util . Arrays ;', '""EZ"" , /', 'return checkCountryCode ? ISIN VALIDATOR TRUE : ISIN VALIDATOR FALSE ;', 'private boolean checkCode ( String code ) {', 'Arrays . binarySearch ( SPECIALS , code ) > = 0']","['""orientexpress"" ,', '""hotels"" ,', '""xn - - mgbai9azgqp6j"" ,', '""africa"" ,', '""rugby"" ,']","['if ( action = = null ) {', 'if ( action = = null ) {', 'return allResults ;', 'return allResults ;', 'String depend = dependencies . next ( ) ;', 'String depend = dependencies . next ( ) ;', 'boolean good =', 'synchronized ( dependencyList ) {', '}', 'boolean good =']","['import junit . framework . Assert ;', 'import org . junit . Assert ;']","['""chloe"" ,', '""search"" ,', '""mcd"" ,', '""xn - - 3hcrj9c"" ,', '""htc"" ,', '""xn - - 45br5cyl"" ,', '""montblanc"" ,', '""xn - - otu796d"" ,', '""mtpc"" ,', '""map"" ,']","['new Validator ( ""IQ"" , 23 , ""IQ \\ \\ d { 2 } [ A - Z ] { 4 } \\ \\ d { 15 } "" ) ,', 'new Validator ( ""IQ"" , 23 , ""IQ \\ \\ d { 2 } [ A - Z ] { 4 } \\ \\ d { 15 } "" ) ,', 'import org . apache . commons . validator . routines . IBANValidator . Validator ;', '@ Test', 'if ( vals [ i ] . countryCode . compareTo ( vals [ i - 1 ] . countryCode ) < = 0 ) {', 'IBANValidator validator = new IBANValidator ( ) ;', 'System . out . println ( ""Number of entries : "" + vals . length ) ;', '}', 'assertNotNull ( vals ) ;', 'import static org . junit . Assert . fail ;']","['new Validator ( ""SV"" , 28 , ""SV \\ \\ d { 2 } [ A - Z ] { 4 } \\ \\ d { 20 } "" ) ,', '""SV62CENR00000000000000700025"" ,', '""SV43ACAT00000000000000123123"" ,']","['""BY13NBRB3600900000002Z00AB00"" ,']","['""telecity"" ,', '""llc"" ,', '""jlc"" ,', '""charity"" ,', '""boots"" ,', '""inc"" ,', '""meo"" ,', '""panerai"" ,', '""iwc"" ,', '""sapo"" ,']","['final ArrayList classes = new ArrayList ( ) ;', 'final Class < ? > clazz = findClassLoader ( ) . loadClass ( className ) ;', 'URL url = ( URL ) enumResources . nextElement ( ) ;', 'final ArrayList < String > schemas = new ArrayList < String > ( ) ;', 'return ( String [ ] ) classes . toArray ( new String [ classes . size ( ) ] ) ;', 'Enumeration < URL > enumResources ;', 'final ArrayList schemas = new ArrayList ( ) ;', 'URL url = enumResources . nextElement ( ) ;', 'Enumeration enumResources ;', '@ SuppressWarnings ( ""unused"" )']","['private final Stack deleteStack = new Stack ( ) ;', 'this . removeFile ( this . deleteStack . pop ( ) ) ;', 'this . children = new HashMap ( ) ;', 'this . children = new HashMap < FileName , Object > ( ) ;', 'private final Map monitorMap = new HashMap ( ) ;', 'private final Stack < FileObject > deleteStack = new Stack < FileObject > ( ) ;', '( FileMonitorAgent ) this . monitorMap . get ( parent . getName ( ) ) ;', 'private final Stack < FileObject > addStack = new Stack < FileObject > ( ) ;', 'private Map children ;', 'private Map < FileName , Object > children ;']","['protected abstract void appendRootUri ( StringBuffer buffer , boolean addPassword ) ;', 'final StringBuilder buffer = new StringBuilder ( ) ;', 'final String absPath , FileType type )', 'protected abstract void appendRootUri ( StringBuilder buffer , boolean addPassword ) ;', 'final StringBuffer buffer = new StringBuffer ( ) ;', 'public AbstractFileName ( final String scheme , final String absPath , FileType type )', 'public AbstractFileName ( final String scheme ,']","['Map < FileName , FileObject > files = filesystemCache . get ( filesystem ) ;', 'filesystemCache . putIfAbsent ( filesystem , new ConcurrentHashMap < FileName , FileObject > ( ) ) ;', 'filesystemCache . put ( filesystem , files ) ;', 'protected ConcurrentMap < FileName , FileObject > getOrCreateFilesystemCache ( FileSystem filesystem )', 'protected Map < FileName , FileObject > getOrCreateFilesystemCache ( FileSystem filesystem )', 'new ConcurrentHashMap < FileSystem , ConcurrentMap < FileName , FileObject > > ( 10 ) ;', 'private final Map < FileSystem , Map < FileName , FileObject > > filesystemCache =', 'import java . util . concurrent . ConcurrentHashMap ;', 'new HashMap < FileSystem , Map < FileName , FileObject > > ( 10 ) ;', 'files = filesystemCache . get ( filesystem ) ;']","['}', 'private AtomicInteger openStreams = new AtomicInteger ( 0 ) ;', 'openStreams + + ;', 'int count ;', '{', 'count = openStreams . get ( ) ;', 'return openStreams > 0 ;', 'return ;', 'openStreams - - ;', 'if ( count = = 1 )']","['useCount - - ;', 'private AtomicLong useCount = new AtomicLong ( 0 ) ;', 'private long useCount ;', 'return useCount . get ( ) < 1 ;', 'return useCount < 1 ;', 'useCount . decrementAndGet ( ) ;', 'useCount + + ;', 'import java . util . concurrent . atomic . AtomicLong ;', 'useCount . incrementAndGet ( ) ;']","['softRefReleaseThread . requestEnd = true ;', 'thread . requestEnd = true ;', 'softRefReleaseThread = new SoftRefReleaseThread ( ) ;', 'newThread . start ( ) ;', 'while ( iterKeys . hasNext ( ) )', 'newThread = new SoftRefReleaseThread ( ) ;', 'throw new IllegalStateException (', 'log . debug ( ""putFile : "" + file . getName ( ) ) ;', 'closeFilesystem = files . size ( ) < 1 ;', '} while ( softRefReleaseThread . compareAndSet ( null , newThread ) ) ;']","['catch ( FileSystemException e )', 'key = createURI ( true , true ) ;', 'int ret = getRootURI ( ) . compareTo ( name . getRootURI ( ) ) ;', 'if ( o = = null | | getClass ( ) ! = o . getClass ( ) )', 'return buffer . toString ( ) ;', 'if ( this = = o )', 'appendRootUri ( buffer , true ) ;', 'return ( getKey ( ) . equals ( that . getKey ( ) ) ) ;', 'buffer . append ( getPath ( ) ) ;', 'return false ;']","['& & baseFile . getName ( ) . getType ( ) = = FileType . FILE )', 'if ( base ! = null & & VFS . isUriStyle ( ) & & base . isFile ( ) )', 'if ( base ! = null & & VFS . isUriStyle ( ) & & base . getType ( ) = = FileType . FILE )', '& & baseFile . getName ( ) . isFile ( ) )']","['private final AtomicReference < SoftRefReleaseThread > softRefReleaseThread = new AtomicReference < SoftRefReleaseThread > ( ) ;', 'private final AtomicReference < SoftRefReleaseThread > softRefReleaseThread =', 'new AtomicReference < SoftRefReleaseThread > ( ) ;']","['if ( ( iterFileNames % getChecksPerRun ( ) ) = = 0 )', 'if ( iterFileNames % getChecksPerRun ( ) = = 0 )']","['if ( !getFileSystem ( ) . hasCapability ( Capability . LIST CHILDREN ) )', 'children [ i ] = fs . getFileSystemManager ( ) . resolveName ( name , file , NameScope . CHILD ) ;', '& & getFileSystem ( ) . hasCapability ( Capability . GET LAST MODIFIED ) )', 'if ( bAppend & & !fs . hasCapability ( Capability . APPEND CONTENT ) )', 'return getFileSystem ( ) . getFileSystemManager ( ) . getFileContentInfoFactory ( ) ;', 'return fs = = newfile . getFileSystem ( ) ;', 'return getFileSystem ( ) = = newfile . getFileSystem ( ) ;', 'if ( !fs . hasCapability ( Capability . LIST CHILDREN ) )', 'if ( !getFileSystem ( ) . hasCapability ( Capability . RANDOM ACCESS READ ) )', 'if ( !fs . hasCapability ( Capability . RANDOM ACCESS READ ) )']","['if ( o = = null | | getClass ( ) ! = o . getClass ( ) )', 'return this . getInteger ( opts , TIMEOUT ) ;', 'public File [ ] getIdentities ( FileSystemOptions opts )', 'this . setParam ( opts , TIMEOUT , timeout ) ;', 'if ( this = = o )', 'this . setParam ( opts , UserInfo . class . getName ( ) , info ) ;', 'public Boolean getUserDirIsRoot ( FileSystemOptions opts )', 'return this . proxyType . hashCode ( ) ;', 'private static final SftpFileSystemConfigBuilder BUILDER = new SftpFileSystemConfigBuilder ( ) ;', 'return this . proxyType . compareTo ( pType . proxyType ) ;']","['}', 'catch ( final Exception exc )', 'throw new FileSystemException ( ""vfs . provider / set - executable . error"" , name , exc ) ;', 'if ( exists ( ) )', 'return false ;', '{', 'return doSetExecutable ( readable , ownerOnly ) ;', 'protected boolean doSetExecutable ( boolean writable , boolean ownerOnly ) throws Exception', 'protected boolean doSetWritable ( boolean writable , boolean ownerOnly ) throws Exception', 'throw new FileSystemException ( ""vfs . provider / set - writeable . error"" , name , exc ) ;']","['catch ( final JSchException e )', 'jsch . addIdentity ( privateKeyFile . getAbsolutePath ( ) ) ;', 'knownHostsFile . getAbsolutePath ( ) , e ) ;', '{', 'jsch . setKnownHosts ( knownHostsFile . getAbsolutePath ( ) ) ;', 'addIdentities ( jsch , sshDir , identities ) ;', 'String preferredAuthentications = builder .', 'addIndentity ( jsch , privateKeyFile ) ;', 'getPreferredAuthentications ( fileSystemOptions ) ;', 'catch ( final JSchException e )']","['return this . path . getName ( ) . toString ( ) . hashCode ( ) ;', 'public boolean equals ( final Object o )', '}', 'if ( null = = o )', 'return false ;', '{', 'protected boolean doIsSameFile ( final FileObject destFile ) throws FileSystemException', '@ Override', 'final HdfsFileObject other = ( HdfsFileObject ) o ;', 'throw new UnsupportedOperationException ( ) ;']","['}', '}', 'else', 'file . refresh ( ) ;', 'FileObject file = this . getFileFromCache ( name ) ;', 'if ( getFileSystemManager ( ) . getCacheStrategy ( ) . equals ( CacheStrategy . ON RESOLVE ) )', '{', 'file = this . getFileFromCache ( name ) ;', 'this . putFileToCache ( file ) ;', 'else']","['jsch . addIdentity ( privateKeyFile . getAbsolutePath ( ) ) ;', 'addIndentity ( jsch , privateKeyFile , password ) ;', 'addIdentities ( jsch , sshDir , identities ) ;', 'private static void addIndentity ( final JSch jsch , final File privateKeyFile , char [ ] password ) throws FileSystemException', '{', 'addIdentities ( jsch , sshDir , identities , password ) ;', 'private static void addIndentity ( final JSch jsch , final File privateKeyFile ) throws FileSystemException', 'jsch . addIdentity ( privateKeyFile . getAbsolutePath ( ) , password = = null ? null : new String ( password ) ) ;', 'private static void addIdentities ( final JSch jsch , final File sshDir , final File [ ] identities ) throws FileSystemException', 'private static void addIdentities ( final JSch jsch , final File sshDir , final File [ ] identities , char [ ] password ) throws FileSystemException']","['protected RandomAccessContent doGetRandomAccessContent ( final RandomAccessMode mode ) throws Exception', 'if ( status = = HttpURLConnection . HTTP OK )', 'method . setFollowRedirects ( this . getFollowRedirect ( ) ) ;', 'protected RandomAccessContent doGetRandomAccessContent ( final RandomAccessMode mode ) throws Exception', 'public HttpInputStream ( final GetMethod method )', 'method . setFollowRedirects ( this . getFollowRedirect ( ) ) ;', 'final int status = this . getHeadMethod ( ) . getStatusCode ( ) ;', 'public HttpInputStream ( final GetMethod method )', 'else if ( status = = HttpURLConnection . HTTP NOT FOUND', 'final int status = this . getHeadMethod ( ) . getStatusCode ( ) ;']","['if ( children = = null )', 'if ( newType . equals ( FileType . IMAGINARY ) )', 'return exists ( ) ? doSetExecutable ( readable , ownerOnly ) : false ;', '}', 'protected abstract FileType doGetType ( ) throws Exception ;', 'if ( childName ! = null & & newType ! = null )', 'if ( content = = null )', 'if ( this = = fs . getRoot ( ) )', 'protected void endOutput ( ) throws Exception', 'throw exc ;']","['filesCache . close ( ) ;', 'private final VirtualFileProvider vfsProvider = new VirtualFileProvider ( ) ;', 'private final VirtualFileProvider vfsProvider = new VirtualFileProvider ( ) ;', 'closeComponent ( filesCache ) ;', 'private final DefaultVfsComponentContext context = new DefaultVfsComponentContext (', 'filesCache = null ;', 'private FileProvider defaultProvider ;', 'operationProviders . clear ( ) ;', 'private FileReplicator fileReplicator ;', 'map . clear ( ) ;']","['private final VirtualFileProvider vfsProvider = new VirtualFileProvider ( ) ;', 'operationProviders . clear ( ) ;', 'defaultProvider = null ;', 'defaultProvider = null ;', 'fileReplicator = null ;', 'private VirtualFileProvider vfsProvider ;', 'closeComponent ( filesCache ) ;', 'vfsProvider = new VirtualFileProvider ( ) ;', 'filesCache = null ;', 'log . warn ( ""DefaultFilesystemManager . close : not all components are closed : "" + components . toString ( ) ) ;']","['getAbstractFileSystem ( ) . close ( ) ;', '}', 'protected void doDetach ( ) throws Exception {', '@ Override', 'protected void doAttach ( ) throws Exception {', 'getAbstractFileSystem ( ) . getZipFile ( ) ;']","['final int newSize = this . file . getData ( ) . size ( ) + len ;', 'final int newSize = size + len ;', 'System . arraycopy ( b , off , this . file . getData ( ) . getContent ( ) , size , len ) ;', 'final int size = data . size ( ) ;', 'final int size = this . file . getData ( ) . size ( ) ;', 'final RamFileData data = this . file . getData ( ) ;', 'System . arraycopy ( b , off , data . getContent ( ) , size , len ) ;']","['final int maxSize = RamFileSystemConfigBuilder . getInstance ( ) . getMaxSize ( afsOptions ) ;', 'final long maxSize = RamFileSystemConfigBuilder . getInstance ( ) . getLongMaxSize ( afsOptions ) ;', 'int size = 0 ;', 'long size ( )', 'int size ( )', 'long size = 0 ;', 'return getInteger ( opts , MAX SIZE KEY , Integer . MAX VALUE ) ;', 'public void setMaxSize ( final FileSystemOptions opts , final long sizeInBytes )', 'setParam ( opts , MAX SIZE KEY , Integer . valueOf ( sizeInBytes ) ) ;', 'setParam ( opts , MAX SIZE KEY , Long . valueOf ( sizeInBytes ) ) ;']","['RamFileSystemConfigBuilder . getInstance ( ) . setMaxSize ( zeroSized , 0 ) ;', 'RamFileSystemConfigBuilder . getInstance ( ) . setMaxSize ( smallSized , 10L ) ;', 'RamFileSystemConfigBuilder . getInstance ( ) . setMaxSize ( smallSized , 10 ) ;', 'RamFileSystemConfigBuilder . getInstance ( ) . setMaxSize ( zeroSized , 0L ) ;']","['final FileObject fo4 = manager . resolveFile ( ""ram : / "" , smallSized ) ;', 'FileSystemOptions smallSizedFso = new FileSystemOptions ( ) ;', 'FileSystemOptions zeroSized = new FileSystemOptions ( ) ;', 'FileSystemOptions zeroSizedFso = new FileSystemOptions ( ) ;', 'RamFileSystemConfigBuilder . getInstance ( ) . setMaxSize ( smallSized , 10L ) ;', 'final FileObject fo3 = manager . resolveFile ( ""ram : / fo3"" , smallSizedFso ) ;', 'final FileObject fo3 = manager . resolveFile ( ""ram : / fo3"" , smallSized ) ;', 'RamFileSystemConfigBuilder . getInstance ( ) . setMaxSize ( smallSizedFso , 10L ) ;', 'final FileObject root = manager . resolveFile ( ""ram : /', 'FileSystemOptions defaultRamFso = new FileSystemOptions ( ) ;']","['public void testSmallFS ( ) throws Exception', '@ Test', 'final FileObject fo3 = manager . resolveFile ( ""ram : / fo3"" , smallSizedFso ) ;', 'public void testFSOptions ( ) throws Exception', '}', 'maxFilesystemSize = RamFileSystemConfigBuilder . getInstance ( ) . getLongMaxSize ( fsOptions ) ;', '{', 'assertEquals ( ""Filesystem option maxSize must be set"" , 10 , maxFilesystemSize ) ;', 'FileSystemOptions fsOptions = fo1 . getFileSystem ( ) . getFileSystemOptions ( ) ;', 'assertEquals ( ""Filesystem option maxSize must be unlimited"" , Long . MAX VALUE , maxFilesystemSize ) ;']","['if ( iterFileNames % getChecksPerRun ( ) = = 0 )', 'if ( ( ( iterFileNames + 1 ) % getChecksPerRun ( ) ) = = 0 )']","['child . createFolder ( ) ;', 'finally', 'child . createFile ( ) ;', 'fs . removeListener ( child , listener ) ; }', 'child . copyFrom ( otherChild , Selectors . SELECT SELF ) ;', 'child . createFolder ( ) ;', 'listener . addCreateEvent ( ) ;', 'child . createFile ( ) ;', 'listener . assertFinished ( ) ;', 'try']","['return getBoolean ( opts , USER DIR IS ROOT ) ;', 'return getBoolean ( opts , USER DIR IS ROOT , Boolean . TRUE ) ;']","['E value = ( E ) getParam ( opts , name ) ;', 'E value = ( E ) getParam ( opts , name ) ;', 'private final static Log LOG = LogFactory . getLog ( StaticUserAuthenticator . class ) ;', 'private final static Log LOG = LogFactory . getLog ( StaticUserAuthenticator . class ) ;', '+ "" does not support authentication data type \'"" + type', '+ "" does not support authentication data type \'"" + type', '}', '}', 'if ( LOG . isDebugEnabled ( ) )', 'if ( LOG . isDebugEnabled ( ) )']","['final FileInfo baseInfo = buildExpectedStructure ( ) ;', 'final FileInfo expectedFileInfo = buildExpectedStructure ( ) ;', 'assertSameContent ( baseInfo , baseFolder ) ;', 'assertSameContent ( expectedFileInfo , actualFolder ) ;', 'final FileObject baseFolder = getReadFolder ( ) ;', 'final FileObject actualFolder = getReadFolder ( ) ;']","['return channel ;', 'if ( fileNameEncoding ! = null ) {', 'try {', 'String fileNameEncoding = SftpFileSystemConfigBuilder . getInstance ( ) . getFileNameEncoding (', 'channel . setFilenameEncoding ( fileNameEncoding ) ;', 'return channel ;', '}', '} catch ( SftpException e ) {', 'getFileSystemOptions ( ) ) ;', 'throw new FileSystemException ( ""vfs . provider . sftp / filename - encoding . error"" , fileNameEncoding ) ;']","['exc = new FileSystemException ( ""vfs . provider / close . error"" , name , e ) ;', 'throw new FileSystemException ( ""vfs . provider / read - not - readable . error"" , fileName ) ;', 'throw new FileSystemException ( ""vfs . provider / create - file . error"" , name , e ) ;', 'throw new org . apache . commons . vfs2 . FileNotFoundException ( fileName , exc ) ;', 'throw new FileSystemException ( ""vfs . provider / list - children . error"" , exc , name ) ;', 'throw new FileSystemException ( ""vfs . provider / create - folder - mismatched - type . error"" , fileName ) ;', 'throw new FileSystemException ( ""vfs . provider / set - executable . error"" , name , exc ) ;', 'throw new FileSystemException ( ""vfs . provider / set - writeable . error"" , fileName , exc ) ;', 'throw new FileSystemException ( ""vfs . provider / create - folder - mismatched - type . error"" , name ) ;', 'throw new FileSystemException ( ""vfs . provider / list - children . error"" , exc , fileName ) ;']","['boolean isFile ( ) throws FileSystemException ;', 'boolean isFile ( ) throws FileSystemException ;', 'boolean isAttached ( ) ;', 'boolean isAttached ( ) ;', 'FileObject [ ] findFiles ( FileSelector selector ) throws FileSystemException ;', 'FileObject [ ] findFiles ( FileSelector selector ) throws FileSystemException ;', 'boolean setExecutable ( boolean executable , boolean ownerOnly ) throws FileSystemException ;', 'int delete ( FileSelector selector ) throws FileSystemException ;', 'boolean isExecutable ( ) throws FileSystemException ;', 'boolean isExecutable ( ) throws FileSystemException ;']","['return decoratedFileObject . isFolder ( ) ;', 'return decoratedFileObject . isFolder ( ) ;', 'return decoratedFileObject . isExecutable ( ) ;', 'return decoratedFileObject . isExecutable ( ) ;', '}', '}', 'public void refresh ( ) throws FileSystemException', 'public void refresh ( ) throws FileSystemException', 'return decoratedFileObject . getFileOperations ( ) ;', 'return decoratedFileObject . getFileOperations ( ) ;']","['String getPublicURIString ( ) ;', 'return decoratedFileObject . getPublicURIString ( ) ;', '@ Override', '}', 'public String getPublicURIString ( ) {', '}', 'return fileName . getFriendlyURI ( ) ;', '{', 'public String getPublicURIString ( )', '@ Override']","['private final FSDataInputStream fis ;', 'private final FSDataInputStream fis ;']","['public void writeBytes ( final String s ) throws IOException', 'import org . apache . commons . vfs2 . provider . AbstractRandomAccessContent ;', 'public void write ( final byte [ ] b ) throws IOException', 'import org . apache . commons . vfs2 . util . RandomAccessMode ;', 'import org . apache . commons . vfs2 . RandomAccessContent ;', 'super ( RandomAccessMode . READ ) ;', '}', 'public class HdfsRandomAccessContent extends AbstractRandomAccessContent', 'public void writeDouble ( final double v ) throws IOException', '@ Override']","['import org . apache . commons . collections . map . AbstractLinkedMap ;', 'final FileObject file = linkEntry . getValue ( ) ;', 'private class MyLRUMap extends LRUMap / * implements Map < FileName , FileObject > * /', 'private class MyLRUMap extends LRUMap < FileName , FileObject >', '@ SuppressWarnings ( ""unchecked"" )', 'protected boolean removeLRU ( final AbstractLinkedMap . LinkEntry < FileName , FileObject > linkEntry )', 'protected boolean removeLRU ( final AbstractLinkedMap . LinkEntry linkEntry )', 'import org . apache . commons . collections4 . map . LRUMap ;', 'import org . apache . commons . collections . map . LRUMap ;', 'import org . apache . commons . collections4 . map . AbstractLinkedMap ;']","['if ( removeFile ( key ) )', 'if ( key ! = null & & removeFile ( key ) )', '}', 'close ( key . getFileSystem ( ) ) ;', '{', 'if ( key ! = null )', 'close ( key . getFileSystem ( ) ) ;']","['fs = org . apache . hadoop . fs . FileSystem . get ( conf ) ;', 'conf . set ( FileSystem . FS DEFAULT NAME KEY , hdfsUri ) ;', 'conf . set ( org . apache . hadoop . fs . FileSystem . FS DEFAULT NAME KEY , hdfsUri ) ;', 'fs = FileSystem . get ( conf ) ;']","['boolean useCache = ( null ! = getContext ( ) . getFileSystemManager ( ) . getFilesCache ( ) ) ;', 'boolean useCache = null ! = getContext ( ) . getFileSystemManager ( ) . getFilesCache ( ) ;']","['boolean useCache = null ! = getContext ( ) . getFileSystemManager ( ) . getFilesCache ( ) ;', 'final boolean useCache = null ! = getContext ( ) . getFileSystemManager ( ) . getFilesCache ( ) ;']","['public static FTPClient createConnection ( final String hostname , final int port , char [ ] username , char [ ] password ,', 'protected ConnectionFactory ( final B builder )', 'protected ConnectionFactory ( B builder )', 'private FtpConnectionFactory ( final FtpFileSystemConfigBuilder builder )', 'private FtpConnectionFactory ( FtpFileSystemConfigBuilder builder )', 'public static FTPClient createConnection ( final String hostname , final int port , final char [ ] username , final char [ ] password ,', 'protected FtpFileSystemConfigBuilder ( String prefix ) {', 'protected FtpFileSystemConfigBuilder ( final String prefix ) {', 'public static FTPSClient createConnection ( final String hostname , final int port , char [ ] username , char [ ] password ,', 'public static FTPSClient createConnection ( final String hostname , final int port , final char [ ] username , final char [ ] password ,']","['final Object convertedValues = java . lang . reflect . Array . newInstance ( type , ctx . values . length ) ;', 'final Object convertedValues = Array . newInstance ( type , ctx . values . length ) ;']","['baseDir = getCanonicalFile ( new File ( baseDirProp ) ) ;', 'baseDir = getCanonicalFile ( new File ( baseDirProp ) ) ;', 'final UserAuthenticationData . Type type = new UserAuthenticationData . Type ( ""JUNIT"" ) ;', 'import static org . junit . Assert . assertSame ;', 'import static org . junit . Assert . * ;', 'final UserAuthenticationData . Type type = new UserAuthenticationData . Type ( ""JUNIT"" ) ;', 'import static org . junit . Assert . assertArrayEquals ;', 'import static org . junit . Assert . assertNull ;', 'import static org . junit . Assert . * ;', 'import static org . junit . Assert . assertNotEquals ;']","['tempDirMessageLogged = true ;', 'protected String createFilename ( final String baseName )', 'protected String createFilename ( final String baseName )', 'tempDirMessageLogged = true ;', 'synchronized ( copies )', 'synchronized ( copies )', 'addFile ( file ) ;', 'addFile ( file ) ;', 'protected void removeFile ( final Object file )', 'protected void removeFile ( final Object file )']","['filecount = new Random ( ) . nextInt ( ) & MASK ;', 'filecount = random . nextInt ( ) & MASK ;', 'private static final Random random = new Random ( ) ;']","['import org . apache . commons . lang3 . SerializationUtils ;', '@ Test', 'assertEquals ( expectedFixture . getFileType ( ) , actualFixture . getFileType ( ) ) ;', '}', 'final FileType actualFileType = ( FileType ) SerializationUtils . deserialize ( serialized ) ;', 'private final FileType fileType = FileType . FILE ;', 'public void testSerializationFileOrFolder ( ) {', 'import java . io . Serializable ;', 'test ( FileType . FOLDER ) ;', 'private static final long serialVersionUID = 1L ;']","['@ Override', '@ Override']","['( new Shell ( ) ) . go ( ) ;', 'new Shell ( ) . go ( ) ;', 'return count < 0 ? - 1 : ( buf [ 0 ] & 0xFF ) ;', 'return count < 0 ? - 1 : buf [ 0 ] & 0xFF ;']","['import org . junit . Assert ;', 'super . tearDown ( ) ;', '}', 'import org . junit . Assert ;', 'return SystemUtils . IS OS WINDOWS & & this . getFileSystem ( ) instanceof LocalFileSystem ;', 'final FileObject file = scratchFolder . resolveFile ( FILENAME ) ;', 'private boolean isWindows ( )', 'public static final String FILENAME = ""permission . txt"" ;', '{', 'final FileObject scratchFolder = getWriteFolder ( ) ;']","['} ;', 'result . add ( new Resource ( name , baseFile , file ) . getURL ( ) ) ;', 'return null ;', 'final List < URL > result = new ArrayList < URL > ( 2 ) ;', '}', 'if ( file . exists ( ) ) {', 'public URL nextElement ( )', 'return Collections . enumeration ( result ) ;', '{', 'for ( FileObject baseFile : resources ) {']","['final VFSClassLoader loader = new VFSClassLoader ( search , getManager ( ) ) ;', 'throws IOException', 'super ( null ) ;', 'import java . io . IOException ;', 'import java . util . Collections ;', 'return null ;', 'fail ( ""Not intended to be used for class loading . "" ) ;', 'return Collections . enumeration ( Collections . < URL > emptyList ( ) ) ;', '}', 'protected Class < ? > findClass ( String name )']","['public String getFileNameEncoding ( final FileSystemOptions opts )', 'public String getFileNameEncoding ( final FileSystemOptions opts )', 'public void setFileNameEncoding ( final FileSystemOptions opts , final String fileNameEncoding )', 'public void setFileNameEncoding ( final FileSystemOptions opts , final String fileNameEncoding )']","['client . setProxy ( proxy ) ;', 'if ( proxy ! = null )', '}', 'import java . net . Proxy ;', '{', 'final Proxy proxy = builder . getProxy ( fileSystemOptions ) ;', 'setParam ( opts , PROXY , proxy ) ;', 'public void setProxy ( final FileSystemOptions opts , Proxy proxy )', 'return ( Proxy ) this . getParam ( opts , PROXY ) ;', 'private static final String PROXY = PREFIX + "" . PROXY"" ;']","['finally', 'byte [ ] buf = new byte [ 25 ] ;', 'public void testReadEmptyMultipleEOF ( ) throws Exception', 'assertEquals ( 20 , instr . read ( buf ) ) ;', 'try', 'final FileObject file = getReadFolder ( ) . resolveFile ( ""empty . txt"" ) ;', 'final FileObject file = getReadFolder ( ) . resolveFile ( ""file1 . txt"" ) ;', 'assertEquals ( ""Expecting 20 bytes test - data file1 . txt"" , 20 , file . getContent ( ) . getSize ( ) ) ;', '}', '{']","['if ( key ! = null & & removeFile ( key ) )', 'if ( key ! = null & & removeFile ( key ) )', '{', '}', 'children = null ;', 'if ( !isWriteable ( ) )', '}', '{', 'for ( int iterChildren = 0 ; iterChildren < children . length ; iterChildren + + )', 'if ( children ! = null )']","['connectionMgrParams . setConnectionTimeout ( builder . getConnectionTimeout ( fileSystemOptions ) ) ;', 'connectionMgrParams . setSoTimeout ( builder . getSoTimeout ( fileSystemOptions ) ) ;', 'return getInteger ( opts , HttpConnectionManagerParams . CONNECTION TIMEOUT , DEFAULT CONNECTION TIMEOUT ) ;', 'public void setSoTimeout ( final FileSystemOptions opts , final int soTimeout )', '}', 'public int getSoTimeout ( final FileSystemOptions opts )', 'private static final int DEFAULT SO TIMEOUT = 0 ;', 'private static final int DEFAULT CONNECTION TIMEOUT = 0 ;', '{', 'setParam ( opts , HttpConnectionManagerParams . CONNECTION TIMEOUT , Integer . valueOf ( connectionTimeout ) ) ;']","['Assert . assertFalse ( fo . exists ( ) ) ;', 'import org . apache . commons . vfs2 . util . Os ;', 'final FileObject file = createTestFile ( hdfs ) ;', 'conf . set ( ""dfs . datanode . data . dir . perm"" , String . format ( "" % 03o"" , newPermission ) ) ;', 'Assert . assertNotNull ( fo ) ;', 'Assert . assertEquals ( file1 , file2 ) ;', 'Assert . assertEquals ( file , file2 ) ;', 'try', 'conf . set ( ""dfs . datanode . data . dir . perm"" , String . format ( "" % 03o"" , newPermission ) ) ;', 'final BufferedReader bri = new BufferedReader ( new InputStreamReader ( p . getInputStream ( ) ) ) ;']","[""if ( startPos = = maxlen & & name . length ( ) > startPos & & name . charAt ( startPos + 1 ) = = ' / ' )"", ""if ( startPos = = maxlen & & name . length ( ) > ( startPos + 1 ) & & name . charAt ( startPos + 1 ) = = ' / ' )"", 'if ( Os . isFamily ( Os . OS FAMILY WINDOWS ) )', 'import org . apache . commons . vfs2 . util . Os ;', '}', '{', 'testSuite . addTests ( WindowsFileNameTests . class ) ;', 'catch ( FileSystemException ex )', 'try', 'import org . apache . commons . vfs2 . provider . local . WindowsFileName ;']","['if ( remoteVerification ! = null ) {', 'client . setRemoteVerificationEnabled ( remoteVerification . booleanValue ( ) ) ;', 'Boolean remoteVerification = builder . getRemoteVerification ( fileSystemOptions ) ;', '}', 'private static final String USER DIR IS ROOT = PREFIX + "" . USER DIR IS ROOT"" ;', 'return getBoolean ( opts , REMOTE VERIFICATION ) ;', '}', 'private static final String REMOTE VERIFICATION = PREFIX + "" . REMOTE VERIFICATION"" ;', '}', '{']","['finished = true ;', 'if ( finished . get ( ) )', 'super . close ( ) ;', 'try', 'if ( finished )', 'exc = ioe ;', 'private boolean finished ;', '}', 'import java . util . concurrent . atomic . AtomicBoolean ;', 'catch ( final IOException ioe )']","['import org . apache . commons . io . FileUtils ;', 'FileUtils . cleanDirectory ( tempDir ) ;']","['public void touchFile ( final FileObject file )', '{', 'import org . apache . commons . vfs2 . FileObject ;', '}', 'public void touchFile ( final FileObject file )', 'filesystemCache . putIfAbsent ( filesystem , new ConcurrentHashMap < FileName , FileObject > ( 200 , 0 . 75f , 8 ) ) ;', 'return files . get ( name ) ;', 'return null ;', 'final Map < FileName , FileObject > files = getOrCreateFilesystemCache ( filesystem ) ;', 'return files . get ( name ) ;']","['return manager . toFileObject ( testDir ) ;', 'return new DefaultFilesCache ( ) ;', '}', 'public class DefaultFilesCacheTestCase', '@ Override', 'package org . apache . commons . vfs2 . cache ;', 'final File testDir = AbstractVfsTestCase . getTestDirectory ( ) ;', 'public FilesCache getFilesCache ( )', 'import org . apache . commons . vfs2 . test . ProviderTestConfig ;', 'import java . io . File ;']","['final FileSystem fs = fo . getFileSystem ( ) ;', 'final FileSystem fs = fo . getFileSystem ( ) ;', '}', '}', 'FilesCache cache = getManager ( ) . getFilesCache ( ) ;', 'FilesCache cache = getManager ( ) . getFilesCache ( ) ;', 'return fo . hashCode ( ) ;', 'return fo . hashCode ( ) ;', 'cache . clear ( fo1 . getFileSystem ( ) ) ;', 'cache . clear ( fo1 . getFileSystem ( ) ) ;']","['threadData . set ( null ) ;', 'threadData . remove ( ) ;']","['FileSystemConfigBuilder getFileSystemConfigBuilder ( final String scheme ) throws FileSystemException ;', 'Collection < Capability > getProviderCapabilities ( String scheme ) throws FileSystemException ;', 'void setLogger ( final Log log ) ;', 'FileSystemConfigBuilder getFileSystemConfigBuilder ( String scheme ) throws FileSystemException ;', 'FileName resolveName ( final FileName root , String name , NameScope scope )', 'void addOperationProvider ( String scheme , FileOperationProvider operationProvider )', 'boolean hasProvider ( final String scheme ) ;', 'FileName resolveName ( FileName root , String name , NameScope scope )', 'void addOperationProvider ( final String scheme , final FileOperationProvider operationProvider )', 'void addOperationProvider ( String [ ] schemes , FileOperationProvider operationProvider )']","['@ Test', 'public void testResolveFileObjectNullAbsolute ( ) throws FileSystemException', '}', '@ Test ( expected = NullPointerException . class )', 'package org . apache . commons . vfs2 . impl . test ;', 'public void testResolveFileRelativeThrows ( ) throws FileSystemException', 'public void testResolveFileObjectRelativeThrows ( ) throws FileSystemException', 'String absolute = new File ( "" / "" ) . getAbsoluteFile ( ) . toURI ( ) . toString ( ) ;', 'public void testResolveFileAbsoluteThrows ( ) throws FileSystemException', 'import java . io . File ;']","['if ( null = = o )', 'return true ;', 'public int hashCode ( )', 'public boolean equals ( final Object o )', '}', 'protected boolean doIsSameFile ( final FileObject destFile ) throws FileSystemException', 'if ( o = = this )', '{', 'if ( other . path . equals ( this . path ) )', 'return false ;']","['while ( !this . deleteStack . empty ( ) )', 'while ( !this . deleteStack . empty ( ) )', 'this . removeFile ( this . deleteStack . pop ( ) ) ;', 'this . removeFile ( this . deleteStack . pop ( ) ) ;', '{', '{', '}', '}', 'final boolean rc = testFile . setLastModified ( value ) ;', 'public void testChildFileRecreated ( ) throws Exception']","['while ( getThreadData ( ) . getInstrsSize ( ) > 0 )', 'streams . setOutstr ( null ) ;', 'this . getThreadData ( ) . addRastr ( rac ) ;', 'return true ;', 'getThreadData ( ) . removeRastr ( rac ) ;', 'while ( streams . getInstrsSize ( ) > 0 )', 'this . getThreadData ( ) . addInstr ( wrappedInstr ) ;', 'try', '}', 'streams . setOutstr ( wrapped ) ;']","['import java . util . Collections ;', 'import java . util . Arrays ;', 'protected < E extends Enum < E > > E getEnum ( final Class < E > enumClass , final FileSystemOptions opts , final String name , final E defaultValue )', 'final String name , final E defaultValue )', 'protected < E extends Enum < E > > E getEnum ( final Class < E > enumClass , final FileSystemOptions opts ,', 'for ( final UserAuthenticationData . Type type : types )', 'for ( final UserAuthenticationData . Type type : types )', 'private final static Log LOG = LogFactory . getLog ( StaticUserAuthenticator . class ) ;', 'private static final Log LOG = LogFactory . getLog ( StaticUserAuthenticator . class ) ;', 'public String getPublicURIString ( ) {']","['Assert . fail ( String . format ( "" % s expected = % d , actual = % d , delta = % d"" , new Long ( expected ) , new Long ( actual ) ) ) ;', 'Assert . fail ( String . format ( "" % s expected = % d , actual = % d , delta = % d"" , message , Long . valueOf ( expected ) , Long . valueOf ( actual ) , Long . valueOf ( delta ) ) ) ;']","['protected short getShort ( final FileSystemOptions opts , final String name , final short defaultValue )', 'protected short getShort ( final FileSystemOptions opts , final String name , final short defaultValue )', '}', '}', 'return System . getProperty ( toPropertyKey ( name ) ) ;', 'return System . getProperty ( toPropertyKey ( name ) ) ;', 'private String getProperty ( final String name )', 'private String getProperty ( final String name )', '{', '{']","['public class ChangeLastModificationTime', '{', 'private ChangeLastModificationTime ( )', '}', 'public final class ChangeLastModificationTime', 'public class Shell', 'reader = new BufferedReader ( new InputStreamReader ( System . in , Charset . defaultCharset ( ) ) ) ;', '}', '}', 'System . out . println ( ""VFS Shell [ "" + SVN ID + "" ] "" ) ;']","['else if ( cmdName . equalsIgnoreCase ( ""help"" ) )', 'if ( cmd . length > 1 )', 'System . err . println ( ""Unknown command \\ """" + cmdName + "" \\ "" . "" ) ;', 'List < String > virtual = new ArrayList < String > ( ) ;', 'System . out . println ( ""exit Exits this program . "" ) ;', 'if ( caps ! = null & & !caps . isEmpty ( ) )', 'System . out . println ( ""VFS Shell"" ) ;', 'System . out . println ( "" operations : "" + ops ) ;', 'System . out . println ( ""quit Exits this program . "" ) ;', 'try']","['} else {', '""version "" + getVersion ( mgr . getClass ( ) ) ) ;', 'for ( int i = 0 ; i < schemes . length ; i + + )', 'for ( int i = 0 ; i < schemes . length ; i + + )', 'System . out . println ( ""Default manager : \\ """" + mgr . getClass ( ) . getName ( ) + "" \\ "" version "" + getVersion ( mgr . getClass ( ) ) ) ;', 'System . out . println ( ""Default manager : \\ """" + mgr . getClass ( ) . getName ( ) + "" \\ "" "" +', 'System . out . println ( ""Provider Info for scheme \\ """" + scheme + "" \\ "" : "" ) ;', '}', '{', 'else']","['vfs . addProvider ( ""tgz"" , new org . apache . commons . vfs2 . provider . tar . TarFileProvider ( ) ) ;', 'data . mkdirs ( ) ;', 'vfs . addMimeTypeMap ( ""application / x - gzip"" , ""gz"" ) ;', 'System . setProperty ( ""test . build . data"" , data . toString ( ) ) ;', 'vfs . setFileContentInfoFactory ( new FileContentInfoFilenameFactory ( ) ) ;', 'FileUtils . cleanDirectory ( data ) ;', 'vfs . setReplicator ( new DefaultFileReplicator ( ) ) ;', 'File data = new File ( ""target / test / hdfstestdata"" ) . getAbsoluteFile ( ) ;', 'try', 'public static void setUp ( ) throws Exception']","['protected static DefaultFileSystemManager vfs ;', 'conf2 . set ( ""dfs . datanode . data . dir . perm"" , String . format ( "" % 03o"" , newPermission ) ) ;', 'conf . set ( ""dfs . datanode . data . dir . perm"" , String . format ( "" % 03o"" , newPermission ) ) ;']","['if ( caps . contains ( Capability . VIRTUAL ) )', 'if ( caps . contains ( Capability . VIRTUAL ) | |', 'caps . contains ( Capability . DISPATCHER ) )', 'caps . contains ( Capability . COMPRESS ) | |']","['conf . setLong ( DFSConfigKeys . DFS BLOCK SIZE KEY , 1024 * 100 ) ;', 'conf . setLong ( DFSConfigKeys . DFS BLOCK SIZE KEY , 1024 * 1024 ) ;', 'conf . setLong ( DFSConfigKeys . DFS BLOCK SIZE KEY , 1024 * 100 ) ;', 'conf . setLong ( DFSConfigKeys . DFS BLOCK SIZE KEY , 1024 * 1024 ) ;']","['private final Log log = LogFactory . getLog ( MimeAttributesMap . class ) ;', 'for ( final Method method : methods )', 'private final Map < String , Method > mimeMessageGetters = new TreeMap < String , Method > ( ) ;', 'private static final String OBJECT PREFIX = ""obj . "" ;', 'for ( final Method method : methods ) {', 'private final Map < String , Method > mimeMessageGetters = new TreeMap < String , Method > ( ) ;', 'private final static String OBJECT PREFIX = ""obj . "" ;', '{', 'private final Log log = LogFactory . getLog ( MimeAttributesMap . class ) ;', 'for ( int i = 0 ; i < multipart . getCount ( ) ; i + + )']","['super ( 139 ) ;', 'final String filename ) throws FileSystemException', 'public FileName parseUri ( final VfsComponentContext context , final FileName base , final String filename ) throws FileSystemException', 'private static final SmbFileNameParser INSTANCE = new SmbFileNameParser ( ) ;', 'private final static SmbFileNameParser INSTANCE = new SmbFileNameParser ( ) ;', 'private static final int SMB PORT = 139 ;', 'super ( SMB PORT ) ;', 'public FileName parseUri ( final VfsComponentContext context , final FileName base ,', 'authData = UserAuthenticatorUtils . authenticate ( getFileSystem ( ) . getFileSystemOptions ( ) , SmbFileProvider . AUTHENTICATOR TYPES ) ;', 'throws MalformedURLException , SmbException , FileSystemException']","['private RACRandomAccessFile ( final File tempFile ) throws IOException', 'private RACRandomAccessFile ( final File tempFile ) throws IOException', 'deleteTempFile ( tempFile ) ;', 'deleteTempFile ( tempFile ) ;', 'package org . apache . commons . vfs2 ;', 'package org . apache . commons . vfs2 . util ;', 'tempFile . delete ( ) ;', 'import org . apache . commons . vfs2 . RandomAccessContent ;', '}', 'private final byte [ ] singleByteBuf = new byte [ 1 ] ;']","['protected boolean doSetExecutable ( final boolean writable , final boolean ownerOnly ) throws Exception', 'protected boolean doSetExecutable ( final boolean executable , final boolean ownerOnly ) throws Exception', 'return nuofSlash = = 2 ;', 'return countSlashes ( filename ) = = 2 ;', 'final int nuofSlash = countSlashes ( filename ) ;']","['if ( this = = fs . getRoot ( ) )', '}', 'doRename ( destFile ) ;', 'FileObjectUtils . getAbstractFileObject ( destFile ) . handleCreate ( srcType ) ;', 'list . add ( childName ) ;', 'if ( name = = null )', 'list . remove ( childName ) ;', '{', 'parent = fs . resolveFile ( fileName . getParent ( ) ) ;', 'FileType srcType = getType ( ) ;']","['if ( this . compareTo ( fs . getRoot ( ) ) = = 0 ) /', 'if ( this . compareTo ( fs . getRoot ( ) ) = = 0 ) /', 'import org . apache . commons . vfs2 . CacheStrategy ;']","['/ /', 'servlet . setInitParameter ( ""repository . home"" , repository . getAbsolutePath ( ) ) ;', 'jettyLog . addAppender ( new FileAppender ( layout , new File ( log , ""jetty . log"" ) . getPath ( ) ) ) ;', 'return res ;', 'jackrabbitLog . addAppender ( new FileAppender ( layout , new File ( log , ""jackrabbit . log"" ) . getPath ( ) ) ) ;', 'final File repository = new File ( command . getOptionValue ( ""repo"" , ""target / test / jackrabbit"" ) ) ;', 'servlet . setInitParameter ( ""repository . home"" , repository . getPath ( ) ) ;', '}', 'final File repository = new File ( command . getOptionValue ( ""repo"" , ""jackrabbit"" ) ) ;', 'Logger . getRootLogger ( ) . removeAppender ( jackrabbitAppender ) ;']","['this . putFileToCache ( file ) ;', 'this . putFileToCache ( file ) ;', 'conf . addResource ( configName ) ;', '}', 'String configName = HdfsFileSystemConfigBuilder . getInstance ( ) . getConfigName ( getFileSystemOptions ( ) ) ;', 'if ( configName ! = null ) {', 'log . debug ( ""Adding alternate configuration file : "" + configName ) ;', 'import org . apache . commons . vfs2 . FileSystemOptions ;', 'public String getConfigName ( final FileSystemOptions opts ) {', '}']","['if ( null = = this . fs )', 'log . debug ( ""Adding HDFS configuration file : "" + configName ) ;', 'String configName = HdfsFileSystemConfigBuilder . getInstance ( ) . getConfigName ( getFileSystemOptions ( ) ) ;', 'if ( this . fs = = null )', 'if ( configName ! = null ) {', 'final String configName = HdfsFileSystemConfigBuilder . getInstance ( ) . getConfigName ( getFileSystemOptions ( ) ) ;', 'log . debug ( ""Adding alternate configuration file : "" + configName ) ;', 'if ( configName ! = null )', 'this . fs = null ;', '{']","['try', 'catch ( final NoSuchMethodException ignored )', 'catch ( final NoSuchMethodException e )', '{', '}', 'Thread . sleep ( getDelay ( ) ) ;', 'Thread . sleep ( getDelay ( ) ) ;', 'catch ( final InterruptedException e )', 'fireAllCreate ( element ) ;', 'try']","['try', 'public void testGetLastModifiedFile ( ) throws FileSystemException', 'final long lastModifiedTime = folder . getContent ( ) . getLastModifiedTime ( ) ;', 'public void testGetLastModifiedFolder ( ) throws FileSystemException', '} catch ( final AssertionFailedError e )', 'assertTrue ( ""Accuracy must be positive"" , lastModTimeAccuracy > = 0 ) ;', 'public void testSetLastModified ( ) throws Exception', 'final long lastModifiedTime = folder . getContent ( ) . getLastModifiedTime ( ) ;', 'if ( lastModTimeAccuracy < 1000L )', '}']","['if ( ! ( Math . abs ( expected - actual ) < = delta ) )', 'if ( Math . abs ( expected - actual ) > Math . max ( delta , 1000 ) )']","['private final Log log = LogFactory . getLog ( LRUFilesCache . class ) ;', 'private static final Log log = LogFactory . getLog ( LRUFilesCache . class ) ;', 'private final Log log = LogFactory . getLog ( SoftRefFilesCache . class ) ;', 'private static final Log log = LogFactory . getLog ( SoftRefFilesCache . class ) ;', 'public static class FtpConnectionFactory extends ConnectionFactory < FTPClient , FtpFileSystemConfigBuilder >', 'public static final class FtpConnectionFactory extends ConnectionFactory < FTPClient , FtpFileSystemConfigBuilder >', 'protected Log log = LogFactory . getLog ( getClass ( ) ) ;', 'private final Log log = LogFactory . getLog ( getClass ( ) ) ;', 'private final Log log = LogFactory . getLog ( FtpFileObject . class ) ;', 'private static final Log log = LogFactory . getLog ( FtpFileObject . class ) ;']","['UserAuthenticatorUtils . getData (', 'UserAuthenticatorUtils . toChar ( smbFileName . getPassword ( ) ) ) ) ) ;', 'UserAuthenticatorUtils . toChar ( smbFileName . getPassword ( ) ) ) ) ) ;', 'UserAuthenticatorUtils . getData ( authData , UserAuthenticationData . PASSWORD ,', 'authData ,', 'return file ;', 'NtlmPasswordAuthentication auth ;', 'NtlmPasswordAuthentication auth = null ;', 'if ( file . isDirectory ( ) & & !file . toString ( ) . endsWith ( "" / "" ) )', 'if ( file . isDirectory ( ) & & !file . toString ( ) . endsWith ( "" / "" ) )']",['client . executeMethod ( new HeadMethod ( ) ) ;'],"['final FileType fileType = UriParser . normalisePath ( buffer ) ;', 'UriParser . normalisePath ( buffer ) ;', 'import org . apache . commons . vfs2 . FileType ;']","['assertSame ( file , event . getFile ( ) ) ;', 'assertEquals ( file , event . getFile ( ) ) ;']","['if ( status = = HttpURLConnection . HTTP OK )', '| | status = = HttpURLConnection . HTTP BAD METHOD / * method is bad , but resource exist * / )', 'if ( status = = HttpURLConnection . HTTP OK', 'final FileObject f = VFS . getManager ( ) . resolveFile ( ""http : / / www . w3schools . com / webservices / tempconvert . asmx ? action = WSDL"" ) ;', '}', 'public void testHttp405 ( ) throws FileSystemException', 'assert f . getContent ( ) . getSize ( ) > 0 ;', '{']","['method . setRequestHeader ( ""User - Agent"" , ""Jakarta - Commons - VFS"" ) ;', 'private final String userAgent ;', 'protected String getUserAgent ( )', '}', 'userAgent = builder . getUserAgent ( fileSystemOptions ) ;', 'return userAgent ;', '{', 'method . setRequestHeader ( ""User - Agent"" , this . getUserAgent ( ) ) ;', 'setParam ( opts , ""userAgent"" , userAgent ) ;', 'return userAgent ! = null ? userAgent : DEFAULT USER AGENT ;']","['final int hashFk = other . options . hashCode ( ) ;', 'final SortedMap < FileSystemOptionKey , Object > theirOptions =', 'final int hash = options . hashCode ( ) ;', 'return comp ;', 'return true ;', 'return result ;', '}', 'if ( comp ! = 0 ) {', 'final Iterator < FileSystemOptionKey > otherKeysIter = theirOptions . keySet ( ) . iterator ( ) ;', 'return compareTo ( other ) = = 0 ;']","['final LocalFile localFile = ( LocalFile ) fileObject ;', 'final LocalFile localFile = ( LocalFile ) FileObjectUtils . getAbstractFileObject ( fileObject ) ;', 'import org . apache . commons . vfs2 . util . FileObjectUtils ;', 'assertSame ( currentFolder , folder . getParent ( ) ) ;', 'AbstractFileObject parent = FileObjectUtils . getAbstractFileObject ( folder . getParent ( ) ) ;', 'final FileObject folder = fileInfo . getFile ( ) ;', 'import org . apache . commons . vfs2 . util . FileObjectUtils ;', 'final FileObject folder = FileObjectUtils . getAbstractFileObject ( fileInfo . getFile ( ) ) ;', 'assertSame ( currentFolder , parent ) ;', 'import org . apache . commons . vfs2 . provider . AbstractFileObject ;']",['import org . apache . commons . vfs2 . test . CacheTestSuite ;'],"['operationProviders . clear ( ) ;', 'for ( final List < FileOperationProvider > opproviders : operationProviders . values ( ) )', 'for ( final Object provider : providers . values ( ) )', 'closeComponent ( p ) ;', '}', '{', 'operationProviders . clear ( ) ;', 'for ( final FileOperationProvider p : opproviders )', 'for ( final FileProvider provider : providers . values ( ) )', '""vfs . provider / operation - not - supported . error"" , operationClass ) ;']","['public void setKnownHosts ( final FileSystemOptions opts , final File sshdir ) throws FileSystemException', 'public void setKnownHosts ( final FileSystemOptions opts , final File knownHosts ) throws FileSystemException', 'this . setParam ( opts , KNOWN HOSTS , sshdir ) ;', 'this . setParam ( opts , KNOWN HOSTS , knownHosts ) ;']","['LOG . debug ( ""I / O exception while trying to quit , probably it\'s a timed out connection , ignoring . "" , e ) ;', 'private static final Log LOG = LogFactory . getLog ( FTPClientWrapper . class ) ;', 'import org . apache . commons . logging . LogFactory ;', 'LOG . warn ( ""I / O exception while trying to disconnect , probably it\'s a closed connection , ignoring . "" , e ) ;', '}', 'catch ( IOException e )', '{', 'import org . apache . commons . logging . Log ;']","['private static final String PATH SEP =', 'import java . io . File ;', 'System . getProperty ( ""path . separator"" ) ;', 'private static final String PATH SEP = File . pathSeparator ;']","['break ;', 'if ( softRefReleaseThread ! = null )', 'private final AtomicReference < SoftRefReleaseThread > softRefReleaseThread =', 'if ( softRefReleaseThread = = null )', 'SoftRefReleaseThread newThread ;', '}', 'newThread . start ( ) ;', 'softRefReleaseThread = new SoftRefReleaseThread ( ) ;', 'Thread thread ;', 'final SoftRefReleaseThread thread = softRefReleaseThread ;']","['item = fileSystems . values ( ) . toArray ( ) ;', 'fileSystems . remove ( key ) ;', 'for ( final Object element : item )', '= new TreeMap < FileSystemKey , FileSystem > ( ) ;', 'synchronized ( this )', 'AbstractFileSystem [ ] abstractFileSystems ;', 'if ( fs . getCacheKey ( ) ! = null )', 'abstractFileSystems = fileSystems . values ( ) . toArray ( EMPTY ABSTRACTFILESYSTEMS ) ;', 'final AbstractFileSystem fs = ( AbstractFileSystem ) element ;', 'synchronized ( fileSystems )']","['File file = new File ( getTestDirectory ( ) , name ) ;', 'return getTestResource ( name , true ) ;', 'public static File getTestResourceFile ( final String name )', 'public static File getTestDirectoryFile ( )', 'public static File getTestResourceFile ( final String name , final boolean mustExist )', 'public static File getTestResource ( final String name )', 'public static String getTestDirectoryString ( )', 'File file = new File ( getTestDirectoryFile ( ) , name ) ;', 'public static String getResourceTestDirectoryString ( )', 'public static String getResourceTestDirectory ( )']","['final SortedMap < FileSystemOptionKey , Object > theirOptions =', 'final SortedMap < FileSystemOptionKey , Object > theirOptions =', 'other . options instanceof SortedMap', 'return fileSystemClass . getName ( ) + "" . "" + name ;', '? ( SortedMap < FileSystemOptionKey , Object > ) other . options', '}', 'final SortedMap < FileSystemOptionKey , Object > myOptions =', 'other . options instanceof SortedMap', '? ( SortedMap < FileSystemOptionKey , Object > ) options', '? ( SortedMap < FileSystemOptionKey , Object > ) other . options']","['FileSystem fs = findFileSystem ( rootName , null ) ;', 'FileSystem fs = findFileSystem ( rootName , fileSystemOptions ) ;', 'final String uri = ""tar : file : "" + tarFilePath + ""! / test . tar"" ;', 'final String uri = ""tar : file : "" + tarFilePath + ""! / test . tar"" ;', 'final FileObject tarFile = manager . resolveFile ( uri ) ;', 'import org . apache . commons . vfs2 . FileSystemOptions ;', 'final FileObject tarFile = manager . resolveFile ( uri , opts ) ;', 'final FileSystemOptions opts = new FileSystemOptions ( ) ;', 'DefaultFileSystemConfigBuilder . getInstance ( ) . setUserAuthenticator ( opts , new StaticUserAuthenticator ( ""domain"" , null , null ) ) ;', 'import org . apache . commons . vfs2 . FileSystemConfigBuilder ;']","['FileSystem fs = findFileSystem ( rootName , fileSystemOptions ) ;', 'FileSystem fs = findFileSystem ( rootName , fileSystemOptions ) ;']","['subdir4 . addFile ( ""file2 . txt"" , TEST FILE CONTENT ) ;', 'subdir4 . addFile ( ""file1 . txt"" , TEST FILE CONTENT ) ;', 'subdir4 . addFile ( ""file3 . txt"" , TEST FILE CONTENT ) ;', 'final FileInfo subdir4 = dir . addFolder ( ""subdir4 . jar"" ) ;']","['return null ;', '{', '}', 'if ( !file . isFile ( ) )', 'final File baseDir = AbstractVfsTestCase . getTestDirectoryFile ( ) ;', 'final FileObject [ ] search = new FileObject [ ] { nestedJar , testJar } ;', 'final FileObject [ ] search = new FileObject [ ] { nestedJar , testJar } ;', 'public void testGetResourcesNoLayerLocal ( ) throws Exception', 'if ( baseDir = = null | | manager = = null | | !baseDir . isDirectory ( ) )', 'System . out . println ( ""TestCase has no local file provider , skipping . "" ) ;']","['final Class < ? > clazz = findClassLoader ( ) . loadClass ( className ) ;', 'loadClass ( className ) ;', 'final ClassLoader cl = findClassLoader ( ) ;', 'private Class < ? > loadClass ( String className ) throws ClassNotFoundException', 'findClassLoader ( ) . loadClass ( className ) ;', 'return getClass ( ) . getClassLoader ( ) . loadClass ( className ) ;', 'enumResources = cl . getResources ( PLUGIN CONFIG RESOURCE ) ;', 'catch ( final ClassNotFoundException e )', 'return res ;', 'enumResources = loadResources ( PLUGIN CONFIG RESOURCE ) ;']","['System . out . println ( ""VfsClassLoaderTestCase has no local file provider , skipping . "" ) ;', 'System . out . println ( ""VfsClassLoaderTests no local file provider , skipping . "" ) ;', 'System . out . println ( ""vfsclassloadertests : "" + dir ) ;', 'System . out . println ( ""VfsClassLoaderTests no layered . jar provider , skipping . "" ) ;', 'System . out . println ( ""TestCase has no local file provider , skipping . "" ) ;', 'System . out . println ( ""VfsClassLoaderTestCase has no . jar provider , skipping . "" ) ;']","['final String configName = builder . getConfigName ( getFileSystemOptions ( ) ) ;', 'conf . addResource ( path ) ;', 'log . debug ( ""Adding HDFS configuration file : "" + configName ) ;', 'log . debug ( ""Adding HDFS configuration path : "" + path ) ;', 'conf . addResource ( configName ) ;', 'if ( configConfiguration ! = null )', 'if ( configName ! = null )', 'final InputStream configStream = builder . getConfigInputStream ( options ) ;', 'final String [ ] configNames = builder . getConfigNames ( options ) ;', 'import java . net . URL ;']","['public void testHttp405 ( ) throws FileSystemException', 'public void ignoreTestHttp405 ( ) throws FileSystemException']","['super ( name , container , cast ( fs ) ) ;', 'import org . apache . commons . vfs2 . provider . compressed . CompressedFileFileSystem ;', 'throw new IllegalArgumentException ( ""Bzip2FileObject requires a Bzip2FileSystem implementation"" ) ;', 'return ( Bzip2FileSystem ) fs ;', '@ Deprecated', '}', 'protected Bzip2FileObject ( final AbstractFileName name , final FileObject container , final CompressedFileFileSystem fs )', '{', 'private static Bzip2FileSystem cast ( CompressedFileFileSystem fs ) {', 'if ( fs instanceof Bzip2FileSystem ) {']","['public void testGoogle ( ) throws FileSystemException', 'final FileObject fo = fsManager . resolveFile ( ""http : / / www . apache . org / licenses / LICENSE - 2 . 0 . txt"" ) ;', 'final FileObject fo = fsManager . resolveFile ( ""http : / / www . google . com / images / logos / ps logo2 . png"" ) ;', 'public void testGetContentInfo ( ) throws FileSystemException', 'final FileObject fo = fsManager . resolveFile ( ""https : / / www . google . com / images / logos / ps logo2 . png"" , opts ) ;', 'final FileObject fo = fsManager . resolveFile ( ""http : / / www . apache . org / licenses / LICENSE - 2 . 0 . txt"" , opts ) ;', 'public void testGoogle ( ) throws FileSystemException , MalformedURLException', 'public void testGetContentInfo ( ) throws FileSystemException , MalformedURLException']","['private TarArchiveEntry entry ;', '@ Deprecated', 'protected TarArchiveEntry entry ;']","['public static final UserAuthenticationData . Type [ ] AUTHENTICATOR TYPES = new UserAuthenticationData . Type [ ]', '} ;', '@ Deprecated', 'UserAuthenticationData . USERNAME , UserAuthenticationData . PASSWORD', '{']","['void setTarEntry ( final TarArchiveEntry entry )', 'protected void setTarEntry ( final TarArchiveEntry entry )', '@ Deprecated', 'private TarArchiveEntry entry ;', 'protected TarArchiveEntry entry ;']","['stream . close ( ) ;', 'try ( final InputStreamReader stream = new InputStreamReader ( channel . getInputStream ( ) ) )', 'int read ;', 'int read ;', 'final char [ ] buffer = new char [ EXEC BUFFER SIZE ] ;', 'final char [ ] buffer = new char [ EXEC BUFFER SIZE ] ;', 'channel . setErrStream ( System . err , true ) ;', '}', 'final InputStreamReader stream = new InputStreamReader ( channel . getInputStream ( ) ) ;', 'channel . setErrStream ( System . err , true ) ;']","['private final Set < String > extensions = new HashSet < String > ( ) ;', 'private final Set < String > extensions = new HashSet < > ( ) ;', 'return new FileSystemOptions ( new TreeMap < FileSystemOptionKey , Object > ( options ) ) ;', 'return new FileSystemOptions ( new TreeMap < > ( options ) ) ;', ': new TreeMap < FileSystemOptionKey , Object > ( options ) ;', ': new TreeMap < > ( other . options ) ;', ': new TreeMap < FileSystemOptionKey , Object > ( other . options ) ;', ': new TreeMap < > ( options ) ;', 'private final Map < Type , char [ ] > authenticationData = new TreeMap < Type , char [ ] > ( ) ;', 'private final Map < Type , char [ ] > authenticationData = new TreeMap < > ( ) ;']","['return FileType . FILE ;', 'return FileType . FILE ;', 'else', '{', '}']","['final PosixPermissions permissions = new PosixPermissions ( attrs . getPermissions ( ) , isOwner , isInGroup ) ;', 'return new PosixPermissions ( attrs . getPermissions ( ) , isOwner , isInGroup ) ;', 'return permissions ;']","['public static void setManager ( FileSystemManager manager ) {', 'VFS . instance = manager ;', '}', 'package org . apache . commons . vfs2 ;', 'import org . junit . Assert ;', 'public class VFSTest {', 'import org . apache . commons . vfs2 . impl . StandardFileSystemManager ;', '@ Test', 'Assert . assertNotNull ( VFS . getManager ( ) ) ;', 'final StandardFileSystemManager fileSystemManager = new StandardFileSystemManager ( ) ;']","['List < String > physical = new ArrayList < String > ( ) ;', 'List < String > virtual = new ArrayList < > ( ) ;', 'final ArrayList < String > cmd = new ArrayList < String > ( ) ;', 'final ArrayList < String > cmd = new ArrayList < > ( ) ;', 'List < String > virtual = new ArrayList < String > ( ) ;', 'List < String > physical = new ArrayList < > ( ) ;', 'final ArrayList < String > newValues = new ArrayList < String > ( ) ;', 'final ArrayList < String > newValues = new ArrayList < > ( ) ;', 'private final Map < String , Method > mimeMessageGetters = new TreeMap < String , Method > ( ) ;', 'private final Map < String , Method > mimeMessageGetters = new TreeMap < > ( ) ;']","['package org . apache . commons . vfs2 ;', 'return !delegateFileSelector . includeFile ( fileInfo ) ;', 'import java . util . Objects ;', 'private final FileSelector delegateFileSelector ;', 'public boolean traverseDescendents ( final FileSelectInfo fileInfo ) throws Exception {', '}', 'public boolean includeFile ( final FileSelectInfo fileInfo ) throws Exception {', 'this . delegateFileSelector = Objects . requireNonNull ( delegateFileSelector , ""delegateFileSelector"" ) ;', 'public InvertIncludeFileSelector ( final FileSelector delegateFileSelector ) {', '@ Override']","['public class FilesCacheTestsBase extends AbstractProviderTestCase', 'public abstract class FilesCacheTestsBase extends AbstractProviderTestCase']","['public abstract class FilesCacheTestsBase extends AbstractProviderTestCase', 'public abstract class AbstractFilesCacheTestsBase extends AbstractProviderTestCase', 'public class DefaultFilesCacheTests extends FilesCacheTestsBase', 'public class DefaultFilesCacheTests extends AbstractFilesCacheTestsBase', 'public class LRUFilesCacheTests extends FilesCacheTestsBase', 'public class LRUFilesCacheTests extends AbstractFilesCacheTestsBase', 'public class NullFilesCacheTests extends FilesCacheTestsBase', 'public class NullFilesCacheTests extends AbstractFilesCacheTestsBase', 'public class SoftRefFilesCacheTests extends FilesCacheTestsBase', 'public class SoftRefFilesCacheTests extends AbstractFilesCacheTestsBase']","['final String newName = newFile . getName ( ) . getPath ( ) ;', 'final String oldName = relPath ;', 'final String oldName = getName ( ) . getPath ( ) ;', 'final String newName = ( ( FtpFileObject ) FileObjectUtils . getAbstractFileObject ( newFile ) ) . getRelPath ( ) ;', 'user . setHomeDirectory ( getTestDirectory ( ) ) ;', 'protected boolean getUserDirIsRoot ( )', 'static void setUpClass ( ) throws FtpException , IOException', 'setUpClass ( testCase . getFtpRootDir ( ) , testCase . getFtpFileSystem ( ) ) ;', 'setUpClass ( ) ;', '}']","['public class JarAttributesTestCase extends TestCase', 'public class JarAttributesTestCase']","['private void printAttributes ( final Map < String , Object > attributes )', 'public void testNestedAttributes ( ) throws Exception {', 'public void testAttributes ( ) throws Exception', 'public class JarAttributesTestCase {', 'public void testNestedAttributes ( ) throws Exception', 'private void printAttributes ( final Map < String , Object > attributes ) {', '{', 'for ( final Map . Entry < String , Object > e : attributes . entrySet ( ) ) {', 'for ( final Map . Entry < String , Object > e : attributes . entrySet ( ) )', 'public void testAttributes ( ) throws Exception {']","['/ /', '@ Test', '}', '@ Ignore', 'FileUtils . copyFile ( zipFile , newZipFile ) ;', 'fileOne . getContent ( ) . getInputStream ( ) . close ( ) ;', 'FileSystemManager manager = VFS . getManager ( ) ;', 'import java . io . File ;', 'Assert . assertTrue ( ""Could not delete file"" , newZipFile . delete ( ) ) ;', 'import org . apache . commons . vfs2 . FileObject ;']","['final ZipFile zipFile = createZipFile ( this . file ) ;', 'this . zipFile = createZipFile ( this . file ) ;', 'this . zipFile = zipFile ;']","['public class FreeSocketPortUtil', 'public static int findFreeLocalPort ( ) throws IOException {', 'final ServerSocket server = new ServerSocket ( 0 ) ;', 'public class FreeSocketPortUtil {', 'try', 'try ( final ServerSocket server = new ServerSocket ( 0 ) ) {', '} finally', 'public static void main ( final String [ ] args ) throws IOException {', 'public static void main ( final String [ ] args ) throws IOException', 'server . close ( ) ;']","['if ( res ! = null )', 'if ( res ! = null ) {', '}', 'if ( DEBUG )', 'if ( DEBUG ) {', '}']","['int comp = optKeysIter . next ( ) . compareTo ( otherKeysIter . next ( ) ) ;', 'public boolean equals ( final Object obj )', 'public boolean equals ( Object obj )', 'final int comp = optKeysIter . next ( ) . compareTo ( otherKeysIter . next ( ) ) ;', 'FileSystemOptions other = ( FileSystemOptions ) obj ;', 'final Object [ ] array = new Object [ propsSz ] ;', 'Object [ ] array = new Object [ propsSz ] ;', 'final FileSystemOptions other = ( FileSystemOptions ) obj ;', 'public static void setManager ( FileSystemManager manager ) {', 'public static void setManager ( final FileSystemManager manager ) {']","['if ( base ! = null & & VFS . isUriStyle ( ) & & base . isFile ( ) )', 'if ( base = = null ) {', 'throw new FileSystemException ( ""Invalid base filename . "" ) ;', 'if ( VFS . isUriStyle ( ) & & base . isFile ( ) )', '}', 'public void testResolveFileNameNull ( ) throws FileSystemException', '}', '{', '@ Test ( expected = FileSystemException . class )', 'VFS . getManager ( ) . resolveName ( ( FileName ) null , "" . . / "" ) ;']","['import org . apache . commons . AbstractVfsTestCase ;', 'newZipFile . deleteOnExit ( ) ;', '/ /', 'newZipFile = File . createTempFile ( ""FileLockTestCase"" , ""zip"" ) ;', 'newZipFile = new File ( AbstractVfsTestCase . getTestDirectory ( ) , ""test2 . zip"" ) ;']","['Assert . assertFalse ( ""Could not delete file"" , newZipFile . delete ( ) ) ;', 'import org . apache . commons . vfs2 . util . Os ;', 'Assert . assertFalse ( ""Could not delete file"" , newZipFile . delete ( ) ) ;', 'if ( Os . isFamily ( Os . OS FAMILY WINDOWS ) ) {', '}', 'import org . junit . Assume ;', 'Assume . assumeTrue ( Os . isFamily ( Os . OS FAMILY WINDOWS ) ) ;']","['if ( e . getErrorCode ( ) = = SmbException . ERRbadfile )', 'if ( e . getNtStatus ( ) = = SmbException . NT STATUS NO SUCH FILE )']","['public FileObject getFile ( )', 'public FileObject getFile ( ) {', 'public void setFile ( final FileObject file )', 'public int getDepth ( ) {', 'implements FileSelectInfo', 'public void setBaseFolder ( final FileObject baseFolder ) {', 'public void setBaseFolder ( final FileObject baseFolder )', 'final class DefaultFileSelectorInfo implements FileSelectInfo {', 'public int getDepth ( )', 'public FileObject getBaseFolder ( ) {']","['public String toString ( ) {', 'return super . toString ( ) + "" [ baseFolder = "" + baseFolder + "" , file = "" + file + "" , depth = "" + depth + "" ] "" ;', '@ Override', '}']","['Comparable < Comparable < ? > > comparable = ( Comparable < Comparable < ? > > ) key ;', 'if ( fileSystemOptions ! = null ) {', 'FileSystemKey ( final Comparable < ? > key , final FileSystemOptions fileSystemOptions )', 'class FileSystemKey implements Comparable < FileSystemKey > {', 'public int compareTo ( final FileSystemKey o )', 'final Comparable < Comparable < ? > > comparable = ( Comparable < Comparable < ? > > ) key ;', '}', '} else {', 'if ( fileSystemOptions ! = null )', 'if ( ret ! = 0 ) {']","['public String toString ( ) {', '@ Override', '}', 'return super . toString ( ) + "" [ key = "" + key + "" , fileSystemOptions = "" + fileSystemOptions + "" ] "" ;']","['final FileType type', 'protected void appendRootUri ( final StringBuilder buffer , final boolean addPassword ) {', 'final int defaultPort ,', 'if ( password ! = null & & password . length ( ) ! = 0 ) {', 'public String getHostName ( )', 'public String getUserName ( ) {', 'return new GenericFileName (', 'if ( userName ! = null & & userName . length ( ) ! = 0 ) {', 'final String userName ,', 'if ( port ! = getDefaultPort ( ) ) {']","['return count . get ( ) ;', 'private final AtomicLong atomicCount = new AtomicLong ( 0 ) ;', 'count . incrementAndGet ( ) ;', 'atomicCount . incrementAndGet ( ) ;', 'private final AtomicLong count = new AtomicLong ( 0 ) ;', 'atomicCount . addAndGet ( nread ) ;', 'count . addAndGet ( nread ) ;', 'return atomicCount . get ( ) ;']","['try ( final FileObject zipFileObject = manager . resolveFile ( uri ) ) {', 'private String zipFileUri ;', 'try ( final FileObject zipFileObject2 = manager . resolveFile ( uri ) ) {', 'try ( final FileObject zipFileObject2 = manager . resolveFile ( zipFileUri ) ) {', 'uri = ""zip : file : "" + newZipFile . getAbsolutePath ( ) + ""! / read - tests / file1 . txt"" ;', 'try ( final FileObject zipFileObject = manager . resolveFile ( zipFileUri ) ) {', 'private String uri ;', 'zipFileUri = ""zip : file : "" + newZipFile . getAbsolutePath ( ) + ""! / read - tests / file1 . txt"" ;']","['public void testInputStream3 ( ) throws Exception {', 'try ( InputStream inputStream = zipFileObject . getContent ( ) . getInputStream ( ) ) {', 'public void testInputStream ( ) throws Exception {', 'Assert . assertNotNull ( string ) ;', 'public void resolveAndOpenCloseInputStream ( ) throws IOException , FileSystemException {', 'public void testResolveAndOpenCloseContent ( ) throws Exception {', 'public void testContent ( ) throws Exception {', 'Assert . assertTrue ( string . length ( ) > 0 ) ;', 'public void testContent3 ( ) throws Exception {', 'public void testResolveAndOpenCloseContent3 ( ) throws Exception {']","['public void testNestedInputStreams ( ) throws Exception {', '@ Test', 'resolveAndOpenReadCloseInputStream ( ) ;', 'public void testResolveAndOpenReadCloseInputStream ( ) throws Exception {', '}', 'assertDelete ( ) ;', 'public void testResolveOpenCloseNestedInputStreams ( ) throws Exception {', 'public void testResolveAndOpenReadCloseInputStream3 ( ) throws Exception {']","['Assert . assertTrue ( string . length ( ) > 0 ) ;', 'Assert . assertEquals ( ""This is a test file . "" , string ) ;']","['import org . apache . commons . vfs2 . test . ProviderTestConfig ;', 'abstract class AbstractFtpsProviderTestCase extends AbstractProviderTestConfig', 'abstract class AbstractFtpsProviderTestCase extends AbstractProviderTestConfig implements ProviderTestConfig']","['import org . apache . commons . vfs2 . test . ProviderTestConfig ;', 'import junit . framework . Test ;', 'import junit . framework . Test ;', 'implements ProviderTestConfig']","['import org . apache . commons . vfs2 . test . ProviderTestConfig ;', 'import junit . framework . Test ;', 'import junit . framework . Test ;', 'public class FtpProviderTestCase extends AbstractProviderTestConfig', 'public class FtpProviderTestCase extends AbstractProviderTestConfig implements ProviderTestConfig']","['public class HdfsFileProviderTestCase extends AbstractProviderTestConfig implements ProviderTestConfig', 'public class HdfsFileProviderTestCase extends AbstractProviderTestConfig']","['import org . apache . commons . vfs2 . test . ProviderTestConfig ;', 'import junit . framework . Test ;', 'import junit . framework . Test ;', 'public class JarProviderTestCase extends AbstractProviderTestConfig', 'public class JarProviderTestCase extends AbstractProviderTestConfig implements ProviderTestConfig']","['import org . apache . commons . vfs2 . test . ProviderTestConfig ;', 'import junit . framework . Test ;', 'import junit . framework . Test ;', 'implements ProviderTestConfig']","['import org . apache . commons . vfs2 . test . ProviderTestConfig ;', 'import junit . framework . Test ;', 'import junit . framework . Test ;', 'implements ProviderTestConfig']","['import org . apache . commons . vfs2 . test . ProviderTestConfig ;', 'import junit . framework . Test ;', 'import junit . framework . Test ;', 'implements ProviderTestConfig', 'import org . apache . commons . vfs2 . test . ProviderTestConfig ;', 'import junit . framework . Test ;', 'import junit . framework . Test ;', 'implements ProviderTestConfig', 'import org . apache . commons . vfs2 . test . ProviderTestConfig ;', 'import junit . framework . Test ;']","['import org . apache . commons . vfs2 . provider . FileProvider ;', 'implements FileProvider', 'public class RamFileProvider extends AbstractOriginatingFileProvider implements', 'public class RamFileProvider extends AbstractOriginatingFileProvider', 'import org . apache . commons . vfs2 . provider . FileProvider ;', 'FileProvider', 'import org . apache . commons . vfs2 . provider . FileProvider ;', 'public class TarFileProvider extends AbstractLayeredFileProvider', 'public class TarFileProvider extends AbstractLayeredFileProvider implements FileProvider', 'import org . apache . commons . vfs2 . provider . FileProvider ;']","['setParam ( opts , HttpConnectionManagerParams . SO TIMEOUT , Integer . valueOf ( soTimeout ) ) ;', 'setParam ( opts , HttpConnectionParams . CONNECTION TIMEOUT , Integer . valueOf ( connectionTimeout ) ) ;', 'setParam ( opts , HttpConnectionManagerParams . CONNECTION TIMEOUT , Integer . valueOf ( connectionTimeout ) ) ;', 'return getInteger ( opts , HttpConnectionParams . CONNECTION TIMEOUT , DEFAULT CONNECTION TIMEOUT ) ;', 'return getInteger ( opts , HttpConnectionManagerParams . CONNECTION TIMEOUT , DEFAULT CONNECTION TIMEOUT ) ;', 'import org . apache . commons . httpclient . params . HttpConnectionParams ;', 'return getInteger ( opts , HttpConnectionManagerParams . SO TIMEOUT , DEFAULT SO TIMEOUT ) ;', 'return getInteger ( opts , HttpConnectionParams . SO TIMEOUT , DEFAULT SO TIMEOUT ) ;', 'setParam ( opts , HttpConnectionParams . SO TIMEOUT , Integer . valueOf ( soTimeout ) ) ;']","['return true ;', 'return true ;', 'return parent . isWriteable ( ) ;', 'return parent . isWriteable ( ) ;', '}', 'return fs . getParentLayer ( ) . getParent ( ) ;', '{', 'final FileObject parent = getParent ( ) ;', 'else', 'if ( parent ! = null )']","['return name . substring ( 0 , name . lastIndexOf ( "" . "" ) ) ;', 'return name . substring ( 0 , name . lastIndexOf ( "" . "" ) ) ;', 'else', '{', '}', '{', 'return parent . addNode ( name , type ) ;', '} else', 'return parent . addNode ( name , type ) ;', 'return child ;']","['public abstract FileName createName ( String absPath , FileType type ) ;', 'public abstract FileName createName ( String absolutePath , FileType fileType ) ;']","['newZipFile = File . createTempFile ( ""FileLockTestCase"" , ""zip"" ) ;', 'newZipFile = File . createTempFile ( getClass ( ) . getSimpleName ( ) , "" . zip"" ) ;']","['VfsLog . info ( getLogger ( ) , log , message ) ;', 'final String message = Messages . getString ( ""vfs . impl / temp - dir . debug"" , tempDir ) ;', 'final String message = Messages . getString ( ""vfs . impl / temp - dir . info"" , tempDir ) ;', 'VfsLog . debug ( getLogger ( ) , log , message ) ;']","['public String toString ( ) {', '@ Override', 'return super . toString ( ) + "" for "" + file ;', '}']","['Assert . assertNotNull ( string ) ;', 'try ( final InputStream inputStream = zipFileObject . getContent ( ) . getInputStream ( ) ) {', 'String string = IOUtils . toString ( inputStream , ""UTF - 8"" ) ;', '@ Test', 'Assert . assertEquals ( ""This is a test file . "" , string ) ;', 'zipFileObjectRef . close ( ) ;', 'Assert . assertNotNull ( string ) ;', 'readAndAssert ( inputStream ) ;', 'final FileObject zipFileObjectRef ;', '}']","['@ Test', 'try ( final FileObject zipFileObject1 = zipFileObject . resolveFile ( "" / read - xml - tests / file1 . xml"" ) ) {', '}', 'FileUtils . copyFile ( zipFile , newZipFile ) ;', 'final File newZipFile = File . createTempFile ( getClass ( ) . getSimpleName ( ) , "" . zip"" ) ;', 'final File zipFile = new File ( ""src / test / resources / test - data / read - xml - tests . zip"" ) ;', 'public void testReadingFilesInZipFile ( ) throws IOException {', 'Assert . assertEquals ( "" < ? xml version = \\ ""1 . 0 \\ "" encoding = \\ ""UTF - 8 \\ "" ? > "" + System . lineSeparator ( ) + "" < Root"" + expectedId', 'private void readAndAssert ( final InputStream inputStream , final String expectedId ) throws IOException {', 'readAndAssert ( inputStream , ""2"" ) ;']","['protected InputStream doGetInputStream ( ) throws Exception', 'protected String [ ] doListChildren ( ) {', 'if ( entry = = null | | entry . isDirectory ( ) )', 'try {', 'if ( this . entry ! = null )', 'protected ZipFileObject ( final AbstractFileName name , final ZipEntry entry , final ZipFileSystem fs ,', 'try', 'protected long doGetLastModifiedTime ( ) throws Exception {', 'if ( !zipExists )', 'final boolean zipExists ) throws FileSystemException {']","['Assert . assertTrue ( e . toString ( ) . contains ( ""Invalid content was found starting with element \'FOO\' . "" ) ) ;', 'final File newZipFile = createTempFile ( ) ;', '@ SuppressWarnings ( ""resource"" )', '""http : / / www . w3 . org / 2001 / XMLSchema"" ) ;', 'public void testResolveAndParseInvalidXml ( ) throws IOException , SAXException {', '} catch ( final SAXException e ) {', 'final DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory . newInstance ( ) ;', 'public void testParseXmlInZip ( ) throws IOException , SAXException {', 'final FileSystemManager manager = VFS . getManager ( ) ;', 'import org . apache . commons . vfs2 . FileSystemException ;']","['documentBuilder . setErrorHandler ( new TestErrorHandler ( sourceFile . toString ( ) ) ) ;', 'documentBuilder . setEntityResolver ( new TestEntityResolver ( containerFile , sourceFile ) ) ;', 'final Document document = newDocumentBuilder ( zipFileObject , null ) . parse ( inputStream ) ;', 'final Document document = newDocumentBuilder ( zipFileObject , zipFileObject , null ) . parse ( inputStream ) ;', 'final FileObject schema = sourceFile . resolveFile ( pathToXsdInZip ) ;', 'documentBuilder . setErrorHandler ( new TestErrorHandler ( containerFile + "" - "" + sourceFile ) ) ;', 'throws IOException {', '. parse ( inputStream ) ;', 'documentBuilder . setEntityResolver ( new TestEntityResolver ( sourceFile ) ) ;', 'final FileObject schema = containerFile . resolveFile ( pathToXsdInZip ) ;']","['getOrCreateThreadData ( ) . addInstr ( wrappedInstr ) ;', 'final InputStream wrappedInputStream = new FileContentInputStream ( fileObject , inputStream ) ;', 'final InputStream instr = fileObject . getInputStream ( ) ;', 'final InputStream inputStream = fileObject . getInputStream ( ) ;', 'final InputStream wrappedInstr = new FileContentInputStream ( fileObject , instr ) ;', 'getOrCreateThreadData ( ) . addInstr ( wrappedInputStream ) ;', 'return wrappedInstr ;', 'return wrappedInputStream ;']","['return this . instrs . size ( ) ;', 'void setOutstr ( final DefaultFileContent . FileContentOutputStream outputStream )', 'void addInstr ( final InputStream is )', 'this . inputStreamList . add ( inputStream ) ;', 'void setOutstr ( final DefaultFileContent . FileContentOutputStream os )', 'public void removeRastr ( final RandomAccessContent randomAccessContent )', 'return this . rastrs . remove ( pos ) ;', 'outputStream . close ( ) ;', 'return this . outstr ;', 'private DefaultFileContent . FileContentOutputStream outputStream ;']","['if ( nread ! = - 1 )', 'if ( ch ! = EOF CHAR )', 'if ( ch ! = - 1 )', 'private static final int EOF CHAR = - 1 ;', 'return - 1 ;', 'if ( nread ! = EOF CHAR )', 'return EOF CHAR ;']","['private ChangeLastModificationTime ( )', 'public static void main ( final String [ ] args ) throws Exception {', 'public final class ChangeLastModificationTime', 'public final class ChangeLastModificationTime {', 'public static void main ( final String [ ] args ) throws Exception', 'private ChangeLastModificationTime ( ) {', '{', 'if ( args . length = = 0 ) {', 'if ( args . length = = 0 )', 'if ( cmd . length > 1 )']","['try ( final FileObject xmlFileObject = zipFileObject . resolveFile ( path ) ) {', 'private void testResolveAndParseXmlInZip ( final String xmlPathInZip , final String xsdPathInZip )', 'private void testResolveAndParseXmlInZip ( final String path , final String xsdPathInZip )', 'try ( final FileObject xmlFileObject = zipFileObject . resolveFile ( xmlPathInZip ) ) {']","['System . err . println ( ""File does not exist : "" + xsdFileObject ) ;']","['@ Ignore ( ""Should this be made to work ? "" )', '@ Ignore ( ""Shows that leaving a stream open and not closing any resource leaves the container file locked"" )']","['this . threadData . set ( data ) ;', 'final FileContentInputStream inputStream = ( FileContentInputStream ) fileContentThreadData', 'if ( streams ! = null & & streams . hasStreams ( ) ) {', 'threadLocal . remove ( ) ;', 'streams . setOutstr ( null ) ;', 'fileContentThreadData . removeRastr ( rac ) ;', 'ra . close ( ) ;', 'if ( fileContentThreadData ! = null & & fileContentThreadData . hasStreams ( ) ) {', 'final FileContentOutputStream outstr = streams . getOutstr ( ) ;', 'outputStream . close ( ) ;']","['Assert . assertEquals ( "" < ? xml version = \\ ""1 . 0 \\ "" encoding = \\ ""UTF - 8 \\ "" ? > "" + System . lineSeparator ( ) + "" < Root"" + expectedId', 'readAndAssert ( fileObject , fileObject . getContent ( ) . getInputStream ( ) , expectedId ) ;', 'private void readAndAssert ( final InputStream inputStream , final String expectedId ) throws IOException {', 'Assert . assertEquals (', 'Assert . assertNotNull ( string ) ;', 'final String streamData = IOUtils . toString ( inputStream , ""UTF - 8"" ) ;', 'readAndAssert ( inputStream , ""2"" ) ;', 'fileObjectString , "" < ? xml version = \\ ""1 . 0 \\ "" encoding = \\ ""UTF - 8 \\ "" ? > "" + System . lineSeparator ( ) + "" < Root""', '+ "" > foo"" + expectedId + "" < / Root"" + expectedId + "" > "" + System . lineSeparator ( ) , string ) ;', 'throws IOException {']","['@ Ignore ( ""Trying to duplicate what I seeing using JAXP"" )']","['} while ( openStreams . compareAndSet ( count , count - 1 ) ) ;', 'if ( openStreams . decrementAndGet ( ) = = 0 ) {', 'if ( count < 1 ) {', 'if ( count = = 1 ) {', 'do {', '}', 'int count ;', 'count = openStreams . get ( ) ;', 'return ;']","['getAbstractFileSystem ( ) . close ( ) ;', 'if ( !afs . isOpen ( ) ) {', 'ZipFileSystem afs = getAbstractFileSystem ( ) ;', '}', 'afs . close ( ) ;']","['Server . stop ( ) ;', 'Server = NHttpFileServer . start ( SocketPort , new File ( getTestDirectory ( ) ) , 5000 ) ;', 'Server = new NHttpServer ( ) ;', 'import org . apache . commons . vfs2 . util . NHttpFileServer ;', 'private static NHttpServer Server ;', 'Server . shutdown ( 5000 , TimeUnit . SECONDS ) ;', '}', 'import java . util . concurrent . TimeUnit ;', 'throw new IllegalStateException ( ""The embedded HTTP server has not completed startup , increase wait time"" ) ;', 'private static NHttpFileServer Server ;']","['+ expectedId + "" > foo"" + expectedId + "" < / Root"" + expectedId + "" > "" + System . lineSeparator ( ) ,', 'fileObjectString , "" < ? xml version = \\ ""1 . 0 \\ "" encoding = \\ ""UTF - 8 \\ "" ? > "" + System . lineSeparator ( ) + "" < Root""']","['this . filesystem = ( SftpFileSystem ) fileObject . getFileSystem ( ) ;', 'private SftpFileSystem fileSystem ;', 'private SftpFileSystem filesystem ;', 'this . fileSystem = ( SftpFileSystem ) fileObject . getFileSystem ( ) ;']","['public SftpProviderTestCase ( final boolean streamProxyMode ) throws IOException {', 'private static void setUpClass ( ) throws FtpException , IOException {', 'private static void setUpClass ( ) throws FtpException , IOException , InterruptedException {', 'public SftpProviderTestCase ( final boolean streamProxyMode ) {']","['final FileObject fo = getManager ( ) . resolveFile ( FILE ) ;', 'import org . junit . Assert ;', 'final FileName fn = getManager ( ) . resolveFile ( name ) . getName ( ) ;', 'Assert . assertNotNull ( ""Unexpected null manager for test "" + this , manager ) ;', 'final FileName fn = manager . resolveFile ( name ) . getName ( ) ;', 'import org . apache . commons . vfs2 . impl . DefaultFileSystemManager ;', 'final FileObject fo = manager . resolveFile ( FILE ) ;', 'final DefaultFileSystemManager manager = getManager ( ) ;', 'return ""AbstractProviderTestCase [ baseFolder = "" + baseFolder + "" , readFolder = "" + readFolder + "" , writeFolder = ""', 'public String toString ( ) {']","['final FileObject uriFile = getManager ( ) . resolveFile ( uri ) ;', 'import org . junit . Assert ;', 'final FileObject absFile = getManager ( ) . resolveFile ( fileName ) ;', 'DefaultFileSystemManager manager = getManager ( ) ;', 'Assert . assertNotNull ( ""Unexpected null manager for test "" + this , manager ) ;', 'final FileObject absFile = manager . resolveFile ( fileName ) ;', 'final FileObject uriFile = manager . resolveFile ( uri ) ;', 'import org . apache . commons . vfs2 . impl . DefaultFileSystemManager ;']","['Assert . assertNotNull ( ""Unexpected null manager for test "" + this , manager ) ;', 'try ( final FileObject absFile = manager . resolveFile ( fileName ) ) {', 'final FileObject absFile = manager . resolveFile ( fileName ) ;', 'Assert . assertNotNull ( ""Unexpected null manager for test "" + this , manager ) ;', 'assertSame ( ""file object"" , absFile , uriFile ) ;', '}', 'final String uri = ""file : / / "" + fileName . replace ( File . separatorChar , \' / \' ) ;', 'final String uri = ""file : / / "" + fileName . replace ( File . separatorChar , \' / \' ) ;', 'final FileObject uriFile = manager . resolveFile ( uri ) ;', 'assertSame ( ""file object"" , absFile , uriFile ) ;']","['Assert . assertNotNull ( ""Unexpected null manager for test "" + this , manager ) ;', 'Assert . assertNotNull ( ""Unexpected null manager for test "" + this , manager ) ;']","['final Integer timeout = builder . getTimeout ( fileSystemOptions ) ;', 'if ( sessionTimeout ! = null ) {', 'session . setTimeout ( timeout . intValue ( ) ) ;', 'session . setTimeout ( sessionTimeout . intValue ( ) ) ;', 'if ( timeout ! = null ) {', 'final Integer sessionTimeout = builder . getSessionTimeoutMillis ( fileSystemOptions ) ;', 'channel . connect ( ) ;', 'private final int connectTimeoutMillis ;', 'final SftpFileSystemConfigBuilder builder = SftpFileSystemConfigBuilder . getInstance ( ) ;', 'channel . connect ( connectTimeoutMillis ) ;']","['ZipFileSystem afs = getAbstractFileSystem ( ) ;', 'final ZipFileSystem afs = getAbstractFileSystem ( ) ;', 'DefaultFileSystemManager manager = getManager ( ) ;', 'final DefaultFileSystemManager manager = getManager ( ) ;', 'private void readAndAssert ( InputStream inputStream ) throws IOException {', 'final String string = IOUtils . toString ( inputStream , ""UTF - 8"" ) ;', 'String string = IOUtils . toString ( inputStream , ""UTF - 8"" ) ;', 'private void readAndAssert ( final InputStream inputStream ) throws IOException {', 'public TestEntityResolver ( final FileObject containerFile , FileObject sourceFile ) {', 'public TestEntityResolver ( final FileObject containerFile , final FileObject sourceFile ) {']","['import java . util . regex . Matcher ;', 'BaseFolder . resolveFile ( ""a . xhtml"" ) . createFile ( ) ;', 'final FileObject [ ] list = BaseFolder . findFiles ( new PatternFileSelector ( "" ^ . * \\ \\ / b . htm$"" ) ) ;', 'BaseFolder . resolveFile ( ""a . html"" ) . createFile ( ) ;', '@ Test', 'BaseFolder . resolveFile ( ""a . htm"" ) . createFile ( ) ;', 'BaseFolder . resolveFile ( ""aa . xhtml"" ) . createFile ( ) ;', 'Assert . assertEquals ( 1 , list . length ) ;', '}', 'import static org . junit . Assert . assertEquals ;']","['final HttpFileObject httpFile = ( HttpFileObject ) FileObjectUtils . getAbstractFileObject ( fileContent . getFile ( ) ) ;', 'try ( final HttpFileObject < HttpFileSystem > httpFile = ( HttpFileObject < HttpFileSystem > ) FileObjectUtils', 'try {', '. getAbstractFileObject ( fileContent . getFile ( ) ) ) {']","['return new HttpFileObject ( name , this ) ;', 'return new HttpFileObject < > ( name , this ) ;']","['return new HttpRandomAccessContent ( this , mode ) ;', 'return new HttpRandomAccessContent < > ( this , mode ) ;', 'HttpRandomAccessContent ( final HttpFileObject fileObject , final RandomAccessMode mode ) {', 'private final HttpFileObject < FS > fileObject ;', 'class HttpRandomAccessContent extends AbstractRandomAccessStreamContent {', 'class HttpRandomAccessContent < FS extends HttpFileSystem > extends AbstractRandomAccessStreamContent {', 'private final HttpFileObject fileObject ;', 'HttpRandomAccessContent ( final HttpFileObject < FS > fileObject , final RandomAccessMode mode ) {']","['if ( stat . isDir ( ) ) {', 'if ( stat . isDirectory ( ) ) {']","['public boolean traverseDescendents ( final FileSelectInfo fileInfo ) {', 'public boolean includeFile ( final FileSelectInfo fileInfo ) throws Exception {', 'public boolean includeFile ( final FileSelectInfo fileInfo ) {', 'public boolean traverseDescendents ( final FileSelectInfo fileInfo ) throws Exception {', 'public boolean traverseDescendents ( final FileSelectInfo fileInfo ) {', 'public boolean includeFile ( final FileSelectInfo fileInfo ) throws Exception {', 'public boolean includeFile ( final FileSelectInfo fileInfo ) {', 'public boolean traverseDescendents ( final FileSelectInfo fileInfo ) throws Exception {', 'public boolean traverseDescendents ( final FileSelectInfo fileInfo ) {', 'public boolean includeFile ( final FileSelectInfo fileInfo ) throws Exception {']","['close ( ) ;', '@ Test', 'try ( InputStream stream = file . getContent ( ) . getInputStream ( ) ) {', 'public void testMarkingWhenReadingEOS ( ) throws Exception {', 'public class DefaultFileContentTest {', '}', 'Assert . assertEquals ( readCount , - 1 ) ;', 'outputStream . flush ( ) ;', 'try ( FileObject file = fileSystemManager . resolveFile ( temp . getAbsolutePath ( ) ) ) {', 'File temp = File . createTempFile ( ""temp - file - name"" , "" . tmp"" ) ;']","['throw new FileSystemException ( ""vfs . provider . url / badly - formed - uri . error"" , uri ) ;', '}', 'if ( cl = = null ) {']","['cl = getClass ( ) . getClassLoader ( ) ;', 'if ( cl ! = null ) {', 'return getClass ( ) . getClassLoader ( ) . loadClass ( className ) ;', 'res = getValidClassLoader ( getClass ( ) ) . getResources ( name ) ;', 'return cl ;', 'private ClassLoader getValidClassLoader ( final Class < ? > clazz ) {', 'res = getClass ( ) . getClassLoader ( ) . getResources ( name ) ;', 'return cl ;', 'if ( cl = = null ) {', 'return getValidClassLoader ( getClass ( ) ) . loadClass ( className ) ;']","['resourceName = resourceName . replace ( \' . \' , \' / \' ) + "" . properties"" ;', 'resourceName = resourceName . replace ( \' . \' , \' / \' ) + "" . properties"" ;', 'while ( resources . hasMoreElements ( ) ) {', 'if ( loader ! = null ) {', 'try {', 'while ( resources . hasMoreElements ( ) ) {', 'final Enumeration < URL > resources = loader . getResources ( resourceName ) ;', 'try {', 'properties . load ( resource . openConnection ( ) . getInputStream ( ) ) ;', 'final Enumeration < URL > resources = loader . getResources ( resourceName ) ;']","['FileOperationProvider [ ] ops = mgr . getOperationProviders ( scheme ) ;', 'final List < String > physical = new ArrayList < > ( ) ;', 'List < String > physical = new ArrayList < > ( ) ;', 'final List < String > virtual = new ArrayList < > ( ) ;', 'private void info ( String scheme ) throws Exception {', 'private void info ( final String scheme ) throws Exception {', '} catch ( Exception ignored ) {', 'private static String getVersion ( final Class < ? > cls ) {', 'String [ ] schemes = mgr . getSchemes ( ) ;', '} catch ( final Exception ignored ) {']","['} catch ( final Exception e ) {', '} catch ( final Exception e ) {', 'throw exc ;', 'synchronized ( fs ) {', 'try {', 'throw exc ;', 'if ( content ! = null ) {', 'try {', 'detach ( ) ;', 'if ( content ! = null ) {']","['System . out . println ( "" operations : "" + ops ) ;', 'System . out . println ( "" operations : "" + Arrays . asList ( ops ) ) ;', 'import java . util . Arrays ;', 'if ( data = = null | | data . length < 0 ) {', 'if ( data = = null ) {', 'this . children = new HashMap < > ( ) ;', 'this . children = new HashMap < > ( ) ;', 'for ( final FileObject element : newChildren ) {', 'for ( final FileObject element : newChildren ) {', '}']","['public synchronized int read ( ) throws IOException {', 'public int read ( ) throws IOException {']","['System . out . println ( "" operations : "" + Arrays . asList ( ops ) ) ;', 'System . out . println ( "" operations : "" + Arrays . toString ( ops ) ) ;', 'import org . apache . commons . vfs2 . operations . FileOperation ;']","['} catch ( Exception e ) {', 'httpClient4Available = true ;', 'try {', 'boolean httpClient4Available = false ;', 'Class . forName ( ""org . apache . http . client . HttpClient"" ) ;', 'manager . addProvider ( ""http4s"" , ( FileProvider ) Class . forName ( ""org . apache . commons . vfs2 . provider . http4s . Http4sFileProvider"" ) . newInstance ( ) ) ;', 'import org . apache . commons . vfs2 . provider . FileProvider ;', 'if ( httpClient4Available ) {', 'e . printStackTrace ( ) ;', '}']","['mgr = VFS . getManager ( ) ;', 'System . out . println ( ""Custom providers configuration used : "" + providersUrl ) ;', 'pwfs ( ) ;', '( ( StandardFileSystemManager ) mgr ) . setConfiguration ( providersUrl ) ;', 'import org . apache . commons . vfs2 . impl . StandardFileSystemManager ;', '} else if ( cmdName . equalsIgnoreCase ( ""pwfs"" ) ) {', 'if ( providersUrl ! = null ) {', 'final URL providersUrl = ( providers ! = null ) ? Shell . class . getResource ( "" / "" + providers ) : null ;', 'private void pwfs ( ) {', 'import java . net . URL ;']","['} catch ( Exception e ) {', '} catch ( final Exception e ) {', 'protected FileSystem doCreateFileSystem ( FileName name , FileSystemOptions fileSystemOptions )', '} catch ( final CertificateException e ) {', '} catch ( CertificateException e ) {', '} catch ( final KeyStoreException e ) {', '} catch ( NoSuchAlgorithmException e ) {', 'for ( final Cookie cookie : cookies ) {', '} catch ( IOException e ) {', 'protected FileSystem doCreateFileSystem ( final FileName name , final FileSystemOptions fileSystemOptions )']","['@ Override', '@ Override', '@ Override', '@ Override', '@ Override', '@ Override', '@ Override', '@ Override']","['virtual . add ( schemes [ i ] ) ;', 'virtual . add ( scheme ) ;', 'final Collection < Capability > caps = mgr . getProviderCapabilities ( schemes [ i ] ) ;', 'for ( String scheme : schemes ) {', 'for ( int i = 0 ; i < schemes . length ; i + + ) {', 'final Collection < Capability > caps = mgr . getProviderCapabilities ( scheme ) ;', 'physical . add ( schemes [ i ] ) ;', 'physical . add ( scheme ) ;', 'if ( !this . children . containsKey ( newChildren [ i ] . getName ( ) ) ) {', 'newChildrenMap . put ( element . getName ( ) , new Object ( ) ) ;']","['final BufferedReader reader = new BufferedReader ( new InputStreamReader ( instr ) ) ; )', 'final BufferedReader reader = new BufferedReader ( new InputStreamReader ( instr ) ) ; )']","['while ( reader . available ( ) ! = 0 ) {', 'msg . readFields ( reader ) ;', 'serviceWorker . getVertexPartitionOwner ( vertexId ) ;', 'import java . util . Map . Entry ;', 'M msg = oneToAllMsgs . createMessage ( ) ;', 'partitionIdMsgs . get ( partitionId ) ;', 'public void doRequest ( ServerData serverData ) {', 'import org . apache . hadoop . io . WritableComparable ;', 'public void writeRequest ( DataOutput output ) throws IOException {', 'serverData . getPartitionStore ( ) . getNumPartitions ( ) * 2 ;']","['wLock . unlock ( ) ;', 'if ( lock . isWriteLockedByCurrentThread ( ) ) {', 'wLock . unlock ( ) ;', '}']","['import static org . apache . giraph . conf . GiraphConstants . COMPUTATION CLASS ;', 'import static org . apache . giraph . conf . GiraphConstants . COMPUTATION CLASS ;', 'import org . apache . log4j . Logger ;', 'import com . google . common . collect . Lists ;', 'import com . google . common . collect . Lists ;', 'import org . apache . log4j . Logger ;', 'file . getParentFile ( ) . mkdirs ( ) ;', '}', 'inactive . size ( ) = = 0 ) {', 'LOG . error ( ""offloadPartition : Failed to create directory "" + file ) ;']","['new StrConfOption ( ""giraph . edge . output . subdir"" , ""edges"" ,', 'StrConfOption VERTEX OUTPUT FORMAT SUBDIR =', 'ClassConfOption < EdgeOutputFormat > EDGE OUTPUT FORMAT CLASS =', 'new BooleanConfOption ( ""giraph . textoutputformat . reverse"" , false ,', '""Reverse values in the output"" ) ;', 'new StrConfOption ( ""giraph . vertex . output . subdir"" , """" ,', '""EdgeOutputFormat sub - directory"" ) ;', 'BooleanConfOption GIRAPH TEXT OUTPUT FORMAT REVERSE =', 'EdgeOutputFormat . class , ""EdgeOutputFormat class"" ) ;', '""GiraphTextOuputFormat Separator"" ) ;']","['bytesLeftToSkip - = currentInput . available ( ) ;', 'moveToNextDataInput ( ) ;', 'currentInput . readFully ( b ) ;', 'checkIfShouldMoveToNextDataInput ( ) ;', 'for ( int i = currentPositionInInputs ; i < dataInputs . size ( ) ; i + + ) {', 'if ( currentInput . available ( ) = = 0 ) {', 'return available ;', 'while ( bytesLeftToSkip > = currentInput . available ( ) ) {', '}', 'int available = 0 ;']","['set ( ZOOKEEPER LIST , zkList ) ;', '}', 'ZOOKEEPER IS EXTERNAL . set ( this , false ) ;', 'return ZOOKEEPER IS EXTERNAL . get ( this ) ;', 'public boolean isZookeeperExternal ( ) {', 'public void setZookeeperList ( String zkList ) {']","['if ( serverPortList = = null & & startZooKeeperManager ( ) ) {', 'if ( serverPortList . isEmpty ( ) & & startZooKeeperManager ( ) ) {']","['WorkerProgress . writeToZnode ( zk , myProgressPath ) ;', 'Thread . sleep ( ( long ) ( WRITE UPDATE PERIOD MILLISECONDS * factor ) ) ;', '} catch ( InterruptedException e ) {', 'if ( LOG . isInfoEnabled ( ) ) {', 'public void stop ( ) {', '}', 'writerThread . start ( ) ;', 'try {', '} ) ;', 'private volatile boolean finished = false ;']","['LOG . info ( ""run : WorkerProgressWriter interrupted"" , e ) ;', 'LOG . info ( ""run : WorkerProgressWriter interrupted"" ) ;']","['} ) ;', '""destination = "" + writeFuture . channel ( ) . remoteAddress ( ) +', 'new NioClientSocketChannelFactory (', 'if ( !writeFuture . channel ( ) . isActive ( ) | |', 'private final ExecutorService bossExecutorService ;', 'writeFuture . channel ( ) . isActive ( ) +', 'new ThreadFactoryBuilder ( ) . setNameFormat ( ""netty - client - exec - % d"" )', '""cause = "" + writeFuture . cause ( ) + "" , "" +', 'executionHandler = new ExecutionHandler (', 'ProgressableUtils . awaitTerminationFuture ( executionGroup , context ) ;']","['protected abstract OutEdges < I , E > removePartitionEdges ( Et entry ,', 'Map < K , OutEdges < I , E > > partitionEdges ) ;', 'removePartitionEdges ( entry , partitionEdges ) ) ;', 'import org . apache . giraph . utils . ProgressableUtils ;', 'Progressable progressable ) {', 'protected boolean reuseEdgeObjects ;', 'vertexIdEdgeIterator . getCurrentEdge ( ) :', 'getPartitionEdgesIterator ( Map < K , OutEdges < I , E > > partitionEdges ) ;', 'ByteArrayVertexIdEdges < I , E > . VertexIdEdgeIterator vertexIdEdgeIterator ,', 'import org . apache . hadoop . io . WritableComparable ;']","['return extendedDataInput . available ( ) > 0 ;', 'ImmutableClassesGiraphConfiguration < I , ? , ? > conf ) {', 'protected I vertexId ;', '""with null arguments"" ) ;', 'implements VertexIdIterator < I > {', 'import org . apache . giraph . conf . ImmutableClassesGiraphConfiguration ;', 'return releasedVertexId ;', 'return vertexId ;', 'public abstract class ByteStructVertexIdIterator < I extends WritableComparable >', 'import org . apache . hadoop . io . WritableComparable ;']","['InputSplitEvents inputSplitEvents ) {', 'private Integer loadMapping ( ) throws KeeperException ,', 'waitForOtherWorkers ( edgeInputSplitsPaths , edgeInputSplitsEvents ) ;', 'int entriesLoaded = 0 ;', 'throw new IllegalStateException ( ""waitForOtherWorkers : "" +', 'localData . removeMappingStoreIfPossible ( ) ;', 'private void waitForOtherWorkers ( InputSplitPaths inputSplitPaths ,', 'partitionOwner . getWorkerInfo ( ) ) ;', 'waitForOtherWorkers ( vertexInputSplitsPaths , vertexInputSplitsEvents ) ;', 'LOG . info ( ""setup : Finally loaded a total of "" +']","['} ) ;', 'thread . setName ( ""ReactiveJMapHistoDumperSupervisorThread"" ) ;', '} catch ( InterruptedException e ) {', 'Thread . sleep ( sleepMillis ) ;', 'thread . start ( ) ;', 'LOG . warn ( ""JMap histogram sleep interrupted"" , e ) ;', 'thread = new Thread ( new Runnable ( ) {', 'joinSupervisorThread ( ) ;', 'import org . apache . giraph . conf . DefaultImmutableClassesGiraphConfigurable ;', 'import org . apache . giraph . conf . GiraphConstants ;']","['import com . google . common . util . concurrent . ThreadFactoryBuilder ;', 'private static class LogOnErrorChannelFutureListener', 'new ThreadFactoryBuilder ( ) . setNameFormat (', '}', 'new ThreadFactoryBuilder ( ) . setNameFormat ( ""netty - client - exec - % d"" )', 'private final LogOnErrorChannelFutureListener logErrorListener =', 'TaskInfo myTaskInfo ) {', 'if ( future . isDone ( ) & & !future . isSuccess ( ) ) {', '. build ( ) ) ;', 'public void operationComplete ( ChannelFuture future ) throws Exception {']","['""restartFromCheckpoint : KeeperException"" , e ) ;', 'import it . unimi . dsi . fastutil . ints . Int2ObjectOpenHashMap ;', 'List < WorkerInfo > chosenWorkerInfoList ,', 'workersMap . put ( worker . getTaskId ( ) , worker ) ;', 'getZkExt ( ) . deleteExt ( edgeInputSplitsPaths . getPath ( ) , - 1 ,', 'Int2ObjectMap < WorkerInfo > workersMap = new Int2ObjectOpenHashMap < > ( ) ;', 'checkPartitions ( masterGraphPartitioner . getCurrentPartitionOwners ( ) ) ;', 'finalizedOutputStream . writeInt ( chosenWorkerInfo . getTaskId ( ) ) ;', 'finalizedStream . close ( ) ;', 'WorkerInfo worker = workersMap . get ( mrTaskId ) ;']","['new ThreadFactoryBuilder ( )', 'PartitionMessage < I , M > message = null ;', 'return store . getVertexMessages ( vertexId ) ;', 'public boolean isPointerListEncoding ( ) {', 'partition2Queue = new Int2IntArrayMap ( ) ;', 'private final int threadsCount ;', 'int hash = partition2Queue . get ( partitionId ) ;', 'public void readFieldsForPartition ( DataInput in , int partitionId )', 'public void clearPartition ( int partitionId ) throws IOException {', 'import com . google . common . util . concurrent . ThreadFactoryBuilder ;']","['registerAggregator ( CONVERGED , BooleanOverwriteAggregator . class ) ;', 'import org . apache . giraph . aggregators . BooleanOverwriteAggregator ;', 'registerAggregator ( NEW MAXIMUM , BooleanOverwriteAggregator . class ) ;', 'IllegalAccessException {', 'setPhase ( Phases . TRIMMING ) ;', 'package org . apache . giraph . examples . scc ;', 'TRANSPOSE , TRIMMING ,', 'if ( !newMaxFound . get ( ) ) {', 'setPhase ( Phases . BACKWARD TRAVERSAL REST ) ;', 'public class SccPhaseMasterCompute extends DefaultMasterCompute {']","['reduceOp = new AggregatorReduceOperation < > ( ) ;', 'public class AggregatorToGlobalCommTranslation', 'globalComm . registerReduce (', 'IllegalAccessException {', 'Writable value = entry . getValue ( ) . currentValue ! = null ?', 'if ( value = = null ) {', 'value = entry . getValue ( ) . getReduceOp ( ) . createInitialValue ( ) ;', 'aggregatorWrapper =', 'globalComm . getReduced ( entry . getKey ( ) ) ;', 'registeredAggregators = new HashMap < > ( ) ;']","['getSavedCheckpointBasePath ( superstep ) + CHECKPOINT FINALIZED POSTFIX ;', 'long firstCheckpoint = INPUT SUPERSTEP + 1 + checkpointFrequency ;', 'String finalizedCheckpointPath =', 'CheckpointingUtils . CHECKPOINT FINALIZED POSTFIX ) ;', 'CHECKPOINT FINALIZED POSTFIX ) ;', '"" . "" + mrTaskId + CheckpointingUtils . CHECKPOINT METADATA POSTFIX ) ) ;', '"" . "" + mrTaskId + CHECKPOINT METADATA POSTFIX ) ) ;', 'String finalizedCheckpointPath = getSavedCheckpointBasePath ( superstep ) +', 'long firstCheckpoint = INPUT SUPERSTEP + 1 ;', 'CheckpointingUtils . CHECKPOINT FINALIZED POSTFIX ;']","['LOG . error ( ""Unable to start zookeeper"" , e ) ;', '} catch ( IOException e ) {', 'serverRunner = new ZooKeeperServerRunner ( ) ;', '}', 'try {', 'package org . apache . giraph . zk ;', 'private ZooKeeperServerRunner serverRunner ;', '} ) ;', 'Logger . getLogger ( InProcessZooKeeperRunner . class ) ;', 'import java . io . IOException ;']","['thread . setDaemon ( true ) ;', 'thread . setDaemon ( true ) ;', '} ) ;', 'writerThread . setDaemon ( true ) ;', '} , ""workerProgressThread"" ) ;']","['private boolean stop = false ;', 'LOG . info ( ""JMap histogram sleep interrupted"" , e ) ;', 'LOG . warn ( ""JMap histogram sleep interrupted"" , e ) ;', 'thread . interrupt ( ) ;', 'private volatile boolean stop = false ;']","['} ) ;', 'Thread . sleep ( MEMORY OBSERVER SLEEP MS ) ;', 'LOG . warn ( ""Exception occurred"" , e ) ;', 'thread . setDaemon ( true ) ;', 'thread . setName ( ""memory - observer"" ) ;', 'Thread thread = new Thread ( new Runnable ( ) {', '} catch ( InterruptedException e ) {', 'thread . start ( ) ;', 'try {', 'private final String zkPath ;']","['if ( entry . getValue ( ) . getLeft ( ) > minBufferSizeToOffload ) {', 'result . add ( entry . getKey ( ) ) ;', 'public Set < Integer > getCandidateBuffersToOffload ( ) {', 'BufferedInputStream bis = new BufferedInputStream ( fis ) ;', '@ edu . umd . cs . findbugs . annotations . SuppressWarnings (', 'rwLock . writeLock ( ) . lock ( ) ;', 'protected abstract T readNextEntry ( DataInput in ) throws IOException ;', 'dataBuffers . putIfAbsent ( partitionId , newPair ) ;', 'entryList . add ( entry ) ;', 'numDataBuffersOnDisk . putIfAbsent ( partitionId , numBuffers ) ;']","['} ) ;', 'killThread . start ( ) ;', 'killThread . setDaemon ( true ) ;', 'if ( LOG . isInfoEnabled ( ) ) {', '}', 'writerThread = new Thread ( new Runnable ( ) {', 'if ( LOG . isDebugEnabled ( ) ) {', 'Thread killThread = new Thread ( new Runnable ( ) {', 'writerThread . setDaemon ( true ) ;', 'Thread . sleep ( maxAllowedJobTimeMs ) ;']","['printValueFromHost ( out , "" fastest : "" , timeUnit , aggregatedMetric . min ( ) ) ;', 'printValueFromHost ( out , "" largest : "" , unit , aggregatedMetric . min ( ) ) ;', 'printValueFromHost ( out , "" slowest : "" , timeUnit , aggregatedMetric . max ( ) ) ;', 'printValueFromHost ( out , "" smallest : "" , unit , aggregatedMetric . max ( ) ) ;', 'out . println ( "" mean : "" + aggregatedMetric . mean ( ) + "" "" + timeUnit ) ;', 'import org . apache . giraph . ooc . OutOfCoreIOCallable ;', 'AggregatedMetric aggregatedMetric = metrics . get ( name ) ;', 'out . println ( "" mean : "" + aggregatedMetric . mean ( ) + "" "" + unit ) ;', ""out . println ( prefix + vh . getValue ( ) + ' ' + timeUnit +"", 'metrics . put ( name , aggregatedMetric ) ;']","['} ) ;', 'return quorumRunner . start ( config ) ;', '"" in standalone mode"" ) ;', 'public int start ( String zkDir , final ZookeeperConfig config ) {', 'LOG . error ( ""Invalid config , zookeeper failed"" , e ) ;', 'return - 1 ;', 'runFromConfig ( serverConfig ) ;', 'return serverRunner . start ( config ) ;', 'Thread zkThread = new Thread ( new Runnable ( ) {', '} ) ;']","['( writeFuture . isDone ( ) & & !writeFuture . isSuccess ( ) ) | |', '( writeFuture . isDone ( ) & & !writeFuture . isSuccess ( ) ) | |', '( requestInfo . getElapsedMsecs ( ) > maxRequestMilliseconds ) ) {', '( requestInfo . getElapsedMsecs ( ) > maxRequestMilliseconds ) ;', 'private static class LogOnErrorChannelFutureListener', 'return !writeFuture . channel ( ) . isActive ( ) | |', 'if ( !writeFuture . channel ( ) . isActive ( ) | |', 'import org . apache . giraph . function . Predicate ;', '}', 'ChannelFuture writeFuture = requestInfo . getWriteFuture ( ) ;']","['private List < ExtendedDataOutput > dataOutputs ;', 'getDataOutputToWriteTo ( b . length + SIZE DELTA ) . write ( b ) ;', 'dataOutputs = new ArrayList < ExtendedDataOutput > ( 1 ) ;', 'getDataOutputToWriteTo ( len + SIZE DELTA ) . write ( b , off , len ) ;', 'currentDataOutput = conf . createExtendedDataOutput ( initialSize ) ;', 'if ( currentDataOutput . getPos ( ) + additionalSize > = getMaxSize ( ) ) {', '} else {', '}', 'if ( currentDataOutput . getPos ( ) + SIZE DELTA < MAX SIZE ) {', 'protected ExtendedDataOutput currentDataOutput ;']","['return requestInfo . getWriteFuture ( ) = = future ;', 'return requestInfo . getWriteFuture ( ) . channel ( ) . remoteAddress ( ) . equals (', 'private void checkRequestsAfterChannelFailure ( final ChannelFuture future ) {', '}', 'checkRequestsAfterChannelFailure ( future ) ;', 'Exception {', 'checkRequestsAfterChannelFailure ( future . channel ( ) ) ;', 'checkRequestsAfterChannelFailure ( ctx . channel ( ) ) ;', 'public void channelUnregistered ( ChannelHandlerContext ctx ) throws', 'super . channelUnregistered ( ctx ) ;']","['"" coefficients , but "" + validColumnIndices . size ( ) +', 'if ( oldGenUsage > 0 ) {', 'changed = refineCoefficient ( 4 , 1 , 2 , xValues , yValues ) ;', 'boolean validIndex = false ;', 'thread . setUncaughtExceptionHandler ( oocEngine . getServiceWorker ( )', 'this . memoryEstimator = new MemoryEstimator ( this . oocBytesInjected ,', 'LOG . warn ( ""run : exception occurred!"" , e ) ;', '""If mem - usage is above this threshold , credit is set to 0"" ) ;', 'while ( true ) {', 'coefficient [ 5 ] = beta [ validColumnIndices . size ( ) ] ;']","['calculateRegression ( coefficient , validColumnIndices , mlr ) ;', 'return false ;', 'throws Exception {', 'LOG . warn ( ""There are "" + coefficient . length +', 'LOG . warn ( ""addRecord : exception occurred!"" , e ) ;', 'changed = result ;', 'double upperBound , double [ ] [ ] xValues , double [ ] yValues )', 'if ( !result ) {', 'changed = refineCoefficient ( 4 , 1 , 2 , xValues , yValues ) ;', 'double upperBound , double [ ] [ ] xValues , double [ ] yValues ) {']","['new BlockOutputHandle ( getContext ( ) . getJobID ( ) . toString ( ) ,', 'new BlockOutputHandle ( ) ) ) ;', 'getConf ( ) , getContext ( ) ) ) ) ;', 'private final Map < String , Queue < BlockOutputWriter > > freeWriters ;', 'outputDescMap = null ;', 'private final Map < String , Queue < BlockOutputWriter > > occupiedWriters ;', '""Output cannot be used with checkpointing"" ) ;', 'occupiedWriters = new HashMap < > ( ) ;', 'new HashMap < > ( ) ;', 'freeWriters = new HashMap < > ( ) ;']","['for ( Entry < ? extends Number , ? extends Number > edge : edges ) {', 'return testGraph . getVertex ( numberToVertexId ( vertexId ) ) . getValue ( ) ;', 'for ( Number edge : edges ) {', 'edgeSupplier ! = null ?', 'public void addSymmetricEdge ( Number vertexId , Number toVertex , E edgeValue ) {', 'public String toString ( ) {', 'return ( Function ) numberToLong ( ) ;', 'import org . apache . giraph . conf . GiraphConfiguration ;', 'edgesList . add ( EdgeFactory . create (', 'public class NumericTestGraph < I extends WritableComparable ,']","['""Guava has RegularImmutableList missing"" , e ) ;', 'try {', 'throw new IllegalStateException (', 'Serializer serializer ) {', 'kryo . register (', 'throw new IllegalStateException ( ""Class "" + className + "" is missing"" , e ) ;', 'try {', 'private static void registerSerializer ( HadoopKryo kryo , String className ,', 'Class . forName ( ""com . google . common . collect . RegularImmutableList"" ) ,', '""com . google . common . collect . SingletonImmutableBiMap"" ,']","['import org . apache . giraph . function . primitive . Obj2DoubleFunction ;', 'SupplierFromVertex < I , V , E , IntWritable >', 'import org . apache . hadoop . io . IntWritable ;', '}', 'import org . apache . giraph . function . primitive . Obj2IntFunction ;', 'SupplierFromVertex < I , V , E , DoubleWritable >', 'import org . apache . giraph . graph . Vertex ;', 'public static', 'private ReusableSuppliers ( ) { }', 'import org . apache . giraph . function . primitive . Obj2LongFunction ;']","['Math . max ( 10 , ( int ) partition . getVertexCount ( ) ) ,', 'Math . max ( 10 ,', 'service . getPartitionStore ( ) . getOrCreatePartition ( partitionId ) ;', '. getPartitionVertexCount ( partitionId ) ) ,', 'Partition < I , ? , ? > partition =', '( int ) service . getPartitionStore ( )', 'service . getPartitionStore ( ) . putPartition ( ( Partition ) partition ) ;', 'import org . apache . giraph . partition . Partition ;', 'Math . max ( 10 , ( int ) partition . getVertexCount ( ) ) , messageWriter ) ;', '. getPartitionVertexCount ( partitionId ) ) , messageWriter ) ;']","['for ( IntWritable receivedValue : messages ) {', 'import org . apache . giraph . function . ObjectTransfer ;', 'workerApi . sendMessageToMultipleEdges (', 'public String toString ( ) {', '@ Override', 'BlockWorkerReceiveApi < I > workerApi ,', 'Consumer < Boolean > converged ,', 'private static < I extends WritableComparable , V extends Writable >', 'edgeSupplier', 'setDistance . apply ( vertex , next ) ;']","['public ConcurrentHashMap < I , VertexMutations < I , V , E > >', 'throw new IllegalStateException ( ""resolvePartitionMutations : "" +', 'import java . util . concurrent . ConcurrentHashMap ;', 'if ( !Iterables . isEmpty ( destinations ) ) {', 'private final ConcurrentHashMap < I , VertexMutations < I , V , E > >', 'try {', 'getVertexMutations ( ) {', '} else if ( originalVertex ! = null ) {', 'vertexMutations = new ConcurrentHashMap < I , VertexMutations < I , V , E > > ( ) ;', 'partitionMutations = Maps . newConcurrentMap ( ) ;']","['if ( hostname . equals ( taskInfo . getHostname ( ) ) & &', 'if ( getHostname ( ) . equals ( taskInfo . getHostname ( ) ) & &']","['this . context = context ;', 'private final Mapper < ? , ? , ? , ? > . Context context ;', 'context . progress ( ) ;']","['int getNumPartitionsOwned ( ) ;', 'new SimplePartitionStore < I , V , E > ( conf , context ) ;', 'new SimplePartitionStore < I , V , E > ( conf , context , getServiceWorker ( ) ) ;', 'import org . apache . giraph . edge . EdgeStore ;', 'import org . apache . giraph . ooc . DiskBackedPartitionStore ;', 'edgeStore = edgeStoreFactory . newStore ( ) ;', 'private final EdgeStore < I , V , E > edgeStore ;', '}', 'public EdgeStore < I , V , E > getEdgeStore ( ) {', 'import org . apache . giraph . partition . DiskBackedPartitionStore ;']","['incomingMessageStore = null ;', '. clearVertexMessages ( vertexId ) ;', 'messageStoreFactory ,', 'Collections . synchronizedList ( new ArrayList < Writable > ( ) ) ;', 'try {', 'Iterable < I > destinations = getPartitionStore ( ) . getCurrentMessageStore ( ) .', 'currentMessageStore = null ;', 'partitionStore . prepareSuperstep ( ) ;', 'currentMessageStore . clearAll ( ) ;', 'getPartitionStore ( ) . resetMessageStores ( ) ;']","['public BasicSet < IntWritable > createOpenHashSet ( int capacity ) {', 'public BasicSet < IntWritable > createOpenHashSet ( long capacity ) {', 'public BasicSet < LongWritable > createOpenHashSet ( int capacity ) {', 'public BasicSet < LongWritable > createOpenHashSet ( long capacity ) {', 'BasicSet < T > createOpenHashSet ( int capacity ) ;', 'BasicSet < T > createOpenHashSet ( long capacity ) ;', 'implements BasicSet < LongWritable > {', 'public BasicLongOpenHashSet ( long capacity ) {', 'out . writeInt ( set . size ( ) ) ;', '( ( IntOpenHashBigSet ) set ) . trim ( Math . max ( set . size ( ) , n ) ) ;']","['@ Override', 'public void jobGotAllMappers ( Job job ) {', '}', 'JobProgressTrackerService . createJobProgressServer ( conf ) ;', 'JobProgressTrackerService . createJobProgressServer ( conf , jobObserver ) ;', 'GiraphJobObserver jobObserver = conf . getJobObserver ( ) ;', 'GiraphJobObserver jobObserver = conf . getJobObserver ( ) ;', 'void jobGotAllMappers ( Job job ) ;', 'GiraphConfiguration conf ) {', 'GiraphJobObserver jobObserver ) {']","['""InitializeBFS"" ,', 'IntWritable notReachableVertex = new IntWritable ( - 1 ) ;', 'setDistance . apply ( vertex , zero ) ;', 'BlockWorkerSendApi < I , V , Writable , M > workerApi ,', 'SupplierFromVertex < I , V , Writable , ? extends Iterable < ?', 'traverseVertex ,', 'new IntWritable ( - 1 ) ;', 'Class < ByteWritable > messageClass = ByteWritable . class ;', 'for ( IntWritable receivedValue : messages ) {', 'ObjectTransfer < ByteWritable > vertexUpdatedDistance = new ObjectTransfer < > ( ) ;']","['public static final String VERTEX INPUT SPLITS ALL READY NODE =', '} else if ( event . getPath ( ) . contains ( INPUT SPLITS WORKER DONE DIR ) & &', 'this . mappingInputSplitsEvents = new InputSplitEvents ( context ) ;', '}', 'public static final String MAPPING INPUT SPLITS ALL READY NODE =', 'inputSplitsWorkerDonePath = basePath + INPUT SPLITS WORKER DONE DIR ;', 'return eventProcessed ;', 'inputSplitsAllDonePath = basePath + INPUT SPLITS ALL DONE NODE ;', '"" / mappingInputSplitsAllDone"" ;', 'if ( LOG . isInfoEnabled ( ) ) {']","['new IntConfOption ( ""giraph . minPartitionsPerComputeThread"" , 1 ,', 'IntConfOption MIN PARTITIONS PER COMPUTE THREAD =', '""Minimum number of partitions to have per compute thread"" ) ;', 'numWorkers , conf ) ;', 'workerInfos . size ( ) , conf ) ;', 'numPartitions = PartitionUtils . computePartitionCount ( workerInfos ,', 'numPartitions = PartitionUtils . computePartitionCount (', 'numWorkers , conf ) ;', 'numPartitions =', 'numPartitions = PartitionUtils . computePartitionCount ( workerInfos ,']","['String getLocalHostOrIp ( ) ;', 'String getLocalHostOrIp ( ) ;', 'address = new InetSocketAddress ( address . getHostName ( ) ,', 'taskInfo . getHostOrIp ( ) , taskInfo . getPort ( ) ) ;', 'taskInfo . getInetSocketAddress ( ) ) ;', 'address = new InetSocketAddress ( hostOrIp ,', 'int maxResolveAddressAttempts , InetSocketAddress address ) {', 'InetSocketAddress address = new InetSocketAddress ( hostOrIp , port ) ;', 'int maxResolveAddressAttempts , String hostOrIp , int port ) {', 'public String getLocalHostOrIp ( ) {']","['int getWorkerCount ( ) ;', 'extends AggregatorUsage , BlockApi {', 'extends BlockApi , AggregatorUsage , WorkerIndexUsage < I > {', 'import org . apache . giraph . worker . WorkerIndexUsage ;', 'ImmutableClassesGiraphConfiguration < ? , ? , ? > getConf ( ) ;', 'extends AggregatorUsage , BlockApi , WorkerIndexUsage < I > {', 'import org . apache . giraph . conf . ImmutableClassesGiraphConfiguration ;', '@ SuppressWarnings ( ""rawtypes"" )', 'int getWorkerCount ( ) ;', 'import org . apache . hadoop . io . WritableComparable ;']","['public interface IntSupplier {', 'public interface IntSupplier extends Serializable {', 'import java . io . Serializable ;']","['public void testPageRankSyntheticGraphLowDegree ( ) throws Exception {', '} ) ;', 'LocalBlockRunner . RUN ALL CHECKS . set ( conf , false ) ;', '@ Test', 'AbstractPageRankExampleBlockFactory . NUM ITERATIONS . set ( conf , 10000 ) ;', 'BlockUtils . setBlockFactoryClass ( conf , PageRankExampleBlockFactory . class ) ;', '}', 'new Small1GraphInit < LongWritable , DoubleWritable , NullWritable > ( ) ,', 'import org . apache . giraph . conf . GiraphConfiguration ;', 'public class TestLocalBlockRunnerSpeed {']","['return WritableUtils . createCopy ( original ) ;', '}', 'import org . apache . giraph . utils . WritableUtils ;', 'public T copy ( Kryo kryo , T original ) {', '@ Override', '@ Test', 'public void test1 ( ) {', 'public class DirectWritableSerializerCopyTest {', '}', 'package org . apache . giraph . writable . kryo ;']","['import com . google . common . hash . Funnel ;', 'I thisVertexId = vertex . getId ( ) ;', 'return result ;', '}', 'SupplierFromVertex < I , Writable , Writable , LongWritable >', 'Hasher h = hashFunction . newHasher ( ) ;', 'return Pieces . reduce (', '""HashEdges"" ,', 'import org . apache . giraph . graph . Vertex ;', 'Vertex < I , Writable , Writable > vertex ,']","['} ) . start ( ) ;', '} ) ;', 'new Thread ( new Runnable ( ) {', 'killThread . setDaemon ( true ) ;', 'Thread killThread = new Thread ( new Runnable ( ) {', 'writerThread . setDaemon ( true ) ;', 'killThread . start ( ) ;']","['String . format ( ""In % 6d % s ( s ) "" , superstep , workerPieces . toStringShort ( ) )', 'long millis , StatusReporter reporter ,', '""In % 6 . 1f % s ( s ) "" , superstep - 0 . 5 , masterPiece . getPiece ( ) )', 'TimeStatsPerEvent timeStats ) {', 'long millis , StatusReporter reporter ) {', 'String name = workerPieces . toStringShort ( ) ;', 'timeStats . inc ( name , millis ) ;', 'String . format ( ""In % 6d % s ( s ) "" , superstep , name )', 'String name = masterPiece . getPiece ( ) . toString ( ) ;', '""In % 6 . 1f % s ( s ) "" , superstep - 0 . 5 , name )']","['try {', 'try {', '""barrierOnWorkerList : IllegalException - Couldn\'t get "" +', 'lastRegularRunTimeMsec ;', '}', 'final int waitBetweenLogInfoMsec = 30 * 1000 ;', '""barrierOnWorkerList : KeeperException - Couldn\'t get "" +', 'boolean eventTriggered = event . waitMsecs ( eventLoopTimeout ) ;', '} catch ( InterruptedException e ) {', '""barrierOnWorkerList : IllegalException - Couldn\'t get "" +']","['public interface BooleanConsumer extends Serializable {', 'package org . apache . giraph . function . primitive ;', '}', 'void apply ( boolean input ) ;', 'import java . io . Serializable ;', 'public interface ByteConsumer extends Serializable {', 'void apply ( byte input ) ;', 'package org . apache . giraph . function . primitive ;', '}', 'import java . io . Serializable ;']","['curValue . getInto ( index , reusable ) ;', 'public WArrayList < R > createInitialValue ( ) {', 'list . add ( initialElement ) ;', 'implements ReduceOperation < Pair < IntRef , S > , WArrayList < R > > {', 'final ReducerHandle < Pair < IntRef , S > , BasicArrayList < R > > reduceHandle =', 'list . addW ( initialElement ) ;', 'valueToReduce . getInto ( i , reusable2 ) ;', 'import org . apache . giraph . types . ops . collections . array . WArrayList ;', 'result . getInto ( curIndex . value , reusableValue ) ;', 'public WArrayList < R > reduce (']","['ExtendedByteArrayDataOutput > {', 'ImmutableClassesGiraphConfiguration < I , ? , ? > conf', 'ExtendedByteArrayDataOutput out = getReceiverFor ( id ) ;', 'final List < byte [ ] > out = removeFor ( id ) ;', 'Class < I > idClass , MessageValueFactory < M > messageFactory ) {', 'out . getByteArray ( ) , 0 , out . getPos ( )', 'final List < byte [ ] > out = received . remove ( id ) ;', 'ExtendedDataOutput out = getReceiverFor ( id ) ;', 'final MessageClasses < I , M > messageClasses ) {', 'Class < I > idClass , MessageValueFactory < M > messageFactory ,']","['out . writeByte ( value & 0x7F ) ;', 'long value ,', 'i + = 7 ;', 'writeVarInt ( ( value < < 1 ) ^ ( value > > 31 ) , out ) ;', '}', 'private static void writeVarInt (', 'out . writeByte ( ( int ) value & 0x7F ) ;', 'import com . google . common . base . Preconditions ;', 'if ( value < 0 ) {', 'result | = ( tmp & 0x7f ) < < 35 ;']","['if ( useUnsafeSerialization ) {', '}', '} else {', 'return new UnsafeByteArrayInputStream ( buf ) ;', 'return new ExtendedByteArrayDataInput ( buf ) ;', 'public ExtendedDataInput createExtendedDataInput ( byte [ ] buf ) {', 'import java . io . DataInputStream ;', '}', 'import java . io . ByteArrayInputStream ;', 'return out . toByteArray ( ) ;']","['conf ) , handlerToUseExecutionGroup , executionGroup , ch ) ;', 'public static boolean shouldIgnoreCredit ( short response ) {', 'timeWaitingOnOpenRequests . inc ( System . currentTimeMillis ( ) - startTime ) ;', 'super ( permits ) ;', 'InetSocketAddress address = taskIdAddressMap . get ( taskInfo . getTaskId ( ) ) ;', 'if ( !openRequestPermit . tryAcquire ( ) ) {', 'new ResponseClientHandler ( clientRequestIdRequestInfoMap ,', 'new ResponseClientHandler ( NettyClient . this , conf ) ,', 'if ( limitNumberOfOpenRequests & &', 'RequestInfo > > pair : perWorkerOpenRequestMap . values ( ) ) {']","['Class < ? extends MapperObserver > mapperObserverClass ) {', 'MAPPER OBSERVER CLASSES . add ( this , mapperObserverClass ) ;', 'import org . apache . giraph . graph . MapperObserver ;', '}', 'return MAPPER OBSERVER CLASSES . getArray ( this ) ;', 'public Class < ? extends MapperObserver > [ ] getMapperObserverClasses ( ) {', 'public final void addMapperObserverClass (', 'import org . apache . giraph . graph . MapperObserver ;', 'ClassConfOption < MapperObserver > MAPPER OBSERVER CLASSES =', 'ClassConfOption . create ( ""giraph . mapper . observers"" , null ,']","['import static java . util . concurrent . TimeUnit . MINUTES ;', 'import static java . util . concurrent . TimeUnit . MINUTES ;', 'import static java . util . concurrent . TimeUnit . SECONDS ;', 'import static java . util . concurrent . TimeUnit . SECONDS ;', 'JOB PROGRESS SERVICE PORT . get ( conf ) ) ) ;', 'import org . apache . giraph . job . ClientThriftServer ;', 'JOB PROGRESS SERVICE HOST . get ( conf ) ,', 'ClientThriftServer . CLIENT THRIFT SERVER PORT . get ( conf ) ) ) ;', 'ClientThriftServer . CLIENT THRIFT SERVER HOST . get ( conf ) ,', 'import org . apache . giraph . conf . IntConfOption ;']","['""Exception occurred on mapper "" +', 'ExceptionUtils . getStackTrace ( e ) ) ;', 'import org . apache . commons . lang3 . exception . ExceptionUtils ;', 'graphTaskManager . getJobProgressTracker ( ) . logError (', 'graphTaskManager . getConf ( ) . getTaskPartition ( ) + "" : "" +', 'public void logError ( String logLine ) {', '@ Override', '}', '} ) ;', 'public void run ( ) {']","['private final AtomicBoolean firstRead = new AtomicBoolean ( true ) ;', 'public void channelReadComplete ( ChannelHandlerContext ctx ) throws Exception {', 'if ( !nettyAutoRead ) {', 'if ( !nettyAutoRead & & firstRead . compareAndSet ( true , false ) ) {', 'import java . util . concurrent . atomic . AtomicBoolean ;', 'this . nettyAutoRead = GiraphConstants . NETTY AUTO READ . get ( conf ) ;', '}', '} else {', 'ctx . read ( ) ;', 'ctx . channel ( ) . config ( ) . setAutoRead ( false ) ;']","['import org . apache . giraph . master . MasterInfo ;', 'MasterInfo getMasterInfo ( ) ;', 'import org . apache . giraph . master . MasterInfo ;', 'MasterInfo getMasterInfo ( ) ;', 'import org . apache . giraph . master . MasterInfo ;', 'MasterInfo getMasterInfo ( ) ;', 'int getNumPartitionsOwned ( ) ;', 'FlowControl getFlowControl ( ) ;', 'import org . apache . giraph . comm . flow control . FlowControl ;', 'void setFlowControl ( FlowControl flowControl ) ;']","['return useUnsafeSerialization ;', 'public boolean getUseUnsafeSerialization ( ) {', '}', 'pTransient + + ;', 'return removed . get ( i ) ;', 'pCompressed < size ) {', 'import java . io . DataInput ;', 'transientData = null ;', 'return neighborsAdded . size ( ) ;', '""In order to use this class , difference of consecutive IDs "" +']","['if ( !future . isSuccess ( ) ) {', 'WAIT TIME BETWEEN CONNECTION RETRIES MS . get ( conf ) ;', 'isFirstFailure = false ;', 'Thread . sleep ( waitTimeBetweenConnectionRetriesMs ) ;', 'try {', 'throw new IllegalStateException (', 'waitTimeBetweenConnectionRetriesMs =', 'import static org . apache . giraph . conf . GiraphConstants . WAIT TIME BETWEEN CONNECTION RETRIES MS ;', 'private final long waitTimeBetweenConnectionRetriesMs ;', 'if ( isFirstFailure ) {']","['public void vertexSend ( Vertex < I , V , Writable > vertex ) {', 'return true ;', 'idTypeOps . set ( received , value ) ;', 'workerApi . sendMessageToMultipleEdges (', 'workerApi . sendMessageToMultipleEdges (', 'return minMessageCombiner ;', '}', '}', 'setComponent . apply ( vertex , received ) ;', 'idTypeOps . set ( newComponent , getComponent . get ( vertex ) ) ;']","['GiraphConfiguration conf ) {', 'PrepareGraphPieces . makeSymmetricUnweighted ( LongTypeOps . INSTANCE ) ) ,', 'import org . apache . giraph . block app . framework . block . SequenceBlock ;', 'true , ""Whether it\'s needed to first make graph symmetric or not"" ) ;', 'protected Class < ? extends Writable > getEdgeValueClass (', 'return new Object ( ) ;', 'public static final BooleanConfOption MAKE GRAPH SYMMETRIC =', '}', 'conf . setOutEdgesClass ( LongNullArrayEdges . class ) ;', 'GiraphConstants . MESSAGE ENCODE AND STORE TYPE . setIfUnset (']","['return workerReceiveApi ! = null ;', 'return masterApi ! = null ;', 'public void setMasterApi ( BlockMasterApi api ) {', 'public void setWorkerSendApi ( BlockWorkerSendApi api ) {', 'public boolean isWorkerReceiveApiSet ( ) {', 'return workerContextSendApi ! = null ;', '}', 'public BlockWorkerContextReceiveApi getWorkerContextReceiveApi ( ) {', 'import static com . google . common . base . Preconditions . checkNotNull ;', 'private transient BlockWorkerContextSendApi workerContextSendApi ;']","['V extends Writable , E extends Writable >', '}', 'package org . apache . giraph . block app . library . pagerank ;', 'default boolean allVertexEdgesTheSame ( ) {', 'import org . apache . hadoop . io . Writable ;', 'import org . apache . hadoop . io . WritableComparable ;', 'import java . io . Serializable ;', 'return false ;', 'extends Serializable {', 'import org . apache . giraph . graph . Vertex ;']","['} catch ( RuntimeTTransportException te ) {', 'LOG . debug ( te . getClass ( ) + "" occurred while talking to "" +', 'LOG . debug ( ""RuntimeTTransportException occurred while talking to "" +', '} catch ( RuntimeTTransportException | RejectedExecutionException te ) {', 'LOG . debug ( """" ) ;', 'import java . util . concurrent . RejectedExecutionException ;', '""Exception occurred while trying to close client manager"" , e ) ;', 'LOG . debug (']","['throw new IllegalStateException ( ""resolvePartitionMutations : "" +', 'getCurrentMessageStore ( ) . clearVertexMessages ( vertexId ) ;', '} catch ( IOException e ) {', 'currentMessageStore . clearAll ( ) ;', 'throw new IllegalStateException (', 'public void resetMessageStores ( ) {', 'try {', 'import java . io . IOException ;', '""vertex due to a mutation"" ) ;', 'currentMessageStore . clearAll ( ) ;']","['private final Map < Integer , Set < Long > > resumeRequestsId =', 'private final ConcurrentMap < Integer , Set < Long > > resumeRequestsId =', 'import com . google . common . collect . Lists ;', 'import java . util . ArrayList ;', 'public static String allOptionsString ( ) {', 'String html = allOptionsHTMLString ( options ) ;', 'COMPUTATION CLASS . toString ( ) ;', 'List < Field > fields = Arrays . asList ( GiraphConstants . class . getFields ( ) ) ;', 'public static void main ( String [ ] args ) {', 'if ( AbstractConfOption . class . isAssignableFrom ( field . getType ( ) ) ) {']","['return ( int ) ( worker1 . getValue ( ) . getEdgeCount ( ) -', 'return Long . compare ( worker1 . getValue ( ) . getVertexCount ( ) ,', 'return ( int ) ( worker1 . getValue ( ) . getVertexCount ( ) -', 'return Long . compare ( worker1 . getValue ( ) . getEdgeCount ( ) ,']","['import java . io . UTFDataFormatException ;', 'if ( utflen > 65535 )', '""encoded string too long : "" + utflen + "" bytes"" ) ;', 'throw new UTFDataFormatException (', 'assertEquals ( s , is . readUTF ( ) ) ;', 'try {', 'int length = os . getByteArray ( ) . length ;', '@ Test', 'os . writeUTF ( s ) ;', '}']","['if ( utflen > 65535 )', 'if ( utflen > 65535 ) {', '}']","['private static final int NUM COUNTERS = 13 ;', 'return counters [ LOWEST GRAPH PERCENTAGE IN MEMORY ] ;', '}', 'public static final String LOWEST GRAPH PERCENTAGE IN MEMORY NAME =', 'counters [ LOWEST GRAPH PERCENTAGE IN MEMORY ] =', 'private static final int NUM COUNTERS = 14 ;', 'public GiraphHadoopCounter getLowestGraphPercentageInMemory ( ) {', 'private static final int LOWEST GRAPH PERCENTAGE IN MEMORY = 13 ;', '""Lowest percentage of graph in memory so far ( out - of - core ) "" ;', 'getCounter ( LOWEST GRAPH PERCENTAGE IN MEMORY NAME ) ;']","['serverRunner = new ZooKeeperServerRunner ( ) ;', 'int port = serverRunner . start ( config ) ;', '. getDataDir ( ) , config . getDataLogDir ( ) ,', 'return port ;', 'return serverRunner . start ( config ) ;', 'serverRunner = new ZooKeeperServerRunner ( ) ;', '. getDataDir ( ) , config . getDataLogDir ( ) ,']","['""createZooKeeperServerList : too many "" +', 'break ;', 'HOSTNAME TASK SEPARATOR ;', 'while ( true ) {', 'Thread . sleep ( pollMsecs ) ;', 'Thread . sleep ( pollMsecs ) ;', 'String host = null ;', 'task = hostnameTaskArray [ 1 ] ;', 'HOSTNAME TASK SEPARATOR + port +', 'String host ;']","['BlockWorkerSendApi < LongWritable , LongWritable , NullWritable ,', 'return true ;', 'protected Class < WLongArrayList > getMessageClass ( ) {', 'return new Object ( ) ;', 'if ( reusableId . get ( ) ! = vertex . getId ( ) . get ( ) & &', 'import org . apache . giraph . conf . GiraphConfiguration ;', '@ Override', 'reusableMessage . clear ( ) ;', 'for ( Edge < LongWritable , NullWritable > edge : vertex . getEdges ( ) ) {', 'import org . apache . hadoop . io . WritableComparable ;']","['this . jobId = conf . get ( ""mapred . job . id"" , ""Unknown Job"" ) ;', 'this . jobId = conf . getJobId ( ) ;', 'conf , context , service , oocEngine ) ;', 'conf , context , oocEngine ) ;', 'conf , messageStore ,', 'conf , oocEngine , messageStore ,', 'public boolean isStaticGraph ( ) {', 'return STATIC GRAPH . isTrue ( this ) ;', '}', 'import org . apache . giraph . ooc . ThresholdBasedOracle ;']","['import org . apache . giraph . conf . BulkConfigurator ;', 'import org . apache . giraph . block app . framework . BulkConfigurator ;', 'import org . apache . giraph . conf . BulkConfigurator ;', 'import org . apache . giraph . conf . BulkConfigurator ;', 'import org . apache . giraph . conf . BulkConfigurator ;', 'import org . apache . giraph . conf . BulkConfigurator ;', 'import org . apache . giraph . conf . GiraphConfiguration ;', 'package org . apache . giraph . conf ;', 'package org . apache . giraph . block app . framework ;', 'int workers = conf . getInt ( GiraphConstants . MIN WORKERS , - 1 ) ;']","['result . add ( entry . getKey ( ) ) ;', 'oocEngine . getMetaPartitionManager ( ) . getOwnerThreadId ( partitionId ) = =', 'if ( entry . getValue ( ) . getLeft ( ) > minBufferSizeToOffload ) {', 'ioThreadId ) {', 'public Set < Integer > getCandidateBuffersToOffload ( ) {', 'if ( aggregateBufferSize > minBufferSizeToOffload & &', 'long aggregateBufferSize = entry . getValue ( ) . getLeft ( ) ;', 'public Set < Integer > getCandidateBuffersToOffload ( int ioThreadId ) {', 'result . add ( partitionId ) ;', 'int partitionId = entry . getKey ( ) ;']","['public static final String JSONOBJ PARTITION STATS KEY =', '}', 'return addressesAndPartitionsReadyChanged ;', '"" ( partitions are assigned ) "" ) ;', 'if ( LOG . isInfoEnabled ( ) ) {', 'event . getType ( ) = = EventType . NodeCreated ) {', 'LOG . info ( ""process : partitionAssignmentsReadyChanged "" +', 'this . addressesAndPartitionsReadyChanged = new PredicateLock ( context ) ;', 'eventProcessed = true ;', 'long superstep ) {']","['getConf ( ) ) ) ;', 'getConf ( ) ) , getJobProgressTracker ( ) ) ;', 'CheckerIfWorkerShouldFailAfterException checker ) {', 'JobProgressTracker jobProgressTracker ) {', 'CheckerIfWorkerShouldFailAfterException checker ,', 'import org . apache . commons . lang3 . exception . ExceptionUtils ;', 'private final JobProgressTracker jobProgressTracker ;', 'this . jobProgressTracker = jobProgressTracker ;', 'jobProgressTracker . logError ( ExceptionUtils . getStackTrace ( e ) ) ;', 'private volatile boolean jobFailed = false ;']","['T entry = readNextEntry ( inputWrapper . getDataInput ( ) ) ;', 'DataInput dataInput = inputWrapper . getDataInput ( ) ;', 'T entry = readNextEntry ( dataInput ) ;', 'import org . apache . giraph . utils . io . BigDataInput ;', 'return new InMemoryDataInputWrapper (', 'return input ;', 'import java . io . DataOutput ;', 'public int getNumAccessorThreads ( ) {', 'ImmutableClassesGiraphConfiguration < ? , ? , ? > conf ) {', 'public InMemoryDataInputWrapper (']","['return metaPartitionManager . getLowestGraphFractionInMemory ( ) * 100 ;', 'return metaPartitionManager . getGraphFractionInMemory ( ) * 100 ;', 'if ( LOG . isInfoEnabled ( ) ) {', 'if ( LOG . isInfoEnabled ( ) & & ! ( command instanceof WaitIOCommand ) ) {', 'LOG . info ( ""getNextIOCommand : actions are "" + Arrays . toString ( actions ) ) ;', 'LOG . debug ( ""getNextIOCommand : actions are "" + Arrays . toString ( actions ) ) ;', 'if ( LOG . isInfoEnabled ( ) ) {', 'if ( LOG . isDebugEnabled ( ) ) {', 'meta . getPartitionId ( ) ;', 'null ) ;']","['testRange ( 8949 , 100023 , 0 , false ) ;', 'int allowedWorkerDiff , boolean emptyWorkers ) {', 'testRange ( 194942 , 211111 , 1 , true ) ;', 'testRange ( 10 , 1000 , 100000 , 0 , false ) ;', 'testRange ( 10 , 100000 , 0 , false ) ;', 'testRange ( 1949 , ( 50000 / 1949 ) * 1949 , 211111 , 0 , false ) ;', 'testRange ( 1000 , 100000 , 0 , false ) ;', 'private void testRange ( int numWorkers , int numPartitions , int keySpaceSize ,', 'testRange ( 1949 , 211111 , 0 , false ) ;', 'testRange ( 194942 , 50000 , 211111 , 1 , true ) ;']","['@ Ignore ( ""this test requires 1G to run"" )']","['BooleanConfOption ZOOKEEPER FORCE SYNC =', 'new BooleanConfOption ( ""giraph . zKForceSync"" , false ,', '""ZooKeeper force sync"" ) ;', 'BooleanConfOption ZOOKEEPER SKIP ACL =', 'new BooleanConfOption ( ""giraph . ZkSkipAcl"" , true , ""ZooKeeper skip ACLs"" ) ;', 'int DEFAULT ZOOKEEPER SNAP COUNT = 50000 ;', 'Integer . toString ( GiraphConstants . DEFAULT ZOOKEEPER SNAP COUNT ) ) ;', 'GiraphConstants . ZOOKEEPER FORCE SYNC . get ( conf ) ? ""yes"" : ""no"" ) ;', 'System . setProperty ( ""zookeeper . forceSync"" ,', 'System . setProperty ( ""zookeeper . snapCount"" ,']","['import org . apache . giraph . comm . netty . NettyClient ;', 'assertTrue ( job . run ( false ) ) ;', 'assertTrue ( job . run ( true ) ) ;', 'GiraphConstants . METRICS ENABLE . set ( conf , true ) ;']","['} catch ( IOException e ) {', 'return quorumRunner . start ( config ) ;', 'try {', 'public int start ( String zkDir , ZookeeperConfig config ) throws IOException {', '}', 'LOG . error ( ""Unable to start zookeeper"" , e ) ;', 'return quorumRunner . start ( config ) ;', 'return - 1 ;', 'public int start ( String zkDir , final ZookeeperConfig config ) {', 'public void onlineZooKeeperServer ( ) {']","['""success = "" + writeFuture . isSuccess ( ) + "" , "" +', '""success = "" + writeFuture . isSuccess ( ) + "" , "" +', 'try {', 'return ( writeFuture ! = null & & ( !writeFuture . channel ( ) . isActive ( ) | |', '( writeFuture . isDone ( ) & & !writeFuture . isSuccess ( ) ) | |', 'ThreadUtils . startThread ( new Runnable ( ) {', 'writeFuture . addListener ( logErrorListener ) ;', 'writeFuture . addListener ( logErrorListener ) ;', '}', '}']","['checkIfShouldMoveToNextDataInput ( ) ;', 'readFully ( b , off + available , len - available ) ;', 'currentInput . readFully ( b ) ;', 'currentInput . readFully ( b , off , len ) ;', 'currentInput . readFully ( b , off , len ) ;', 'int available = currentInput . available ( ) ;', 'currentInput . readFully ( b , off , available ) ;', '} else {', '}', 'readFully ( b , 0 , b . length ) ;']","['StaticFlowControl . MAX NUMBER OF OPEN REQUESTS . setIfUnset ( conf , 2000 ) ;', 'StaticFlowControl . MAX NUMBER OF OPEN REQUESTS . setIfUnset ( conf , 100 ) ;']","['void setContext ( Mapper < ? , ? , ? , ? > . Context context ) ;', 'public interface ContextSettable {', 'package org . apache . giraph . conf ;', '}', 'import org . apache . hadoop . mapreduce . Mapper ;', 'public MapperObserver [ ] createMapperObservers ( ) {', 'public WorkerObserver [ ] createWorkerObservers (', 'objects [ i ] = ReflectionUtils . newInstance ( klasses [ i ] , this ) ;', 'Mapper < ? , ? , ? , ? > . Context context ) {', 'public WorkerObserver [ ] createWorkerObservers ( ) {']","['GiraphMetrics . get ( ) . getGcTracker ( ) . gcOccurred ( info . getGcInfo ( ) ) ;', '}', 'private final GcTracker gcTracker ;', 'public GcTracker getGcTracker ( ) {', 'import org . apache . giraph . utils . GcTracker ;', 'gcTracker = new GcTracker ( ) ;', 'gcTracker = new GcTracker ( conf ) ;', 'return gcTracker ;', 'import org . apache . giraph . conf . IntConfOption ;', 'lastKGcs = new GcInfo [ LAST GCS TO KEEP . getDefaultValue ( ) ] ;']","['LOG . info ( ""call : thread "" + diskId + ""\'s command "" + command +', 'LOG . debug ( ""call : thread "" + diskId + ""\'s next IO command is : "" +', 'LOG . info ( ""call : thread "" + diskId + ""\'s next IO command is : "" +', 'if ( LOG . isDebugEnabled ( ) & & ! ( command instanceof WaitIOCommand ) ) {', 'if ( LOG . isInfoEnabled ( ) & & ! ( command instanceof WaitIOCommand ) ) {', 'LOG . debug ( ""call : thread "" + diskId + ""\'s command "" + command +', 'LOG . warn ( ""getNextIOActions : number of partitions in memory passed the "" +', '""the specified threshold!"" ) ;', '""specified threshold!"" ) ;', '}']","['import java . util . Set ;', 'import com . google . common . base . Preconditions ;', 'mutations . putIfAbsent ( target , new VertexMutations < I , V , E > ( ) ) ;', 'import org . apache . giraph . block app . framework . api . local . InternalMessageStore . InternalWrappedMessageStore ;', 'import com . google . common . base . Preconditions ;', 'computation . getOutgoingMessageClasses ( conf ) ,', 'vertexIndex , originalVertex , curMutations ,', 'mutations . putIfAbsent ( copyId , new VertexMutations < I , V , E > ( ) ) ;', 'import org . apache . giraph . block app . framework . api . local . InternalMessageStore . InternalConcurrentMessageStore ;', 'partitionIds . add ( i ) ;']","['import org . apache . hadoop . mapreduce . lib . output . FileOutputFormat ;', 'FileOutputFormatUtil . setOutputPath ( job . getInternalJob ( ) ,', 'FileOutputFormat . setOutputPath ( job . getInternalJob ( ) ,', 'import org . apache . giraph . io . formats . FileOutputFormatUtil ;', 'private FileOutputFormatUtil ( ) { }', 'public class FileOutputFormatUtil {', '}', 'job . getConfiguration ( ) . set ( ""mapred . output . dir"" , outputDir . toString ( ) ) ;', 'import org . apache . hadoop . fs . Path ;', 'public static void setOutputPath ( Job job , Path outputDir ) {']","['extends BlockApi , BlockOutputApi , AggregatorUsage , WorkerIndexUsage < I > {', 'StatusReporter {', 'extends BlockApi , BlockOutputApi , AggregatorUsage , WorkerIndexUsage < I > ,', 'extends AggregatorUsage , BlockApi , WorkerIndexUsage < I > {', 'extends AggregatorUsage , BlockApi , WorkerIndexUsage < I > , StatusReporter {', 'counter . setValue ( value ) ;', 'return BlockCounters . getCounter ( master . getContext ( ) , group , name ) ;', '} ;', 'import org . apache . giraph . block app . framework . internal . BlockCounters ;', 'final org . apache . hadoop . mapreduce . Counter counter =']","['Thread . setDefaultUncaughtExceptionHandler (', 'graphTaskManager . createUncaughtExceptionHandler ( ) ) ;', 'Thread . setDefaultUncaughtExceptionHandler ( createUncaughtExceptionHandler ( ) ) ;']","['""Decide whether we should create a source vertex when id is "" +', 'CreateSourceVertexCallback . class ,', 'ClassConfOption . create ( ""giraph . createEdgeSourceVerticesCallback"" ,', 'import org . apache . giraph . edge . DefaultCreateSourceVertexCallback ;', '""present in the edge input but not in vertex input"" ) ;', 'CREATE EDGE SOURCE VERTICES CALLBACK =', 'DefaultCreateSourceVertexCallback . class ,', 'import org . apache . giraph . edge . CreateSourceVertexCallback ;', 'ClassConfOption < CreateSourceVertexCallback >', 'if ( createSourceVertex ) {']","['Assert . assertEquals ( ""1000 . 0"" ,', 'String [ ] correct = new String [ ] { ""10 . 0"" , ""100 . 0"" , ""1000 . 0"" } ;', '( ( ArrayList < ? > ) results ) . get ( 0 ) . toString ( ) ) ;', 'for ( int i = 0 ; i < correct . length ; i + + ) {', '& ( ( ( Collection < ? > ) results ) . size ( ) = = 3 ) ) {', 'import java . util . Collections ;', 'Assert . assertEquals ( ""100 . 0"" ,', 'Assert . assertEquals ( correct [ i ] ,', '( ( ArrayList < ? > ) results ) . get ( 1 ) . toString ( ) ) ;', 'Arrays . sort ( correct ) ;']","['import org . apache . giraph . block app . framework . block . Block ;', 'import org . apache . giraph . block app . framework . block . BlockWithApiHandle ;', 'import org . apache . giraph . graph . Computation ;', 'import org . apache . giraph . jython . wrappers . JythonWritableWrapper ;', 'import org . apache . giraph . graph . Computation ;', 'import org . apache . giraph . factories . MessageValueFactory ;', 'import org . apache . giraph . master . AggregatorReduceOperation ;']","['oocEngine = new OutOfCoreEngine ( conf , service ) ;', 'oocEngine = new OutOfCoreEngine ( conf , service , workerServer ) ;', 'WorkerServer workerServer ,', 'extends Closeable {', 'extends NetworkMetrics , Closeable {', 'import org . apache . giraph . conf . IntConfOption ;', 'import org . apache . giraph . conf . IntConfOption ;', 'import java . util . concurrent . ExecutorService ;', 'NettyClient nettyClient ,', 'try {']","['public interface ClassCodeGenerator {', '}', 'String packageName , String className , String codeSnippet ) ;', 'package org . apache . giraph . compiling ;', 'String generateCode (', 'public class FactoryCodeGenerator implements ClassCodeGenerator {', 'public static String getSimpleName ( TypeToken < ? > typeToken ) {', 'return objectType . equals ( ( ( FactoryCodeGenerator ) obj ) . objectType ) ;', 'private final Type objectType ;', '} else if ( objectType instanceof ParameterizedType ) {']","['return compare ( ok1 . booleanValue ( ) , ok2 . booleanValue ( ) ) ;', 'default int compare ( Boolean ok1 , Boolean ok2 ) {', '}', 'extends BooleanComparator , Serializable {', 'import it . unimi . dsi . fastutil . booleans . BooleanComparator ;', 'package org . apache . giraph . function . primitive . comparators ;', 'import java . io . Serializable ;', '@ Override', 'public interface BooleanComparatorFunction', 'extends ByteComparator , Serializable {']","['return true ;', 'import org . apache . giraph . function . ObjectTransfer ;', 'msgsTransfer . apply ( msgs ) ;', 'return new Object ( ) ;', 'testSumOverSameGroup ( 3 , false ) ;', 'import org . apache . giraph . function . primitive . Int2IntFunction ;', 'Int2IntFunction f = ( id ) - > id % max - 1 ;', 'import org . apache . giraph . conf . GiraphConfiguration ;', 'import org . apache . giraph . graph . Vertex ;', '@ Override']","['if ( Boolean . TRUE . equals ( toQuit . get ( ) ) | | !repeatIterator . hasNext ( ) ) {', 'protected Iterator < AbstractPiece > computeNext ( ) {', 'import com . google . common . collect . Iterables ;', 'return block . iterator ( ) ;', 'return repeatIterator . next ( ) ;', '} ) ;', 'return new AbstractIterator < AbstractPiece > ( ) {', 'import com . google . common . collect . Iterators ;', '} ;', 'if ( index > = repeatTimes | | Boolean . TRUE . equals ( toQuit . get ( ) ) ) {']","['if ( edgeValueTypeOps ! = null ) {', 'if ( edgeValueTypeOps ! = null & & idTypeOps ! = null ) {']","['connectedEvent . waitForever ( ) ;', 'connectedEvent . waitForTimeoutOrFail (', 'GiraphConstants . WAIT ZOOKEEPER TIMEOUT MSEC . get ( conf ) ) ;', 'LongConfOption WAIT FOR OTHER WORKERS TIMEOUT MSEC =', 'LongConfOption WAIT ZOOKEEPER TIMEOUT MSEC =', 'new LongConfOption ( ""giraph . waitZookeeperTimeoutMsec"" ,', 'new LongConfOption ( ""giraph . waitForOtherWorkersMsec"" ,', '""places that require network connection"" ) ;', 'import static java . util . concurrent . TimeUnit . HOURS ;', 'HOURS . toMillis ( 48 ) ,']","['initializeJobProgressTracker ( ) ;', 'initializeJobProgressTracker ( ) ;']","['masterThread . setUncaughtExceptionHandler (', 'createUncaughtExceptionHandler ( ) ) ;', 'GiraphConstants . WAIT ZOOKEEPER TIMEOUT MSEC . get (', 'GiraphConstants . WAIT FOR OTHER WORKERS TIMEOUT MSEC . get (']","['import org . apache . giraph . master . MasterProgress ;', '@ Override', 'public void updateMasterProgress ( MasterProgress masterProgress ) {', '}', 'jobProgressTracker . updateMasterProgress ( masterProgress ) ;', '} ) ;', 'public void run ( ) {', 'executeWithRetry ( new Runnable ( ) {', 'public void updateMasterProgress ( final MasterProgress masterProgress ) {', '}']","['NettyClient nettyClient ,', '} , ""resume - sender"" , exceptionHandler ) ;', 'unsentRequestPermit = new Semaphore ( MAX NUM OF UNSENT REQUESTS . get ( conf ) ) ;', 'ThreadUtils . startThread ( new Runnable ( ) {', '} ) ;', 'try {', 'thread . setName ( ""resume - sender"" ) ;', 'import java . util . concurrent . BlockingQueue ;', 'thread . setDaemon ( true ) ;', 'pair = toBeSent . take ( ) ;']","['""digraph . outputConfOptions"" , """" ,', 'public static String [ ] getOutputConfOptions ( Configuration conf ) {', 'private static String [ ] getOutputConfOptions ( Configuration conf ) {', '""giraph . outputConfOptions"" , """" ,']","['zkManager . cleanupOnExit ( ) ;', 'if ( this . graphFunctions . isMaster ( ) ) {', '}', '} catch ( IOException e ) {', 'try {', '}', 'LOG . error ( ""cleanupOnExit : Failed to delete on exit "" + baseDirectory ) ;', 'fs . deleteOnExit ( baseDirectory ) ;', 'public void cleanupOnExit ( ) {']","['if ( this . graphFunctions . isMaster ( ) ) {', 'if ( zkManager ! = null & & this . graphFunctions . isMaster ( ) ) {']","['public String toString ( ) {', 'if ( !getProgressString ( ) . equals ( lastProgress . getProgressString ( ) ) ) {', '@ Override', 'return true ;', 'sb . append ( ""Data from "" ) . append ( workersInSuperstep ) . append ( "" workers - "" ) ;', 'StringBuilder sb = new StringBuilder ( ) ;', 'public String toString ( ) {', 'return workersDone ! = lastProgress . workersDone ;', '}', 'sb . append ( ""Data from "" ) . append ( workersInSuperstep ) . append ( "" workers - "" ) ;']","['import java . io . DataInputStream ;', 'import java . io . DataInputStream ;', 'import java . util . Comparator ;', 'import java . util . Comparator ;', 'import static org . apache . giraph . conf . GiraphConstants . INPUT SPLIT SAMPLE PERCENT ;', 'import static org . apache . giraph . conf . GiraphConstants . INPUT SPLIT SAMPLE PERCENT ;', 'job . killJob ( ) ;', 'try {', 'import java . util . TreeSet ;', '}']","['import org . apache . giraph . block app . framework . block . PieceCount ;', 'return PieceCount . createUnknownCount ( ) ;', '}', 'public PieceCount getPieceCount ( ) {', '@ Override', 'PieceCount pieceCount = executionBlock . getPieceCount ( ) ;', 'import org . apache . giraph . block app . framework . block . PieceCount ;', 'GiraphConstants . SUPERSTEP COUNT . set ( conf , pieceCount . getCount ( ) + 1 ) ;', '}', 'if ( pieceCount . isKnown ( ) ) {']","['throw new IllegalStateException ( ""Exception occurred"" , e ) ;', '} catch ( ExecutionException e ) {', '} catch ( InterruptedException | ExecutionException e ) {', 'throw new IllegalStateException ( ""Interrupted"" , e ) ;', 'if ( e . getCause ( ) instanceof RuntimeException ) {', '}', 'throw ( RuntimeException ) e . getCause ( ) ;', '} else {', 'throw new IllegalStateException ( ""Exception occurred"" , e . getCause ( ) ) ;', '} catch ( InterruptedException e ) {']","['commHandler . getInputSplitsHandler ( ) . sendSplitTo ( splitType , workerTaskId ) ;', 'boolean isFirstSplit ) {', 'public AskForInputSplitRequest ( InputType splitType , int workerTaskId ) {', 'commHandler . getInputSplitsHandler ( ) . sendSplitTo (', 'public AskForInputSplitRequest ( InputType splitType , int workerTaskId ,', 'out . writeBoolean ( isFirstSplit ) ;', 'this . isFirstSplit = isFirstSplit ;', 'splitType , workerTaskId , isFirstSplit ) ;', 'isFirstSplit = in . readBoolean ( ) ;', 'private boolean isFirstSplit ;']","['""CalcConnectedComponentSizes"" ,', 'LongTypeOps . INSTANCE , LongTypeOps . INSTANCE , SumReduce . LONG ) ;', 'return Pieces . reduceAndBroadcast (', 'return Pieces . reduceAndBroadcastWithArrayOfHandles (', 'LongTypeOps . INSTANCE , LongTypeOps . INSTANCE , SumReduce . LONG ) ,', 'BasicMapReduce < LongWritable , LongWritable , LongWritable > reduceOperation =', '""CalcConnectedComponentSizes"" ,', 'vertex - > getComponent . get ( vertex ) . get ( ) ,', '3137 , / * Just using some large prime number * /', '( ) - > reduceOperation ,']","['if ( !hasNext ( ) ) {', 'throw new NoSuchElementException ( ) ;', '}', 'neighbors . clear ( ) ;', 'import java . util . NoSuchElementException ;', 'if ( !hasNext ( ) ) {', 'throw new NoSuchElementException ( ) ;', '}', 'neighborIds . clear ( ) ;', 'neighborEdgeValues . clear ( ) ;']","['printValueFromHost ( out , "" largest : "" , unit , aggregatedMetric . min ( ) ) ;', 'printValueFromHost ( out , "" smallest : "" , unit , aggregatedMetric . min ( ) ) ;', 'printValueFromHost ( out , "" smallest : "" , unit , aggregatedMetric . max ( ) ) ;', 'printValueFromHost ( out , "" largest : "" , unit , aggregatedMetric . max ( ) ) ;']","['getConf ( ) . < M > createOutgoingMessageValueFactory ( ) ) ;', 'return new ByteArrayVertexIdMessages < I , M > ( messageValueFactory ) ;', 'return new ByteArrayVertexIdMessages < I , M > (', 'conf . createOutgoingMessageValueFactory ( ) ;', 'messageValueFactory =', 'import org . apache . giraph . factories . MessageValueFactory ;', 'protected MessageValueFactory < M > messageValueFactory ;', 'getConf ( ) . < M > createOutgoingMessageValueFactory ( ) ) ;', 'messageValueFactory ) ;', 'configuration . createOutgoingMessageValueFactory ( ) ) ;']","['inputFormatsJson . getString ( i ) ) ) ;', 'inputFormatsJson . getJSONArray ( i ) . toString ( ) ) ) ;', 'inputFormatsJson . getString ( i ) ) ) ;', 'inputFormatsJson . getJSONArray ( i ) . toString ( ) ) ) ;', 'inputFormatsJson . getString ( i ) ) ) ;', 'inputFormatsJson . getJSONArray ( i ) . toString ( ) ) ) ;']","['this . hostnamePartitionId = hostname + "" "" + getTaskPartition ( ) ;', 'public final int getTaskId ( ) {', 'this . taskPartition = conf . getTaskPartition ( ) ;', 'return taskId ;', 'return hostnamePartitionId ;', 'this . hostnameTaskId = hostname + "" "" + getTaskId ( ) ;', 'private final String hostnamePartitionId ;', 'private final String hostnameTaskId ;', 'return taskPartition ;', '"" , partition "" + conf . getTaskPartition ( ) + "" on "" + serverPortList ) ;']","['""giraph . useBigDataIOForMessages = true . If there are super - vertices"" +', '"" this by adding the following option to your command line : "" +', 'throw new RuntimeException ( ""The numbers of bytes sent to vertex "" +', '"" setting giraph . useBigDataIOForMessages to true . You can do"" +', '"" in the graph which receive a lot of messages ( total serialized "" +', '"" - Dgiraph . useBigDataIOForMessages = true . "" +', '""size of messages goes beyond the maximum size of a byte array ) , "" +', '"" setting this option will remove that limit"" ) ;', 'vertexId + "" exceeded the max capacity of "" +', '"" If there are super - vertices in the graph that receive many messages , "" +']","['protected void killTooLongJob ( ) {', 'protected void killJobWithMessage ( String message ) {', '} catch ( IOException e ) {', 'killJobWithMessage (', 'LOG . warn ( ""Killing job because it took longer than "" +', 'LOG . error ( message ) ;', 'try {', 'maxAllowedJobTimeMs + "" milliseconds"" ) ;', 'maxAllowedJobTimeMs + "" milliseconds"" ) ;', 'LOG . error ( ""Failed to kill the job"" , e ) ;']","['public long getVerticesToCompute ( ) {', 'public long getVerticesComputed ( ) {', 'return verticesToCompute ;', 'return currentSuperstep ;', '}', 'public long getCurrentSuperstep ( ) {', 'return verticesComputed ;', 'public long getWorkersInSuperstep ( ) {', 'return workersInSuperstep ;', 'return true ;']","['protected void killJobWithMessage ( String message ) {', 'LOG . error ( message ) ;', 'LOG . error ( message ) ;', 'LOG . info ( ""Job "" + job . getJobID ( ) + "" is already done"" ) ;', 'job . killJob ( ) ;', 'return true ;', 'protected boolean killJobWithMessage ( String message ) {', '}', 'job . killJob ( ) ;', '} else {']","['"" coefficients , but "" + validColumnIndices . size ( ) +', 'LOG . info ( ""There are "" + coefficient . length +', 'return false ;', '"" coefficients , and "" + validColumnIndices . size ( ) +', 'LOG . warn ( ""There are "" + coefficient . length +']",['Collections . shuffle ( splits ) ;'],"['new LongConfOption ( ""giraph . VerticesToUpdateProgress"" , 100000 ,', 'LongConfOption VERTICES TO UPDATE PROGRESS =', '""updating worker progress"" ) ;', '""Minimum number of vertices to compute before "" +', 'if ( verticesComputedProgress . value = = VERTICES TO UPDATE PROGRESS ) {', 'GiraphConstants . VERTICES TO UPDATE PROGRESS . get ( configuration ) ;', 'private static final long VERTICES TO UPDATE PROGRESS = 100000 ;', 'private final long verticesToUpdateProgress ;', 'verticesToUpdateProgress =', 'if ( verticesComputedProgress . value = = verticesToUpdateProgress ) {']","['ExceptionUtils . getStackTrace ( e ) ) ;', 'ExceptionUtils . getStackTrace ( e ) , exByteArray ) ;', 'byte [ ] exByteArray = KryoWritableWrapper . convertToByteArray ( e ) ;', 'import org . apache . giraph . writable . kryo . KryoWritableWrapper ;', 'jobProgressTracker . logError ( ExceptionUtils . getStackTrace ( e ) ) ;', 'exByteArray ) ;', 'byte [ ] exByteArray = KryoWritableWrapper . convertToByteArray ( e ) ;', 'jobProgressTracker . logError ( ExceptionUtils . getStackTrace ( e ) ,', 'import org . apache . giraph . writable . kryo . KryoWritableWrapper ;', 'public void logError ( String logLine ) {']","['conf . setIfUnset ( ""mapred . local . dir"" , mrLocalDir . toString ( ) ) ;', 'conf . setIfUnset ( ""mapred . job . tracker"" , ""local"" ) ;', 'File mrLocalDir = FileUtils . createTempDir ( tmpDir , "" mapred"" ) ;']","['observer . superstepMetricsUpdate ( superstep , aggregatedMetrics ) ;', 'for ( MasterObserver observer : observers ) {', '}', 'public void superstepMetricsUpdate ( long superstep ,', '@ Override', 'import org . apache . giraph . metrics . AggregatedMetrics ;', 'AggregatedMetrics aggregatedMetrics ) { }', 'void superstepMetricsUpdate (', 'import org . apache . giraph . metrics . AggregatedMetrics ;', 'long superstep , AggregatedMetrics aggregatedMetrics ) ;']","['import it . unimi . dsi . fastutil . longs . Long2ByteMap ;', 'import java . io . DataInput ;', '@ Override', 'mapIterator . remove ( ) ;', 'getValue ( ) . set ( value . get ( ) ) ;', 'edgeMap = new Long2ByteOpenHashMap ( capacity ) ;', 'public Edge < LongWritable , ByteWritable > next ( ) {', 'out . writeByte ( entry . getByteValue ( ) ) ;', 'import org . apache . giraph . utils . EdgeIterables ;', 'import com . google . common . collect . UnmodifiableIterator ;']","['DefaultOutEdgesFactory . class , OutEdgesFactory . class ,', 'DefaultInputOutEdgesFactory . class , OutEdgesFactory . class ,', 'ClassConfOption . create ( ""giraph . inputOutEdgesFactoryClass"" ,', 'ClassConfOption . create ( ""giraph . outEdgesFactoryClass"" ,', 'ClassConfOption < OutEdgesFactory > INPUT VERTEX EDGES FACTORY CLASS =', 'import org . apache . giraph . factories . DefaultInputOutEdgesFactory ;', 'import org . apache . giraph . factories . OutEdgesFactory ;', 'ClassConfOption < OutEdgesFactory > VERTEX EDGES FACTORY CLASS =', '""OutEdges factory class - optional"" ) ;', 'import org . apache . giraph . factories . DefaultOutEdgesFactory ;']","['private void jobGotAllMappers ( ) {', 'protected void jobGotAllMappers ( ) {']","['"" vertices and "" + partition . getEdgeCount ( ) + "" edges . "" ) ;', 'checkNotNull ( v , ""Vertex with ID "" + id + "" not found in partition "" +', 'partition . getId ( ) + "" which has "" + partition . getVertexCount ( ) +', 'LOG . debug ( ""Offloading partition "" + partition + "" DataIndex [ "" + index + "" ] "" ) ;']","['timeDoingGC + = timeDoingGCWhileProcessing ;', 'System . currentTimeMillis ( ) - startProcessingTime -', 'taskManager . getSuperstepGCTime ( ) - startGCTime ;', 'timeDoingGC + = timeDoingGCWhileProcessing ;', 'timeDoingGCWhileProcessing ;', 'taskManager . getSuperstepGCTime ( ) - startGCTime ;', 'timeProcessing + = System . currentTimeMillis ( ) - startProcessingTime -', 'partitionStats . setComputeMs ( timeProcessingPartition ) ;', 'new PartitionStats ( partition . getId ( ) , 0 , 0 , 0 , 0 , 0 ) ;', 'timeDoingGCWhileProcessing ;']","['return GC OBSERVER CLASSES . getArray ( this ) ;', 'GC OBSERVER CLASSES . add ( this , gcObserverClass ) ;', 'Class < ? extends GcObserver > gcObserverClass ) {', '}', 'public Class < ? extends GcObserver > [ ] getGcObserverClasses ( ) {', 'public final void addGcObserverClass (', 'import org . apache . giraph . utils . GcObserver ;', 'GcObserver . class , ""Classes for GC oObserver - optional"" ) ;', 'import org . apache . giraph . utils . GcObserver ;', 'ClassConfOption < GcObserver > GC OBSERVER CLASSES =']","['"" vertices and "" + partition . getEdgeCount ( ) + "" edges . "" ) ;', 'partition . getId ( ) + "" which has "" + partition . getVertexCount ( ) +', 'checkNotNull ( v , ""Vertex with ID "" + id + "" not found in partition "" +', 'if ( v = = null ) {', 'partition . getId ( ) + "" which has "" + partition . getVertexCount ( ) +', 'throw new IllegalStateException ( ""Vertex with ID "" + id + "" not found in partition "" +', '}', '"" vertices and "" + partition . getEdgeCount ( ) + "" edges . "" ) ;']","['throw new IllegalStateException ( ""Vertex with ID "" + id + "" not found in partition "" +', '"" which has "" + partition . getVertexCount ( ) + "" vertices and "" +', '"" vertices and "" + partition . getEdgeCount ( ) + "" edges . "" ) ;', '"" not found in partition "" + partition . getId ( ) +', 'partition . getId ( ) + "" which has "" + partition . getVertexCount ( ) +', 'partition . getEdgeCount ( ) + "" edges . "" ) ;', 'throw new IllegalStateException ( ""Vertex with ID "" + id +']","['throw new IllegalArgumentException ( ""nextChannel : No channels exist!"" ) ;', 'this . address = address ;', 'public ChannelRotater ( Integer taskId ) {', '""nextChannel : No channels exist for hostname "" +', 'throw new IllegalArgumentException (', 'import java . net . InetSocketAddress ;', 'private final InetSocketAddress address ;', 'public ChannelRotater ( Integer taskId , InetSocketAddress address ) {', 'address . getHostName ( ) ) ;', 'new ChannelRotater ( waitingConnection . taskId ) ;']","['import org . apache . giraph . utils . ExtendedByteArrayDataOutput ;', 'dataOutput = new UnsafeByteArrayOutputStream ( ) ;', 'dataOutput = new ExtendedByteArrayDataOutput ( ) ;', 'import org . apache . giraph . utils . UnsafeByteArrayOutputStream ;', 'import org . apache . giraph . utils . UnsafeByteArrayInputStream ;', 'public UnsafeByteArrayInputStream getUnsafeByteArrayInput ( ) {', '}', 'return new UnsafeByteArrayInputStream ( data ) ;', 'DataInput input = getDataInput ( ) ;', 'import org . apache . giraph . utils . UnsafeByteArrayInputStream ;']","['return USE MESSAGE SIZE ENCODING . get ( this ) ;', 'public boolean useMessageSizeEncoding ( ) {', '}', 'return useMessageSizeEncoding ;', 'useMessageSizeEncoding = USE MESSAGE SIZE ENCODING . get ( conf ) ;', 'public boolean useMessageSizeEncoding ( ) {', '}', 'private final boolean useMessageSizeEncoding ;']","['HadoopKryo . writeClassAndObject ( out , workerLogic ) ;', 'HadoopKryo . writeClassAndObj ( out , workerLogic ) ;', 'workerLogic = HadoopKryo . readClassAndObject ( in ) ;', 'workerLogic = HadoopKryo . readClassAndObj ( in ) ;', 'import org . apache . giraph . writable . kryo . markers . KryoIgnoreWritable ;', 'private OutputChunked output ;', 'new DataOutputWrapperStream ( ) ;', 'if ( !trackReferences ) {', 'public static < T > T readClassAndObject ( DataInput in ) {', 'return object ;']","['KryoWritableWrapper . class , ""recursion is dissallowed"" ) ;', 'KryoWritableWrapper . class , ""recursion is disallowed"" ) ;']","['import org . apache . giraph . writable . kryo . GiraphClassResolver ;', 'public static final String KRYO REGISTERED CLASS DIR =', 'kryoRegisteredClassPath = basePath + KRYO REGISTERED CLASS DIR ;', 'if ( !disableGiraphResolver ) {', '}', 'GiraphClassResolver . setZookeeperInfo ( zk , kryoRegisteredClassPath ) ;', 'protected final String kryoRegisteredClassPath ;', '"" / kryo"" ;', 'boolean disableGiraphResolver =', 'GiraphConstants . DISABLE GIRAPH CLASS RESOLVER . get ( conf ) ;']","['finishedHostnameIdList + "" , size = "" +', 'tmpFinishedHostnameIdList =', 'workerInfoList + "" , size = "" +', 'newFinishedHostnames . size ( ) +', 'finishedHostnameIdList =', 'Sets . newHashSet ( tmpFinishedHostnameIdList ) ,', 'workerInfoList . size ( ) +', 'Set < String > newFinishedHostnames = Sets . difference (', 'finishedHostnameIdList . size ( ) +', 'newFinishedHostnames + "" , size = "" +']","['""com . google . common . collect . SingletonImmutableBiMap"" ,', 'import org . apache . giraph . writable . kryo . serializers . ImmutableBiMapSerializerUtils ;', 'kryo . register ( Class . forName ( ""com . esotericsoftware . kryo . Kryo$Closure"" ) ,', 'kryo . register ( Class . forName (', 'import org . apache . giraph . writable . kryo . serializers . ImmutableMapSerializer ;', 'import de . javakaffee . kryoserializers . guava . ImmutableMapSerializer ;', 'registerSerializer ( kryo ,', 'ImmutableBiMapSerializerUtils . registerSerializers ( kryo ) ;', 'new ImmutableMapSerializer ( ) ) ;', 'ImmutableMapSerializer . registerSerializers ( kryo ) ;']","['""minimum ; downgrading Giraph to"" + maxCapacity + ""MB . "" ) ;', '""maximum ; downgrading Giraph to"" + maxCapacity + ""MB . "" ) ;']","['Predicate < RequestInfo > shouldResendRequestPredicate ) {', 'networkRequestsResentForTimeout =', '} ) ;', '} , networkRequestsResentForTimeout ) ;', '""Network requests resent for channel failure"" ;', 'GiraphHadoopCounter counter ) {', 'Predicate < RequestInfo > shouldResendRequestPredicate ,', 'NETWORK REQUESTS RESENT FOR CHANNEL FAILURE NAME ) ) ;', '} , networkRequestsResentForChannelFailure ) ;', 'networkRequestsResentForChannelFailure =']","['event . reset ( ) ;', 'if ( eventTriggered ) {', 'event . reset ( ) ;', '}']","['import org . apache . hadoop . mapreduce . Counter ;', 'counter ) ;', 'when ( context . getCounter ( any ( String . class ) , any ( String . class ) ) ) . thenReturn (', 'import static org . mockito . Mockito . any ;', 'Counter counter = mock ( Counter . class ) ;']","['( writeFuture . isDone ( ) & & !writeFuture . isSuccess ( ) ) ) ) | |', 'public static final String NETWORK REQUESTS RESENT FOR CONNECTION FAILURE NAME =', 'ChannelFuture writeFuture = requestInfo . getWriteFuture ( ) ;', 'ChannelFuture writeFuture = requestInfo . getWriteFuture ( ) ;', 'return ( writeFuture ! = null & & ( !writeFuture . channel ( ) . isActive ( ) | |', 'public boolean apply ( RequestInfo requestInfo ) {', '( requestInfo . getElapsedMsecs ( ) > maxRequestMilliseconds ) ;', 'private final GiraphHadoopCounter networkRequestsResentForConnectionFailure ;', '""Network requests resent for connection or request failure"" ;', '}']","['public static final String NETWORK REQUESTS RESENT FOR CONNECTION FAILURE NAME =', 'NETWORK REQUESTS RESENT FOR CONNECTION FAILURE NAME =', 'public static final String']","['private ArrayList < String > names = new ArrayList < String > ( ) ;', 'private ArrayList < String > names = new ArrayList < > ( ) ;']","['Iterables . concat ( Collections . nCopies ( outer * inner , piece ) ) ,', 'Iterables . concat ( Collections . < Piece > nCopies ( outer * inner , piece ) ) ,', 'throw new IllegalStateException (', 'throw new IllegalStateException (', ""if ( minor > = '8' ) {"", 'kryo . register ( Class . forName ( ""java . lang . invoke . SerializedLambda"" ) ) ;', 'try {', 'try {', 'String version = System . getProperty ( ""java . version"" ) ;', '"" , but unable to find needed classes"" , e ) ;']","['} , networkRequestsResentForChannelFailure ) ;', '"" , failing the job"" ) ;', 'GiraphHadoopCounter counter ) {', 'entry . getKey ( ) + "" for "" + requestInfo . getDestinationAddress ( ) +', '} , networkRequestsResentForTimeout ) ;', 'resendTimedOutRequests = RESEND TIMED OUT REQUESTS . get ( conf ) ;', '} , networkRequestsResentForConnectionFailure ) ;', 'GiraphHadoopCounter counter ,', '} , networkRequestsResentForConnectionFailure , true ) ;', 'if ( !resendProblematicRequest ) {']","['return ( ( BranchInstruction ) i1 ) . target = = ( ( BranchInstruction ) i2 ) . target ;', 'return ( ( BranchInstruction ) i1 ) . getTarget ( ) = = ( ( BranchInstruction ) i2 ) . getTarget ( ) ;', 'if ( i1 . opcode = = i2 . opcode ) {', 'if ( i1 . getOpcode ( ) = = i2 . getOpcode ( ) ) {']","['this . num bootstrap arguments = num bootstrap arguments ;', 'this . bootstrap arguments = new int [ num bootstrap arguments ] ;', 'return ""BootstrapMethod ( "" + bootstrap method ref + "" , "" + num bootstrap arguments + "" , ""', 'return bootstrap arguments . length ;', 'bootstrap arguments = new int [ num bootstrap arguments ] ;', 'for ( int i = 0 ; i < bootstrap arguments . length ; i + + ) {', 'for ( int i = 0 ; i < num bootstrap arguments ; i + + ) {', 'import java . util . Arrays ;', 'return num bootstrap arguments ;', 'return ""BootstrapMethod ( "" + bootstrap method ref + "" , "" + bootstrap arguments . length + "" , ""']","['if ( t1 [ i ] ! = t2 [ i ] ) {', 'if ( i1 = = i2 ) {', 'InstructionHandle [ ] t1 = ( ( Select ) i1 ) . getTargets ( ) ;', '}', '}', 'if ( i1 instanceof BranchInstruction ) {', 'return ( ( BranchInstruction ) i1 ) . getTarget ( ) = = ( ( BranchInstruction ) i2 ) . getTarget ( ) ;', 'return true ;', 'if ( t1 . length = = t2 . length ) {', 'return false ;']","['}', 'public ClassPath ( ) {', 'this ( getClassPath ( ) ) ;', '@ Deprecated']","['try {', 'try ( InputStream is = getInputStream ( name , suffix ) ) {', 'InputStream is = getInputStream ( name , suffix ) ;', 'public byte [ ] getBytes ( final String name , final String suffix ) throws IOException {', 'public byte [ ] getBytes ( final String name , final String suffix ) throws IOException {']","['paths = new PathEntry [ vec . size ( ) ] ;', 'list . toArray ( paths ) ;', 'vec . add ( new Zip ( new ZipFile ( file ) ) ) ;', 'list . add ( new Zip ( new ZipFile ( file ) ) ) ;', 'vec . toArray ( paths ) ;', 'list . add ( new Dir ( path ) ) ;', 'List < PathEntry > vec = new ArrayList < > ( ) ;', 'paths = new PathEntry [ list . size ( ) ] ;', 'vec . add ( new Dir ( path ) ) ;', 'List < PathEntry > list = new ArrayList < > ( ) ;']","['if ( !path . equals ( """" ) ) {', 'if ( !path . isEmpty ( ) ) {']","['public abstract long getSize ( ) ;', 'InputStream getInputStream ( ) throws IOException ;', 'public abstract long getTime ( ) ;', 'long getTime ( ) ;', 'public abstract InputStream getInputStream ( ) throws IOException ;', 'long getSize ( ) ;', 'public abstract String getBase ( ) ;', 'String getBase ( ) ;', 'public abstract String getPath ( ) ;', 'String getPath ( ) ;']","['}', 'end = il . getEnd ( ) ;', 'if ( null = = end ) {', 'updateLocalVariableTable ( this . local variable table ) ;', 'end = il . getEnd ( ) ;', '. getIndex ( ) , start , end ) ;', 'final LocalVariable [ ] lv = ( ( LocalVariableTable ) a ) . getLocalVariableTable ( ) ;', 'if ( local variable table ! = null ) {', 'InstructionHandle start = il . findHandle ( l . getStartPC ( ) ) ;', 'updateLocalVariableTable ( local variable table ) ;']","['lvg [ i ] . setLength ( l . getLength ( ) ) ;', 'if ( element . getName ( ) . equals ( l . getName ( ) ) & & element . getIndex ( ) = = l . getIndex ( ) ) {', 'for ( int i = 0 , length = lvg . length ; i < length ; i + + ) {', 'for ( LocalVariable element : lvg ) {', 'if ( lvg [ i ] . getName ( ) . equals ( l . getName ( ) ) & & lvg [ i ] . getIndex ( ) = = l . getIndex ( ) ) {', 'element . setLength ( l . getLength ( ) ) ;']","['private void updateLocalVariableTable ( LocalVariableTable a ) {', 'private void adjustLocalVariableLength ( final LocalVariableTable lvt ) {', 'private void adjustLocalVariableLength ( LocalVariableTable lvt ) {', 'private void updateLocalVariableTable ( final LocalVariableTable a ) {']","['return parent + File . pathSeparator + class path ;', 'private static class Dir extends AbstractPathEntry {', 'private static void getPathComponents ( final String path , final List < String > list ) {', 'return classPath . hashCode ( ) + parent . hashCode ( ) ;', 'list . add ( new Zip ( new ZipFile ( file ) ) ) ;', 'private final String classPath ;', 'private final ZipFile zip ;', 'public boolean accept ( final File dir , String name ) {', 'final ClassFile cf = path . getClassFile ( name , suffix ) ;', 'final List < AbstractPathEntry > list = new ArrayList < > ( ) ;']","['super ( Constants . CONSTANT InvokeDynamic , file ) ;', 'this ( file . readShort ( ) , file . readShort ( ) ) ;', 'super ( Constants . CONSTANT InvokeDynamic , c . getBootstrapMethodAttrIndex ( ) , c . getNameAndTypeIndex ( ) ) ;', 'this ( c . getBootstrapMethodAttrIndex ( ) , c . getNameAndTypeIndex ( ) ) ;']","['import java . io . DataInputStream ;', 'if ( name . endsWith ( "" . class"" ) ) {', 'Assert . fail ( e . getMessage ( ) ) ;', 'try {', '@ Test', 'package org . apache . commons . bcel6 . classfile ;', '} ) ;', 'JavaClass jc = parser . parse ( ) ;', 'DataOutputStream dos = new DataOutputStream ( baos ) ;', '}']","['public class InstructionList {', 'public class InstructionList implements Iterable < InstructionHandle > {']","['public void dump ( DataOutputStream out ) throws IOException {', 'out . writeShort ( super . getIndex ( ) ) ;', 'import java . io . IOException ;', '}', 'out . writeByte ( super . getOpcode ( ) ) ;', '@ Override', 'import java . io . DataOutputStream ;', 'public void dump ( DataOutputStream out ) throws IOException {', 'out . writeShort ( super . getIndex ( ) ) ;', 'import java . io . IOException ;']","['if ( name . endsWith ( "" . class"" ) ) {', 'JavaClass jc = parser . parse ( ) ;', '@ Test', '} ) ;', 'hexChars [ i + + ] = hexArray [ v & 0x0F ] ;', '}', 'Enumeration < JarEntry > en = jar . entries ( ) ;', 'byte [ ] out = il . getByteCode ( ) ;', 'jar . close ( ) ;', 'for ( Method m : jc . getMethods ( ) ) {']","['System . out . printf ( "" % s : "" , attributes [ i ] . getName ( ) ) ;', 'processFieldOrMethod ( ) ;', 'processFieldOrMethod ( true ) ;', 'private final void processFieldOrMethod ( ) throws IOException , ClassFormatException {', 'if ( isField ) {', '}', 'processFieldOrMethod ( false ) ;', 'private final void processFieldOrMethod ( boolean isField ) throws IOException , ClassFormatException {']","['super ( opcode , defaultTarget ) ;', 'super ( opcode , null ) ;', 'this . match = match ;', 'this . match = match ;', 'setTarget ( defaultTarget ) ;']","['if ( i1 = = i2 ) {', 'return false ;', 'return true ;', '}', 'return false ;']","['public String toString ( ) {', 'return toShortString ( ) ;', '}']","['current class = classNamesJList . getSelectedValue ( ) . toString ( ) ;', 'current class = classNamesJList . getSelectedValue ( ) ;']","['org . apache . commons . bcel6 . Constants . CONSTANT Class ) ;', 'import org . apache . commons . bcel6 . Constants ;', 'String className = cp . getConstantString ( cmr . getClassIndex ( ) ,', 'String className = cp . getConstantString ( cmr . getClassIndex ( ) , Constants . CONSTANT Class ) ;']","['return ( AnnotationDefault ) clone ( ) ;', 'return clone ( ) ;', 'return ( EnclosingMethod ) clone ( ) ;', 'return clone ( ) ;', 'return ( Attribute ) clone ( ) ;', 'return clone ( ) ;', 'return ( ParameterAnnotations ) clone ( ) ;', 'return clone ( ) ;', 'return ( Annotations ) clone ( ) ;', 'return clone ( ) ;']","['private Hashtable < InstructionHandle , BranchTarget > visitedTargets = new Hashtable < > ( ) ;', 'private final Stack < BranchTarget > branchTargets = new Stack < > ( ) ;', 'private Stack < BranchTarget > branchTargets = new Stack < > ( ) ;', 'private final Hashtable < InstructionHandle , BranchTarget > visitedTargets = new Hashtable < > ( ) ;', 'private boolean packFrame = false ;', 'private final boolean packFrame = false ;', 'private JPanel messagesPanel = new JPanel ( ) ;', 'private final GridLayout gridLayout1 = new GridLayout ( ) ;', 'private JList < String > pass3aJList = new JList < > ( ) ;', 'private final JMenuItem newFileMenuItem = new JMenuItem ( ) ;']","['return ( ObjectType ) getReferenceType ( cpg ) ;', '}', 'return ( ObjectType ) rt ;', 'throw new ClassGenException ( rt . getSignature ( ) + "" does not represent an ObjectType"" ) ;', 'if ( rt instanceof ObjectType ) {', 'ReferenceType rt = getReferenceType ( cpg ) ;']","['return clone ( ) ;', 'return ( Attribute ) clone ( ) ;', 'public Attribute clone ( )', 'public Object clone ( )', 'public Constant clone ( ) {', 'public Object clone ( ) {', 'return ( Constant ) super . clone ( ) ;', 'return super . clone ( ) ;', 'return clone ( ) ;', 'return ( Attribute ) clone ( ) ;']","['throw new IllegalArgumentException ( ""Cannot be used on an array type"" ) ;', 'ConstantCP cmr = ( ConstantCP ) cp . getConstant ( super . getIndex ( ) ) ;', 'if ( className . startsWith ( "" [ "" ) ) {', 'ConstantPool cp = cpg . getConstantPool ( ) ;', '}', 'public String getClassName ( ConstantPoolGen cpg ) {', 'String className = cp . getConstantString ( cmr . getClassIndex ( ) , Constants . CONSTANT Class ) ;', 'import org . apache . commons . bcel6 . classfile . ConstantCP ;', ""return className . replace ( ' / ' , ' . ' ) ;"", '@ Override']","['return excs ;', 'NO SUCH FIELD ERROR , ILLEGAL ACCESS ERROR , NO SUCH METHOD ERROR', 'private static final Class < ? > [ ] EXCS STRING RESOLUTION = new Class [ 0 ] ;', 'EXCS FIELD AND METHOD RESOLUTION ,', 'private static final Class < ? > [ ] EXCS FIELD AND METHOD RESOLUTION = {', 'switch ( type ) {', '}', 'private static final Class < ? > [ ] EXCS ARRAY EXCEPTION = {', 'private static final Class < ? > [ ] EXCS INTERFACE METHOD RESOLUTION = new Class [ 0 ] ;', 'System . arraycopy ( input , 0 , excs , 0 , input . length ) ;']","['il . append ( InstructionConstants . RETURN ) ;', 'il . append ( InstructionConst . RETURN ) ;', 'il . append ( InstructionConstants . THIS ) ;', 'il . append ( InstructionConst . THIS ) ;', 'if ( InstructionConstants . getInstruction ( this . getOpcode ( ) ) ! = null ) {', 'final Instruction instruction = InstructionConst . getInstruction ( opcode ) ;', 'final Instruction instruction = InstructionConstants . getInstruction ( opcode ) ;', 'if ( InstructionConst . getInstruction ( this . getOpcode ( ) ) ! = null ) {', 'INSTRUCTIONS [ Constants . LSHR ] = LSHR ;', 'return INSTRUCTIONS [ index ] ;']","['public abstract class ExceptionConst implements ExceptionConstants {', 'public static final Class < ExceptionInInitializerError > EXCEPTION IN INITIALIZER ERROR = ExceptionInInitializerError . class ;', 'public static final Class < IllegalAccessError > ILLEGAL ACCESS ERROR = IllegalAccessError . class ;', 'public static final Class < VerifyError > VERIFY ERROR = VerifyError . class ;', 'public static final Class < ClassFormatError > CLASS FORMAT ERROR = ClassFormatError . class ;', 'public static final Class < LinkageError > LINKING EXCEPTION = LinkageError . class ;', 'public static final Class < AbstractMethodError > ABSTRACT METHOD ERROR = AbstractMethodError . class ;', 'public static final Class < IncompatibleClassChangeError > INCOMPATIBLE CLASS CHANGE ERROR = IncompatibleClassChangeError . class ;', '= ArrayIndexOutOfBoundsException . class ;', 'public static final Class < InstantiationError > INSTANTIATION ERROR = InstantiationError . class ;']","['public static final String [ ] CLASS TYPE NAMES = {', 'private static final int [ ] PRODUCE STACK = {', 'public static final String [ ] ITEM NAMES = {', 'private static final String [ ] CLASS TYPE NAMES = {', 'public static final int [ ] PRODUCE STACK = {', 'private static final String [ ] ATTRIBUTE NAMES = {', 'public static final String [ ] ACCESS NAMES = {', 'private static final String [ ] ITEM NAMES = {', '@ Deprecated', 'private static final String [ ] TYPE NAMES = {']","['private static final String [ ] CLASS TYPE NAMES = {', 'return CLASS TYPE NAMES [ index ] ;', 'private static final String [ ] CLASS TYPE NAMES = {', '}', 'public static String getClassTypeName ( int index ) {']","['public static final byte REF getStatic = 2 ;', '4 / * invokeinterface * / , UNDEFINED , 2 / * new * / ,', 'public static final short KNOWN ATTRIBUTES = 22 ;', 'public static final byte ATTR RUNTIMEINVISIBLE PARAMETER ANNOTATIONS = 15 ;', '""AnnotationDefault"" , ""LocalVariableTypeTable"" , ""EnclosingMethod"" , ""StackMapTable"" ,', 'UNPREDICTABLE / * invokeinterface * / , UNDEFINED , 1 / * new * / , 1 / * newarray * / , 1 / * anewarray * / ,', 'public static final int SAME LOCALS 1 STACK ITEM FRAME MAX = 127 ;', 'public static final byte ATTR RUNTIMEINVISIBLE ANNOTATIONS = 13 ;', 'public static final byte ATTR RUNTIME VISIBLE ANNOTATIONS = 12 ;', 'public static final short KNOWN ATTRIBUTES = 12 ;']","['}', 'public static void addAttributeReader ( String name , AttributeReader r )', '@ java . lang . Deprecated', '{', 'readers . put ( name , r ) ;', 'public interface AttributeReader {', 'Attribute createAttribute ( int name index , int length , java . io . DataInputStream file , ConstantPool constant pool ) ;', '}', 'package org . apache . commons . bcel6 . classfile ;', 'int index = class name . indexOf ( BCEL TOKEN ) ;']","['this . attributes count = attributes . length ;', 'this . attributes count = attributes ! = null ? attributes . length : 0 ;']","['public final void setBootstrapMethodAttrIndex ( int bootstrap method attr index ) {', 'public final int getBootstrapMethodAttrIndex ( ) {', '}', 'this . class index = bootstrap method attr index ;', 'return class index ;', 'return super . toString ( ) ;', 'return super . toString ( ) . replace ( ""class index"" , ""bootstrap method attr index"" ) ;', 'return super . getClassIndex ( ) ;', 'public final int getBootstrapMethodAttrIndex ( ) {', '}']","['class name = Integer . toString ( m . getBootstrapMethodAttrIndex ( ) ) ;', 'class name = Integer . toString ( ( ( ConstantInvokeDynamic ) m ) . getBootstrapMethodAttrIndex ( ) ) ;']","['import org . apache . commons . bcel6 . classfile . ConstantNameAndType ;', 'import org . apache . commons . bcel6 . classfile . ConstantInvokeDynamic ;', 'ConstantPool cp = cpg . getConstantPool ( ) ;', '}', 'public String getClassName ( ConstantPoolGen cpg ) {', 'return ( ( ConstantNameAndType ) cp . getConstant ( cid . getNameAndTypeIndex ( ) ) ) . getName ( cp ) ;', 'ConstantInvokeDynamic cid = ( ConstantInvokeDynamic ) cp . getConstant ( super . getIndex ( ) , Const . CONSTANT InvokeDynamic ) ;', 'import static org . junit . Assume . assumeTrue ;', 'import java . io . OutputStream ;', 'BCELifier bcelifier = new BCELifier ( java class , System . out ) ;']","['throw new RuntimeException ( ""Oops : Unknown invoke kind : "" + kind ) ;', 'return new INVOKEDYNAMIC ( index ) ;', 'throw new RuntimeException ( ""Oops : Unknown invoke kind : "" + kind ) ;', 'case Const . INVOKEDYNAMIC :']","['+ BCELifier . printArgumentTypes ( arg types ) + "" , "" + ""Constants . ""', 'private static final String CONSTANT PREFIX = Const . class . getSimpleName ( ) + "" . "" ;', '+ ""Constants . "" + bi . getName ( ) . toUpperCase ( Locale . ENGLISH ) + "" , "" + target', '+ "" \\ "" , "" + BCELifier . printType ( type ) + "" , "" + CONSTANT PREFIX', '+ "" \\ "" , "" + BCELifier . printType ( type ) + "" , "" + ""Constants . ""', '+ CONSTANT PREFIX + bi . getName ( ) . toUpperCase ( Locale . ENGLISH ) + "" , "" + target', '+ BCELifier . printArgumentTypes ( arg types ) + "" , "" + CONSTANT PREFIX', 'buf . append ( ""ACC SUPER | "" ) ;', 'buf . append ( String . format ( CONSTANT PREFIX + ""ACC BIT % x | "" , pow ) ) ;', 'buf . append ( ""ACC BRIDGE | "" ) ;']","['@ Test', 'proc . waitFor ( ) ;', '}', 'sb . append ( new String ( buff , 0 , len ) ) ;', 'final File workDir = new File ( ""target"" ) ;', 'BufferedInputStream is = new BufferedInputStream ( proc . getInputStream ( ) ) ;', 'byte [ ] buff = new byte [ 2048 ] ;', 'JavaClass java class = BCELifier . getJavaClass ( infile . getName ( ) . replace ( "" . class"" , """" ) ) ;', 'private void testClassOnPath ( String javaClass ) throws Exception {', 'assertEquals ( initial , output ) ;']","['final String output = exec ( workDir , ""javap"" , "" - p"" , infile . getName ( ) ) ;', 'final String initial = exec ( null , ""javap"" , "" - p"" , "" - c"" , javaClass ) ;', 'final String initial = exec ( null , ""javap"" , "" - p"" , javaClass ) ;', 'final String output = exec ( workDir , ""javap"" , "" - p"" , "" - c"" , infile . getName ( ) ) ;', '@ org . junit . Ignore']","['public final class StackMapEntry implements Cloneable', 'public final class StackMapEntry implements Node , Cloneable', '@ Override']","['v . visitConstantMethodHandle ( this ) ;', 'v . visitConstantMethodType ( this ) ;', 'obj . accept ( visitor ) ;', 'public void visitParameterAnnotationEntry ( ParameterAnnotationEntry obj ) {', 'public void visitConstantMethodHandle ( ConstantMethodHandle obj ) {', 'stack . pop ( ) ;', '}', 'stack . push ( obj ) ;', 'public void visitConstantMethodType ( ConstantMethodType obj ) {', '@ Override']","['public void visitParameterAnnotationEntry ( ParameterAnnotationEntry obj ) {', 'import org . apache . commons . bcel6 . classfile . ConstantInvokeDynamic ;', 'import org . apache . commons . bcel6 . classfile . StackMapEntry ;', '}', 'public void visitStackMapEntry ( StackMapEntry obj ) {', '@ Override', 'import org . apache . commons . bcel6 . classfile . AnnotationEntry ;', 'import org . apache . commons . bcel6 . classfile . ParameterAnnotationEntry ;', 'tostring = toString ( obj ) ;', 'public void visitParameterAnnotation ( ParameterAnnotations obj ) {']","['+ "" < / TT > \\ n"" ) ;', 'file . println ( "" < P > < TT > "" + Class2HTML . toHTML ( constant pool . constantToString ( index , tag ) ) + "" < / TT > \\ n"" ) ;', '+ Class2HTML . toHTML ( constant pool . constantToString ( index , tag ) )', '. println ( "" < P > < TT > ""', 'file']","['+ type ) ;', 'throw new RuntimeException ( ""SimpleElementValue class does not know how to stringify type "" + type ) ;', 'throw new RuntimeException (', 'throw new RuntimeException ( ""SimpleElementValue doesnt know how to write out type "" + type ) ;', '""SimpleElementValue class does not know how to stringify type ""', '""SimpleElementValue doesnt know how to write out type ""', 'throw new RuntimeException ( ""Not implemented yet! ( ""', 'throw new RuntimeException ( ""Not implemented yet! ( "" + value . getElementValueType ( ) + "" ) "" ) ;', '+ value . getElementValueType ( ) + "" ) "" ) ;', 'throw new RuntimeException ( ""Unexpected element value kind in annotation : "" + type ) ;']","['private static final String NAT DELIM = "" % "" ;', '} else if ( c instanceof ConstantInteger ) {', '} else if ( c instanceof org . apache . commons . bcel6 . classfile . ConstantMethodHandle ) {', '} else if ( c instanceof ConstantDouble ) {', '} else if ( c = = null ) {', '} else if ( c instanceof org . apache . commons . bcel6 . classfile . ConstantMethodType ) {', 'assert false : ""Unexpected constant type : "" + c . getClass ( ) . getName ( ) ;', '} else if ( c instanceof ConstantFloat ) {', '} else {', '} else if ( c instanceof ConstantLong ) {']","['public void delete ( Instruction i ) throws TargetLostException {', 'private InstructionHandle findInstruction2 ( Instruction i ) {', 'throw new ClassGenException ( ""Invalid range : From "" + start + "" to "" + end', 'if ( positions [ i ] = = pos ) {', 'public InstructionHandle append ( Instruction i , CompoundInstruction c ) {', 'public void redirectLocalVariables ( LocalVariableGen [ ] lg , InstructionHandle old target , InstructionHandle new target ) {', 'public void move ( InstructionHandle ih , InstructionHandle target ) {', 'public boolean contains ( Instruction i ) {', 'int target ) {', 'public InstructionHandle insert ( Instruction i , InstructionList il ) {']","['4 / * invokeinterface * / , UNDEFINED , 2 / * new * / ,', '{ T SHORT , T BYTE , T BYTE } / * invokeinterface * / , { T SHORT , T BYTE , T BYTE } / * invokedynamic * / ,', 'UNPREDICTABLE / * invokeinterface * / , UNDEFINED , 1 / * new * / , 1 / * newarray * / , 1 / * anewarray * / ,', '""invokeinterface"" , ""invokedynamic"" , ""new"" , ""newarray"" , ""anewarray"" ,', '""invokeinterface"" , ILLEGAL OPCODE , ""new"" , ""newarray"" , ""anewarray"" ,', 'UNPREDICTABLE / * invokeinterface * / , UNPREDICTABLE / * invokedynamic * / , 1 / * new * / , 1 / * newarray * / , 1 / * anewarray * / ,', 'UNPREDICTABLE / * invokeinterface * / , UNDEFINED , 0 / * new * / , 1 / * newarray * / , 1 / * anewarray * / ,', 'public static final short INVOKEDYNAMIC = 186 ;', '{ T SHORT , T BYTE , T BYTE } / * invokeinterface * / , { } ,', '4 / * invokeinterface * / , 4 / * invokedynamic * / , 2 / * new * / ,']","['return repositoryClass ;', 'public void clear ( ) {', 'JavaClass repositoryClass = findClass ( className ) ;', 'try {', '}', ""className = className . replace ( ' / ' , ' . ' ) ;"", '} finally {', 'import org . apache . commons . bcel6 . classfile . JavaClass ;', '@ Override', ""int i = name . lastIndexOf ( ' . ' ) ;""]","['for ( int i = 0 ; i < map . length ; i + + ) {', 'for ( StackMapEntry element : map ) {', 'len + = map [ i ] . getMapEntrySize ( ) ;', 'len + = element . getMapEntrySize ( ) ;', 'for ( int i = 0 ; i < types of stack items . length ; i + + ) {', 'for ( StackMapType types of local : types of locals ) {', 'len + = types of stack items [ i ] . hasIndex ( ) ? 3 : 1 ;', 'len + = types of stack item . hasIndex ( ) ? 3 : 1 ;', 'len + = types of locals [ i ] . hasIndex ( ) ? 3 : 1 ;', 'for ( StackMapType types of stack item : types of stack items ) {']","['@ Override', '@ Override']","['map . put ( ""fconst"" , new String ( new char [ ] { \' ( \' , makeChar ( Const . FCONST 0 ) , \' | \' , makeChar ( Const . FCONST 1 ) , \' ) \' } ) ) ;', 'map . put ( ""fconst"" , new String ( new char [ ] { \' ( \' , makeChar ( Const . FCONST 0 ) , \' | \' , makeChar ( Const . FCONST 1 ) , \' | \' , makeChar ( Const . FCONST 2 ) , \' ) \' } ) ) ;']","['public static final short MAJOR 1 9 = 53 ;', 'public static final short MINOR 1 9 = 0 ;']","['private final Hashtable < String , Class < ? > > classes = new Hashtable < String , Class < ? > > ( ) ;', 'private final Hashtable < String , Class < ? > > classes = new Hashtable < > ( ) ;', 'protected List < JavaClass > vec = new ArrayList < JavaClass > ( ) ;', 'protected List < JavaClass > vec = new ArrayList < > ( ) ;']","['zip . close ( ) ;', 'try {', 'if ( zip ! = null ) {', '}', '}', 'zip . close ( ) ;', '} catch ( IOException ioe ) {', 'if ( zip ! = null ) {', 'System . err . println ( ""Unreachable default case reached!"" ) ;', 'throw new IllegalStateException ( ""Unreachable default case reached!"" ) ;']","['assertEquals ( initial , output ) ;', 'input = input . replaceAll ( "" + "" , "" "" ) ;', '@ org . junit . Ignore', 'return input ;', 'input = input . replaceAll ( "" / / . + "" , """" ) ;', 'assertEquals ( canonHashRef ( initial ) , canonHashRef ( output ) ) ;', 'input = input . replaceAll ( ""# \\ \\ d + "" , ""#n"" ) ;', '}', 'private String canonHashRef ( String input ) {']","['return ( BranchInstruction ) super . getInstruction ( ) ;', 'return bi . getPosition ( ) ;', 'getBI ( ) . updateTarget ( old ih , new ih ) ;', 'bi = i ;', 'super . setPosition ( getBI ( ) . getPosition ( ) ) ;', 'bi = ( BranchInstruction ) i ;', 'int x = getBI ( ) . updatePosition ( offset , max offset ) ;', 'bi . updateTarget ( old ih , new ih ) ;', 'return getBI ( ) . getTarget ( ) ;', 'int x = bi . updatePosition ( offset , max offset ) ;']","['public class SyntheticRepository extends MemorySensitiveClassPathRepository implements Repository {', 'public class SyntheticRepository extends MemorySensitiveClassPathRepository {']","['File outfile = new File ( workDir , infile . getName ( ) . replace ( "" . class"" , ""Creator . java"" ) ) ;', 'File outfile = new File ( workDir , infile . getName ( ) . replace ( "" . class"" , ""Creator . java"" ) ) ;', 'exec ( workDir , ""java"" , "" - cp"" , "" . : classes"" , outfile . getName ( ) . replace ( "" . java"" , """" ) ) ;', 'exec ( workDir , ""java"" , "" - cp"" , "" . "" + File . pathSeparator + ""classes"" , outfile . getName ( ) . replace ( "" . java"" , """" ) ) ;']","['throw new ClassFormatException ( ""Byte code error : "" + e , e ) ;', 'throw new ClassFormatException ( ""Byte code error : "" + buf . toString ( ) , e ) ;', 'throw new IllegalStateException ( ""Unreachable default case reached!"" ) ;', 'throw new IllegalStateException ( ""Unreachable default case reached!"" ) ;', 'e . printStackTrace ( ) ;', 'System . out . println ( buf . toString ( ) ) ;']","['try {', 'ihs = new InstructionHandle [ code . length ] ;', 'int [ ] pos = new int [ code . length ] ;', 'pos = new int [ code . length ] ;', 'ByteSequence bytes = new ByteSequence ( getByteCode ( ) ) ;', 'int [ ] pos ;', 'ByteSequence bytes = new ByteSequence ( code ) ;', 'InstructionHandle [ ] ihs ;', 'InstructionHandle [ ] ihs = new InstructionHandle [ code . length ] ;', 'try ( ByteSequence bytes = new ByteSequence ( code ) ) {']","['jw . close ( ) ;', 'try ( JavaWriter jw = new JavaWriter ( caw ) ) {', 'try {', '}', 'buf . append ( indices ) . append ( codeToString ( stream , constant pool , verbose ) )', 'jw . write ( in ) ;', 'jw . write ( in ) ;', 'try ( ByteSequence stream = new ByteSequence ( code ) ) {', 'int in = b & 0x000000ff ;', 'int in = b & 0x000000ff ;']","['bytes = baos . toByteArray ( ) ;', 'bytes = baos . toByteArray ( ) ;', 'car . close ( ) ;', 'public static byte [ ] decode ( final String s , final boolean uncompress ) throws IOException {', 'baos . close ( ) ;', 'byte [ ] bytes ;', 'while ( ( ch = jr . read ( ) ) > = 0 ) {', 'public static String encode ( byte [ ] bytes , final boolean compress ) throws IOException {', 'ByteArrayOutputStream bos = new ByteArrayOutputStream ( ) ;', 'GZIPOutputStream gos = new GZIPOutputStream ( baos ) ) {']","['loadedClasses . clear ( ) ;', 'SoftReference < JavaClass > ref = loadedClasses . get ( className ) ;', 'private ClassPath path = null ;', 'loadedClasses . put ( clazz . getClassName ( ) , new SoftReference < > ( clazz ) ) ;', 'loadedClasses . put ( clazz . getClassName ( ) , new SoftReference < > ( clazz ) ) ;', 'loadedClasses . remove ( clazz . getClassName ( ) ) ;', 'SoftReference < JavaClass > ref = loadedClasses . get ( className ) ;', 'private ClassPath path = null ;', 'return loadClass ( path . getInputStream ( className ) , className ) ;', 'return path ;']","['public void testPerformance ( ) throws IOException {', 'public void testPerformance ( ) {']","['repository . removeClass ( clazz ) ;', 'return repository . loadClass ( clazz ) ;', 'private static org . apache . bcel . util . Repository repository = SyntheticRepository . getInstance ( ) ;', 'repository . removeClass ( repository . findClass ( clazz ) ) ;', 'JavaClass old = repository . findClass ( clazz . getClassName ( ) ) ;', 'repository . clear ( ) ;', 'return repository . loadClass ( class name ) ;', 'JavaClass old = repository . findClass ( clazz . getClassName ( ) ) ;', 'return repository ;', 'repository . removeClass ( clazz ) ;']","['cmp = comparator ;', 'bcelComparator = comparator ;', 'private static BCELComparator cmp = new BCELComparator ( ) {', 'return bcelComparator . hashCode ( this ) ;', 'return cmp . hashCode ( this ) ;', 'return bcelComparator ;', 'return cmp . equals ( this , obj ) ;', 'return bcelComparator . equals ( this , obj ) ;', 'return cmp ;', 'private static BCELComparator bcelComparator = new BCELComparator ( ) {']","['cmp = comparator ;', 'bcelComparator = comparator ;', 'private static BCELComparator cmp = new BCELComparator ( ) {', 'return bcelComparator . hashCode ( this ) ;', 'return cmp . hashCode ( this ) ;', 'return bcelComparator ;', 'return cmp . equals ( this , obj ) ;', 'return bcelComparator . equals ( this , obj ) ;', 'return cmp ;', 'private static BCELComparator bcelComparator = new BCELComparator ( ) {']","['cmp = comparator ;', 'bcelComparator = comparator ;', 'private static BCELComparator cmp = new BCELComparator ( ) {', 'return bcelComparator . hashCode ( this ) ;', 'return cmp . hashCode ( this ) ;', 'return bcelComparator ;', 'return cmp . equals ( this , obj ) ;', 'return bcelComparator . equals ( this , obj ) ;', 'return cmp ;', 'private static BCELComparator bcelComparator = new BCELComparator ( ) {']","['cmp = comparator ;', 'bcelComparator = comparator ;', 'private static BCELComparator cmp = new BCELComparator ( ) {', 'return bcelComparator . hashCode ( this ) ;', 'return cmp . hashCode ( this ) ;', 'return bcelComparator ;', 'return cmp . equals ( this , obj ) ;', 'return bcelComparator . equals ( this , obj ) ;', 'return cmp ;', 'private static BCELComparator bcelComparator = new BCELComparator ( ) {']","['cmp = comparator ;', 'bcelComparator = comparator ;', 'private static BCELComparator cmp = new BCELComparator ( ) {', 'return bcelComparator . hashCode ( this ) ;', 'return cmp . hashCode ( this ) ;', 'return bcelComparator ;', 'return cmp . equals ( this , obj ) ;', 'return bcelComparator . equals ( this , obj ) ;', 'return cmp ;', 'private static BCELComparator bcelComparator = new BCELComparator ( ) {']","['cmp = comparator ;', 'bcelComparator = comparator ;', 'private static BCELComparator cmp = new BCELComparator ( ) {', 'return bcelComparator . hashCode ( this ) ;', 'return cmp . hashCode ( this ) ;', 'return bcelComparator ;', 'return cmp . equals ( this , obj ) ;', 'return bcelComparator . equals ( this , obj ) ;', 'return cmp ;', 'private static BCELComparator bcelComparator = new BCELComparator ( ) {']","['return map . keySet ( ) . toArray ( new String [ map . size ( ) ] ) ;', 'private final Map < String , JavaClass > map = new HashMap < > ( ) ;', 'map . put ( clazz . getClassName ( ) , clazz ) ;', 'Collection < JavaClass > values = map . values ( ) ;', 'map . remove ( clazz . getClassName ( ) ) ;', 'if ( !map . containsKey ( clazz . getClassName ( ) ) ) {', 'return map . isEmpty ( ) ;', 'map . remove ( clazz . getClassName ( ) ) ;', 'if ( ! map . containsKey ( clazz . getClassName ( ) ) ) {', 'return map . keySet ( ) . toArray ( new String [ map . size ( ) ] ) ;']","['private static final Map < ClassPath , SyntheticRepository > instances = new HashMap < > ( ) ;', 'SyntheticRepository rep = instances . get ( classPath ) ;', 'SyntheticRepository rep = instances . get ( classPath ) ;', 'private static final Map < ClassPath , SyntheticRepository > instances = new HashMap < > ( ) ;', 'instances . put ( classPath , rep ) ;', 'instances . put ( classPath , rep ) ;']","['private static final LONG Upper singleInstance = new LONG Upper ( ) ;', 'private static final LONG Upper singleton = new LONG Upper ( ) ;', 'return singleInstance ;', 'return singleton ;']","['private static final DOUBLE Upper singleInstance = new DOUBLE Upper ( ) ;', 'return singleton ;', 'return singleInstance ;', 'private static final DOUBLE Upper singleton = new DOUBLE Upper ( ) ;']","['int i = 0 ;', 'assertEquals ( name + "" : Mismatch at "" + i , in , out & 0xFF ) ;', 'assertEquals ( name + "" : Mismatch at "" + i , in , out & 0xFF ) ;', 'int i = 0 ;', 'for ( int out : baos . toByteArray ( ) ) {', 'for ( int out : baos . toByteArray ( ) ) {']","['assertEquals ( name + "" : Mismatch at "" + i , in , out & 0xFF ) ;', 'assertEquals ( name + "" : Mismatch at "" + i , in , out & 0xFF ) ;', 'src . close ( ) ;', 'try ( DataOutputStream dos = new DataOutputStream ( baos ) ) {', 'jc . dump ( dos ) ;', 'jc . dump ( dos ) ;', 'dos . close ( ) ;', '}', 'DataOutputStream dos = new DataOutputStream ( baos ) ;', 'try ( DataInputStream src = new DataInputStream ( inputStream ) ) {']","['wrap ( consumed chars , index + 1 ) ;', 'wrap ( consumed chars , parsedSignature . length ( ) + 2 ) ;', ""int index = signature . indexOf ( ' ; ' ) ;"", 'String parsedSignature = Utility . signatureToString ( signature , false ) ;', '}', ""return ObjectType . getInstance ( parsedSignature . replace ( ' / ' , ' . ' ) ) ;"", 'throw new ClassFormatException ( ""Invalid signature : "" + signature ) ;', ""return ObjectType . getInstance ( signature . substring ( 1 , index ) . replace ( ' / ' , ' . ' ) ) ;"", 'if ( index < 0 ) {', 'String actualValue = ( Type . getType ( ""Ljava / util / Map < TX ; Ljava / util / List < TY ; > ; > ; "" ) ) . getSignature ( ) ;']","['mserTime . stop ( ) ;', 'mserTime . stop ( ) ;', '}', '}', 'if ( e . getName ( ) . endsWith ( "" . class"" ) ) {', 'if ( e . getName ( ) . endsWith ( "" . class"" ) ) {', 'jar . close ( ) ;', 'InputStream in = jar . getInputStream ( e ) ;', 'InputStream in = jar . getInputStream ( e ) ;', 'mg . setMaxStack ( ) ;']","['@ java . lang . Deprecated', '@ java . lang . Deprecated', '@ java . lang . Deprecated']","['public final void isFinal ( final boolean flag ) {', 'setFlag ( Const . ACC VARARGS , flag ) ;', 'public final void isSynthetic ( final boolean flag ) {', 'public final void setAccessFlags ( final int access flags ) {', 'public final void isStatic ( final boolean flag ) {', '}', 'public final void isAnnotation ( final boolean flag ) {', 'public final void isAnnotation ( final boolean flag ) {', 'public final void isInterface ( final boolean flag ) {', 'public final void isNative ( final boolean flag ) {']","['dos . flush ( ) ;', 'String beforeValue = evgBefore . stringifyValue ( ) ;', 'DataOutputStream dos = new DataOutputStream ( baos ) ;', 'try ( DataOutputStream dos = new DataOutputStream ( baos ) ) {', 'try', 'try {', 'String afterValue = evgAfter . stringifyValue ( ) ;', 'dos . flush ( ) ;', '}', 'try ( DataInputStream dis = new DataInputStream ( new ByteArrayInputStream ( baos . toByteArray ( ) ) ) ) {']","['ProcessBuilder pb = new ProcessBuilder ( args ) ;', 'System . err . print ( new String ( buff , 0 , len ) ) ;', 'while ( ( len = is . read ( buff ) ) ! = - 1 ) {', 'while ( ( len = is . read ( buff ) ) ! = - 1 ) {', 'while ( ( len = es . read ( buff ) ) ! = - 1 ) {', 'while ( ( len = es . read ( buff ) ) ! = - 1 ) {', 'sb . append ( new String ( buff , 0 , len ) ) ;', 'ProcessBuilder pb = new ProcessBuilder ( args ) ;', 'private String exec ( final File workDir , final String . . . args ) throws Exception {', 'private String exec ( final File workDir , final String . . . args ) throws Exception {']","['InputStream es = proc . getErrorStream ( ) ;', 'try ( FileOutputStream fos = new FileOutputStream ( outfile ) ) {', 'System . err . print ( new String ( buff , 0 , len ) ) ;', 'System . err . print ( new String ( buff , 0 , len ) ) ;', 'StringBuilder sb = new StringBuilder ( ) ;', 'try ( BufferedInputStream is = new BufferedInputStream ( proc . getInputStream ( ) ) ;', 'while ( ( len = is . read ( buff ) ) ! = - 1 ) {', 'int len ;', 'int len ;', 'StringBuilder sb = new StringBuilder ( ) ;']","['FileInputStream file = new FileInputStream ( ""target / test - classes / Java8Example . class"" ) ;', 'ClassParser parser = new ClassParser ( file , ""Java8Example . class"" ) ;', 'ClassParser parser = new ClassParser ( file , ""Java8Example . class"" ) ;', 'try ( FileInputStream file = new FileInputStream ( ""target / test - classes / Java8Example . class"" ) ) {', 'new Class2HTML ( parser . parse ( ) , outputDir . getAbsolutePath ( ) + "" / "" ) ;', '}', 'new Class2HTML ( parser . parse ( ) , outputDir . getAbsolutePath ( ) + "" / "" ) ;']","['InputStream in = jar . getInputStream ( e ) ;', 'bytes = read ( in ) ;', 'byte [ ] bytes = read ( in ) ;', 'try ( InputStream in = jar . getInputStream ( e ) ) {', 'byte [ ] bytes ;', '}']","['AnnotationEntryGen annAfter = AnnotationEntryGen . read ( dis , cpg , a', 'try ( DataOutputStream dos = new DataOutputStream ( baos ) ) {', 'dos . flush ( ) ;', 'dos . flush ( ) ;', 'dos . close ( ) ;', 'try ( DataInputStream dis = new DataInputStream ( bais ) ) {', 'DataOutputStream dos = new DataOutputStream ( baos ) ;', '}', 'a . dump ( dos ) ;', 'a . dump ( dos ) ;']","['String beforeValue = evgBefore . stringifyValue ( ) ;', 'String beforeValue = evgBefore . stringifyValue ( ) ;', 'try ( DataOutputStream dos = new DataOutputStream ( baos ) ) {', 'try ( DataOutputStream dos = new DataOutputStream ( baos ) ) {', 'try {', 'try {', 'dos . flush ( ) ;', 'dos . flush ( ) ;', 'try ( DataInputStream dis = new DataInputStream ( new ByteArrayInputStream ( baos . toByteArray ( ) ) ) ) {', 'try ( DataInputStream dis = new DataInputStream ( new ByteArrayInputStream ( baos . toByteArray ( ) ) ) ) {']","['public void testCreateBooleanElementValue ( )', 'dos . flush ( ) ;', 'dos . flush ( ) ;', 'String afterValue = evgAfter . stringifyValue ( ) ;', 'try {', '}', 'public void testCreateEnumElementValue ( )', 'evgAfter = ElementValueGen . readElementValue ( dis , cpg ) ;', 'String afterValue = evgAfter . stringifyValue ( ) ;', 'public void testCreateDoubleElementValue ( ) throws Exception']","['var . accept ( visitor ) ;', 'table . accept ( visitor ) ;', 'var . accept ( this ) ;', 'stack . pop ( ) ;', '}', '{', 'stack . push ( var ) ;', '@ Override', 'stack . push ( table ) ;']","['public final class CodeException implements Cloneable , Node {', 'import org . apache . bcel . Constants ;', 'public final class CodeException implements Cloneable , Node , Constants {', 'public final class LocalVariable implements Cloneable , Node {', 'public final class LocalVariable implements Cloneable , Node , Constants {', 'import org . apache . bcel . Constants ;', 'public class InstructionFactory {', 'public class InstructionFactory implements InstructionConstants {', 'public final class PUSH implements CompoundInstruction , VariableLengthInstruction {', 'public final class PUSH implements CompoundInstruction , VariableLengthInstruction , InstructionConstants {']","['public final void setEnclosingMethodIndex ( final int idx ) { methodIndex = idx ; }', 'public final int getEnclosingMethodIndex ( ) {', 'public final void setEnclosingClassIndex ( final int idx ) { classIndex = idx ; }', '}', 'public final int getEnclosingClassIndex ( ) { return classIndex ; }', 'public final void setEnclosingMethodIndex ( final int idx ) {', 'public final int getEnclosingMethodIndex ( ) { return methodIndex ; }', 'return methodIndex ;', 'classIndex = idx ;', 'return classIndex ;']","['public Type normalizeForStackOrLocal ( ) {', 'public Type normalizeForStackOrLocal ( ) {', 'if ( this = = Type . BOOLEAN | | this = = Type . BYTE | | this = = Type . SHORT | | this = = Type . CHAR ) {', 'if ( this = = Type . BOOLEAN | | this = = Type . BYTE | | this = = Type . SHORT | | this = = Type . CHAR ) {', '} else if ( value instanceof ObjectType ) {', '} else if ( value instanceof ObjectType ) {', 'public static void main ( final String [ ] args ) {', 'public static void main ( final String [ ] args ) {', 'public void extendMessage ( String pre , String post ) {', 'public AssertionViolatedException ( ) {']","['for ( JavaClass superclass : jc . getInterfaces ( ) ) {', 'for ( JavaClass superclass : jc . getSuperClasses ( ) ) {', 'for ( JavaClass superclass : jc . getSuperClasses ( ) ) {', 'for ( JavaClass superclass : jc . getInterfaces ( ) ) {', 'for ( Method method : methods )', 'for ( Method method : methods )', 'for ( ParameterAnnotationEntry parameterAnnotation : parameterAnnotations )', 'for ( ParameterAnnotationEntry parameterAnnotation : parameterAnnotations )', 'for ( InstructionHandle ih : il ) {', 'for ( InstructionHandle ih : il ) {']","['return ( cache . toArray ( new String [ cache . size ( ) ] ) ) [ index ] ;', 'return cache . toArray ( new String [ cache . size ( ) ] ) [ index ] ;']","['public synchronized void addListDataListener ( final ListDataListener l ) {', 'public synchronized void removeListDataListener ( final javax . swing . event . ListDataListener l ) {', 'public synchronized String getElementAt ( final int index ) {', 'public synchronized String getElementAt ( final int index ) {', 'public synchronized void update ( final String s ) {', 'public synchronized void addListDataListener ( final ListDataListener l ) {', 'public synchronized void removeListDataListener ( final javax . swing . event . ListDataListener l ) {', 'public class VerifierFactoryListModel implements VerifierFactoryObserver , javax . swing . ListModel < String > {', 'public class VerifierFactoryListModel implements VerifierFactoryObserver ,', 'public synchronized void update ( final String s ) {']","['final File javaLib = new File ( System . getProperty ( ""java . home"" ) + "" / lib"" ) ;', 'public static Collection < Object [ ] > data ( ) {', 'if ( c = = null ) {', 'System . out . println ( name + "" : "" + m . toString ( ) + "" "" + src . length + "" "" + out . length ) ;', 'System . out . println ( name + "" : "" + m . toString ( ) + "" "" + src . length + "" "" + out . length ) ;', 'final File javaLib = new File ( javaHome + "" / lib"" ) ;', 'int i = 0 ;', 'return Arrays . asList ( new Object [ ] [ ] { { System . getProperty ( ""java . home"" ) } } ) ;', 'assertArrayEquals ( name + "" : "" + m . toString ( ) , src , out ) ;', 'import org . junit . runner . RunWith ;']","['return Arrays . asList ( new Object [ ] [ ] { { System . getProperty ( ""java . home"" ) } } ) ;', 'private static Object [ ] [ ] findJavaHomes ( ) {', 'return new Object [ ] [ ] { { System . getProperty ( ""java . home"" ) } } ;', '}', 'return Arrays . asList ( findJavaHomes ( ) ) ;']","['public static Collection < Object [ ] > data ( ) {', 'final Set < String > javaHomes = new HashSet < > ( keys . length ) ;', 'return new Object [ ] [ ] { { System . getProperty ( ""java . home"" ) } } ;', '}', 'private String javaHome ;', 'testJar ( file ) ;', 'for ( final File file : jars ) {', 'final String javaHome = Advapi32Util . registryGetStringValue ( HKEY LOCAL MACHINE , KEY JRE + "" \\ \\ "" + key ,', 'testJar ( file ) ;', 'javaHomes . addAll ( findJavaHomesOnWindows ( jdkKeys ) ) ;']","['javaHomes . add ( System . getProperty ( ""java . home"" ) ) ;', 'javaHomes . add ( SystemUtils . JAVA HOME ) ;']","['final File javaLib = new File ( System . getProperty ( ""java . home"" ) + "" / lib"" ) ;', 'final File javaLib = new File ( System . getProperty ( ""java . home"" ) , ""lib"" ) ;', 'final File javaLib = new File ( javaHome + "" / lib"" ) ;', 'final File javaLib = new File ( javaHome , ""lib"" ) ;']","['private static final boolean debug = Boolean . getBoolean ( ""JavaClass . debug"" ) ; ;', 'private static final boolean debug = Boolean . getBoolean ( ""JavaClass . debug"" ) ;']","['} ;', '}', '} ;', '}']","['throw new IllegalArgumentException ( ""Cannot be used on an array type"" ) ;', 'if ( className . startsWith ( "" [ "" ) ) {', 'final String className = cp . getConstantString ( cmr . getClassIndex ( ) , Const . CONSTANT Class ) ;', 'public String getClassName ( final ConstantPoolGen cpg ) {', '}', 'final ConstantPool cp = cpg . getConstantPool ( ) ;', 'import org . apache . bcel . classfile . ConstantCP ;', 'final ConstantCP cmr = ( ConstantCP ) cp . getConstant ( super . getIndex ( ) ) ;', ""return className . replace ( ' / ' , ' . ' ) ;"", '@ Override']","[""case '!' :"", ""case ' * ' :"", ""case ' + ' :"", 'return typeOfSignature ( signature . substring ( 1 ) ) ;']","['if ( StringUtils . isNoneBlank ( javaHome ) ) {', 'if ( StringUtils . isNoneBlank ( javaHome ) ) {', 'if ( new File ( javaHome ) . exists ( ) ) {', 'if ( new File ( javaHome ) . exists ( ) ) {', '""JavaHome"" ) ;', 'if ( Advapi32Util . registryKeyExists ( HKEY LOCAL MACHINE , KEY JRE + "" \\ \\ "" + key ) ) {', 'javaHomes . add ( javaHome ) ;', '""JavaHome"" ) ;', 'final String javaHome = Advapi32Util . registryGetStringValue ( HKEY LOCAL MACHINE , KEY JRE + "" \\ \\ "" + key ,', '}']","['throw new IllegalArgumentException ( ""Cannot be used on an array type"" ) ;', 'if ( className . startsWith ( "" [ "" ) ) {', '}', 'assertEquals ( "" [ Lorg . apache . bcel . data . PLSETestEnum ; "" , cn ) ;', 'final InstructionList il = mg . getInstructionList ( ) ;', 'import org . apache . bcel . generic . InstructionList ;', 'final String cn = ii . getClassName ( pool ) ;', 'final JavaClass clazz = getTestClass ( PACKAGE BASE NAME + "" . data . PLSETestEnum"" ) ;', 'final MethodGen mg = new MethodGen ( m , gen . getClassName ( ) , pool ) ;', 'final InvokeInstruction ii = ( InvokeInstruction ) ( ih . getInstruction ( ) ) ;']","['break ;', 'break ;', '+ "" : "" + constantToString ( ( ( ConstantNameAndType ) c ) . getSignatureIndex ( ) ,', '+ "" "" + constantToString ( ( ( ConstantNameAndType ) c ) . getSignatureIndex ( ) ,', '@ Test', 'System . out . println ( instructionHandle . getInstruction ( ) . toString ( cp . getConstantPool ( ) ) ) ;', '}', 'for ( Method method : methods ) {', 'import org . apache . bcel . generic . MethodGen ;', 'import org . apache . bcel . AbstractTestCase ;']","['loadedClasses . put ( clazz . getClassName ( ) , new SoftReference < > ( clazz ) ) ;', 'final SoftReference < JavaClass > ref = loadedClasses . get ( className ) ;', 'loadedClasses . remove ( clazz . getClassName ( ) ) ;', 'loadedClasses . clear ( ) ;', 'private ClassPath path = null ;', 'this . path = path ;', 'return path ;', 'private ClassPath path = null ;', 'this . path = path ;', 'loadedClasses . put ( clazz . getClassName ( ) , new SoftReference < > ( clazz ) ) ;']","['public ReferenceType getReferenceType ( final ConstantPoolGen cpg ) {', '@ Override', '}', 'return new ObjectType ( Object . class . getName ( ) ) ;']","['""CONSTANT MethodType"" , """" , ""CONSTANT InvokeDynamic"" } ;', 'return OPCODE NAMES [ index ] ;', 'return OPCODE NAMES [ index ] ;', '""CONSTANT Module"" , ""CONSTANT Package"" } ;', '""CONSTANT MethodType"" , """" , ""CONSTANT InvokeDynamic"" ,', 'public static final byte CONSTANT Package = 20 ;', 'public static final byte CONSTANT Module = 19 ;', 'ConstantModule ( final DataInput file ) throws IOException {', 'file . writeByte ( super . getTag ( ) ) ;', 'public String getBytes ( final ConstantPool cp ) {']","['final ParameterAnnotationEntry immutableArray = rpa', 'final ParameterAnnotationEntry immutableArray = rpa . getParameterAnnotationEntries ( ) [ j ] ;', 'for ( int j = 0 ; j < arg types . length ; j + + )', 'final ParameterAnnotationEntry [ ] parameterAnnotationEntries = rpa . getParameterAnnotationEntries ( ) ;', '. getParameterAnnotationEntries ( ) [ j ] ;', 'for ( int j = 0 ; j < parameterAnnotationEntries . length ; j + + )', 'public Inner ( @ A Object a , @ B Object b ) {', 'final JavaClass jc = Repository . lookupClass ( Bar . Inner . class ) ;', 'public static class Bar {', 'assertEquals ( ""Wrong number of annotations in the second parameter"" , 1 , secondParamAnnotations . size ( ) ) ;']","['if ( localVariableGen ! = null )', '}', 'if ( method . isStatic ( ) )', 'if ( firstStringOffset = = - 1 ) {', 'if ( !method . isNative ( ) & & !method . isAbstract ( ) )', '} else {', 'if ( firstStringOffset = = - 1 )', 'if ( !method . isNative ( ) & & !method . isAbstract ( ) ) {', 'else', 'if ( localVariableGen ! = null ) {']","['for ( LocalVariable element : lvg ) {', 'for ( final LocalVariable element : lvg ) {', 'LocalVariable [ ] lv = lvt . getLocalVariableTable ( ) ;', 'for ( final LocalVariable l : lv ) {', 'LocalVariable [ ] lvg = local variable type table . getLocalVariableTypeTable ( ) ;', 'final LocalVariable [ ] lvg = local variable type table . getLocalVariableTypeTable ( ) ;', 'for ( LocalVariable l : lv ) {', 'final LocalVariable [ ] lv = lvt . getLocalVariableTable ( ) ;', 'JavaClass clazz = getTestClass ( className ) ;', 'final JavaClass clazz = getTestClass ( className ) ;']","['return new StackMap ( name index , length , file , constant pool ) ;', 'System . err . println ( ""Warning : Obsolete StackMap attribute ignored . "" ) ;', 'return new Unknown ( name index , length , file , constant pool ) ;']","['wide = ( super . getIndex ( ) > org . apache . bcel . Const . MAX BYTE ) | | ( Math . abs ( c ) > Byte . MAX VALUE ) ;', 'wide = ( super . getIndex ( ) > org . apache . bcel . Const . MAX BYTE ) ;', 'wide = wide | | ( c > Byte . MAX VALUE ) ;', '}', 'wide = wide | | ( c < Byte . MIN VALUE ) ;', '} else {', 'if ( c > 0 ) {']","['this . orig index = c . getOrigIndex ( ) ;', 'this . signature index = signature index ;', 'this . start pc = start pc ;', 'private int orig index ;', 'final ConstantPool constant pool , final int orig index ) {', 'public final int getOrigIndex ( ) {', 'return orig index ;', 'this . orig index = index ;', 'this . length = length ;', '}']","['type . append ( "" , "" ) . append ( signatureToString ( signature . substring ( consumed chars ) , chopit ) ) ;', 'type . append ( "" . "" ) ;', 'wrap ( Utility . consumed chars , consumed chars ) ;', '}', ""} else if ( signature . charAt ( consumed chars ) = = ' * ' ) {"", 'type . append ( "" > "" ) ;', '}', 'type . append ( "" ? "" ) ;', ""if ( signature . charAt ( consumed chars + 1 ) ! = ' > ' ) {"", ""if ( signature . charAt ( consumed chars ) = = ' . ' ) {""]","['types of stack items [ i ] = new StackMapType ( input , constant pool ) ;', 'types of locals [ i ] = new StackMapType ( input , constantPool ) ;', 'this . byte code offset = byte code offset ;', 'public StackMapEntry ( final int tag , final int byteCodeOffset ,', 'public StackMapEntry ( final int tag , final int byte code offset ,', 'this ( input . readByte ( ) & 0xFF , - 1 , null , null , constantPool ) ;', 'this . types of locals = types of locals ! = null ? types of locals : new StackMapType [ 0 ] ;', 'public StackMapEntry ( final int byteCodeOffset , final int numberOfLocals ,', 'this . types of stack items = types of stack items ! = null ? types of stack items : new StackMapType [ 0 ] ;', 'this . constant pool = constantPool ;']","['wide = ( super . getIndex ( ) > org . apache . bcel . Const . MAX BYTE ) ;', 'wide = super . getIndex ( ) > org . apache . bcel . Const . MAX BYTE ;']","['super ( Const . T UNKNOWN , ""Long Upper"" ) ;', 'super ( Const . T UNKNOWN , ""Double Upper"" ) ;']","['out . writeShort ( super . getIndex ( ) ) ;', 'out . writeShort ( super . getIndex ( ) ) ;', '}', '}', 'v . visitExceptionThrower ( this ) ;', 'v . visitExceptionThrower ( this ) ;', 'public void dump ( final DataOutputStream out ) throws IOException {', 'public void dump ( final DataOutputStream out ) throws IOException {', 'super . setLength ( 5 ) ;', 'super . setLength ( 5 ) ;']","['if ( end . getNext ( ) = = null ) {', 'public boolean getLiveToEnd ( ) {', 'if ( end = = null ) {', 'public void setLiveToEnd ( final boolean live to end ) {', 'this . live to end = false ;', '}', 'private boolean live to end ;', '} else {', 'this . live to end = true ;', 'this . live to end = live to end ;']","['t + = i ;', 'int t = 0 ;', 'package org . apache . bcel . data ;', 'for ( int i = 0 ; i < 100 ; i + + ) {', 'public static void main ( String args [ ] ) {', 'public class PLSETestClass2', '}', '{']","['if ( end = = null ) {', 'this . live to end = end = = null ;', '}', 'this . live to end = false ;', '} else {', 'this . live to end = true ;']","['InstructionHandle end = il . findHandle ( l . getStartPC ( ) + l . getLength ( ) ) ;', 'final InstructionHandle end = il . findHandle ( l . getStartPC ( ) + l . getLength ( ) ) ;', 'InstructionHandle end = null ;', 'final InstructionHandle end = null ;', 'public static void main ( String args [ ] ) {', 'public static void main ( final String args [ ] ) {']","['}', '}', 'final Attribute [ ] attrs = AnnotationEntryGen . getParameterAnnotationAttributes ( cp , param annotations ) ;', 'final Attribute [ ] attrs = AnnotationEntryGen . getParameterAnnotationAttributes ( cp , param annotations ) ;', 'for ( final Attribute attr : attrs ) {', 'for ( final Attribute attr : attrs ) {', 'if ( attrs! = null ) {', 'addAttribute ( attr ) ;', 'addAttribute ( attr ) ;', 'if ( attrs ! = null ) {']","['case Const . CONSTANT Module :', 'return new ConstantModule ( input ) ;']","['case Const . CONSTANT Package :', 'return new ConstantPackage ( input ) ;']","['javaHomes = findJavaHomesOnWindows ( jreKeys ) ;', 'private static final String KEY JDK 9 = ""SOFTWARE \\ \\ JavaSoft \\ \\ JDK"" ;', 'final String [ ] jreKeys = Advapi32Util . registryGetKeys ( HKEY LOCAL MACHINE , KEY JRE ) ;', 'javaHomes . addAll ( findJavaHomesOnWindows ( KEY JRE , Advapi32Util . registryGetKeys ( HKEY LOCAL MACHINE , KEY JRE ) ) ) ;', 'if ( Advapi32Util . registryKeyExists ( HKEY LOCAL MACHINE , KEY JRE + "" \\ \\ "" + key ) ) {', 'javaHomes', '""JavaHome"" ) ;', 'private static Set < String > findJavaHomesOnWindows ( String keyJavaHome , final String [ ] keys ) {', 'final String javaHome = Advapi32Util . registryGetStringValue ( HKEY LOCAL MACHINE , KEY JRE + "" \\ \\ "" + key ,', '. addAll ( findJavaHomesOnWindows ( KEY JRE 9 , Advapi32Util . registryGetKeys ( HKEY LOCAL MACHINE , KEY JRE 9 ) ) ) ;']","['javaHomes . addAll ( findJavaHomesOnWindows ( KEY JRE , Advapi32Util . registryGetKeys ( HKEY LOCAL MACHINE , KEY JRE ) ) ) ;', 'addAllJavaHomesOnWindows ( KEY JDK , javaHomes ) ;', 'javaHomes', 'private static void addAllJavaHomesOnWindows ( final String keyJre , Set < String > javaHomes ) {', '. addAll ( findJavaHomesOnWindows ( KEY JRE 9 , Advapi32Util . registryGetKeys ( HKEY LOCAL MACHINE , KEY JRE 9 ) ) ) ;', 'javaHomes . addAll ( findJavaHomesOnWindows ( keyJre , Advapi32Util . registryGetKeys ( HKEY LOCAL MACHINE , keyJre ) ) ) ;', '. addAll ( findJavaHomesOnWindows ( KEY JDK 9 , Advapi32Util . registryGetKeys ( HKEY LOCAL MACHINE , KEY JDK 9 ) ) ) ;', 'addAllJavaHomesOnWindows ( KEY JRE 9 , javaHomes ) ;', 'javaHomes . addAll ( findJavaHomesOnWindows ( KEY JDK , Advapi32Util . registryGetKeys ( HKEY LOCAL MACHINE , KEY JDK ) ) ) ;', '}']","['Set < String > javaHomes = new HashSet < > ( ) ;', 'final Set < String > javaHomes = new HashSet < > ( ) ;', 'private static Set < String > findJavaHomesOnWindows ( String keyJavaHome , final String [ ] keys ) {', 'private static void addAllJavaHomesOnWindows ( final String keyJre , final Set < String > javaHomes ) {', 'private static void addAllJavaHomesOnWindows ( final String keyJre , Set < String > javaHomes ) {', 'private static Set < String > findJavaHomesOnWindows ( final String keyJavaHome , final String [ ] keys ) {']","['if ( name . endsWith ( "" . class"" ) ) {', 'if ( name . endsWith ( "" . class"" ) ) {', 'try ( InputStream in = jar . getInputStream ( e ) ) {', 'try ( InputStream in = jar . getInputStream ( e ) ) {', '@ Test', '@ Test', 'hexChars [ i + + ] = hexArray [ v & 0x0F ] ;', 'hexChars [ i + + ] = hexArray [ v & 0x0F ] ;', '}', '}']","['javaHomes . addAll ( findJavaHomesOnWindows ( keyJre , Advapi32Util . registryGetKeys ( HKEY LOCAL MACHINE , keyJre ) ) ) ;', 'if ( Advapi32Util . registryKeyExists ( HKEY LOCAL MACHINE , keyJre ) ) {', '}', 'javaHomes . addAll ( findJavaHomesOnWindows ( keyJre , Advapi32Util . registryGetKeys ( HKEY LOCAL MACHINE , keyJre ) ) ) ;']","['return new ConstantMethodref ( input ) ;', 'return new ConstantClass ( dataInput ) ;', 'return new ConstantDouble ( input ) ;', 'return new ConstantInteger ( dataInput ) ;', 'return new ConstantPackage ( input ) ;', 'return new ConstantMethodType ( dataInput ) ;', 'return new ConstantModule ( input ) ;', 'public static Constant readConstant ( final DataInput dataInput ) throws IOException , ClassFormatException {', 'return ConstantUtf8 . getInstance ( input ) ;', 'return new ConstantModule ( dataInput ) ;']","['public static final short MAJOR 1 9 = 53 ;', 'public static final short MAJOR 1 9 = 53 ;']","['public static final short MAJOR 1 10 = 54 ;', 'public static final short MINOR 1 10 = 0 ;']","['public static final short MAJOR 1 11 = 55 ;', 'public static final short MINOR 1 11 = 0 ;']","['""CONSTANT MethodType"" , """" , ""CONSTANT InvokeDynamic"" ,', '""CONSTANT MethodType"" , ""CONSTANT Dynamic"" , ""CONSTANT InvokeDynamic"" ,', 'public static final byte CONSTANT Dynamic = 17 ;', 'return new ConstantDynamic ( dataInput ) ;', 'case Const . CONSTANT Dynamic :', 'return super . toString ( ) . replace ( ""class index"" , ""bootstrap method attr index"" ) ;', '}', 'import java . io . DataInput ;', 'super ( Const . CONSTANT Dynamic , bootstrap method attr index , name and type index ) ;', '@ Override']","['public static final short MAJOR 1 9 = 53 ;', 'public static final short MAJOR 11 = 55 ;', 'public static final short MINOR 1 10 = 0 ;', 'public static final short MAJOR 10 = 54 ;', 'public static final short MINOR 1 11 = 0 ;', '@ Deprecated', 'public static final short MINOR 1 9 = 0 ;', 'public static final short MAJOR 1 9 = MAJOR 9 ;', 'public static final short MAJOR 1 11 = 55 ;', 'public static final short MAJOR 9 = 53 ;']","['abstract URL getResource ( String name ) ;', 'abstract URL getResource ( String name ) ;', 'this ( class path ) ;', 'this ( class path ) ;', 'String getPath ( ) ;', 'String getPath ( ) ;', 'protected String toEntryName ( final String name , final String suffix ) {', 'protected String toEntryName ( final String name , final String suffix ) {', 'public String toString ( ) {', 'ClassFile getClassFile ( final String name , final String suffix ) throws IOException {']","['try ( InputStream is = getInputStream ( name , suffix ) ) {', '. hasMoreTokens ( ) ; ) {', 'modules path = System . getProperty ( ""java . home"" ) + File . separator + ""jmods"" ;', 'if ( inputStream ! = null ) {', 'dis = new DataInputStream ( is ) ;', 'getPathComponents ( classPathProp , list ) ;', 'is = getClass ( ) . getClassLoader ( ) . getResourceAsStream ( name + suffix ) ;', 'inputStream = getClass ( ) . getClassLoader ( ) . getResourceAsStream ( name + suffix ) ;', 'if ( is = = null ) {', 'for ( final StringTokenizer tokenizer = new StringTokenizer ( class path , File . pathSeparator ) ; tokenizer']","['public void testJDKjars ( ) throws Exception {', 'final File [ ] jars = listJdkJars ( ) ;', 'final File [ ] jars = listJDKjars ( ) ;', 'public void testJdkJars ( ) throws Exception {', 'public class JDKGenericDumpTestCase {', 'private File [ ] listJdkJars ( ) throws Exception {', 'public JDKGenericDumpTestCase ( final String javaHome ) {', 'public class JdkGenericDumpTestCase {', 'private File [ ] listJDKjars ( ) throws Exception {', 'public JdkGenericDumpTestCase ( final String javaHome ) {']","['return file . getName ( ) . endsWith ( "" . jmod"" ) ;', 'private File [ ] listJdkModules ( ) throws Exception {', 'return javaLib . listFiles ( new FileFilter ( ) {', 'if ( jars ! = null ) {', '} ) ;', '@ Test', '}', 'for ( final File file : jars ) {', 'final File javaLib = new File ( javaHome , ""jmods"" ) ;', 'testJar ( file ) ;']","['final File [ ] jars = listJdkModules ( ) ;', 'final File [ ] jmods = listJdkModules ( ) ;', 'for ( final File file : jars ) {', 'if ( jmods ! = null ) {', 'if ( jars ! = null ) {', 'for ( final File file : jmods ) {']","['private final ZipFile zip ;', 'public ClassPath ( final String classPath ) {', 'this ( class path ) ;', 'return resolved . toString ( ) ;', '}', 'if ( zipFile ! = null ) {', 'for ( final String module : modules ) {', 'zipFile . close ( ) ;', 'for ( final StringTokenizer tokenizer = new StringTokenizer ( class path , File . pathSeparator ) ; tokenizer', 'import java . nio . file . FileSystem ;']","['URLClassLoader classLoader ;', 'private final FileSystem fs ;', 'this . classLoader = new URLClassLoader ( new URL [ ] { jrtFsPath . toUri ( ) . toURL ( ) } ) ;', 'FileSystem tempFs = null ;', 'final Path jrePath = Paths . get ( System . getProperty ( ""java . home"" ) ) ;', 'URLClassLoader tempClassLoader = null ;', 'try ( DirectoryStream < Path > ds = Files . newDirectoryStream ( fs . getPath ( "" / modules"" ) ) ) {', 'this . fs = tempFs ;', 'FileSystem fs ;', 'try ( DirectoryStream < Path > ds = Files . newDirectoryStream ( tempFs . getPath ( "" / modules"" ) ) ) {']","['private final FileSystem fs ;', 'if ( jrtFileSystem ! = null ) {', 'if ( fs ! = null ) {', 'private final FileSystem jrtFileSystem ;', 'this . fs = tempFs ;', 'jrtFileSystem . close ( ) ;', 'fs . close ( ) ;', 'this . jrtFileSystem = tempFs ;']","['if ( classLoader ! = null ) {', 'if ( classLoader ! = null ) {', '}', '}', 'classLoader . close ( ) ;', 'classLoader . close ( ) ;', 'jrtFileSystem . close ( ) ;', 'jrtFileSystem . close ( ) ;', 'if ( jrtFileSystem ! = null ) {', 'if ( jrtFileSystem ! = null ) {']","['for ( final JrtModule module : modules ) {', 'for ( int i = 0 ; i < modules . length ; i + + ) {', 'module . close ( ) ;', 'modules [ i ] . close ( ) ;']","['for ( final JrtModule module : modules ) {', 'final URL url = modules [ i ] . getResource ( name ) ;', 'final URL url = module . getResource ( name ) ;', 'list . add ( modulesDir . getPath ( ) + File . separatorChar + modules [ i ] ) ;', 'for ( final String module : modules ) {', 'final InputStream inputStream = modules [ i ] . getResourceAsStream ( name ) ;', 'final ClassFile classFile = module . getClassFile ( name , suffix ) ;', 'for ( int i = 0 ; i < modules . length ; i + + ) {', 'list . add ( modulesDir . getPath ( ) + File . separatorChar + module ) ;', 'final ClassFile classFile = modules [ i ] . getClassFile ( name , suffix ) ;']","['import java . nio . file . DirectoryStream ;', 'this . modules = new JrtModule [ list . size ( ) ] ;', 'URLClassLoader tempClassLoader = null ;', 'modularRuntimeImage . close ( ) ;', 'try {', '} else if ( path . endsWith ( ModularRuntimeImage . MODULES PATH ) ) {', 'import java . nio . file . FileSystem ;', 'modules [ i ] = new JrtModule ( list . get ( i ) ) ;', '}', 'private final ModularRuntimeImage modularRuntimeImage ;']","['private static Set < String > findJavaHomesOnWindows ( final String keyJavaHome , final String [ ] keys ) {', 'String [ ] paths = path . split ( File . pathSeparator ) ;', 'javaHomes . addAll ( Arrays . asList ( paths ) ) ;', '}', 'private static void addAllJavaHomes ( String extraJavaHomesProp , Set < String > javaHomes ) {', 'private static Set < String > findJavaHomesOnWindows ( final String keyJavaHome , final String [ ] keys ) {', 'if ( StringUtils . isEmpty ( path ) ) {', 'addAllJavaHomes ( ""ExtraJavaHomes"" , javaHomes ) ;', 'import java . util . Arrays ;', 'String path = System . getProperty ( extraJavaHomesProp ) ;']","['public static final short MINOR 13 = 0 ;', 'public static final short MAJOR 13 = 57 ;', 'public static final short MAJOR 12 = 56 ;', 'public static final short MINOR 12 = 0 ;']","['void visitConstantDynamic ( ConstantDynamic constantDynamic ) ;', 'default void visitConstantDynamic ( ConstantDynamic constantDynamic ) {', '}']","['private static abstract class AbstractZip extends AbstractPathEntry {', 'private abstract static class AbstractZip extends AbstractPathEntry {']","['default void visitConstantDynamic ( ConstantDynamic constantDynamic ) {', 'default void visitConstantDynamic ( ConstantDynamic constantDynamic ) {', '}', '}']","['exec ( workDir , ""javac"" , "" - cp"" , ""classes"" , outfile . getName ( ) ) ;', 'exec ( workDir , ""javac"" , "" - cp"" , ""classes"" , outfile . getName ( ) , "" - source"" , ""1 . 8"" , "" - target"" , ""1 . 8"" ) ;']","['bh list = this ;', 'return new BranchHandle ( i ) ;', 'super . setNext ( bh list ) ;', 'final BranchHandle bh = bh list ;', 'bh list = ( BranchHandle ) bh . getNext ( ) ;', 'return bh ;', '}', 'return new BranchHandle ( i ) ;', 'if ( bh list = = null ) {', 'protected void addHandle ( ) {']","['Constants . CONSTANT Class ) ;', 'Const . CONSTANT Class ) ;', 'import org . apache . bcel . Constants ;', 'import org . apache . bcel . Const ;', 'Constants . CONSTANT Utf8 ) ;', 'Const . CONSTANT Utf8 ) ;']","['return THIS . toString ( ) . equals ( THAT . toString ( ) ) ;', 'import java . util . Objects ;', 'return Objects . equals ( THIS . toString ( ) , THAT . toString ( ) ) ;', 'return THIS . getName ( ) . equals ( THAT . getName ( ) )', 'import java . util . Objects ;', '& & THIS . getSignature ( ) . equals ( THAT . getSignature ( ) ) ;', 'return Objects . equals ( THIS . getName ( ) , THAT . getName ( ) )', '& & Objects . equals ( THIS . getSignature ( ) , THAT . getSignature ( ) ) ;', 'return THIS . getClassName ( ) . equals ( THAT . getClassName ( ) ) ;', 'import java . util . StringTokenizer ;']","['PooledConnection pconn =', 'private final WeakHashMap < PooledConnection , PooledConnectionAndInfo > pcMap =', 'String query = validationQuery ;', 'import java . util . HashSet ;', 'pcMap . remove ( pc ) ;', 'public synchronized PooledConnectionAndInfo makeObject ( UserPassKey upkey )', 'pc . close ( ) ;', 'PooledConnection pconn = pci . getPooledConnection ( ) ;', 'validatingMap . put ( pconn , null ) ;', 'String query = validationQuery ;']","['new WeakHashMap < PooledConnection , PooledConnectionAndInfo > ( ) ;', 'private final Set < PooledConnection > validatingSet = new HashSet < > ( ) ;', 'private final Set < PooledConnection > validatingSet =', 'new WeakHashMap < > ( ) ;', 'new HashSet < PooledConnection > ( ) ;']","['new WeakHashMap < PooledConnection , PooledConnectionAndInfo > ( ) ;', 'private final Set < PooledConnection > validatingSet = new HashSet < > ( ) ;', 'private final Set < PooledConnection > validatingSet =', 'new WeakHashMap < > ( ) ;', 'new HashSet < PooledConnection > ( ) ;']","['new HashMap < String , InstanceKeyDataSource > ( ) ;', 'new HashMap < > ( ) ;']","['finally {', '} finally {', 'Iterator < AbandonedTrace > traceIter = traces . iterator ( ) ;', 'try {', 'protected Connection getDelegateInternal ( ) {', '}', 'passivate ( ) ;', 'setLastUsed ( 0 ) ;', '( ( Statement ) trace ) . close ( ) ;', '( ( Statement ) trace ) . close ( ) ;']","['}', 'DelegatingConnection < ? > c = ( DelegatingConnection < ? > ) obj ;', '( ( DelegatingConnection ) conn ) . clearCachedState ( ) ;', '}', 'if ( obj instanceof DelegatingConnection ) {', 'private C conn = null ;', 'c = ( ( DelegatingConnection ) c ) . getDelegateInternal ( ) ;', 'public class DelegatingConnection < C extends Connection > extends AbandonedTrace', 'public void setDelegate ( Connection c ) {', 'if ( obj instanceof DelegatingConnection ) {']","['protected boolean testOnReturn = false ;', 'dataSource = createDataSourceInstance ( ) ;', 'protected int initialSize = 0 ;', 'public List < String > getConnectionInitSqls ( ) {', 'protected boolean testOnBorrow = true ;', 'private String username = null ;', 'protected volatile String defaultCatalog = null ;', 'List < String > result = connectionInitSqls ;', 'protected long timeBetweenEvictionRunsMillis =', 'private long timeBetweenEvictionRunsMillis =']","['pds . setLogWriter ( logWriter ) ;', 'dataSource . setLogWriter ( logWriter ) ;']","['private final List < AbandonedTrace > traceList = new ArrayList < > ( ) ;', 'if ( ref . get ( ) = = null ) {', 'return new ArrayList < > ( traceList ) ;', 'result . add ( ref . get ( ) ) ;', 'this . traceList . remove ( trace ) ;', '} else if ( ref . get ( ) = = null ) {', 'this . traceList . add ( trace ) ;', 'if ( trace . equals ( ref . get ( ) ) ) {', 'import java . util . Iterator ;', '}']","['ObjectPool < PoolableConnection > pool , ObjectName jmxName ) {', 'if ( e . getNextException ( ) ! = null ) {', 'private static MBeanServer MBEAN SERVER = null ;', 'ObjectPool < PoolableConnection > pool , ObjectName jmxName ) {', 'private ObjectPool < PoolableConnection > pool = null ;', 'fatalException = isDisconnectionSqlException ( e . getNextException ( ) ) ;', 'super . handleException ( e ) ;', 'private static MBeanServer MBEAN SERVER = null ;', 'disconnectionSqlCodes = disconnectSqlCodes ;', 'private boolean isDisconnectionSqlException ( SQLException e ) {']","['XAResource xaResource = xaResources . get ( key ) ;', 'final int status = transaction . getStatus ( ) ;', 'int status = transaction . getStatus ( ) ;', 'final XAResource xaResource = xaResources . get ( key ) ;', 'Connection key = getConnectionKey ( connection ) ;', '} catch ( final SystemException e ) {', '} catch ( SystemException e ) {', 'final Connection key = getConnectionKey ( connection ) ;', 'WeakReference < AbandonedTrace > ref = iter . next ( ) ;', 'final WeakReference < AbandonedTrace > ref = iter . next ( ) ;']","['c = ( ( DelegatingConnection ) c ) . getDelegate ( ) ;', 'return c ;', 'return conn ;', 'public void setTypeMap ( Map map ) throws SQLException { checkOpen ( ) ; conn . setTypeMap ( map ) ; }', 'public String nativeSQL ( String sql ) throws SQLException { checkOpen ( ) ; return conn . nativeSQL ( sql ) ; }', 'public boolean isReadOnly ( ) throws SQLException { checkOpen ( ) ; return conn . isReadOnly ( ) ; }', 'if ( closed ) {', 'Connection c = conn ;', 'public DelegatingConnection ( Connection c ) {', 'protected void checkOpen ( ) throws SQLException {']","['ObjectNameWrapper . wrap ( requestedName ) . registerMBean ( ) ;', 'return ObjectNameWrapper . unwrap ( registeredJmxObjectName ) ;', 'connectionFactory = new PoolableConnectionFactory ( driverConnectionFactory , registeredJmxObjectName . unwrap ( ) ) ;', 'connectionFactory = new PoolableConnectionFactory ( driverConnectionFactory , ObjectNameWrapper . unwrap ( registeredJmxObjectName ) ) ;', 'return registeredJmxObjectName . unwrap ( ) ;', 'ObjectNameWrapper . wrap ( requestedName ) . registerMBean ( this ) ;', 'MBEAN SERVER . registerMBean ( this , objectName ) ;', 'public static ObjectName unwrap ( ObjectNameWrapper wrapper ) {', 'public void registerMBean ( ) {', 'return wrapper = = null ? null : wrapper . unwrap ( ) ;']","['protected static final String URL PREFIX = ""jdbc : apache : commons : dbcp : "" ;', 'public static final String URL PREFIX = ""jdbc : apache : commons : dbcp : "" ;']","['assertEquals ( null , pcds . getPassword ( ) ) ;', 'assertEquals ( ""Alice"" , pcds . getUser ( ) ) ;', '@ Test', 'pcds . setPassword ( null ) ;', 'public void testSetUserNull ( ) throws Exception {', 'assertEquals ( null , pcds . getUser ( ) ) ;', 'pcds . setPassword ( ""Secret"" ) ;', '}', 'assertEquals ( ""Secret"" , pcds . getPassword ( ) ) ;', 'pcds . setUser ( ""Alice"" ) ;']","['connectionProperties . put ( ""user"" , username ) ;', 'if ( connectionProperties . containsKey ( KEY PASSWORD ) ) {', 'connectionProperties . setProperty ( ""password"" , v ) ;', 'connectionProperties . put ( KEY USER , username ) ;', 'ref . add ( new StringRefAddr ( ""user"" , getUser ( ) ) ) ;', '}', 'ra = ref . get ( ""password"" ) ;', 'private static final String KEY PASSWORD = ""password"" ;', 'if ( connectionProperties . containsKey ( ""password"" ) ) {', 'connectionProperties . put ( KEY PASSWORD , pass ) ;']","['connectionProperties . setProperty ( KEY PASSWORD , v ) ;', 'update ( connectionProperties , KEY USER , username ) ;', 'if ( v = = null ) {', 'if ( value = = null ) {', 'if ( connectionProperties ! = null ) {', 'private void update ( final Properties properties , final String key , final String value ) {', 'connectionProperties . remove ( KEY USER ) ;', '}', 'connectionProperties . put ( KEY USER , username ) ;', '} else {']","['update ( connectionProperties , KEY USER , username ) ;', 'connectionProperties . setProperty ( KEY PASSWORD , v ) ;', 'if ( value = = null ) {', 'if ( v = = null ) {', 'private void update ( final Properties properties , final String key , final String value ) {', 'if ( connectionProperties ! = null ) {', '}', 'connectionProperties . remove ( KEY USER ) ;', '} else {', 'connectionProperties . put ( KEY USER , username ) ;']","['connectionProperties . setProperty ( KEY PASSWORD , v ) ;', 'update ( connectionProperties , KEY USER , username ) ;', 'if ( v = = null ) {', 'if ( value = = null ) {', 'if ( connectionProperties ! = null ) {', 'private void update ( final Properties properties , final String key , final String value ) {', 'connectionProperties . remove ( KEY USER ) ;', '}', 'connectionProperties . put ( KEY USER , username ) ;', '} else {']","['public void clear ( ) {', 'InstanceKeyDataSourceFactory . removeInstance ( getInstanceKey ( ) ) ;', 'for ( final PooledConnectionManager manager : managers . values ( ) ) {', 'try {', '} catch ( final Exception closePoolException ) {', '( ( CPDSConnectionFactory ) manager ) . getPool ( ) . clear ( ) ;', '}']","['if ( connectionProperties . containsKey ( KEY PASSWORD ) ) {', 'if ( connectionProperties . containsKey ( KEY PASSWORD ) ) {', 'setPassword ( connectionProperties . getProperty ( KEY PASSWORD ) ) ;', 'if ( connectionProperties ! = null ) {', 'setUser ( connectionProperties . getProperty ( KEY USER ) ) ;', 'setPassword ( connectionProperties . getProperty ( KEY PASSWORD ) ) ;', '}', 'setUser ( connectionProperties . getProperty ( KEY USER ) ) ;', 'if ( connectionProperties . containsKey ( KEY USER ) ) {', '}']","['throw new SQLException ( ""Pool not registered . "" ) ;', 'throw new SQLException ( ""Pool not registered : "" + name ) ;']","['protected static final HashMap < String , ObjectPool < ? extends Connection > > pools =', 'protected static final HashMap < String , ObjectPool < ? extends Connection > > pools =', 'pools . put ( name , pool ) ;', 'pools . put ( name , pool ) ;']","['lock . lock ( ) ;', 'private Lock lock ;', '/ /', 'import java . util . concurrent . locks . Lock ;', 'this . lock = new ReentrantLock ( ) ;', 'lock . unlock ( ) ;', 'import java . util . concurrent . locks . ReentrantLock ;']","['if ( transactionContext = = null ) {', 'if ( transactionContext ! = null & & !transactionContext . isTransactionComplete ( ) ) {', 'transactionContext = null ;', 'if ( transactionContext = = null | | transactionContext . isTransactionComplete ( ) ) {', 'if ( transactionContext ! = null ) {', 'transactionContext . completeTransaction ( ) ;', 'public void completeTransaction ( ) {', 'this . transactionComplete = false ;', 'public boolean isTransactionComplete ( ) {', 'throw new SQLException ( ""Unable to enlist connection in the transaction"" , e ) ;']","['protected PStmtKeyCPDS createKey ( final String sql , final int autoGeneratedKeys ) {', 'protected PStmtKeyCPDS createKey ( final String sql , final int autoGeneratedKeys ) {', 'try {', 'try {', 'return new PStmtKeyCPDS ( normalizeSQL ( sql ) , columnIndexes ) ;', 'return new PStmtKeyCPDS ( normalizeSQL ( sql ) , columnIndexes ) ;', 'protected PStmtKeyCPDS createKey ( final String sql , final int resultSetType ,', 'protected PStmtKeyCPDS createKey ( final String sql , final int resultSetType ,', 'if ( null = = key . getAutoGeneratedKeys ( ) ) {', 'if ( null = = key . getAutoGeneratedKeys ( ) ) {']","['private final KeyedObjectPool < PStmtKey , DelegatingPreparedStatement > pool ;', 'final KeyedObjectPool < PStmtKey , DelegatingPreparedStatement > pool ,', 'final KeyedObjectPool < PStmtKey , DelegatingPreparedStatement > pool ,', 'private final KeyedObjectPool < PStmtKey , DelegatingPreparedStatement > pool ;']","['}', '}', 'new DriverManagerConnectionFactory ( ""jdbc : apache : commons : testdriver"" , properties ) :', 'new DriverManagerConnectionFactory ( ""jdbc : apache : commons : testdriver"" , properties ) :', '@ BeforeClass', '@ BeforeClass', 'final ConnectionFactory connectionFactory = withProperties ?', 'final ConnectionFactory connectionFactory = withProperties ?', 'context . destroySubcontext ( JNDI SUBCONTEXT ) ;', 'context . destroySubcontext ( JNDI SUBCONTEXT ) ;']","['return new PStmtKey ( normalizeSQL ( sql ) , catalog , resultSetType , resultSetConcurrency ) ;', 'return new PStmtKey ( normalizeSQL ( sql ) , catalog , resultSetType , resultSetConcurrency ) ;', 'return true ;', 'return true ;', '@ Override', '@ Override', 'public PreparedStatement prepareStatement ( final String sql , final int columnIndexes [ ] )', 'public PreparedStatement prepareStatement ( final String sql , final int columnIndexes [ ] )', 'final PooledObject < DelegatingPreparedStatement > p ) {', 'final PooledObject < DelegatingPreparedStatement > p ) {']","['return conn . prepareStatement ( ""select * from dual"" , 0 , 0 , 0 ) ;', 'return conn . prepareStatement ( ""select * from dual"" , 0 , 0 , 0 ) ;', 'return conn . prepareStatement ( ""select * from dual"" , 0 ) ;', 'return conn . prepareStatement ( ""select * from dual"" , 0 , 0 ) ;', 'return conn . prepareStatement ( ""select * from dual"" , new String [ 0 ] ) ;', 'return conn . prepareStatement ( ""select * from dual"" , new String [ 0 ] ) ;', 'return conn . prepareStatement ( ""select * from dual"" , 0 , 0 ) ;', 'return conn . prepareStatement ( ""select * from dual"" , 0 ) ;']","['public void testPoolPrepareStatement ( ) throws Exception', 'public void testPoolPrepareStatement ( ) throws Exception {', '{']","['if ( null = = key ) {', 'final PoolablePreparedStatement pps = new PoolablePreparedStatement ( statement , key , pstmtPool , this ) ;', 'PoolablePreparedStatement pps = new PoolablePreparedStatement ( statement , key , pstmtPool , this ) ;', 'if ( null = = key ) {', 'final', '@ SuppressWarnings ( ""resource"" )']","['columnIndexes = columnIndexes ;', 'columnIndexes = columnIndexes = = null ? null : Arrays . copyOf ( columnIndexes , columnIndexes . length ) ;', 'columnNames = columnNames ;', 'columnNames = columnNames = = null ? null : Arrays . copyOf ( columnNames , columnNames . length ) ;', '@ Test', 'public void testCtorStringStringArrayOfInts ( ) {', 'public class TestPStmtKey {', 'Assert . assertArrayEquals ( input , pStmtKey . getColumnNames ( ) ) ;', '}', 'Assert . assertFalse ( Arrays . equals ( input , pStmtKey . getColumnIndexes ( ) ) ) ;']","['return true ;', 'super ( sql , null , columnIndexes ) ;', 'buf . append ( "" , statementType = "" ) ;', 'super ( sql , null , columnNames ) ;', 'columnIndexes = Arrays . copyOf ( columnIndexes , columnIndexes . length ) ;', 'return result ;', 'private final Integer resultSetHoldability ;', 'public String toString ( ) {', 'buf . append ( "" , catalog = "" ) ;', '}']","['} catch ( final RuntimeException e ) {', '} catch ( final Exception e ) {', 'pool . returnObject ( key , this ) ;', 'if ( getConnectionInternal ( ) ! = null ) {', '} catch ( final Exception e ) {', 'pool . returnObject ( key , this ) ;', 'getConnectionInternal ( ) . addTrace ( this ) ;', '} catch ( final SQLException e ) {', '} catch ( final SQLException e ) {', '} catch ( final RuntimeException e ) {']","['protected void passivate ( ) throws SQLException {', 'public void passivate ( ) throws SQLException {', 'protected void activate ( ) throws SQLException {', 'public void activate ( ) throws SQLException {', 'protected void passivate ( ) throws SQLException {', 'public void passivate ( ) throws SQLException {', 'protected void activate ( ) throws SQLException {', 'public void activate ( ) throws SQLException {', 'public PoolingConnection ( final Connection c ) {', 'super ( conn ) ;']",['@ Deprecated'],"['if ( perUserTestOnBorrow = = null ) {', 'value = perUserMinEvictableIdleTimeMillis . get ( userName ) ;', 'perUserDefaultReadOnly = new HashMap < > ( ) ;', 'factory . setMaxConnLifetimeMillis ( getMaxConnLifetimeMillis ( ) ) ;', 'perUserMinIdle . putAll ( userDefaultMinIdle ) ;', 'info = pool . borrowObject ( ) ;', 'return pool = = null ? 0 : pool . getNumIdle ( ) ;', 'pool = ( ( CPDSConnectionFactory ) manager ) . getPool ( ) ;', 'void setPerUserTimeBetweenEvictionRunsMillis (', 'perUserDefaultReadOnly = new HashMap < > ( ) ;']","['if ( datasourceName ! = null ) {', 'sb . append ( username ) . append ( "" , "" ) . append ( dataSourceName ) ;', 'this . datasourceName = datasourceName ;', 'this . dataSourceName = dataSourceName ;', 'return ( null = = datasourceName ? null = = pk . datasourceName : datasourceName . equals ( pk . datasourceName ) ) & &', 'PoolKey ( final String dataSourceName , final String username ) {', 'private final String datasourceName ;', 'h + = dataSourceName . hashCode ( ) ;', 'h + = datasourceName . hashCode ( ) ;', 'if ( dataSourceName ! = null ) {']","['sb . append ( username ) . append ( "" , "" ) . append ( dataSourceName ) ;', 'if ( other . dataSourceName ! = null ) {', 'public boolean equals ( final Object obj ) {', 'return true ;', 'final PoolKey pk = ( PoolKey ) obj ;', 'return result ;', '}', '}', 'if ( obj instanceof PoolKey ) {', 'public boolean equals ( Object obj ) {']","['public boolean equals ( Object obj ) {', 'final PoolKey other = ( PoolKey ) obj ;', 'PoolKey other = ( PoolKey ) obj ;', 'public boolean equals ( final Object obj ) {']","['final Map < String , Boolean > userDefaultBlockWhenExhausted ) {', 'void setPerUserBlockWhenExhausted ( final Map < String , Boolean > userDefaultBlockWhenExhausted ) {', 'void setPerUserBlockWhenExhausted (']","['perUserDefaultReadOnly = new HashMap < > ( ) ;', 'perUserTestOnCreate = createMap ( ) ;', 'perUserBlockWhenExhausted = new HashMap < > ( ) ;', 'return new HashMap < > ( ) ;', 'perUserTestOnReturn = new HashMap < > ( ) ;', 'perUserDefaultAutoCommit = createMap ( ) ;', 'perUserTestWhileIdle = new HashMap < > ( ) ;', 'perUserTestWhileIdle = createMap ( ) ;', 'perUserTestOnBorrow = new HashMap < > ( ) ;', '}']","['( ( CPDSConnectionFactory ) manager ) . getPool ( ) . close ( ) ;', '( ( CPDSConnectionFactory ) manager ) . getPool ( ) . close ( ) ;']","['void closePool ( String username ) throws SQLException ;', 'void closePool ( String userName ) throws SQLException ;']","['( ( CPDSConnectionFactory ) manager ) . getPool ( ) . close ( ) ;', 'pool = getCPDSConnectionFactoryPool ( manager ) ;', '( ( CPDSConnectionFactory ) manager ) . getPool ( ) . clear ( ) ;', '}', 'pool = ( ( CPDSConnectionFactory ) manager ) . getPool ( ) ;', 'return ( ( CPDSConnectionFactory ) manager ) . getPool ( ) ;', 'private ObjectPool < PooledConnectionAndInfo > getCPDSConnectionFactoryPool ( PooledConnectionManager manager ) {', 'getCPDSConnectionFactoryPool ( manager ) . clear ( ) ;', 'getCPDSConnectionFactoryPool ( manager ) . close ( ) ;']","['new GenericKeyedObjectPoolConfig ( ) ;', 'config ) ;', 'try', 'try {', 'getDefaultMinEvictableIdleTimeMillis ( ) ) ;', 'factory = new KeyedCPDSConnectionFactory ( cpds , getValidationQuery ( ) , getValidationQueryTimeout ( ) ,', 'getPooledConnectionAndInfo ( final String username , final String password )', 'throw new SQLException ( ""Could not retrieve connection info from pool"" , e ) ;', '}', 'final GenericKeyedObjectPoolConfig config = new GenericKeyedObjectPoolConfig ( ) ;']","['final long softMinEvictableIdleTimeMillis ) {', 'if ( dataSource ! = null ) {', 'public void setDefaultSoftMinEvictableIdleTimeMillis (', 'public void setDefaultEvictionPolicyClassName ( final String evictionPolicyClassName ) {', 'throw new IllegalStateException (', 'public void setDefaultMinEvictableIdleTimeMillis ( final long minEvictableIdleTimeMillis ) {', 'return this . defaultTimeBetweenEvictionRunsMillis ;', 'return this . defaultTimeBetweenEvictionRunsMillis ;', 'if ( dataSource ! = null )', 'this . defaultTimeBetweenEvictionRunsMillis = timeBetweenEvictionRunsMillis ;']","['System . out , StandardCharsets . UTF 8 ) ) ;', 'public void setRemoveAbandonedOnMaintenance ( final boolean removeAbandonedOnMaintenance ) {', 'driverClassName + ""\'"" ;', 'private String evictionPolicyClassName = BaseObjectPoolConfig . DEFAULT EVICTION POLICY CLASS NAME ;', 'final String message = ""Cannot load JDBC driver class \'"" +', 'poolableConnectionFactory = createPoolableConnectionFactory ( driverConnectionFactory ) ;', 'final ClassLoader driverClassLoader ) {', '+ ( driverClassName ! = null ? driverClassName : """" ) + ""\' for connect URL \'"" + url + ""\'"" ;', 'public synchronized void setDriverClassLoader (', 'poolableConnectionFactory . setPoolStatements ( poolPreparedStatements ) ;']","['return defaultQueryTimeout ;', 'this . defaultQueryTimeoutSeconds = defaultQueryTimeoutSeconds ;', 'public void setDefaultQueryTimeout ( final Integer defaultQueryTimeout ) {', 'public void setDefaultQueryTimeout ( final Integer defaultQueryTimeoutSeconds ) {', 'private Integer defaultQueryTimeout ;', 'private Integer defaultQueryTimeoutSeconds ;', 'this . defaultQueryTimeout = defaultQueryTimeout ;', 'return defaultQueryTimeoutSeconds ;', 'private volatile boolean closed = false ;', 'private volatile C conn ;']","['( ( PoolingConnection ) conn ) . setStatementPool ( stmtPool ) ;', '( ( PoolingConnection ) conn ) . setStatementPool ( stmtPool ) ;', 'final PoolableManagedConnection pmc =', 'final KeyedObjectPool < PStmtKey , DelegatingPreparedStatement > stmtPool = new GenericKeyedObjectPool < > (', 'getDisconnectionSqlCodes ( ) , isFastFailValidation ( ) ) ;', 'public PoolableManagedConnectionFactory ( final XAConnectionFactory connFactory , final ObjectName dataSourceJmxName ) {', 'final ObjectName dataSourceJmxName ) {', '( PoolingConnection ) conn , config ) ;', 'new PoolableManagedConnection ( transactionRegistry , conn , getPool ( ) ,', 'getDisconnectionSqlCodes ( ) , isFastFailValidation ( ) ) ;']","['public Object getObjectInstance ( final Object refObj , final Name name ,', 'ikds . setDefaultMinIdle ( Integer . parseInt ( ra . getContent ( ) . toString ( ) ) ) ;', 'protected static final Object deserialize ( final byte [ ] data )', 'ikds . setRollbackAfterValidation ( Boolean . valueOf ( ra . getContent ( ) . toString ( ) ) . booleanValue ( ) ) ;', 'ikds . setDefaultTransactionIsolation (', 'ikds . setDefaultTestOnReturn ( Boolean . valueOf ( ra . getContent ( ) . toString ( ) ) . booleanValue ( ) ) ;', 'ikds . setDefaultMinIdle (', 'ikds . setMaxConnLifetimeMillis ( Long . parseLong ( ra . getContent ( ) . toString ( ) ) ) ;', 'ikds . setDefaultSoftMinEvictableIdleTimeMillis (', 'throws IOException , ClassNotFoundException {']","['System . err . println ( ""CLOSING DOWN CONNECTION AS IT COULD "" +', 'final PooledConnection pc = ( PooledConnection ) event . getSource ( ) ;', 'pci ) ;', '} catch ( final Exception e ) {', 'new ConcurrentHashMap < > ( ) ;', 'private final Map < PooledConnection , PooledConnectionAndInfo > pcMap = new ConcurrentHashMap < > ( ) ;', 'System . err', 'public void passivateObject ( final UserPassKey key , final PooledObject < PooledConnectionAndInfo > p ) throws Exception {', 'Collections . newSetFromMap ( new ConcurrentHashMap < PooledConnection , Boolean > ( ) ) ;', 'public boolean validateObject ( final UserPassKey key , final PooledObject < PooledConnectionAndInfo > p ) {']","['source = source ;', 'public DataSourceConnectionFactory ( final DataSource dataSource , final String userName , final String password ) {', 'private final String passwd ;', 'this . userPassword = password ;', 'private final DataSource source ;', 'public DataSourceConnectionFactory ( final DataSource dataSource ) {', '}', 'private final String userName ;', 'return source . getConnection ( uname , passwd ) ;', '}']","['this ( dataSource , null , null ) ;', 'return dataSource . getConnection ( userName , userPassword = = null ? null : String . valueOf ( userPassword ) ) ;', 'return dataSource . getConnection ( userName , userPassword ) ;', 'this . userName = userName ;', 'this . userPassword = password ;', '}', 'private final String userPassword ;', 'public DataSourceConnectionFactory ( final DataSource dataSource , final String userName , final char [ ] userPassword ) {', 'this . userPassword = password ! = null ? password . toCharArray ( ) : null ;', 'this . userPassword = userPassword ;']","['final String user = username ;', 'private String userName ;', 'this . username = username ;', 'return this . userName ;', 'private String username ;', 'this . userName = username ;', 'return this . username ;', 'final String user = userName ;']","['private String username ;', 'if ( userName = = null ) {', 'public void setUsername ( final String username ) {', 'xaConnection = xaDataSource . getXAConnection ( userName , password ) ;', 'if ( username = = null ) {', 'private String userName ;', 'return username ;', 'public DataSourceXAConnectionFactory ( final TransactionManager transactionManager , final XADataSource xaDataSource , final String userName , final String password ) {', 'this . username = username ;', 'return userName ;']","['this . userName = username ;', 'public void setUsername ( final String userName ) {', 'public void setUsername ( final String username ) {', 'this . userName = userName ;', 'update ( connectionProperties , KEY USER , username ) ;', 'private String userName ;', 'private String user ;', 'getUrl ( ) , userName , pass ) ) ;', 'return user ;', 'return userName ;']","['ds . setUsername ( ""username"" ) ;', 'ds . setUsername ( ""userName"" ) ;', 'properties . setProperty ( ""username"" , ""username"" ) ;', 'properties . setProperty ( ""username"" , ""userName"" ) ;', 'assertEquals ( ""username"" , ds . getUsername ( ) ) ;', 'assertEquals ( ""userName"" , ds . getUsername ( ) ) ;', 'props . setProperty ( ""user"" , ""username"" ) ;', 'props . setProperty ( ""user"" , ""userName"" ) ;', '""username"" ,', 'final ConnectionFactory connectionFactory = new DriverManagerConnectionFactory ( ""jdbc : some : connect : string"" , ""userName"" , ""password"" ) ;']","['return dataSource . getConnection ( userName , userPassword = = null ? null : String . valueOf ( userPassword ) ) ;', 'return dataSource . getConnection ( userName , Utils . toString ( userPassword ) ) ;', 'this . userPassword = password ! = null ? password . toCharArray ( ) : null ;', 'this . userPassword = Utils . toCharArray ( password ) ;', 'return value ! = null ? value . toCharArray ( ) : null ;', '}', 'public static char [ ] toCharArray ( final String value ) {', 'return value = = null ? null : String . valueOf ( value ) ;', 'public static String toString ( final char [ ] value ) {', 'private String password ;']","['private int maxPreparedStatements = - 1 ;', 'private int numTestsPerEvictionRun = - 1 ;', 'minEvictableIdleTimeMillis = minEvictableIdleTimeMillis ;', 'this . numTestsPerEvictionRun = numTestsPerEvictionRun ;', 'return maxPreparedStatements ;', 'private int maxPreparedStatements = - 1 ;', 'return minEvictableIdleTimeMillis ;', 'private int minEvictableIdleTimeMillis = - 1 ;', 'numTestsPerEvictionRun = numTestsPerEvictionRun ;', 'return maxPreparedStatements ;']","['private String password ;', 'update ( connectionProperties , KEY PASSWORD , pooledUserPassword ) ;', 'getUrl ( ) , userName , pass ) ) ;', 'return Utils . toString ( userPassword ) ;', 'update ( connectionProperties , KEY USER , userName ) ;', 'assertInitializationAllowed ( ) ;', 'public void setPassword ( final String v ) {', 'public void setPassword ( final char [ ] userPassword ) {', 'return password ;', 'import org . apache . commons . dbcp2 . Utils ;']","['pc = cpds . getPooledConnection ( ) ;', 'private final String validationQuery ;', 'private String password = null ;', 'if ( null = = validationQuery ) {', 'return pool ;', 'this . rollbackAfterValidation = rollbackAfterValidation ;', 'validationQueryTimeout = validationQueryTimeout ;', 'private String password = null ;', 'password = password ;', 'private final int validationQueryTimeout ;']","['pc = cpds . getPooledConnection ( userName , password ) ;', 'pc = cpds . getPooledConnection ( userName , Utils . toString ( userPassword ) ) ;', 'this . password = password ;', 'public synchronized void setPassword ( final char [ ] userPassword ) {', 'public synchronized void setPassword ( final String password ) {', 'public CPDSConnectionFactory ( final ConnectionPoolDataSource cpds ,', 'ConnectionEventListener , PooledConnectionManager {', 'implements PooledObjectFactory < PooledConnectionAndInfo > , ConnectionEventListener , PooledConnectionManager {', 'implements PooledObjectFactory < PooledConnectionAndInfo > ,', 'final String userName ,']","['throws Exception {', 'public void passivateObject ( final PooledObject < PooledConnectionAndInfo > p ) throws Exception {', 'public void activateObject ( final PooledObject < PooledConnectionAndInfo > p )', 'public void activateObject ( final PooledObject < PooledConnectionAndInfo > p ) throws Exception {', 'public void passivateObject ( final PooledObject < PooledConnectionAndInfo > p )']","['pc = cpds . getPooledConnection ( ) ;', 'private final String validationQuery ;', 'private KeyedObjectPool < UserPassKey , PooledConnectionAndInfo > pool ;', 'if ( null = = validationQuery ) {', 'pc = cpds . getPooledConnection ( userName , password ) ;', 'this . rollbackAfterValidation = rollbackAfterValidation ;', 'return pool ;', 'private KeyedObjectPool < UserPassKey , PooledConnectionAndInfo > pool ;', 'validationQueryTimeout = validationQueryTimeout ;', 'private final int validationQueryTimeout ;']","['private volatile boolean closed ;', 'if ( null ! = connection ) {', '} else if ( iface . isAssignableFrom ( conn . getClass ( ) ) ) {', 'if ( connection instanceof DelegatingConnection ) {', 'conn . clearWarnings ( ) ;', 'return connection . setSavepoint ( name ) ;', 'this . cacheState = cacheState ;', 'return connection . isValid ( timeout ) ;', '( ( DelegatingConnection < ? > ) conn ) . activate ( ) ;', 'return connection ;']","['private Statement statement = null ;', 'private DelegatingConnection < ? > connection ;', 'private DelegatingConnection < ? > connection = null ;', 'private Statement statement ;', 'private String connectionUri = null ;', 'private Properties propeties ;', 'private Properties propeties = null ;', 'private String userName ;', 'private String userName = null ;', 'private String connectionUri ;']","['if ( connectionProperties = = null ) {', 'import java . util . Objects ;', 'throw new NullPointerException ( ""connectionProperties is null"" ) ;', 'Objects . requireNonNull ( connectionProperties , ""connectionProperties is null"" ) ;', '}', 'if ( sql = = null ) {', 'import java . util . Objects ;', '}', 'Objects . requireNonNull ( sql , ""null connectionInitSqls element"" ) ;', 'throw new NullPointerException (']","['private static final String GET CONNECTION CALLED', 'private long defaultSoftMinEvictableIdleTimeMillis = BaseObjectPoolConfig . DEFAULT SOFT MIN EVICTABLE IDLE TIME MILLIS ;', 'GenericKeyedObjectPoolConfig . DEFAULT MIN IDLE PER KEY ;', 'private static final String BAD TRANSACTION ISOLATION = ""The requested TransactionIsolation level is invalid . "" ;', 'if ( ! ( null = = password ? null = = info . getPassword ( )', 'private int defaultMinIdle = GenericKeyedObjectPoolConfig . DEFAULT MIN IDLE PER KEY ;', '+ "" ( "" + ds . getClass ( ) . getName ( ) + "" ) ""', 'private boolean defaultTestOnReturn = BaseObjectPoolConfig . DEFAULT TEST ON RETURN ;', '""Cannot set the JNDI name for the DataSource , if already "" +', 'private int defaultMaxTotal = GenericKeyedObjectPoolConfig . DEFAULT MAX TOTAL ;']","['manager . invalidate ( info . getPooledConnection ( ) ) ;', 'manager . invalidate ( info . getPooledConnection ( ) ) ;', 'manager . setPassword ( upkey . getPassword ( ) ) ;', 'manager . setPassword ( upkey . getPassword ( ) ) ;', 'if ( ! ( null = = password ? null = = info . getPassword ( ) : password . equals ( info . getPassword ( ) ) ) ) {', 'if ( ! ( null = = password ? null = = info . getPassword ( ) : password . equals ( info . getPassword ( ) ) ) ) {']","['protected ConnectionPoolDataSource testCPDS ( final String userName , final String password )', 'protected ConnectionPoolDataSource testCPDS ( final String userName , final String userPassword )', 'conn = cpds . getPooledConnection ( userName , password ) ;', 'conn = cpds . getPooledConnection ( userName , userPassword ) ;']","['final UserPassKey key = new UserPassKey ( userName , password ) ;', 'registerPool ( userName , userPassword ) ;', 'protected PooledConnectionAndInfo getPooledConnectionAndInfo ( final String userName , final String password )', 'final UserPassKey key = new UserPassKey ( userName , userPassword ) ;', 'registerPool ( userName , password ) ;', 'protected PooledConnectionAndInfo getPooledConnectionAndInfo ( final String userName , final String userPassword )']","['protected abstract PooledConnectionAndInfo getPooledConnectionAndInfo ( String userName , String password )', 'public Connection getConnection ( final String userName , final String userPassword ) throws SQLException {', 'testCPDS ( userName , password ) ;', 'info = getPooledConnectionAndInfo ( userName , userPassword ) ;', 'info = getPooledConnectionAndInfo ( userName , password ) ;', 'testCPDS ( userName , userPassword ) ;', 'public Connection getConnection ( final String userName , final String password ) throws SQLException {', 'if ( info ! = null & & userPassword ! = null & & userPassword . equals ( info . getPassword ( ) ) ) {', 'if ( ! ( null = = password ? null = = info . getPassword ( ) : password . equals ( info . getPassword ( ) ) ) ) {', 'if ( ! ( null = = userPassword ? null = = info . getPassword ( ) : userPassword . equals ( info . getPassword ( ) ) ) ) {']","['pool . clear ( new UserPassKey ( userName , null ) ) ;', 'pool . clear ( new UserPassKey ( userName ) ) ;', 'upkey = new UserPassKey ( userName , password ) ;', 'this . userPassword = userPassword ;', 'private final String password ;', 'PooledConnectionAndInfo ( final PooledConnection pc , final String userName , final String userPassword ) {', 'return upkey ;', 'return upKey ;', 'private final UserPassKey upkey ;', 'return Utils . toString ( userPassword ) ;']","['if ( ! ( null = = userPassword ? null = = info . getPassword ( ) : userPassword . equals ( info . getPassword ( ) ) ) ) {', 'if ( ! ( null = = userPassword ? null = = info . getPassword ( ) : userPassword . equals ( info . getPassword ( ) ) ) ) {']","['if ( rs ! = null )', 'if ( c ! = null ) {', 'if ( ps2 ! = null )', '}', 'if ( conn ! = null )', 'if ( ps2 ! = null ) {', 'if ( c ! = null )', 'if ( conn ! = null ) {', 'if ( ps ! = null )', 'if ( ps ! = null ) {']","['} catch ( MalformedObjectNameException e ) {', '} catch ( final MalformedObjectNameException e ) {', 'private String connectionUri ;', 'private final String connectionUri ;', 'public static ObjectName unwrap ( ObjectNameWrapper wrapper ) {', 'public void registerMBean ( final Object object ) {', 'public void registerMBean ( Object object ) {', 'public static ObjectName unwrap ( final ObjectNameWrapper wrapper ) {', 'public CallableStatement prepareCall ( String sql , int resultSetType , int resultSetConcurrency ,', 'final int resultSetHoldability ) throws SQLException {']","['private static final long serialVersionUID = 1L ;', 'public class ListException extends Exception {', 'private final List < Throwable > exceptionList ;', 'public ListException ( String message , List < Throwable > exceptionList ) {', 'this . exceptionList = exceptionList ;', 'public List < Throwable > getExceptionList ( ) {', '}', 'super ( message ) ;', 'import java . util . List ;', 'package org . apache . commons . dbcp2 ;']","['ikds . setDefaultMinIdle ( Integer . parseInt ( ra . getContent ( ) . toString ( ) ) ) ;', 'RefAddr refAddr = ref . get ( ""dataSourceName"" ) ;', 'ra = ref . get ( ""lifo"" ) ;', 'ikds . setDefaultSoftMinEvictableIdleTimeMillis ( Long . parseLong ( refAddr . getContent ( ) . toString ( ) ) ) ;', 'ikds . setRollbackAfterValidation ( Boolean . valueOf ( ra . getContent ( ) . toString ( ) ) . booleanValue ( ) ) ;', 'ikds . setLoginTimeout ( Integer . parseInt ( refAddr . getContent ( ) . toString ( ) ) ) ;', 'ikds . setDefaultTestOnReturn ( Boolean . valueOf ( ra . getContent ( ) . toString ( ) ) . booleanValue ( ) ) ;', 'ikds . setDefaultMaxTotal ( Integer . parseInt ( refAddr . getContent ( ) . toString ( ) ) ) ;', 'ikds . setValidationQuery ( ra . getContent ( ) . toString ( ) ) ;', 'ikds . setDefaultTestOnReturn ( Boolean . valueOf ( refAddr . getContent ( ) . toString ( ) ) . booleanValue ( ) ) ;']","['}', 'if ( this = = m ) {', 'while ( m ! = null & & m instanceof DelegatingDatabaseMetaData ) {', '} catch ( final SQLException e ) {', 'if ( this = = m ) {', '} else {', 'else {', 'm = ( ( DelegatingDatabaseMetaData ) m ) . getDelegate ( ) ;', 'm = ( ( DelegatingDatabaseMetaData ) m ) . getDelegate ( ) ;', 'while ( m ! = null & & m instanceof DelegatingDatabaseMetaData ) {']","['final String table , final int scope , final boolean nullable ) throws SQLException {', 'databaseMetaData . getColumnPrivileges ( catalog , schema , table , columnNamePattern ) ) ;', 'databaseMetaData . getProcedures ( catalog , schemaPattern ,', 'public ResultSet getIndexInfo ( final String catalog , final String schema , final String table , final boolean unique ,', 'final String typeNamePattern ) throws SQLException {', 'databaseMetaData . getPseudoColumns ( catalog , schemaPattern , tableNamePattern , columnNamePattern ) ) ;', 'types ) ) ;', 'parentSchema , parentTable , foreignCatalog , foreignSchema , foreignTable ) ) ;', '}', 'databaseMetaData . getProcedures ( catalog , schemaPattern , procedureNamePattern ) ) ;']","['ObjectPool < PoolableConnection > p = ( ObjectPool < PoolableConnection > ) this . pool ;', 'final ObjectPool < PoolableConnection > p = ( ObjectPool < PoolableConnection > ) this . pool ;', 'final']","['if ( isAccessToUnderlyingConnectionAllowed ( ) ) {', 'return getDelegateInternal ( ) = = null ? true : super . isClosed ( ) ;', 'return true ;', 'return isAccessToUnderlyingConnectionAllowed ( ) ? super . getDelegate ( ) : null ;', 'return super . getInnermostDelegate ( ) ;', 'return isAccessToUnderlyingConnectionAllowed ( ) ? super . getInnermostDelegate ( ) : null ;', 'return super . getDelegate ( ) ;', 'return null ;', '}', 'return super . isClosed ( ) ;']","['public void passivateObject ( final PStmtKey key ,', 'public void passivateObject ( final PStmtKey key , final PooledObject < DelegatingPreparedStatement > pooledObject )', 'final PooledObject < DelegatingPreparedStatement > p ) throws Exception {', 'throws Exception {', 'final DelegatingPreparedStatement dps = p . getObject ( ) ;', 'final DelegatingPreparedStatement dps = pooledObject . getObject ( ) ;', '@ SuppressWarnings ( ""resource"" )']","['{ checkOpen ( ) ; try { ( ( PreparedStatement ) getDelegate ( ) ) . setRef ( i , x ) ; } catch ( final SQLException e ) { handleException ( e ) ; } }', '( ( PreparedStatement ) getDelegate ( ) ) . setCharacterStream ( parameterIndex , reader , length ) ;', '{ checkOpen ( ) ; try { ( ( PreparedStatement ) getDelegate ( ) ) . setObject ( parameterIndex , x ) ; } catch ( final SQLException e ) { handleException ( e ) ; } }', '( ( PreparedStatement ) getDelegate ( ) ) . setNull ( parameterIndex , sqlType ) ;', '{ checkOpen ( ) ; try { ( ( PreparedStatement ) getDelegate ( ) ) . setInt ( parameterIndex , x ) ; } catch ( final SQLException e ) { handleException ( e ) ; } }', '( ( PreparedStatement ) getDelegate ( ) ) . setClob ( i , x ) ;', 'public void setAsciiStream ( final int parameterIndex , final InputStream x , final int length ) throws SQLException', 'try {', '{ checkOpen ( ) ; try { ( ( PreparedStatement ) getDelegate ( ) ) . addBatch ( ) ; } catch ( final SQLException e ) { handleException ( e ) ; } }', '( ( PreparedStatement ) getDelegate ( ) ) . setObject ( parameterIndex , x , targetSqlType , scale ) ;']","['super ( c , s ) ;', 'public class DelegatingPreparedStatement extends DelegatingStatement implements PreparedStatement {', 'final PreparedStatement s ) {', 'super ( connection , statement ) ;', 'implements PreparedStatement {', 'public DelegatingPreparedStatement ( final DelegatingConnection < ? > connection , final PreparedStatement statement ) {', 'public DelegatingPreparedStatement ( final DelegatingConnection < ? > c ,', 'public class DelegatingPreparedStatement extends DelegatingStatement', '( ( DelegatingStatement ) statement ) . passivate ( ) ;', 'public void setMaxFieldSize ( final int max ) throws SQLException {']","['statement = s ;', 'this . statement = statement ;', 'public void setDelegate ( final Statement s ) {', 'public void setDelegate ( final Statement statement ) {']","['super ( conn ) ;', 'public PoolingConnection ( final Connection connection ) {', 'public PoolingConnection ( final Connection conn ) {', 'super ( connection ) ;']","['connectionFactory . setValidationQueryTimeout ( validationQueryTimeout ) ;', 'private volatile int validationQueryTimeoutSeconds = - 1 ;', 'public void setValidationQueryTimeout ( final int timeout ) {', 'this . validationQueryTimeoutSeconds = validationQueryTimeoutSeconds ;', 'private volatile int validationQueryTimeout = - 1 ;', 'public void setValidationQueryTimeout ( final int validationQueryTimeoutSeconds ) {', 'this . validationQueryTimeout = timeout ;', 'connectionFactory . setValidationQueryTimeout ( validationQueryTimeoutSeconds ) ;', 'return validationQueryTimeout ;', 'return validationQueryTimeoutSeconds ;']","['private static final Log log =', 'public class PoolableConnectionFactory implements PooledObjectFactory < PoolableConnection > {', 'LogFactory . getLog ( PoolableConnectionFactory . class ) ;', 'private static final Log log = LogFactory . getLog ( PoolableConnectionFactory . class ) ;', 'public class PoolableConnectionFactory', 'implements PooledObjectFactory < PoolableConnection > {']","['final PoolableConnection pc = new PoolableConnection ( conn , pool , connJmxName ,', 'fastFailValidation ) ;', 'new GenericKeyedObjectPool < > ( ( PoolingConnection ) conn , config ) ;', 'if ( null ! = sqls ) {', 'conn . getTransactionIsolation ( ) ! = defaultTransactionIsolation ) {', 'if ( conn . isClosed ( ) ) {', 'if ( defaultAutoCommit ! = null & &', 'if ( !connAutoCommit . booleanValue ( ) & & !conn . isReadOnly ( ) ) {', 'disconnectionSqlCodes , fastFailValidation ) ;', 'connJmxName = new ObjectName ( dataSourceJmxName . toString ( ) + Constants . JMX CONNECTION BASE EXT + connIndex ) ;']","['return dataSourceJmxName ;', 'return dataSourceJmxObjectName ;', 'final StringBuilder base = new StringBuilder ( dataSourceJmxName . toString ( ) ) ;', 'final StringBuilder base = new StringBuilder ( dataSourceJmxObjectName . toString ( ) ) ;', 'if ( dataSourceJmxName ! = null ) {', 'connJmxName = new ObjectName ( dataSourceJmxObjectName . toString ( ) + Constants . JMX CONNECTION BASE EXT + connIndex ) ;', 'private final ObjectName dataSourceJmxName ;', 'private final ObjectName dataSourceJmxObjectName ;', 'if ( dataSourceJmxName = = null ) {', 'if ( dataSourceJmxObjectName ! = null ) {']","['private static final String PER USER POOL CLASSNAME =', 'pupds . setDefaultMaxIdle ( Integer . parseInt ( ra . getContent ( ) . toString ( ) ) ) ;', 'pupds . setPerUserMaxTotal (', 'pupds . setPerUserMaxIdle ( ( Map < String , Integer > ) deserialize ( serialized ) ) ;', 'public class PerUserPoolDataSourceFactory', 'pupds . setPerUserDefaultTransactionIsolation ( ( Map < String , Integer > ) deserialize ( serialized ) ) ;', '( Map < String , Integer > ) deserialize ( serialized ) ) ;', 'pupds . setDefaultMaxWaitMillis ( Integer . parseInt ( ra . getContent ( ) . toString ( ) ) ) ;', 'throws IOException , ClassNotFoundException {', 'protected InstanceKeyDataSource getNewInstance ( final Reference ref ) throws IOException , ClassNotFoundException {']","['return pstmtPool . borrowObject ( createKey ( sql , resultSetType ,', 'return ( CallableStatement ) pStmtPool . borrowObject ( createKey ( sql , resultSetType , resultSetConcurrency , StatementType . CALLABLE STATEMENT ) ) ;', 'return pstmtPool . borrowObject ( createKey ( sql , autoGeneratedKeys ) ) ;', 'return pStmtPool . borrowObject ( createKey ( sql , columnIndexes ) ) ;', 'pstmtPool . close ( ) ;', 'return ( CallableStatement ) pStmtPool . borrowObject ( createKey ( sql , StatementType . CALLABLE STATEMENT ) ) ;', 'private KeyedObjectPool < PStmtKey , DelegatingPreparedStatement > pstmtPool ;', 'return pStmtPool . borrowObject ( createKey ( sql ) ) ;', 'final PoolableCallableStatement pcs = new PoolableCallableStatement ( statement , key , pstmtPool ,', 'if ( pStmtPool ! = null ) {']","['public void activateObject ( final PStmtKey key ,', 'final DelegatingPreparedStatement dps = pooledObject . getObject ( ) ;', 'final int resultSetConcurrency ) {', 'return new PStmtKey ( normalizeSQL ( sql ) , getCatalogOrNull ( ) , resultSetType , resultSetConcurrency ,', 'public void setStatementPool (', 'return pStmtPool . borrowObject ( createKey ( sql , resultSetType , resultSetConcurrency ) ) ;', 'final int resultSetConcurrency , final int resultSetHoldability ) {', 'pooledObject . getObject ( ) . getInnermostDelegate ( ) . close ( ) ;', 'final int resultSetConcurrency )', 'public boolean validateObject ( final PStmtKey key , final PooledObject < DelegatingPreparedStatement > pooledObject ) {']","['new Vector < > ( ) ;', 'private final Vector < StatementEventListener > statementEventListeners = new Vector < > ( ) ;', 'private final Vector < StatementEventListener > statementEventListeners =']","['private boolean isClosed ;', 'closed = true ;', 'isClosed = true ;', 'if ( closed ) {', 'isClosed = false ;', 'private boolean closed ;', 'if ( isClosed ) {', 'closed = false ;']","['+ ""its previous Connection being closed . "" ) ;', 'private static final String CLOSED = ""Attempted to use PooledConnection after closed ( ) was called . "" ;', 'this , connection , isAccessToUnderlyingConnectionAllowed ( ) ) ;', 'logicalConnection = new ConnectionImpl ( this , connection , isAccessToUnderlyingConnectionAllowed ( ) ) ;', 'throw new SQLException ( ""PooledConnection was reused , without ""', 'throw new SQLException ( ""PooledConnection was reused , without its previous Connection being closed . "" ) ;', '= ""Attempted to use PooledConnection after closed ( ) was called . "" ;', 'logicalConnection = new ConnectionImpl (', 'private static final String CLOSED']","['return ( CallableStatement ) pStmtPool . borrowObject ( createKey ( sql , resultSetType , resultSetConcurrency , StatementType . CALLABLE STATEMENT ) ) ;', 'return new PStmtKey ( normalizeSQL ( sql ) , getCatalogOrNull ( ) , resultSetType , resultSetConcurrency ,', 'if ( key . getStmtType ( ) = = StatementType . PREPARED STATEMENT ) {', 'return pStmtPool . borrowObject ( createKey ( sql , autoGeneratedKeys ) ) ;', 'final StatementType statementType ) {', 'if ( key . getStmtType ( ) = = StatementType . PREPARED STATEMENT ) {', 'return pStmtPool . borrowObject ( createKey ( sql , autoGeneratedKeys ) ) ;', 'delegatingConnection ) ;', '+ ""its last Connection being closed . "" ) ;', 'protected PStmtKey createKey ( final String sql , final int resultSetType , final int resultSetConcurrency ,']","['implements ConnectionPoolDataSource , Referenceable , Serializable ,', 'DriverManager . getConnection ( getUrl ( ) , pooledUserName , pooledUserPassword ) ) ;', 'private static final String GET CONNECTION CALLED', 'setMinEvictableIdleTimeMillis ( Integer . parseInt ( ra . getContent ( ) . toString ( ) ) ) ;', 'public Object getObjectInstance ( final Object refObj , final Name name ,', 'pci = new PooledConnectionImpl ( DriverManager . getConnection ( getUrl ( ) , connectionProperties ) ) ;', 'setPoolPreparedStatements ( Boolean . valueOf (', 'setPoolPreparedStatements ( Boolean . valueOf ( ra . getContent ( ) . toString ( ) ) . booleanValue ( ) ) ;', 'public void setTimeBetweenEvictionRunsMillis (', 'setAccessToUnderlyingConnectionAllowed ( Boolean . valueOf ( ra . getContent ( ) . toString ( ) ) . booleanValue ( ) ) ;']","['return managers . get ( getPoolKey ( upkey . getUsername ( ) ) ) ;', 'protected PooledConnectionManager getConnectionManager ( final UserPassKey upKey ) {', 'protected PooledConnectionManager getConnectionManager ( final UserPassKey upkey ) {', 'return managers . get ( getPoolKey ( upKey . getUsername ( ) ) ) ;']","['@ SuppressWarnings ( ""unchecked"" )']","['public ListException ( String message , List < Throwable > exceptionList ) {', 'public ListException ( final String message , final List < Throwable > exceptionList ) {']","['if ( key . getStmtType ( ) = = StatementType . PREPARED STATEMENT ) {', 'public PreparedStatement prepareStatement ( final String sql , final String columnNames [ ] ) throws SQLException {', 'return pstmtPool . borrowObject ( createKey ( sql , resultSetType , resultSetConcurrency ) ) ;', 'public PooledObject < DelegatingPreparedStatement > makeObject ( final PStmtKey key ) throws Exception {', 'public void activateObject ( final PStmtKey key ,', 'return new PStmtKey ( normalizeSQL ( sql ) , catalog , resultSetType , resultSetConcurrency , resultSetHoldability ,', 'resultSetConcurrency , resultSetHoldability , StatementType . CALLABLE STATEMENT ) ) ;', 'public boolean validateObject ( final PStmtKey key , final PooledObject < DelegatingPreparedStatement > p ) {', '}', 'public CallableStatement prepareCall ( final String sql , final int resultSetType , final int resultSetConcurrency ,']","['public boolean validateObject ( final PStmtKey key , final PooledObject < DelegatingPreparedStatement > p ) {', 'throws Exception {', 'p . getObject ( ) . getInnermostDelegate ( ) . close ( ) ;', 'pooledObject . getObject ( ) . getInnermostDelegate ( ) . close ( ) ;', 'public void activateObject ( final PStmtKey key , final PooledObject < DelegatingPreparedStatement > p ) throws Exception {', 'public boolean validateObject ( final PStmtKey key , final PooledObject < DelegatingPreparedStatement > pooledObject ) {', 'p . getObject ( ) . activate ( ) ;', 'pooledObject . getObject ( ) . activate ( ) ;', 'public void destroyObject ( final PStmtKey key , final PooledObject < DelegatingPreparedStatement > p ) throws Exception {', 'public void activateObject ( final PStmtKey key , final PooledObject < DelegatingPreparedStatement > pooledObject )']","['( ( PreparedStatement ) getDelegate ( ) ) . setCharacterStream ( parameterIndex , reader , length ) ;', 'getDelegatePreparedStatement ( ) . setFloat ( parameterIndex , x ) ;', '( ( PreparedStatement ) getDelegate ( ) ) . setNull ( parameterIndex , sqlType ) ;', 'getDelegatePreparedStatement ( ) . setBinaryStream ( parameterIndex , inputStream ) ;', '( ( PreparedStatement ) getDelegate ( ) ) . setClob ( i , x ) ;', 'getDelegatePreparedStatement ( ) . setBigDecimal ( parameterIndex , x ) ;', '( ( PreparedStatement ) getDelegate ( ) ) . setNClob ( parameterIndex , value ) ;', 'getDelegatePreparedStatement ( ) . setTime ( parameterIndex , x , cal ) ;', '( ( PreparedStatement ) getDelegate ( ) ) . setObject ( parameterIndex , x , targetSqlType , scale ) ;', 'getDelegatePreparedStatement ( ) . setBlob ( parameterIndex , inputStream ) ;']","['public void setNCharacterStream ( final int parameterIndex , final Reader value , final long length ) throws SQLException {', 'public void setBlob ( final int parameterIndex , final InputStream inputStream , final long length )', 'public void setCharacterStream ( final int parameterIndex , final Reader reader , final long length ) throws SQLException {', 'throws SQLException {', 'return DelegatingResultSet . wrapResultSet ( this , getDelegatePreparedStatement ( ) . executeQuery ( ) ) ;', 'public void setNCharacterStream ( final int parameterIndex , final Reader value , final long length )', '}', '} catch ( final SQLException e ) {', 'public void setBinaryStream ( final int parameterIndex , final InputStream inputStream , final long length ) throws SQLException {', 'public void setCharacterStream ( final int parameterIndex , final Reader reader , final long length )']","['@ SuppressWarnings ( ""resource"" )']","['( ( CallableStatement ) getDelegate ( ) ) . setNCharacterStream ( parameterName , reader , length ) ;', 'public void setByte ( final String parameterName , final byte x ) throws SQLException {', '{ checkOpen ( ) ; try { return ( ( CallableStatement ) getDelegate ( ) ) . getDate ( parameterIndex ) ; } catch ( final SQLException e ) { handleException ( e ) ; return null ; } }', 'public int getInt ( final int parameterIndex ) throws SQLException {', '{ checkOpen ( ) ; try { return ( ( CallableStatement ) getDelegate ( ) ) . getBigDecimal ( parameterIndex , scale ) ; } catch ( final SQLException e ) { handleException ( e ) ; return null ; } }', '( ( CallableStatement ) getDelegate ( ) ) . setTimestamp ( parameterName , x ) ;', '{ checkOpen ( ) ; try { return ( ( CallableStatement ) getDelegate ( ) ) . getObject ( parameterName ) ; } catch ( final SQLException e ) { handleException ( e ) ; return null ; } }', 'public Object getObject ( final int i , final Map < String , Class < ? > > map ) throws SQLException {', 'public Time getTime ( final int parameterIndex ) throws SQLException', 'return ( ( CallableStatement ) getDelegate ( ) ) . getBigDecimal ( parameterIndex ) ;']","['( ( CallableStatement ) getDelegate ( ) ) . setTimestamp ( parameterName , x ) ;', 'getDelegateCallableStatement ( ) . registerOutParameter ( paramIndex , sqlType , typeName ) ;', 'return ( ( CallableStatement ) getDelegate ( ) ) . getBigDecimal ( parameterIndex ) ;', 'return getDelegateCallableStatement ( ) . getRowId ( parameterIndex ) ;', 'return ( ( CallableStatement ) getDelegate ( ) ) . getDate ( parameterName ) ;', 'return getDelegateCallableStatement ( ) . getLong ( parameterName ) ;', '( ( CallableStatement ) getDelegate ( ) ) . setClob ( parameterName , reader ) ;', 'return getDelegateCallableStatement ( ) . getDate ( parameterName ) ;', 'return ( ( CallableStatement ) getDelegate ( ) ) . getBoolean ( parameterIndex ) ;', 'return getDelegateCallableStatement ( ) . getString ( parameterIndex ) ;']","['+ ""I have no record of the underlying PooledConnection . "" ;', 'public CPDSConnectionFactory ( final ConnectionPoolDataSource cpds , final String validationQuery ,', 'final PooledConnection pc = ( PooledConnection ) event . getSource ( ) ;', 'final PooledConnection pc = ( PooledConnection ) event . getSource ( ) ;', 'final int validationQueryTimeoutSeconds ,', 'private static final String NO KEY MESSAGE = ""close ( ) was called on a Connection , but I have no record of the underlying PooledConnection . "" ;', 'final String userName ,', 'private final Map < PooledConnection , PooledConnectionAndInfo > pcMap = new ConcurrentHashMap < > ( ) ;', 'new ConcurrentHashMap < > ( ) ;', 'private void validateLifetime ( final PooledObject < PooledConnectionAndInfo > p ) throws Exception {']","['this . poolPreparedStatements = v ;', 'public void setPoolPreparedStatements ( final boolean poolPreparedStatements ) {', 'public void setPoolPreparedStatements ( final boolean v ) {', 'this . poolPreparedStatements = poolPreparedStatements ;']","['pci . setAccessToUnderlyingConnectionAllowed ( isAccessToUnderlyingConnectionAllowed ( ) ) ;', 'DriverManager . getConnection ( getUrl ( ) , connectionProperties ) ) ;', 'pci . setStatementPool ( stmtPool ) ;', 'stmtPool = new GenericKeyedObjectPool < > ( pooledConnection , config ) ;', 'pci = new PooledConnectionImpl ( DriverManager . getConnection ( getUrl ( ) , connectionProperties ) ) ;', 'PooledConnectionImpl pooledConnection = null ;', 'pci = new PooledConnectionImpl (', 'pooledConnection . setAccessToUnderlyingConnectionAllowed ( isAccessToUnderlyingConnectionAllowed ( ) ) ;', 'return pci ;', 'pooledConnection = new PooledConnectionImpl (']","['ConnectionImpl ( final PooledConnectionImpl pooledConnection ,', 'public PreparedStatement prepareStatement ( final String sql , final String columnNames [ ] ) throws SQLException {', '}', 'return new DelegatingPreparedStatement ( this , pooledConnection . prepareStatement ( sql , columnIndexes ) ) ;', 'public PreparedStatement prepareStatement ( final String sql , final int columnIndexes [ ] )', 'ConnectionImpl ( final PooledConnectionImpl pooledConnection , final Connection connection ,', 'final int resultSetConcurrency )', 'return new DelegatingPreparedStatement ( this , pooledConnection . prepareStatement ( sql ) ) ;', 'public PreparedStatement prepareStatement ( final String sql , final int autoGeneratedKeys )', 'public PreparedStatement prepareStatement ( final String sql , final int autoGeneratedKeys ) throws SQLException {']","['new ManagedDataSource < > ( getConnectionPool ( ) , transactionRegistry ) ;', 'connectionFactory = new PoolableManagedConnectionFactory ( ( XAConnectionFactory ) driverConnectionFactory ,', '( XAConnectionFactory ) driverConnectionFactory , getRegisteredJmxName ( ) ) ;', 'connectionFactory ) ;', 'final ConnectionFactory driverConnectionFactory ) throws SQLException {', 'getRegisteredJmxName ( ) ) ;', 'getMaxOpenPreparedStatements ( ) ) ;', 'connectionFactory . setMaxOpenPreparedStatements ( getMaxOpenPreparedStatements ( ) ) ;', 'final XAConnectionFactory xaConnectionFactory = new DataSourceXAConnectionFactory ( getTransactionManager ( ) , xaDataSourceInstance , getUsername ( ) , getPassword ( ) ) ;', 'throws SQLException {']","['return connection ;', 'return new ManagedConnection < > ( getPool ( ) , transactionRegistry , isAccessToUnderlyingConnectionAllowed ( ) ) ;', 'isAccessToUnderlyingConnectionAllowed ( ) ) ;', 'final Connection connection = new ManagedConnection < > ( getPool ( ) , transactionRegistry ,']","['public void setDelegate ( final C c ) {', 'public void setDelegate ( final C connection ) {', 'connection = c ;', 'this . connection = connection ;']","['pci = new PooledConnectionAndInfo ( pc , userName , Utils . toString ( userPassword ) ) ;', 'pci = new PooledConnectionAndInfo ( pc , userName , userPassword ) ;']","['this . properties = props ;', 'return this . getClass ( ) . getName ( ) + "" [ "" + String . valueOf ( driver ) + "" ; "" + String . valueOf ( connectionUri ) + "" ; ""', 'return driver . connect ( connectionUri , properties ) ;', 'public DriverConnectionFactory ( final Driver driver , final String connectString , final Properties properties ) {', 'this . connectionUri = connectUri ;', 'return driver . connect ( connectionUri , properties ) ;', 'return this . getClass ( ) . getName ( ) + "" [ "" + String . valueOf ( driver ) + "" ; "" +', 'this . connectionUri = connectString ;', 'public DriverConnectionFactory ( final Driver driver , final String connectUri , final Properties props ) {', 'this . properties = properties ;']","['return driver . connect ( connectionUri , properties ) ;', 'private final String connectionString ;', 'this . connectionUri = connectString ;', 'return driver . connect ( connectionString , properties ) ;', 'return this . getClass ( ) . getName ( ) + "" [ "" + String . valueOf ( driver ) + "" ; "" + String . valueOf ( connectionUri ) + "" ; ""', 'return this . getClass ( ) . getName ( ) + "" [ "" + String . valueOf ( driver ) + "" ; "" + String . valueOf ( connectionString ) + "" ; ""', 'private final String connectionUri ;', 'this . connectionString = connectString ;']","['JMX CONNECTION POOL PREFIX +', '+ "" , connection = "" ;', 'JMX CONNECTION BASE EXT ;', 'public static final String JMX CONNECTION BASE EXT = JMX CONNECTION POOL BASE EXT + JMX CONNECTION POOL PREFIX', 'public static final String JMX STATEMENT POOL BASE EXT =', 'public static final String JMX STATEMENT POOL BASE EXT = JMX CONNECTION BASE EXT ;', 'JMX CONNECTION POOL BASE EXT +', 'public static final String JMX CONNECTION BASE EXT =', '"" , connection = "" ;']","['private DelegatingResultSet ( final Statement stmt , final ResultSet res ) {', 'public static ResultSet wrapResultSet ( final Connection connection , final ResultSet resultSet ) {', 'return new DelegatingResultSet ( conn , rset ) ;', 'this . resultSet = resultSet ;', 'return new DelegatingResultSet ( stmt , rset ) ;', 'return new DelegatingResultSet ( statement , resultSet ) ;', 'if ( null = = rset ) {', 'public static ResultSet wrapResultSet ( final Statement statement , final ResultSet resultSet ) {', 'this . resultSet = res ;', 'if ( null = = resultSet ) {']","['System . getSecurityManager ( ) ! = null ;', 'public static void closeQuietly ( final Statement statement ) {', 'public static void closeQuietly ( final ResultSet rset ) {', 'public static void closeQuietly ( final ResultSet resultSet ) {', 'public static void closeQuietly ( final Connection conn ) {', 'resultSet . close ( ) ;', 'if ( stmt ! = null ) {', 'if ( statement ! = null ) {', 'private static final ResourceBundle messages = ResourceBundle . getBundle (', 'statement . close ( ) ;']","['@ SuppressWarnings ( ""resource"" )']","['} catch ( final NullPointerException e ) {', 'return url = = null ? false : url . startsWith ( URL PREFIX ) ;', 'try {', '}', 'return url . startsWith ( URL PREFIX ) ;', 'return false ;']","['sql , autoGeneratedKeys . intValue ( ) ) ;', 'public PStmtKey ( final String sql , final String catalog , final StatementType statementType ) {', 'public PStmtKey ( final String sql , final int resultSetType , final int resultSetConcurrency ) {', 'final Integer autoGeneratedKeys ) {', 'sql , columnNames ) ;', 'final StatementType statementType ) {', 'final PreparedStatement statement = connection . prepareCall (', 'final int resultSetHoldability , final StatementType statementType ) {', 'sql , resultSetType . intValue ( ) , resultSetConcurrency . intValue ( ) ,', 'this . statementType = statementType ;']","['lastUsed = time ;', 'lastUsed = lastUsedMillis ;', 'protected void setLastUsed ( final long time ) {', 'protected void setLastUsed ( final long lastUsedMillis ) {']","['lastUsed = lastUsedMillis ;', 'return lastUsedMillis ;', 'return lastUsed ;', 'lastUsedMillis = System . currentTimeMillis ( ) ;', 'lastUsed = System . currentTimeMillis ( ) ;', 'this . lastUsedMillis = lastUsedMillis ;', 'private volatile long lastUsed = 0 ;', 'private volatile long lastUsedMillis = 0 ;']","['synchronized ( this . traceList ) {', 'synchronized ( this . traceList ) {', 'connectionPool . setMinIdle ( minIdle ) ;', 'connectionPool . setMinIdle ( minIdle ) ;', 'private long maxWaitMillis =', 'private volatile int defaultTransactionIsolation = PoolableConnectionFactory . UNKNOWN TRANSACTIONISOLATION ;', 'private volatile int defaultTransactionIsolation =', '}', '}', 'this . minIdle = minIdle ;']","['if ( timeout < 0 ) {', 'final PooledConnection pconn = pooledObject . getObject ( ) . getPooledConnection ( ) ;', 'public boolean validateObject ( final UserPassKey key , final PooledObject < PooledConnectionAndInfo > p ) {', 'timeoutSeconds = 0 ;', 'validateLifetime ( p ) ;', 'valid = conn . isValid ( timeoutSeconds ) ;', 'final PooledConnection pconn = p . getObject ( ) . getPooledConnection ( ) ;', 'int timeoutSeconds = validationQueryTimeoutSeconds ;', 'timeout = 0 ;', 'validateLifetime ( pooledObject ) ;']","['return connection . isValid ( timeout ) ;', 'return connection . isValid ( timeoutSeconds ) ;', 'public boolean isValid ( final int timeout ) throws SQLException {', 'public boolean isValid ( final int timeoutSeconds ) throws SQLException {', 'if ( timeout < 0 ) {', 'validationPreparedStatement . setQueryTimeout ( timeoutSeconds ) ;', 'public void validate ( final String sql , int timeout ) throws SQLException {', 'timeoutSeconds = 0 ;', 'validationPreparedStatement . setQueryTimeout ( timeout ) ;', 'if ( timeoutSeconds > 0 ) {']","['return true ;', 'return true ;', 'if ( iface . isAssignableFrom ( getClass ( ) ) ) {', 'if ( iface . isAssignableFrom ( getClass ( ) ) ) {', 'public ResultSet getSchemas ( final String catalog , final String schemaPattern ) throws SQLException {', 'public ResultSet getSchemas ( final String catalog , final String schemaPattern ) throws SQLException {', 'public ResultSet getTableTypes ( ) throws SQLException {', 'public ResultSet getTableTypes ( ) throws SQLException {', 'return databaseMetaData ;', 'return databaseMetaData ;']","['try {', 'return 0 ;', 'public long getMaxLogicalLobSize ( ) throws SQLException {', 'return databaseMetaData . getMaxLogicalLobSize ( ) ;', '}', '} catch ( final SQLException e ) {', 'return false ;', 'public boolean supportsRefCursors ( ) throws SQLException {', 'return databaseMetaData . supportsRefCursors ( ) ;', '@ Override']","['@ SuppressWarnings ( ""resource"" )']","['return true ;', 'return true ;', 'if ( iface . isAssignableFrom ( getClass ( ) ) ) {', 'if ( iface . isAssignableFrom ( getClass ( ) ) ) {', 'public void setQueryTimeout ( final int seconds ) throws SQLException {', 'public void setQueryTimeout ( final int seconds ) throws SQLException {', 'return s ;', 'return s ;', 'statement . setCursorName ( name ) ;', 'statement . setCursorName ( name ) ;']","['public void setQueryTimeout ( final int seconds ) throws SQLException {', 'public void setQueryTimeout ( final int seconds ) throws SQLException {', 'fetchDirection = direction ;', 'fetchDirection = direction ;', 'throw new SQLException ( ""broken connection"" ) ;', 'throw new SQLException ( ""broken connection"" ) ;', 'throw new SQLException ( ""query timeout"" ) ;', 'throw new SQLException ( ""query timeout"" ) ;', 'public void setMaxRows ( final int max ) throws SQLException {', 'public void setMaxRows ( final int max ) throws SQLException {']","['public int executeUpdate ( final String sql , final int columnIndexes [ ] )', 'public boolean execute ( final String sl , final int columnIndexes [ ] ) throws SQLException {', 'checkOpen ( ) ; return 0 ;', 'return true ;', 'checkOpen ( ) ; return true ;', 'return 0 ;', 'throws SQLException {', 'public int executeUpdate ( final String sql , final String columnNames [ ] ) throws SQLException {', 'public int executeUpdate ( final String sql , final String columnNames [ ] )', 'public boolean execute ( final String sql , final int autoGeneratedKeys ) throws SQLException {']","['return true ;', 'return true ;', 'public void setRowId ( final int parameterIndex , final RowId value ) throws SQLException {', 'public void setRowId ( final int parameterIndex , final RowId value ) throws SQLException {', 'public void setBytes ( final int parameterIndex , final byte x [ ] ) throws SQLException {', 'public void setBytes ( final int parameterIndex , final byte x [ ] ) throws SQLException {', 'public void setObject ( final int parameterIndex , final Object x , final int targetSqlType ) throws SQLException {', 'public void setObject ( final int parameterIndex , final Object x , final int targetSqlType ) throws SQLException {', 'public void setClob ( final int parameterIndex , final Reader reader , final long length ) throws SQLException {', 'public void setClob ( final int parameterIndex , final Reader reader , final long length ) throws SQLException {']","['public ResultSet executeQuery ( final String sql ) throws SQLException {', 'public long [ ] executeLargeBatch ( ) throws SQLException {', 'connection . setLastUsed ( ) ;', 'try {', '}', 'private void setLastUsedInParent ( ) {', 'if ( connection ! = null ) {', 'public long executeLargeUpdate ( final String sql , final int [ ] columnIndexes ) throws SQLException {', 'public long getLargeMaxRows ( ) throws SQLException {', '}']","['getDelegateCallableStatement ( ) . registerOutParameter ( paramIndex , sqlType , typeName ) ;', 'getDelegateCallableStatement ( ) . registerOutParameter ( paramIndex , sqlType , typeName ) ;', 'public NClob getNClob ( final String parameterName ) throws SQLException {', 'public NClob getNClob ( final String parameterName ) throws SQLException {', 'public void setByte ( final String parameterName , final byte x ) throws SQLException {', 'public void setByte ( final String parameterName , final byte x ) throws SQLException {', 'public int getInt ( final int parameterIndex ) throws SQLException {', 'public int getInt ( final int parameterIndex ) throws SQLException {', 'return getDelegateCallableStatement ( ) . getRowId ( parameterIndex ) ;', 'public Reader getCharacterStream ( final int parameterIndex ) throws SQLException {']","['return getDelegateCallableStatement ( ) . getBlob ( i ) ;', 'public Ref getRef ( final int parameterIndex ) throws SQLException {', 'super ( c , s ) ;', 'return getDelegateCallableStatement ( ) . getArray ( parameterIndex ) ;', 'return getDelegateCallableStatement ( ) . getClob ( i ) ;', 'public Array getArray ( final int parameterIndex ) throws SQLException {', 'public Clob getClob ( final int i ) throws SQLException {', 'public Clob getClob ( final int parameterIndex ) throws SQLException {', 'public DelegatingCallableStatement ( final DelegatingConnection < ? > c , final CallableStatement s ) {', 'return getDelegateCallableStatement ( ) . getRef ( parameterIndex ) ;']","['getDelegatePreparedStatement ( ) . setTime ( parameterIndex , x , cal ) ;', 'getDelegatePreparedStatement ( ) . setTime ( parameterIndex , x , cal ) ;', 'public String toString ( ) {', 'import java . sql . SQLType ;', 'getDelegatePreparedStatement ( ) . setBlob ( parameterIndex , inputStream ) ;', 'getDelegatePreparedStatement ( ) . setBlob ( parameterIndex , inputStream ) ;', 'public void setRowId ( final int parameterIndex , final RowId value ) throws SQLException {', 'public String toString ( ) {', 'getDelegatePreparedStatement ( ) . setURL ( parameterIndex , x ) ;', 'public void setRowId ( final int parameterIndex , final RowId value ) throws SQLException {']","['public void registerOutParameter ( final String parameterName , final int sqlType , final int scale ) throws SQLException {', 'public void registerOutParameter ( final String parameterName , final int sqlType , final int scale ) throws SQLException {', 'public NClob getNClob ( final String parameterName ) throws SQLException {', 'public NClob getNClob ( final String parameterName ) throws SQLException {', 'public void setByte ( final String parameterName , final byte x ) throws SQLException {', 'public void setByte ( final String parameterName , final byte x ) throws SQLException {', 'public int getInt ( final int parameterIndex ) throws SQLException {', 'public int getInt ( final int parameterIndex ) throws SQLException {', 'public Reader getCharacterStream ( final int parameterIndex ) throws SQLException {', 'public Reader getCharacterStream ( final int parameterIndex ) throws SQLException {']","['try {', 'import java . sql . SQLType ;', '}', 'public void setObject ( final String parameterName , final Object x , final SQLType targetSqlType ,', '@ Override', 'public void registerOutParameter ( final int parameterIndex , final SQLType sqlType , final String typeName )', 'public void registerOutParameter ( final String parameterName , final SQLType sqlType ) throws SQLException {', 'getDelegateCallableStatement ( ) . registerOutParameter ( parameterName , sqlType , typeName ) ;', 'public void registerOutParameter ( final String parameterName , final SQLType sqlType , final String typeName )', 'final int scaleOrLength ) throws SQLException {']","['return resultSet . previous ( ) ;', 'return resultSet . previous ( ) ;', 'return true ;', 'return true ;', 'public void updateClob ( final String columnLabel , final Reader reader , final long length ) throws SQLException {', 'public void updateClob ( final String columnLabel , final Reader reader , final long length ) throws SQLException {', 'public void updateFloat ( final String columnName , final float x ) throws SQLException {', 'public void updateFloat ( final String columnName , final float x ) throws SQLException {', 'return resultSet . getFetchDirection ( ) ;', 'return resultSet . getFetchDirection ( ) ;']","['return true ;', 'return true ;', 'public java . sql . Timestamp getTimestamp ( final int columnIndex ) throws SQLException {', 'public java . sql . Timestamp getTimestamp ( final int columnIndex ) throws SQLException {', 'public void updateClob ( final String columnLabel , final Reader reader , final long length ) throws SQLException {', 'public void updateClob ( final String columnLabel , final Reader reader , final long length ) throws SQLException {', 'public void updateRowId ( final String columnLabel , final RowId value ) throws SQLException {', 'public void updateRowId ( final String columnLabel , final RowId value ) throws SQLException {', 'return new Object ( ) ;', 'return new Object ( ) ;']","['try {', 'public void updateObject ( int columnIndex , Object x , SQLType targetSqlType ) throws SQLException {', 'public void updateObject ( int columnIndex , Object x , SQLType targetSqlType , int scaleOrLength ) throws SQLException {', 'resultSet . updateObject ( columnIndex , x , targetSqlType ) ;', 'throws SQLException {', 'import java . sql . SQLType ;', '}', 'public void updateObject ( String columnLabel , Object x , SQLType targetSqlType , int scaleOrLength )', '} catch ( final SQLException e ) {', 'resultSet . updateObject ( columnLabel , x , targetSqlType ) ;']","['@ SuppressWarnings ( ""resource"" )']","['this . defaultSchema = defaultSchema ;', 'public String getDefaultSchema ( ) {', '}', 'public void setDefaultSchema ( final String defaultSchema ) {', 'if ( defaultSchema ! = null & & defaultSchema . trim ( ) . length ( ) > 0 ) {', 'return this . defaultSchema ;', '} else {', 'private volatile String defaultSchema ;', '@ Override', 'connectionFactory . setDefaultSchema ( defaultSchema ) ;']","['this ( conn , pool , jmxName , null , false ) ;', 'this ( conn , pool , jmxName , null , true ) ;', 'private boolean fastFailValidation ;', 'private boolean fastFailValidation = true ;', 'this ( transactionRegistry , conn , pool , null , false ) ;', 'this ( transactionRegistry , conn , pool , null , true ) ;']","['synchronized public PooledObject < PoolableConnection > makeObject ( ) throws Exception {', 'public synchronized PooledObject < PoolableConnection > makeObject ( ) throws Exception {']","['final GenericObjectPoolConfig poolConfig , final AbandonedConfig abandonedConfig ) {', 'final GenericObjectPoolConfig < PoolableConnection > config = new GenericObjectPoolConfig < > ( ) ;', 'private void updateJmxName ( final GenericObjectPoolConfig config ) {', 'final GenericObjectPoolConfig < PoolableConnection > poolConfig , final AbandonedConfig abandonedConfig ) {', 'final GenericObjectPoolConfig config = new GenericObjectPoolConfig ( ) ;', 'private void updateJmxName ( final GenericObjectPoolConfig < ? > config ) {', 'final GenericKeyedObjectPoolConfig config = new GenericKeyedObjectPoolConfig ( ) ;', 'final GenericKeyedObjectPoolConfig < DelegatingPreparedStatement > config = new GenericKeyedObjectPoolConfig < > ( ) ;', 'return new DefaultPooledObject < DelegatingPreparedStatement > ( pcs ) ;', 'return new DefaultPooledObject < > ( pcs ) ;']","['super ( sql , resultSetType , resultSetConcurrency ) ;', 'super ( sql , null , resultSetType , resultSetConcurrency , resultSetHoldability ) ;']","['lock . lock ( ) ;', 'lock . lock ( ) ;', '/ /', '/ /', 'lock . unlock ( ) ;', 'try {', 'transactionContext . completeTransaction ( ) ;', '}', 'setClosedInternal ( true ) ;', 'lock . unlock ( ) ;']","['final GenericObjectPoolConfig < PoolableConnection > config = new GenericObjectPoolConfig < > ( ) ;', 'final GenericObjectPoolConfig poolConfig , final AbandonedConfig abandonedConfig ) {', 'final GenericObjectPoolConfig < PoolableConnection > poolConfig , final AbandonedConfig abandonedConfig ) {', 'private void updateJmxName ( final GenericObjectPoolConfig config ) {', 'private void updateJmxName ( final GenericObjectPoolConfig < ? > config ) {', 'final GenericObjectPoolConfig config = new GenericObjectPoolConfig ( ) ;', 'final GenericKeyedObjectPoolConfig < DelegatingPreparedStatement > config = new GenericKeyedObjectPoolConfig < > ( ) ;', 'final GenericKeyedObjectPoolConfig config = new GenericKeyedObjectPoolConfig ( ) ;', 'final GenericKeyedObjectPoolConfig < DelegatingPreparedStatement > config = new GenericKeyedObjectPoolConfig < > ( ) ;', 'final GenericKeyedObjectPoolConfig config = new GenericKeyedObjectPoolConfig ( ) ;']","['import java . sql . PreparedStatement ;', 'return connection . prepareCall ( sql , resultSetType . intValue ( ) , resultSetConcurrency . intValue ( ) ) ;', 'final PreparedStatement statement = connection . prepareStatement ( sql , columnNames ) ;', 'return connection . prepareStatement ( sql , resultSetType . intValue ( ) , resultSetConcurrency . intValue ( ) ,', 'resultSetConcurrency . intValue ( ) ) ;', 'return connection . prepareStatement ( sql ) ;', 'final PreparedStatement statement = connection . prepareStatement ( sql , resultSetType . intValue ( ) ,', 'return connection . prepareCall ( sql ) ;', 'final PreparedStatement statement = connection . prepareStatement ( sql ) ;', 'return connection . prepareStatement ( sql , autoGeneratedKeys . intValue ( ) ) ;']","['protected PStmtKey createKey ( final String sql , final int autoGeneratedKeys ) {', 'protected PStmtKey createKey ( final String sql , final int autoGeneratedKeys ) {', 'return new PStmtKey ( normalizeSQL ( sql ) , catalog , columnNames ) ;', 'return new PStmtKey ( normalizeSQL ( sql ) , getCatalogOrNull ( ) , resultSetType , resultSetConcurrency ,', 'return new PStmtKey ( normalizeSQL ( sql ) , catalog , resultSetType , resultSetConcurrency ) ;', 'try {', 'return new PStmtKey ( normalizeSQL ( sql ) , catalog , resultSetType , resultSetConcurrency , stmtType ) ;', 'resultSetHoldability ) ;', 'try {', 'return new PStmtKey ( normalizeSQL ( sql ) , getCatalogOrNull ( ) , resultSetType , resultSetConcurrency , stmtType ) ;']","['this . builder = new PreparedCallWithResultSetHoldability ( ) ;', 'this . builder = new PreparedCallWithResultSetHoldability ( ) ;', 'this . statementType = StatementType . PREPARED STATEMENT ;', 'this . statementType = StatementType . PREPARED STATEMENT ;', 'public String toString ( ) {', 'return connection . prepareStatement ( sql , autoGeneratedKeys . intValue ( ) ) ;', 'buf . append ( "" , resultSetType = "" ) ;', 'public String toString ( ) {', 'return connection . prepareStatement ( sql , autoGeneratedKeys . intValue ( ) ) ;', 'buf . append ( "" , resultSetType = "" ) ;']","['protected PStmtKey createKey ( final String sql , final int autoGeneratedKeys ) {', 'protected PStmtKey createKey ( final String sql , final int autoGeneratedKeys ) {', 'return new PStmtKey ( normalizeSQL ( sql ) , getCatalogOrNull ( ) , autoGeneratedKeys ) ;', 'return new PStmtKey ( normalizeSQL ( sql ) , getCatalogOrNull ( ) , autoGeneratedKeys ) ;', '}', '}']","['( ( PoolingConnection ) conn ) . setStatementPool ( stmtPool ) ;', 'final PoolingConnection poolingConn = ( PoolingConnection ) conn ;', '( ( PoolingConnection ) conn ) . setCacheState ( cacheState ) ;', 'poolingConn . setStatementPool ( stmtPool ) ;', '( PoolingConnection ) conn , config ) ;', 'poolingConn . setCacheState ( cacheState ) ;', 'poolingConn , config ) ;']","['result = prime * result + statementType . hashCode ( ) ;', 'this . autoGeneratedKeys = null ;', 'result = prime * result + ( resultSetType = = null ? 0 : resultSetType . hashCode ( ) ) ;', 'this . resultSetConcurrency = null ;', 'result = prime * result + ( sql = = null ? 0 : sql . hashCode ( ) ) ;', 'this . autoGeneratedKeys = autoGeneratedKeys ;', 'if ( autoGeneratedKeys = = null ) {', 'if ( !Arrays . equals ( columnNames , other . columnNames ) ) {', 'result = prime * result + ( autoGeneratedKeys = = null ? 0 : autoGeneratedKeys . hashCode ( ) ) ;', 'this . resultSetHoldability = null ;']","['public Statement createStatement ( Connection connection ) throws SQLException ;', 'Statement createStatement ( Connection connection ) throws SQLException ;']","['public boolean isAccessToUnderlyingConnectionAllowed ( ) {', 'public long getMaxWaitMillis ( ) {', '@ Test', 'public boolean getTestWhileIdle ( ) {', '}', 'public boolean getRemoveAbandonedOnBorrow ( ) {', 'public int getMaxIdle ( ) {', 'public int getRemoveAbandonedTimeout ( ) {', 'package org . apache . commons . dbcp2 ;', '@ Override']","['import edu . emory . mathcs . backport . java . util . Arrays ;', 'import java . util . Arrays ;']","['connection . close ( ) ;', 'try {', 'connection . close ( ) ;', 'connectionIsClosed = connection . isClosed ( ) ;', '}', 'boolean connectionIsClosed ;', 'connectionIsClosed = false ;', 'if ( !connectionIsClosed ) {', '} catch ( SQLException e ) {']","['final GenericKeyedObjectPoolConfig config = new GenericKeyedObjectPoolConfig ( ) ;', 'final GenericKeyedObjectPoolConfig < DelegatingPreparedStatement > config = new GenericKeyedObjectPoolConfig < > ( ) ;']","['final GenericObjectPoolConfig poolConfig , final AbandonedConfig abandonedConfig ) {', 'final GenericObjectPoolConfig < PoolableConnection > config = new GenericObjectPoolConfig < > ( ) ;', 'private void updateJmxName ( final GenericObjectPoolConfig config ) {', 'final GenericObjectPoolConfig < PoolableConnection > poolConfig , final AbandonedConfig abandonedConfig ) {', 'final GenericObjectPoolConfig config = new GenericObjectPoolConfig ( ) ;', 'private void updateJmxName ( final GenericObjectPoolConfig < ? > config ) {', 'final GenericKeyedObjectPoolConfig config = new GenericKeyedObjectPoolConfig ( ) ;', 'final GenericKeyedObjectPoolConfig < DelegatingPreparedStatement > config = new GenericKeyedObjectPoolConfig < > ( ) ;', 'final GenericKeyedObjectPoolConfig config = new GenericKeyedObjectPoolConfig ( ) ;', 'final GenericKeyedObjectPoolConfig < PooledConnectionAndInfo > config = new GenericKeyedObjectPoolConfig < > ( ) ;']","['final GenericObjectPool < ? > oldpool = connectionPool ;', 'final GenericObjectPool < ? > oldPool = connectionPool ;', 'if ( oldpool ! = null ) {', 'oldPool . close ( ) ;', 'oldpool . close ( ) ;', 'if ( oldPool ! = null ) {']","['} catch ( SQLException e ) {', '} catch ( final SQLException e ) {', 'public void setObject ( int parameterIndex , Object x , SQLType targetSqlType , int scaleOrLength ) throws SQLException {', 'public void setObject ( final int parameterIndex , final Object x , final SQLType targetSqlType , final int scaleOrLength ) throws SQLException {', 'public void setObject ( int parameterIndex , Object x , SQLType targetSqlType ) throws SQLException {', 'public void setObject ( final int parameterIndex , final Object x , final SQLType targetSqlType ) throws SQLException {', 'public void updateObject ( int columnIndex , Object x , SQLType targetSqlType ) throws SQLException {', 'public void updateObject ( final int columnIndex , final Object x , final SQLType targetSqlType , final int scaleOrLength ) throws SQLException {', 'public void updateObject ( String columnLabel , Object x , SQLType targetSqlType ) throws SQLException {', 'public void updateObject ( final String columnLabel , final Object x , final SQLType targetSqlType ) throws SQLException {']","['final DelegatingConnection < Connection > delegatingConnection = new DelegatingConnection < Connection > ( conn ) ;', 'final DelegatingConnection < Connection > delegatingConnection = new DelegatingConnection < > ( conn ) ;', 'conn = new DelegatingConnection < Connection > ( testConn ) ;', 'conn = new DelegatingConnection < > ( testConn ) ;']","['delegate = ( DelegatingResultSet ) DelegatingResultSet . wrapResultSet ( ( Connection ) conn , rs ) ;', 'delegate = ( DelegatingResultSet ) DelegatingResultSet . wrapResultSet ( conn , rs ) ;', 'assertEquals ( ( Integer ) 0 , ( Integer ) ds . getPerUserDefaultTransactionIsolation ( ""anotheruser"" ) ) ;', 'assertEquals ( ( Integer ) 0 , ds . getPerUserDefaultTransactionIsolation ( user ) ) ;', 'assertEquals ( null , ( Integer ) ds . getPerUserDefaultTransactionIsolation ( ""missingkey"" ) ) ;', 'assertEquals ( ( Integer ) 0 , ds . getPerUserDefaultTransactionIsolation ( ""anotheruser"" ) ) ;', 'assertEquals ( null , ( Integer ) ds . getPerUserDefaultTransactionIsolation ( ""key"" ) ) ;', 'assertEquals ( ( Integer ) 1 , ds . getPerUserDefaultTransactionIsolation ( ""key"" ) ) ;', 'assertEquals ( ( Integer ) 0 , ( Integer ) ds . getPerUserDefaultTransactionIsolation ( user ) ) ;', 'assertEquals ( null , ds . getPerUserDefaultTransactionIsolation ( ""missingkey"" ) ) ;']","['ResultSet . TYPE SCROLL SENSITIVE , ResultSet . CONCUR READ ONLY ,', 'java . sql . ResultSet . TYPE SCROLL SENSITIVE , java . sql . ResultSet . CONCUR READ ONLY ,', 'ResultSet . TYPE SCROLL INSENSITIVE , ResultSet . CONCUR READ ONLY ,', 'java . sql . ResultSet . TYPE SCROLL INSENSITIVE , java . sql . ResultSet . CONCUR UPDATABLE ,', 'ResultSet . TYPE SCROLL INSENSITIVE , ResultSet . CONCUR UPDATABLE ,', 'java . sql . ResultSet . TYPE SCROLL INSENSITIVE , java . sql . ResultSet . CONCUR READ ONLY ,', 'assertEquals ( SharedPoolDataSource . UNKNOWN TRANSACTIONISOLATION , spds . getDefaultTransactionIsolation ( ) ) ;', 'assertEquals ( InstanceKeyDataSource . UNKNOWN TRANSACTIONISOLATION , spds . getDefaultTransactionIsolation ( ) ) ;']","['final GenericObjectPoolConfig config = new GenericObjectPoolConfig ( ) ;', 'final GenericObjectPoolConfig < PoolableConnection > config = new GenericObjectPoolConfig < > ( ) ;', 'final ObjectPool < PoolableConnection > connPool =', 'final GenericObjectPoolConfig < PoolableConnection > config = new GenericObjectPoolConfig < > ( ) ;', 'new GenericObjectPool < > ( pcf , config ) ;', 'final ObjectPool < PoolableConnection > connPool = new GenericObjectPool < > ( pcf , config ) ;', 'final GenericObjectPoolConfig config = new GenericObjectPoolConfig ( ) ;', 'final GenericKeyedObjectPoolConfig config = new GenericKeyedObjectPoolConfig ( ) ;', 'final KeyedObjectPool < PStmtKey , DelegatingPreparedStatement > stmtPool =', 'final KeyedObjectPool < PStmtKey , DelegatingPreparedStatement > stmtPool =']","['public TransactionSynchronizationRegistry getTransactionSynchronizationRegistry ( ) {', 'return transactionSynchronizationRegistry ;', 'this . transactionSynchronizationRegistry = transactionSynchronizationRegistry ;', 'import javax . transaction . TransactionSynchronizationRegistry ;', '}', 'public void setTransactionSynchronizationRegistry (', 'final TransactionSynchronizationRegistry transactionSynchronizationRegistry ) {', 'private transient TransactionSynchronizationRegistry transactionSynchronizationRegistry ;', 'this . transactionRegistry = new TransactionRegistry ( transactionManager ) ;', 'this ( transactionManager , xaDataSource , null , ( char [ ] ) null , null ) ;']","['return value = = null ? null : value . clone ( ) ;', 'public static char [ ] clone ( final char [ ] value ) {', '}', 'this . userPassword = userPassword ;', 'update ( connectionProperties , KEY PASSWORD , Utils . toString ( this . userPassword ) ) ;', 'update ( connectionProperties , KEY PASSWORD , Utils . toString ( userPassword ) ) ;', 'this . userPassword = Utils . clone ( userPassword ) ;', 'this . userPassword = userPassword ;', 'this . userPassword = Utils . clone ( userPassword ) ;', 'return userPassword ;']","['if ( !isActive ( ) ) {', 'Transaction transaction = this . transactionRef . get ( ) ;', 'listener . afterCompletion ( TransactionContext . this ,', '}', 'transaction = = null ? false : transaction . getStatus ( ) = = Status . STATUS COMMITTED ) ;', 'return ;', 'import java . sql . PreparedStatement ;', 'try {', 'import org . junit . Assert ;', '@ Test']","['private GenericObjectPool < PoolableConnection > pool = null ;', 'protected GenericObjectPool < PoolableConnection > pool = null ;', '} catch ( SQLException e ) {', 'final Connection connection1 = ds . getConnection ( ) ;', 'public void afterCompletion ( int i ) {', 'public void afterCompletion ( final int i ) {', 'Connection connection1 = ds . getConnection ( ) ;', '} catch ( final SQLException e ) {']","['if ( connection ! = null ) {', 'if ( connection ! = null & & transactionContext . getSharedConnection ( ) ! = connection ) {', '@ SuppressWarnings ( ""resource"" )', 'try {', '@ Test', '} ) ;', 'transactionManager . commit ( ) ;', '}', 'assertNotNull ( conn ) ;', '@ Override']","['return DriverManager . getConnection ( connectionUri , propeties ) ;', 'private Properties properties ;', 'if ( null = = propeties ) {', 'if ( null = = properties ) {', 'private Properties propeties ;', 'this . properties = properties ;', 'this . propeties = properties ;', 'return DriverManager . getConnection ( connectionUri , properties ) ;', 'this . propeties = new Properties ( ) ;', 'this . properties = new Properties ( ) ;']","['return connection . getSchema ( ) ;', 'return Utils . getSchema ( connection ) ;', 'if ( defaultSchema ! = null & & !defaultSchema . equals ( conn . getSchema ( ) ) ) {', 'if ( defaultSchema ! = null & & !defaultSchema . equals ( Utils . getSchema ( conn ) ) ) {', '} catch ( AbstractMethodError e ) {', 'try {', 'return null ;', 'return conn . getSchema ( ) ;', '}', 'public static String getSchema ( final Connection conn ) throws SQLException {']","['connection . abort ( executor ) ;', 'Jdbc41Bridge . setNetworkTimeout ( connection , executor , milliseconds ) ;', 'return Utils . getSchema ( connection ) ;', 'return Jdbc41Bridge . getNetworkTimeout ( connection ) ;', 'connection . setNetworkTimeout ( executor , milliseconds ) ;', 'Jdbc41Bridge . abort ( connection , executor ) ;', 'connection . setSchema ( schema ) ;', 'Jdbc41Bridge . setSchema ( connection , schema ) ;', 'return connection . getNetworkTimeout ( ) ;', 'return Jdbc41Bridge . getSchema ( connection ) ;']","['builder . append ( loginTimeout ) ;', 'builder . append ( "" , connectionProperties = "" ) ;', 'public String toString ( ) {', 'builder . append ( userName ) ;', '}', 'builder . append ( "" , numTestsPerEvictionRun = "" ) ;', 'builder . append ( "" , maxPreparedStatements = "" ) ;', 'builder . append ( "" , url = "" ) ;', 'builder . append ( "" , timeBetweenEvictionRunsMillis = "" ) ;', 'builder . append ( minEvictableIdleTimeMillis ) ;']","['builder . append ( ( ( Properties ) connectionProperties . clone ( ) ) . remove ( ""password"" ) ) ;', 'tmpProps . remove ( pwdKey ) ;', 'Properties tmpProps = connectionProperties ;', '}', 'builder . append ( tmpProps ) ;', 'if ( connectionProperties . contains ( pwdKey ) ) {', 'final String pwdKey = ""password"" ;', 'tmpProps = ( Properties ) connectionProperties . clone ( ) ;']","['import java . net . URI ;', 'import java . net . URL ;', 'import java . net . URISyntaxException ;']","['builder . append ( "" , userName = "" ) ;', 'builder . append ( userName ) ;', 'builder . append ( "" , userName = "" ) ;', 'builder . append ( userName ) ;', 'builder . append ( "" , perUserMaxIdle = "" ) ;', 'builder . append ( "" , perUserLifo = "" ) ;', 'builder . append ( perUserDefaultReadOnly ) ;', 'builder . append ( perUserTestWhileIdle ) ;', 'builder . append ( "" , perUserTimeBetweenEvictionRunsMillis = "" ) ;', '}']","['public String toString ( ) {', 'public synchronized String toString ( ) {', 'public String toString ( ) {', 'public synchronized String toString ( ) {', 'return super . toString ( ) + "" [ res = "" + resultSet + "" , stmt = "" + statement + "" , conn = "" + connection + "" ] "" ;', 'public synchronized String toString ( ) {', 'public String toString ( ) {', 'return super . toString ( ) + "" [ resultSet = "" + resultSet + "" , statement = "" + statement + "" , connection = "" + connection + "" ] "" ;', 'public String toString ( ) {', 'public synchronized String toString ( ) {']","['StringBuilder builder = new StringBuilder ( super . toString ( ) ) ;', 'final StringBuilder builder = new StringBuilder ( super . toString ( ) ) ;', 'StringBuilder builder = new StringBuilder ( super . toString ( ) ) ;', 'final StringBuilder builder = new StringBuilder ( super . toString ( ) ) ;', 'StringBuilder builder = new StringBuilder ( super . toString ( ) ) ;', 'final StringBuilder builder = new StringBuilder ( super . toString ( ) ) ;', 'StringBuilder builder = new StringBuilder ( super . toString ( ) ) ;', 'final StringBuilder builder = new StringBuilder ( super . toString ( ) ) ;', 'protected void toStringFields ( StringBuilder builder ) {', 'protected void toStringFields ( final StringBuilder builder ) {']","['if ( conn ! = null & & !conn . isClosed ( ) )', 'if ( conn ! = null & & !conn . isClosed ( ) ) {', 'if ( pool ! = null & & !pool . isClosed ( ) )', '}', 'if ( pool ! = null & & !pool . isClosed ( ) ) {']","['xaDataSourceInstance , getUsername ( ) , getPassword ( ) ) ;', 'import org . apache . commons . dbcp2 . Utils ;', 'xaDataSourceInstance , getUsername ( ) , Utils . toCharArray ( getPassword ( ) ) , getTransactionSynchronizationRegistry ( ) ) ;', 'import static org . junit . Assert . assertNull ;', 'import java . sql . Connection ;', 'import static org . junit . Assert . fail ;', 'try {', 'import static org . junit . Assert . assertEquals ;', '@ Test', 'import javax . sql . XADataSource ;']","['ds . setInitialSize ( 8 ) ;', 'PreparedStatement stmt = conn . prepareStatement (', 'ds . setPassword ( ""password"" ) ;', 'threads [ i ] . join ( ) ;', 'java . util . Random random = new java . util . Random ( ) ;', 'threads [ i ] . start ( ) ;', 'import java . util . Arrays ;', '@ Override', 'ds . setMaxIdle ( 0 ) ;', 'public void testMassiveConcurrentInitBorrow ( ) throws Exception {']","['return dataSource ;', 'public String getUserName ( ) {', 'return userName ;', '}', 'public char [ ] getUserPassword ( ) {', 'return userPassword ;', 'public DataSource getDataSource ( ) {', 'return connectionString ;', '}', 'public Properties getProperties ( ) {']","['this . userPassword = userPassword ;', 'this . userPassword = Utils . clone ( userPassword ) ;', 'this . userPassword = userPassword ;', 'this . userPassword = Utils . toCharArray ( userPassword ) ;', 'return DriverManager . getConnection ( connectionUri , userName , userPassword ) ;', 'this . userPassword = Utils . clone ( userPassword ) ;', 'private final String userPassword ;', 'this . properties = null ;', 'this . userName = userName ;', 'public DriverManagerConnectionFactory ( final String connectionUri , final String userName ,']","['protected boolean getPoolStatements ( ) {', 'public ObjectName getDataSourceJmxName ( ) {', 'protected ObjectName getDataSourceJmxName ( ) {', 'public ConnectionFactory getConnectionFactory ( ) {', 'protected ConnectionFactory getConnectionFactory ( ) {', 'public boolean getPoolStatements ( ) {']","['private volatile int defaultTransactionIsolation = PoolableConnectionFactory . UNKNOWN TRANSACTIONISOLATION ;', 'private volatile int defaultTransactionIsolation = PoolableConnectionFactory . UNKNOWN TRANSACTION ISOLATION ;', 'level = PoolableConnectionFactory . UNKNOWN TRANSACTIONISOLATION ;', 'level = PoolableConnectionFactory . UNKNOWN TRANSACTION ISOLATION ;', 'int level = PoolableConnectionFactory . UNKNOWN TRANSACTIONISOLATION ;', 'int level = PoolableConnectionFactory . UNKNOWN TRANSACTION ISOLATION ;', 'if ( defaultTransactionIsolation ! = UNKNOWN TRANSACTIONISOLATION', 'static final int UNKNOWN TRANSACTION ISOLATION = - 1 ;', 'static final int UNKNOWN TRANSACTIONISOLATION = - 1 ;', 'private int defaultTransactionIsolation = UNKNOWN TRANSACTION ISOLATION ;']","['connectionFactory . setFastFailValidation ( fastFailValidation ) ;', 'connectionFactory . setFastFailValidation ( fastFailValidation ) ;', 'private transient Boolean defaultReadOnly ;', 'private transient Boolean defaultReadOnly ;', 'connectionPool = gop ;', 'connectionPool = gop ;', 'public synchronized String getDriverClassName ( ) {', 'public synchronized String getDriverClassName ( ) {', 'private boolean lifo = BaseObjectPoolConfig . DEFAULT LIFO ;', 'private boolean lifo = BaseObjectPoolConfig . DEFAULT LIFO ;']",['@ Override'],"['Thread [ ] threads = new Thread [ numThreads ] ;', 'private void sleepMax ( final int timeMax ) {', 'private void sleepMax ( int timeMax ) {', 'final ResultSet rset = stmt . executeQuery ( ) ;', 'ResultSet rset = stmt . executeQuery ( ) ;', 'final Thread [ ] threads = new Thread [ numThreads ] ;', 'public void afterCompletion ( int i ) {', 'final TransactionSynchronizationRegistry tsr = new TransactionSynchronizationRegistryImple ( ) ;', 'JdbcDataSource xaDataSource = new JdbcDataSource ( ) ;', 'final TransactionManager tm = basicManagedDataSource . getTransactionManager ( ) ;']",['@ Deprecated'],"['public ObjectNameWrapper getJmxObjectName ( ) {', '}', 'return jmxObjectName ;', 'this . defaultSchema = defaultSchema ;', 'this . defaultSchema = defaultSchema ;', 'this . defaultAutoCommit = defaultAutoCommit ;', 'this . defaultAutoCommit = defaultAutoCommit ;', 'return true ;', 'public void validateConnection ( final PoolableConnection conn ) throws SQLException {', 'public void validateConnection ( final PoolableConnection conn ) throws SQLException {']","['DISCONNECTION SQL CODES . add ( ""57P02"" ) ;', 'DISCONNECTION SQL CODES . add ( ""57P02"" ) ;', 'DISCONNECTION SQL CODES . add ( ""57P01"" ) ;', 'DISCONNECTION SQL CODES . add ( ""57P01"" ) ;', 'DISCONNECTION SQL CODES . add ( ""57P03"" ) ;', 'DISCONNECTION SQL CODES . add ( ""57P03"" ) ;']","['public static void closeQuietly ( final ResultSet resultSet ) {', '} catch ( final Exception e ) {', 'resultSet . close ( ) ;', 'public static void closeQuietly ( final ResultSet resultSet ) {', 'if ( resultSet ! = null ) {', 'try {', '}', 'resultSet . close ( ) ;', 'private Utils ( ) {', 'if ( resultSet ! = null ) {']","['public void evict ( ) throws Exception {', 'if ( connectionPool ! = null ) {', 'connectionPool . evict ( ) ;', '}', 'ds . setNumTestsPerEvictionRun ( 2 ) ;', 'public void testManualConnectionEvict ( ) throws Exception {', '@ Test', 'ds . evict ( ) ;', 'final Connection ds3 = ds . createDataSource ( ) . getConnection ( ) ;', 'ds . setMinIdle ( 0 ) ;']","['""select \'literal\' , SYSDATE from dual"" ) ;', '} catch ( final Exception e ) {', ') {', 'PreparedStatement stmt = conn . prepareStatement ( ""select \'literal\' , SYSDATE from dual"" ) ; ) {', 'PreparedStatement stmt = conn . prepareStatement (', 'for ( int i = 0 ; i < iter ; i + + ) {', '} catch ( final Exception e ) {', 'for ( int i = 0 ; i < iter ; i + + ) {', 'System . out . println ( ""Thread done "" + Thread . currentThread ( ) . toString ( ) ) ;', 'System . out . println ( ""Got Connection "" + Thread . currentThread ( ) . toString ( ) ) ;']","['ds . setInitialSize ( 8 ) ;', 'ds . setInitialSize ( 8 ) ;', 'ds . setPassword ( ""password"" ) ;', 'ds . setPassword ( ""password"" ) ;', 'threads [ i ] . join ( ) ;', 'threads [ i ] . join ( ) ;', 'java . util . Random random = new java . util . Random ( ) ;', 'java . util . Random random = new java . util . Random ( ) ;', 'threads [ i ] . start ( ) ;', 'threads [ i ] . start ( ) ;']","['public void close ( ) throws Exception {', 'public void close ( ) throws RuntimeException , SQLException {']","['return Objects . toString ( objectName ) ;', 'import java . util . Objects ;', 'public String toString ( ) {', '}', '@ Override']","['return DriverManager . getConnection ( connectUri ) ;', 'protected String passwd = null ;', 'return DriverManager . getConnection ( connectUri , uname , passwd ) ;', '}', 'if ( ( uname = = null ) | | ( passwd = = null ) ) {', 'return DriverManager . getConnection ( connectUri ) ;', 'connectUri = connectUri ;', '} else {', 'public DriverManagerConnectionFactory ( String connectUri , String uname , String passwd ) {', 'passwd = passwd ;']","['private BasicDBObject recordToMongo ( final Schema fieldSchema ,', 'return null ;', 'List < Object > list = easybson . getDBList ( docf ) ;', 'final BSONDecorator easybson , final Field f ) {', 'rmap . put ( new Utf8 ( mKey ) , new Utf8 ( ( String ) mValue ) ) ;', 'private Object fromMongoMap ( final String docf , final Schema fieldSchema ,', 'result = recordToMongo ( fieldSchema , value ) ;', 'List < Object > rlist = new ArrayList < Object > ( ) ;', 'result = unionToMongo ( fieldSchema , storeType , value ) ;', 'private Object fromMongoList ( final String docf , final Schema fieldSchema ,']","['map . put ( family + "" : "" + column + CassandraStore . UNION COL SUFIX , field + CassandraStore . UNION COL SUFIX ) ;', 'list . add ( column + CassandraStore . UNION COL SUFIX ) ;', 'import org . apache . gora . store . DataStore ;', 'Schema persistentSchema = query . getDataStore ( ) . newPersistent ( ) . getSchema ( ) ;', 'import org . apache . avro . Schema . Type ;', 'import org . apache . avro . Schema ;', 'if ( persistentSchema . getField ( field ) . schema ( ) . getType ( ) = = Type . UNION )']","['this . cassandraMapping . getKeyspaceName ( ) ,', 'opConsisLvl = ( writeOpConsLvl! = null | | !writeOpConsLvl . isEmpty ( ) ) ? writeOpConsLvl : DEFAULT HECTOR CONSIS LEVEL ;', 'configurableConsistencyLevel . setReadCfConsistencyLevels ( clmap ) ;', 'String opConsisLvl = ( readOpConsLvl! = null | | !readOpConsLvl . isEmpty ( ) ) ? readOpConsLvl : DEFAULT HECTOR CONSIS LEVEL ;', 'Map < String , HConsistencyLevel > clmap = new HashMap < String , HConsistencyLevel > ( ) ;', 'new CassandraHostConfigurator ( this . cassandraMapping . getHostName ( ) ) ) ;', 'this . cluster = HFactory . getOrCreateCluster ( this . cassandraMapping . getClusterName ( ) , new CassandraHostConfigurator ( this . cassandraMapping . getHostName ( ) ) ) ;', 'import static org . apache . gora . cassandra . store . CassandraStore . colFamConsLvl ;', 'clmap . put ( ""ColumnFamily"" , HConsistencyLevel . ONE ) ;', 'import static org . apache . gora . cassandra . store . CassandraStore . readOpConsLvl ;']","['SpecificDatumWriter writer = ( SpecificDatumWriter < ? > ) writerMap', 'SpecificDatumWriter writer = writerMap . get ( schemaId ) ;', 'SpecificDatumReader < ? > reader = ( SpecificDatumReader < ? > ) readerMap', 'SpecificDatumReader < ? > reader = readerMap . get ( schemaId ) ;', '. get ( schemaId ) ;', 'if ( solrJServerType . toLowerCase ( Locale . getDefault ( ) ) . equals ( ""http"" ) ) {', 'sb . append ( "" \\ \\ "" + c ) ;', '} else if ( solrJServerType . toLowerCase ( Locale . getDefault ( ) ) . equals ( ""cloud"" ) ) {', '} else if ( solrJServerType . toString ( ) . toLowerCase ( Locale . getDefault ( ) ) . equals ( ""loadbalance"" ) ) {', '} else if ( solrJServerType . toLowerCase ( Locale . getDefault ( ) ) . equals ( ""loadbalance"" ) ) {']","['public static final ConcurrentHashMap < String , SpecificDatumWriter < ? > > writerMap = new ConcurrentHashMap < String , SpecificDatumWriter < ? > > ( ) ;', 'public static final ConcurrentHashMap < String , SpecificDatumReader < ? > > readerMap = new ConcurrentHashMap < > ( ) ;', 'while ( it . hasNext ( ) ) {', 'public static final ConcurrentHashMap < String , SpecificDatumWriter < ? > > writerMap = new ConcurrentHashMap < > ( ) ;', 'batch = new ArrayList < SolrInputDocument > ( batchSize ) ;', 'return new SolrResult < > ( this , query , server , resultsSize ) ;', 'return new SolrResult < K , T > ( this , query , server , resultsSize ) ;', 'PartitionQueryImpl < K , T > pqi = new PartitionQueryImpl < > ( query ) ;', 'public static final ConcurrentHashMap < String , SpecificDatumReader < ? > > readerMap = new ConcurrentHashMap < String , SpecificDatumReader < ? > > ( ) ;', 'batch = new ArrayList < > ( batchSize ) ;']","['public void createSchema ( ) {', 'public static final Logger LOG = LoggerFactory . getLogger ( InfinispanClient . class ) ;', 'public void deleteByKey ( K key ) {', 'toPut . put ( key , val ) ;', 'public InfinispanClient ( ) {', 'public synchronized void initialize ( Class < K > keyClass , Class < T > persistentClass , Properties properties ) throws Exception {', 'createSchema ( ) ;', 'LOG . debug ( ""flush ( ) "" ) ;', 'ConfigurationBuilder builder = new ConfigurationBuilder ( ) ;', 'import org . apache . hadoop . conf . Configuration ;']","['if ( delete ( result . getKey ( ) ) )', '}', 'while ( result . next ( ) ) {', 'continue ;', 'deletedRows + + ;', 'for ( String field : fields ) {', 'try {', 'result . get ( ) . clearField ( field ) ;', 'Result < K , T > result = query . execute ( ) ;', 'if ( delete ( result . getKey ( ) ) ) {']","['UpdateResponse rsp = server . deleteByQuery ( q ) ;', 'LOG . info ( rsp . toString ( ) ) ;', 'server . commit ( ) ;', 'String q = ( ( SolrQuery < K , T > ) query ) . toSolrQuery ( ) ;', 'fieldValue = AvroUtils . getEnumValue ( fieldSchema , ( String ) solrValue ) ;', 'protected static final String SOLR SERVER USER AUTH = ""solr . solrjserver . user auth"" ;', 'import org . apache . gora . solr . query . SolrQuery ;', 'if ( arr = = null | | arr . length = = 0 ) {', 'private SolrClient server , adminServer ;', 'SOLR SERVER PASSWORD , null ) ;']","['public class CassandraKey {', '}', 'package org . apache . gora . cassandra . bean ;', '}', 'public class PrimaryKey {', 'package org . apache . gora . cassandra . bean ;']","['public class CassandraKey {', 'public String getName ( ) {', 'private List < ClusterKeyField > clusterKeyFields ;', '}', 'this . partitionKeyFields = new ArrayList < > ( ) ;', 'this . name = name ;', 'public List < PartitionKeyField > getPartitionKeyFields ( ) {', 'if ( this . partitionKeyFields = = null ) {', 'public void addClusterKeyField ( ClusterKeyField clusterKeyField ) {', 'private String name ;']","['String remoteMaxRequestsPerConnection = properties . getProperty ( Constants . REMOTE MAX REQUESTS PER CONNECTION ) ;', 'String enableJMXProp = properties . getProperty ( CassandraStoreParameters . ENABLE JMX REPORTING ) ;', 'String enableJMXProp = properties . getProperty ( Constants . ENABLE JMX REPORTING ) ;', 'private BeanFactory < K , T > beanFactory ;', 'import org . apache . gora . store . impl . DataStoreBase ;', 'private Class keyClass ;', 'import java . io . DataInput ;', 'String clusterNameProp = properties . getProperty ( CassandraStoreParameters . CLUSTER NAME ) ;', 'protected String [ ] getFields ( ) {', 'properties . getProperty ( CassandraStoreParameters . ALLOW REMOTE DCS FOR LOCAL CONSISTENCY LEVEL ) ) ;']","['final DataStore < K , T > dataStore = DataStoreFactory', 'import org . testcontainers . containers . GenericContainer ;', 'private Properties properties = DataStoreFactory . createProps ( ) ;', '}', 'public void tearDownClass ( ) throws Exception {', 'import org . apache . gora . GoraTestDriver ;', 'import org . apache . gora . store . DataStoreFactory ;', 'super ( AerospikeStore . class ) ;', 'public < K , T extends Persistent > DataStore < K , T > createDataStore ( Class < K > keyClass , Class < T > persistentClass )', '. createDataStore ( ( Class < ? extends DataStore < K , T > > ) dataStoreClass , keyClass , persistentClass , conf ,']","['public void clear ( ) {', '}', 'public boolean isDirty ( String field ) {', '@ Override', '@ Transient', 'package org . apache . gora . cassandra . serializers ;', 'import java . util . List ;', 'public void clearDirty ( int fieldIndex ) {', 'public void clearDirty ( String field ) {', 'public Persistent newInstance ( ) {']","['stringBuffer . append ( "" WITH ID = \'"" ) . append ( id ) . append ( ""\'"" ) ;', 'if ( Boolean . parseBoolean ( mapping . getProperty ( ""compactStorage"" ) ) ) {', 'if ( id ! = null ) {', 'stringBuffer = processFields ( stringBuffer , compositeField , isCommaNeeded ) ;', '} else {', 'if ( keyField . getOrder ( ) ! = null ) {', 'if ( Boolean . parseBoolean ( mapping . getProperty ( ""compactStorage"" ) ) ) {', 'static String getTruncateTableQuery ( CassandraMapping mapping ) {', 'String id = mapping . getProperty ( ""id"" ) ;', 'import org . apache . gora . cassandra . bean . CassandraKey ;']","['Schema . Type type0 = unionSchema . getTypes ( ) . get ( 0 ) . getType ( ) ;', 'value = getSerializableValue ( object , unionSchema ) ;', 'return new Bin ( binName , Value . get ( value . toString ( ) ) ) ;', 'int unionSchemaPos = 0 ;', 'String binName = aerospikeParameters . getAerospikeMapping ( ) . getBinName ( field ) ;', 'else if ( instanceValue instanceof Integer & & schemaType . equals ( Schema . Type . INT ) )', 'if ( schema . getName ( ) . equals ( ""string"" ) )', 'aerospikeClient', 'switch ( fieldDataType ) {', 'Value keyValue ;']","['Thread . sleep ( 5000 ) ;', 'public void testPutNested ( ) throws Exception {', '@ Ignore ( ""Functionality is to be implemented in the next iteration"" )', 'public void testPutBytes ( ) throws Exception {', 'private static final String DOCKER CONTAINER NAME = ""aerospike / aerospike - server : latest"" ;', 'public void assertPutBytes ( byte [ ] contentBytes ) throws IOException {', '@ Ignore ( ""Explicit schema creation related functionality is not supported in Aerospike"" )', '@ Test', 'public void testPut ( ) throws Exception {', 'super . testPutMixedMaps ( ) ;']","['if ( keyClass . getSimpleName ( ) . equalsIgnoreCase ( ""string"" ) ) {', 'if ( keyClass . getSimpleName ( ) . equalsIgnoreCase ( ""string"" ) ) {', 'return true ;', 'return aerospikeClient', 'keyValue = Value . get ( key . toString ( ) ) ;', 'Key recordKey = getAerospikeKey ( key ) ;', '}', 'keyValue = Value . get ( key . toString ( ) ) ;', 'aerospikeParameters . getAerospikeMapping ( ) . getSet ( ) , keyValue ) ;', '}']","['package org . apache . gora . cassandra . test . nativeSerialization ;', 'import org . apache . gora . cassandra . persistent . CassandraNativePersistent ;', 'import org . apache . gora . cassandra . serializers . CassandraNativePersistent ;', 'package org . apache . gora . cassandra . example . generated . nativeSerialization ;', 'package org . apache . gora . cassandra . serializers ;', 'package org . apache . gora . cassandra . persistent ;', 'import org . apache . gora . persistency . impl . PersistentBase ;', 'public void put ( Object key , Object value ) {', 'super ( cassandraClient , keyClass , persistentClass , mapping ) ;', 'public AvroSerializer ( CassandraClient cassandraClient , Class < K > keyClass , Class < T > persistentClass , CassandraMapping mapping ) {']","['if ( policyElement . getAttributeValue ( ""timeout"" ) ! = null )', 'if ( policyElement . getAttributeValue ( ""timeout"" ) ! = null ) {', 'LOG . error ( ""Gora - aerospike - mapping does not include the relevant namespace for the ""', 'LOG . error ( ""Gora - aerospike - mapping does not include the relevant namespace for the ""', '}', '}', 'throw new ConfigurationException (', 'throw new ConfigurationException (', 'if ( policyElement . getAttributeValue ( ""key"" ) ! = null )', 'persistentClassAndKeyClassMatches = true ;']","['private static final String AS SERVER IP = ""server . ip"" ;', 'private static final String AS SERVER PORT = ""gora . aerospikestore . server . port"" ;', 'private static final String AS SERVER PORT = ""server . port"" ;', 'private static final String AS SERVER IP = ""gora . aerospikestore . server . ip"" ;']","['public String getName ( ) {', 'public CassandraColumn ( Field field , Object value ) {', 'this . name = field . name ( ) ;', 'private String name ;', 'public class CassandraColumn {', '}', 'import org . apache . avro . Schema . Field ;', 'return name ;', 'package org . apache . gora . cassandra . query ;', 'private Field field ;']","['return 0 ;', '@ Override', '}', 'public long deleteByQuery ( Query query ) {', 'query = query . and ( QueryBuilder . lte ( field . getColumnName ( ) , "" ? "" ) ) ;', 'Select select = QueryBuilder . select ( getColumnNames ( mapping , fields ) ) . from ( mapping . getKeySpace ( ) . getName ( ) , mapping . getCoreName ( ) ) ;', 'select = select . limit ( ( int ) limit ) ;', 'String primaryKey = null ;', 'Select select = QueryBuilder . select ( getColumnNames ( mapping , fields ) ) . from ( mapping . getKeySpace ( ) . getName ( ) , mapping . getCoreName ( ) ) ;', 'if ( isPrimaryKey ) {']","['public AvroSerializer ( CassandraClient cassandraClient , Class < K > keyClass , Class < T > persistentClass , CassandraMapping mapping ) {', 'class AvroSerializer < K , T extends PersistentBase > extends CassandraSerializer {', 'public class AvroSerializer < K , T extends PersistentBase > extends CassandraSerializer {', 'AvroSerializer ( CassandraClient cassandraClient , Class < K > keyClass , Class < T > persistentClass , CassandraMapping mapping ) {', 'public class NativeSerializer < K , T extends CassandraNativePersistent > extends CassandraSerializer {', 'LOG . debug ( ""Object is saved with key : { } and value : { } "" , key , value ) ;', 'public NativeSerializer ( CassandraClient cassandraClient , Class < K > keyClass , Class < T > persistentClass , CassandraMapping mapping ) {', 'T object = mapper . get ( key ) ;', 'return mapper . get ( key ) ;', 'if ( object ! = null ) {']","['return null ;', 'partitions . add ( pqi ) ;', 'import org . apache . gora . query . impl . PartitionQueryImpl ;', 'import java . util . ArrayList ;', 'return partitions ;', 'import org . apache . gora . query . ws . impl . PartitionWSQueryImpl ;', 'List < PartitionQuery < K , T > > partitions = new ArrayList < > ( ) ;', 'PartitionWSQueryImpl < K , T > pqi = new PartitionWSQueryImpl < > ( query ) ;', 'pqi . setDataStore ( this ) ;']","['import org . apache . hadoop . conf . Configurable ;', 'public String [ ] getFields ( ) {', 'import org . apache . gora . query . impl . QueryBase ;', 'String [ ] updateFieldsArray = new String [ updateFields . size ( ) ] ;', 'public void addUpdateField ( String field , Object oldValue , Object newValue ) {', 'protected boolean localFilterEnabled = true ;', 'import org . apache . gora . query . Result ;', 'return updateFields . keySet ( ) . toArray ( updateFieldsArray ) ;', 'import org . apache . hadoop . io . Writable ;', 'public Object getUpdateFieldValue ( String key ) {']","['params . put ( ""key lower"" , this . getStartKey ( ) ) ;', '}', 'import com . github . raymanrt . orientqb . query . Projection ;', 'dbQuery = new OSQLSynchQuery < ODocument > ( selectQuery . toString ( ) ) ;', 'public OrientDBQuery ( ) {', 'super ( dataStore ) ;', 'selectQuery . select ( Projection . ALL ) ;', 'import com . orientechnologies . orient . core . record . impl . ODocument ;', 'Query selectQuery = new Query ( ) ;', 'selectQuery . where ( projection ( "" id"" ) . le ( Parameter . parameter ( ""key upper"" ) ) ) ;']","['public void setListDataType ( List < String > listDataType ) {', 'public void setId ( String id ) {', 'this . stringArrayDataType = stringArrayDataType ;', 'private List < String > listDataType ;', 'import java . util . UUID ;', 'import org . apache . gora . cassandra . persistent . CassandraNativePersistent ;', 'this . mapDataType = mapDataType ;', '}', '@ Table ( keyspace = ""nativeTestKeySpace"" , name = ""documents"" ,', '@ PartitionKey']","['""name"" ,', '""name"" ,', 'public void setWebpage ( org . apache . gora . examples . generated . WebPage value ) {', 'public void setWebpage ( org . apache . gora . examples . generated . WebPage value ) {', 'public boolean isDateOfBirthDirty ( ) {', 'public boolean isDateOfBirthDirty ( ) {', 'public boolean isSsnDirty ( ) {', 'public boolean isSsnDirty ( ) {', 'return TOMBSTONE ;', 'return TOMBSTONE ;']","['package org . apache . gora . aerospike . query ;', 'public class AerospikeQuery < K , T extends PersistentBase > extends QueryBase < K , T > {', 'public AerospikeQuery ( DataStore < K , T > dataStore ) {', 'import org . apache . gora . query . impl . QueryBase ;', '}', 'import org . apache . gora . query . Query ;', 'import org . apache . gora . store . DataStore ;', 'super ( dataStore ) ;', 'import org . apache . gora . persistency . impl . PersistentBase ;', 'private List < AerospikeResultRecord > resultRecords ;']","['key = ( K ) resultRecords . get ( ( int ) this . offset ) . getKey ( ) . userKey ;', 'return 0 ;', '} catch ( Exception e ) {', 'deleteCount + + ;', 'try {', 'while ( result . next ( ) ) {', '}', 'Result < K , T > result = query . execute ( ) ;', 'return - 1 ;', 'if ( aerospikeClient . delete ( null , getAerospikeKey ( result . getKey ( ) ) ) ) {']","['continue ;', 'if ( aerospikeClient . exists ( null , recordKey ) ) {', 'persistent . setDirty ( ) ;', '}', 'if ( !persistent . isDirty ( i ) ) {', 'this . delete ( key ) ;', '@ Test', 'super . testEmptyUpdate ( ) ;', 'public void testUpdate ( ) throws Exception {', '}']","['else if ( query . getStartKey ( ) ! = null & & query . getEndKey ( ) ! = null ) {', 'if ( query . getStartKey ( ) = = null & & query . getEndKey ( ) = = null ) {', 'if ( query . getStartKey ( ) = = null & & query . getEndKey ( ) = = null ) {', '/ /', '}', 'super . testDeleteByQuery ( ) ;', 'DataStoreTestUtil . assertNumResults ( webPageStore . newQuery ( ) , URLS . length ) ;', 'public void testDeleteByQueryFields ( ) throws Exception {', 'import static org . apache . gora . examples . WebPageDataCreator . SORTED URLS ;', 'public void testGetPartitions ( ) throws Exception {']","['private java . lang . CharSequence url ;', 'public static enum Field {', 'return TOMBSTONE ;', 'this . timestamp = value ;', 'public int getIndex ( ) { return index ; }', 'public void setUrl ( java . lang . CharSequence value ) {', 'copy . position ( mark ) ;', 'fieldSetFlags ( ) [ 1 ] = false ;', 'switch ( field$ ) {', 'case 1 : return timestamp ;']","['key = ( K ) resultRecords . get ( ( int ) this . offset ) . getKey ( ) . userKey ;', 'key = ( K ) resultRecords . get ( ( int ) this . offset ) . getKey ( ) . userKey . getObject ( ) ;']","['properties . setProperty ( ""server . port"" , aerospikeContainer . getMappedPort ( 3000 ) . toString ( ) ) ;', 'properties . setProperty ( ""gora . aerospikestore . server . port"" , aerospikeContainer . getMappedPort ( 3000 ) . toString ( ) ) ;', 'properties . setProperty ( ""server . ip"" , ""localhost"" ) ;', 'properties . setProperty ( ""gora . aerospikestore . server . ip"" , ""localhost"" ) ;']","['/ /', 'if ( record ! = null ) {', 'private Statement getStatement ( String namespace , String set ) {', 'while ( result . next ( ) ) {', 'while ( result . next ( ) ) {', '/ /', 'public Key getAerospikeKey ( K key ) {', 'private Key getAerospikeKey ( K key ) {', 'if ( aerospikeClient . delete ( null , getAerospikeKey ( result . getKey ( ) ) ) ) {', 'private Statement getStatement ( String namespace , String set ) {']","['return 0 ;', 'if ( resultRecords ! = null & & resultRecords . size ( ) > 0 ) {', 'import com . aerospike . client . query . RecordSet ;', 'return 0 ;', 'import java . util . ArrayList ;', '}', 'import com . aerospike . client . Record ;', '} else {', 'return ( float ) offset / ( float ) resultRecords . size ( ) ;']","['Thread . sleep ( 5000 ) ;', 'aerospikeContainer . stop ( ) ;', 'this . container . followOutput ( waitingConsumer ) ;', 'try {', 'import org . testcontainers . containers . GenericContainer ;', 'throw new ContainerLaunchException (', 'protected void waitUntilReady ( ) {', '}', 'import org . testcontainers . containers . ContainerLaunchException ;', 'import org . testcontainers . containers . output . WaitingConsumer ;']","['private Builder ( org . apache . gora . cassandra . example . generated . avroSerialization . CassandraKey . Builder other ) {', 'public static org . apache . gora . cassandra . example . generated . AvroSerialization . CassandraKey . Builder newBuilder ( ) {', 'public org . apache . gora . cassandra . example . generated . avroSerialization . CassandraKey . Builder clearUrl ( ) {', 'return new org . apache . gora . cassandra . example . generated . AvroSerialization . CassandraKey . Builder ( other ) ;', 'public static org . apache . gora . cassandra . example . generated . avroSerialization . CassandraKey . Builder newBuilder ( org . apache . gora . cassandra . example . generated . avroSerialization . CassandraKey . Builder other ) {', 'private static final long serialVersionUID = - 4231222814786458061L ;', 'super ( org . apache . gora . cassandra . example . generated . avroSerialization . CassandraKey . SCHEMA$ ) ;', 'public org . apache . gora . cassandra . example . generated . AvroSerialization . CassandraKey . Builder setUrl ( java . lang . CharSequence value ) {', 'package org . apache . gora . cassandra . example . generated . avroSerialization ;', 'super ( org . apache . gora . cassandra . example . generated . AvroSerialization . CassandraKey . SCHEMA$ ) ;']","['aerospikeContainer . stop ( ) ;', 'log . info ( ""Tearing down Aerospike test driver"" ) ;', 'log . info ( ""Setting up Aerospike test driver"" ) ;']","['aerospikeContainer . stop ( ) ;', 'log . info ( ""Tearing down Aerospike test driver"" ) ;', 'log . info ( ""Setting up Aerospike test driver"" ) ;']","['writePolicy . timeout = getTimeoutValue ( policyElement . getAttributeValue ( ""timeout"" ) ) ;', 'readPolicy . timeoutDelay = getTimeoutValue ( policyElement . getAttributeValue ( ""timeout"" ) ) ;', '}', 'writePolicy . timeoutDelay = getTimeoutValue ( policyElement . getAttributeValue ( ""timeout"" ) ) ;', 'case ""ONCE"" :', 'LOG . warn ( ""Invalid key retry policy provided , using the default retry policy"" ) ;', 'break ;', 'retryOnTimeout = true ;', 'writePolicy . retryOnTimeout = getRetryOnTimeoutPolicy (', 'case ""NONE"" :']","['objects . add ( ( ( CassandraQuery ) cassandraQuery ) . getUpdateFieldValue ( column ) ) ;', 'String field = mapping . getFieldFromColumnName ( column ) . getFieldName ( ) ;', 'for ( String column : columnNames ) {', 'if ( CassandraNativePersistent . class . isAssignableFrom ( mapping . getPersistentClass ( ) ) ) {', 'updateAssignments = update . with ( QueryBuilder . set ( column , "" ? "" ) ) ;', 'try {', '} catch ( IllegalAccessException | NoSuchFieldException e ) {', 'Schema schemaField = schema . getField ( field ) . schema ( ) ;', 'throw new RuntimeException ( ""SCHEMA$ field can\'t accessible , Please recompile the Avro schema with goracompiler . "" ) ;', 'import org . apache . gora . cassandra . persistent . CassandraNativePersistent ;']","['private java . lang . CharSequence url ;', 'private java . lang . CharSequence url ;', 'public static enum Field {', 'public static enum Field {', 'return TOMBSTONE ;', 'return TOMBSTONE ;', 'public int getIndex ( ) { return index ; }', 'public String toString ( ) {', 'public void setUrl ( java . lang . CharSequence value ) {', 'public void setUrl ( java . lang . CharSequence value ) {']","['import org . apache . gora . cassandra . persistent . CassandraNativePersistent ;', 'public void clear ( ) {', 'public class ComplexTypes extends CassandraNativePersistent {', '}', 'public boolean isDirty ( String field ) {', '@ Override', '@ Transient', 'public void clearDirty ( int fieldIndex ) {', 'public void clearDirty ( String field ) {', 'public Persistent newInstance ( ) {']","['if ( policyElement . getAttributeValue ( ""timeout"" ) ! = null ) {', 'if ( genPolicy . equalsIgnoreCase ( generationPolicyEnum . toString ( ) ) ) {', 'GenerationPolicy generationPolicy ;', 'return true ;', 'int timeoutInt = 0 ;', 'if ( policyElement . getAttributeValue ( AerospikePolicyConst . EXPIRATION NAME ) ! = null ) {', 'return generationPolicy ;', 'private Priority getPriority ( String priority ) {', 'if ( policy . equals ( ""write"" ) ) {', 'if ( durableDelete . equalsIgnoreCase ( ""false"" ) ) {']","['private String user ;', 'private String username ;', 'public void setUser ( String user ) {', 'private static final String AS SERVER USERNAME = ""gora . aerospikestore . server . username"" ;', 'return user ;', 'this . username = properties . getProperty ( AS SERVER USERNAME , null ) ;', 'public String getUser ( ) {', 'this . password = properties . getProperty ( AS SERVER PASSWORD , null ) ;', 'this . user = user ;', 'return username ;']","['line ( pIden , ""public void clearDirty ( ) { } "" ) ;', 'line ( pIden , ""public boolean isDirty ( int fieldIndex ) { return false ; } "" ) ;', 'setDefaultMethods ( 2 , className ) ;', 'private void compile ( CassandraMapping mapping ) {', 'log . error ( ""Error while compiling table { } "" , className , e . getMessage ( ) ) ;', 'import org . apache . gora . cassandra . store . CassandraMappingBuilder ;', 'package org . apache . gora . cassandra . compiler ;', 'return ""String"" ;', 'return ""Map < "" + getDataType ( types [ 0 ] , true ) + "" , "" + getDataType ( types [ 1 ] , true ) + "" > "" ;', 'log . error ( ""Usage : Compiler < mapping file > < output dir > "" ) ;']","['public Customer ( ) {', 'public Customer ( ) {', 'import java . util . List ;', '}', '}', 'import java . util . Map ;', 'return name . substring ( 0 , 1 ) . toUpperCase ( Locale . getDefault ( ) )', 'return name . substring ( 0 , 1 ) . toUpperCase ( Locale . getDefault ( ) )', '+ name . substring ( 1 , name . length ( ) ) ;', '+ name . substring ( 1 , name . length ( ) ) ;']","['LOG . error ( """" ) ;', 'LOG . error ( ""Error occurred while deserialize the Record . : "" + e . getMessage ( ) ) ;', 'super ( cassandraClient , dataStore . getKeyClass ( ) , dataStore . getPersistentClass ( ) , mapping , schema ) ;', 'try {', '}', 'super ( cassandraClient , dataStore . getKeyClass ( ) , dataStore . getPersistentClass ( ) , mapping ) ;', 'String cqlQuery = CassandraQueryFactory . getUpdateByQueryForAvro ( mapping , query , objectArrayList , persistentSchema ) ;', 'persistentSchema = schema ;', 'if ( objectArrayList . size ( ) = = 0 ) {', '@ Override']","['return null ;', 'import org . apache . gora . query . impl . PartitionQueryImpl ;', 'return partitions ;', 'partitionQuery . setConf ( getConf ( ) ) ;', 'PartitionQueryImpl < K , T > partitionQuery = new PartitionQueryImpl < > (', 'query ) ;', 'List < PartitionQuery < K , T > > partitions = new ArrayList < > ( ) ;', 'partitions . add ( partitionQuery ) ;', '@ Test', 'super . testSchemaExists ( ) ;']","['AvroSerializer ( CassandraClient cassandraClient , DataStore < K , T > dataStore , CassandraMapping mapping , Schema schema ) {', 'if ( PersistentBase . class . isAssignableFrom ( dataStore . getPersistentClass ( ) ) ) {', 'persistentSchema = schema ;', '}', 'persistentSchema = null ;', '} else {', 'persistentSchema = ( ( PersistentBase ) dataStore . getBeanFactory ( ) . getCachedPersistent ( ) ) . getSchema ( ) ;', 'AvroSerializer ( CassandraClient cassandraClient , DataStore < K , T > dataStore , CassandraMapping mapping ) {', 'public static < K , T extends Persistent > CassandraSerializer getSerializer ( CassandraClient cc , String type , final DataStore < K , T > dataStore , CassandraMapping mapping , Schema schema ) {', 'serializer = new AvroSerializer ( cc , dataStore , mapping ) ;']","['else if ( pValue ! = null & & ByteBuffer . class . isAssignableFrom ( pValue . getClass ( ) ) & & schemaType . equals ( Schema . Type . FIXED ) )', 'break ;', 'else if ( pValue ! = null & & ByteBuffer . class . isAssignableFrom ( pValue . getClass ( ) ) & & schemaType . equals ( Schema . Type . ARRAY ) )', 'result = ( ( ByteBuffer ) value ) . getLong ( ) ;', 'else if ( pValue ! = null & & ByteBuffer . class . isAssignableFrom ( pValue . getClass ( ) ) & & schemaType . equals ( Schema . Type . MAP ) )', 'case FLOAT :', 'else if ( pValue ! = null & & ByteBuffer . class . isAssignableFrom ( pValue . getClass ( ) ) & & schemaType . equals ( Schema . Type . ENUM ) )', 'if ( ByteBuffer . class . isAssignableFrom ( value . getClass ( ) ) ) {', 'return unionSchemaPos ;', 'case DOUBLE :']","['if ( aerospikeClient . exists ( null , recordKey ) ) {', 'if ( persistent . isDirty ( i ) ) {', 'this . delete ( key ) ;', 'Object persistentValue = persistent . get ( i ) ;', 'persistent . setDirty ( ) ;', '}', 'for ( int i = 0 ; i < fields . size ( ) ; i + + ) {', 'this . delete ( key ) ;', 'persistent . setDirty ( fieldMap . get ( fieldName ) . pos ( ) ) ;', 'if ( persistentValue = = null & & aerospikeClient . exists ( null , recordKey ) ) {']","['persistent . setDirty ( fieldMap . get ( fieldName ) . pos ( ) ) ;', 'persistent . clearDirty ( ) ;']","['CassandraStore . SerializerType serType = type . isEmpty ( ) ? CassandraStore . SerializerType . NATIVE : CassandraStore . SerializerType . valueOf ( type . toUpperCase ( Locale . ENGLISH ) ) ;', 'CassandraStore . SerializerType serType = type = = null | | type . isEmpty ( ) ? CassandraStore . SerializerType . NATIVE : CassandraStore . SerializerType . valueOf ( type . toUpperCase ( Locale . ENGLISH ) ) ;', 'break ;', 'break ;', 'keyspace . setPlacementStrategy ( KeySpace . PlacementStrategy . NetworkTopologyStrategy ) ;', 'keyspace . setReplicationFactor ( 1 ) ;', 'String dataCenterName = dataCenter . getAttributeValue ( ""name"" ) ;', 'keyspace . setPlacementStrategy ( KeySpace . PlacementStrategy . NetworkTopologyStrategy ) ;', 'keyspace . setPlacementStrategy ( KeySpace . PlacementStrategy . SimpleStrategy ) ;', 'String dataCenterName = dataCenter . getAttributeValue ( ""name"" ) ;']","['if ( persistent . isDirty ( i ) ) {', '""Aerospike mapping for field [ "" + persistent . getClass ( ) . getName ( ) + ""#"" + fields', 'Object persistentValue = persistent . get ( i ) ;', 'aerospikeClient', '""Aerospike mapping for field [ "" + persistent . getClass ( ) . getName ( ) + ""#"" + fields', '. get ( i ) . name ( ) + "" ] not found . Wrong gora - aerospike - mapping . xml ? "" ) ;', 'aerospikeClient', '}', '. put ( aerospikeParameters . getAerospikeMapping ( ) . getWritePolicy ( ) , recordKey , bin ) ;', '} else {']","['public AerospikeQuery ( ) {', 'super ( null ) ;', '}', 'public AerospikeParameters ( AerospikeMapping aerospikeMapping , Properties properties ) {', 'public AerospikeParameters ( AerospikeMapping aerospikeMapping , Properties properties , Configuration conf ) {', 'this . username = conf . get ( AS SERVER USERNAME , null ) ;', 'private static final String AS PROP OVERRIDING = ""gora . aerospikestore . override . hadoop . configuration"" ;', '}', 'import org . apache . hadoop . conf . Configuration ;', 'this . host = conf . get ( AS SERVER IP , DEFAULT SERVER IP ) ;']","['return EncoderFactory . get ( ) . binaryEncoder ( getOrCreateOutputStream ( ) , null ) ;', 'return EncoderFactory . get ( ) . binaryEncoder ( getOrCreateOutputStream ( ) , null ) ;', 'if ( this . codecType = = null ) {', 'return EncoderFactory . get ( ) . jsonEncoder ( schema , getOrCreateOutputStream ( ) ) ;', 'return EncoderFactory . get ( ) . jsonEncoder ( schema , getOrCreateOutputStream ( ) ) ;', 'if ( properties ! = null & & this . codecType = = null ) {', 'extends FileBackedDataStoreBase < K , T > implements Configurable {', 'extends FileBackedDataStoreBase < K , T > implements Configurable {', 'String codecType = DataStoreFactory . findProperty (', 'String codecType = DataStoreFactory . findProperty (']","['LOG . info ( ""Ignored putting persistent bean { } in the store as it is neither ""', 'flushLock . lock ( ) ;', 'private List < ODocument > docBatch = new ArrayList < > ( ) ;', 'LOG . info ( ""Ignored putting persistent bean { } in the store as it is neither ""', '+ ""new , neither dirty . "" , new Object [ ] { val } ) ;', 'flushLock . unlock ( ) ;', '+ ""new , neither dirty . "" , new Object [ ] { val } ) ;', 'import java . util . Collections ;', 'private List < ODocument > docBatch = Collections . synchronizedList ( new ArrayList < > ( ) ) ;', '}']","['persistentSchema = null ;', 'throw new RuntimeException ( ""Unsupported persistent class , couldn\'t able to find the Avro schema . "" ) ;']","['private static String getDefaultDataStore ( Properties properties ) {', 'public static String getDefaultDataStore ( Properties properties ) {', 'private DataStoreMetadataFactory ( ) {', 'try {', 'metadataAnalyzer . initialize ( ) ;', '}', 'public class DataStoreMetadataFactory {', 'return metadataAnalyzer ;', 'return createAnalyzer ( configuration , DataStoreFactory . createProps ( ) ) ;', 'import org . apache . gora . util . GoraException ;']","['public abstract void close ( ) throws IOException ;', 'import java . io . IOException ;']","['public static DataStoreMetadataAnalyzer createAnalyzer ( Configuration configuration ) throws GoraException {', 'public static DataStoreMetadataAnalyzer createAnalyzer ( Configuration configuration , Properties properties ) throws GoraException , ClassNotFoundException {', 'public static DataStoreMetadataAnalyzer createAnalyzer ( Configuration configuration , Properties properties ) throws GoraException {', 'public static DataStoreMetadataAnalyzer createAnalyzer ( String metadataAnalyzerClassName , Configuration configuration ) throws GoraException , ClassNotFoundException {', 'public static DataStoreMetadataAnalyzer createAnalyzer ( String metadataAnalyzerClassName , Configuration configuration , Properties properties ) throws GoraException {', 'public static DataStoreMetadataAnalyzer createAnalyzer ( Configuration configuration ) throws GoraException , ClassNotFoundException {', 'public static DataStoreMetadataAnalyzer createAnalyzer ( String metadataAnalyzerClassName , Configuration configuration ) throws GoraException {', '} catch ( ClassNotFoundException e ) {', 'throw e ;', 'public static DataStoreMetadataAnalyzer createAnalyzer ( String metadataAnalyzerClassName , Configuration configuration , Properties properties ) throws GoraException , ClassNotFoundException {']","['@ JsonIgnore', 'import com . fasterxml . jackson . annotation . JsonIgnore ;']","['import org . apache . gora . util . ClassLoadingUtils ;', 'public BeanFactoryImpl ( Class < K > keyClass , String persistentClassName ) throws ClassNotFoundException {', '@ SuppressWarnings ( ""unchecked"" )', 'import org . apache . gora . util . GoraException ;', '@ SuppressWarnings ( { ""unchecked"" } )', '}', 'this ( keyClass , ( Class < T > ) ClassLoadingUtils . loadClass ( persistentClassName ) ) ;']","['this . stream = path . getFileSystem ( conf ) . open ( path ) ;', '}', 'package org . apache . gora . avro . mapreduce ;', 'this . len = path . getFileSystem ( conf ) . getFileStatus ( path ) . getLen ( ) ;', 'import org . apache . hadoop . fs . FSDataInputStream ;', 'return stream . read ( b , off , len ) ;', 'return stream . getPos ( ) ;', 'import org . apache . avro . file . SeekableInput ;', 'public long length ( ) {', 'public FsInput ( Path path , Configuration conf ) throws IOException {']","['dirtyBytes . put ( i , ( byte ) - 128 ) ;', 'dirtyBytes . put ( i , ( byte ) - 1 ) ;']","['@ Test', '}', 'assertEquals ( ""Expected the new Persistent instance to not be dirty . "" , false , page . isDirty ( ) ) ;', 'for ( Field field : page . getSchema ( ) . getFields ( ) ) {', 'WebPage page = WebPage . newBuilder ( ) . build ( ) ;', 'assertEquals ( ""The field "" + field . name ( ) + "" is not dirty . "" , true , page . isDirty ( field . name ( ) ) ) ;', 'public void testSetDirty ( ) {', 'page . setDirty ( ) ;']","['} catch ( TableNotFoundException e ) {', 'public void initialize ( Class < K > keyClass , Class < T > persistentClass , Properties properties ) throws GoraException {', 'public void deleteSchema ( ) {', 'try {', 'public Result < K , T > execute ( Query < K , T > query ) {', '}', 'public long deleteByQuery ( Query < K , T > query ) {', 'throw e ;', 'private int putArray ( Mutation m , int count , Object o , Pair < Text , Text > col , String fieldName ) {', 'public void createSchema ( ) throws GoraException {']","['} catch ( AccumuloException | AccumuloSecurityException | TableNotFoundException e ) {', '} catch ( TableNotFoundException e ) {', '} catch ( AccumuloException | AccumuloSecurityException e ) {']","['String instance = DataStoreFactory . findProperty ( properties , this , INSTANCE NAME PROPERTY , null ) ;', 'String instance = DataStoreFactory . findProperty ( properties , this , INSTANCE NAME PROPERTY , null ) ;', 'try {', '} catch ( AccumuloException | AccumuloSecurityException e ) {', '}', '} catch ( IOException | InstantiationException | IllegalAccessException |', 'super . initialize ( keyClass , persistentClass , properties ) ;', 'try {', 'AuthenticationToken token = new PasswordToken ( password ) ;', 'ClassNotFoundException | AccumuloException | AccumuloSecurityException e ) {']","['throw new UnsupportedOperationException ( ""Not supported yet . "" ) ;', '@ Override', '}', 'public int size ( ) {', 'return resultRecords . size ( ) ;', '@ Override', '}', 'public int size ( ) {', '@ Override', '}']","['return 0 ;', '} else {', 'throw new UnsupportedOperationException ( ""Not supported yet . "" ) ;', 'return 0 ;', '}', 'return ( float ) this . offset / ( float ) this . limit ;', 'scanner . setBatchSize ( ( int ) this . limit ) ;', 'if ( this . limit > - 1 ) {', 'if ( this . limit! = - 1 ) {', 'return ( int ) this . limit ;']","['return ( int ) this . limit ;', 'return ( float ) this . offset / ( float ) this . limit ;', '} else {', 'scanner . setBatchSize ( ( int ) this . limit ) ;', 'return 0 ;', 'return 0 ;', '}', 'return ( int ) this . limit ;', 'return ( float ) this . offset / ( float ) this . limit ;', '}']","['private java . lang . CharSequence url ;', 'private java . lang . CharSequence url ;', 'public static enum Field {', 'public static enum Field {', 'return TOMBSTONE ;', 'return TOMBSTONE ;', 'public String toString ( ) {', 'public int getIndex ( ) { return index ; }', 'public void setUrl ( java . lang . CharSequence value ) {', 'public void setUrl ( java . lang . CharSequence value ) {']","['LOG . info ( ""gora . buffer . read . limit = "" + recordsMax ) ;', 'LOG . info ( BUFFER LIMIT READ NAME + "" = "" + recordsMax ) ;', 'LOG . info ( ""Flushing the datastore after "" + counter . getRecordsNumber ( ) + "" records"" ) ;', 'try {', '}', 'public void delete ( K key ) throws IOException {', 'LOG . error ( ""Exception at GoraRecordWriter#delete ( ) while deleting to datastore . "" + e . getMessage ( ) ) ;', 'counter . increment ( ) ;', 'store . delete ( key ) ;', '} catch ( Exception e ) {']","['mappingInputStream = IOUtils . toInputStream ( getConf ( ) . get ( XML MAPPING DEFINITION , null ) ) ;', 'import java . nio . charset . Charset ;', 'mappingInputStream = IOUtils . toInputStream ( getConf ( ) . get ( XML MAPPING DEFINITION ) , ( Charset ) null ) ;', 'throw new GoraException ( ""Calling getDataStore ( ) . setStoreLocation ( ) must be called first!"" ) ;', 'import org . apache . gora . pig . mapreduce . PigGoraOutputFormat ;', '}', 'if ( this . localJobConf = = null ) {', 'public void clear ( ) {', 'ResourceFieldSchema [ ] tupleFieldSchemas = pigField . getSchema ( ) . getFields ( ) ;', 'private static Object persistentField2PigType ( Schema schema , Object data ) throws ExecException {']","['try {', 'throw new GoraException ( ex ) ;', '}', '@ SuppressWarnings ( { ""unchecked"" } )', 'Class < K > k = ( Class < K > ) ClassLoadingUtils . loadClass ( keyClass ) ;', 'public static < K , T extends Persistent > DataStore < K , T > getDataStore (', '= ( Class < ? extends DataStore < K , T > > ) Class . forName ( getDefaultDataStore ( props ) ) ;', 'throws GoraException {', 'Class < T > p = ( Class < T > ) ClassLoadingUtils . loadClass ( persistentClass ) ;', 'throw ex ;']","['if ( this . limit > - 1 ) {', 'if ( this . limit > 0 ) {', 'public void testResultSizeKeyRange ( ) throws Exception {', '@ Test', 'import static org . apache . gora . store . DataStoreTestBase . log ;', 'public void testResultSize ( ) throws Exception {', '}', 'import org . apache . gora . store . DataStoreTestUtil ;', 'import org . junit . Test ;', '@ Ignore ( ""Accumulo does not support Result#size ( ) without limit set"" )']","['import java . util . Map . Entry ;', 'byte [ ] familyBytes = mappingEntry . getValue ( ) . getFamily ( ) = = null ? new byte [ 0 ] : mappingEntry . getValue ( ) . getFamily ( ) ;', 'for ( Entry < String , HBaseColumn > mappingEntry : this . columnMap . entrySet ( ) ) {', 'public String toString ( ) {', 'StringBuilder strBuilder = new StringBuilder ( ) ;', 'strBuilder . append ( mappingEntry . getKey ( ) + "" - > "" + new String ( familyBytes , StandardCharsets . UTF 8 ) + "" : "" + new String ( qualifierBytes , StandardCharsets . UTF 8 ) ) ;', '}', 'strBuilder . append ( "" \\ n"" ) ;', 'strBuilder . append ( this . getTableName ( ) ) ;', 'return strBuilder . toString ( ) ;']","['return intLimit > 0 & & totalSize > intLimit ? intLimit : totalSize ;', 'return intLimit > 0 & & totalSize > intLimit ? intLimit : totalSize ;', '}', '}']","['}', '}']","['if ( props = = null | | props . size ( ) = = 0 ) {', 'properties = createProps ( ) ;', '}', 'props = createProps ( ) ;', 'if ( properties = = null | | properties . size ( ) = = 0 ) {', 'if ( LOG . isTraceEnabled ( ) ) LOG . trace ( mapping . toString ( ) ) ;', 'import org . apache . hadoop . conf . Configurable ;', 'import org . apache . hadoop . conf . Configuration ;', '} catch ( Exception e ) {', 'this . outputFormat = new PigGoraOutputFormat ( ) ;']","['public GoraDeleteStorage ( String keyClassName , String persistentClassName , String deleteType ) throws InstantiationException , IllegalAccessException {', 'public GoraDeleteStorage ( String storageConfigurationString ) throws InstantiationException , IllegalAccessException , JsonParseException , JsonMappingException , IOException {', 'switch ( pigFieldSchema . getType ( ) ) {', 'public void setUDFContextSignature ( String signature ) {', 'localConf . set ( entry . getKey ( ) , entry . getValue ( ) ) ;', 'String key = ( String ) pigTuple . get ( this . pigFieldKeyIndex ) ;', 'persistent . setDirty ( fieldName ) ;', 'this . getUDFProperties ( ) . setProperty ( GoraStorage . GORA STORE PIG SCHEMA , pigSchema . toString ( ) ) ;', 'if ( LOG . isTraceEnabled ( ) ) LOG . trace ( writeResourceSchema . toString ( ) ) ;', '@ Override']","['int intLimit = ( int ) this . limit ;', 'int intLimit = ( int ) this . limit ;', '( setStartKeys ? i : 0 ) ;', 'int limit = expectedLength / 2 ;', 'if ( setEndKeys )', 'int r = 0 ;', 'throws Exception {', 'while ( result . next ( ) ) {', 'int limit = expectedLength / 2 ;', 'if ( !setStartKeys ) {']","['import java . io . DataInputStream ;', 'public byte [ ] encodeLong ( long l , byte [ ] ret ) throws IOException {', 'dos . writeLong ( l ) ;', 'public byte [ ] encodeFloat ( float f , byte [ ] ret ) throws IOException {', 'public int decodeInt ( byte [ ] a ) throws IOException {', 'return Utils . lastPossibleKey ( size , er ) ;', 'public byte [ ] followingKey ( int size , byte [ ] per ) {', 'return s ;', 'public byte [ ] encodeFloat ( float d ) throws IOException {', 'public boolean decodeBoolean ( byte [ ] a ) throws IOException {']","['encoder = ( Encoder ) getClass ( ) . getClassLoader ( ) . loadClass ( mapping . encoder ) . newInstance ( ) ;', 'ClassNotFoundException | AccumuloException | AccumuloSecurityException |', 'ClassNotFoundException | AccumuloException | AccumuloSecurityException e ) {', 'NoSuchMethodException | SecurityException | IllegalArgumentException |', 'InvocationTargetException e ) {', 'encoder = ( Encoder ) getClass ( ) . getClassLoader ( ) . loadClass ( mapping . encoder ) . getDeclaredConstructor ( ) . newInstance ( ) ;', 'import java . lang . reflect . InvocationTargetException ;', 'this . cluster . getConfiguration ( ) . getCodecRegistry ( ) . register ( ( TypeCodec < ? > ) Class . forName ( codec ) . newInstance ( ) ) ;', 'this . cluster . getConfiguration ( ) . getCodecRegistry ( ) . register ( ( TypeCodec < ? > ) Class . forName ( codec ) . getDeclaredConstructor ( ) . newInstance ( ) ) ;', 'return persistentClass . newInstance ( ) ;']","['import java . io . DataInputStream ;', 'public byte [ ] encodeLong ( long l , byte [ ] ret ) throws IOException {', 'dos . writeLong ( l ) ;', 'public byte [ ] encodeFloat ( float f , byte [ ] ret ) throws IOException {', 'public int decodeInt ( byte [ ] a ) throws IOException {', 'return Utils . lastPossibleKey ( size , er ) ;', 'public byte [ ] followingKey ( int size , byte [ ] per ) {', 'return s ;', 'public byte [ ] encodeFloat ( float d ) throws IOException {', 'public boolean decodeBoolean ( byte [ ] a ) throws IOException {']","['throw new UnsupportedOperationException ( ""Not supported yet . "" ) ;', 'LOG . info ( ""Table { } has been dropped from Ignite instance . "" ,', 'import java . util . Locale ;', '} catch ( SQLException ex ) {', 'ResultSet executeQuery = stmt . executeQuery ( messageFormat . format ( igniteMapping . getTableName ( ) ) ) ;', 'if ( connection = = null ) {', 'MessageFormat messageFormat = new MessageFormat ( ""select * from { 0 } limit 0"" , Locale . getDefault ( ) ) ;', '}', 'import java . util . logging . Level ;', 'LOG . info ( ""Table { } has been created for Ignite instance . "" ,']","['public List < String > getPrimaryKey ( ) {', 'public List < Column > getPrimaryKey ( ) {', 'public void setPrimaryKey ( List < String > primaryKey ) {', 'private List < Column > primaryKey ;', 'private List < String > primaryKey ;', 'public void setPrimaryKey ( List < Column > primaryKey ) {', 'List < String > prFields = new ArrayList < > ( ) ;', 'prFields . add ( new Column ( name , Column . FieldType . valueOf ( type ) ) ) ;', 'prFields . add ( aPrimaryKey . getAttributeValue ( ""column"" ) ) ;', 'String name = aPrimaryKey . getAttributeValue ( ""column"" ) ;']","['package org . apache . gora . ignite . query ;', 'import org . apache . gora . query . impl . QueryBase ;', 'public IgniteQuery ( DataStore < K , T > dataStore ) {', '}', 'import org . apache . gora . store . DataStore ;', 'super ( dataStore ) ;', 'import org . apache . gora . persistency . impl . PersistentBase ;', 'public class IgniteQuery < K , T extends PersistentBase > extends QueryBase < K , T > {', 'private Statement st ;', 'try {']","['private Statement st ;', 'try {', 'if ( st ! = null ) {', '} catch ( SQLException ex ) {', 'throw new IOException ( ex ) ;', '}', 'st . close ( ) ;', '@ SuppressWarnings ( ""unchecked"" )', 'properties . getProperty ( PROP HOST , ""localhost"" ) ,', 'public static IgniteParameters load ( Properties properties ) {']","['public IgniteQuery ( ) {', 'import org . apache . gora . query . Query ;', 'super ( null ) ;', '}', 'public void setResultSet ( ResultSet resultSet ) throws SQLException {', 'if ( resultSet . last ( ) ) {', 'if ( resultSet . last ( ) ) {', 'this . resultSet = resultSet ;', 'this . resultSet = resultSet ;', '}']","['columnDescriptor . setBlocksize ( Integer . parseInt ( blockSize ) ) ;', 'columnDescriptor = columnDescBuilder . build ( ) ;', 'columnDescriptor . setMaxVersions ( Integer . parseInt ( maxVersions ) ) ;', 'private Map < String , ColumnFamilyDescriptor > getOrCreateFamilies ( String tableName ) {', 'HTableDescriptor tableDescriptors = new HTableDescriptor ( tableName ) ;', 'public HBaseMapping ( TableDescriptor tableDescriptor ,', 'columnDescriptor . setTimeToLive ( Integer . parseInt ( timeToLive ) ) ;', 'return tableDescriptor . getTableName ( ) . getNameAsString ( ) ;', 'for ( HColumnDescriptor desc : families . values ( ) ) {', 'modifyableColFamilyDescriptor . setBloomFilterType ( BloomType . valueOf ( bloomFilter ) ) ;']","['return resultRecords . size ( ) ;', 'int intLimit = ( int ) this . limit ;', 'return intLimit > 0 & & totalSize > intLimit ? intLimit : totalSize ;', 'int totalSize = resultRecords . size ( ) ;', 'private static final String DOCKER CONTAINER NAME = ""aerospike / aerospike - server : latest"" ;', 'private static final String DOCKER CONTAINER NAME = ""aerospike / aerospike - server : 4 . 3 . 1 . 4"" ;', 'private static final String DOCKER CONTAINER NAME = ""aerospike / aerospike - server : latest"" ;', 'private static final String DOCKER CONTAINER NAME = ""aerospike / aerospike - server : 4 . 3 . 1 . 4"" ;', 'private static final String DOCKER CONTAINER NAME = ""aerospike / aerospike - server : latest"" ;', 'private static final String DOCKER CONTAINER NAME = ""aerospike / aerospike - server : 4 . 3 . 1 . 4"" ;']","['import org . apache . flink . util . Preconditions ;', 'Preconditions . checkNotNull ( classKeyOut ) ;', ', classKeyOut , classValueOut , job . getConfiguration ( ) ) ;', 'throws IOException {', 'this . classValueIn = classValueIn ;', 'import org . apache . flink . api . java . operators . DataSource ;', 'import org . apache . gora . mapreduce . GoraInputFormat ;', '}', 'Class < VALUEIN > classValueIn ) {', 'import org . apache . gora . store . DataStoreFactory ;']","['throw new IOException ( ""Expected some field defined in \'"" + avroSchema . getName ( ) + ""\' for pig schema type \'"" + DataType . genTypeToNameMap ( ) . get ( pigFieldSchema . getType ( ) + ""\'"" ) + ""\'"" , new Exception ( ""Union not satisfied"" ) ) ;', 'throw new IOException ( ""Expected some field defined in \'"" + avroSchema . getName ( ) + ""\' for pig schema type \'"" + DataType . genTypeToNameMap ( ) . get ( pigFieldSchema . getType ( ) ) + ""\'"" , new Exception ( ""Union not satisfied"" ) ) ;']","['final byte [ ] byteData = IOUtils . serialize ( writer , o ) ;', 'final byte [ ] byteData = IOUtils . serialize ( writer , o ) ;', 'public static enum CodecType {', 'public enum CodecType {', 'extends FileBackedDataStoreBase < K , T > implements Configurable {', 'extends FileBackedDataStoreBase < K , T > implements Configurable {', 'public class AvroStore < K , T extends PersistentBase >', 'public class AvroStore < K , T extends PersistentBase >', 'List < Field > fields = getSchema ( ) . getFields ( ) ;', '@ Override']","['int totalSize = scoreDocs . length ;', 'return ( int ) limit ;', '}', '} else {', 'if ( scoreDocs = = null ) {', 'int intLimit = ( int ) this . limit ;', 'return intLimit > 0 & & totalSize > intLimit ? intLimit : totalSize ;', '@ Override', 'public int size ( ) {']","['public IndexSearcher getSearcher ( ) { return searcher ; }', 'extends FileBackedDataStoreBase < K , T > implements Configurable {', 'result = convertAvroUnionToDocumentField ( sf , fieldSchema , o ) ;', 'org . apache . avro . Schema . Field field = fieldMap . get ( f ) ;', 'Schema . Type type0 = fieldSchema . getTypes ( ) . get ( 0 ) . getType ( ) ;', 'import java . util . Arrays ;', 'if ( !type0 . equals ( type1 )', 'break ;', 'extends FileBackedDataStoreBase < K , T > implements Configurable {', 'continue ;']","['fields = new String [ ] { pk } ;', '} else {', 'else {', 'store = ( LuceneStore < K , T > ) dataStore ;', '}', 'store = ( LuceneStore < K , T > ) dataStore ;', 'query . setFields ( fields ) ;', 'scoreDocs = searcher . search ( ( ( LuceneQuery < K , PersistentBase > ) query ) . toLuceneQuery ( ) ,', 'scoreDocs = searcher . search ( ( ( LuceneQuery < K , PersistentBase > ) query ) . toLuceneQuery ( ) , Ints . checkedCast ( limit ) ) . scoreDocs ;', 'return searcher ;']","['( DefaultHttpClient ) ( ( HttpSolrClient ) server ) . getHttpClient ( ) ,', 'this . server = new HttpSolrClient . Builder ( SolrClientUrl + "" / "" + mapping . getCoreName ( ) )', 'try {', 'serverSolrUrls . add ( SolrClientUrl + "" / "" + mapping . getCoreName ( ) ) ;', 'this . server = new HttpSolrClient ( SolrClientUrl + "" / "" + mapping . getCoreName ( ) ) ;', 'ModifiableSolrParams params = new ModifiableSolrParams ( ) ;', '}', '}', 'this . server = new ConcurrentUpdateSolrClient ( SolrClientUrl + "" / "" + mapping . getCoreName ( ) , 1000 , 10 ) ;', 'this . server = new LBHttpSolrClient . Builder ( )']","['if ( solrUrlElements . length > 1 ) {', 'if ( solrUrlElements . length > 0 ) {']","['. withThreadCount ( 10 )', 'private int queueSize = DEFAULT SOLR CONCURRENT CLIENT QUEUE SIZE ;', '. withQueueSize ( 1000 )', 'try {', 'protected static final int DEFAULT SOLR CONCURRENT CLIENT THREAD COUNT = 10 ;', 'private int threadCount = DEFAULT SOLR CONCURRENT CLIENT THREAD COUNT ;', 'protected static final String SOLR CONCURRENT CLIENT QUEUE SIZE PROPERTY', '}', '= ""solr . concurrentclient . thread count"" ;', 'DEFAULT SOLR CONCURRENT CLIENT THREAD COUNT ) ;']","['private static final String USAGE = ""FlinkWordCount < input data store > < output data store > "" ;', 'import org . apache . hadoop . io . Text ;', 'import org . apache . gora . examples . generated . TokenDatum ;', 'import org . apache . flink . api . java . tuple . Tuple2 ;', '@ Override', 'Configuration conf ) throws Exception {', 'ExecutionEnvironment env = ExecutionEnvironment . getExecutionEnvironment ( ) ;', 'int ret = flinkWordCount . run ( args ) ;', 'dataStoreClass = args [ 1 ] ;', 'if ( args . length > 0 ) {']","['splitSize = Integer . valueOf (', 'splitSize = Integer . parseInt ( properties . getProperty ( BUFFER LIMIT READ NAME , getConf ( ) . get ( BUFFER LIMIT READ NAME , String . valueOf ( BUFFER LIMIT READ VALUE ) ) ) ) ;', 'BUFFER LIMIT READ NAME ,', 'getConf ( ) . get (', 'Integer . toString ( BUFFER LIMIT READ VALUE ) ) ) ) ;', 'properties . getProperty ( BUFFER LIMIT READ NAME ,']","['inStore . close ( ) ;', 'outStore . close ( ) ;', 'import org . apache . flink . api . common . typeinfo . TypeInfo ;', '}', '@ TypeInfo ( PersistentTypeInfoFactory . class )', 'package org . apache . gora . flink ;', 'public interface PersistentType {', 'if ( config . hasGenericTypesDisabled ( ) ) {', 'super ( typeClass ) ;', 'import org . apache . flink . api . common . typeutils . TypeSerializer ;']","['MapReduceTestUtils . testFlinkWordCount ( cluster . getConf ( ) , webPageStore , tokenStore ) ;', '}', '@ Test', 'public void testFlinkWordCountFlink ( ) throws Exception {']","['Persistent , java . io . Externalizable {', 'Persistent {']","['get . setTimeStamp ( query . getStartTime ( ) ) ;', 'get . setTimestamp ( query . getStartTime ( ) ) ;', 'HTableDescriptor tableDescriptor = hbaseAdmin . getTableDescriptor ( hbaseTableName ) ;', 'import org . apache . hadoop . hbase . client . TableDescriptor ;', 'import org . apache . hadoop . hbase . HTableDescriptor ;', 'TableDescriptor tableDescriptor = hbaseAdmin . getDescriptor ( hbaseTableName ) ;']"

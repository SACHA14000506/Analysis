project,parent_hashes,commit_hash,author_name,author_email,author_date,author_date_unix_timestamp,commit_message,la,ld,fileschanged,nf,ns,nd,entropy,ndev,lt,nuc,age,exp,rexp,sexp,classification,fix,is_buggy_commit
cvc5,2f01f504b0c23fbf3bf57252df807079fcd6958e,e4e8d99ec19598c77144d3ffde2b5792db4430d3,Aina Niemetz,aina.niemetz@gmail.com,2019-01-02 20:07:43,1546430863,New C++ API: Add tests for mk-functions in solver object. (#2764),1019,358,"examples/api/combination-new.cpp, examples/api/datatypes-new.cpp, examples/api/linear_arith-new.cpp, examples/api/sets-new.cpp, examples/api/strings-new.cpp, src/api/cvc4cpp.cpp, src/api/cvc4cpp.h, src/api/cvc4cppkind.h, test/unit/api/solver_black.h, test/unit/api/term_black.h",10,2,3,1.6072109178382543,1,4876,10,161.7,0,0,0,0,0,0
cvc5,e4e8d99ec19598c77144d3ffde2b5792db4430d3,f179953e2fea6955650ccde8414f2ccd8ee6f63b,Alex Ozdemir,aozdemir@hmc.edu,2019-01-03 15:39:35,1546501175,"[LRA proof] Recording & Printing LRA Proofs (#2758)

* [LRA proof] Recording & Printing LRA Proofs

Now we use the ArithProofRecorder to record and later print arithmetic
proofs.

If an LRA lemma can be proven by a single farkas proof, then that is
done. Otherwise, we `trust` the lemma.

I haven't **really** enabled LRA proofs yet, so `--check-proofs` still
is a no-op for LRA.

To test, do
```
lfsccvc4 <(./bin/cvc4 --dump-proofs ../test/regress/regress0/lemmas/mode_cntrl.induction.smt | tail -n +2)
```

where `lfsccvc4` is an alias invoking `lfscc` with all the necessary
signatures. On my machine that is:

```
alias lfsccvc4=""/home/aozdemir/repos/LFSC/build/src/lfscc \
/home/aozdemir/repos/CVC4/proofs/signatures/sat.plf \
/home/aozdemir/repos/CVC4/proofs/signatures/smt.plf \
/home/aozdemir/repos/CVC4/proofs/signatures/lrat.plf \
/home/aozdemir/repos/CVC4/proofs/signatures/th_base.plf \
/home/aozdemir/repos/CVC4/proofs/signatures/th_bv.plf \
/home/aozdemir/repos/CVC4/proofs/signatures/th_bv_bitblast.plf \
/home/aozdemir/repos/CVC4/proofs/signatures/th_arrays.plf \
/home/aozdemir/repos/CVC4/proofs/signatures/th_int.plf \
/home/aozdemir/repos/CVC4/proofs/signatures/th_quant.plf \
/home/aozdemir/repos/CVC4/proofs/signatures/th_real.plf \
/home/aozdemir/repos/CVC4/proofs/signatures/th_real.plf""

```

* Added guards to proof recording

Also reverted some small, unintentional changes.

Also had to add printing for STRING_SUBSTR??

* Responding to Yoni's review

* SimpleFarkasProof examples

* Respond to Aina's comments

* Reorder Constraint declarations

* fix build

* Moved friend declaration in Constraint

* Trichotomy example

* Lift getNumChildren invocation in PLUS case

Credits to aina for spotting it.

* Clang-format",862,338,"src/printer/cvc/cvc_printer.cpp, src/proof/arith_proof.cpp, src/proof/arith_proof.h, src/proof/arith_proof_recorder.cpp, src/theory/arith/constraint.cpp, src/theory/arith/constraint.h, src/theory/arith/theory_arith_private.cpp",7,3,3,1.7761636087362214,2,8912,7,1714.0,0,0,0,0,1,0
cvc5,f179953e2fea6955650ccde8414f2ccd8ee6f63b,99278c017e5b198b416d4a82b0ea63f99d02e739,Andres Noetzli,andres.noetzli@gmail.com,2019-01-03 17:55:45,1546509345,"C++ API: Reintroduce zero-value mkBitVector method (#2770)

PR #2764 removed `Solver::mkBitVector(uint32_t)` (returns a bit-vector
of a given size with value zero), which made the build fail when SymFPU
was enabled because solver_black used it for SymFPU-enabled builds. This
commit simply adds a zero default argument to `mkBitVector(uint32_t,
uint64_t)` to allow users to create zero-valued bit-vectors without
explicitly specifying the value again. Additionally, the commit replaces
the use of the `CVC4_USE_SYMFPU` macro by a call to
`Configuration::isBuiltWithSymFPU()`, making sure that we can catch
compile-time errors regardless of configuration. Finally,
`Solver::mkConst(Kind, uint32_t, uint32_t, Term)` now checks whether
CVC4 has been compiled with SymFPU when creating a `CONST_FLOATINGPOINT`
and throws an exception otherwise (solver_black has been updated
correspondingly).",15,5,"src/api/cvc4cpp.cpp, src/api/cvc4cpp.h, test/unit/api/solver_black.h",3,2,2,1.278897902987479,3,3762,3,145.0,0,0,2,0,0,0
cvc5,99278c017e5b198b416d4a82b0ea63f99d02e739,d96815ffdd4ee0bf9422b7f0194a23a0a42462c3,Andres Noetzli,andres.noetzli@gmail.com,2019-01-03 14:48:18,1546498098,API/Smt2 parser: refactor termAtomic (#2674),519,125,"src/api/cvc4cpp.cpp, src/api/cvc4cpp.h, src/parser/parser.cpp, src/parser/parser.h, src/parser/smt2/Smt2.g, test/unit/api/CMakeLists.txt, test/unit/api/datatype_api_black.h, test/unit/api/solver_black.h",8,3,4,2.2392986088074447,3,4817,8,1295.625,3,0,4,0,0,0
cvc5,d96815ffdd4ee0bf9422b7f0194a23a0a42462c3,b06f9b64b55780de693ce9e1a38565f1e34cc5a0,Aina Niemetz,aina.niemetz@gmail.com,2019-01-03 19:29:43,1546514983,New C++ API: Add missing catch blocks for std::invalid_argument. (#2772),172,68,src/api/cvc4cpp.cpp,1,1,1,-0.0,3,2839,1,188.0,10,0,3,0,0,0
cvc5,b06f9b64b55780de693ce9e1a38565f1e34cc5a0,491a7c8d1889dfb848de31d5581d0c784167eaec,Alex Ozdemir,aozdemir@hmc.edu,2019-01-04 09:57:27,1546567047,"[LRAT] A C++ data structure for LRAT. (#2737)

* [LRAT] A C++ data structure for LRAT.

Added a data structure for storing (abstract) LRAT proofs.

The constructor will take a drat binary proof and convert it to LRAT
using drat-trim. However, this is unimplemented in this PR.

Subsequent PRs will add:
   * LFSC representation of LRAT
   * Bitvector Proofs based on LRAT
   * Enabled tests for those proofs

* Documenting LRAT constructors

* Apply suggestions from code review

Co-Authored-By: alex-ozdemir <aozdemir@hmc.edu>

* Responding to Andres' review

Consisting of
   * Naming nits
   * Closed fds
   * Better implementation of disjoint union for LratInstruction
   * DRAT -> LRAT conversion is no longer an LratProof constructor

* include reorder

* Update src/proof/lrat/lrat_proof.h

Co-Authored-By: alex-ozdemir <aozdemir@hmc.edu>

* Addressed Andres' comments

* ANonymous namespaces and name resolution?

* Remove inlines, fix i negation

Thanks Andres!

* Use `std::abs`

Credit to Andres

Co-Authored-By: alex-ozdemir <aozdemir@hmc.edu>

* Remove uneeded public",509,0,"src/CMakeLists.txt, src/proof/lrat/lrat_proof.cpp, src/proof/lrat/lrat_proof.h",3,2,2,0.9373728661308671,3,356,3,159.0,7,0,1,0,1,0
cvc5,491a7c8d1889dfb848de31d5581d0c784167eaec,7684686a1f75a90a3754bacc82ee50fb7b20d7c9,Andres Noetzli,andres.noetzli@gmail.com,2019-01-04 13:26:08,1546579568,"C++ API: Fix OOB read in unit test (#2774)

There were two typos in the unit tests that caused OOB accesses. Instead
of doing `d_solver.mkConst(CONST_BITVECTOR, std::string(""101""), 6)`, the
closing parenthesis was in the wrong place resulting in
`std::string(""101"", 6)`. The second argument to `std::string(const
char*, size_t)` says how many characters to copy and results in
undefined behavior if the number is greater than the length of the
string, thus the OOB access. The commit fixes the typo and removes one
of the tests because it should not actually fail (16 is an accepted
base).",1,3,test/unit/api/solver_black.h,1,1,1,-0.0,3,658,1,59.0,11,0,3,0,1,0
cvc5,7684686a1f75a90a3754bacc82ee50fb7b20d7c9,716626f2f41f51cda38834e5c9dc691b0c4fd664,Mathias Preiner,mathias.preiner@gmail.com,2019-01-04 20:21:10,1546604470,"cmake: Disable unit tests for static builds. (#2775)

--static now implies --no-unit-testing.

Fixes #2672.",7,9,CMakeLists.txt,1,0,1,-0.0,4,0,1,479.0,0,0,0,0,1,0
cvc5,716626f2f41f51cda38834e5c9dc691b0c4fd664,610952322417e3758f2b62300f618721c269b2b3,Alex Ozdemir,aozdemir@hmc.edu,2019-01-06 19:32:42,1546774362,"[DRAT] DRAT data structure  (#2767)

* Copied old DRAT data-structure files.

Next step: clean up the code, and adapt them to our current usage plans.

* Polished the DRAT class.

Notably, removed the idea of lazy-parsing, this is now just a DRAT
wrapper class.

More explicit about whether methods handle binary or text.

Better constructor patterns

* Added implementation of textual DRAT output

* reordered the DratInstruction structure.
* removed the public modifier from the above struct
* removed the operator << implementation for DratInstruction

* use emplace_back

* Addressing Yoni's first review

* Extracted ""write literal in DIMACS format"" idea as a function
* Replaced some spurious Debug streams with `os`. (they were left over
from an earlier refactor)
* Improved some documentation

* Removed aside about std::string

* Addressed Mathias' comments

Specifically
* SCREAMING_SNAKE_CASED enum variants.
* Extracted some common logic from two branches of a conditional.
* Cleaned out some undefined behavior from bit manipulation.

* Unit tests for binary DRAT parsing

* Added text output test

* s/white/black/ derp",529,0,"src/CMakeLists.txt, src/proof/drat/drat_proof.cpp, src/proof/drat/drat_proof.h, test/unit/CMakeLists.txt, test/unit/proof/CMakeLists.txt, test/unit/proof/drat_proof_black.h",6,3,4,1.6239525200033689,4,304,6,159.66666666666666,10,0,7,1,1,0
cvc5,610952322417e3758f2b62300f618721c269b2b3,1f6fb54967659ff2ee3f8c29a8d306499fcf1299,Aina Niemetz,aina.niemetz@gmail.com,2019-01-07 09:02:02,1546822922,New C++ API: Add missing getType() calls to kick off type checking. (#2773),23,8,"src/api/cvc4cpp.cpp, test/unit/api/solver_black.h",2,2,2,0.4586858162005403,4,3512,2,127.0,11,0,9,0,0,0
cvc5,1f6fb54967659ff2ee3f8c29a8d306499fcf1299,4ec1c04f28293386518582b0257345f84461350d,Alex Ozdemir,aozdemir@hmc.edu,2019-01-09 08:29:12,1546993752,"LFSC drat output (#2776)

* LFSC drat output

* Addressed Mathias' review

Addressing Mathias' review with the following changes:
* Added a few blank lines
* Added a unit test for LRAT output as LFSC",105,13,"src/proof/drat/drat_proof.cpp, src/proof/drat/drat_proof.h, test/unit/proof/drat_proof_black.h",3,2,2,1.3391422862699356,4,383,3,2.0,16,0,9,0,0,0
cvc5,4ec1c04f28293386518582b0257345f84461350d,517b6ba3bb029470bdb3f230188af1f398b14a91,Alex Ozdemir,aozdemir@hmc.edu,2019-01-09 09:18:29,1546996709,"Clause proof printing (#2779)

* Print LFSC proofs of CNF formulas

* Unit Test for clause printing

* Added SAT input proof printing unit test

* Fixed cnf_holds reference. Proofs of CMap_holds

There were references to clauses_hold, which should have been references
to cnf_holds.

Also added a function for printing a value of type CMap_holds, and a
test for this function.",209,0,"src/proof/lfsc_proof_printer.cpp, src/proof/lfsc_proof_printer.h, test/unit/proof/CMakeLists.txt, test/unit/proof/lfsc_proof_printer_black.h",4,2,2,1.4540945656900508,4,309,4,67.25,19,0,11,0,1,0
cvc5,517b6ba3bb029470bdb3f230188af1f398b14a91,1df477011ed5d35f222340580cba916af3ba73b5,Alex Ozdemir,aozdemir@hmc.edu,2019-01-09 19:19:22,1547032762,"[BV Proofs] Option for proof format (#2777)

We're building out a system whereby (eager) BV proofs can be emitted in
one of three formats. Let's add an option for specifying which!

My testing mechanism was not very thorough: I verified that I could specify each of the following option values:
* `er`
* `lrat`
* `drat`
* `help`

and that I could not provide random other option values.",91,0,"src/options/bv_bitblast_mode.cpp, src/options/bv_bitblast_mode.h, src/options/bv_options.toml, src/options/options_handler.cpp, src/options/options_handler.h",5,1,1,1.9707016536502748,4,2159,5,937.4,23,0,0,0,0,0
cvc5,1df477011ed5d35f222340580cba916af3ba73b5,fb145effd5bfe67090736969478ff54cf7f62984,Andrew Reynolds,andrew.j.reynolds@gmail.com,2019-01-09 15:39:07,1547019547,Do not rewrite 1-constructor sygus testers to true (#2780),27,1,"src/theory/datatypes/datatypes_rewriter.cpp, test/regress/CMakeLists.txt, test/regress/regress2/sygus/min_IC_1.sy",3,2,3,0.5896261811873141,5,858,3,293.0,0,0,1,0,0,0
cvc5,fb145effd5bfe67090736969478ff54cf7f62984,51cb061609e10ff68fb9db053d23ea9dd72ddea2,Aina Niemetz,aina.niemetz@gmail.com,2019-01-10 10:47:53,1547088473,New C++ API: Get rid of mkConst functions (simplify API). (#2783),155,535,"src/api/cvc4cpp.cpp, src/api/cvc4cpp.h, src/api/cvc4cppkind.h, src/parser/smt2/Smt2.g, test/unit/api/solver_black.h",5,3,3,1.9466192215812752,5,4157,5,765.8,13,0,14,0,0,0
cvc5,51cb061609e10ff68fb9db053d23ea9dd72ddea2,87f38648fe82b69b527a387bec9836455290cdba,Aina Niemetz,aina.niemetz@gmail.com,2019-01-11 12:06:03,1547179563,"New C++ API: Add unit tests for setInfo, setLogic, setOption. (#2782)",490,360,"src/api/cvc4cpp.cpp, src/api/cvc4cpp.h, src/smt/smt_engine.h, test/unit/api/solver_black.h",4,3,3,0.6647851118979415,5,4231,4,950.0,18,0,15,0,0,0
cvc5,87f38648fe82b69b527a387bec9836455290cdba,7635ca090c5866b0cc4eeb5beb279032f93bd654,Alex Ozdemir,aozdemir@hmc.edu,2019-01-11 12:48:13,1547182093,"Fixed linking against drat2er, and use drat2er (#2785)

* Fixed linking against drat2er/drat-trim

We have machinery for linking against drat2er. However, this machinery
didn't quite work because libdrat2er.a contains an (undefined) reference
to `run_drat_trim` from libdrat-trim.a.

Thus, when linking against libdrat2er.a, we also need to link against
libdrat-trim.a.

I made this change, and then tested it by actually calling a function
from the drat2er library (CheckAndConvertToLRAT) which relies on
`run_drat_trim`. Since this invocation compiles, we know that the
linking is working properly now.

* Combined the two libs, per Mathias

* drat2er configured gaurds",22,5,"cmake/FindDrat2Er.cmake, src/proof/lrat/lrat_proof.cpp",2,2,2,0.9910760598382222,5,282,2,15.0,28,0,5,0,1,0
cvc5,7635ca090c5866b0cc4eeb5beb279032f93bd654,c652449ac9f4a54fc8f37796f0bff3960434cf40,Alex Ozdemir,aozdemir@hmc.edu,2019-01-11 16:04:56,1547193896,"LratInstruction inheritance (#2784)

While implementing and testing LRAT proof output as LFSC, I discovered
that my implementation of LratInstruction as a tagged union was subtly
broken for reasons related to move/copy assignment/constructors.

While I could have figured out how to fix it, I decided to stop fighting
the system and use inheritance.

This PR will be followed by one using the inheritance-based
LratInstruction to implement output to LFSC.",83,139,"src/proof/lrat/lrat_proof.cpp, src/proof/lrat/lrat_proof.h",2,1,1,0.9137253152370278,5,300,2,6.0,30,0,6,0,1,0
cvc5,c652449ac9f4a54fc8f37796f0bff3960434cf40,300560dda47178cae18f5f4ad2edb381eabddb30,Alex Ozdemir,aozdemir@hmc.edu,2019-01-13 13:21:24,1547356884,"LFSC LRAT Output (#2787)

* LFSC ouput & unit test

* Renamed lrat unit test file

* s/DRAT/LRAT/

Thanks Andres!

Co-Authored-By: alex-ozdemir <aozdemir@hmc.edu>

* Addressed Andres' comments

1. Extracted a filter whitespace function.
2. Added @param annotations.

* Addressing Yoni's comments

Tweaked the test method name for LRAT output as LFSC
Added assertions for verifying that clause index lists are sorted during
LFSC LRAT output.",221,0,"src/proof/lrat/lrat_proof.cpp, src/proof/lrat/lrat_proof.h, test/unit/proof/CMakeLists.txt, test/unit/proof/lrat_proof_black.h",4,2,2,1.2950641379142898,5,437,4,5.25,32,0,17,0,0,0
cvc5,300560dda47178cae18f5f4ad2edb381eabddb30,23374b9d7fe9363165c99fbbddfd7591302a3431,Alex Ozdemir,aozdemir@hmc.edu,2019-01-14 10:53:31,1547434411,"ClausalBitvectorProof (#2786)

* [DRAT] ClausalBitvectorProof

Created a class, `ClausalBitvectorProof`, which represents a bitvector
proof of UNSAT using an underlying clausal technique (DRAT, LRAT, etc)

It fits into the `BitvectorProof` class hierarchy like this:

```
              BitvectorProof
              /            \
             /              \
ClausalBitvectorProof  ResolutionBitvectorProof
```

This change is a painful one because all of the following BV subsystems
referenced ResolutionBitvectorProof (subsequently RBVP) or
BitvectorProof (subsequently BVP):
   * CnfStream
   * SatSolver (specifically the BvSatSolver)
   * CnfProof
   * TheoryProof
   * TheoryBV
   * Both bitblasters

And in particular, ResolutionBitvectorProof, the CnfStream, and the
SatSolvers were tightly coupled.

This means that references to and interactions with (R)BVP were
pervasive.

Nevertheless, an SMT developer must persist.

The change summary:
  * Create a subclass of BVP, called ClausalBitvectorProof, which has
    most methods stubbed out.
  * Make a some modifications to BVP and ResolutionBitvectorProof as the
    natural division of labor between the different classes becomes
    clear.
  * Go through all the components in the first list and try to figure
    out which kind of BVP they should **actually** be interacting with,
    and how. Make tweaks accordingly.
  * Add a hook from CryptoMinisat which pipes the produced DRAT proof
    into the new ClausalBitvectorProof.
  * Add a debug statement to ClausalBitvectorProof which parses and
    prints that DRAT proof, for testing purposes.

Test:
  * `make check` to verify that we didn't break any old stuff, including
    lazy BB, and eager BB when using bvminisat.
  * `cvc4 --dump-proofs --bv-sat-solver=cryptominisat --bitblast=eager
  -d bv::clausal test/regress/regress0/bv/ackermann2.smt2`, and see that
     1. It crashed with ""Unimplemented""
     2. Right before that it prints out the (textual) DRAT proof.

* Remove 2 unneeded methods

* Missed a rename

* Typos

Thanks Andres!

Co-Authored-By: alex-ozdemir <aozdemir@hmc.edu>

* Address Andres comments

* Reorder members of TBitblaster",510,151,"src/CMakeLists.txt, src/proof/bitvector_proof.cpp, src/proof/bitvector_proof.h, src/proof/clausal_bitvector_proof.cpp, src/proof/clausal_bitvector_proof.h, src/proof/cnf_proof.cpp, src/proof/cnf_proof.h, src/proof/resolution_bitvector_proof.cpp, src/proof/resolution_bitvector_proof.h, src/proof/theory_proof.cpp, src/prop/bvminisat/bvminisat.cpp, src/prop/bvminisat/bvminisat.h, src/prop/cnf_stream.cpp, src/prop/cryptominisat.cpp, src/prop/cryptominisat.h, src/prop/sat_solver.h, src/theory/bv/bitblast/bitblaster.h, src/theory/bv/bitblast/eager_bitblaster.cpp, src/theory/bv/bitblast/eager_bitblaster.h, src/theory/bv/bitblast/lazy_bitblaster.cpp, src/theory/bv/bitblast/lazy_bitblaster.h, src/theory/bv/bv_eager_solver.cpp, src/theory/bv/bv_eager_solver.h, src/theory/bv/bv_subtheory.h, src/theory/bv/bv_subtheory_bitblast.cpp, src/theory/bv/bv_subtheory_bitblast.h, src/theory/bv/theory_bv.cpp, src/theory/bv/theory_bv.h",28,4,6,3.8901546497831982,5,7161,28,1461.607142857143,36,0,12,1,1,0
cvc5,23374b9d7fe9363165c99fbbddfd7591302a3431,448ee080458373fbd3aabe97396101d98d68f0c0,Andrew Reynolds,andrew.j.reynolds@gmail.com,2019-01-14 19:12:59,1547464379,Only check disequal terms with sygus-rr-verify (#2793),55,48,src/theory/datatypes/datatypes_sygus.cpp,1,1,1,-0.0,5,1571,1,1454.0,3,0,3,0,0,0
cvc5,448ee080458373fbd3aabe97396101d98d68f0c0,da504025a3a77e9a3201af33ee6f96f937802807,Andrew Reynolds,andrew.j.reynolds@gmail.com,2019-01-15 10:54:02,1547520842,Fix unsound double abs rewrite rule for FP (#2792),28,3,"src/theory/fp/theory_fp_rewriter.cpp, test/regress/CMakeLists.txt, test/regress/regress0/fp/abs-unsound.smt2, test/regress/regress0/fp/abs-unsound2.smt2",4,2,3,1.8215383158393945,5,934,4,497.75,4,0,5,0,1,0
cvc5,da504025a3a77e9a3201af33ee6f96f937802807,4a38be3b9ac133655602a989f1136cd24ed89bc6,Andres Noetzli,andres.noetzli@gmail.com,2019-01-15 10:28:47,1547519327,"Strings: Add option to change loop process mode (#2794)

This commit adds an option `--strings-process-loop-mode` that allows
finer-grained control over CVC4 processes looping word equation. In
particular, performing normal loop breaking sometimes leads to worse
performance. The ""simple"" mode disables that inference.",260,34,"src/options/CMakeLists.txt, src/options/options_handler.cpp, src/options/options_handler.h, src/options/strings_options.toml, src/options/strings_process_loop_mode.cpp, src/options/strings_process_loop_mode.h, src/smt/smt_engine.cpp, src/theory/strings/theory_strings.cpp, src/theory/strings/theory_strings.h",9,3,3,2.753855184695108,5,11316,9,1132.3333333333333,12,0,7,0,0,0
cvc5,4a38be3b9ac133655602a989f1136cd24ed89bc6,3018455b424fc61e140be665a813cb6a8fac6320,Andres Noetzli,andres.noetzli@gmail.com,2019-01-15 19:14:06,1547550846,"CMake: Fix search for static libraries (#2798)

When configuring CVC4 with `--static`, we change
`CMAKE_FIND_LIBRARY_SUFFIXES` to prefer static libraries (`*.a`) over
shared ones. However, instead of prepending `.a` to the list of
`CMAKE_FIND_LIBRARY_SUFFIXES`, we created a single element with `.a` and
the previous list.

Output of `message(""${CMAKE_FIND_LIBRARY_SUFFIXES}"")` before the change:

```
.a .tbd;.dylib;.so;.a
```

After the change:

```
.a;.tbd;.dylib;.so;.a
```

On macOS, both the static and the shared library of GMP are available
(when installed via homebrew) and before the change, CMake would pick the
shared library when compiling with `--static --no-static-binary`. This
commit fixes that issue.",1,1,CMakeLists.txt,1,0,1,-0.0,5,0,1,490.0,21,0,0,0,1,0
cvc5,3018455b424fc61e140be665a813cb6a8fac6320,534a9b73dae2c0a3b6040f6a51f824ca69850c4b,Andrew Reynolds,andrew.j.reynolds@gmail.com,2019-01-15 23:15:27,1547565327,Fix constant contains ITOS rewrite (#2799),16,4,"src/theory/strings/theory_strings_rewriter.cpp, test/regress/CMakeLists.txt, test/regress/regress0/strings/itos-entail.smt2, test/regress/regress0/strings/rewrites-v2.smt2",4,2,3,1.543751954420502,5,4288,4,718.75,8,0,8,0,1,0
cvc5,534a9b73dae2c0a3b6040f6a51f824ca69850c4b,1e6293daa3f6d61c9035e22ee76448b46dd83ce8,Alex Ozdemir,aozdemir@hmc.edu,2019-01-15 23:55:29,1547567729,"Extended Resolution Signature (#2788)

* Extended Resolution Signature

While extended resolution is a fairly general technique, the paper
""Extended Resolution Simulates DRAT"" / the drat2er uses exactly one new
type of rule: definitions of the form

    new <=> old v (~l_1 ^ ~l_2 ^ ... ^ ~l_n)

This PR adds axioms supporting this kind of definition, and adds a test
making use of those new axioms. The axioms support the following ideas:

   1. Introducing a **fresh** variable, defined in the form above
   2. Clausifying that definition to produce proofs of $$ n + 2 $$ new
      clauses in the form of two clauses, and a cnf with $$ n $$ clauses
   3. An axiom for unrolling the proof of the cnf into proofs of the
      original clauses.

* Addressing Yoni's comments

1. Added a new (trivial) test
2. Improved a bunch of documentation

* Update proofs/signatures/er.plf

Co-Authored-By: alex-ozdemir <aozdemir@hmc.edu>

* Removed references to RATs from the signature

There are still a few references in the header comment.

* Aside on continuations

* Scrap the elision annotations",287,45,"proofs/signatures/drat.plf, proofs/signatures/er.plf, proofs/signatures/er_test.plf, proofs/signatures/lrat.plf, proofs/signatures/sat.plf",5,1,1,1.9552798969984198,5,0,5,398.2,64,0,0,0,0,0
cvc5,1e6293daa3f6d61c9035e22ee76448b46dd83ce8,0287acb1180db269c5dd0fe0dad8f2fa925ba0b9,Alex Ozdemir,aozdemir@hmc.edu,2019-01-16 09:52:42,1547603562,"Bugfix: LFSC clause equality (#2801)

* Bugfix: LFSC clause equality

My implementation of clause equality had an undocumented assumption that
the clauses didn't have any duplicate literals. Now that assumption is
gone, and the tests suite has been expanded.

* Added an empty clause test

* Typo fix: Yoni

Co-Authored-By: alex-ozdemir <aozdemir@hmc.edu>

* Address Yoni's comments

* Remove a duplicate clause_eq test.
* Add an ordering clause_eq test.
* Improve the documentation of clause_eq.",162,27,"proofs/signatures/drat.plf, proofs/signatures/drat_test.plf, proofs/signatures/lrat.plf",3,1,1,1.2105170753969876,5,0,3,31.666666666666668,69,0,1,1,1,0
cvc5,0287acb1180db269c5dd0fe0dad8f2fa925ba0b9,60b5ac4c6488014feb4820a98e663cc5fdbad5c1,Andres Noetzli,andres.noetzli@gmail.com,2019-01-16 12:27:05,1547612825,Update NEWS file (#2804),6,0,NEWS,1,0,1,-0.0,5,0,1,3361.0,22,0,0,0,0,0
cvc5,60b5ac4c6488014feb4820a98e663cc5fdbad5c1,78d7485639cdf0769c13606b8ad3f5e9455153f1,Andres Noetzli,andres.noetzli@gmail.com,2019-01-16 16:38:38,1547627918,"Add option to print BV constants in binary (#2805)

This commit adds the option `--bv-print-consts-in-binary` to print
bit-vector constants in binary, e.g. `#b0001`, instead of decimal, e.g.
`(_ bv1 4)`). The option is on by default to match the behavior of Z3
and Boolector.",37,5,"src/options/bv_options.toml, src/printer/smt2/smt2_printer.cpp, test/regress/CMakeLists.txt, test/regress/regress0/printer/bv_consts_bin.smt2, test/regress/regress0/printer/bv_consts_dec.smt2",5,3,4,2.3021339470844224,5,1852,5,754.4,23,0,6,0,0,0
cvc5,78d7485639cdf0769c13606b8ad3f5e9455153f1,e9bfbb2f666c8cb4cf783d8ebd398fa9304bb5b7,Andres Noetzli,andres.noetzli@gmail.com,2019-01-18 00:43:53,1547743433,"Fix ABC build (#2808)

PR #2786 introduced a pure virtual method `TBitblaster::getSatSolver()`.
`AigBitblaster` was missing the implementation of that method. This
commit adds an implementation that simply returns the underlying SAT
solver. Note: The method is currently only used for proofs and CVC4 does
not support proofs in combination with ABC. To make this explicit, the
commit also adds a check in `SmtEngine::setDefaults()` that makes sure
that we are not trying to produce proofs with `--bitblast-aig` (before
the commit, we just crashed with an assertion failure/null pointer
dereference).",16,1,"src/smt/smt_engine.cpp, src/theory/bv/bitblast/aig_bitblaster.cpp, src/theory/bv/bitblast/aig_bitblaster.h, src/theory/bv/bitblast/bitblaster.h",4,2,2,1.6457113704075783,5,4778,4,1051.75,28,0,9,0,1,0
cvc5,e9bfbb2f666c8cb4cf783d8ebd398fa9304bb5b7,7a5e007ea530c97c5f3885958f5d018e350013a7,Andres Noetzli,andres.noetzli@gmail.com,2019-01-18 05:59:09,1547762349,Strings: Introduce checkEntailContains() (#2809),76,63,"src/theory/strings/theory_strings_rewriter.cpp, src/theory/strings/theory_strings_rewriter.h",2,1,1,0.44812821878952414,5,4395,2,1954.0,32,0,8,0,0,0
cvc5,7a5e007ea530c97c5f3885958f5d018e350013a7,8b494ee2e856a0ddb5ea60a1a39340816ba0fc29,Alex Ozdemir,aozdemir@hmc.edu,2019-01-18 11:10:26,1547781026,"Extract DIMACS Printing (#2800)

Creating LRAT proofs reuqires writing SAT problems in the DIMACS format.
Before this code was in the LRAT class.

However, since creating ER proofs will also require writing DIMACS, I
decided to extract it.

At the same time I realized that my prior representation of used clauses
was unnecessarily poor. I had chosen it to align with
`CnfProof::collectAtomsForClauses`, but the format is really bad (it
requires extra allocations & manual memory management), and I discovered
that the aforementioned method is super simple, so I'm moving to a
better format.",151,52,"src/CMakeLists.txt, src/proof/dimacs_printer.cpp, src/proof/dimacs_printer.h, src/proof/lrat/lrat_proof.cpp, src/proof/lrat/lrat_proof.h",5,2,3,1.7234529257704714,5,391,5,103.4,72,0,12,0,0,0
cvc5,8b494ee2e856a0ddb5ea60a1a39340816ba0fc29,b4c9b783384fb05a3e71ff535b5f790e79c28a94,Andres Noetzli,andres.noetzli@gmail.com,2019-01-19 03:34:43,1547840083,"Fix missing-override warning (#2811)

`TLazyBitblaster::setProofLog()` was defined even though the method was
not virtual before PR #2808 and `TBitblaster` was implementing the same
method. After that PR, which made the method virtual, GCC complained
about a missing `override` keyword for `setProofLog()`. However, the
method should have been removed (see
[comment](https://github.com/CVC4/CVC4/pull/2786#discussion_r247299617)).
This commit removes the function definition.",0,9,"src/theory/bv/bitblast/lazy_bitblaster.cpp, src/theory/bv/bitblast/lazy_bitblaster.h",2,1,1,0.5032583347756457,5,547,2,290.0,34,0,9,0,1,0
cvc5,b4c9b783384fb05a3e71ff535b5f790e79c28a94,f7ebbd30653cffa3412b914f5813302bd2101578,Aina Niemetz,aina.niemetz@gmail.com,2019-01-22 10:55:13,1548125713,New README (markdown). (#2797),138,102,README.md,2,0,1,0.9837082626231859,5,0,2,-1.0,22,0,0,0,0,0
cvc5,f7ebbd30653cffa3412b914f5813302bd2101578,af1714ddc446fe6e239852374f5f628302980488,Andrew Reynolds,andrew.j.reynolds@gmail.com,2019-01-22 14:43:17,1548139397,Fix parsing of overloaded parametric datatype selectors (#2819),36,2,"src/expr/symbol_table.cpp, test/regress/CMakeLists.txt, test/regress/regress0/datatypes/repeated-selectors-2769.smt2",3,2,3,0.9952632106202361,5,495,3,951.3333333333334,12,0,4,0,1,0
cvc5,af1714ddc446fe6e239852374f5f628302980488,e5f4e2c0c1dc79f9940ddb4fcdbf04d6cffe98f5,Andrew Reynolds,andrew.j.reynolds@gmail.com,2019-01-22 15:48:48,1548143328,Fix tuple and record CVC printing (#2818),52,4,"src/printer/cvc/cvc_printer.cpp, test/regress/CMakeLists.txt, test/regress/regress0/datatypes/tree-get-value.cvc, test/regress/regress0/printer/tuples_and_records.cvc",4,2,4,1.6557591426557532,5,1438,4,871.0,15,0,7,0,1,0
cvc5,e5f4e2c0c1dc79f9940ddb4fcdbf04d6cffe98f5,03e5936c2e265a85d5a98d8cd4c4015da3b508f2,Andres Noetzli,andres.noetzli@gmail.com,2019-01-22 18:47:08,1548154028,"Strings: Strengthen multiset reasoning (#2817)

This commit introduces three helper methods for performing multiset
reasoning: an entailment check whether a term is always a strict subset
of another term in the multiset domain (`checkEntailMultisetSubset()`),
a check whether a string term is always homogeneous
(`checkEntailHomogeneousString()`), and an overapproximation for the
multiset domain (`getMultisetApproximation()`). It also adds unit tests
related to multiset reasoning.",355,160,"src/theory/strings/theory_strings_rewriter.cpp, src/theory/strings/theory_strings_rewriter.h, test/unit/theory/theory_strings_rewriter_white.h",3,2,2,1.146519775356036,5,5202,3,1405.6666666666667,36,0,21,0,0,0
cvc5,03e5936c2e265a85d5a98d8cd4c4015da3b508f2,495787793b07a05f384824c92eef4e26d92228fc,Andres Noetzli,andres.noetzli@gmail.com,2019-01-23 10:08:11,1548209291,"Avoid using ProofManager in non-proof CMS build (#2814)

PR #2786 changed `CryptoMinisatSolver::addClause()` to register clauses
with the bit-vector proof if proofs are turned on. The new code
requested the `ProofManager` even when proofs were turned off, which
made the `eager-inc-cryptominisat.smt2` regression and our nightlies
fail. This commit guards the access to the `ProofManager`, restoring the
semantics of the original code when proofs are turned off.",16,6,src/prop/cryptominisat.cpp,1,1,1,-0.0,5,180,1,972.0,39,0,1,0,0,0
cvc5,495787793b07a05f384824c92eef4e26d92228fc,467ef8692009f440bda74083d476131ff1e88b51,Alex Ozdemir,aozdemir@hmc.edu,2019-01-24 11:45:12,1548301512,"Extended DRAT signature to operational DRAT (#2815)

* Extended DRAT signature to operational DRAT

The DRAT signature now supports both operational and specified DRAT.
That is, either kind of proof will be accepted.

The goal of this implementation of operational DRAT was to re-use as
much of the specified DRAT machinery as possible. However, by writing a
separate operational signature, we could make it much more efficient
(after all, operational DRAT came about because of a push for efficient
cheking).

You can run the new AND old DRAT tests by running

```
lfscc sat.plf smt.plf lrat.plf drat.plf drat_test.plf
```

* Apply suggestions from code review (Yoni)

Co-Authored-By: alex-ozdemir <aozdemir@hmc.edu>",293,4,"proofs/signatures/drat.plf, proofs/signatures/drat_test.plf",2,1,1,0.9995992551590469,5,0,2,38.0,77,0,2,0,0,0
cvc5,467ef8692009f440bda74083d476131ff1e88b51,1eaf6cf987fa1452528dc0598ca7235be735ba3b,Andres Noetzli,andres.noetzli@gmail.com,2019-01-29 10:17:06,1548728226,"Strings: Remove redundant replace rewrite (#2822)

Pulling the first constant string from a replace if there is no overlap
with the search term is subsumed by the rewrite using
`stripConstantEndpoints()`.",14,13,"src/theory/strings/theory_strings_rewriter.cpp, test/unit/theory/theory_strings_rewriter_white.h",2,2,2,0.9990102708804813,5,5087,2,1136.5,40,0,23,0,0,0
cvc5,1eaf6cf987fa1452528dc0598ca7235be735ba3b,d4870775e67c7878c32c17f10b1217c14dc5869b,Aina Niemetz,aina.niemetz@gmail.com,2019-01-29 11:47:04,1548733624,"New C++ API: Fix checks for mkTerm. (#2820)

This required fixing the OpTerm handling for mkTerm functions in the API.",301,139,"examples/api/bitvectors-new.cpp, examples/api/datatypes-new.cpp, examples/api/extract-new.cpp, src/api/cvc4cpp.cpp, src/api/cvc4cpp.h, src/api/cvc4cppkind.h, src/expr/expr_manager_template.cpp, test/unit/api/solver_black.h",8,3,4,2.3790754429481877,5,5444,8,574.625,24,0,21,0,1,0
cvc5,d4870775e67c7878c32c17f10b1217c14dc5869b,546bf68640875107739011cff1f704f0d3e38f82,Andres Noetzli,andres.noetzli@gmail.com,2019-01-29 14:05:47,1548741947,Fix warning due to catching polymorphic exceptions (#2821),3,3,test/unit/proof/drat_proof_black.h,1,1,1,-0.0,5,131,1,22.0,42,0,14,0,1,0
cvc5,546bf68640875107739011cff1f704f0d3e38f82,e374c7fbde3b3a5148b6e8fc302277b6e786965e,Andres Noetzli,andres.noetzli@gmail.com,2019-02-02 00:36:42,1549039002,"Fix corner case in stripConstantEndpoints (#2824)

`stripConstantEndpoints()` was returning `true` when the first argument
was a list only containing an empty string, which could lead to rewrite
loops. This commit checks for that case and adds a unit test for it.",23,0,"src/theory/strings/theory_strings_rewriter.cpp, test/unit/theory/theory_strings_rewriter_white.h",2,2,2,0.828055725379504,5,5105,2,1140.5,43,0,27,0,1,0
cvc5,e374c7fbde3b3a5148b6e8fc302277b6e786965e,b396d78982e109dc642611d32578bbca82b210cd,Andres Noetzli,andres.noetzli@gmail.com,2019-02-03 16:17:37,1549181857,Add rewrite for contains + const strings replace (#2828),72,2,"src/theory/strings/theory_strings_rewriter.cpp, src/util/regexp.h, test/unit/theory/theory_strings_rewriter_white.h",3,3,3,1.4192191527004643,5,5221,3,1417.6666666666667,45,0,29,0,0,0
cvc5,b396d78982e109dc642611d32578bbca82b210cd,104b28b4c16b90a819c8f79d60f94a42fb0c0261,Andres Noetzli,andres.noetzli@gmail.com,2019-02-05 10:09:15,1549332555,Make stripConstantEndpoints() less aggressive (#2830),31,21,"src/theory/strings/theory_strings_rewriter.cpp, test/unit/theory/theory_strings_rewriter_white.h",2,2,2,0.9612366047228759,5,5145,2,1143.5,48,0,31,0,0,0
cvc5,104b28b4c16b90a819c8f79d60f94a42fb0c0261,c86e0178bfaa662b6586d866c953a56f81cefe51,Aina Niemetz,aina.niemetz@gmail.com,2019-02-11 09:04:54,1549847094,New C++ API: Unit tests for declare* functions. (#2831),70,2,"src/api/cvc4cpp.cpp, src/api/cvc4cpp.h, test/unit/api/solver_black.h",3,2,2,1.4005931615282483,5,4157,3,184.0,32,0,26,0,0,0
cvc5,c86e0178bfaa662b6586d866c953a56f81cefe51,6b07347b4964ff79dc6a17f22ab4be29aa489196,Andres Noetzli,andres.noetzli@gmail.com,2019-02-12 11:30:59,1549942259,"Delete temporary proof files when aborting CVC4 (#2834)

CVC4 was not deleting temporary proof files when crashing or being
terminated externally. This commit uses an early `unlink()` to remove
the files as soon as CVC4 terminates.",8,18,src/smt/smt_engine_check_proof.cpp,1,1,1,-0.0,5,66,1,1887.0,50,0,3,0,0,0
cvc5,6b07347b4964ff79dc6a17f22ab4be29aa489196,6eb492f636d2c950a6064389dfba297baff8e08e,Aina Niemetz,aina.niemetz@gmail.com,2019-02-12 20:16:24,1549973784,New C++ API: Remove redundant mkTerm function. (#2836),0,29,"src/api/cvc4cpp.cpp, src/api/cvc4cpp.h, src/api/cvc4cppkind.h, test/unit/api/solver_black.h",4,2,2,1.6092568775908622,5,4431,4,196.0,35,0,28,0,0,0
cvc5,6eb492f636d2c950a6064389dfba297baff8e08e,83cd4823d6bf8e0c8e7d82afbfac824744491762,Andres Noetzli,andres.noetzli@gmail.com,2019-02-13 12:18:09,1550031489,Rewrite simple regexp pattern to str.contains (#2827),79,5,"src/theory/strings/theory_strings_rewriter.cpp, test/unit/theory/theory_strings_rewriter_white.h",2,2,2,0.9934472383802027,5,5200,2,1151.5,51,0,35,0,0,0
cvc5,83cd4823d6bf8e0c8e7d82afbfac824744491762,549fe66e9cd274784edac47203b832ff7797834f,Aina Niemetz,aina.niemetz@gmail.com,2019-02-13 12:52:17,1550033537,New C++ API: Remove redundant declareFun function. (#2837),13,31,"examples/api/datatypes-new.cpp, src/api/cvc4cpp.cpp, src/api/cvc4cpp.h, test/unit/api/solver_black.h",4,2,3,1.6163009358357205,5,4235,4,197.0,39,0,31,0,0,0
cvc5,549fe66e9cd274784edac47203b832ff7797834f,879a5f6b5e0c259571e7dbe0d7633a19e982148d,Andres Noetzli,andres.noetzli@gmail.com,2019-02-26 22:46:04,1551192364,"ClangFormat: Disable DerivePointerAlignment (#2842)

The option `DerivePointerAlignment` tries to automatically determine the
pointer alignment used by the input. In our case, we would eventually
like the code base to be consistent throughtout, so this commit disables
that option.",1,1,.clang-format,1,0,1,-0.0,5,0,1,890.0,53,0,0,0,0,0
cvc5,879a5f6b5e0c259571e7dbe0d7633a19e982148d,933cd31e994148cd457cb110734aa23423777fec,Andres Noetzli,andres.noetzli@gmail.com,2019-02-27 00:49:59,1551199799,"Use string stream for proofs instead of tmp files (#2841)

This commit changes CVC4 to use a string stream instead of a temporary
files for proof checking. Note: This change requires a version of LFSC
that supports checking streams (see
https://github.com/CVC4/LFSC/pull/14).

Tested: `make check` passed, changing `holds` to `xholds` in the proof
produced by proof_manager.cpp makes the proofs fail.",3,41,src/smt/smt_engine_check_proof.cpp,1,1,1,-0.0,5,40,1,1901.0,54,0,4,0,0,0
cvc5,933cd31e994148cd457cb110734aa23423777fec,f93a68fdf2b62a40dd74bdb04aafb60ea7f1a69a,Alex Ozdemir,aozdemir@hmc.edu,2019-02-28 21:54:08,1551362048,"ErProof class with LFSC output (#2812)

* ErProof class with LFSC output

* Created a TraceCheckProof class
   * parsable from text
* Created an ErProof class
   * constructible from a TraceCheckProof
   * writable as LFSC
* A bunch of unit tests

* Reponded to Mathias's first set of comments.

Credits to Mathias for many of the fixes!

* Responed to Andres's first set, fixed tests

I accidentally deleted a ""!"" last time, causing stuff to fail.

* Use Configuration::isAssertionBuild

* Clarified comment

* Responded to Andres's 2nd review

* Gaurding against a memory error.
* Renaming a file.
* Aggressively unlinking temporary files.",1035,19,"src/CMakeLists.txt, src/proof/er/er_proof.cpp, src/proof/er/er_proof.h, test/unit/proof/CMakeLists.txt, test/unit/proof/er_proof_black.h, test/unit/proof/lrat_proof_black.h, test/unit/proof/utils.h",7,3,3,1.817911556639068,5,755,7,89.57142857142857,79,0,36,0,1,0
cvc5,f93a68fdf2b62a40dd74bdb04aafb60ea7f1a69a,ec8ea8a9c993435c4c5e671b1beea45ac088de64,Andrew Reynolds,andrew.j.reynolds@gmail.com,2019-03-12 14:43:42,1552373022,Move tuple/record update elimination from ppRewrite to expandDefinition (#2839),123,78,"src/theory/datatypes/theory_datatypes.cpp, test/regress/CMakeLists.txt, test/regress/regress0/datatypes/issue2838.cvc",3,2,3,0.4093277719008177,5,1951,3,1143.0,19,0,22,0,0,0
cvc5,ec8ea8a9c993435c4c5e671b1beea45ac088de64,093d5ffdfa5c1656309da6b9cbdfbbf28574a8a0,Andrew Reynolds,andrew.j.reynolds@gmail.com,2019-03-12 15:18:30,1552375110,Add option --sygus-rr-synth-rec for considering all grammar types recursively (#2270),116,42,"src/options/quantifiers_options.toml, src/theory/quantifiers/candidate_rewrite_database.cpp, src/theory/quantifiers/candidate_rewrite_database.h, src/theory/quantifiers/candidate_rewrite_filter.cpp, src/theory/quantifiers/candidate_rewrite_filter.h, src/theory/quantifiers/expr_miner_manager.cpp, src/theory/quantifiers/sygus_sampler.cpp, src/theory/quantifiers/sygus_sampler.h",8,2,2,2.6862651174905037,5,1651,8,310.0,22,0,20,0,0,0
cvc5,093d5ffdfa5c1656309da6b9cbdfbbf28574a8a0,1b8ee921760d15492c0c0492ce6a4da07186699a,Mathias Preiner,mathias.preiner@gmail.com,2019-03-12 20:09:35,1552392575,"Fix public headers for make install. (#2856)

This commit fixes make install, which previously copied all public header files to ${CMAKE_INSTALL_PREFIX}/ instead of ${CMAKE_INSTALL_PREFIX}/cvc4.
Further, the old build system modified all #include directives in the installed public header files to use the installed headers, e.g., #include ""cvc4_public.h"" was changed to #include <cvc4/cvc4_public.h>. Now, after make install the script src/fix-install-headers.sh is executed to change the #include directives accordingly (this should be obsolete with the new C++ API).",32,15,".travis.yml, src/CMakeLists.txt, src/fix-install-headers.sh",3,2,2,1.1965266937348622,5,0,3,819.6666666666666,1,0,5,0,1,0
cvc5,1b8ee921760d15492c0c0492ce6a4da07186699a,68174dedcb4bf9d91241585ab1cc876d2fa83d62,Andrew Reynolds,andrew.j.reynolds@gmail.com,2019-03-13 11:37:03,1552448223,Remove spurious data member. (#2857),0,5,src/theory/quantifiers/candidate_rewrite_database.h,1,1,1,-0.0,5,53,1,321.0,30,0,18,0,0,0
cvc5,68174dedcb4bf9d91241585ab1cc876d2fa83d62,b574ccf82270f8887d2d697c537c591ff4ab68a2,Andres Noetzli,andres.noetzli@gmail.com,2019-03-13 22:47:04,1552488424,"Add statistics for proof gen./checking time, size (#2850)

This commit adds a statistic that records the total size of all proofs
generated by an instance of `SmtEngine`. The commit also moves
`SmtEngine::checkProof()` into `smt_engine.cpp` because it needs to know
the complete type of `d_stats` (and the separate file for that method
didn't seem that useful). Additionally, it changes
`smt::SmtEngine::checkProofTime` to `smt::SmtEngine::lfscCheckProofTime`
that only measures the time spent in LFSC and adds a statistic
`proof::ProofManager::proofProductionTime` that measures the proof
production time separately (also works with `get-proof`/`--dump-proof`).",121,106,"src/CMakeLists.txt, src/proof/proof_manager.cpp, src/proof/proof_manager.h, src/smt/smt_engine.cpp",5,3,3,1.7011300482393894,5,5226,5,2331.5,55,0,22,0,0,0
cvc5,b574ccf82270f8887d2d697c537c591ff4ab68a2,1744dc5f3140f9dc2aeb71f99c530feb83264a04,makaimann,makaim@stanford.edu,2019-03-14 00:08:15,1552493295,"check for null assumption in query and replace with false (#2858)

The default assumption argument in query was a null `Expr`, but the implementation asserted that the assumption is not null:

declaration: https://github.com/CVC4/CVC4/blob/68174dedcb4bf9d91241585ab1cc876d2fa83d62/src/smt/smt_engine.h#L593
implementation: https://github.com/CVC4/CVC4/blob/68174dedcb4bf9d91241585ab1cc876d2fa83d62/src/smt/smt_engine.cpp#L3548

The change is to simply check if the assumption is null and replaces it with the `false` expression if it is. 

It should be `false` not `true` because it is negated in checkSatisfiability (when it's a query) as seen here: https://github.com/CVC4/CVC4/blob/68174dedcb4bf9d91241585ab1cc876d2fa83d62/src/smt/smt_engine.cpp#L3607

Note: I couldn't find a clean way to make `false` the default argument of assumption, because the expression manager is non-static.",4,2,src/smt/smt_engine.cpp,1,1,1,-0.0,6,4138,1,3395.0,0,0,6,0,0,0
cvc5,1744dc5f3140f9dc2aeb71f99c530feb83264a04,26977381d8e026718a056adee0fa6dea1a76555d,Andrew Reynolds,andrew.j.reynolds@gmail.com,2019-03-14 07:46:52,1552520812,Generalize sygus-rr-verify for fast enumerator (#2829),77,52,"src/theory/datatypes/datatypes_sygus.cpp, src/theory/quantifiers/sygus/sygus_enumerator.cpp, src/theory/quantifiers/sygus/sygus_enumerator.h, src/theory/quantifiers/sygus_sampler.cpp, src/theory/quantifiers/sygus_sampler.h",5,1,3,1.7919840880983493,6,3341,5,517.6,31,0,19,0,0,0
cvc5,26977381d8e026718a056adee0fa6dea1a76555d,78350cb1caa989f740a3159d1c578c454111874c,Andrew Reynolds,andrew.j.reynolds@gmail.com,2019-03-14 13:36:56,1552541816,Fix substitution step in ho matching (#2825),5,0,src/theory/quantifiers/ematching/ho_trigger.cpp,1,1,1,-0.0,6,429,1,392.0,36,0,20,0,1,0
cvc5,78350cb1caa989f740a3159d1c578c454111874c,92d541960c7c1d4b06dbef8bebbb106d52fcaeb4,Andrew Reynolds,andrew.j.reynolds@gmail.com,2019-03-14 14:06:48,1552543608,Implement proper semantics for TPTP predicate is_rat. (#2861),26,3,"src/parser/tptp/Tptp.g, test/regress/CMakeLists.txt, test/regress/regress0/tptp/is_rat_simple.p",3,2,3,1.04975472279146,6,0,3,1000.6666666666666,37,0,9,0,0,0
cvc5,92d541960c7c1d4b06dbef8bebbb106d52fcaeb4,68ef3fc3c5aee55e3c89968486c98d59f0043fb1,Mathias Preiner,mathias.preiner@gmail.com,2019-03-14 12:45:49,1552538749,Disable DCO signing for organization members.,2,0,.github/dco.yml,1,1,1,-0.0,6,0,1,-1.0,4,0,0,0,0,0
cvc5,68ef3fc3c5aee55e3c89968486c98d59f0043fb1,7247f321dc8d319c5079b31d450c09029506274a,Andrew Reynolds,andrew.j.reynolds@gmail.com,2019-03-14 15:13:55,1552547635,Add getFreeVariables method to node algorithm (#2852),31,2,"src/expr/node_algorithm.cpp, src/expr/node_algorithm.h",2,1,1,0.9672947789468944,6,257,2,209.0,40,0,2,0,0,0
cvc5,7247f321dc8d319c5079b31d450c09029506274a,d4046f5e2e32d07c34b65fbcdfffae6a24d8c399,Andrew Reynolds,andrew.j.reynolds@gmail.com,2019-03-14 15:47:48,1552549668,Properly handle lambdas in relevant domain (#2853),6,5,"src/expr/node.h, src/theory/quantifiers/relevant_domain.cpp",2,2,2,0.9456603046006401,6,1106,2,2907.5,42,0,24,0,0,0
cvc5,d4046f5e2e32d07c34b65fbcdfffae6a24d8c399,fef57367d28a62251cac47010cc6e80cd416832e,Andrew Reynolds,andrew.j.reynolds@gmail.com,2019-03-14 16:32:25,1552552345,Use zero slope tangent planes for transcendental functions (#2803),26,22,"src/theory/arith/nonlinear_extension.cpp, test/regress/CMakeLists.txt, test/regress/regress0/nl/nta/exp-neg2-unsat-unsound.smt2",3,2,3,1.1226079684006318,6,4319,3,419.0,44,0,30,0,0,0
cvc5,fef57367d28a62251cac47010cc6e80cd416832e,504da2e215bd002ba763b7f102ddbd05917bc0d8,Aina Niemetz,aina.niemetz@gmail.com,2019-03-14 15:17:31,1552547851,Improve INSTALL instructions. (#2866),15,13,INSTALL.md,1,0,1,-0.0,6,0,1,169.0,43,0,0,0,0,0
cvc5,504da2e215bd002ba763b7f102ddbd05917bc0d8,219bc599111619c40779992f2199ff284293ec13,Andrew Reynolds,andrew.j.reynolds@gmail.com,2019-03-14 17:51:39,1552557099,Fix function term set for theory strings compute care graph. (#2862),9,2,src/theory/strings/theory_strings.cpp,1,1,1,-0.0,6,4601,1,2009.0,47,0,23,0,1,0
cvc5,219bc599111619c40779992f2199ff284293ec13,a74e32e26d33e18b84edee4b27e352afc5271eef,Andrew Reynolds,andrew.j.reynolds@gmail.com,2019-03-14 21:33:07,1552570387,Fix non-variable function head elimination in UF. (#2864),52,6,src/theory/uf/theory_uf.cpp,1,1,1,-0.0,6,790,1,3311.0,48,0,24,0,1,0
cvc5,a74e32e26d33e18b84edee4b27e352afc5271eef,e8f23236b7f797fd3cd8900df0422d44f1a6a7e0,Haniel Barbosa,hanielbbarbosa@gmail.com,2019-03-15 17:01:42,1552640502,Adding capture avoiding substitution (#2867),128,4,"src/expr/node.h, src/expr/node_algorithm.cpp, src/expr/node_algorithm.h",3,1,1,0.7551444825350513,7,1183,3,1267.0,0,0,4,0,0,0
cvc5,e8f23236b7f797fd3cd8900df0422d44f1a6a7e0,2989780f0242d14712927bd4c01c4a521a8fe399,Haniel Barbosa,hanielbbarbosa@gmail.com,2019-03-15 18:35:43,1552646143,New beta-reduction for HOL solving (#2869),110,11,"src/theory/uf/theory_uf_rewriter.h, test/regress/CMakeLists.txt, test/regress/regress0/ho/shadowing-defs.smt2",3,2,3,0.9878028133462262,7,158,3,1179.6666666666667,3,0,34,0,0,0
cvc5,2989780f0242d14712927bd4c01c4a521a8fe399,5d0a5a729680a1db3f44e31037955390e86440ce,Alex Ozdemir,aozdemir@hmc.edu,2019-03-15 18:51:47,1552647107,"Enable CryptoMiniSat-backed BV proofs (#2847)

* Connect the plumbing so that BV proofs are enabled when using
CryptoMiniSat
* Also fixed a bug in CNF-proof generation
   * Specifically, CNF proofs broke when proving tautological clauses.
     Now they don't.",346,84,"proofs/signatures/CMakeLists.txt, src/base/configuration.cpp, src/base/configuration.h, src/options/bv_options.toml, src/options/options_handler.cpp, src/proof/bitvector_proof.cpp, src/proof/bitvector_proof.h, src/proof/clausal_bitvector_proof.cpp, src/proof/clausal_bitvector_proof.h, src/proof/cnf_proof.cpp, src/proof/cnf_proof.h, src/proof/drat/drat_proof.cpp, src/proof/er/er_proof.cpp, src/proof/proof_manager.cpp, src/proof/theory_proof.cpp, test/regress/regress0/bv/ackermann2.smt2, test/regress/regress0/bv/core/slice-12.smt, test/regress/regress0/bv/temp.lrat, test/unit/proof/drat_proof_black.h, test/unit/proof/lrat_proof_black.h",20,6,9,2.7147772304592266,7,6967,20,1007.95,86,0,52,1,1,0
cvc5,5d0a5a729680a1db3f44e31037955390e86440ce,192aa1b5d98ca1a0a2c5e5c8ec603ebb9d14d261,Andres Noetzli,andres.noetzli@gmail.com,2019-03-16 06:23:06,1552688586,"Limit --solve-int-as-bv=X to QF_NIA/QF_LIA/QF_IDL (#2868)

Fixes #1715. We do not support the `--solve-int-as-bv=X` preprocessing
pass with logics other than pure QF_NIA/QF_LIA/QF_IDL. This commit adds
a corresponding check and throws an option exception if an incompatible
logic has been set.",6,0,src/smt/smt_engine.cpp,1,1,1,-0.0,7,4144,1,3397.0,60,0,7,0,1,0
cvc5,192aa1b5d98ca1a0a2c5e5c8ec603ebb9d14d261,7e3457b0e16cacef456287ae761c5293be1209d5,Aina Niemetz,aina.niemetz@gmail.com,2019-03-18 16:07:03,1552896423,BitVector: Allow base 10 in constructor. (#2870),44,9,"src/api/cvc4cpp.h, src/util/bitvector.h, test/unit/api/solver_black.h",3,3,3,1.5635647084471933,7,1557,3,1218.0,44,0,36,0,0,0
cvc5,7e3457b0e16cacef456287ae761c5293be1209d5,a4f76da78653e80c28740b2ad4bf3929110d5a25,Aina Niemetz,aina.niemetz@gmail.com,2019-03-18 15:05:00,1552892700,"New C++: Remove redundant mkVar function.

s",77,98,"examples/api/bitvectors-new.cpp, examples/api/bitvectors_and_arrays-new.cpp, examples/api/combination-new.cpp, examples/api/extract-new.cpp, examples/api/helloworld-new.cpp, examples/api/linear_arith-new.cpp, examples/api/sets-new.cpp, examples/api/strings-new.cpp, src/api/cvc4cpp.cpp, src/api/cvc4cpp.h, src/parser/smt2/Smt2.g, test/unit/api/solver_black.h, test/unit/api/term_black.h",13,3,4,2.944033452592379,7,4997,13,472.0769230769231,47,0,40,0,0,0
cvc5,a4f76da78653e80c28740b2ad4bf3929110d5a25,cd2a319d14b1ec7598e8e774cec012b4ce990274,Aina Niemetz,aina.niemetz@gmail.com,2019-03-18 15:58:43,1552895923,New C++: Remove redundant mkBoundVar function.,28,49,"src/api/cvc4cpp.cpp, src/api/cvc4cpp.h, test/unit/api/solver_black.h",3,2,2,1.3502130383393154,7,4112,3,219.0,60,0,39,0,0,0
cvc5,cd2a319d14b1ec7598e8e774cec012b4ce990274,6322e6be67ff2b82e6751046b3383db1b52e09d3,Andrew Reynolds,andrew.j.reynolds@gmail.com,2019-03-19 11:51:11,1552967471,Fix fairness issue with fast sygus enumerator (#2873),51,1,"src/theory/quantifiers/sygus/sygus_enumerator.cpp, test/regress/CMakeLists.txt, test/regress/regress1/sygus/cube-nia.sy",3,2,3,1.1154192839926038,7,862,3,230.0,49,0,37,0,1,0
cvc5,6322e6be67ff2b82e6751046b3383db1b52e09d3,96b6b3a172d76753355e258edadcf977b39edcb8,Andrew Reynolds,andrew.j.reynolds@gmail.com,2019-03-19 14:15:24,1552976124,"Make declare-datatype(s) a standard, non-extended command in the Smt2 parser. (#2874)",2,2,src/parser/smt2/Smt2.g,1,1,1,-0.0,7,0,1,3245.0,52,0,4,0,0,0
cvc5,96b6b3a172d76753355e258edadcf977b39edcb8,7dfd55085c60affdc4523c330ea2d2daa69ae66a,Andrew Reynolds,andrew.j.reynolds@gmail.com,2019-03-19 20:54:40,1553000080,Sygus abduction feature (#2744),347,23,"src/CMakeLists.txt, src/options/quantifiers_options.toml, src/preprocessing/passes/sygus_abduct.cpp, src/preprocessing/passes/sygus_abduct.h, src/preprocessing/preprocessing_pass_registry.cpp, src/smt/smt_engine.cpp, src/smt/smt_engine.h, src/theory/quantifiers/expr_miner.cpp, src/theory/quantifiers/sygus/sygus_repair_const.cpp, src/theory/quantifiers/sygus/synth_conjecture.cpp, src/theory/quantifiers/sygus/synth_engine.cpp, test/regress/CMakeLists.txt, test/regress/regress1/sygus-abduct-test.smt2",13,6,9,2.167308484499437,7,6839,13,738.2307692307693,53,0,59,0,0,0
cvc5,7dfd55085c60affdc4523c330ea2d2daa69ae66a,91f9355868d01999fd729544ea50ccd745e84d35,Andres Noetzli,andres.noetzli@gmail.com,2019-03-21 17:21:02,1553160062,Add more NEWS (#2859),21,2,NEWS,1,0,1,-0.0,7,0,1,3425.0,61,0,0,0,0,0
cvc5,91f9355868d01999fd729544ea50ccd745e84d35,6c8a2652605b031182b3c2c25d237719470f5620,Andrew Reynolds,andrew.j.reynolds@gmail.com,2019-03-21 13:41:46,1553146906,Rewrite selectors correctly applied to constructors (#2875),96,15,"src/theory/datatypes/datatypes_rewriter.cpp, src/theory/quantifiers/sygus/sygus_unif_io.cpp, test/regress/CMakeLists.txt, test/regress/regress1/sygus/double.sy, test/regress/regress1/sygus/extract.sy",5,2,4,2.06376262402701,7,2287,5,274.2,66,0,41,0,0,0
cvc5,6c8a2652605b031182b3c2c25d237719470f5620,a5466f262e16f3ebcd7c62df266a5ac0cd9c5b9a,Andrew Reynolds,andrew.j.reynolds@gmail.com,2019-03-21 14:21:39,1553149299,Fix bad comparison in RE solver's addMembership (#2880),4,2,src/theory/strings/theory_strings.cpp,1,1,1,-0.0,7,4603,1,2016.0,71,0,29,0,1,0
cvc5,a5466f262e16f3ebcd7c62df266a5ac0cd9c5b9a,a20702bcbb04422ddfcda5a241fd0cc0ec32edc8,makaimann,makaim@stanford.edu,2019-03-21 18:10:01,1553163001,"Use empty vector instead of false in query with null Expr assumption (#2876)

This solution is less confusing than using a `false` assumption.",2,2,src/smt/smt_engine.cpp,1,1,1,-0.0,7,4170,1,3403.0,1,0,9,0,0,0
cvc5,a20702bcbb04422ddfcda5a241fd0cc0ec32edc8,b80720f15170b02cbc93a53095ec2dd96bb8029c,Andres Noetzli,andres.noetzli@gmail.com,2019-03-22 03:48:56,1553197736,"Fix stripConstantEndpoints in strings rewriter (#2883)

`TheoryStringsRewriter::stripConstantEndpoints()` returns the stripped
endpoints in the vectors `nb` and `ne`. These endpoints were not
computed correctly if string literal had to be split. For example:

```
stripConstantEndpoints({ ""ABC"" }, { ""C"" }, {}, {}, 1)
```

returned `true` and only ""A"" for `nb` (instead of ""AB"") because we
mistakenly used the amount of overlap between ""ABC"" and ""C"" (which is
one) for the length of the stripped prefix.

This commit fixes the issue and adds several unit tests.",82,6,"src/theory/strings/theory_strings_rewriter.cpp, test/unit/theory/theory_strings_rewriter_white.h",2,2,2,0.5746356978376794,7,5255,2,1188.5,62,0,57,0,1,0
cvc5,b80720f15170b02cbc93a53095ec2dd96bb8029c,f7336df0c8ace6c0d73fefc2d2e54966599ee40b,Haniel Barbosa,hanielbbarbosa@gmail.com,2019-03-22 01:11:06,1553188266,fix help information on TPTP parsing (#2884),1,1,src/options/options_template.cpp,1,1,1,-0.0,7,551,1,2423.0,6,0,6,0,1,0
cvc5,f7336df0c8ace6c0d73fefc2d2e54966599ee40b,d5ad777c539f5a49e1cdf4e483c2d5d689738b12,Andrew Reynolds,andrew.j.reynolds@gmail.com,2019-03-22 09:01:13,1553216473,More fixes for PBE with datatypes (#2882),76,16,"src/theory/quantifiers/sygus/sygus_unif_io.cpp, test/regress/CMakeLists.txt, test/regress/regress1/sygus/tester.sy",3,2,3,1.0505869599146385,7,1424,3,302.3333333333333,72,0,45,0,1,0
cvc5,d5ad777c539f5a49e1cdf4e483c2d5d689738b12,dfae7c60e4d12cd57e8a87a6f5d8928ba2cffe83,Andrew Reynolds,andrew.j.reynolds@gmail.com,2019-03-22 15:28:50,1553239730,Fix instantiation stat for fmf (#2889),2,1,src/theory/quantifiers/fmf/model_engine.cpp,1,1,1,-0.0,7,277,1,400.0,75,0,32,0,1,0
cvc5,dfae7c60e4d12cd57e8a87a6f5d8928ba2cffe83,821d4b1c6c3ce3c711e9a24216758febf0937cf0,Andrew Reynolds,andrew.j.reynolds@gmail.com,2019-03-22 16:24:05,1553243045,Revisit strings extended function decomposition  (#2892),49,26,"src/theory/strings/theory_strings.cpp, src/theory/strings/theory_strings.h",2,1,1,0.4474992550368635,7,5070,2,2017.0,76,0,33,0,0,0
cvc5,821d4b1c6c3ce3c711e9a24216758febf0937cf0,3df45c5613bcd4c81d4cabae4bb7c98ce69d7141,Andres Noetzli,andres.noetzli@gmail.com,2019-03-23 00:15:53,1553271353,"Strip non-matching beginning from indexof operator (#2885)

This commit adds a rewrite that strips endpoints from `str.indexof`
operators if they don't overlap with the string that is being searched
for using `stripConstantEndpoints()`. In addition to that, it makes
`stripConstantEndpoints()` slightly more aggressive by allowing it to
drop substring components that have zero overlap with the string that we
are looking at. Finally, the commit fixes the default argument for
`fullRewriter` of `checkEntailContains()` to be true instead of false,
which should allow for more rewriting opportunities.",95,1,"src/theory/strings/theory_strings_rewriter.cpp, src/theory/strings/theory_strings_rewriter.h, test/unit/theory/theory_strings_rewriter_white.h",3,2,2,0.9486196756851624,7,5433,3,1465.6666666666667,64,0,62,0,1,0
cvc5,3df45c5613bcd4c81d4cabae4bb7c98ce69d7141,9b7ba1603b2d6ff4c13182655ca8af32966570aa,Andres Noetzli,andres.noetzli@gmail.com,2019-03-23 13:30:35,1553319035,"Fix memory leak when using subsolvers (#2893)

ASAN was reporting memory leaks in regression tests that were using
subsolvers. First, I am going to describe the origin of the leaks and
then the solution implemented in this commit.

Recall an `Expr` stores the `NodeManager` that the internal node is
associated with. `Node::toExpr()` converts a `Node` to an `Expr` and
assumes that the active `NodeManager` (returned by
`NodeManager::currentNM()` is the one associated with the node. In
`ExportPrivate::exportInternal()`, when we were exporting a skolem, we
created a skolem in the target `NodeManager` by calling
`NodeManager::mkSkolem()` (`ExprManager`s do not support the creation of
skolems) but then we called `Node::toExpr()` on the resulting skolem
while the origin `NodeManager` was the active `NodeManager`. One of the
issues of having the wrong `NodeManager` in the `Expr` is that when the
`Expr` is destroyed and the internal node's refcount reaches zero in
destructor of `Expr`, then the node value associated with the node is
added to the set of zombie nodes (nodes waiting to be garbage collected
or resurrected) of the wrong `NodeManager`. The problem here is that the
set of zombie nodes uses the node id to hash and compare nodes. Node
ids, however, are only unique within a given `NodeManager`. Thus, if we
have two nodes with the same id from different `NodeManager`s and both
reach refcount zero in the context of the same `NodeManager`, only one
of them will end up in the set of zombies and thus only that one will be
freed.
Using a subsolver realiably triggered this issue.
`ExportPrivate::exportInternal()` stored the `Expr` with the wrong
`NodeManager` in an `ExprManagerMapCollection` which associates
variables in the original `ExprManager` with the variables in the target
`ExprManager`. When we created a subsolver, we created the
`ExprManagerMapCollection` before creating our subsolver, so it was
deleted after the subsolver and so deleting the
`ExprManagerMapCollection` deleted the last reference to `Expr`s holding
skolem nodes associated with the wrong `NodeManager`.

This commit fixes the issue by making sure that the correct
`NodeManager` is in scope when converting the skolem/bound variable
nodes to an `Expr`. It also swaps the creation order of
`ExprManagerMapCollection` and `ExprManager` to make sure that
`ExprManagerMapCollection` is deleted before the `ExprManager` that the
`Expr`s belong to. Additionally, the commit makes it harder to make a
similar mistake by asserting that the `Expr`s in the
`ExprManagerMapCollection` are associated with the expected
`ExprManager`s. Finally, it adds an assertion that tries to identify
such issues by checking whether the list of zombies contains a node with
the same id but located at a different address.",31,6,"src/expr/expr_template.cpp, src/expr/node_manager.h, src/theory/quantifiers/candidate_rewrite_database.cpp, src/theory/quantifiers/expr_miner.cpp, src/theory/quantifiers/query_generator.cpp, test/regress/regress1/rr-verify/bv-term.sy, test/regress/regress1/rr-verify/fp-arith.sy, test/regress/regress1/rr-verify/fp-bool.sy",8,3,3,2.140788065459598,7,2016,8,984.375,67,0,55,0,1,0
cvc5,9b7ba1603b2d6ff4c13182655ca8af32966570aa,c6e9766a910509583a32e85ad8be55aea550c17c,Aina Niemetz,aina.niemetz@gmail.com,2019-03-23 22:58:31,1553353111,BV: Fix typerules for rotate operators. (#2895),4,2,"src/theory/bv/theory_bv_type_rules.h, test/unit/api/solver_black.h",2,2,2,0.9182958340544896,7,1261,2,1691.0,63,0,65,0,1,0
cvc5,c6e9766a910509583a32e85ad8be55aea550c17c,a7ddfff7c1d042907f94fc72b4437c14294a4f67,Aina Niemetz,aina.niemetz@gmail.com,2019-03-24 11:46:36,1553399196,New C++ API: Fix include. (#2896),1,1,src/api/cvc4cpp.h,1,1,1,-0.0,7,529,1,269.0,65,0,14,0,1,0
cvc5,a7ddfff7c1d042907f94fc72b4437c14294a4f67,b596df5c4d0745cc8d290d1a7715bbbece015d3c,Andrew Reynolds,andrew.j.reynolds@gmail.com,2019-03-24 14:26:25,1553408785,Split regular expression solver (#2891),830,583,"src/CMakeLists.txt, src/theory/strings/regexp_solver.cpp, src/theory/strings/regexp_solver.h, src/theory/strings/theory_strings.cpp, src/theory/strings/theory_strings.h",5,2,2,1.7072761973870285,7,5228,5,918.8,78,0,45,0,0,0
cvc5,b596df5c4d0745cc8d290d1a7715bbbece015d3c,bb5553d4d19cd3373c99062e508c8cef8686e00d,Aina Niemetz,aina.niemetz@gmail.com,2019-03-25 11:39:17,1553485157,get-authors: Readd option -C to git blame command.,1,1,contrib/get-authors,1,1,1,-0.0,7,0,1,3384.0,66,0,0,0,0,0
cvc5,bb5553d4d19cd3373c99062e508c8cef8686e00d,a3dccac861e05e91d139a8c6da3b1605a068ff00,Aina Niemetz,aina.niemetz@gmail.com,2019-03-25 12:31:59,1553488319,update-copyright: Fix matching of excluded paths.,3,2,contrib/update-copyright.pl,1,1,1,-0.0,7,0,1,3414.0,67,0,0,0,1,0
cvc5,a3dccac861e05e91d139a8c6da3b1605a068ff00,ad1dd82d553957040b9126a85592e50d2ebbf3a8,Mathias Preiner,mathias.preiner@gmail.com,2019-03-25 18:19:45,1553509185,"get-authors: Exclude common source code patterns. (#2900)

Exclude lines that #include header files and define namespaces.
Since we use git blame -C -M to determine the current top contributors,
git tries to match all #include and namespace definitions to an original
author, which is not accurate since these lines are usually not
copied over from other files.",42,21,contrib/get-authors,1,1,1,-0.0,7,0,1,3384.0,5,0,1,0,0,0
cvc5,ad1dd82d553957040b9126a85592e50d2ebbf3a8,ecb0b1c2c656b70632b46021bcbb0ba4fb71ee2a,Andrew Reynolds,andrew.j.reynolds@gmail.com,2019-03-26 10:03:29,1553565809,Fix a few warnings (#2898),2,2,"src/theory/datatypes/datatypes_rewriter.cpp, src/theory/strings/theory_strings.cpp",2,1,2,0.8112781244591328,7,5112,2,1246.5,83,0,38,0,1,0
cvc5,ecb0b1c2c656b70632b46021bcbb0ba4fb71ee2a,3606045186bffa81b292a5299c5a5d6fd7e0b68f,Andres Noetzli,andres.noetzli@gmail.com,2019-03-26 08:28:09,1553560089,Fix warnings about wrong line numbers (#2899),7,7,"src/expr/expr_template.cpp, src/expr/expr_template.h, src/expr/kind_template.cpp",3,1,1,1.1488348542809166,7,785,3,2382.3333333333335,75,0,6,0,1,0
cvc5,3606045186bffa81b292a5299c5a5d6fd7e0b68f,20569472704deb899d577be7800ec902e5883fa5,Mathias Preiner,mathias.preiner@gmail.com,2019-03-26 11:22:21,1553570541,get-authors: Exclude empty lines.,2,1,contrib/get-authors,1,1,1,-0.0,7,0,1,3385.0,6,0,2,0,0,0
cvc5,20569472704deb899d577be7800ec902e5883fa5,3090423f2cb47666a85db7b2f2df982239e7874d,Aina Niemetz,aina.niemetz@gmail.com,2019-03-26 11:11:56,1553569916,update-copyright: Update to 2019.,2,2,contrib/update-copyright.pl,1,1,1,-0.0,7,0,1,3415.0,68,0,1,0,0,0
cvc5,3090423f2cb47666a85db7b2f2df982239e7874d,a6bd02c5c442b806b5e01fed40ab9d1017e42bc3,Aina Niemetz,aina.niemetz@gmail.com,2019-03-26 11:33:55,1553571235,Update copyright headers.,1551,1529,"examples/SimpleVC.java, examples/api/bitvectors-new.cpp, examples/api/bitvectors.cpp, examples/api/bitvectors_and_arrays-new.cpp, examples/api/bitvectors_and_arrays.cpp, examples/api/combination-new.cpp, examples/api/combination.cpp, examples/api/datatypes-new.cpp, examples/api/datatypes.cpp, examples/api/extract-new.cpp, examples/api/extract.cpp, examples/api/helloworld-new.cpp, examples/api/helloworld.cpp, examples/api/java/BitVectors.java, examples/api/java/BitVectorsAndArrays.java, examples/api/java/CVC4Streams.java, examples/api/java/Combination.java, examples/api/java/Datatypes.java, examples/api/java/HelloWorld.java, examples/api/java/LinearArith.java, examples/api/java/PipedInput.java, examples/api/java/Strings.java, examples/api/linear_arith-new.cpp, examples/api/linear_arith.cpp, examples/api/sets-new.cpp, examples/api/sets.cpp, examples/api/strings-new.cpp, examples/api/strings.cpp, examples/hashsmt/sha1.hpp, examples/hashsmt/sha1_collision.cpp, examples/hashsmt/sha1_inversion.cpp, examples/hashsmt/word.cpp, examples/hashsmt/word.h, examples/nra-translate/normalize.cpp, examples/nra-translate/smt2info.cpp, examples/nra-translate/smt2todreal.cpp, examples/nra-translate/smt2toisat.cpp, examples/nra-translate/smt2tomathematica.cpp, examples/nra-translate/smt2toqepcad.cpp, examples/nra-translate/smt2toredlog.cpp, examples/sets-translate/sets_translate.cpp, examples/simple_vc_cxx.cpp, examples/simple_vc_quant_cxx.cpp, examples/translator.cpp, src/api/cvc4cpp.cpp, src/api/cvc4cpp.h, src/api/cvc4cppkind.h, src/base/configuration.cpp, src/base/configuration.h, src/base/configuration_private.h, src/base/cvc4_assert.cpp, src/base/cvc4_assert.h, src/base/cvc4_check.cpp, src/base/cvc4_check.h, src/base/exception.cpp, src/base/exception.h, src/base/git_versioninfo.cpp.in, src/base/listener.cpp, src/base/listener.h, src/base/map_util.h, src/base/modal_exception.h, src/base/output.cpp, src/base/output.h, src/bindings/java_iterator_adapter.h, src/bindings/java_stream_adapters.h, src/bindings/swig.h, src/context/backtrackable.h, src/context/cddense_set.h, src/context/cdhashmap.h, src/context/cdhashmap_forward.h, src/context/cdhashset.h, src/context/cdhashset_forward.h, src/context/cdinsert_hashmap.h, src/context/cdinsert_hashmap_forward.h, src/context/cdlist.h, src/context/cdlist_forward.h, src/context/cdmaybe.h, src/context/cdo.h, src/context/cdqueue.h, src/context/cdtrail_queue.h, src/context/context.cpp, src/context/context.h, src/context/context_mm.cpp, src/context/context_mm.h, src/decision/decision_attributes.h, src/decision/decision_engine.cpp, src/decision/decision_engine.h, src/decision/decision_strategy.h, src/decision/justification_heuristic.cpp, src/decision/justification_heuristic.h, src/expr/array.h, src/expr/array_store_all.cpp, src/expr/array_store_all.h, src/expr/ascription_type.h, src/expr/attribute.cpp, src/expr/attribute.h, src/expr/attribute_internals.h, src/expr/attribute_unique_id.h, src/expr/chain.h, src/expr/datatype.cpp, src/expr/datatype.h, src/expr/emptyset.cpp, src/expr/emptyset.h, src/expr/expr_iomanip.cpp, src/expr/expr_iomanip.h, src/expr/expr_manager_scope.h, src/expr/expr_manager_template.cpp, src/expr/expr_manager_template.h, src/expr/expr_stream.h, src/expr/expr_template.cpp, src/expr/expr_template.h, src/expr/kind_map.h, src/expr/kind_template.cpp, src/expr/kind_template.h, src/expr/matcher.h, src/expr/metakind_template.cpp, src/expr/metakind_template.h, src/expr/node.cpp, src/expr/node.h, src/expr/node_algorithm.cpp, src/expr/node_algorithm.h, src/expr/node_builder.h, src/expr/node_manager.cpp, src/expr/node_manager.h, src/expr/node_manager_attributes.h, src/expr/node_manager_listeners.cpp, src/expr/node_manager_listeners.h, src/expr/node_self_iterator.h, src/expr/node_trie.cpp, src/expr/node_trie.h, src/expr/node_value.cpp, src/expr/node_value.h, src/expr/pickle_data.cpp, src/expr/pickle_data.h, src/expr/pickler.cpp, src/expr/pickler.h, src/expr/record.cpp, src/expr/record.h, src/expr/symbol_table.cpp, src/expr/symbol_table.h, src/expr/type.cpp, src/expr/type.h, src/expr/type_checker.h, src/expr/type_checker_template.cpp, src/expr/type_node.cpp, src/expr/type_node.h, src/expr/type_properties_template.h, src/expr/uninterpreted_constant.cpp, src/expr/uninterpreted_constant.h, src/expr/variable_type_map.h, src/include/cvc4.h, src/include/cvc4_private.h, src/include/cvc4_private_library.h, src/include/cvc4_public.h, src/include/cvc4parser_private.h, src/include/cvc4parser_public.h, src/lib/clock_gettime.c, src/lib/clock_gettime.h, src/lib/ffs.c, src/lib/ffs.h, src/lib/replacements.h, src/lib/strtok_r.c, src/lib/strtok_r.h, src/main/command_executor.cpp, src/main/command_executor.h, src/main/command_executor_portfolio.cpp, src/main/command_executor_portfolio.h, src/main/driver_unified.cpp, src/main/interactive_shell.cpp, src/main/interactive_shell.h, src/main/main.cpp, src/main/main.h, src/main/portfolio.cpp, src/main/portfolio.h, src/main/portfolio_util.cpp, src/main/portfolio_util.h, src/main/util.cpp, src/options/argument_extender.h, src/options/argument_extender_implementation.cpp, src/options/argument_extender_implementation.h, src/options/arith_heuristic_pivot_rule.cpp, src/options/arith_heuristic_pivot_rule.h, src/options/arith_propagation_mode.cpp, src/options/arith_propagation_mode.h, src/options/arith_unate_lemma_mode.cpp, src/options/arith_unate_lemma_mode.h, src/options/base_handlers.h, src/options/bool_to_bv_mode.cpp, src/options/bool_to_bv_mode.h, src/options/bv_bitblast_mode.cpp, src/options/bv_bitblast_mode.h, src/options/datatypes_modes.h, src/options/decision_mode.cpp, src/options/decision_mode.h, src/options/decision_weight.h, src/options/didyoumean.cpp, src/options/didyoumean.h, src/options/didyoumean_test.cpp, src/options/language.cpp, src/options/language.h, src/options/module_template.cpp, src/options/module_template.h, src/options/open_ostream.cpp, src/options/open_ostream.h, src/options/option_exception.cpp, src/options/option_exception.h, src/options/options.h, src/options/options_handler.cpp, src/options/options_handler.h, src/options/options_holder_template.h, src/options/options_public_functions.cpp, src/options/options_template.cpp, src/options/printer_modes.cpp, src/options/printer_modes.h, src/options/quantifiers_modes.cpp, src/options/quantifiers_modes.h, src/options/set_language.cpp, src/options/set_language.h, src/options/smt_modes.cpp, src/options/smt_modes.h, src/options/sygus_out_mode.h, src/options/theoryof_mode.cpp, src/options/theoryof_mode.h, src/options/ufss_mode.h, src/parser/antlr_input.cpp, src/parser/antlr_input.h, src/parser/antlr_input_imports.cpp, src/parser/antlr_line_buffered_input.cpp, src/parser/antlr_line_buffered_input.h, src/parser/antlr_tracing.h, src/parser/bounded_token_buffer.cpp, src/parser/bounded_token_buffer.h, src/parser/bounded_token_factory.cpp, src/parser/bounded_token_factory.h, src/parser/cvc/Cvc.g, src/parser/cvc/cvc_input.cpp, src/parser/cvc/cvc_input.h, src/parser/input.cpp, src/parser/input.h, src/parser/line_buffer.cpp, src/parser/line_buffer.h, src/parser/memory_mapped_input_buffer.cpp, src/parser/memory_mapped_input_buffer.h, src/parser/parser.cpp, src/parser/parser.h, src/parser/parser_builder.cpp, src/parser/parser_builder.h, src/parser/parser_exception.h, src/parser/smt1/Smt1.g, src/parser/smt1/smt1.cpp, src/parser/smt1/smt1.h, src/parser/smt1/smt1_input.cpp, src/parser/smt1/smt1_input.h, src/parser/smt2/Smt2.g, src/parser/smt2/smt2.cpp, src/parser/smt2/smt2.h, src/parser/smt2/smt2_input.cpp, src/parser/smt2/smt2_input.h, src/parser/smt2/sygus_input.cpp, src/parser/smt2/sygus_input.h, src/parser/tptp/Tptp.g, src/parser/tptp/tptp.cpp, src/parser/tptp/tptp.h, src/parser/tptp/tptp_input.cpp, src/parser/tptp/tptp_input.h, src/preprocessing/assertion_pipeline.cpp, src/preprocessing/assertion_pipeline.h, src/preprocessing/passes/apply_substs.cpp, src/preprocessing/passes/apply_substs.h, src/preprocessing/passes/apply_to_const.cpp, src/preprocessing/passes/apply_to_const.h, src/preprocessing/passes/bool_to_bv.cpp, src/preprocessing/passes/bool_to_bv.h, src/preprocessing/passes/bv_abstraction.cpp, src/preprocessing/passes/bv_abstraction.h, src/preprocessing/passes/bv_ackermann.cpp, src/preprocessing/passes/bv_ackermann.h, src/preprocessing/passes/bv_eager_atoms.cpp, src/preprocessing/passes/bv_eager_atoms.h, src/preprocessing/passes/bv_gauss.cpp, src/preprocessing/passes/bv_gauss.h, src/preprocessing/passes/bv_intro_pow2.cpp, src/preprocessing/passes/bv_intro_pow2.h, src/preprocessing/passes/bv_to_bool.cpp, src/preprocessing/passes/bv_to_bool.h, src/preprocessing/passes/extended_rewriter_pass.cpp, src/preprocessing/passes/extended_rewriter_pass.h, src/preprocessing/passes/global_negate.cpp, src/preprocessing/passes/global_negate.h, src/preprocessing/passes/int_to_bv.cpp, src/preprocessing/passes/int_to_bv.h, src/preprocessing/passes/ite_removal.cpp, src/preprocessing/passes/ite_removal.h, src/preprocessing/passes/ite_simp.cpp, src/preprocessing/passes/ite_simp.h, src/preprocessing/passes/miplib_trick.cpp, src/preprocessing/passes/miplib_trick.h, src/preprocessing/passes/nl_ext_purify.cpp, src/preprocessing/passes/nl_ext_purify.h, src/preprocessing/passes/non_clausal_simp.cpp, src/preprocessing/passes/non_clausal_simp.h, src/preprocessing/passes/pseudo_boolean_processor.cpp, src/preprocessing/passes/pseudo_boolean_processor.h, src/preprocessing/passes/quantifier_macros.cpp, src/preprocessing/passes/quantifier_macros.h, src/preprocessing/passes/quantifiers_preprocess.cpp, src/preprocessing/passes/quantifiers_preprocess.h, src/preprocessing/passes/real_to_int.cpp, src/preprocessing/passes/real_to_int.h, src/preprocessing/passes/rewrite.cpp, src/preprocessing/passes/rewrite.h, src/preprocessing/passes/sep_skolem_emp.cpp, src/preprocessing/passes/sep_skolem_emp.h, src/preprocessing/passes/sort_infer.cpp, src/preprocessing/passes/sort_infer.h, src/preprocessing/passes/static_learning.cpp, src/preprocessing/passes/static_learning.h, src/preprocessing/passes/sygus_abduct.cpp, src/preprocessing/passes/sygus_inference.cpp, src/preprocessing/passes/sygus_inference.h, src/preprocessing/passes/symmetry_breaker.cpp, src/preprocessing/passes/symmetry_breaker.h, src/preprocessing/passes/symmetry_detect.cpp, src/preprocessing/passes/symmetry_detect.h, src/preprocessing/passes/synth_rew_rules.cpp, src/preprocessing/passes/synth_rew_rules.h, src/preprocessing/passes/theory_preprocess.cpp, src/preprocessing/passes/theory_preprocess.h, src/preprocessing/passes/unconstrained_simplifier.cpp, src/preprocessing/passes/unconstrained_simplifier.h, src/preprocessing/preprocessing_pass.cpp, src/preprocessing/preprocessing_pass.h, src/preprocessing/preprocessing_pass_context.cpp, src/preprocessing/preprocessing_pass_context.h, src/preprocessing/preprocessing_pass_registry.cpp, src/preprocessing/preprocessing_pass_registry.h, src/preprocessing/util/ite_utilities.cpp, src/preprocessing/util/ite_utilities.h, src/printer/ast/ast_printer.cpp, src/printer/ast/ast_printer.h, src/printer/cvc/cvc_printer.cpp, src/printer/cvc/cvc_printer.h, src/printer/dagification_visitor.cpp, src/printer/dagification_visitor.h, src/printer/printer.cpp, src/printer/printer.h, src/printer/smt2/smt2_printer.cpp, src/printer/smt2/smt2_printer.h, src/printer/sygus_print_callback.cpp, src/printer/sygus_print_callback.h, src/printer/tptp/tptp_printer.cpp, src/printer/tptp/tptp_printer.h, src/proof/arith_proof.cpp, src/proof/arith_proof.h, src/proof/arith_proof_recorder.cpp, src/proof/arith_proof_recorder.h, src/proof/array_proof.cpp, src/proof/array_proof.h, src/proof/bitvector_proof.cpp, src/proof/bitvector_proof.h, src/proof/clausal_bitvector_proof.h, src/proof/clause_id.h, src/proof/cnf_proof.cpp, src/proof/cnf_proof.h, src/proof/dimacs_printer.cpp, src/proof/dimacs_printer.h, src/proof/drat/drat_proof.cpp, src/proof/drat/drat_proof.h, src/proof/lemma_proof.cpp, src/proof/lemma_proof.h, src/proof/lfsc_proof_printer.cpp, src/proof/lfsc_proof_printer.h, src/proof/lrat/lrat_proof.cpp, src/proof/lrat/lrat_proof.h, src/proof/proof.h, src/proof/proof_manager.cpp, src/proof/proof_manager.h, src/proof/proof_output_channel.cpp, src/proof/proof_output_channel.h, src/proof/proof_utils.cpp, src/proof/proof_utils.h, src/proof/resolution_bitvector_proof.cpp, src/proof/resolution_bitvector_proof.h, src/proof/sat_proof.h, src/proof/sat_proof_implementation.h, src/proof/simplify_boolean_node.cpp, src/proof/simplify_boolean_node.h, src/proof/skolemization_manager.cpp, src/proof/skolemization_manager.h, src/proof/theory_proof.cpp, src/proof/theory_proof.h, src/proof/uf_proof.cpp, src/proof/uf_proof.h, src/proof/unsat_core.cpp, src/proof/unsat_core.h, src/prop/bv_sat_solver_notify.h, src/prop/bvminisat/bvminisat.cpp, src/prop/bvminisat/bvminisat.h, src/prop/cadical.cpp, src/prop/cadical.h, src/prop/cnf_stream.cpp, src/prop/cnf_stream.h, src/prop/cryptominisat.cpp, src/prop/cryptominisat.h, src/prop/minisat/minisat.cpp, src/prop/minisat/minisat.h, src/prop/prop_engine.cpp, src/prop/prop_engine.h, src/prop/registrar.h, src/prop/sat_solver.h, src/prop/sat_solver_factory.cpp, src/prop/sat_solver_factory.h, src/prop/sat_solver_types.h, src/prop/theory_proxy.cpp, src/prop/theory_proxy.h, src/smt/command.cpp, src/smt/command.h, src/smt/command_list.cpp, src/smt/command_list.h, src/smt/dump.cpp, src/smt/dump.h, src/smt/logic_exception.h, src/smt/logic_request.cpp, src/smt/logic_request.h, src/smt/managed_ostreams.cpp, src/smt/managed_ostreams.h, src/smt/model.cpp, src/smt/model.h, src/smt/model_core_builder.cpp, src/smt/model_core_builder.h, src/smt/smt_engine.cpp, src/smt/smt_engine.h, src/smt/smt_engine_scope.cpp, src/smt/smt_engine_scope.h, src/smt/smt_statistics_registry.cpp, src/smt/smt_statistics_registry.h, src/smt/term_formula_removal.cpp, src/smt/term_formula_removal.h, src/smt/update_ostream.h, src/smt_util/boolean_simplification.cpp, src/smt_util/boolean_simplification.h, src/smt_util/lemma_channels.cpp, src/smt_util/lemma_channels.h, src/smt_util/lemma_input_channel.h, src/smt_util/lemma_output_channel.h, src/smt_util/nary_builder.cpp, src/smt_util/nary_builder.h, src/smt_util/node_visitor.h, src/theory/arith/approx_simplex.cpp, src/theory/arith/approx_simplex.h, src/theory/arith/arith_ite_utils.cpp, src/theory/arith/arith_ite_utils.h, src/theory/arith/arith_msum.cpp, src/theory/arith/arith_msum.h, src/theory/arith/arith_rewriter.cpp, src/theory/arith/arith_rewriter.h, src/theory/arith/arith_static_learner.cpp, src/theory/arith/arith_static_learner.h, src/theory/arith/arith_utilities.h, src/theory/arith/arithvar.cpp, src/theory/arith/arithvar.h, src/theory/arith/arithvar_node_map.h, src/theory/arith/attempt_solution_simplex.cpp, src/theory/arith/attempt_solution_simplex.h, src/theory/arith/bound_counts.h, src/theory/arith/callbacks.cpp, src/theory/arith/callbacks.h, src/theory/arith/congruence_manager.cpp, src/theory/arith/congruence_manager.h, src/theory/arith/constraint.cpp, src/theory/arith/constraint.h, src/theory/arith/constraint_forward.h, src/theory/arith/cut_log.cpp, src/theory/arith/cut_log.h, src/theory/arith/delta_rational.cpp, src/theory/arith/delta_rational.h, src/theory/arith/dio_solver.cpp, src/theory/arith/dio_solver.h, src/theory/arith/dual_simplex.cpp, src/theory/arith/dual_simplex.h, src/theory/arith/error_set.cpp, src/theory/arith/error_set.h, src/theory/arith/fc_simplex.cpp, src/theory/arith/fc_simplex.h, src/theory/arith/infer_bounds.cpp, src/theory/arith/infer_bounds.h, src/theory/arith/linear_equality.cpp, src/theory/arith/linear_equality.h, src/theory/arith/matrix.cpp, src/theory/arith/matrix.h, src/theory/arith/nonlinear_extension.cpp, src/theory/arith/nonlinear_extension.h, src/theory/arith/normal_form.cpp, src/theory/arith/normal_form.h, src/theory/arith/partial_model.cpp, src/theory/arith/partial_model.h, src/theory/arith/simplex.cpp, src/theory/arith/simplex.h, src/theory/arith/simplex_update.cpp, src/theory/arith/simplex_update.h, src/theory/arith/soi_simplex.cpp, src/theory/arith/soi_simplex.h, src/theory/arith/tableau.cpp, src/theory/arith/tableau.h, src/theory/arith/tableau_sizes.cpp, src/theory/arith/tableau_sizes.h, src/theory/arith/theory_arith.cpp, src/theory/arith/theory_arith.h, src/theory/arith/theory_arith_private.cpp, src/theory/arith/theory_arith_private.h, src/theory/arith/theory_arith_private_forward.h, src/theory/arith/theory_arith_type_rules.h, src/theory/arith/type_enumerator.h, src/theory/arrays/array_info.cpp, src/theory/arrays/array_info.h, src/theory/arrays/array_proof_reconstruction.cpp, src/theory/arrays/array_proof_reconstruction.h, src/theory/arrays/static_fact_manager.cpp, src/theory/arrays/static_fact_manager.h, src/theory/arrays/theory_arrays.cpp, src/theory/arrays/theory_arrays.h, src/theory/arrays/theory_arrays_rewriter.cpp, src/theory/arrays/theory_arrays_rewriter.h, src/theory/arrays/theory_arrays_type_rules.h, src/theory/arrays/type_enumerator.h, src/theory/arrays/union_find.cpp, src/theory/arrays/union_find.h, src/theory/assertion.cpp, src/theory/assertion.h, src/theory/atom_requests.cpp, src/theory/atom_requests.h, src/theory/booleans/circuit_propagator.cpp, src/theory/booleans/circuit_propagator.h, src/theory/booleans/theory_bool.cpp, src/theory/booleans/theory_bool.h, src/theory/booleans/theory_bool_rewriter.cpp, src/theory/booleans/theory_bool_rewriter.h, src/theory/booleans/theory_bool_type_rules.h, src/theory/booleans/type_enumerator.h, src/theory/builtin/theory_builtin.cpp, src/theory/builtin/theory_builtin.h, src/theory/builtin/theory_builtin_rewriter.cpp, src/theory/builtin/theory_builtin_rewriter.h, src/theory/builtin/theory_builtin_type_rules.h, src/theory/builtin/type_enumerator.cpp, src/theory/builtin/type_enumerator.h, src/theory/bv/abstraction.cpp, src/theory/bv/abstraction.h, src/theory/bv/bitblast/aig_bitblaster.cpp, src/theory/bv/bitblast/aig_bitblaster.h, src/theory/bv/bitblast/bitblast_strategies_template.h, src/theory/bv/bitblast/bitblast_utils.h, src/theory/bv/bitblast/bitblaster.h, src/theory/bv/bitblast/eager_bitblaster.cpp, src/theory/bv/bitblast/eager_bitblaster.h, src/theory/bv/bitblast/lazy_bitblaster.cpp, src/theory/bv/bitblast/lazy_bitblaster.h, src/theory/bv/bv_eager_solver.cpp, src/theory/bv/bv_eager_solver.h, src/theory/bv/bv_inequality_graph.cpp, src/theory/bv/bv_inequality_graph.h, src/theory/bv/bv_quick_check.cpp, src/theory/bv/bv_quick_check.h, src/theory/bv/bv_subtheory.h, src/theory/bv/bv_subtheory_algebraic.cpp, src/theory/bv/bv_subtheory_algebraic.h, src/theory/bv/bv_subtheory_bitblast.cpp, src/theory/bv/bv_subtheory_bitblast.h, src/theory/bv/bv_subtheory_core.cpp, src/theory/bv/bv_subtheory_core.h, src/theory/bv/bv_subtheory_inequality.cpp, src/theory/bv/bv_subtheory_inequality.h, src/theory/bv/slicer.cpp, src/theory/bv/slicer.h, src/theory/bv/theory_bv.cpp, src/theory/bv/theory_bv.h, src/theory/bv/theory_bv_rewrite_rules.h, src/theory/bv/theory_bv_rewrite_rules_constant_evaluation.h, src/theory/bv/theory_bv_rewrite_rules_core.h, src/theory/bv/theory_bv_rewrite_rules_normalization.h, src/theory/bv/theory_bv_rewrite_rules_operator_elimination.h, src/theory/bv/theory_bv_rewrite_rules_simplification.h, src/theory/bv/theory_bv_rewriter.cpp, src/theory/bv/theory_bv_rewriter.h, src/theory/bv/theory_bv_type_rules.h, src/theory/bv/theory_bv_utils.cpp, src/theory/bv/theory_bv_utils.h, src/theory/bv/type_enumerator.h, src/theory/care_graph.h, src/theory/datatypes/datatypes_rewriter.cpp, src/theory/datatypes/datatypes_rewriter.h, src/theory/datatypes/datatypes_sygus.cpp, src/theory/datatypes/datatypes_sygus.h, src/theory/datatypes/sygus_simple_sym.cpp, src/theory/datatypes/sygus_simple_sym.h, src/theory/datatypes/theory_datatypes.cpp, src/theory/datatypes/theory_datatypes.h, src/theory/datatypes/theory_datatypes_type_rules.h, src/theory/datatypes/type_enumerator.cpp, src/theory/datatypes/type_enumerator.h, src/theory/decision_manager.cpp, src/theory/decision_manager.h, src/theory/decision_strategy.cpp, src/theory/decision_strategy.h, src/theory/evaluator.cpp, src/theory/evaluator.h, src/theory/example/ecdata.cpp, src/theory/example/ecdata.h, src/theory/example/theory_uf_tim.cpp, src/theory/example/theory_uf_tim.h, src/theory/ext_theory.cpp, src/theory/ext_theory.h, src/theory/fp/fp_converter.cpp, src/theory/fp/fp_converter.h, src/theory/fp/theory_fp.cpp, src/theory/fp/theory_fp.h, src/theory/fp/theory_fp_rewriter.cpp, src/theory/fp/theory_fp_rewriter.h, src/theory/fp/theory_fp_type_rules.h, src/theory/fp/type_enumerator.h, src/theory/idl/idl_assertion.cpp, src/theory/idl/idl_assertion.h, src/theory/idl/idl_assertion_db.cpp, src/theory/idl/idl_assertion_db.h, src/theory/idl/idl_model.cpp, src/theory/idl/idl_model.h, src/theory/idl/theory_idl.cpp, src/theory/idl/theory_idl.h, src/theory/interrupted.h, src/theory/logic_info.cpp, src/theory/logic_info.h, src/theory/output_channel.h, src/theory/quantifiers/alpha_equivalence.cpp, src/theory/quantifiers/alpha_equivalence.h, src/theory/quantifiers/anti_skolem.cpp, src/theory/quantifiers/anti_skolem.h, src/theory/quantifiers/bv_inverter.cpp, src/theory/quantifiers/bv_inverter.h, src/theory/quantifiers/bv_inverter_utils.cpp, src/theory/quantifiers/bv_inverter_utils.h, src/theory/quantifiers/candidate_rewrite_database.cpp, src/theory/quantifiers/candidate_rewrite_database.h, src/theory/quantifiers/candidate_rewrite_filter.cpp, src/theory/quantifiers/candidate_rewrite_filter.h, src/theory/quantifiers/cegqi/ceg_arith_instantiator.cpp, src/theory/quantifiers/cegqi/ceg_arith_instantiator.h, src/theory/quantifiers/cegqi/ceg_bv_instantiator.cpp, src/theory/quantifiers/cegqi/ceg_bv_instantiator.h, src/theory/quantifiers/cegqi/ceg_bv_instantiator_utils.cpp, src/theory/quantifiers/cegqi/ceg_bv_instantiator_utils.h, src/theory/quantifiers/cegqi/ceg_dt_instantiator.cpp, src/theory/quantifiers/cegqi/ceg_dt_instantiator.h, src/theory/quantifiers/cegqi/ceg_epr_instantiator.cpp, src/theory/quantifiers/cegqi/ceg_epr_instantiator.h, src/theory/quantifiers/cegqi/ceg_instantiator.cpp, src/theory/quantifiers/cegqi/ceg_instantiator.h, src/theory/quantifiers/cegqi/inst_strategy_cegqi.cpp, src/theory/quantifiers/cegqi/inst_strategy_cegqi.h, src/theory/quantifiers/conjecture_generator.cpp, src/theory/quantifiers/conjecture_generator.h, src/theory/quantifiers/dynamic_rewrite.cpp, src/theory/quantifiers/dynamic_rewrite.h, src/theory/quantifiers/ematching/candidate_generator.cpp, src/theory/quantifiers/ematching/candidate_generator.h, src/theory/quantifiers/ematching/ho_trigger.cpp, src/theory/quantifiers/ematching/ho_trigger.h, src/theory/quantifiers/ematching/inst_match_generator.cpp, src/theory/quantifiers/ematching/inst_match_generator.h, src/theory/quantifiers/ematching/inst_strategy_e_matching.cpp, src/theory/quantifiers/ematching/inst_strategy_e_matching.h, src/theory/quantifiers/ematching/instantiation_engine.cpp, src/theory/quantifiers/ematching/instantiation_engine.h, src/theory/quantifiers/ematching/trigger.cpp, src/theory/quantifiers/ematching/trigger.h, src/theory/quantifiers/equality_infer.cpp, src/theory/quantifiers/equality_infer.h, src/theory/quantifiers/equality_query.cpp, src/theory/quantifiers/equality_query.h, src/theory/quantifiers/expr_miner.cpp, src/theory/quantifiers/expr_miner.h, src/theory/quantifiers/expr_miner_manager.cpp, src/theory/quantifiers/expr_miner_manager.h, src/theory/quantifiers/extended_rewrite.cpp, src/theory/quantifiers/extended_rewrite.h, src/theory/quantifiers/first_order_model.cpp, src/theory/quantifiers/first_order_model.h, src/theory/quantifiers/fmf/bounded_integers.cpp, src/theory/quantifiers/fmf/bounded_integers.h, src/theory/quantifiers/fmf/full_model_check.cpp, src/theory/quantifiers/fmf/full_model_check.h, src/theory/quantifiers/fmf/model_builder.cpp, src/theory/quantifiers/fmf/model_builder.h, src/theory/quantifiers/fmf/model_engine.cpp, src/theory/quantifiers/fmf/model_engine.h, src/theory/quantifiers/fun_def_process.cpp, src/theory/quantifiers/fun_def_process.h, src/theory/quantifiers/inst_match.cpp, src/theory/quantifiers/inst_match.h, src/theory/quantifiers/inst_match_trie.cpp, src/theory/quantifiers/inst_match_trie.h, src/theory/quantifiers/inst_propagator.cpp, src/theory/quantifiers/inst_propagator.h, src/theory/quantifiers/inst_strategy_enumerative.cpp, src/theory/quantifiers/inst_strategy_enumerative.h, src/theory/quantifiers/instantiate.cpp, src/theory/quantifiers/instantiate.h, src/theory/quantifiers/lazy_trie.cpp, src/theory/quantifiers/lazy_trie.h, src/theory/quantifiers/local_theory_ext.cpp, src/theory/quantifiers/local_theory_ext.h, src/theory/quantifiers/quant_conflict_find.cpp, src/theory/quantifiers/quant_conflict_find.h, src/theory/quantifiers/quant_epr.cpp, src/theory/quantifiers/quant_epr.h, src/theory/quantifiers/quant_relevance.cpp, src/theory/quantifiers/quant_relevance.h, src/theory/quantifiers/quant_split.cpp, src/theory/quantifiers/quant_split.h, src/theory/quantifiers/quant_util.cpp, src/theory/quantifiers/quant_util.h, src/theory/quantifiers/quantifiers_attributes.cpp, src/theory/quantifiers/quantifiers_attributes.h, src/theory/quantifiers/quantifiers_rewriter.cpp, src/theory/quantifiers/quantifiers_rewriter.h, src/theory/quantifiers/query_generator.cpp, src/theory/quantifiers/query_generator.h, src/theory/quantifiers/relevant_domain.cpp, src/theory/quantifiers/relevant_domain.h, src/theory/quantifiers/rewrite_engine.cpp, src/theory/quantifiers/rewrite_engine.h, src/theory/quantifiers/single_inv_partition.cpp, src/theory/quantifiers/single_inv_partition.h, src/theory/quantifiers/skolemize.cpp, src/theory/quantifiers/skolemize.h, src/theory/quantifiers/solution_filter.cpp, src/theory/quantifiers/solution_filter.h, src/theory/quantifiers/sygus/ce_guided_single_inv.cpp, src/theory/quantifiers/sygus/ce_guided_single_inv.h, src/theory/quantifiers/sygus/ce_guided_single_inv_sol.cpp, src/theory/quantifiers/sygus/ce_guided_single_inv_sol.h, src/theory/quantifiers/sygus/cegis.cpp, src/theory/quantifiers/sygus/cegis.h, src/theory/quantifiers/sygus/cegis_unif.cpp, src/theory/quantifiers/sygus/cegis_unif.h, src/theory/quantifiers/sygus/enum_stream_substitution.cpp, src/theory/quantifiers/sygus/enum_stream_substitution.h, src/theory/quantifiers/sygus/sygus_enumerator.cpp, src/theory/quantifiers/sygus/sygus_enumerator.h, src/theory/quantifiers/sygus/sygus_eval_unfold.cpp, src/theory/quantifiers/sygus/sygus_eval_unfold.h, src/theory/quantifiers/sygus/sygus_explain.cpp, src/theory/quantifiers/sygus/sygus_explain.h, src/theory/quantifiers/sygus/sygus_grammar_cons.cpp, src/theory/quantifiers/sygus/sygus_grammar_cons.h, src/theory/quantifiers/sygus/sygus_grammar_norm.cpp, src/theory/quantifiers/sygus/sygus_grammar_norm.h, src/theory/quantifiers/sygus/sygus_grammar_red.cpp, src/theory/quantifiers/sygus/sygus_grammar_red.h, src/theory/quantifiers/sygus/sygus_invariance.cpp, src/theory/quantifiers/sygus/sygus_invariance.h, src/theory/quantifiers/sygus/sygus_module.cpp, src/theory/quantifiers/sygus/sygus_module.h, src/theory/quantifiers/sygus/sygus_pbe.cpp, src/theory/quantifiers/sygus/sygus_pbe.h, src/theory/quantifiers/sygus/sygus_process_conj.cpp, src/theory/quantifiers/sygus/sygus_process_conj.h, src/theory/quantifiers/sygus/sygus_repair_const.cpp, src/theory/quantifiers/sygus/sygus_repair_const.h, src/theory/quantifiers/sygus/sygus_unif.cpp, src/theory/quantifiers/sygus/sygus_unif.h, src/theory/quantifiers/sygus/sygus_unif_io.cpp, src/theory/quantifiers/sygus/sygus_unif_io.h, src/theory/quantifiers/sygus/sygus_unif_rl.cpp, src/theory/quantifiers/sygus/sygus_unif_rl.h, src/theory/quantifiers/sygus/sygus_unif_strat.cpp, src/theory/quantifiers/sygus/sygus_unif_strat.h, src/theory/quantifiers/sygus/synth_conjecture.cpp, src/theory/quantifiers/sygus/synth_conjecture.h, src/theory/quantifiers/sygus/synth_engine.cpp, src/theory/quantifiers/sygus/synth_engine.h, src/theory/quantifiers/sygus/term_database_sygus.cpp, src/theory/quantifiers/sygus/term_database_sygus.h, src/theory/quantifiers/sygus_sampler.cpp, src/theory/quantifiers/sygus_sampler.h, src/theory/quantifiers/term_canonize.cpp, src/theory/quantifiers/term_canonize.h, src/theory/quantifiers/term_database.cpp, src/theory/quantifiers/term_database.h, src/theory/quantifiers/term_enumeration.cpp, src/theory/quantifiers/term_enumeration.h, src/theory/quantifiers/term_util.cpp, src/theory/quantifiers/term_util.h, src/theory/quantifiers/theory_quantifiers.cpp, src/theory/quantifiers/theory_quantifiers.h, src/theory/quantifiers/theory_quantifiers_type_rules.h, src/theory/quantifiers_engine.cpp, src/theory/quantifiers_engine.h, src/theory/rep_set.cpp, src/theory/rep_set.h, src/theory/rewriter.cpp, src/theory/rewriter.h, src/theory/rewriter_attributes.h, src/theory/rewriter_tables_template.h, src/theory/sep/theory_sep.cpp, src/theory/sep/theory_sep.h, src/theory/sep/theory_sep_rewriter.cpp, src/theory/sep/theory_sep_rewriter.h, src/theory/sep/theory_sep_type_rules.h, src/theory/sets/normal_form.h, src/theory/sets/rels_utils.h, src/theory/sets/theory_sets.cpp, src/theory/sets/theory_sets.h, src/theory/sets/theory_sets_private.cpp, src/theory/sets/theory_sets_private.h, src/theory/sets/theory_sets_rels.cpp, src/theory/sets/theory_sets_rels.h, src/theory/sets/theory_sets_rewriter.cpp, src/theory/sets/theory_sets_rewriter.h, src/theory/sets/theory_sets_type_enumerator.h, src/theory/sets/theory_sets_type_rules.h, src/theory/shared_terms_database.cpp, src/theory/shared_terms_database.h, src/theory/sort_inference.cpp, src/theory/sort_inference.h, src/theory/strings/regexp_elim.cpp, src/theory/strings/regexp_elim.h, src/theory/strings/regexp_operation.cpp, src/theory/strings/regexp_operation.h, src/theory/strings/regexp_solver.cpp, src/theory/strings/regexp_solver.h, src/theory/strings/skolem_cache.cpp, src/theory/strings/skolem_cache.h, src/theory/strings/theory_strings.cpp, src/theory/strings/theory_strings.h, src/theory/strings/theory_strings_preprocess.cpp, src/theory/strings/theory_strings_preprocess.h, src/theory/strings/theory_strings_rewriter.cpp, src/theory/strings/theory_strings_rewriter.h, src/theory/strings/theory_strings_type_rules.h, src/theory/strings/type_enumerator.h, src/theory/subs_minimize.cpp, src/theory/subs_minimize.h, src/theory/substitutions.cpp, src/theory/substitutions.h, src/theory/term_registration_visitor.cpp, src/theory/term_registration_visitor.h, src/theory/theory.cpp, src/theory/theory.h, src/theory/theory_engine.cpp, src/theory/theory_engine.h, src/theory/theory_model.cpp, src/theory/theory_model.h, src/theory/theory_model_builder.cpp, src/theory/theory_model_builder.h, src/theory/theory_registrar.h, src/theory/theory_test_utils.h, src/theory/theory_traits_template.h, src/theory/type_enumerator.h, src/theory/type_enumerator_template.cpp, src/theory/type_set.cpp, src/theory/type_set.h, src/theory/uf/equality_engine.cpp, src/theory/uf/equality_engine.h, src/theory/uf/equality_engine_types.h, src/theory/uf/symmetry_breaker.cpp, src/theory/uf/symmetry_breaker.h, src/theory/uf/theory_uf.cpp, src/theory/uf/theory_uf.h, src/theory/uf/theory_uf_model.cpp, src/theory/uf/theory_uf_model.h, src/theory/uf/theory_uf_rewriter.h, src/theory/uf/theory_uf_strong_solver.cpp, src/theory/uf/theory_uf_strong_solver.h, src/theory/uf/theory_uf_type_rules.h, src/theory/valuation.cpp, src/theory/valuation.h, src/util/abstract_value.cpp, src/util/abstract_value.h, src/util/bin_heap.h, src/util/bitvector.cpp, src/util/bitvector.h, src/util/bool.h, src/util/cardinality.cpp, src/util/cardinality.h, src/util/debug.h, src/util/dense_map.h, src/util/divisible.cpp, src/util/divisible.h, src/util/floatingpoint.cpp, src/util/floatingpoint.h.in, src/util/gmp_util.h, src/util/hash.h, src/util/index.cpp, src/util/index.h, src/util/integer.h.in, src/util/integer_cln_imp.cpp, src/util/integer_cln_imp.h, src/util/integer_gmp_imp.cpp, src/util/integer_gmp_imp.h, src/util/maybe.h, src/util/ostream_util.cpp, src/util/ostream_util.h, src/util/proof.h, src/util/random.cpp, src/util/random.h, src/util/rational.h.in, src/util/rational_cln_imp.cpp, src/util/rational_cln_imp.h, src/util/rational_gmp_imp.cpp, src/util/rational_gmp_imp.h, src/util/regexp.cpp, src/util/regexp.h, src/util/resource_manager.cpp, src/util/resource_manager.h, src/util/result.cpp, src/util/result.h, src/util/safe_print.cpp, src/util/safe_print.h, src/util/sampler.cpp, src/util/sampler.h, src/util/sexpr.cpp, src/util/sexpr.h, src/util/smt2_quote_string.cpp, src/util/smt2_quote_string.h, src/util/statistics.cpp, src/util/statistics.h, src/util/statistics_registry.cpp, src/util/statistics_registry.h, src/util/tuple.h, src/util/unsafe_interrupt_exception.h, src/util/utility.h, test/java/BitVectors.java, test/java/BitVectorsAndArrays.java, test/java/Combination.java, test/java/HelloWorld.java, test/java/LinearArith.java, test/system/CVC4JavaTest.java, test/system/boilerplate.cpp, test/system/ouroborous.cpp, test/system/reset_assertions.cpp, test/system/sep_log_api.cpp, test/system/smt2_compliance.cpp, test/system/statistics.cpp, test/system/two_smt_engines.cpp, test/unit/api/datatype_api_black.h, test/unit/api/opterm_black.h, test/unit/api/solver_black.h, test/unit/api/sort_black.h, test/unit/api/term_black.h, test/unit/base/map_util_black.h, test/unit/context/cdlist_black.h, test/unit/context/cdmap_black.h, test/unit/context/cdmap_white.h, test/unit/context/cdo_black.h, test/unit/context/context_black.h, test/unit/context/context_mm_black.h, test/unit/context/context_white.h, test/unit/expr/attribute_black.h, test/unit/expr/attribute_white.h, test/unit/expr/expr_manager_public.h, test/unit/expr/expr_public.h, test/unit/expr/kind_black.h, test/unit/expr/kind_map_black.h, test/unit/expr/node_black.h, test/unit/expr/node_builder_black.h, test/unit/expr/node_manager_black.h, test/unit/expr/node_manager_white.h, test/unit/expr/node_self_iterator_black.h, test/unit/expr/node_white.h, test/unit/expr/symbol_table_black.h, test/unit/expr/type_cardinality_public.h, test/unit/expr/type_node_white.h, test/unit/main/interactive_shell_black.h, test/unit/memory.h, test/unit/parser/parser_black.h, test/unit/parser/parser_builder_black.h, test/unit/preprocessing/pass_bv_gauss_white.h, test/unit/proof/drat_proof_black.h, test/unit/proof/lfsc_proof_printer_black.h, test/unit/prop/cnf_stream_white.h, test/unit/theory/evaluator_white.h, test/unit/theory/logic_info_white.h, test/unit/theory/theory_arith_white.h, test/unit/theory/theory_black.h, test/unit/theory/theory_bv_white.h, test/unit/theory/theory_engine_white.h, test/unit/theory/theory_quantifiers_bv_instantiator_white.h, test/unit/theory/theory_quantifiers_bv_inverter_white.h, test/unit/theory/theory_strings_rewriter_white.h, test/unit/theory/theory_strings_skolem_cache_black.h, test/unit/theory/theory_white.h, test/unit/theory/type_enumerator_white.h, test/unit/util/array_store_all_black.h, test/unit/util/assert_white.h, test/unit/util/binary_heap_black.h, test/unit/util/bitvector_black.h, test/unit/util/boolean_simplification_black.h, test/unit/util/cardinality_public.h, test/unit/util/check_white.h, test/unit/util/configuration_black.h, test/unit/util/datatype_black.h, test/unit/util/exception_black.h, test/unit/util/integer_black.h, test/unit/util/integer_white.h, test/unit/util/listener_black.h, test/unit/util/output_black.h, test/unit/util/rational_black.h, test/unit/util/rational_white.h, test/unit/util/stats_black.h",1009,29,72,9.850540639245153,7,242269,1009,1688.2626362735382,69,0,135,0,0,0
cvc5,a6bd02c5c442b806b5e01fed40ab9d1017e42bc3,361a1798d66266679abdb8c9033089db8de74320,Haniel Barbosa,hanielbbarbosa@gmail.com,2019-03-28 18:30:50,1553769050,fix ex_bv.plf (#2905),4,4,proofs/signatures/ex_bv.plf,1,1,1,-0.0,7,0,1,1692.0,7,0,4,0,1,0
cvc5,361a1798d66266679abdb8c9033089db8de74320,952ee3698e7760ccbd90fac5691d455d807af3a6,Andrew Reynolds,andrew.j.reynolds@gmail.com,2019-03-28 22:21:34,1553782894,Fix issues in cvc parser (#2901),82,66,"src/parser/cvc/Cvc.g, test/regress/regress0/rels/rel_join_5.cvc, test/regress/regress0/rels/rel_tc_11.cvc, test/regress/regress0/rels/rel_tc_3.cvc, test/regress/regress0/rels/rel_tc_3_1.cvc, test/regress/regress0/rels/rel_tc_7.cvc, test/regress/regress0/rels/rel_tc_8.cvc, test/regress/regress0/rels/rel_tp_3_1.cvc, test/regress/regress0/rels/rel_tp_join_0.cvc, test/regress/regress0/rels/rel_tp_join_1.cvc, test/regress/regress0/rels/rel_tp_join_2.cvc, test/regress/regress0/rels/rel_tp_join_3.cvc, test/regress/regress0/rels/rel_tp_join_eq_0.cvc, test/regress/regress0/rels/rel_tp_join_pro_0.cvc, test/regress/regress0/rels/rel_transpose_0.cvc, test/regress/regress0/rels/rel_transpose_1.cvc, test/regress/regress0/rels/rel_transpose_1_1.cvc, test/regress/regress0/rels/rel_transpose_3.cvc, test/regress/regress0/rels/rel_transpose_4.cvc, test/regress/regress0/rels/rel_transpose_6.cvc, test/regress/regress1/rels/rel_pressure_0.cvc, test/regress/regress1/rels/rel_tc_10_1.cvc, test/regress/regress1/rels/rel_tc_4.cvc, test/regress/regress1/rels/rel_tc_4_1.cvc, test/regress/regress1/rels/rel_tc_5_1.cvc, test/regress/regress1/rels/rel_tc_6.cvc, test/regress/regress1/rels/rel_tc_9_1.cvc, test/regress/regress1/rels/rel_tp_join_2_1.cvc",28,2,3,3.448915621098715,7,0,28,831.5,85,0,22,0,1,0
cvc5,952ee3698e7760ccbd90fac5691d455d807af3a6,a1decafaf4c7c46a4eda3d816e9a8799b4c96ad3,Andres Noetzli,andres.noetzli@gmail.com,2019-03-28 21:02:37,1553778157,Fix freeing nodes with maxed refcounts (#2903),31,5,"src/expr/node_manager.cpp, test/unit/expr/node_manager_white.h",2,2,2,0.9910760598382222,7,673,2,3339.5,78,0,39,0,1,0
cvc5,a1decafaf4c7c46a4eda3d816e9a8799b4c96ad3,327fe83f2e0533d53902645364180bc51ff20dcc,Haniel Barbosa,hanielbbarbosa@gmail.com,2019-03-29 00:02:03,1553788923,removing deprecated rewriting signature / example (#2906),0,164,,2,0,0,0.8112781244591328,7,0,1,0,8,0,0,0,0,0
cvc5,327fe83f2e0533d53902645364180bc51ff20dcc,c59aefd26d391cb01f0e27b050e553afe49a69d8,Andrew Reynolds,andrew.j.reynolds@gmail.com,2019-03-29 08:38:30,1553819910,Apply empty splits more aggressively in sets+cardinality (#2907),34,1,"src/theory/sets/theory_sets_private.cpp, test/regress/CMakeLists.txt, test/regress/regress1/sets/issue2904.smt2",3,2,3,0.8997559594359126,7,2021,3,862.6666666666666,113,0,57,0,0,0
cvc5,c59aefd26d391cb01f0e27b050e553afe49a69d8,995beb51ffe0334ce40391085a0d666f8e301eb3,Andrew Reynolds,andrew.j.reynolds@gmail.com,2019-04-01 10:36:38,1554086198,Modify strategy in sets+cardinality (#2909),29,24,src/theory/sets/theory_sets_private.cpp,1,1,1,-0.0,7,2027,1,2029.0,116,0,41,0,0,0
cvc5,995beb51ffe0334ce40391085a0d666f8e301eb3,fe18be6fe6ac58bf6ccdb1ca18c7fae2de881aaa,Andres Noetzli,andres.noetzli@gmail.com,2019-04-01 10:45:40,1554086740,Move slow string regression to regress3 (#2913),1,1,"test/regress/CMakeLists.txt, test/regress/regress3/strings/extf_d_perf.smt2",2,1,2,-0.0,7,0,2,282.5,80,0,18,0,0,0
cvc5,fe18be6fe6ac58bf6ccdb1ca18c7fae2de881aaa,ae536749a2342e51c450deb62a13d5cfda965881,makaimann,makaim@stanford.edu,2019-04-01 13:22:04,1554096124,"Update includes to use cvc4 top-level directory in examples (#2877)

Because the headers are now installed in a `cvc4` directory, the examples need to include from there as well.",11,9,"examples/api/bitvectors-new.cpp, examples/api/bitvectors_and_arrays-new.cpp, examples/api/combination-new.cpp, examples/api/datatypes-new.cpp, examples/api/extract-new.cpp, examples/api/helloworld-new.cpp, examples/api/linear_arith-new.cpp, examples/api/sets-new.cpp, examples/api/strings-new.cpp",9,1,1,3.1464393446710153,7,478,9,277.0,2,0,16,0,0,0
cvc5,ae536749a2342e51c450deb62a13d5cfda965881,41355e412a142809f63a1939a4515486ccd4c6fb,Andres Noetzli,andres.noetzli@gmail.com,2019-04-01 14:26:23,1554099983,"Fix RewriteITEBv to ensure rewrite to fixpoint (#2878)

`TheoryBVRewriter::RewriteITEBv()` is currently always returning the
status `REWRITE_DONE`. This can result in a situation where a rewritten
node can be rewritten again (which breaks the contract of our rewriter).
The unit test in this commit illustrates the issue. The commit fixes the
issue by returning `REWRITE_AGAIN` or `REWRITE_AGAIN_FULL` if a node
changed. `REWRITE_AGAIN_FULL` is needed if the resulting node may have a
child that is not a subterm of the original expression.",105,3,"src/theory/bv/theory_bv_rewriter.cpp, test/unit/theory/CMakeLists.txt, test/unit/theory/theory_bv_rewriter_white.h",3,2,2,0.6045442762974305,7,625,3,1191.0,82,0,74,0,1,0
cvc5,41355e412a142809f63a1939a4515486ccd4c6fb,8a9ffdbb248ddcc6a41f628f6dcbc070b57e6a28,Andres Noetzli,andres.noetzli@gmail.com,2019-04-01 15:07:05,1554102425,"FP: Fix wrong model due to partial assignment (#2910)

For a simple query `(not (= (fp.isSubnormal x) false))`, we were getting
a wrong model. The issue was that `(sign x)` was not assigned a value
and did not appear in the shared terms. In
`TheoryFp::collectModelInfo()`, however, we generate an expression that
connects the components of `x` to `x`, which contains `(sign x)`. As a
result, the normalization while building a model did not result in a
constant. This commit fixes the issue by marking `(sign x)` (and
`(significand x)`) as assignable. Assignable terms can take any value
while building a model if there is no existing value.",55,0,"src/theory/fp/theory_fp.cpp, src/theory/theory_model_builder.cpp, test/regress/CMakeLists.txt, test/regress/regress0/fp/wrong-model.smt2",4,2,4,1.3890205608322215,7,1861,4,664.75,85,0,62,0,1,0
cvc5,8a9ffdbb248ddcc6a41f628f6dcbc070b57e6a28,e1f463c0884dccf8fe513bd59bfd7ba6a8592183,Andrew Reynolds,andrew.j.reynolds@gmail.com,2019-04-03 15:53:52,1554278032,Fix combination of datatypes + strings in PBE (#2930),57,17,"src/theory/quantifiers/sygus/sygus_unif_io.cpp, test/regress/CMakeLists.txt, test/regress/regress1/sygus/issue2914.sy",3,2,3,1.0300329777841208,7,1432,3,310.3333333333333,117,0,64,0,1,0
cvc5,e1f463c0884dccf8fe513bd59bfd7ba6a8592183,03826e58d652e3cb007504d0d07a1826a9436537,Aina Niemetz,aina.niemetz@gmail.com,2019-04-03 15:53:49,1554278029,get-authors: Add GitHub user ayveejay -> Andrew V. Jones.,1,0,contrib/get-authors,1,1,1,-0.0,7,0,1,3393.0,1078,0,3,0,0,0
cvc5,03826e58d652e3cb007504d0d07a1826a9436537,29685eaf8d49b12c04cbb4767f832cc623709aab,Aina Niemetz,aina.niemetz@gmail.com,2019-04-03 15:54:55,1554278095,Update copyright headers.,16,16,"examples/api/bitvectors-new.cpp, examples/api/bitvectors_and_arrays-new.cpp, examples/api/combination-new.cpp, examples/api/datatypes-new.cpp, examples/api/extract-new.cpp, examples/api/helloworld-new.cpp, examples/api/linear_arith-new.cpp, examples/api/sets-new.cpp, examples/api/strings-new.cpp, src/options/bool_to_bv_mode.cpp, src/options/bool_to_bv_mode.h, src/preprocessing/passes/sep_skolem_emp.cpp, src/theory/fp/theory_fp.cpp, src/theory/theory_model_builder.cpp, test/system/sep_log_api.cpp, test/unit/expr/node_manager_white.h",16,6,7,4.0,7,2696,16,539.375,1079,0,106,0,0,0
cvc5,29685eaf8d49b12c04cbb4767f832cc623709aab,ae712e32aae0947205f506f7caacc670311c6763,Haniel Barbosa,hanielbbarbosa@gmail.com,2019-04-03 21:06:25,1554296785,Update release notes and lib version (#2933),7,11,"CMakeLists.txt, RELEASE-NOTES",2,0,1,0.5032583347756457,7,0,2,1472.0,10,0,0,0,0,0
cvc5,ae712e32aae0947205f506f7caacc670311c6763,a44c62c18a8380c089764decdd4c533268b4ef30,Haniel Barbosa,hanielbbarbosa@gmail.com,2019-04-04 12:31:21,1554352281,"Ignoring FP benchmarks with ""unsafe"" sizes unless option (#2931)",32,4,"src/options/fp_options.toml, src/theory/fp/theory_fp.cpp, test/regress/regress0/fp/abs-unsound.smt2, test/regress/regress0/fp/abs-unsound2.smt2, test/regress/regress0/fp/wrong-model.smt2",5,3,3,1.4811246544569021,7,909,5,423.6,12,0,76,0,0,0
cvc5,a44c62c18a8380c089764decdd4c533268b4ef30,7de51f8f53db83ebbc871a4d437c382b6ef8d2ba,Haniel Barbosa,hanielbbarbosa@gmail.com,2019-04-04 13:30:27,1554355827,adding sygus news (#2934),9,2,NEWS,1,0,1,-0.0,7,0,1,3439.0,17,0,0,0,0,0
cvc5,7de51f8f53db83ebbc871a4d437c382b6ef8d2ba,d663720936b0b873c917fc3fce9999f069bea0f1,Alex Ozdemir,aozdemir@hmc.edu,2019-04-05 10:03:05,1554429785,"SatClauseSetHashFunction (#2916)

* SatClauseHashFunction

Added to the same file as SatLiteralHashFunction.

* clang-format

Thanks Andres!",16,0,src/prop/sat_solver_types.h,1,1,1,-0.0,7,91,1,2563.0,106,0,3,0,0,0
cvc5,d663720936b0b873c917fc3fce9999f069bea0f1,afc70ac962185b97e10f4e796f46c638ed1e18ab,Haniel Barbosa,hanielbbarbosa@gmail.com,2019-04-05 14:01:33,1554444093,fix fp issue (#2940),17,11,"src/theory/fp/theory_fp.cpp, test/regress/regress1/rr-verify/fp-arith.sy, test/regress/regress1/rr-verify/fp-bool.sy, test/regress/regress2/sygus/min_IC_1.sy",4,2,3,1.2916919971380594,7,915,4,504.0,18,0,69,0,1,0
cvc5,afc70ac962185b97e10f4e796f46c638ed1e18ab,880f0b719479ff9f9b415749b2ccf9016274a99d,Andrew Reynolds,andrew.j.reynolds@gmail.com,2019-04-05 15:31:20,1554449480,Fix another corner case of datatypes+PBE (#2938),71,16,"src/theory/quantifiers/sygus/sygus_unif_io.cpp, src/theory/quantifiers/sygus/sygus_unif_io.h, test/regress/CMakeLists.txt, test/regress/regress1/sygus/issue2935.sy",4,2,3,1.6106675368907455,7,1582,4,325.25,120,0,71,0,1,0
cvc5,880f0b719479ff9f9b415749b2ccf9016274a99d,4be22912d85ef4291439638d4dc3e9020eafb5d0,Haniel Barbosa,hanielbbarbosa@gmail.com,2019-04-05 16:02:41,1554451361,prerelease -> release (#2941),1,1,CMakeLists.txt,1,0,1,-0.0,7,0,1,570.0,22,0,0,0,0,0
cvc5,4be22912d85ef4291439638d4dc3e9020eafb5d0,30b9f4ae91c9dba12ac0d9253d71bbd21a073e04,Haniel Barbosa,hanielbbarbosa@gmail.com,2019-04-08 11:26:58,1554694018,fix copyright year in configuration file (#2942),2,2,src/base/configuration.cpp,1,1,1,-0.0,7,274,1,1165.0,23,0,2,0,1,0
cvc5,30b9f4ae91c9dba12ac0d9253d71bbd21a073e04,10c06247232c096e09363120a903abc6bc5b71ab,Aina Niemetz,aina.niemetz@gmail.com,2019-04-08 17:11:57,1554714717,Fix email address of the bugs email list and delete obsolete RELEASE-NOTES.,1,156,README.md,2,0,1,0.09947705087439423,7,0,2,75.0,1095,0,0,1,1,0
cvc5,10c06247232c096e09363120a903abc6bc5b71ab,4c166cb8e9294fef3f92b5a361d145c83b27fcdd,Haniel Barbosa,hanielbbarbosa@gmail.com,2019-04-08 19:55:50,1554724550,"""prerelease -> release"" in INSTALL (#2944)",1,1,INSTALL.md,1,0,1,-0.0,7,0,1,194.0,24,0,0,0,0,0
cvc5,4c166cb8e9294fef3f92b5a361d145c83b27fcdd,84da9c0b4825abee124357a2b8e779965a9c7b30,Haniel Barbosa,hanielbbarbosa@gmail.com,2019-04-09 11:14:31,1554779671,Removing references to cvc4-bugs@... (#2945),3,5,"README.md, configure.sh",2,0,1,0.5435644431995964,7,0,2,145.0,25,0,0,1,1,0
cvc5,84da9c0b4825abee124357a2b8e779965a9c7b30,7d27cae34c7c3cda9a7827754fb5b8e485d515db,Andrew Reynolds,andrew.j.reynolds@gmail.com,2019-04-11 13:06:08,1554959168,"Eliminate Boolean ITE within terms, fixes 2947 (#2949)",24,6,"src/smt/term_formula_removal.cpp, test/regress/CMakeLists.txt, test/regress/regress0/uf/issue2947.smt2",3,2,3,1.136477334576122,7,209,3,448.0,124,0,35,0,1,0
cvc5,7d27cae34c7c3cda9a7827754fb5b8e485d515db,ea865ade5ab89f54425182fc580b439a58204c43,Haniel Barbosa,hanielbbarbosa@gmail.com,2019-04-12 16:16:33,1555056993,Referring to prerelease 1.8 (#2943),3,3,"CMakeLists.txt, INSTALL.md",2,0,1,0.9182958340544896,7,0,2,387.5,27,0,0,0,0,0
cvc5,ea865ade5ab89f54425182fc580b439a58204c43,8db8b76f4ee98e3166ee8bb2e1bad77380060edc,Andres Noetzli,andres.noetzli@gmail.com,2019-04-15 15:03:00,1555311780,"Initial version of run scripts for SMT-COMP 2019 (#2951)

For now, they are just copies of the 2018 version of the scripts.",324,0,"contrib/run-script-smtcomp2019, contrib/run-script-smtcomp2019-application, contrib/run-script-smtcomp2019-unsat-cores",3,3,1,1.5147315032204391,7,0,3,-1.0,89,0,0,0,0,0
cvc5,8db8b76f4ee98e3166ee8bb2e1bad77380060edc,3df27eab5e9da3bab7853c02bdea6a250623d2a5,makaimann,makaim@stanford.edu,2019-04-15 17:17:29,1555319849,"Check for rt library in configuration -- support for glibc<2.17 (#2854)

This is a minor fix for systems with glibc version < 2.17. In that case, we need to link with `-lrt` according to the clock_gettime man page.",11,0,"cmake/ConfigureCVC4.cmake, src/CMakeLists.txt",2,2,2,0.9940302114769565,7,0,2,412.0,11,0,9,0,1,0
cvc5,3df27eab5e9da3bab7853c02bdea6a250623d2a5,0da111d8649a535e83823c5d386c3582045e2fc4,Andrew Reynolds,andrew.j.reynolds@gmail.com,2019-04-16 10:38:35,1555382315,Minor simplifications to theory quantifiers (#2953),5,49,"src/options/quantifiers_options.toml, src/theory/quantifiers/theory_quantifiers.cpp, src/theory/quantifiers/theory_quantifiers.h, test/regress/regress0/quantifiers/ARI176e1.smt2, test/regress/regress0/quantifiers/nested-delta.smt2, test/regress/regress0/quantifiers/nested-inf.smt2",6,3,3,2.100856770164188,7,167,6,1645.5,127,0,84,0,0,0
cvc5,0da111d8649a535e83823c5d386c3582045e2fc4,a47b722aa31cdd036f83425b2a805e6a572a974b,Andrew Reynolds,andrew.j.reynolds@gmail.com,2019-04-16 11:53:45,1555386825,Stratify enumerative instantiation (#2954),340,176,"src/options/quantifiers_options.toml, src/theory/quantifiers/inst_strategy_enumerative.cpp, src/theory/quantifiers/inst_strategy_enumerative.h, test/regress/CMakeLists.txt, test/regress/regress2/quantifiers/syn874-1.smt2",5,3,4,1.0362765176456854,7,302,5,407.6,133,0,87,0,0,0
cvc5,a47b722aa31cdd036f83425b2a805e6a572a974b,2f7131c81078a964a4043ef79186cdcf91951974,Andres Noetzli,andres.noetzli@gmail.com,2019-04-16 12:11:37,1555387897,"Make bv{add,mul,and,or,xor,xnor} left-associative (#2955)

The most recent version of SMT-LIB defines bv{add,mul,and,or,xor,xnor}
[0, 1] as left-associative. CVC4 treats all but bvxnor as having
variable arity anyway but the arity check was too strict when using
`--strict-parsing`.  This commit changes the strict parsing check. For
bvxnor, it adds code to the parser that expands an application of bvxnor
into multiple applications of a binary bvxnor if needed.

References:
[0] http://smtlib.cs.uiowa.edu/theories-FixedSizeBitVectors.shtml (bvand,
bvor, bvadd, bvmul)
[1] http://smtlib.cs.uiowa.edu/logics-all.shtml#QF_BV (bvxor, bvxnor)",31,6,"src/parser/smt2/Smt2.g, src/parser/smt2/smt2.h, test/regress/CMakeLists.txt, test/regress/regress0/parser/bv_arity_smt2.6.smt2",4,2,3,1.4446110484466548,7,253,4,1778.25,92,0,34,0,1,0
cvc5,2f7131c81078a964a4043ef79186cdcf91951974,29a06b999c4637197282405df7040d6773bd3858,Andrew Reynolds,andrew.j.reynolds@gmail.com,2019-04-16 15:06:00,1555398360,Add interface for term enumeration (#2956),28,0,"src/theory/quantifiers/term_enumeration.cpp, src/theory/quantifiers/term_enumeration.h",2,1,1,0.863120568566631,7,117,2,530.0,138,0,51,0,0,0
cvc5,29a06b999c4637197282405df7040d6773bd3858,5b00f8d6804bf9f71d6169634341011f99d59b8b,Andrew Reynolds,andrew.j.reynolds@gmail.com,2019-04-17 10:26:46,1555468006,"Fix extended function decomposition (#2960)

Fixes #2958.

The issue was: we had substr(x,0,2) in R, and the ""derivable substitution"" modifed this to substr(substr(x,0,2),0,2) in R, since substr(x,0,2) was the representative of x (which is a bad choice, but regardless is legal). Then decomposition inference asked ""can i reduce substr(substr(x,0,2),0,2) in R""? It determines substr(substr(x,0,2),0,2) in R rewrites to substr(x,0,2) in R, which is already true. However, substr(x,0,2) in R was what we started with.

The fix makes things much more conservative: we never mark extended functions reduced based on decomposition, since there isnt a strong argument based on an ordering.",17,17,"src/theory/strings/theory_strings.cpp, test/regress/CMakeLists.txt, test/regress/regress0/strings/issue2958.smt2",3,2,3,0.9150241022482328,7,4222,3,874.6666666666666,140,0,80,0,1,0
cvc5,5b00f8d6804bf9f71d6169634341011f99d59b8b,d0c44a9e048558887ab75aaec4c493696c67b456,Andrew Reynolds,andrew.j.reynolds@gmail.com,2019-04-17 12:42:11,1555476131,More use of isClosure  (#2959),20,29,"src/expr/expr_manager_template.h, src/expr/node.h, src/expr/node_algorithm.cpp, src/preprocessing/passes/synth_rew_rules.cpp, src/printer/dagification_visitor.cpp, src/smt/term_formula_removal.cpp, src/theory/quantifiers/term_database.cpp, src/theory/substitutions.cpp, src/theory/term_registration_visitor.cpp, src/theory/theory_engine.cpp, src/theory/theory_model_builder.cpp, src/theory/uf/theory_uf.cpp",12,5,7,3.3803436511485954,7,6788,12,2158.3333333333335,143,0,81,0,0,0
cvc5,d0c44a9e048558887ab75aaec4c493696c67b456,d9a103f371cd800615b37fa378ad9d8b7681ee1c,Andrew Reynolds,andrew.j.reynolds@gmail.com,2019-04-17 16:35:51,1555490151,Cache explanations in the equality engine (#2937),145,44,"src/theory/uf/equality_engine.cpp, src/theory/uf/equality_engine.h",2,1,1,0.6561288920730015,7,1994,2,2686.0,155,0,54,0,0,0
cvc5,d9a103f371cd800615b37fa378ad9d8b7681ee1c,83e65b595123b2113ba81ebb942d2b320619f7a5,Andrew Reynolds,andrew.j.reynolds@gmail.com,2019-04-18 14:07:49,1555567669,Less aggressive caching in equality engine when proofs are enabled (#2964),25,11,"src/proof/uf_proof.cpp, src/theory/uf/equality_engine.cpp",2,2,2,0.3095434291503252,7,2284,2,1855.5,157,0,69,0,0,0
cvc5,83e65b595123b2113ba81ebb942d2b320619f7a5,3bb9a36fe79eb8025a09a59fdb88a9596b0a105d,Andrew Reynolds,andrew.j.reynolds@gmail.com,2019-04-18 14:45:39,1555569939,Fail fast strategy for propagating instances (#2939),308,112,"src/theory/quantifiers/quant_conflict_find.cpp, src/theory/quantifiers/quant_conflict_find.h, src/theory/quantifiers/quant_util.cpp, src/theory/quantifiers/quant_util.h, src/theory/quantifiers/term_database.cpp, src/theory/quantifiers/term_database.h",6,1,1,1.8241139460840683,7,3620,6,2255.6666666666665,159,0,56,0,0,0
cvc5,3bb9a36fe79eb8025a09a59fdb88a9596b0a105d,d43f7760866a1a26769dfdebdffebdaf35309f9c,Aina Niemetz,aina.niemetz@gmail.com,2019-04-22 16:32:25,1555921945,Add CONTRIBUTING file. (#2968),70,18,"CONTRIBUTING.md, README.md",2,0,1,0.9395876193289701,7,0,2,44.0,1097,0,0,0,0,0
cvc5,d43f7760866a1a26769dfdebdffebdaf35309f9c,53cade050e191c7c0dc0ebfae716a21162bd9b22,Andrew Reynolds,andrew.j.reynolds@gmail.com,2019-04-23 13:40:27,1555998027,Refactor normal forms in strings (#2897),861,445,"src/CMakeLists.txt, src/theory/strings/normal_form.cpp, src/theory/strings/normal_form.h, src/theory/strings/theory_strings.cpp, src/theory/strings/theory_strings.h",5,2,2,1.4838456978172965,7,4848,5,936.8,165,0,67,0,0,0
cvc5,53cade050e191c7c0dc0ebfae716a21162bd9b22,df5f15a17a8f3b92ae1ea776e5cf079d61e6404c,Alex Ozdemir,aozdemir@hmc.edu,2019-04-23 15:58:57,1556006337,"[BV] An option for SAT proof optimization (#2915)

* [BV] An option for SAT proof optimization

The option doesn't **do** anything yet, but exists.

* CopyPaste Fix: BvOptimizeSatProof documentation

It was the documentation for a different option. Now it has been
updated.

* Fix Typos per Mathias' review.

Co-Authored-By: alex-ozdemir <aozdemir@hmc.edu>",96,0,"src/options/bv_bitblast_mode.cpp, src/options/bv_bitblast_mode.h, src/options/bv_options.toml, src/options/options_handler.cpp, src/options/options_handler.h",5,1,1,2.00907204935474,7,2282,5,1041.4,107,0,12,0,1,0
cvc5,df5f15a17a8f3b92ae1ea776e5cf079d61e6404c,66a061418ac025024910994a41d6ad0080307daa,Aina Niemetz,aina.niemetz@gmail.com,2019-04-24 11:39:12,1556077152,CONTRIBUTING: Fix project leaders link.,4,4,CONTRIBUTING.md,1,0,1,-0.0,7,0,1,1.0,1099,0,0,0,1,0
cvc5,66a061418ac025024910994a41d6ad0080307daa,e256d610ca0db37e964b9a2b4530470e8589b958,Aina Niemetz,aina.niemetz@gmail.com,2019-04-24 11:46:33,1556077593,"README: Remove project leaders, history.",2,48,README.md,1,0,1,-0.0,7,0,1,91.0,1100,0,0,0,0,0
cvc5,e256d610ca0db37e964b9a2b4530470e8589b958,5f716f5aac730f976eac538cfbf47dcc651e54f7,Clark Barrett,barrett@cs.stanford.edu,2019-04-24 14:39:08,1556087948,Dco fix (#2973),15,10,CONTRIBUTING.md,1,0,1,-0.0,8,0,1,1.0,0,0,0,0,1,0
cvc5,5f716f5aac730f976eac538cfbf47dcc651e54f7,2ab48defab1f0c8918cd7612c1943be7503e4d30,Mathias Preiner,mathias.preiner@gmail.com,2019-04-24 15:39:24,1556091564,"Do not use __ prefix for header guards. (#2974)

Fixes 2887.",1309,1309,"src/api/cvc4cpp.h, src/api/cvc4cppkind.h, src/base/configuration.h, src/base/configuration_private.h, src/base/cvc4_assert.h, src/base/cvc4_check.h, src/base/exception.h, src/base/listener.h, src/base/map_util.h, src/base/modal_exception.h, src/base/output.h, src/bindings/java_iterator_adapter.h, src/bindings/java_stream_adapters.h, src/bindings/swig.h, src/context/backtrackable.h, src/context/cdhashmap.h, src/context/cdhashmap_forward.h, src/context/cdhashset.h, src/context/cdhashset_forward.h, src/context/cdinsert_hashmap_forward.h, src/context/cdlist.h, src/context/cdlist_forward.h, src/context/cdo.h, src/context/cdqueue.h, src/context/cdtrail_queue.h, src/context/context.h, src/context/context_mm.h, src/decision/decision_attributes.h, src/decision/decision_engine.h, src/decision/decision_strategy.h, src/decision/justification_heuristic.h, src/expr/array.h, src/expr/array_store_all.h, src/expr/ascription_type.h, src/expr/attribute.h, src/expr/attribute_internals.h, src/expr/chain.h, src/expr/datatype.h, src/expr/expr_iomanip.h, src/expr/expr_manager_scope.h, src/expr/expr_manager_template.h, src/expr/expr_stream.h, src/expr/expr_template.h, src/expr/kind_map.h, src/expr/kind_template.h, src/expr/matcher.h, src/expr/metakind_template.h, src/expr/node.h, src/expr/node_algorithm.h, src/expr/node_builder.h, src/expr/node_manager.h, src/expr/node_manager_listeners.h, src/expr/node_self_iterator.h, src/expr/node_trie.h, src/expr/node_value.h, src/expr/pickle_data.h, src/expr/pickler.h, src/expr/record.h, src/expr/symbol_table.h, src/expr/type.h, src/expr/type_checker.h, src/expr/type_node.h, src/expr/type_properties_template.h, src/expr/variable_type_map.h, src/include/cvc4.h, src/include/cvc4_private.h, src/include/cvc4_private_library.h, src/include/cvc4_public.h, src/lib/clock_gettime.h, src/lib/ffs.h, src/lib/replacements.h, src/lib/strtok_r.h, src/main/command_executor.h, src/main/command_executor_portfolio.h, src/main/interactive_shell.h, src/main/main.h, src/main/portfolio.h, src/main/portfolio_util.h, src/options/argument_extender.h, src/options/argument_extender_implementation.h, src/options/arith_heuristic_pivot_rule.h, src/options/arith_propagation_mode.h, src/options/arith_unate_lemma_mode.h, src/options/base_handlers.h, src/options/bool_to_bv_mode.h, src/options/bv_bitblast_mode.h, src/options/datatypes_modes.h, src/options/decision_mode.h, src/options/decision_weight.h, src/options/language.h, src/options/module_template.h, src/options/open_ostream.h, src/options/option_exception.h, src/options/options.h, src/options/options_handler.h, src/options/options_holder_template.h, src/options/printer_modes.h, src/options/quantifiers_modes.h, src/options/set_language.h, src/options/smt_modes.h, src/options/strings_process_loop_mode.h, src/options/sygus_out_mode.h, src/options/ufss_mode.h, src/parser/antlr_input.h, src/parser/antlr_line_buffered_input.h, src/parser/antlr_tracing.h, src/parser/bounded_token_buffer.h, src/parser/bounded_token_factory.h, src/parser/cvc/cvc_input.h, src/parser/input.h, src/parser/line_buffer.h, src/parser/memory_mapped_input_buffer.h, src/parser/parser.h, src/parser/parser_builder.h, src/parser/parser_exception.h, src/parser/smt1/smt1.h, src/parser/smt1/smt1_input.h, src/parser/smt2/smt2.h, src/parser/smt2/smt2_input.h, src/parser/smt2/sygus_input.h, src/parser/tptp/tptp.h, src/parser/tptp/tptp_input.h, src/preprocessing/assertion_pipeline.h, src/preprocessing/passes/apply_substs.h, src/preprocessing/passes/apply_to_const.h, src/preprocessing/passes/bool_to_bv.h, src/preprocessing/passes/bv_abstraction.h, src/preprocessing/passes/bv_ackermann.h, src/preprocessing/passes/bv_eager_atoms.h, src/preprocessing/passes/bv_gauss.h, src/preprocessing/passes/bv_intro_pow2.h, src/preprocessing/passes/bv_to_bool.h, src/preprocessing/passes/extended_rewriter_pass.h, src/preprocessing/passes/global_negate.h, src/preprocessing/passes/int_to_bv.h, src/preprocessing/passes/ite_removal.h, src/preprocessing/passes/ite_simp.h, src/preprocessing/passes/miplib_trick.h, src/preprocessing/passes/nl_ext_purify.h, src/preprocessing/passes/non_clausal_simp.h, src/preprocessing/passes/pseudo_boolean_processor.h, src/preprocessing/passes/quantifier_macros.h, src/preprocessing/passes/quantifiers_preprocess.h, src/preprocessing/passes/real_to_int.h, src/preprocessing/passes/rewrite.h, src/preprocessing/passes/sep_skolem_emp.h, src/preprocessing/passes/sort_infer.h, src/preprocessing/passes/static_learning.h, src/preprocessing/passes/sygus_abduct.h, src/preprocessing/passes/sygus_inference.h, src/preprocessing/passes/symmetry_breaker.h, src/preprocessing/passes/symmetry_detect.h, src/preprocessing/passes/synth_rew_rules.h, src/preprocessing/passes/theory_preprocess.h, src/preprocessing/passes/unconstrained_simplifier.h, src/preprocessing/preprocessing_pass.h, src/preprocessing/preprocessing_pass_context.h, src/preprocessing/preprocessing_pass_registry.h, src/preprocessing/util/ite_utilities.h, src/printer/ast/ast_printer.h, src/printer/cvc/cvc_printer.h, src/printer/dagification_visitor.h, src/printer/printer.h, src/printer/smt2/smt2_printer.h, src/printer/sygus_print_callback.h, src/printer/tptp/tptp_printer.h, src/proof/arith_proof.h, src/proof/arith_proof_recorder.h, src/proof/array_proof.h, src/proof/bitvector_proof.h, src/proof/clausal_bitvector_proof.h, src/proof/clause_id.h, src/proof/cnf_proof.h, src/proof/dimacs_printer.h, src/proof/drat/drat_proof.h, src/proof/er/er_proof.h, src/proof/lemma_proof.h, src/proof/lfsc_proof_printer.h, src/proof/lrat/lrat_proof.h, src/proof/proof.h, src/proof/proof_manager.h, src/proof/proof_output_channel.h, src/proof/resolution_bitvector_proof.h, src/proof/sat_proof.h, src/proof/sat_proof_implementation.h, src/proof/simplify_boolean_node.h, src/proof/skolemization_manager.h, src/proof/theory_proof.h, src/proof/uf_proof.h, src/proof/unsat_core.h, src/prop/bv_sat_solver_notify.h, src/prop/cadical.h, src/prop/cnf_stream.h, src/prop/cryptominisat.h, src/prop/prop_engine.h, src/prop/registrar.h, src/prop/sat_solver.h, src/prop/sat_solver_factory.h, src/prop/theory_proxy.h, src/smt/command.h, src/smt/command_list.h, src/smt/dump.h, src/smt/logic_exception.h, src/smt/logic_request.h, src/smt/managed_ostreams.h, src/smt/model.h, src/smt/model_core_builder.h, src/smt/smt_engine.h, src/smt/smt_engine_scope.h, src/smt/update_ostream.h, src/smt_util/boolean_simplification.h, src/smt_util/lemma_channels.h, src/smt_util/lemma_input_channel.h, src/smt_util/lemma_output_channel.h, src/theory/arith/arith_ite_utils.h, src/theory/arith/arith_msum.h, src/theory/arith/arith_rewriter.h, src/theory/arith/arith_static_learner.h, src/theory/arith/arith_utilities.h, src/theory/arith/arithvar_node_map.h, src/theory/arith/constraint.h, src/theory/arith/constraint_forward.h, src/theory/arith/dio_solver.h, src/theory/arith/nonlinear_extension.h, src/theory/arith/normal_form.h, src/theory/arith/partial_model.h, src/theory/arith/theory_arith_type_rules.h, src/theory/arith/type_enumerator.h, src/theory/arrays/array_info.h, src/theory/arrays/array_proof_reconstruction.h, src/theory/arrays/static_fact_manager.h, src/theory/arrays/theory_arrays.h, src/theory/arrays/theory_arrays_rewriter.h, src/theory/arrays/theory_arrays_type_rules.h, src/theory/arrays/type_enumerator.h, src/theory/arrays/union_find.h, src/theory/assertion.h, src/theory/booleans/circuit_propagator.h, src/theory/booleans/theory_bool.h, src/theory/booleans/theory_bool_rewriter.cpp, src/theory/booleans/theory_bool_rewriter.h, src/theory/booleans/theory_bool_type_rules.h, src/theory/booleans/type_enumerator.h, src/theory/builtin/theory_builtin.h, src/theory/builtin/theory_builtin_rewriter.h, src/theory/builtin/theory_builtin_type_rules.h, src/theory/builtin/type_enumerator.h, src/theory/bv/abstraction.h, src/theory/bv/bitblast/aig_bitblaster.h, src/theory/bv/bitblast/bitblast_strategies_template.h, src/theory/bv/bitblast/bitblast_utils.h, src/theory/bv/bitblast/bitblaster.h, src/theory/bv/bitblast/eager_bitblaster.h, src/theory/bv/bitblast/lazy_bitblaster.h, src/theory/bv/bv_eager_solver.h, src/theory/bv/bv_inequality_graph.h, src/theory/bv/bv_quick_check.h, src/theory/bv/bv_subtheory.h, src/theory/bv/bv_subtheory_inequality.h, src/theory/bv/slicer.h, src/theory/bv/theory_bv.h, src/theory/bv/theory_bv_rewriter.h, src/theory/bv/theory_bv_type_rules.h, src/theory/bv/type_enumerator.h, src/theory/care_graph.h, src/theory/datatypes/datatypes_rewriter.h, src/theory/datatypes/datatypes_sygus.h, src/theory/datatypes/sygus_simple_sym.h, src/theory/datatypes/theory_datatypes.h, src/theory/datatypes/theory_datatypes_type_rules.h, src/theory/datatypes/type_enumerator.h, src/theory/decision_manager.h, src/theory/decision_strategy.h, src/theory/evaluator.h, src/theory/example/ecdata.h, src/theory/example/theory_uf_tim.h, src/theory/ext_theory.h, src/theory/fp/fp_converter.h, src/theory/fp/theory_fp.h, src/theory/fp/theory_fp_rewriter.h, src/theory/fp/theory_fp_type_rules.h, src/theory/fp/type_enumerator.h, src/theory/interrupted.h, src/theory/logic_info.h, src/theory/output_channel.h, src/theory/quantifiers/alpha_equivalence.h, src/theory/quantifiers/anti_skolem.h, src/theory/quantifiers/bv_inverter.h, src/theory/quantifiers/bv_inverter_utils.h, src/theory/quantifiers/candidate_rewrite_database.h, src/theory/quantifiers/candidate_rewrite_filter.h, src/theory/quantifiers/cegqi/ceg_arith_instantiator.h, src/theory/quantifiers/cegqi/ceg_bv_instantiator.h, src/theory/quantifiers/cegqi/ceg_bv_instantiator_utils.h, src/theory/quantifiers/cegqi/ceg_dt_instantiator.h, src/theory/quantifiers/cegqi/ceg_epr_instantiator.h, src/theory/quantifiers/cegqi/ceg_instantiator.h, src/theory/quantifiers/cegqi/inst_strategy_cegqi.h, src/theory/quantifiers/dynamic_rewrite.h, src/theory/quantifiers/ematching/candidate_generator.h, src/theory/quantifiers/ematching/ho_trigger.h, src/theory/quantifiers/ematching/inst_match_generator.h, src/theory/quantifiers/ematching/inst_strategy_e_matching.h, src/theory/quantifiers/ematching/instantiation_engine.h, src/theory/quantifiers/ematching/trigger.h, src/theory/quantifiers/equality_infer.h, src/theory/quantifiers/equality_query.h, src/theory/quantifiers/expr_miner.h, src/theory/quantifiers/expr_miner_manager.h, src/theory/quantifiers/extended_rewrite.h, src/theory/quantifiers/first_order_model.h, src/theory/quantifiers/fmf/bounded_integers.h, src/theory/quantifiers/fmf/full_model_check.h, src/theory/quantifiers/fmf/model_builder.h, src/theory/quantifiers/fmf/model_engine.h, src/theory/quantifiers/fun_def_process.h, src/theory/quantifiers/inst_match.h, src/theory/quantifiers/inst_match_trie.h, src/theory/quantifiers/inst_propagator.h, src/theory/quantifiers/inst_strategy_enumerative.h, src/theory/quantifiers/instantiate.h, src/theory/quantifiers/lazy_trie.h, src/theory/quantifiers/local_theory_ext.h, src/theory/quantifiers/quant_epr.h, src/theory/quantifiers/quant_relevance.h, src/theory/quantifiers/quant_split.h, src/theory/quantifiers/quant_util.h, src/theory/quantifiers/quantifiers_attributes.h, src/theory/quantifiers/quantifiers_rewriter.h, src/theory/quantifiers/query_generator.h, src/theory/quantifiers/relevant_domain.h, src/theory/quantifiers/rewrite_engine.h, src/theory/quantifiers/single_inv_partition.h, src/theory/quantifiers/skolemize.h, src/theory/quantifiers/solution_filter.h, src/theory/quantifiers/sygus/ce_guided_single_inv.h, src/theory/quantifiers/sygus/ce_guided_single_inv_sol.h, src/theory/quantifiers/sygus/cegis.h, src/theory/quantifiers/sygus/cegis_unif.h, src/theory/quantifiers/sygus/enum_stream_substitution.h, src/theory/quantifiers/sygus/sygus_enumerator.h, src/theory/quantifiers/sygus/sygus_eval_unfold.h, src/theory/quantifiers/sygus/sygus_explain.h, src/theory/quantifiers/sygus/sygus_grammar_cons.h, src/theory/quantifiers/sygus/sygus_grammar_norm.h, src/theory/quantifiers/sygus/sygus_grammar_red.h, src/theory/quantifiers/sygus/sygus_invariance.h, src/theory/quantifiers/sygus/sygus_module.h, src/theory/quantifiers/sygus/sygus_pbe.h, src/theory/quantifiers/sygus/sygus_process_conj.h, src/theory/quantifiers/sygus/sygus_repair_const.h, src/theory/quantifiers/sygus/sygus_unif.h, src/theory/quantifiers/sygus/sygus_unif_io.h, src/theory/quantifiers/sygus/sygus_unif_rl.h, src/theory/quantifiers/sygus/sygus_unif_strat.h, src/theory/quantifiers/sygus/synth_conjecture.h, src/theory/quantifiers/sygus/synth_engine.h, src/theory/quantifiers/sygus/term_database_sygus.h, src/theory/quantifiers/sygus_sampler.h, src/theory/quantifiers/term_canonize.h, src/theory/quantifiers/term_database.h, src/theory/quantifiers/term_enumeration.h, src/theory/quantifiers/term_util.h, src/theory/quantifiers/theory_quantifiers.h, src/theory/quantifiers/theory_quantifiers_type_rules.h, src/theory/quantifiers_engine.h, src/theory/rep_set.h, src/theory/sep/theory_sep.h, src/theory/sep/theory_sep_rewriter.h, src/theory/sep/theory_sep_type_rules.h, src/theory/sets/normal_form.h, src/theory/sets/theory_sets.h, src/theory/sets/theory_sets_private.h, src/theory/sets/theory_sets_rewriter.h, src/theory/sets/theory_sets_type_enumerator.h, src/theory/sets/theory_sets_type_rules.h, src/theory/sort_inference.h, src/theory/strings/normal_form.h, src/theory/strings/regexp_elim.h, src/theory/strings/regexp_operation.h, src/theory/strings/regexp_solver.h, src/theory/strings/skolem_cache.h, src/theory/strings/theory_strings.h, src/theory/strings/theory_strings_preprocess.h, src/theory/strings/theory_strings_rewriter.h, src/theory/strings/theory_strings_type_rules.h, src/theory/strings/type_enumerator.h, src/theory/subs_minimize.h, src/theory/substitutions.h, src/theory/theory.h, src/theory/theory_engine.h, src/theory/theory_model.h, src/theory/theory_model_builder.h, src/theory/theory_registrar.h, src/theory/theory_test_utils.h, src/theory/type_enumerator.h, src/theory/type_set.h, src/theory/uf/equality_engine_types.h, src/theory/uf/symmetry_breaker.h, src/theory/uf/theory_uf.h, src/theory/uf/theory_uf_model.h, src/theory/uf/theory_uf_rewriter.h, src/theory/uf/theory_uf_strong_solver.h, src/theory/uf/theory_uf_type_rules.h, src/theory/valuation.h, src/util/bin_heap.h, src/util/bitvector.h, src/util/bool.h, src/util/cardinality.h, src/util/channel.h, src/util/debug.h, src/util/divisible.h, src/util/floatingpoint.h.in, src/util/gmp_util.h, src/util/hash.h, src/util/index.h, src/util/integer_cln_imp.h, src/util/integer_gmp_imp.h, src/util/maybe.h, src/util/ostream_util.h, src/util/proof.h, src/util/random.h, src/util/rational_cln_imp.h, src/util/rational_gmp_imp.h, src/util/regexp.h, src/util/resource_manager.h, src/util/result.h, src/util/safe_print.h, src/util/sampler.h, src/util/sexpr.h, src/util/smt2_quote_string.h, src/util/statistics.h, src/util/statistics_registry.cpp, src/util/statistics_registry.h, src/util/tuple.h, src/util/unsafe_interrupt_exception.h, src/util/utility.h",437,19,50,8.715042568620959,8,42084,437,1659.7551487414187,7,0,161,0,1,0
cvc5,2ab48defab1f0c8918cd7612c1943be7503e4d30,caf32b8e9940e90cd0bfe2e029b4a55c6e601f31,Aina Niemetz,aina.niemetz@gmail.com,2019-04-24 20:10:47,1556107847,Fix compiler warning. (#2975),0,1,src/preprocessing/passes/synth_rew_rules.cpp,1,1,1,-0.0,8,368,1,300.0,1101,0,5,0,1,0
cvc5,caf32b8e9940e90cd0bfe2e029b4a55c6e601f31,78ae0a579b91af102b48f7ac1db60afc09ccf727,Aina Niemetz,aina.niemetz@gmail.com,2019-04-25 18:02:57,1556186577,"New C++ API: Clean up API: mkVar vs mkConst vs mkBoundVar. (#2977)

This cleans up naming of API functions to create first-order constants and variables.

mkVar -> mkConst
mkBoundVar -> mkVar
declareConst is redundant (= mkConst) and thus, in an effort to avoid redundancy, removed.

Note that we want to avoid redundancy in order to reduce code duplication and maintenance
overhead (we do not allow nested API calls, since this is problematic when tracing API calls).",168,202,"examples/api/bitvectors-new.cpp, examples/api/bitvectors_and_arrays-new.cpp, examples/api/combination-new.cpp, examples/api/datatypes-new.cpp, examples/api/extract-new.cpp, examples/api/linear_arith-new.cpp, examples/api/sets-new.cpp, examples/api/strings-new.cpp, src/api/cvc4cpp.cpp, src/api/cvc4cpp.h, src/api/cvc4cppkind.h, src/parser/smt2/Smt2.g, test/unit/api/solver_black.h",13,3,4,2.4148052577062713,8,4848,13,520.1538461538462,1102,0,62,0,0,0
cvc5,78ae0a579b91af102b48f7ac1db60afc09ccf727,b351cce04bc13e00b4b63f1bba403b5d549d56bf,Andrew Reynolds,andrew.j.reynolds@gmail.com,2019-04-29 16:40:31,1556527231,Optimization for evaluation with unfolding (#2979),27,0,src/theory/quantifiers/sygus/term_database_sygus.cpp,1,1,1,-0.0,8,1504,1,438.0,170,0,59,0,0,0
cvc5,b351cce04bc13e00b4b63f1bba403b5d549d56bf,19a93d5e0f924c70e7f77719e0310c730c8fbc61,Andrew Reynolds,andrew.j.reynolds@gmail.com,2019-04-29 20:27:20,1556540840,Eliminate APPLY kind (#2976),64,128,"src/api/cvc4cpp.cpp, src/api/cvc4cppkind.h, src/expr/node.h, src/parser/parser.cpp, src/parser/smt2/Smt2.g, src/parser/smt2/smt2.cpp, src/printer/cvc/cvc_printer.cpp, src/printer/smt2/smt2_printer.cpp, src/smt/command.cpp, src/smt/smt_engine.cpp, src/theory/builtin/kinds, src/theory/builtin/theory_builtin_type_rules.h, src/theory/datatypes/datatypes_rewriter.cpp, test/regress/CMakeLists.txt, test/regress/regress0/define-fun-model.smt2",15,7,11,3.2730284946127166,8,16352,15,2159.4666666666667,171,0,150,0,0,0
cvc5,19a93d5e0f924c70e7f77719e0310c730c8fbc61,6538957335ecf83af38150054cf80555a57e72d0,Andres Noetzli,andres.noetzli@gmail.com,2019-04-30 04:12:47,1556568767,Fix use of APPLY kind in examples (#2984),1,1,examples/sets-translate/sets_translate.cpp,1,1,1,-0.0,8,293,1,1795.0,96,0,1,0,1,0
cvc5,6538957335ecf83af38150054cf80555a57e72d0,d36423fb74e3ec294b222b806cb24b5229e72ed1,Andrew Reynolds,andrew.j.reynolds@gmail.com,2019-04-30 14:11:16,1556604676,Remove stoi solve rewrite (#2985),25,25,"src/theory/strings/theory_strings_rewriter.cpp, test/regress/CMakeLists.txt, test/regress/regress1/strings/issue2981.smt2, test/regress/regress1/strings/stoi-solve.smt2",4,2,3,1.2523479506082373,8,4343,4,662.25,186,0,91,0,0,0
cvc5,d36423fb74e3ec294b222b806cb24b5229e72ed1,d998d5e4213503e0913581d57c09ad486cded5c1,Andres Noetzli,andres.noetzli@gmail.com,2019-04-30 12:32:50,1556598770,Fix concat-find regexp elimination (#2983),27,3,"src/theory/strings/regexp_elim.cpp, test/regress/CMakeLists.txt, test/regress/regress1/strings/issue2982.smt2",3,2,3,0.9218339291539106,8,431,3,278.6666666666667,97,0,93,0,1,0
cvc5,d998d5e4213503e0913581d57c09ad486cded5c1,7ac83bb567ca0f0a45ebe3b4c3dffa0689f9b4b2,Andrew Reynolds,andrew.j.reynolds@gmail.com,2019-05-01 00:35:14,1556642114,Use total versions of div/mod in re-elim-agg (#2986),38,2,"src/theory/strings/regexp_elim.cpp, test/regress/CMakeLists.txt, test/regress/regress1/strings/re-agg-total1.smt2, test/regress/regress1/strings/re-agg-total2.smt2",4,2,3,1.7321134789601134,8,434,4,208.75,190,0,95,0,0,0
cvc5,7ac83bb567ca0f0a45ebe3b4c3dffa0689f9b4b2,5d248c367869c4f6bea12dcad001c6cf3ee1c801,Andrew Reynolds,andrew.j.reynolds@gmail.com,2019-05-01 12:28:08,1556684888,Fix re-elim-agg regressions (#2987),0,2,"test/regress/regress1/strings/re-agg-total1.smt2, test/regress/regress1/strings/re-agg-total2.smt2",2,1,1,1.0,8,0,2,-1.0,194,0,33,0,1,0
cvc5,5d248c367869c4f6bea12dcad001c6cf3ee1c801,8e6629029bfebd874eeee84b879b2d31f674eb2b,Andrew Reynolds,andrew.j.reynolds@gmail.com,2019-05-02 08:35:42,1556757342,Simple optimizations to core strings theory. (#2988),27,21,src/theory/strings/theory_strings.cpp,1,1,1,-0.0,8,4266,1,2058.0,196,0,64,0,0,0
cvc5,8e6629029bfebd874eeee84b879b2d31f674eb2b,1694c6b45dfa02ca22146755c89078bfa6b851ef,Andres Noetzli,andres.noetzli@gmail.com,2019-05-06 06:05:19,1557093919,Add support for re.all (#2980),13,1,"src/parser/smt2/smt2.cpp, test/regress/CMakeLists.txt, test/regress/regress0/strings/re.all.smt2",3,2,3,1.5306189948485172,8,1025,3,1293.0,100,0,45,0,0,0
cvc5,1694c6b45dfa02ca22146755c89078bfa6b851ef,9e26baaaa717a5075984c63878e8bc1aa4e78b16,Andrew Reynolds,andrew.j.reynolds@gmail.com,2019-05-09 09:33:22,1557365602,Fixes for relational triggers (#2967),1091,66,"src/options/quantifiers_options.toml, src/theory/quantifiers/ematching/candidate_generator.cpp, src/theory/quantifiers/ematching/inst_match_generator.cpp, src/theory/quantifiers/ematching/inst_strategy_e_matching.cpp, src/theory/quantifiers/ematching/trigger.cpp, src/theory/quantifiers/ematching/trigger.h, src/theory/quantifiers/instantiate.cpp, src/theory/quantifiers/term_database.cpp, src/theory/quantifiers/term_database.h, test/regress/CMakeLists.txt, test/regress/regress1/quantifiers/nl-pow-trick.smt2, test/regress/regress1/quantifiers/seu169+1.smt2, test/regress/regress1/quantifiers/var-eq-trigger-simple.smt2, test/regress/regress1/quantifiers/var-eq-trigger.smt2, test/regress/regress2/quantifiers/specsharp-WindowsCard.15.RTE.Terminate_System.Int32.smt2",15,3,6,1.8055054786721834,8,4623,15,599.0,197,0,114,0,1,0
cvc5,9e26baaaa717a5075984c63878e8bc1aa4e78b16,3b407342c06d89910e19373e3c486155464843a7,Andrew Reynolds,andrew.j.reynolds@gmail.com,2019-05-10 10:51:24,1557456684,Disable relational triggers (#2994),1,1,src/options/quantifiers_options.toml,1,1,1,-0.0,8,0,1,414.0,212,0,15,0,0,0
cvc5,3b407342c06d89910e19373e3c486155464843a7,bc550fa115401256616042ccb7a559ec252e319b,Andrew Reynolds,andrew.j.reynolds@gmail.com,2019-05-15 11:41:03,1557891663,Fix printing of bvurem (#2963),34,0,"src/printer/smt2/smt2_printer.cpp, test/regress/CMakeLists.txt, test/regress/regress2/sygus/pbe_bvurem.sy",3,2,3,0.3815804883091629,8,1851,3,1237.0,213,0,43,0,1,0
cvc5,bc550fa115401256616042ccb7a559ec252e319b,f2d113cf3cbb0f4966a7c909b9cd2c14aa753eb1,Andres Noetzli,noetzli@stanford.edu,2019-05-15 17:38:04,1557913084,"Fix model of Boolean vars with eager bit-blaster (#2998)

When bit-blasting eagerly, we were not assigning values to the Boolean
variables in the `TheoryModel`. With eager bit-blasting, the BV SAT
solver gets all (converted) terms, including the Boolean ones, so
`EagerBitblaster::collectModelInfo()` is responsible for assigning
values to Boolean variables. However, it has only been assigning values
to bit-vector variables, which lead to wrong models. This commit fixes
the issue by asking the `CnfStream` for the Boolean variables, querying
the SAT solver for their value, and assigning them in the `TheoryModel`.",27,0,"src/theory/bv/bitblast/eager_bitblaster.cpp, test/regress/CMakeLists.txt, test/regress/regress0/bv/bool-model.smt2",3,2,3,1.0377724203178629,8,208,3,338.6666666666667,103,0,103,0,1,0
cvc5,f2d113cf3cbb0f4966a7c909b9cd2c14aa753eb1,ee9fd3e11b761bddfc1042ddf735be152f400a43,Aina Niemetz,aina.niemetz@gmail.com,2019-05-15 13:29:00,1557898140,BV: Do not enable abstraction when eager bit-blasting by default. (#3001),30,21,src/options/options_handler.cpp,1,1,1,-0.0,8,1966,1,1202.0,1115,0,16,0,0,0
cvc5,ee9fd3e11b761bddfc1042ddf735be152f400a43,fc8907afc08d7b418471a537f9c23e9964df82df,Mathias Preiner,mathias.preiner@gmail.com,2019-05-15 16:26:06,1557908766,"cmake: Install JAR and JNI files for Java bindings. (#3002)

Default install paths are:
  - libcvc4jni.so in /usr/lib/
  - CVC4.jar in /usr/share/java/cvc4

Fixes #2990.",8,1,src/bindings/java/CMakeLists.txt,1,1,1,-0.0,8,0,1,263.0,444,0,2,0,1,0
cvc5,fc8907afc08d7b418471a537f9c23e9964df82df,62d361071ea54c9b7cba882313ab4dedef6f1286,Andres Noetzli,andres.noetzli@gmail.com,2019-05-16 00:18:48,1557937128,"Fix iterators in Java API (#3000)

Fixes #2989. SWIG 3 seems to have an issue properly resolving
`T::const_iterator::value_type` if that type itself is a `typedef`.
This is for example the case in the `UnsatCore` class, which `typedef`s
`const_iterator` to `std::vector<Expr>::const_iterator`. As a
workaround, this commit changes the `JavaIteratorAdapter` class to take
two template parameters, one of which is the `value_type`. The commit
also adds a compile-time assertion that `T::const_iterator::value_type`
can be converted to `value_type` to avoid nasty surprises. A nice
side-effect of this solution is that explicit `typemap`s are not
necessary anymore, so they are removed. Additionally, the commit adds a
`toString()` method for the Java API of `UnsatCore` and adds examples
that show and test the iteration over the unsat core and the statistics.
Iterating over `Statistics` now returns instances of `Statistic` instead
of `Object[]`, which is a bit cleaner and requires less glue code.",199,106,"examples/api/java/CMakeLists.txt, examples/api/java/Statistics.java, examples/api/java/UnsatCores.java, src/bindings/java/CMakeLists.txt, src/bindings/java_iterator_adapter.h, src/expr/datatype.i, src/expr/expr.i, src/proof/unsat_core.i, src/smt/command.i, src/util/statistics.i",10,6,7,2.99213413282289,8,65,10,1215.1,106,0,71,0,1,0
cvc5,62d361071ea54c9b7cba882313ab4dedef6f1286,5c38c59cb40df00e29cbd9d30495833f88c6d4fb,Martin,martin.brain@cs.ox.ac.uk,2019-05-18 00:10:19,1558109419,"Add the problematic input from issue 2183 as a regression test (#3008)

Although CVC4's behaviour is actually correct, this is to make
things a bit clearer and prevent confusion in the future.",25,0,"test/regress/CMakeLists.txt, test/regress/regress0/fp/down-cast-RNA.smt2",2,1,2,0.24229218908241482,9,0,2,305.5,0,0,38,0,1,0
cvc5,5c38c59cb40df00e29cbd9d30495833f88c6d4fb,d7514f640835ba6e7c8c4db4fa6fd041bbf0fe3c,Andres Noetzli,noetzli@stanford.edu,2019-05-17 18:47:09,1558090029,"Fix BV ITE rewrite (#3004)

The rewrite `BvIteConstChildren` assumes that `BvIteEqualChildren` has
been applied before it runs. However, with nested ITEs, it was possible
to violate that assertion. Given `bvite(c1, bvite(c2, 0, 0), bvite(c3,
0, 0))`, `BvIteEqualChildren` would rewrite that term to `bvite(c2, 0,
0)`. The `LinearRewriteStrategy` then ran `BvIteConstChildren` on
`bvite(c2, 0, 0)` which complained about the equal children. This commit
implements a simple fix that splits the `LinearRewriteStrategy` into two
strategies to make sure that if `BvIteEqualChildren` rewrites a node, we
drop back to the `Rewriter`. This ensures that the rewrites on the
rewritten node are invoked in the correct order.",29,3,"src/theory/bv/theory_bv_rewriter.cpp, test/unit/theory/theory_bv_rewriter_white.h",2,2,2,0.9971803988942642,9,641,2,1549.5,116,0,102,0,1,0
cvc5,d7514f640835ba6e7c8c4db4fa6fd041bbf0fe3c,521701398b15bd41a1cb8a9b530fc4af4892c7af,Andres Noetzli,andres.noetzli@gmail.com,2019-05-17 19:16:55,1558091815,"Support for incremental bit-blasting with CaDiCaL (#3006)

This commit adds support for eager bit-blasting with CaDiCaL on
incremental benchmarks. Since not all CaDiCaL versions support
incremental solving, the commit adds a CMake check that checks whether
`CaDiCaL::Solver::assume()` exists.

Note: The check uses `check_cxx_source_compiles`, which is not very
elegant but I could not find a better solution (e.g.
`check_cxx_symbol_exists()` does not seem to support methods in classes
and `check_struct_has_member()` only seems to support data members).",39,6,"cmake/ConfigureCVC4.cmake, contrib/run-script-smtcomp2019-application, src/options/options_handler.cpp, src/prop/cadical.cpp, src/prop/cadical.h",5,4,4,1.936094915019989,9,2139,5,471.0,118,0,24,0,0,0
cvc5,521701398b15bd41a1cb8a9b530fc4af4892c7af,437191609061acbc76b92bab79df31334a489e82,Andres Noetzli,andres.noetzli@gmail.com,2019-05-17 20:35:27,1558096527,[SMT-COMP2019] Better strings configuration (#3010),3,3,contrib/run-script-smtcomp2019,1,1,1,-0.0,9,0,1,31.0,123,0,1,0,0,0
cvc5,437191609061acbc76b92bab79df31334a489e82,3d79c9b5813eda2f6f55822e193e36a660435e10,Andrew Reynolds,andrew.j.reynolds@gmail.com,2019-05-17 23:07:48,1558105668,Update QF_NIA strategy (#3012),3,1,contrib/run-script-smtcomp2019,1,1,1,-0.0,9,0,1,31.0,216,0,2,0,0,0
cvc5,3d79c9b5813eda2f6f55822e193e36a660435e10,5fcb1dd18bf01a95198c4981e2d81da64f5a4848,Aina Niemetz,aina.niemetz@gmail.com,2019-05-18 15:13:00,1558163580,FP: Fix regression test and enable SymFPU on Travis. (#3013),7,4,".travis.yml, test/regress/regress0/fp/down-cast-RNA.smt2",2,1,2,0.6840384356390417,9,0,2,990.5,1116,0,39,0,1,0
cvc5,5fcb1dd18bf01a95198c4981e2d81da64f5a4848,16ade2e20b6fd2afc49b8ea70d128ae665dff409,Andres Noetzli,noetzli@stanford.edu,2019-05-20 11:24:31,1558322671,"[SMT-COMP 2019] Update run scripts to match tracks (#3018)

The ""Application Track"" has been renamed to ""Incremental Track"" this
year, so this commit renames the script accordingly and updates the name
of the CVC4 binary that the script calls to be just `cvc4`. The commit
also adds an initial script for the model validation track.",26,1,"contrib/run-script-smtcomp2019, contrib/run-script-smtcomp2019-incremental, contrib/run-script-smtcomp2019-model-validation, contrib/run-script-smtcomp2019-unsat-cores",4,4,1,0.3809465857053901,9,0,4,16.5,124,0,4,0,0,0
cvc5,16ade2e20b6fd2afc49b8ea70d128ae665dff409,1c1c178db1755a441792d84465dcb8397f1f2011,Martin,martin.brain@cs.ox.ac.uk,2019-05-21 18:49:37,1558435777,"Update to symfpu 0.0.7, fixes RTI 3/5 issue (#3007)

Fixes #2932. fp.roundToIntegral was rounding some very small subnormals up to
between 1 and 2, which is A. wrong and B. not idempotent.  The
corresponding symfpu update fixes this as it was an overflow caused
by the unpacked significand not being able to represent an extra
significand bits.",48,1,"contrib/get-symfpu, test/regress/CMakeLists.txt, test/regress/regress0/fp/rti_3_5_bug.smt2, test/regress/regress0/fp/rti_3_5_bug_report.smt2",4,2,3,1.3997105248883641,9,0,4,246.25,2,0,40,0,1,0
cvc5,1c1c178db1755a441792d84465dcb8397f1f2011,60173f62a82b4d71f2fbac51880d44d883ae5109,Andres Noetzli,andres.noetzli@gmail.com,2019-05-27 16:36:17,1558946177,"Avoid substituting Boolean term variables (#3022)

Fixes #3020. Boolean terms that appear in other terms, e.g. a Boolean
array index, are replaced by `BOOLEAN_TERM_VARIABLE`s to make sure that
they are handled properly in theory combination. When doing this
replacement, an equality of the form `(= <Boolean term> <Boolean term
variable)` is added to the assertions. The problem was that
`Theory::ppAssert()` would derive a substitution when this equality was
registered. The commit fixes the problem by not allowing to add
substitutions for `BOOLEAN_TERM_VARIABLE`s.",21,2,"src/theory/theory.cpp, test/regress/CMakeLists.txt, test/regress/regress0/arrays/bug3020.smt2",3,2,3,1.0666152167384504,9,309,3,1358.3333333333333,128,0,109,0,1,0
cvc5,60173f62a82b4d71f2fbac51880d44d883ae5109,be2a85f84fec4e926704f4788c55ec2ba805de39,Andres Noetzli,andres.noetzli@gmail.com,2019-05-30 11:05:42,1559185542,"Quote symbol when printing empty symbol name (#3025)

When printing an empty symbol name, which can appear in an SMT2 file as
`||`, we were printing the empty string instead of quoting the symbol.
This commit fixes the issue and adds a regression test.",14,1,"src/printer/smt2/smt2_printer.cpp, test/regress/CMakeLists.txt, test/regress/regress0/printer/empty_symbol_name.smt2",3,2,3,1.272905595320056,9,1855,3,1247.0,131,0,50,0,1,0
cvc5,be2a85f84fec4e926704f4788c55ec2ba805de39,9d93595783e350969ad428ab277614a3250e59a0,Andrew Reynolds,andrew.j.reynolds@gmail.com,2019-06-01 09:04:17,1559351057,Fix rewriter for regular expression consume  (#3029),56,6,"src/theory/strings/theory_strings_rewriter.cpp, src/theory/strings/theory_strings_rewriter.h, test/regress/CMakeLists.txt, test/regress/regress1/strings/simple-re-consume.smt2",4,2,3,1.4521163000057813,9,4470,4,1200.5,217,0,112,0,1,0
cvc5,9d93595783e350969ad428ab277614a3250e59a0,9b6985b4427aff888f07ecc84079452c11113cb6,Andrew Reynolds,andrew.j.reynolds@gmail.com,2019-06-01 09:39:16,1559353156,"Require that FMF model basis terms are variables (#3031)

The commit fixes an issue where FMF could theoretically chose interpreted function applications as ""model basis terms"". This triggered an incorrect model (caught by an AlwaysAssert) when the interpreted function later did not appear in a model and was chosen by FMF to be equal to a wrong value.",23,11,"src/theory/quantifiers/first_order_model.cpp, src/theory/quantifiers/term_database.cpp, src/theory/quantifiers/term_database.h",3,1,1,1.4183533479345782,9,1656,3,2514.0,221,0,70,0,1,0
cvc5,9b6985b4427aff888f07ecc84079452c11113cb6,2d9f552b86cf75a95187541699612ea1331ec990,Aina Niemetz,aina.niemetz@gmail.com,2019-06-01 16:40:33,1559378433,Update QF_BV options for SMT-COMP 2019. (#3033),7,7,"contrib/run-script-smtcomp2019, contrib/run-script-smtcomp2019-model-validation",2,2,1,0.5916727785823275,9,0,2,28.5,1118,0,5,0,0,0
cvc5,2d9f552b86cf75a95187541699612ea1331ec990,2c7a64f5bdafd35e02510db5ec8026cff32e505f,Andres Noetzli,noetzli@stanford.edu,2019-06-02 18:54:02,1559472842,"Add check for limit of number of node children (#3035)

This commit adds a check that makes sure that we do not try to create
nodes with more children than the maxmimum number. This can currently
happen when flattening nodes in QF_BV with lots of duplicate children.",2,2,src/expr/node_builder.h,1,1,1,-0.0,9,727,1,3460.0,134,0,13,0,0,0
cvc5,2c7a64f5bdafd35e02510db5ec8026cff32e505f,a211c34d77c432007c3e1ed3c82baaea315a7632,Andres Noetzli,noetzli@stanford.edu,2019-06-02 19:30:10,1559475010,"[SMT-COMP 2019] Update run script for unsat cores (#3034)

`--unconstrained-simp` is not compatible with unsat cores, so this
commit removes it for QF_LRA. `--bitblast=eager` is not compatible with
unsat cores for QF_UFBV because the dependencies are not tracked
correctly in the Ackermannization preprocessing pass, so the commit
changes the script to use the lazy BV solver instead. Strings need some
additional options to use the correct theory symbols.",5,2,contrib/run-script-smtcomp2019-unsat-cores,1,1,1,-0.0,9,0,1,47.0,135,0,2,0,0,0
cvc5,a211c34d77c432007c3e1ed3c82baaea315a7632,9ccf3c01a736a9f6d5c6889b51c4589221044c97,Andres Noetzli,noetzli@stanford.edu,2019-06-02 20:01:48,1559476908,"Enable SymFPU assertions in production (#3036)

This commit enables SymFPU assertions in production. The reason for this
is that there are some known problems with certain bit-widths, so we
prefer to be conservative. The commit also updates the run scripts for SMT-COMP 2019 to use `--fp-exp` since we have those additional checks in place now.",14,14,"contrib/run-script-smtcomp2019, contrib/run-script-smtcomp2019-unsat-cores, src/theory/fp/fp_converter.cpp, src/util/floatingpoint.cpp",4,4,3,1.9852281360342514,9,2016,4,583.75,136,0,84,0,0,0
cvc5,9ccf3c01a736a9f6d5c6889b51c4589221044c97,52a910f728f399e782b3ac036e4476f1fb3c27fa,Andres Noetzli,noetzli@stanford.edu,2019-06-02 21:23:52,1559481832,"[SMT-COMP 2019] Use lazy BV as backup for QF_UFBV (#3037)

We cannot Ackermannize all the QF_UFBV benchmarks due to uninterpreted
sorts. This commit adds lazy bit-blasting as a backup strategy.",4,1,contrib/run-script-smtcomp2019,1,1,1,-0.0,9,0,1,47.0,140,0,6,0,0,0
cvc5,52a910f728f399e782b3ac036e4476f1fb3c27fa,6850c7d04a74e7cb2fb26db4b85af76edce3f616,Andres Noetzli,noetzli@stanford.edu,2019-06-02 22:04:41,1559484281,"[SMT-COMP] Increase sequential portfolio times (#3038)

This year's timeout is 40min up from 20min last year. This commit scales
the timeouts accordingly.",55,55,contrib/run-script-smtcomp2019,1,1,1,-0.0,9,0,1,47.0,141,0,7,0,0,0
cvc5,6850c7d04a74e7cb2fb26db4b85af76edce3f616,23baea2452d765bb76bd576b4cd01dd67215d095,Andres Noetzli,andres.noetzli@gmail.com,2019-06-03 16:15:54,1559549754,"[SMT-COMP] No unconstrained simp for QF_LIA UC (#3039)

`--unconstrained-simp` is not compatible with unsat cores.",1,1,contrib/run-script-smtcomp2019-unsat-cores,1,1,1,-0.0,9,0,1,48.0,142,0,4,0,0,0
cvc5,23baea2452d765bb76bd576b4cd01dd67215d095,29959bec6e023f64cad0a5d43b18052f08ac94c5,Andres Noetzli,andres.noetzli@gmail.com,2019-06-04 14:48:21,1559630901,"Add check that result matches benchmark status (#3028)

This commit adds a check to make sure that the result of a `(check-sat)`
call matches the expected result set via `(set-info :status ...)`.  In
doing so, it also fixes an issue where CVC4 would crash if asked for the
unsat core after setting the status to `unsat` but before calling
`(check-sat)` (see regression for concrete example). This happened
because CVC4 was storing the expected result and the computed result
both in the same variable (the expected result wasn't really being used
though). This commit keeps track of the expected result and the computed
result in separate variables to fix that issue.",38,8,"src/smt/smt_engine.cpp, src/smt/smt_engine.h, test/regress/CMakeLists.txt, test/regress/regress0/bv/ackermann1.smt2, test/regress/regress0/bv/ackermann4.smt2, test/regress/regress0/fmf/Arrow_Order-smtlib.778341.smt, test/regress/regress0/quantifiers/qbv-test-invert-bvxor.smt2, test/regress/regress0/sets/mar2014/sharing-preregister.smt2, test/regress/regress0/smtlib/set-info-status.smt2, test/regress/regress1/quantifiers/qbv-test-invert-bvcomp.smt2, test/regress/regress1/quantifiers/qe.smt2",11,2,8,2.3111514367207597,9,4434,11,1230.5454545454545,143,0,60,0,1,0
cvc5,29959bec6e023f64cad0a5d43b18052f08ac94c5,0536a743411b882cda88b18ca21cd5dc29828f54,Andres Noetzli,andres.noetzli@gmail.com,2019-06-04 16:37:27,1559637447,"Enable proof checking for QF_LRA benchmarks (#2928)

Due to issues in the current proof code, this commit also disables proof
checking for five QF_LRA benchmarks (see issue #2855).",38,15,"proofs/signatures/CMakeLists.txt, src/smt/smt_engine.cpp, src/theory/logic_info.cpp, test/regress/regress0/lemmas/sc_init_frame_gap.induction.smt, test/regress/regress0/uflra/constants0.smt, test/regress/regress0/uflra/pb_real_10_0200_10_22.smt, test/regress/regress0/uflra/pb_real_10_0200_10_26.smt, test/regress/regress1/lemmas/pursuit-safety-8.smt, test/regress/regress1/lemmas/simple_startup_9nodes.abstract.base.smt, test/regress/regress2/arith/pursuit-safety-11.smt, test/regress/regress2/arith/pursuit-safety-12.smt, test/unit/theory/logic_info_white.h",12,5,8,2.5373681957641123,9,6022,12,2081.8333333333335,154,0,175,0,1,0
cvc5,0536a743411b882cda88b18ca21cd5dc29828f54,c587235d29d2e3e1cd52a9f76dde8f58c89ae37e,Andres Noetzli,noetzli@stanford.edu,2019-06-05 09:36:40,1559698600,"Add support for SWIG 4 (#3041)

SWIG 4 seems to change the name for `std::map<CVC4::Expr, CVC4::Expr>`
to include the implicit template argument for comparisons. To make the
code compatible with both SWIG 4.0.0 and older versions, this commit
creates an explicit instance of the template.",6,3,"src/bindings/java/CMakeLists.txt, src/smt/smt_engine.i",2,2,2,0.9182958340544896,9,0,2,1549.0,166,0,22,0,0,0
cvc5,c587235d29d2e3e1cd52a9f76dde8f58c89ae37e,9af5e9653582a18b1871dfc3774ab50dd24463ce,Alex Ozdemir,aozdemir@hmc.edu,2019-06-05 12:16:46,1559708206,"DRAT-Optimization (#2971)

This commit enables DRAT-optimization, which consists of two sub-processes:
1. removing unnecessary instructions from DRAT-proofs and
2. not proving clauses which are not needed by DRAT proofs.

These changes have the effect of dramatically shortening some some bit-vector proofs. Specifically,  proofs using lemmas in the ER, DRAT, and LRAT formats, since proofs in any of these formats are derived from a (now optimized!) DRAT proof produced by CryptoMiniSat. What follows is a description of the main parts of this PR:

## DRAT Optimization

The DRAT-optimization is done by `drat-trim`, which is bundled with `drat2er`. The (new) function `ClausalBitVectorProof::optimizeDratProof` is our interface to the optimization machinery, and most of the new logic in this PR is in that function.

## CNF Representation

The ability to not prove unused clauses requires a slight architectural change as well. In particular, we need to be able to describe **which** subset of the original clause set actually needs to be proved. To facilitate this, when the clause set for CryptoMiniSat is first formed it is represented as a (a) map from clause indices to clauses and (b) a list of indices. Then, when the CNF is optimized, we temporarily store a new list of the clauses in the optimized formula. This change in representation requires a number of small tweaks throughout the code.

## Small Fixes to Signatures

When we decided to check and accept two different kinds of DRAT, some of our DRAT-checking broke. In particular, when supporting one kind of DRAT, it is okay to `fail` (crash) when a proof fails to check. If you're supporting two kinds of DRAT, crashing in response to the first checker rejecting the proof denies the second checker an opportunity to check the proof. This PR tweaks the signatures slightly (and soundly!) to do something else instead of `fail`ing.",398,148,"proofs/signatures/drat.plf, proofs/signatures/lrat.plf, src/CMakeLists.txt, src/proof/clausal_bitvector_proof.cpp, src/proof/clausal_bitvector_proof.h, src/proof/dimacs.cpp, src/proof/dimacs.h, src/proof/er/er_proof.cpp, src/proof/er/er_proof.h, src/proof/lrat/lrat_proof.cpp, src/proof/lrat/lrat_proof.h, test/unit/proof/er_proof_black.h",12,4,6,2.619912477851093,9,1519,12,153.58333333333334,112,0,71,0,1,0
cvc5,9af5e9653582a18b1871dfc3774ab50dd24463ce,6b01e8740111e69219e5d733e1123955f8cd2ea7,Andres Noetzli,noetzli@stanford.edu,2019-06-05 13:01:34,1559710894,"Prevent letification from shadowing variables (#3042)

Fixes #3005. When printing nodes, we introduce `let` expressions on the
fly. However, when doing that, we have to be careful that we don't
shadow existing variables with the same name. When quantifiers are
involved, we do not descend into the quantifiers to avoid letifying
terms with bound variables that then go out of scope (see #1863). Thus,
to avoid shadowing variables appearing in quantifiers, we have to
collect all the variables appearing in that term to make sure that the
let does not shadow them. In #3005, the issue was caused by a `let` that
was introduced outside of a quantifier and then was shadowed in the body
of the quantifier by another `let` introduced for that body.",104,13,"src/expr/node_algorithm.cpp, src/expr/node_algorithm.h, src/printer/dagification_visitor.cpp, src/printer/dagification_visitor.h, test/regress/CMakeLists.txt, test/regress/regress0/printer/let_shadowing.smt2",6,3,4,1.9727684075717953,9,547,6,1052.8333333333333,168,0,69,0,1,0
cvc5,6b01e8740111e69219e5d733e1123955f8cd2ea7,736713253104bcc5c3c0e19b0abcda4d20c68ab7,Andrew Reynolds,andrew.j.reynolds@gmail.com,2019-06-10 15:51:21,1560153081,Optimization for strings normalize disequalities (#3047),22,12,src/theory/strings/theory_strings.cpp,1,1,1,-0.0,9,4275,1,2097.0,224,0,73,0,0,0
cvc5,736713253104bcc5c3c0e19b0abcda4d20c68ab7,b38fc2ed13342524cefe7480c06c9afbcc73aedd,Andrew Reynolds,andrew.j.reynolds@gmail.com,2019-06-10 16:19:35,1560154775,Optimization for negative concatenation membership. (#3048),77,27,"src/theory/strings/regexp_operation.cpp, test/regress/CMakeLists.txt, test/regress/regress1/strings/re-neg-concat-reduct.smt2, test/regress/regress2/strings/norn-dis-0707-3.smt2",4,2,4,0.6688404039264325,9,1527,4,788.75,225,0,121,0,0,0
cvc5,b38fc2ed13342524cefe7480c06c9afbcc73aedd,a8e9dd456af98c909a19da7a8458aab9fa7f2ea2,Andrew Reynolds,andrew.j.reynolds@gmail.com,2019-06-11 15:50:06,1560239406,Fix spurious assertion in get-value (#3052),4,1,src/smt/smt_engine.cpp,1,1,1,-0.0,9,4176,1,3485.0,229,0,19,0,1,0
cvc5,a8e9dd456af98c909a19da7a8458aab9fa7f2ea2,3c2099bc67595bc015eb3b491e1110b1e94c0d25,Andrew Reynolds,andrew.j.reynolds@gmail.com,2019-06-11 16:47:13,1560242833,Do not require sygus constructors to be flattened (#3049),181,34,"src/parser/smt2/Smt2.g, src/theory/datatypes/datatypes_rewriter.cpp, src/theory/datatypes/datatypes_rewriter.h, src/theory/quantifiers/sygus/sygus_eval_unfold.cpp, src/theory/quantifiers/sygus/sygus_grammar_cons.cpp, src/theory/quantifiers/sygus/sygus_grammar_red.cpp, src/theory/quantifiers/sygus/term_database_sygus.cpp, src/theory/quantifiers/sygus/term_database_sygus.h, test/regress/regress1/sygus/sygus-dt.sy",9,3,4,2.194436413909264,9,3887,9,1071.3333333333333,230,0,135,0,0,0
cvc5,3c2099bc67595bc015eb3b491e1110b1e94c0d25,1edbc2ea82ab15110942acfbbfa0859bcfd7dac4,Andrew Reynolds,andrew.j.reynolds@gmail.com,2019-06-11 17:30:26,1560245426,Minor cleaning of conflict-based instantiation (#2966),267,171,"src/theory/quantifiers/quant_conflict_find.cpp, src/theory/quantifiers/quant_conflict_find.h, src/theory/quantifiers/rewrite_engine.cpp",3,1,1,0.34802403091432393,9,2455,3,2046.6666666666667,239,0,76,0,0,0
cvc5,1edbc2ea82ab15110942acfbbfa0859bcfd7dac4,6c6957ccee127548824062d282cc81270e5deb17,Ahmed Irfan,43099566+ahmed-irfan@users.noreply.github.com,2019-06-11 16:16:01,1560240961,NA Tangent reverse implication (#3050),61,16,src/theory/arith/nonlinear_extension.cpp,1,1,1,-0.0,10,4349,1,799.0,0,0,77,0,0,0
cvc5,6c6957ccee127548824062d282cc81270e5deb17,707734fb384203d6b1c87fcec4cc14ce6fc9ed97,Andres Noetzli,andres.noetzli@gmail.com,2019-06-11 17:21:54,1560244914,"Fix compilation issue for Java bindings + CLN (#3045)

Fixes #3044. When using CLN instead of GMP, SWIG produces different Java
files for the CLN classes. The bindings expected the GMP files even when
building with CLN, so compilation failed. This commit fixes the issue by
changing the list of files depending on whether we build with CLN or
GMP.",12,2,src/bindings/java/CMakeLists.txt,1,1,1,-0.0,10,0,1,290.0,174,0,5,0,1,0
cvc5,707734fb384203d6b1c87fcec4cc14ce6fc9ed97,9925a54ce86e9b0101563c0ace1b973144490528,Andres Noetzli,andres.noetzli@gmail.com,2019-06-11 17:54:14,1560246854,"Disable dumping regression for non-dumping builds (#3046)

`let_shadowing.smt2` uses dumping to test our printing infrastructure.
Since some builds do not support dumping, this commit disables that
regression for non-dumping builds. Additionally, it enables an error
message when trying to dump with a muzzled build and corrects the output
of `--show-config` to indicate that muzzled builds cannot dump.
Previously, the dumping output of a muzzled build was just silently
empty.

Most of the changes in `dump.cpp` are due to reformatting.",132,82,"src/base/configuration.cpp, src/smt/dump.cpp, test/regress/regress0/printer/let_shadowing.smt2",3,3,3,0.11926171155434284,10,516,3,819.3333333333334,175,0,73,0,0,0
cvc5,9925a54ce86e9b0101563c0ace1b973144490528,c83ce8f341f88bbffcae8fd2bfbed5c33abf4f66,Andres Noetzli,andres.noetzli@gmail.com,2019-06-12 09:07:00,1560301620,Refactor parser to define fewer tokens for symbols (#2936),459,495,"src/expr/symbol_table.cpp, src/parser/parser.cpp, src/parser/parser.h, src/parser/smt2/Smt2.g, src/parser/smt2/smt2.cpp, src/parser/smt2/smt2.h, test/regress/regress0/bv/core/constant_core.smt2, test/regress/regress0/expect/scrub.08.sy, test/regress/regress0/nl/nta/real-pi.smt2, test/regress/regress0/strings/bug613.smt2, test/regress/regress0/strings/str004.smt2, test/regress/regress0/strings/type001.smt2, test/regress/regress0/strings/unsound-0908.smt2, test/regress/regress1/strings/artemis-0512-nonterm.smt2, test/regress/regress1/strings/at001.smt2, test/regress/regress1/strings/fmf002.smt2, test/regress/regress1/strings/issue2429-code.smt2, test/regress/regress1/strings/kaluza-fl.smt2, test/regress/regress1/strings/loop005.smt2, test/regress/regress1/strings/loop007.smt2, test/regress/regress1/strings/loop008.smt2, test/regress/regress1/strings/re-agg-total1.smt2, test/regress/regress1/strings/reloop.smt2, test/regress/regress1/strings/substr001.smt2, test/regress/regress1/strings/type002.smt2, test/regress/regress1/strings/type003.smt2, test/unit/parser/parser_black.h",27,4,9,1.9678537874342616,10,3126,27,1440.962962962963,178,0,116,0,0,0
cvc5,c83ce8f341f88bbffcae8fd2bfbed5c33abf4f66,c324e6a40974040c02c8c9f948dbb332401b624c,Haniel Barbosa,hanielbbarbosa@gmail.com,2019-06-13 01:33:17,1560360797,Fix warning (#3053),3,1,src/proof/er/er_proof.cpp,1,1,1,-0.0,10,267,1,103.0,29,0,18,0,1,0
cvc5,c324e6a40974040c02c8c9f948dbb332401b624c,f61ad6919fc80cbc19fde9c295beb5082a6e0d79,Andrew Reynolds,andrew.j.reynolds@gmail.com,2019-06-13 13:08:15,1560402495,Shorten explanation for strings inference I_Norm_S (#3051),3,4,src/theory/strings/theory_strings.cpp,1,1,1,-0.0,10,4274,1,2100.0,242,0,78,0,0,0
cvc5,f61ad6919fc80cbc19fde9c295beb5082a6e0d79,2d478849d704f44f2a1f584dbc98d3731ca4e6ee,Andres Noetzli,andres.noetzli@gmail.com,2019-06-13 18:39:10,1560422350,"Add lemma for the range of values of str.indexof (#3054)

This commit adds a lemma that the value of `str.indexof(x, y, n)` must
be between -1 and `str.len(x)`.",9,0,src/theory/strings/theory_strings.cpp,1,1,1,-0.0,10,4283,1,2100.0,205,0,79,0,0,0
cvc5,2d478849d704f44f2a1f584dbc98d3731ca4e6ee,f6a2704f9e35f72c7e682fa71a3f64e79dd4e9e3,Andres Noetzli,andres.noetzli@gmail.com,2019-06-15 10:23:33,1560565413,"Use Ubuntu 16.04 on Travis (#3059)

Travis has started to switch to Ubuntu 16.04 [0]. We were explicitly
specifying 14.04 as the `dist` in our `.travis.yml`. This commit changes
that specification to 16.04, updates the Java version, and removes
a workaround for an old Travis issue.

[0] https://changelog.travis-ci.com/xenial-as-the-default-build-environment-99476",3,11,.travis.yml,1,0,1,-0.0,10,0,1,2009.0,206,0,0,0,1,0

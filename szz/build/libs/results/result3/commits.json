{"b6618892d80355ef219c4c652206dff43833fdc4":{"changes":{"src\/smt\/theory_arith_nl.h":"MODIFY","src\/smt\/theory_arith.h":"MODIFY"},"diff":{"src\/smt\/theory_arith_nl.h":[{"add":["1204","void theory_arith<Ext>::display_coeff_exprs(std::ostream & out, buffer<coeff_expr> const & p) const {","1205","    typename buffer<coeff_expr>::const_iterator it  = p.begin();","1206","    typename buffer<coeff_expr>::const_iterator end = p.end();","1222","bool theory_arith<Ext>::get_polynomial_info(buffer<coeff_expr> const & p, sbuffer<var_num_occs> & varinfo) {","1264","expr * theory_arith<Ext>::p2expr(buffer<coeff_expr> & p) {","1310","bool theory_arith<Ext>::in_monovariate_monomials(buffer<coeff_expr> & p, expr * var,","1330","    typename buffer<coeff_expr>::const_iterator it  = p.begin();","1331","    typename buffer<coeff_expr>::const_iterator end = p.end();","1420","unsigned theory_arith<Ext>::get_min_degree(buffer<coeff_expr> & p, expr * var) {","1425","    buffer<coeff_expr>::const_iterator it  = p.begin();","1426","    buffer<coeff_expr>::const_iterator end = p.end();","1477","expr * theory_arith<Ext>::horner(unsigned depth, buffer<coeff_expr> & p, expr * var) {","1485","    buffer<coeff_expr> e; \/\/ monomials\/x^d where var occurs with degree d","1486","    buffer<coeff_expr> r; \/\/ rest","1523"," expr * theory_arith<Ext>::cross_nested(unsigned depth, buffer<coeff_expr> & p, expr * var) {","1590","                buffer<coeff_expr> rest;","1614","bool theory_arith<Ext>::is_cross_nested_consistent(buffer<coeff_expr> & p) {","1708","    buffer<coeff_expr> p;"],"delete":["1204","void theory_arith<Ext>::display_coeff_exprs(std::ostream & out, sbuffer<coeff_expr> const & p) const {","1205","    typename sbuffer<coeff_expr>::const_iterator it  = p.begin();","1206","    typename sbuffer<coeff_expr>::const_iterator end = p.end();","1222","bool theory_arith<Ext>::get_polynomial_info(sbuffer<coeff_expr> const & p, sbuffer<var_num_occs> & varinfo) {","1264","expr * theory_arith<Ext>::p2expr(sbuffer<coeff_expr> & p) {","1310","bool theory_arith<Ext>::in_monovariate_monomials(sbuffer<coeff_expr> & p, expr * var,","1330","    typename sbuffer<coeff_expr>::const_iterator it  = p.begin();","1331","    typename sbuffer<coeff_expr>::const_iterator end = p.end();","1420","unsigned theory_arith<Ext>::get_min_degree(sbuffer<coeff_expr> & p, expr * var) {","1425","    sbuffer<coeff_expr>::const_iterator it  = p.begin();","1426","    sbuffer<coeff_expr>::const_iterator end = p.end();","1477","expr * theory_arith<Ext>::horner(unsigned depth, sbuffer<coeff_expr> & p, expr * var) {","1485","    sbuffer<coeff_expr> e; \/\/ monomials\/x^d where var occurs with degree d","1486","    sbuffer<coeff_expr> r; \/\/ rest","1523"," expr * theory_arith<Ext>::cross_nested(unsigned depth, sbuffer<coeff_expr> & p, expr * var) {","1590","                sbuffer<coeff_expr> rest;","1614","bool theory_arith<Ext>::is_cross_nested_consistent(sbuffer<coeff_expr> & p) {","1708","    sbuffer<coeff_expr> p;"]}],"src\/smt\/theory_arith.h":[{"add":["1002","        bool get_polynomial_info(buffer<coeff_expr> const & p, sbuffer<var_num_occs> & vars);","1003","        expr * p2expr(buffer<coeff_expr> & p);","1010","        unsigned get_min_degree(buffer<coeff_expr> & p, expr * var);","1012","        bool in_monovariate_monomials(buffer<coeff_expr> & p, expr * var, unsigned & i1, rational & c1, unsigned & n1, unsigned & i2, rational & c2, unsigned & n2);","1013","        expr * horner(unsigned depth, buffer<coeff_expr> & p, expr * var);","1014","        expr * cross_nested(unsigned depth, buffer<coeff_expr> & p, expr * var);","1015","        bool is_cross_nested_consistent(buffer<coeff_expr> & p);","1151","        void display_coeff_exprs(std::ostream & out, buffer<coeff_expr> const & p) const;"],"delete":["1002","        bool get_polynomial_info(sbuffer<coeff_expr> const & p, sbuffer<var_num_occs> & vars);","1003","        expr * p2expr(sbuffer<coeff_expr> & p);","1010","        unsigned get_min_degree(sbuffer<coeff_expr> & p, expr * var);","1012","        bool in_monovariate_monomials(sbuffer<coeff_expr> & p, expr * var, unsigned & i1, rational & c1, unsigned & n1, unsigned & i2, rational & c2, unsigned & n2);","1013","        expr * horner(unsigned depth, sbuffer<coeff_expr> & p, expr * var);","1014","        expr * cross_nested(unsigned depth, sbuffer<coeff_expr> & p, expr * var);","1015","        bool is_cross_nested_consistent(sbuffer<coeff_expr> & p);","1151","        void display_coeff_exprs(std::ostream & out, sbuffer<coeff_expr> const & p) const;"]}]}}}